Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-13.051402878724033 86] 72.94859712127597]
Train Case:   1 | Input/Output: [[1.5319576094367875 -7] -5.4680423905632125]
Train Case:   2 | Input/Output: [[-8.941869985213074 -16] -24.941869985213074]
Train Case:   3 | Input/Output: [[89.95681193137534 -33] 56.95681193137534]
Train Case:   4 | Input/Output: [[64.3398808779441 -96] -31.660119122055903]
Train Case:   5 | Input/Output: [[28.87891358236689 -66] -37.12108641763311]
Train Case:   6 | Input/Output: [[-99.25169758426655 20] -79.25169758426655]
Train Case:   7 | Input/Output: [[23.92721966711113 21] 44.92721966711113]
Train Case:   8 | Input/Output: [[27.62106576673189 39] 66.62106576673189]
Train Case:   9 | Input/Output: [[-35.053738390390194 -20] -55.053738390390194]
Train Case:  10 | Input/Output: [[-90.6354294126485 11] -79.6354294126485]
Train Case:  11 | Input/Output: [[-9.747528265468986 11] 1.2524717345310137]
Train Case:  12 | Input/Output: [[40.8400285930644 -44] -3.159971406935597]
Train Case:  13 | Input/Output: [[56.849704659074575 73] 129.84970465907458]
Train Case:  14 | Input/Output: [[-85.00227212967076 -40] -125.00227212967076]
Train Case:  15 | Input/Output: [[82.19499201591736 59] 141.19499201591736]
Train Case:  16 | Input/Output: [[-38.23534450124721 1] -37.23534450124721]
Train Case:  17 | Input/Output: [[33.28434124254221 89] 122.28434124254221]
Train Case:  18 | Input/Output: [[-37.741883747335336 71] 33.258116252664664]
Train Case:  19 | Input/Output: [[41.42186312599492 82] 123.42186312599492]
Train Case:  20 | Input/Output: [[46.14748752133008 60] 106.14748752133008]
Train Case:  21 | Input/Output: [[-79.8504274521726 92] 12.149572547827404]
Train Case:  22 | Input/Output: [[-54.60275401767261 -92] -146.60275401767262]
Train Case:  23 | Input/Output: [[-67.21408963210035 6] -61.214089632100354]
Train Case:  24 | Input/Output: [[7.213810886457054 -5] 2.213810886457054]
Test Case:   0 | Input/Output: [[6.645601007471285 94] 100.64560100747129]
Test Case:   1 | Input/Output: [[-7.99417661321354 15] 7.00582338678646]
Test Case:   2 | Input/Output: [[-19.500928437799132 79] 59.49907156220087]
Test Case:   3 | Input/Output: [[24.47776123168903 7] 31.47776123168903]
Test Case:   4 | Input/Output: [[32.552182775744484 -77] -44.447817224255516]
Test Case:   5 | Input/Output: [[37.900492078301056 -32] 5.900492078301056]
Test Case:   6 | Input/Output: [[-63.7644505310387 55] -8.764450531038698]
Test Case:   7 | Input/Output: [[-77.01291743063206 60] -17.012917430632058]
Test Case:   8 | Input/Output: [[-11.900799689308059 20] 8.099200310691941]
Test Case:   9 | Input/Output: [[-82.86454794813093 -57] -139.86454794813093]
Test Case:  10 | Input/Output: [[-91.72385470441348 -53] -144.7238547044135]
Test Case:  11 | Input/Output: [[64.39852632788958 24] 88.39852632788958]
Test Case:  12 | Input/Output: [[99.61410576115287 39] 138.61410576115287]
Test Case:  13 | Input/Output: [[-18.82625203202717 75] 56.17374796797283]
Test Case:  14 | Input/Output: [[-20.72733954081542 12] -8.727339540815422]
Test Case:  15 | Input/Output: [[-73.95638908806121 -20] -93.95638908806121]
Test Case:  16 | Input/Output: [[9.369949956568348 81] 90.36994995656835]
Test Case:  17 | Input/Output: [[-75.49827417574909 -78] -153.4982741757491]
Test Case:  18 | Input/Output: [[13.0770752356742 -29] -15.9229247643258]
Test Case:  19 | Input/Output: [[-54.84810650756506 22] -32.84810650756506]
Test Case:  20 | Input/Output: [[9.09050160205804 -14] -4.9094983979419595]
Test Case:  21 | Input/Output: [[-36.96685807291398 61] 24.03314192708602]
Test Case:  22 | Input/Output: [[45.05673920190932 5] 50.05673920190932]
Test Case:  23 | Input/Output: [[62.03981067939884 19] 81.03981067939884]
Test Case:  24 | Input/Output: [[-46.09664864353302 -35] -81.09664864353303]
Test Case:  25 | Input/Output: [[72.78346602994225 65] 137.78346602994225]
Test Case:  26 | Input/Output: [[-12.106775050536413 -62] -74.10677505053641]
Test Case:  27 | Input/Output: [[51.219814236545545 -19] 32.219814236545545]
Test Case:  28 | Input/Output: [[82.159942342591 -51] 31.159942342590995]
Test Case:  29 | Input/Output: [[9.836031656447375 71] 80.83603165644737]
Test Case:  30 | Input/Output: [[-25.16875903057351 -14] -39.16875903057351]
Test Case:  31 | Input/Output: [[30.004649973678426 95] 125.00464997367843]
Test Case:  32 | Input/Output: [[-6.33761704028062 14] 7.66238295971938]
Test Case:  33 | Input/Output: [[-90.58130896093218 -51] -141.58130896093218]
Test Case:  34 | Input/Output: [[-99.99013571330852 64] -35.99013571330852]
Test Case:  35 | Input/Output: [[19.594100153713285 -88] -68.40589984628672]
Test Case:  36 | Input/Output: [[-87.29567201771246 -49] -136.29567201771246]
Test Case:  37 | Input/Output: [[-11.731744106026511 27] 15.268255893973489]
Test Case:  38 | Input/Output: [[-37.88214178893043 -46] -83.88214178893043]
Test Case:  39 | Input/Output: [[-47.862234319756645 -76] -123.86223431975665]
Test Case:  40 | Input/Output: [[80.81075200230171 -25] 55.81075200230171]
Test Case:  41 | Input/Output: [[-74.18674958913655 -95] -169.18674958913655]
Test Case:  42 | Input/Output: [[15.06436999706699 -77] -61.93563000293301]
Test Case:  43 | Input/Output: [[52.2184409555218 -26] 26.2184409555218]
Test Case:  44 | Input/Output: [[-88.72095398994877 50] -38.72095398994877]
Test Case:  45 | Input/Output: [[24.45391288580734 22] 46.45391288580734]
Test Case:  46 | Input/Output: [[-6.551249146596504 -85] -91.5512491465965]
Test Case:  47 | Input/Output: [[7.31361356180453 -76] -68.68638643819547]
Test Case:  48 | Input/Output: [[-17.40073593277785 -42] -59.40073593277785]
Test Case:  49 | Input/Output: [[23.969275283185084 51] 74.96927528318508]
Test Case:  50 | Input/Output: [[-14.737305215396177 -39] -53.73730521539618]
Test Case:  51 | Input/Output: [[-98.03038414797251 72] -26.030384147972512]
Test Case:  52 | Input/Output: [[58.00730033975711 59] 117.00730033975711]
Test Case:  53 | Input/Output: [[-70.7081547836917 96] 25.291845216308303]
Test Case:  54 | Input/Output: [[-35.733806911475895 23] -12.733806911475895]
Test Case:  55 | Input/Output: [[-30.88977147117744 9] -21.88977147117744]
Test Case:  56 | Input/Output: [[-9.264214372746224 93] 83.73578562725378]
Test Case:  57 | Input/Output: [[-3.634876419175768 77] 73.36512358082423]
Test Case:  58 | Input/Output: [[48.30216177452155 -33] 15.30216177452155]
Test Case:  59 | Input/Output: [[44.148299221743116 -89] -44.851700778256884]
Test Case:  60 | Input/Output: [[60.145791030464295 -42] 18.145791030464295]
Test Case:  61 | Input/Output: [[-27.496205168294722 16] -11.496205168294722]
Test Case:  62 | Input/Output: [[-12.916290982466421 97] 84.08370901753358]
Test Case:  63 | Input/Output: [[-49.277430480828954 -13] -62.277430480828954]
Test Case:  64 | Input/Output: [[-96.26270850168588 -61] -157.2627085016859]
Test Case:  65 | Input/Output: [[87.32256364460943 -42] 45.32256364460943]
Test Case:  66 | Input/Output: [[-52.156389554599045 8] -44.156389554599045]
Test Case:  67 | Input/Output: [[50.757005477069555 -36] 14.757005477069555]
Test Case:  68 | Input/Output: [[36.5640977348055 64] 100.5640977348055]
Test Case:  69 | Input/Output: [[-9.635479342634639 94] 84.36452065736536]
Test Case:  70 | Input/Output: [[78.89694772646865 89] 167.89694772646865]
Test Case:  71 | Input/Output: [[33.426733649161065 -81] -47.573266350838935]
Test Case:  72 | Input/Output: [[40.558303942496764 -13] 27.558303942496764]
Test Case:  73 | Input/Output: [[78.76542650618279 97] 175.7654265061828]
Test Case:  74 | Input/Output: [[-72.26579499596917 -65] -137.26579499596917]
Test Case:  75 | Input/Output: [[-66.05543336196993 -86] -152.05543336196993]
Test Case:  76 | Input/Output: [[41.14838631686277 98] 139.14838631686277]
Test Case:  77 | Input/Output: [[25.998815778453817 25] 50.99881577845382]
Test Case:  78 | Input/Output: [[75.75605719064762 -50] 25.756057190647624]
Test Case:  79 | Input/Output: [[-8.398467985205443 92] 83.60153201479456]
Test Case:  80 | Input/Output: [[-43.164462597517804 -86] -129.1644625975178]
Test Case:  81 | Input/Output: [[-59.590682070890466 -93] -152.59068207089047]
Test Case:  82 | Input/Output: [[-19.48398035549242 95] 75.51601964450758]
Test Case:  83 | Input/Output: [[59.06281372863509 -57] 2.062813728635092]
Test Case:  84 | Input/Output: [[43.509312629046605 25] 68.5093126290466]
Test Case:  85 | Input/Output: [[51.395037482409265 -1] 50.395037482409265]
Test Case:  86 | Input/Output: [[84.13201059165885 77] 161.13201059165885]
Test Case:  87 | Input/Output: [[-95.45945370514055 53] -42.45945370514055]
Test Case:  88 | Input/Output: [[34.94338910217087 42] 76.94338910217087]
Test Case:  89 | Input/Output: [[13.884807876356248 -39] -25.11519212364375]
Test Case:  90 | Input/Output: [[-72.68808855505529 -62] -134.6880885550553]
Test Case:  91 | Input/Output: [[17.48850572648513 -33] -15.51149427351487]
Test Case:  92 | Input/Output: [[-47.5360493774833 -71] -118.5360493774833]
Test Case:  93 | Input/Output: [[62.060597406767755 -26] 36.060597406767755]
Test Case:  94 | Input/Output: [[-17.96904112522961 9] -8.969041125229609]
Test Case:  95 | Input/Output: [[41.02684623818229 -25] 16.026846238182287]
Test Case:  96 | Input/Output: [[-23.103859842443924 -73] -96.10385984244392]
Test Case:  97 | Input/Output: [[-71.50096248159818 -51] -122.50096248159818]
Test Case:  98 | Input/Output: [[42.29345718029677 33] 75.29345718029677]
Test Case:  99 | Input/Output: [[1.9830325958862574 66] 67.98303259588626]
Test Case: 100 | Input/Output: [[-45.673866145269336 -75] -120.67386614526933]
Test Case: 101 | Input/Output: [[-65.7329515684323 41] -24.7329515684323]
Test Case: 102 | Input/Output: [[2.4963924069113546 3] 5.4963924069113546]
Test Case: 103 | Input/Output: [[-95.98667347365848 44] -51.986673473658485]
Test Case: 104 | Input/Output: [[34.79776924972103 -73] -38.20223075027897]
Test Case: 105 | Input/Output: [[22.08570475235301 -13] 9.08570475235301]
Test Case: 106 | Input/Output: [[-21.454749824730143 -73] -94.45474982473014]
Test Case: 107 | Input/Output: [[-46.82248619899383 -27] -73.82248619899383]
Test Case: 108 | Input/Output: [[93.55337163019274 64] 157.55337163019274]
Test Case: 109 | Input/Output: [[-72.96772023105436 -13] -85.96772023105436]
Test Case: 110 | Input/Output: [[37.50755152784501 -91] -53.49244847215499]
Test Case: 111 | Input/Output: [[67.20116039996077 35] 102.20116039996077]
Test Case: 112 | Input/Output: [[40.05653419019555 -58] -17.94346580980445]
Test Case: 113 | Input/Output: [[66.19323965614373 -38] 28.19323965614373]
Test Case: 114 | Input/Output: [[-23.55980272783023 -21] -44.55980272783023]
Test Case: 115 | Input/Output: [[50.84091131388317 -96] -45.15908868611683]
Test Case: 116 | Input/Output: [[70.36286371609563 -31] 39.36286371609563]
Test Case: 117 | Input/Output: [[40.31846141022251 97] 137.3184614102225]
Test Case: 118 | Input/Output: [[-48.29356692162901 57] 8.706433078370992]
Test Case: 119 | Input/Output: [[-68.42846160873822 -87] -155.42846160873822]
Test Case: 120 | Input/Output: [[-62.63452324288632 39] -23.634523242886317]
Test Case: 121 | Input/Output: [[35.75929144908446 -33] 2.759291449084458]
Test Case: 122 | Input/Output: [[57.572017069045955 3] 60.572017069045955]
Test Case: 123 | Input/Output: [[76.56634411524709 -79] -2.433655884752909]
Test Case: 124 | Input/Output: [[8.05957236004528 43] 51.05957236004528]
Test Case: 125 | Input/Output: [[50.77118966210497 67] 117.77118966210497]
Test Case: 126 | Input/Output: [[80.12288602976034 72] 152.12288602976034]
Test Case: 127 | Input/Output: [[-28.850929823099918 -51] -79.85092982309992]
Test Case: 128 | Input/Output: [[26.219109308259775 57] 83.21910930825977]
Test Case: 129 | Input/Output: [[73.7664705351275 72] 145.7664705351275]
Test Case: 130 | Input/Output: [[-45.664342876012086 42] -3.6643428760120855]
Test Case: 131 | Input/Output: [[14.307156729005158 -62] -47.69284327099484]
Test Case: 132 | Input/Output: [[-86.58380479212721 -29] -115.58380479212721]
Test Case: 133 | Input/Output: [[-59.04382598790367 2] -57.04382598790367]
Test Case: 134 | Input/Output: [[-4.684996032403845 -61] -65.68499603240384]
Test Case: 135 | Input/Output: [[-70.13064045066868 100] 29.86935954933132]
Test Case: 136 | Input/Output: [[84.74904807355605 49] 133.74904807355605]
Test Case: 137 | Input/Output: [[23.234950389738884 -99] -75.76504961026112]
Test Case: 138 | Input/Output: [[-31.097361636290287 -23] -54.09736163629029]
Test Case: 139 | Input/Output: [[57.000087119168 -44] 13.000087119168]
Test Case: 140 | Input/Output: [[-38.508583487141166 -82] -120.50858348714117]
Test Case: 141 | Input/Output: [[70.09977443654032 1] 71.09977443654032]
Test Case: 142 | Input/Output: [[26.963773308684864 18] 44.963773308684864]
Test Case: 143 | Input/Output: [[52.43538527383134 -74] -21.564614726168656]
Test Case: 144 | Input/Output: [[60.623686513348474 57] 117.62368651334847]
Test Case: 145 | Input/Output: [[-96.23148287671881 36] -60.231482876718815]
Test Case: 146 | Input/Output: [[-75.55320565375574 87] 11.44679434624426]
Test Case: 147 | Input/Output: [[83.13190897849415 16] 99.13190897849415]
Test Case: 148 | Input/Output: [[-16.414871232126018 75] 58.58512876787398]
Test Case: 149 | Input/Output: [[47.86609587688136 78] 125.86609587688136]
Test Case: 150 | Input/Output: [[-56.09984566019437 95] 38.90015433980563]
Test Case: 151 | Input/Output: [[40.958237985638874 86] 126.95823798563887]
Test Case: 152 | Input/Output: [[80.32395357173908 -46] 34.32395357173908]
Test Case: 153 | Input/Output: [[-60.75539035443056 -65] -125.75539035443056]
Test Case: 154 | Input/Output: [[-91.72250105143753 40] -51.72250105143753]
Test Case: 155 | Input/Output: [[67.89480734189726 91] 158.89480734189726]
Test Case: 156 | Input/Output: [[-36.044543848225665 37] 0.9554561517743352]
Test Case: 157 | Input/Output: [[-87.63848037857625 26] -61.63848037857625]
Test Case: 158 | Input/Output: [[-16.369675540048974 -29] -45.36967554004897]
Test Case: 159 | Input/Output: [[46.2125601736723 -1] 45.2125601736723]
Test Case: 160 | Input/Output: [[-77.0930454437802 -5] -82.0930454437802]
Test Case: 161 | Input/Output: [[37.91017994747398 7] 44.91017994747398]
Test Case: 162 | Input/Output: [[65.89605874735557 -78] -12.103941252644432]
Test Case: 163 | Input/Output: [[43.615942211125684 -46] -2.3840577888743155]
Test Case: 164 | Input/Output: [[27.19294858053287 -78] -50.80705141946713]
Test Case: 165 | Input/Output: [[83.55097258969221 70] 153.5509725896922]
Test Case: 166 | Input/Output: [[89.49263142778915 -56] 33.49263142778915]
Test Case: 167 | Input/Output: [[1.795490796698445 52] 53.795490796698445]
Test Case: 168 | Input/Output: [[46.375258614454765 49] 95.37525861445476]
Test Case: 169 | Input/Output: [[3.4374739505227865 -68] -64.56252604947721]
Test Case: 170 | Input/Output: [[-68.33880819865921 100] 31.66119180134079]
Test Case: 171 | Input/Output: [[-38.37838049548707 -73] -111.37838049548708]
Test Case: 172 | Input/Output: [[-86.56777554597971 60] -26.567775545979714]
Test Case: 173 | Input/Output: [[36.694316524886176 14] 50.694316524886176]
Test Case: 174 | Input/Output: [[28.286650063079378 -21] 7.286650063079378]
Test Case: 175 | Input/Output: [[-15.521350792490793 -26] -41.52135079249079]
Test Case: 176 | Input/Output: [[-99.27746618246105 59] -40.277466182461055]
Test Case: 177 | Input/Output: [[75.88837298438358 21] 96.88837298438358]
Test Case: 178 | Input/Output: [[42.293130913761104 63] 105.2931309137611]
Test Case: 179 | Input/Output: [[-75.99165469186444 -95] -170.99165469186443]
Test Case: 180 | Input/Output: [[93.73157528449764 -79] 14.731575284497637]
Test Case: 181 | Input/Output: [[-29.161080514103205 27] -2.1610805141032046]
Test Case: 182 | Input/Output: [[-0.12632984510474898 -4] -4.126329845104749]
Test Case: 183 | Input/Output: [[-74.15231293337301 -16] -90.15231293337301]
Test Case: 184 | Input/Output: [[-68.42917089659309 -57] -125.42917089659309]
Test Case: 185 | Input/Output: [[13.535061832241695 -39] -25.464938167758305]
Test Case: 186 | Input/Output: [[-50.14261396411142 86] 35.85738603588858]
Test Case: 187 | Input/Output: [[-46.48998571490861 -46] -92.48998571490861]
Test Case: 188 | Input/Output: [[-2.7506102899331353 -37] -39.750610289933135]
Test Case: 189 | Input/Output: [[-29.354238909583614 -50] -79.35423890958361]
Test Case: 190 | Input/Output: [[33.778068657872524 82] 115.77806865787252]
Test Case: 191 | Input/Output: [[3.285680954737785 -68] -64.71431904526222]
Test Case: 192 | Input/Output: [[47.51113589006428 38] 85.51113589006428]
Test Case: 193 | Input/Output: [[77.60891191533841 -65] 12.60891191533841]
Test Case: 194 | Input/Output: [[56.37819409811223 88] 144.37819409811223]
Test Case: 195 | Input/Output: [[30.268007473433613 -69] -38.73199252656639]
Test Case: 196 | Input/Output: [[-93.15750376589777 -92] -185.1575037658978]
Test Case: 197 | Input/Output: [[-25.700063057595173 65] 39.29993694240483]
Test Case: 198 | Input/Output: [[-35.86532806391014 -12] -47.86532806391014]
Test Case: 199 | Input/Output: [[72.3775967021206 73] 145.3775967021206]
Test Case: 200 | Input/Output: [[97.50588382299838 -71] 26.505883822998385]
Test Case: 201 | Input/Output: [[-91.14823441296144 34] -57.14823441296144]
Test Case: 202 | Input/Output: [[89.81221880969903 -6] 83.81221880969903]
Test Case: 203 | Input/Output: [[-52.4107251069621 16] -36.4107251069621]
Test Case: 204 | Input/Output: [[-81.36809831459615 -2] -83.36809831459615]
Test Case: 205 | Input/Output: [[90.18413777689494 -69] 21.184137776894943]
Test Case: 206 | Input/Output: [[-52.390518514503626 59] 6.609481485496374]
Test Case: 207 | Input/Output: [[-82.83864009813718 -62] -144.83864009813718]
Test Case: 208 | Input/Output: [[-81.64867851072914 -64] -145.64867851072916]
Test Case: 209 | Input/Output: [[8.47136325769624 88] 96.47136325769624]
Test Case: 210 | Input/Output: [[-84.61883632087074 -26] -110.61883632087074]
Test Case: 211 | Input/Output: [[-40.94745422147356 58] 17.052545778526436]
Test Case: 212 | Input/Output: [[84.71320211602341 -73] 11.71320211602341]
Test Case: 213 | Input/Output: [[-70.91209718699847 80] 9.087902813001534]
Test Case: 214 | Input/Output: [[24.021940914560332 95] 119.02194091456033]
Test Case: 215 | Input/Output: [[59.62209234177291 78] 137.6220923417729]
Test Case: 216 | Input/Output: [[-22.80364356937676 -52] -74.80364356937676]
Test Case: 217 | Input/Output: [[-68.31244688497125 -40] -108.31244688497125]
Test Case: 218 | Input/Output: [[-84.65520453885027 1] -83.65520453885027]
Test Case: 219 | Input/Output: [[53.955387845109215 30] 83.95538784510921]
Test Case: 220 | Input/Output: [[-41.85626707038699 55] 13.143732929613009]
Test Case: 221 | Input/Output: [[-7.8189792608312985 80] 72.1810207391687]
Test Case: 222 | Input/Output: [[91.37311298655933 0] 91.37311298655933]
Test Case: 223 | Input/Output: [[76.13875135106164 -73] 3.138751351061643]
Test Case: 224 | Input/Output: [[-14.4036635018185 -85] -99.4036635018185]
Test Case: 225 | Input/Output: [[8.091119539415658 43] 51.09111953941566]
Test Case: 226 | Input/Output: [[-27.037560490132392 -66] -93.03756049013239]
Test Case: 227 | Input/Output: [[-7.2317461108947185 74] 66.76825388910528]
Test Case: 228 | Input/Output: [[91.94219897401817 -93] -1.0578010259818313]
Test Case: 229 | Input/Output: [[68.40486558664273 5] 73.40486558664273]
Test Case: 230 | Input/Output: [[23.292760612348758 76] 99.29276061234876]
Test Case: 231 | Input/Output: [[3.2009504341236976 42] 45.2009504341237]
Test Case: 232 | Input/Output: [[62.48769436750982 22] 84.48769436750982]
Test Case: 233 | Input/Output: [[10.478200747355146 -17] -6.521799252644854]
Test Case: 234 | Input/Output: [[-43.328798059678505 -8] -51.328798059678505]
Test Case: 235 | Input/Output: [[76.83042570320399 37] 113.83042570320399]
Test Case: 236 | Input/Output: [[-0.5868617275048393 -10] -10.58686172750484]
Test Case: 237 | Input/Output: [[-28.636478104085512 98] 69.36352189591449]
Test Case: 238 | Input/Output: [[-25.848763472579094 11] -14.848763472579094]
Test Case: 239 | Input/Output: [[69.202902177633 68] 137.202902177633]
Test Case: 240 | Input/Output: [[-50.07128349543366 73] 22.92871650456634]
Test Case: 241 | Input/Output: [[-18.11221901997358 69] 50.88778098002642]
Test Case: 242 | Input/Output: [[-11.070852756416372 96] 84.92914724358363]
Test Case: 243 | Input/Output: [[39.748118845756494 54] 93.7481188457565]
Test Case: 244 | Input/Output: [[-76.92817513559571 55] -21.92817513559571]
Test Case: 245 | Input/Output: [[-49.71392135986632 -88] -137.71392135986633]
Test Case: 246 | Input/Output: [[74.18282702602843 97] 171.18282702602843]
Test Case: 247 | Input/Output: [[49.54830246750163 -68] -18.451697532498372]
Test Case: 248 | Input/Output: [[-54.054997624423166 33] -21.054997624423166]
Test Case: 249 | Input/Output: [[-57.95302306650949 -45] -102.95302306650949]
Test Case: 250 | Input/Output: [[-61.42791750216574 34] -27.42791750216574]
Test Case: 251 | Input/Output: [[8.354498656234384 0] 8.354498656234384]
Test Case: 252 | Input/Output: [[-73.71859935611513 -13] -86.71859935611513]
Test Case: 253 | Input/Output: [[-17.880658307416226 -86] -103.88065830741623]
Test Case: 254 | Input/Output: [[-81.7610485304453 -61] -142.7610485304453]
Test Case: 255 | Input/Output: [[-71.29093290491389 65] -6.290932904913888]
Test Case: 256 | Input/Output: [[-9.188672584636606 -64] -73.1886725846366]
Test Case: 257 | Input/Output: [[1.2215517355761705 97] 98.22155173557617]
Test Case: 258 | Input/Output: [[-13.008650055815679 88] 74.99134994418432]
Test Case: 259 | Input/Output: [[-9.126801486352434 -16] -25.126801486352434]
Test Case: 260 | Input/Output: [[76.20496912134584 -29] 47.20496912134584]
Test Case: 261 | Input/Output: [[54.85835479582005 -100] -45.14164520417995]
Test Case: 262 | Input/Output: [[64.62625523935094 49] 113.62625523935094]
Test Case: 263 | Input/Output: [[20.827293171407575 -80] -59.172706828592425]
Test Case: 264 | Input/Output: [[-87.71299315606609 11] -76.71299315606609]
Test Case: 265 | Input/Output: [[-19.536633701922042 96] 76.46336629807796]
Test Case: 266 | Input/Output: [[7.2416068929024675 -39] -31.758393107097532]
Test Case: 267 | Input/Output: [[-21.73046498467852 11] -10.73046498467852]
Test Case: 268 | Input/Output: [[-91.33531047998373 -37] -128.33531047998372]
Test Case: 269 | Input/Output: [[49.32779125393557 68] 117.32779125393557]
Test Case: 270 | Input/Output: [[84.15637524544357 0] 84.15637524544357]
Test Case: 271 | Input/Output: [[54.97670271915288 -2] 52.97670271915288]
Test Case: 272 | Input/Output: [[-61.96065552582688 -95] -156.9606555258269]
Test Case: 273 | Input/Output: [[-75.64120119234217 -69] -144.64120119234218]
Test Case: 274 | Input/Output: [[52.2347740587484 44] 96.2347740587484]
Test Case: 275 | Input/Output: [[-47.55389315596852 -12] -59.55389315596852]
Test Case: 276 | Input/Output: [[-55.70491796289061 -44] -99.70491796289062]
Test Case: 277 | Input/Output: [[58.06263849187022 -3] 55.06263849187022]
Test Case: 278 | Input/Output: [[-74.23716355038175 -57] -131.23716355038175]
Test Case: 279 | Input/Output: [[-33.550995240877526 69] 35.449004759122474]
Test Case: 280 | Input/Output: [[-21.951285147781647 97] 75.04871485221835]
Test Case: 281 | Input/Output: [[-51.15270277204886 9] -42.15270277204886]
Test Case: 282 | Input/Output: [[1.3522660327067513 -70] -68.64773396729325]
Test Case: 283 | Input/Output: [[4.940891347684783 64] 68.94089134768478]
Test Case: 284 | Input/Output: [[15.068449392123668 -23] -7.931550607876332]
Test Case: 285 | Input/Output: [[-87.01055140508586 40] -47.01055140508586]
Test Case: 286 | Input/Output: [[-89.35569743516267 -34] -123.35569743516267]
Test Case: 287 | Input/Output: [[-92.84514580830209 -51] -143.8451458083021]
Test Case: 288 | Input/Output: [[-41.57927994776334 3] -38.57927994776334]
Test Case: 289 | Input/Output: [[6.155002180303342 -67] -60.84499781969666]
Test Case: 290 | Input/Output: [[84.33602519016253 44] 128.33602519016253]
Test Case: 291 | Input/Output: [[-37.98471203527398 -73] -110.98471203527399]
Test Case: 292 | Input/Output: [[-88.47933071022894 30] -58.479330710228936]
Test Case: 293 | Input/Output: [[37.208389429246324 -58] -20.791610570753676]
Test Case: 294 | Input/Output: [[-75.2754843409738 -10] -85.2754843409738]
Test Case: 295 | Input/Output: [[-79.70911678124926 -28] -107.70911678124926]
Test Case: 296 | Input/Output: [[-86.48114612632942 -50] -136.4811461263294]
Test Case: 297 | Input/Output: [[59.24159805773829 -50] 9.241598057738287]
Test Case: 298 | Input/Output: [[-27.133681303979373 -94] -121.13368130397937]
Test Case: 299 | Input/Output: [[16.05058505833003 43] 59.05058505833003]
Test Case: 300 | Input/Output: [[97.40576031398555 -83] 14.405760313985553]
Test Case: 301 | Input/Output: [[-34.81520769987432 32] -2.815207699874321]
Test Case: 302 | Input/Output: [[-81.05264958615695 35] -46.052649586156946]
Test Case: 303 | Input/Output: [[-25.584169471200497 -34] -59.5841694712005]
Test Case: 304 | Input/Output: [[87.14690705623323 42] 129.14690705623323]
Test Case: 305 | Input/Output: [[53.72616043250764 -13] 40.72616043250764]
Test Case: 306 | Input/Output: [[45.73207027433875 -89] -43.26792972566125]
Test Case: 307 | Input/Output: [[94.3305001569066 -96] -1.669499843093405]
Test Case: 308 | Input/Output: [[-64.97461288074643 33] -31.974612880746434]
Test Case: 309 | Input/Output: [[-71.11188911647656 6] -65.11188911647656]
Test Case: 310 | Input/Output: [[88.85411964223496 14] 102.85411964223496]
Test Case: 311 | Input/Output: [[14.617061786771217 67] 81.61706178677122]
Test Case: 312 | Input/Output: [[-27.58371932873176 -21] -48.58371932873176]
Test Case: 313 | Input/Output: [[-54.485618119823485 19] -35.485618119823485]
Test Case: 314 | Input/Output: [[-12.734981629883862 14] 1.2650183701161382]
Test Case: 315 | Input/Output: [[51.339271173728775 62] 113.33927117372878]
Test Case: 316 | Input/Output: [[-94.67351979593232 90] -4.673519795932322]
Test Case: 317 | Input/Output: [[49.758043797616125 -88] -38.241956202383875]
Test Case: 318 | Input/Output: [[15.986520808474111 98] 113.98652080847411]
Test Case: 319 | Input/Output: [[0.1991783275277612 45] 45.19917832752776]
Test Case: 320 | Input/Output: [[-74.99698028689338 18] -56.996980286893375]
Test Case: 321 | Input/Output: [[-39.425902790995735 89] 49.574097209004265]
Test Case: 322 | Input/Output: [[85.45526105837112 -11] 74.45526105837112]
Test Case: 323 | Input/Output: [[-35.57510859601054 -97] -132.57510859601052]
Test Case: 324 | Input/Output: [[68.08519691913219 38] 106.08519691913219]
Test Case: 325 | Input/Output: [[-42.523737055693125 1] -41.523737055693125]
Test Case: 326 | Input/Output: [[62.37485134870312 50] 112.37485134870312]
Test Case: 327 | Input/Output: [[-81.78190291251167 -71] -152.78190291251167]
Test Case: 328 | Input/Output: [[-58.896210169730054 -64] -122.89621016973005]
Test Case: 329 | Input/Output: [[41.878761108455535 56] 97.87876110845554]
Test Case: 330 | Input/Output: [[95.81004987514922 -43] 52.81004987514922]
Test Case: 331 | Input/Output: [[-87.16137391913074 -35] -122.16137391913074]
Test Case: 332 | Input/Output: [[53.916803737069245 -73] -19.083196262930755]
Test Case: 333 | Input/Output: [[28.425806062626577 41] 69.42580606262658]
Test Case: 334 | Input/Output: [[-59.679142507989866 -49] -108.67914250798987]
Test Case: 335 | Input/Output: [[-1.8417281677019588 12] 10.158271832298041]
Test Case: 336 | Input/Output: [[67.16004852466409 12] 79.16004852466409]
Test Case: 337 | Input/Output: [[58.09629226104644 -3] 55.09629226104644]
Test Case: 338 | Input/Output: [[-9.106497247202427 93] 83.89350275279757]
Test Case: 339 | Input/Output: [[30.448023425736835 -11] 19.448023425736835]
Test Case: 340 | Input/Output: [[-99.68602630791376 -87] -186.68602630791378]
Test Case: 341 | Input/Output: [[-29.01091055416589 78] 48.98908944583411]
Test Case: 342 | Input/Output: [[-49.80695770034487 94] 44.19304229965513]
Test Case: 343 | Input/Output: [[14.7261363563278 100] 114.7261363563278]
Test Case: 344 | Input/Output: [[-47.339949662403 6] -41.339949662403]
Test Case: 345 | Input/Output: [[6.4906947510425965 -74] -67.5093052489574]
Test Case: 346 | Input/Output: [[-45.1932467123372 79] 33.8067532876628]
Test Case: 347 | Input/Output: [[-86.19617762127471 -98] -184.19617762127473]
Test Case: 348 | Input/Output: [[30.89925604741879 -30] 0.8992560474187883]
Test Case: 349 | Input/Output: [[-48.75574298054759 -41] -89.75574298054758]
Test Case: 350 | Input/Output: [[66.6118346867512 -43] 23.611834686751195]
Test Case: 351 | Input/Output: [[-61.16215358333903 -43] -104.16215358333903]
Test Case: 352 | Input/Output: [[69.02207958050707 45] 114.02207958050707]
Test Case: 353 | Input/Output: [[78.69942803830983 -47] 31.699428038309833]
Test Case: 354 | Input/Output: [[-49.697582672174654 19] -30.697582672174654]
Test Case: 355 | Input/Output: [[11.334747456694075 -31] -19.665252543305925]
Test Case: 356 | Input/Output: [[-6.836684889708906 75] 68.1633151102911]
Test Case: 357 | Input/Output: [[-51.61955366679574 -21] -72.61955366679574]
Test Case: 358 | Input/Output: [[-24.124026622251108 -70] -94.12402662225111]
Test Case: 359 | Input/Output: [[19.103355713412753 -8] 11.103355713412753]
Test Case: 360 | Input/Output: [[29.519256811253 91] 120.519256811253]
Test Case: 361 | Input/Output: [[60.92983705904939 0] 60.92983705904939]
Test Case: 362 | Input/Output: [[-46.72968400825188 -68] -114.72968400825188]
Test Case: 363 | Input/Output: [[-63.68267185177632 29] -34.68267185177632]
Test Case: 364 | Input/Output: [[7.308725210464289 15] 22.30872521046429]
Test Case: 365 | Input/Output: [[75.73152369704198 -84] -8.268476302958021]
Test Case: 366 | Input/Output: [[-86.88024435470663 -86] -172.88024435470663]
Test Case: 367 | Input/Output: [[-88.75056076343878 -44] -132.75056076343878]
Test Case: 368 | Input/Output: [[9.472001517730263 -95] -85.52799848226974]
Test Case: 369 | Input/Output: [[33.82447904428179 14] 47.82447904428179]
Test Case: 370 | Input/Output: [[-10.525133788674125 83] 72.47486621132587]
Test Case: 371 | Input/Output: [[48.75361650000343 73] 121.75361650000343]
Test Case: 372 | Input/Output: [[6.923161731791311 10] 16.92316173179131]
Test Case: 373 | Input/Output: [[-14.243887983379125 -56] -70.24388798337912]
Test Case: 374 | Input/Output: [[-91.52264905883524 -73] -164.52264905883524]
Test Case: 375 | Input/Output: [[83.77572447488006 -91] -7.2242755251199355]
Test Case: 376 | Input/Output: [[85.8810920083597 47] 132.8810920083597]
Test Case: 377 | Input/Output: [[26.81108835206514 -37] -10.188911647934859]
Test Case: 378 | Input/Output: [[-33.48279053908331 78] 44.51720946091669]
Test Case: 379 | Input/Output: [[22.738981340558468 15] 37.73898134055847]
Test Case: 380 | Input/Output: [[-11.404233010461652 -42] -53.40423301046165]
Test Case: 381 | Input/Output: [[89.42212024262298 78] 167.42212024262298]
Test Case: 382 | Input/Output: [[94.72716683218653 -82] 12.727166832186526]
Test Case: 383 | Input/Output: [[-96.78328169288817 -92] -188.78328169288818]
Test Case: 384 | Input/Output: [[-24.425033079529456 -87] -111.42503307952946]
Test Case: 385 | Input/Output: [[28.008470566033992 92] 120.00847056603399]
Test Case: 386 | Input/Output: [[-21.24599349890792 86] 64.75400650109208]
Test Case: 387 | Input/Output: [[-66.71594485950123 -41] -107.71594485950123]
Test Case: 388 | Input/Output: [[-21.71069480289853 50] 28.28930519710147]
Test Case: 389 | Input/Output: [[52.12303597846346 -46] 6.123035978463463]
Test Case: 390 | Input/Output: [[-12.142455643269741 46] 33.85754435673026]
Test Case: 391 | Input/Output: [[-60.850538915517504 -28] -88.8505389155175]
Test Case: 392 | Input/Output: [[-94.56998523769914 -29] -123.56998523769914]
Test Case: 393 | Input/Output: [[59.68033031926939 -12] 47.68033031926939]
Test Case: 394 | Input/Output: [[-76.70022831653597 -12] -88.70022831653597]
Test Case: 395 | Input/Output: [[56.896888946179956 -99] -42.103111053820044]
Test Case: 396 | Input/Output: [[-58.75864619015585 32] -26.75864619015585]
Test Case: 397 | Input/Output: [[70.97529462599789 -28] 42.97529462599789]
Test Case: 398 | Input/Output: [[6.202067324624579 69] 75.20206732462458]
Test Case: 399 | Input/Output: [[-71.23049952185076 100] 28.76950047814924]
Test Case: 400 | Input/Output: [[79.90177274729712 94] 173.90177274729712]
Test Case: 401 | Input/Output: [[-64.84103240524638 20] -44.84103240524638]
Test Case: 402 | Input/Output: [[17.757666882197952 -34] -16.242333117802048]
Test Case: 403 | Input/Output: [[-5.274384239758433 27] 21.725615760241567]
Test Case: 404 | Input/Output: [[47.19492476767482 -4] 43.19492476767482]
Test Case: 405 | Input/Output: [[-25.56469883061088 100] 74.43530116938912]
Test Case: 406 | Input/Output: [[47.534999661349644 -57] -9.465000338650356]
Test Case: 407 | Input/Output: [[-83.1454026521256 80] -3.145402652125597]
Test Case: 408 | Input/Output: [[-42.05031385705058 -4] -46.05031385705058]
Test Case: 409 | Input/Output: [[95.32462304315007 -54] 41.32462304315007]
Test Case: 410 | Input/Output: [[11.278459761103193 -73] -61.72154023889681]
Test Case: 411 | Input/Output: [[0.7546697206093569 -82] -81.24533027939064]
Test Case: 412 | Input/Output: [[-88.15356335068772 6] -82.15356335068772]
Test Case: 413 | Input/Output: [[99.44621599509716 -33] 66.44621599509716]
Test Case: 414 | Input/Output: [[-56.83465623961486 -17] -73.83465623961486]
Test Case: 415 | Input/Output: [[-88.1106867945101 -62] -150.11068679451012]
Test Case: 416 | Input/Output: [[-96.87515589572 -86] -182.87515589572]
Test Case: 417 | Input/Output: [[52.800204979293284 -48] 4.800204979293284]
Test Case: 418 | Input/Output: [[-18.0218713239356 98] 79.9781286760644]
Test Case: 419 | Input/Output: [[44.9011886636512 86] 130.9011886636512]
Test Case: 420 | Input/Output: [[53.43928938830774 -58] -4.560710611692258]
Test Case: 421 | Input/Output: [[-24.690130000350635 -88] -112.69013000035063]
Test Case: 422 | Input/Output: [[-7.632372870965256 -60] -67.63237287096526]
Test Case: 423 | Input/Output: [[13.021238124435314 -9] 4.021238124435314]
Test Case: 424 | Input/Output: [[35.688384681940335 4] 39.688384681940335]
Test Case: 425 | Input/Output: [[-17.018996181592883 -13] -30.018996181592883]
Test Case: 426 | Input/Output: [[61.71878189827197 43] 104.71878189827197]
Test Case: 427 | Input/Output: [[-84.97265288763123 79] -5.972652887631227]
Test Case: 428 | Input/Output: [[16.560606085173404 -34] -17.439393914826596]
Test Case: 429 | Input/Output: [[-9.48165190665027 -42] -51.48165190665027]
Test Case: 430 | Input/Output: [[-99.79422572662546 -80] -179.79422572662546]
Test Case: 431 | Input/Output: [[-73.15671157369354 -25] -98.15671157369354]
Test Case: 432 | Input/Output: [[-81.7780521196722 -34] -115.7780521196722]
Test Case: 433 | Input/Output: [[-0.17957457367576524 -65] -65.17957457367577]
Test Case: 434 | Input/Output: [[15.165660968894116 -38] -22.834339031105884]
Test Case: 435 | Input/Output: [[-91.53833625584132 -15] -106.53833625584132]
Test Case: 436 | Input/Output: [[-46.8242915509119 28] -18.8242915509119]
Test Case: 437 | Input/Output: [[-37.810803504630464 53] 15.189196495369536]
Test Case: 438 | Input/Output: [[73.9337979836663 -28] 45.933797983666295]
Test Case: 439 | Input/Output: [[-91.1761694581038 -46] -137.1761694581038]
Test Case: 440 | Input/Output: [[-11.442514981225656 29] 17.557485018774344]
Test Case: 441 | Input/Output: [[-5.020595123739 5] -0.020595123738999632]
Test Case: 442 | Input/Output: [[32.13960776045653 -68] -35.86039223954347]
Test Case: 443 | Input/Output: [[-48.868692228840274 -16] -64.86869222884027]
Test Case: 444 | Input/Output: [[71.11137124530657 -84] -12.888628754693428]
Test Case: 445 | Input/Output: [[-83.33648197215263 3] -80.33648197215263]
Test Case: 446 | Input/Output: [[43.82653776411746 -61] -17.17346223588254]
Test Case: 447 | Input/Output: [[-44.14521322950797 86] 41.85478677049203]
Test Case: 448 | Input/Output: [[-21.927625945324067 79] 57.07237405467593]
Test Case: 449 | Input/Output: [[-21.174529088553157 13] -8.174529088553157]
Test Case: 450 | Input/Output: [[38.47753442172308 -42] -3.522465578276922]
Test Case: 451 | Input/Output: [[47.34796618899452 -75] -27.65203381100548]
Test Case: 452 | Input/Output: [[41.83279565075284 9] 50.83279565075284]
Test Case: 453 | Input/Output: [[8.690032563710432 73] 81.69003256371043]
Test Case: 454 | Input/Output: [[-15.89515001404105 -57] -72.89515001404105]
Test Case: 455 | Input/Output: [[25.818812271716382 -28] -2.181187728283618]
Test Case: 456 | Input/Output: [[-31.96512549344945 81] 49.03487450655055]
Test Case: 457 | Input/Output: [[92.67815932521299 4] 96.67815932521299]
Test Case: 458 | Input/Output: [[46.15369711814782 32] 78.15369711814782]
Test Case: 459 | Input/Output: [[49.289336840477574 -69] -19.710663159522426]
Test Case: 460 | Input/Output: [[4.1607726407240335 64] 68.16077264072403]
Test Case: 461 | Input/Output: [[-84.69106005742589 -84] -168.6910600574259]
Test Case: 462 | Input/Output: [[64.96675622949923 -82] -17.033243770500775]
Test Case: 463 | Input/Output: [[-80.21985267454926 39] -41.21985267454926]
Test Case: 464 | Input/Output: [[-98.58187408633859 10] -88.58187408633859]
Test Case: 465 | Input/Output: [[88.07625814617802 53] 141.07625814617802]
Test Case: 466 | Input/Output: [[-15.159300065885844 85] 69.84069993411416]
Test Case: 467 | Input/Output: [[-54.34332607191035 81] 26.656673928089653]
Test Case: 468 | Input/Output: [[31.814351446982357 97] 128.81435144698236]
Test Case: 469 | Input/Output: [[-75.75047531622891 -44] -119.75047531622891]
Test Case: 470 | Input/Output: [[58.47867363647126 -4] 54.47867363647126]
Test Case: 471 | Input/Output: [[-71.27573150793793 -21] -92.27573150793793]
Test Case: 472 | Input/Output: [[-87.77089895530573 100] 12.229101044694275]
Test Case: 473 | Input/Output: [[-87.98668294338322 -23] -110.98668294338322]
Test Case: 474 | Input/Output: [[14.303238010964847 39] 53.30323801096485]
Test Case: 475 | Input/Output: [[-47.082174678321344 24] -23.082174678321344]
Test Case: 476 | Input/Output: [[-93.29224789991774 20] -73.29224789991774]
Test Case: 477 | Input/Output: [[-3.2044105073091913 -46] -49.20441050730919]
Test Case: 478 | Input/Output: [[-43.73287991183324 85] 41.26712008816676]
Test Case: 479 | Input/Output: [[-84.64924729809611 -16] -100.64924729809611]
Test Case: 480 | Input/Output: [[43.65501247479253 88] 131.65501247479253]
Test Case: 481 | Input/Output: [[13.395227621030827 -67] -53.60477237896917]
Test Case: 482 | Input/Output: [[-85.69918081711407 60] -25.69918081711407]
Test Case: 483 | Input/Output: [[-25.327422071585957 57] 31.672577928414043]
Test Case: 484 | Input/Output: [[-90.79586044357775 -23] -113.79586044357775]
Test Case: 485 | Input/Output: [[-50.88577217548496 28] -22.88577217548496]
Test Case: 486 | Input/Output: [[-19.217538779683082 -85] -104.21753877968308]
Test Case: 487 | Input/Output: [[24.157066682721947 -87] -62.84293331727805]
Test Case: 488 | Input/Output: [[27.599767596370754 -95] -67.40023240362925]
Test Case: 489 | Input/Output: [[-16.27457491514552 -44] -60.27457491514552]
Test Case: 490 | Input/Output: [[33.71967695584985 -64] -30.28032304415015]
Test Case: 491 | Input/Output: [[66.12769606788177 43] 109.12769606788177]
Test Case: 492 | Input/Output: [[-64.61413144622033 10] -54.61413144622033]
Test Case: 493 | Input/Output: [[-26.561973557973545 -41] -67.56197355797354]
Test Case: 494 | Input/Output: [[-30.243213930912475 -36] -66.24321393091248]
Test Case: 495 | Input/Output: [[-19.715627426271865 -74] -93.71562742627187]
Test Case: 496 | Input/Output: [[2.7712898990600365 89] 91.77128989906004]
Test Case: 497 | Input/Output: [[35.606099506140595 99] 134.6060995061406]
Test Case: 498 | Input/Output: [[-59.80723706321571 98] 38.19276293678429]
Test Case: 499 | Input/Output: [[92.92400549352021 95] 187.9240054935202]
Test Case: 500 | Input/Output: [[62.796398845844806 -9] 53.796398845844806]
Test Case: 501 | Input/Output: [[-88.07059933634464 33] -55.07059933634464]
Test Case: 502 | Input/Output: [[-90.27229206131808 24] -66.27229206131808]
Test Case: 503 | Input/Output: [[26.820477955452276 99] 125.82047795545228]
Test Case: 504 | Input/Output: [[-40.350784834907884 -20] -60.350784834907884]
Test Case: 505 | Input/Output: [[-82.90472922865446 -37] -119.90472922865446]
Test Case: 506 | Input/Output: [[97.42660467686807 68] 165.42660467686807]
Test Case: 507 | Input/Output: [[-81.26536500764867 69] -12.265365007648668]
Test Case: 508 | Input/Output: [[-85.84575028929453 52] -33.84575028929453]
Test Case: 509 | Input/Output: [[38.91242993608131 1] 39.91242993608131]
Test Case: 510 | Input/Output: [[4.276202011093105 -7] -2.7237979889068953]
Test Case: 511 | Input/Output: [[-20.044432216123468 48] 27.955567783876532]
Test Case: 512 | Input/Output: [[76.97187185768567 -51] 25.97187185768567]
Test Case: 513 | Input/Output: [[29.406398160862267 14] 43.40639816086227]
Test Case: 514 | Input/Output: [[21.51673789720958 -76] -54.48326210279042]
Test Case: 515 | Input/Output: [[-58.470952359985894 35] -23.470952359985894]
Test Case: 516 | Input/Output: [[76.96630522596098 87] 163.96630522596098]
Test Case: 517 | Input/Output: [[93.44670266118669 -25] 68.44670266118669]
Test Case: 518 | Input/Output: [[-24.735954079200667 21] -3.735954079200667]
Test Case: 519 | Input/Output: [[-69.02019705850273 -85] -154.02019705850273]
Test Case: 520 | Input/Output: [[18.477525552396386 3] 21.477525552396386]
Test Case: 521 | Input/Output: [[8.529309435046414 79] 87.52930943504641]
Test Case: 522 | Input/Output: [[31.589038563116674 55] 86.58903856311667]
Test Case: 523 | Input/Output: [[90.72995754903283 -93] -2.2700424509671677]
Test Case: 524 | Input/Output: [[90.31277277480379 10] 100.31277277480379]
Test Case: 525 | Input/Output: [[44.56343522999367 43] 87.56343522999367]
Test Case: 526 | Input/Output: [[-0.9150572620619357 66] 65.08494273793806]
Test Case: 527 | Input/Output: [[-2.9473034213062874 82] 79.05269657869371]
Test Case: 528 | Input/Output: [[99.73184615599814 -42] 57.73184615599814]
Test Case: 529 | Input/Output: [[-77.89271795472501 -100] -177.89271795472501]
Test Case: 530 | Input/Output: [[21.096289749278085 -52] -30.903710250721915]
Test Case: 531 | Input/Output: [[26.770364306299 36] 62.770364306299]
Test Case: 532 | Input/Output: [[-56.71925831764582 36] -20.719258317645817]
Test Case: 533 | Input/Output: [[68.00210770931676 -27] 41.00210770931676]
Test Case: 534 | Input/Output: [[4.811129510303232 38] 42.81112951030323]
Test Case: 535 | Input/Output: [[-57.8703398162439 27] -30.8703398162439]
Test Case: 536 | Input/Output: [[-46.911602424628484 -10] -56.911602424628484]
Test Case: 537 | Input/Output: [[30.218905304776683 -85] -54.78109469522332]
Test Case: 538 | Input/Output: [[-16.647529982618025 17] 0.35247001738197525]
Test Case: 539 | Input/Output: [[93.92118133995871 21] 114.92118133995871]
Test Case: 540 | Input/Output: [[65.39752256521345 40] 105.39752256521345]
Test Case: 541 | Input/Output: [[70.06325266367347 -69] 1.0632526636734667]
Test Case: 542 | Input/Output: [[20.848362565281235 -23] -2.151637434718765]
Test Case: 543 | Input/Output: [[22.354174839497247 91] 113.35417483949725]
Test Case: 544 | Input/Output: [[-3.546543477442455 -67] -70.54654347744246]
Test Case: 545 | Input/Output: [[-33.38626862344225 -65] -98.38626862344225]
Test Case: 546 | Input/Output: [[-56.31906533745954 -59] -115.31906533745953]
Test Case: 547 | Input/Output: [[99.64664859201432 67] 166.64664859201432]
Test Case: 548 | Input/Output: [[41.65313029826595 19] 60.65313029826595]
Test Case: 549 | Input/Output: [[33.584882335047695 -5] 28.584882335047695]
Test Case: 550 | Input/Output: [[-85.02586722440475 90] 4.974132775595251]
Test Case: 551 | Input/Output: [[98.16305756329055 -26] 72.16305756329055]
Test Case: 552 | Input/Output: [[-49.35803579009708 -80] -129.35803579009706]
Test Case: 553 | Input/Output: [[6.419917103600611 -5] 1.4199171036006106]
Test Case: 554 | Input/Output: [[45.34581295881392 -65] -19.654187041186077]
Test Case: 555 | Input/Output: [[10.627279213842101 72] 82.6272792138421]
Test Case: 556 | Input/Output: [[-53.74887530013128 -95] -148.7488753001313]
Test Case: 557 | Input/Output: [[-25.35700987732774 -77] -102.35700987732774]
Test Case: 558 | Input/Output: [[13.396773399171622 56] 69.39677339917162]
Test Case: 559 | Input/Output: [[-0.9884243871819365 79] 78.01157561281806]
Test Case: 560 | Input/Output: [[-8.599396113585513 -42] -50.59939611358551]
Test Case: 561 | Input/Output: [[74.92450165442673 6] 80.92450165442673]
Test Case: 562 | Input/Output: [[89.85247188167887 -38] 51.852471881678866]
Test Case: 563 | Input/Output: [[63.7945415260788 80] 143.7945415260788]
Test Case: 564 | Input/Output: [[-48.372606660864 21] -27.372606660864]
Test Case: 565 | Input/Output: [[2.857964948477033 43] 45.85796494847703]
Test Case: 566 | Input/Output: [[-15.80461337213788 -92] -107.80461337213788]
Test Case: 567 | Input/Output: [[95.82211133684132 86] 181.82211133684132]
Test Case: 568 | Input/Output: [[-85.00376318531575 51] -34.00376318531575]
Test Case: 569 | Input/Output: [[42.7354619207419 14] 56.7354619207419]
Test Case: 570 | Input/Output: [[-38.990837551088006 34] -4.990837551088006]
Test Case: 571 | Input/Output: [[64.84216913225345 59] 123.84216913225345]
Test Case: 572 | Input/Output: [[80.65675271305645 -40] 40.65675271305645]
Test Case: 573 | Input/Output: [[86.65390847411481 84] 170.65390847411481]
Test Case: 574 | Input/Output: [[88.3365670059124 -60] 28.3365670059124]
Test Case: 575 | Input/Output: [[-69.31554858033711 65] -4.315548580337108]
Test Case: 576 | Input/Output: [[-14.942902956454375 17] 2.0570970435456246]
Test Case: 577 | Input/Output: [[78.69319149826285 -87] -8.306808501737152]
Test Case: 578 | Input/Output: [[-6.309571193131205 66] 59.690428806868795]
Test Case: 579 | Input/Output: [[-94.72546502641623 50] -44.72546502641623]
Test Case: 580 | Input/Output: [[-15.353342251526783 -42] -57.35334225152678]
Test Case: 581 | Input/Output: [[53.242301760116646 -37] 16.242301760116646]
Test Case: 582 | Input/Output: [[-10.248311373866244 1] -9.248311373866244]
Test Case: 583 | Input/Output: [[-33.03106325698852 45] 11.968936743011483]
Test Case: 584 | Input/Output: [[42.83852420686415 68] 110.83852420686415]
Test Case: 585 | Input/Output: [[46.10028836496292 -5] 41.10028836496292]
Test Case: 586 | Input/Output: [[-65.88983916220508 -76] -141.88983916220508]
Test Case: 587 | Input/Output: [[-93.92885551911505 -1] -94.92885551911505]
Test Case: 588 | Input/Output: [[52.95203045161955 71] 123.95203045161955]
Test Case: 589 | Input/Output: [[9.823252838570468 -49] -39.17674716142953]
Test Case: 590 | Input/Output: [[-3.7224501754404002 54] 50.2775498245596]
Test Case: 591 | Input/Output: [[6.905789803289181 81] 87.90578980328918]
Test Case: 592 | Input/Output: [[91.22141821593297 35] 126.22141821593297]
Test Case: 593 | Input/Output: [[68.92508225082094 -40] 28.925082250820935]
Test Case: 594 | Input/Output: [[-86.24604542292478 -27] -113.24604542292478]
Test Case: 595 | Input/Output: [[27.89520558726042 -3] 24.89520558726042]
Test Case: 596 | Input/Output: [[8.923502084216977 -41] -32.07649791578302]
Test Case: 597 | Input/Output: [[77.1631016497904 -51] 26.163101649790406]
Test Case: 598 | Input/Output: [[-84.82018694058455 -100] -184.82018694058456]
Test Case: 599 | Input/Output: [[-29.279397676515444 12] -17.279397676515444]
Test Case: 600 | Input/Output: [[-24.00313989201348 29] 4.996860107986521]
Test Case: 601 | Input/Output: [[46.59774621239504 11] 57.59774621239504]
Test Case: 602 | Input/Output: [[25.260469776505687 -78] -52.73953022349431]
Test Case: 603 | Input/Output: [[-96.55602124988036 -9] -105.55602124988036]
Test Case: 604 | Input/Output: [[40.64504722619478 97] 137.64504722619478]
Test Case: 605 | Input/Output: [[-54.13210886591757 -53] -107.13210886591757]
Test Case: 606 | Input/Output: [[59.45879467926255 42] 101.45879467926255]
Test Case: 607 | Input/Output: [[55.863549210144214 9] 64.86354921014421]
Test Case: 608 | Input/Output: [[-1.6367261416482108 -91] -92.63672614164821]
Test Case: 609 | Input/Output: [[-15.332537751565539 -27] -42.33253775156554]
Test Case: 610 | Input/Output: [[-78.12294409786114 -58] -136.12294409786114]
Test Case: 611 | Input/Output: [[-95.91767826431227 79] -16.917678264312272]
Test Case: 612 | Input/Output: [[-37.319789959731374 13] -24.319789959731374]
Test Case: 613 | Input/Output: [[-22.593591277373122 77] 54.40640872262688]
Test Case: 614 | Input/Output: [[-42.82541773563946 30] -12.825417735639462]
Test Case: 615 | Input/Output: [[4.955965939179379 47] 51.95596593917938]
Test Case: 616 | Input/Output: [[-89.06020216103938 -89] -178.0602021610394]
Test Case: 617 | Input/Output: [[20.76221227129919 -84] -63.23778772870081]
Test Case: 618 | Input/Output: [[13.989062288377482 98] 111.98906228837748]
Test Case: 619 | Input/Output: [[-43.361356539342545 -60] -103.36135653934255]
Test Case: 620 | Input/Output: [[33.737805609416625 -29] 4.737805609416625]
Test Case: 621 | Input/Output: [[-45.60698740964331 -47] -92.60698740964331]
Test Case: 622 | Input/Output: [[-41.94883144155581 1] -40.94883144155581]
Test Case: 623 | Input/Output: [[13.62880363882708 -98] -84.37119636117292]
Test Case: 624 | Input/Output: [[-85.80240601608521 65] -20.802406016085214]
Test Case: 625 | Input/Output: [[-87.7615979617816 -34] -121.7615979617816]
Test Case: 626 | Input/Output: [[28.86813882649298 38] 66.86813882649298]
Test Case: 627 | Input/Output: [[15.198549187639344 -68] -52.801450812360656]
Test Case: 628 | Input/Output: [[-15.777885420913847 -82] -97.77788542091385]
Test Case: 629 | Input/Output: [[79.00657708565294 -7] 72.00657708565294]
Test Case: 630 | Input/Output: [[98.03126838343317 44] 142.03126838343317]
Test Case: 631 | Input/Output: [[-98.08359049978617 21] -77.08359049978617]
Test Case: 632 | Input/Output: [[20.7923706925736 -33] -12.207629307426402]
Test Case: 633 | Input/Output: [[72.54075809020625 97] 169.54075809020625]
Test Case: 634 | Input/Output: [[42.94866026785701 50] 92.94866026785701]
Test Case: 635 | Input/Output: [[38.96525222240405 -61] -22.034747777595953]
Test Case: 636 | Input/Output: [[50.32699403559886 50] 100.32699403559886]
Test Case: 637 | Input/Output: [[74.55355843103675 -42] 32.55355843103675]
Test Case: 638 | Input/Output: [[-64.33017075919052 -58] -122.33017075919052]
Test Case: 639 | Input/Output: [[49.067257484121086 -59] -9.932742515878914]
Test Case: 640 | Input/Output: [[18.748671366924086 -81] -62.251328633075914]
Test Case: 641 | Input/Output: [[12.46110933970634 85] 97.46110933970634]
Test Case: 642 | Input/Output: [[-19.35861233978366 -46] -65.35861233978366]
Test Case: 643 | Input/Output: [[80.79978577667723 68] 148.79978577667723]
Test Case: 644 | Input/Output: [[3.2716261979294927 -49] -45.72837380207051]
Test Case: 645 | Input/Output: [[39.591385441572356 -99] -59.408614558427644]
Test Case: 646 | Input/Output: [[-30.237143318191556 100] 69.76285668180844]
Test Case: 647 | Input/Output: [[2.163537234217358 42] 44.16353723421736]
Test Case: 648 | Input/Output: [[-44.88031272092476 65] 20.119687279075237]
Test Case: 649 | Input/Output: [[97.20266528608391 34] 131.2026652860839]
Test Case: 650 | Input/Output: [[-8.919720206258418 -94] -102.91972020625842]
Test Case: 651 | Input/Output: [[-16.019300352608695 77] 60.980699647391305]
Test Case: 652 | Input/Output: [[19.296332822203155 -59] -39.703667177796845]
Test Case: 653 | Input/Output: [[5.195306699011823 -96] -90.80469330098818]
Test Case: 654 | Input/Output: [[-86.9797583248602 -84] -170.9797583248602]
Test Case: 655 | Input/Output: [[36.63454326745341 56] 92.63454326745341]
Test Case: 656 | Input/Output: [[-80.17122622671278 -81] -161.17122622671278]
Test Case: 657 | Input/Output: [[52.97212932792331 -97] -44.02787067207669]
Test Case: 658 | Input/Output: [[-16.94102917530668 3] -13.941029175306682]
Test Case: 659 | Input/Output: [[43.173861418243916 72] 115.17386141824392]
Test Case: 660 | Input/Output: [[-79.19473232287386 -91] -170.19473232287385]
Test Case: 661 | Input/Output: [[6.7546357236778505 70] 76.75463572367785]
Test Case: 662 | Input/Output: [[91.93828477547063 -85] 6.938284775470635]
Test Case: 663 | Input/Output: [[-16.370271597004063 -89] -105.37027159700406]
Test Case: 664 | Input/Output: [[15.690127231866441 -16] -0.3098727681335589]
Test Case: 665 | Input/Output: [[-55.645844543239775 -21] -76.64584454323978]
Test Case: 666 | Input/Output: [[-2.8016768747158665 85] 82.19832312528413]
Test Case: 667 | Input/Output: [[29.253129401291687 76] 105.25312940129169]
Test Case: 668 | Input/Output: [[-65.06426225135812 -31] -96.06426225135812]
Test Case: 669 | Input/Output: [[65.63074246248664 -15] 50.63074246248664]
Test Case: 670 | Input/Output: [[4.73721167550039 90] 94.73721167550039]
Test Case: 671 | Input/Output: [[-46.169257246246765 15] -31.169257246246765]
Test Case: 672 | Input/Output: [[25.667147559245834 -76] -50.332852440754166]
Test Case: 673 | Input/Output: [[-54.134686784247044 -72] -126.13468678424704]
Test Case: 674 | Input/Output: [[88.1905196989444 87] 175.1905196989444]
Test Case: 675 | Input/Output: [[-12.193488537814233 -14] -26.193488537814233]
Test Case: 676 | Input/Output: [[83.02013944366232 -11] 72.02013944366232]
Test Case: 677 | Input/Output: [[28.675247545892404 67] 95.6752475458924]
Test Case: 678 | Input/Output: [[-78.07083935817477 71] -7.070839358174766]
Test Case: 679 | Input/Output: [[62.93851920919121 98] 160.9385192091912]
Test Case: 680 | Input/Output: [[-30.679957904484326 -44] -74.67995790448433]
Test Case: 681 | Input/Output: [[26.306228018022864 -37] -10.693771981977136]
Test Case: 682 | Input/Output: [[-79.52713345596618 62] -17.52713345596618]
Test Case: 683 | Input/Output: [[-86.4560476288604 25] -61.456047628860404]
Test Case: 684 | Input/Output: [[70.88388019286626 -3] 67.88388019286626]
Test Case: 685 | Input/Output: [[50.029779261565636 -40] 10.029779261565636]
Test Case: 686 | Input/Output: [[50.349640891961315 -91] -40.650359108038685]
Test Case: 687 | Input/Output: [[26.360301000362483 51] 77.36030100036248]
Test Case: 688 | Input/Output: [[-94.87576990255162 -15] -109.87576990255162]
Test Case: 689 | Input/Output: [[35.65128945439301 -90] -54.34871054560699]
Test Case: 690 | Input/Output: [[-95.1861528062165 -16] -111.1861528062165]
Test Case: 691 | Input/Output: [[30.72378384657557 -79] -48.27621615342443]
Test Case: 692 | Input/Output: [[82.81632348884997 -29] 53.816323488849974]
Test Case: 693 | Input/Output: [[0.05318606562325101 -98] -97.94681393437675]
Test Case: 694 | Input/Output: [[6.991448382238843 43] 49.99144838223884]
Test Case: 695 | Input/Output: [[-26.836776795427014 -57] -83.83677679542701]
Test Case: 696 | Input/Output: [[-46.53092190456369 17] -29.53092190456369]
Test Case: 697 | Input/Output: [[-22.214380708465086 -93] -115.21438070846509]
Test Case: 698 | Input/Output: [[-61.46420303802203 16] -45.46420303802203]
Test Case: 699 | Input/Output: [[-26.828115677223536 46] 19.171884322776464]
Test Case: 700 | Input/Output: [[78.98268107412352 -97] -18.01731892587648]
Test Case: 701 | Input/Output: [[-27.393895189069113 -28] -55.39389518906911]
Test Case: 702 | Input/Output: [[12.48815701255181 58] 70.48815701255181]
Test Case: 703 | Input/Output: [[-36.29432709172124 67] 30.705672908278757]
Test Case: 704 | Input/Output: [[-99.15111534536842 -11] -110.15111534536842]
Test Case: 705 | Input/Output: [[-4.375293105215135 -55] -59.375293105215135]
Test Case: 706 | Input/Output: [[-82.80970013489868 -70] -152.80970013489866]
Test Case: 707 | Input/Output: [[-78.91482139988426 -95] -173.91482139988426]
Test Case: 708 | Input/Output: [[35.32734992289511 -35] 0.32734992289510956]
Test Case: 709 | Input/Output: [[-38.45144836341421 5] -33.45144836341421]
Test Case: 710 | Input/Output: [[7.250751244053475 -65] -57.749248755946525]
Test Case: 711 | Input/Output: [[48.12946072508058 -77] -28.870539274919423]
Test Case: 712 | Input/Output: [[-47.3115080421419 -5] -52.3115080421419]
Test Case: 713 | Input/Output: [[-74.74851521471635 -52] -126.74851521471635]
Test Case: 714 | Input/Output: [[-47.249431872756006 66] 18.750568127243994]
Test Case: 715 | Input/Output: [[93.9149781797542 58] 151.9149781797542]
Test Case: 716 | Input/Output: [[-79.55645564350357 86] 6.443544356496432]
Test Case: 717 | Input/Output: [[-8.847063749453142 -32] -40.84706374945314]
Test Case: 718 | Input/Output: [[33.39311939125082 -46] -12.60688060874918]
Test Case: 719 | Input/Output: [[-34.91779824788691 64] 29.082201752113093]
Test Case: 720 | Input/Output: [[2.9994418458695122 51] 53.99944184586951]
Test Case: 721 | Input/Output: [[58.183240238077275 64] 122.18324023807727]
Test Case: 722 | Input/Output: [[-62.53511238481686 40] -22.535112384816863]
Test Case: 723 | Input/Output: [[20.012037378679935 87] 107.01203737867993]
Test Case: 724 | Input/Output: [[1.1079120236800577 -93] -91.89208797631994]
Test Case: 725 | Input/Output: [[29.226720846110197 8] 37.2267208461102]
Test Case: 726 | Input/Output: [[-79.50777736585313 -87] -166.50777736585314]
Test Case: 727 | Input/Output: [[-40.228837001493844 -18] -58.228837001493844]
Test Case: 728 | Input/Output: [[61.07938817038897 -56] 5.079388170388967]
Test Case: 729 | Input/Output: [[99.97283895475772 88] 187.97283895475772]
Test Case: 730 | Input/Output: [[97.017119261499 -6] 91.017119261499]
Test Case: 731 | Input/Output: [[27.278583400830783 -24] 3.278583400830783]
Test Case: 732 | Input/Output: [[-2.049927461397587 59] 56.95007253860241]
Test Case: 733 | Input/Output: [[-18.4620510877852 -32] -50.4620510877852]
Test Case: 734 | Input/Output: [[-29.9711794413235 -77] -106.9711794413235]
Test Case: 735 | Input/Output: [[-72.13283884191253 -30] -102.13283884191253]
Test Case: 736 | Input/Output: [[-21.86204227374205 -80] -101.86204227374205]
Test Case: 737 | Input/Output: [[69.88164955464276 84] 153.88164955464276]
Test Case: 738 | Input/Output: [[-56.91961600802791 -21] -77.9196160080279]
Test Case: 739 | Input/Output: [[37.1972897374674 -59] -21.8027102625326]
Test Case: 740 | Input/Output: [[-6.298820632088422 -12] -18.29882063208842]
Test Case: 741 | Input/Output: [[-24.46065499806184 87] 62.53934500193816]
Test Case: 742 | Input/Output: [[-16.984095838102093 -51] -67.98409583810209]
Test Case: 743 | Input/Output: [[3.1607127642353703 -93] -89.83928723576463]
Test Case: 744 | Input/Output: [[65.09314126884101 74] 139.093141268841]
Test Case: 745 | Input/Output: [[-63.903872849975826 5] -58.903872849975826]
Test Case: 746 | Input/Output: [[22.2991392522446 8] 30.2991392522446]
Test Case: 747 | Input/Output: [[-41.46074610187136 -46] -87.46074610187136]
Test Case: 748 | Input/Output: [[-70.06036277457233 95] 24.939637225427674]
Test Case: 749 | Input/Output: [[33.54971807525942 30] 63.54971807525942]
Test Case: 750 | Input/Output: [[-18.444011392762704 -71] -89.4440113927627]
Test Case: 751 | Input/Output: [[53.69997634544103 51] 104.69997634544103]
Test Case: 752 | Input/Output: [[18.484865106233855 53] 71.48486510623385]
Test Case: 753 | Input/Output: [[71.13850398077969 -39] 32.13850398077969]
Test Case: 754 | Input/Output: [[99.88781928084748 46] 145.88781928084748]
Test Case: 755 | Input/Output: [[45.18749613328859 -57] -11.81250386671141]
Test Case: 756 | Input/Output: [[-79.6509950120932 -78] -157.6509950120932]
Test Case: 757 | Input/Output: [[-27.46528059115674 71] 43.53471940884326]
Test Case: 758 | Input/Output: [[92.2692229692203 7] 99.2692229692203]
Test Case: 759 | Input/Output: [[50.97369877300076 7] 57.97369877300076]
Test Case: 760 | Input/Output: [[15.904985742319155 24] 39.904985742319155]
Test Case: 761 | Input/Output: [[-35.3891367805258 70] 34.6108632194742]
Test Case: 762 | Input/Output: [[99.61721814680985 67] 166.61721814680985]
Test Case: 763 | Input/Output: [[78.75201522744217 -93] -14.247984772557828]
Test Case: 764 | Input/Output: [[64.87420253848524 58] 122.87420253848524]
Test Case: 765 | Input/Output: [[-11.009704619976546 -83] -94.00970461997655]
Test Case: 766 | Input/Output: [[15.540151499021164 59] 74.54015149902116]
Test Case: 767 | Input/Output: [[-28.753218558847735 73] 44.246781441152265]
Test Case: 768 | Input/Output: [[-19.82531719835896 -61] -80.82531719835896]
Test Case: 769 | Input/Output: [[-76.81064760446321 72] -4.810647604463213]
Test Case: 770 | Input/Output: [[11.8631649567386 29] 40.8631649567386]
Test Case: 771 | Input/Output: [[93.65468307813697 73] 166.65468307813697]
Test Case: 772 | Input/Output: [[88.31667825574905 -12] 76.31667825574905]
Test Case: 773 | Input/Output: [[-19.025160230223847 -55] -74.02516023022385]
Test Case: 774 | Input/Output: [[24.036098037658405 -77] -52.963901962341595]
Test Case: 775 | Input/Output: [[-92.6920233210157 38] -54.6920233210157]
Test Case: 776 | Input/Output: [[-61.894890317738536 22] -39.894890317738536]
Test Case: 777 | Input/Output: [[-78.25916734574585 94] 15.740832654254149]
Test Case: 778 | Input/Output: [[-92.14497605473453 -66] -158.1449760547345]
Test Case: 779 | Input/Output: [[66.71536888686964 -64] 2.7153688868696406]
Test Case: 780 | Input/Output: [[-62.13046044493702 3] -59.13046044493702]
Test Case: 781 | Input/Output: [[-82.75160917534335 58] -24.751609175343347]
Test Case: 782 | Input/Output: [[-96.56646661382963 -15] -111.56646661382963]
Test Case: 783 | Input/Output: [[-85.24830250121711 29] -56.24830250121711]
Test Case: 784 | Input/Output: [[29.345808735792673 -37] -7.654191264207327]
Test Case: 785 | Input/Output: [[20.786281805916687 -45] -24.213718194083313]
Test Case: 786 | Input/Output: [[13.254008024894759 -26] -12.745991975105241]
Test Case: 787 | Input/Output: [[-79.65761124623288 38] -41.657611246232875]
Test Case: 788 | Input/Output: [[99.92912265644463 9] 108.92912265644463]
Test Case: 789 | Input/Output: [[-3.5976113230585867 -74] -77.59761132305859]
Test Case: 790 | Input/Output: [[-46.03066058223912 -33] -79.03066058223912]
Test Case: 791 | Input/Output: [[-45.53515934385648 29] -16.535159343856478]
Test Case: 792 | Input/Output: [[-23.357808416045273 100] 76.64219158395473]
Test Case: 793 | Input/Output: [[-58.41466493135443 39] -19.41466493135443]
Test Case: 794 | Input/Output: [[74.16331745566256 -40] 34.163317455662565]
Test Case: 795 | Input/Output: [[91.00423061402236 22] 113.00423061402236]
Test Case: 796 | Input/Output: [[-56.01377844957756 -70] -126.01377844957756]
Test Case: 797 | Input/Output: [[-93.33805289926104 -65] -158.33805289926104]
Test Case: 798 | Input/Output: [[45.54122701635265 -55] -9.45877298364735]
Test Case: 799 | Input/Output: [[3.9181059703360006 -77] -73.081894029664]
Test Case: 800 | Input/Output: [[78.92739327367775 -98] -19.07260672632225]
Test Case: 801 | Input/Output: [[-45.13461947698212 92] 46.86538052301788]
Test Case: 802 | Input/Output: [[39.36559810249821 -87] -47.63440189750179]
Test Case: 803 | Input/Output: [[-76.46702590378106 31] -45.467025903781064]
Test Case: 804 | Input/Output: [[-99.14783472751311 77] -22.147834727513114]
Test Case: 805 | Input/Output: [[57.97506551089256 -86] -28.024934489107437]
Test Case: 806 | Input/Output: [[-26.797134041704027 -39] -65.79713404170403]
Test Case: 807 | Input/Output: [[-38.378823288479836 92] 53.621176711520164]
Test Case: 808 | Input/Output: [[40.478741373134 33] 73.478741373134]
Test Case: 809 | Input/Output: [[32.14761944967256 13] 45.14761944967256]
Test Case: 810 | Input/Output: [[83.4159686281501 45] 128.4159686281501]
Test Case: 811 | Input/Output: [[-30.78548148827491 22] -8.785481488274911]
Test Case: 812 | Input/Output: [[-67.21999114400872 -43] -110.21999114400872]
Test Case: 813 | Input/Output: [[13.131475539476043 7] 20.131475539476043]
Test Case: 814 | Input/Output: [[45.54786421379322 60] 105.54786421379322]
Test Case: 815 | Input/Output: [[-92.96826143563402 10] -82.96826143563402]
Test Case: 816 | Input/Output: [[48.61867410368836 20] 68.61867410368836]
Test Case: 817 | Input/Output: [[19.326609481062178 37] 56.32660948106218]
Test Case: 818 | Input/Output: [[-86.22843475519058 -95] -181.22843475519056]
Test Case: 819 | Input/Output: [[98.86408827544943 43] 141.86408827544943]
Test Case: 820 | Input/Output: [[-51.026703478582405 -50] -101.0267034785824]
Test Case: 821 | Input/Output: [[87.66759621544657 -54] 33.667596215446565]
Test Case: 822 | Input/Output: [[-81.52353891586775 -76] -157.52353891586773]
Test Case: 823 | Input/Output: [[23.438494484569873 78] 101.43849448456987]
Test Case: 824 | Input/Output: [[48.486647633414066 -55] -6.513352366585934]
Test Case: 825 | Input/Output: [[-80.60534050253405 3] -77.60534050253405]
Test Case: 826 | Input/Output: [[-93.8357946794828 7] -86.8357946794828]
Test Case: 827 | Input/Output: [[-77.89134657112938 19] -58.891346571129375]
Test Case: 828 | Input/Output: [[47.778765736859896 61] 108.7787657368599]
Test Case: 829 | Input/Output: [[25.147527285792506 -90] -64.8524727142075]
Test Case: 830 | Input/Output: [[37.007349418257206 56] 93.0073494182572]
Test Case: 831 | Input/Output: [[-10.046248359302297 69] 58.9537516406977]
Test Case: 832 | Input/Output: [[-23.718977336242773 -37] -60.71897733624277]
Test Case: 833 | Input/Output: [[-86.29300277412189 -45] -131.29300277412187]
Test Case: 834 | Input/Output: [[38.598971892653054 83] 121.59897189265305]
Test Case: 835 | Input/Output: [[89.86254683631716 -60] 29.862546836317165]
Test Case: 836 | Input/Output: [[33.97989004471674 -78] -44.02010995528326]
Test Case: 837 | Input/Output: [[90.49390259054891 19] 109.49390259054891]
Test Case: 838 | Input/Output: [[20.78991807859667 5] 25.78991807859667]
Test Case: 839 | Input/Output: [[-20.683018122229214 -46] -66.68301812222921]
Test Case: 840 | Input/Output: [[73.75684315769587 21] 94.75684315769587]
Test Case: 841 | Input/Output: [[-12.82820893456153 -36] -48.82820893456153]
Test Case: 842 | Input/Output: [[-3.1289753414429384 -94] -97.12897534144294]
Test Case: 843 | Input/Output: [[84.97544962562037 64] 148.97544962562037]
Test Case: 844 | Input/Output: [[-82.10728315578994 11] -71.10728315578994]
Test Case: 845 | Input/Output: [[-95.02222726918725 -21] -116.02222726918725]
Test Case: 846 | Input/Output: [[-75.7790508451128 57] -18.779050845112806]
Test Case: 847 | Input/Output: [[-90.64167926373898 -96] -186.64167926373898]
Test Case: 848 | Input/Output: [[91.81119914611807 -51] 40.81119914611807]
Test Case: 849 | Input/Output: [[9.098455425142205 -77] -67.9015445748578]
Test Case: 850 | Input/Output: [[11.369220899758446 7] 18.369220899758446]
Test Case: 851 | Input/Output: [[51.87132077771028 -46] 5.871320777710281]
Test Case: 852 | Input/Output: [[-48.20485813987876 4] -44.20485813987876]
Test Case: 853 | Input/Output: [[22.321836276001108 -91] -68.67816372399889]
Test Case: 854 | Input/Output: [[-23.219700591719445 65] 41.780299408280555]
Test Case: 855 | Input/Output: [[-73.90523097855271 100] 26.09476902144729]
Test Case: 856 | Input/Output: [[-11.13527080729473 16] 4.864729192705269]
Test Case: 857 | Input/Output: [[17.28974481550165 51] 68.28974481550165]
Test Case: 858 | Input/Output: [[57.51474900289705 31] 88.51474900289705]
Test Case: 859 | Input/Output: [[76.83698463667758 -58] 18.836984636677585]
Test Case: 860 | Input/Output: [[42.21007259644276 -70] -27.789927403557243]
Test Case: 861 | Input/Output: [[83.07509911447448 14] 97.07509911447448]
Test Case: 862 | Input/Output: [[-57.12592246228625 46] -11.125922462286248]
Test Case: 863 | Input/Output: [[-95.71823527909609 -86] -181.7182352790961]
Test Case: 864 | Input/Output: [[30.390551656461355 -66] -35.609448343538645]
Test Case: 865 | Input/Output: [[-86.24161412442123 79] -7.241614124421233]
Test Case: 866 | Input/Output: [[-65.22890497363622 97] 31.77109502636378]
Test Case: 867 | Input/Output: [[3.3892935898782355 19] 22.389293589878235]
Test Case: 868 | Input/Output: [[73.93948925764451 7] 80.93948925764451]
Test Case: 869 | Input/Output: [[10.40920674801842 44] 54.40920674801842]
Test Case: 870 | Input/Output: [[25.24090535033048 -93] -67.75909464966952]
Test Case: 871 | Input/Output: [[-21.56798559798709 75] 53.43201440201291]
Test Case: 872 | Input/Output: [[33.351521510009604 -45] -11.648478489990396]
Test Case: 873 | Input/Output: [[-23.15783659459869 -47] -70.15783659459869]
Test Case: 874 | Input/Output: [[89.10297270604758 -24] 65.10297270604758]
Test Case: 875 | Input/Output: [[-90.69236118064352 -24] -114.69236118064352]
Test Case: 876 | Input/Output: [[85.41432858260393 96] 181.41432858260393]
Test Case: 877 | Input/Output: [[9.713401851041354 -84] -74.28659814895865]
Test Case: 878 | Input/Output: [[-26.283105836766367 77] 50.71689416323363]
Test Case: 879 | Input/Output: [[-59.508260518670866 43] -16.508260518670866]
Test Case: 880 | Input/Output: [[44.80130190166241 26] 70.80130190166241]
Test Case: 881 | Input/Output: [[-20.09498648423866 34] 13.90501351576134]
Test Case: 882 | Input/Output: [[49.642315385817 -91] -41.357684614183]
Test Case: 883 | Input/Output: [[-34.51470019726021 20] -14.514700197260211]
Test Case: 884 | Input/Output: [[-84.2931052459668 -49] -133.29310524596679]
Test Case: 885 | Input/Output: [[43.876888113481755 84] 127.87688811348175]
Test Case: 886 | Input/Output: [[-97.32413486486324 -77] -174.32413486486325]
Test Case: 887 | Input/Output: [[-23.128438061436142 59] 35.87156193856386]
Test Case: 888 | Input/Output: [[-36.19564733522318 64] 27.80435266477682]
Test Case: 889 | Input/Output: [[-64.52520291691846 -25] -89.52520291691846]
Test Case: 890 | Input/Output: [[22.228308925209745 -76] -53.771691074790255]
Test Case: 891 | Input/Output: [[99.39971526047222 67] 166.39971526047222]
Test Case: 892 | Input/Output: [[95.9657675025064 -28] 67.9657675025064]
Test Case: 893 | Input/Output: [[78.66330621551265 -8] 70.66330621551265]
Test Case: 894 | Input/Output: [[95.56092698336954 99] 194.56092698336954]
Test Case: 895 | Input/Output: [[5.024426276726032 -19] -13.975573723273968]
Test Case: 896 | Input/Output: [[-53.337524516015236 -86] -139.33752451601524]
Test Case: 897 | Input/Output: [[-81.74962403648279 -59] -140.74962403648277]
Test Case: 898 | Input/Output: [[10.492278275595382 54] 64.49227827559538]
Test Case: 899 | Input/Output: [[32.69200811619808 -82] -49.30799188380192]
Test Case: 900 | Input/Output: [[45.19948460932119 -70] -24.80051539067881]
Test Case: 901 | Input/Output: [[96.01920830054175 94] 190.01920830054175]
Test Case: 902 | Input/Output: [[81.16632686836886 -60] 21.166326868368856]
Test Case: 903 | Input/Output: [[-84.39845458070114 -44] -128.39845458070113]
Test Case: 904 | Input/Output: [[83.39164094380982 16] 99.39164094380982]
Test Case: 905 | Input/Output: [[51.500756988106815 96] 147.50075698810682]
Test Case: 906 | Input/Output: [[50.78984696528664 -37] 13.789846965286642]
Test Case: 907 | Input/Output: [[-12.020938289746724 -88] -100.02093828974672]
Test Case: 908 | Input/Output: [[-93.1562644541471 89] -4.156264454147106]
Test Case: 909 | Input/Output: [[-38.24277323556298 38] -0.24277323556297858]
Test Case: 910 | Input/Output: [[28.704362387451226 -2] 26.704362387451226]
Test Case: 911 | Input/Output: [[19.18471076061077 55] 74.18471076061077]
Test Case: 912 | Input/Output: [[72.50232653394042 -16] 56.50232653394042]
Test Case: 913 | Input/Output: [[-98.19309487590687 60] -38.193094875906866]
Test Case: 914 | Input/Output: [[-91.12116345167705 45] -46.12116345167705]
Test Case: 915 | Input/Output: [[-9.606140963370024 -15] -24.606140963370024]
Test Case: 916 | Input/Output: [[60.500347854979395 -26] 34.500347854979395]
Test Case: 917 | Input/Output: [[32.98012818779671 8] 40.98012818779671]
Test Case: 918 | Input/Output: [[95.57443275575034 -62] 33.57443275575034]
Test Case: 919 | Input/Output: [[-49.45676912847783 -92] -141.45676912847784]
Test Case: 920 | Input/Output: [[-27.355112631910657 97] 69.64488736808934]
Test Case: 921 | Input/Output: [[65.7761443527618 49] 114.7761443527618]
Test Case: 922 | Input/Output: [[-16.77237991426179 -11] -27.77237991426179]
Test Case: 923 | Input/Output: [[-21.801671501732045 92] 70.19832849826795]
Test Case: 924 | Input/Output: [[-68.8297187172515 28] -40.829718717251495]
Test Case: 925 | Input/Output: [[68.87957003540353 -52] 16.879570035403532]
Test Case: 926 | Input/Output: [[-59.367199267658236 76] 16.632800732341764]
Test Case: 927 | Input/Output: [[-2.506854669478969 -86] -88.50685466947897]
Test Case: 928 | Input/Output: [[-97.66139546767445 -70] -167.66139546767445]
Test Case: 929 | Input/Output: [[78.6001547106058 73] 151.6001547106058]
Test Case: 930 | Input/Output: [[-38.53125675271725 63] 24.468743247282752]
Test Case: 931 | Input/Output: [[7.954768317575201 63] 70.9547683175752]
Test Case: 932 | Input/Output: [[-48.7414037413487 -51] -99.7414037413487]
Test Case: 933 | Input/Output: [[69.17318037127856 9] 78.17318037127856]
Test Case: 934 | Input/Output: [[87.34002955132948 -79] 8.34002955132948]
Test Case: 935 | Input/Output: [[21.78774676898294 -4] 17.78774676898294]
Test Case: 936 | Input/Output: [[38.63820325990716 -65] -26.361796740092842]
Test Case: 937 | Input/Output: [[52.33720390381893 -78] -25.66279609618107]
Test Case: 938 | Input/Output: [[-28.604286057072144 97] 68.39571394292786]
Test Case: 939 | Input/Output: [[-20.08881468302212 -45] -65.08881468302212]
Test Case: 940 | Input/Output: [[-79.57950599063909 -93] -172.5795059906391]
Test Case: 941 | Input/Output: [[47.24387835293311 -65] -17.75612164706689]
Test Case: 942 | Input/Output: [[80.32720694564176 -48] 32.32720694564176]
Test Case: 943 | Input/Output: [[97.29111991555092 32] 129.29111991555092]
Test Case: 944 | Input/Output: [[19.44582351212634 74] 93.44582351212634]
Test Case: 945 | Input/Output: [[60.081054881137135 -78] -17.918945118862865]
Test Case: 946 | Input/Output: [[89.22674381621789 -55] 34.22674381621789]
Test Case: 947 | Input/Output: [[-71.76630243381751 -55] -126.76630243381751]
Test Case: 948 | Input/Output: [[-65.83249396272946 -6] -71.83249396272946]
Test Case: 949 | Input/Output: [[-60.46688666453808 9] -51.46688666453808]
Test Case: 950 | Input/Output: [[86.85691201270942 67] 153.85691201270942]
Test Case: 951 | Input/Output: [[-84.15064924941247 44] -40.15064924941247]
Test Case: 952 | Input/Output: [[90.15202378429689 -36] 54.15202378429689]
Test Case: 953 | Input/Output: [[72.54407287853846 -86] -13.455927121461542]
Test Case: 954 | Input/Output: [[-72.95509873714248 95] 22.044901262857522]
Test Case: 955 | Input/Output: [[-34.91928626028297 -20] -54.91928626028297]
Test Case: 956 | Input/Output: [[84.1052466531342 -75] 9.105246653134202]
Test Case: 957 | Input/Output: [[84.74531090153187 15] 99.74531090153187]
Test Case: 958 | Input/Output: [[-57.045920017087596 -80] -137.0459200170876]
Test Case: 959 | Input/Output: [[-78.05332280072568 -98] -176.05332280072568]
Test Case: 960 | Input/Output: [[-94.08863291359705 19] -75.08863291359705]
Test Case: 961 | Input/Output: [[-59.41833062204436 68] 8.581669377955642]
Test Case: 962 | Input/Output: [[73.13532341231098 69] 142.13532341231098]
Test Case: 963 | Input/Output: [[57.776149093222585 63] 120.77614909322259]
Test Case: 964 | Input/Output: [[-59.04021509596484 74] 14.95978490403516]
Test Case: 965 | Input/Output: [[64.86779510828597 2] 66.86779510828597]
Test Case: 966 | Input/Output: [[64.1109264239712 58] 122.1109264239712]
Test Case: 967 | Input/Output: [[54.75400937435134 -10] 44.75400937435134]
Test Case: 968 | Input/Output: [[95.56881028323318 91] 186.56881028323318]
Test Case: 969 | Input/Output: [[70.70639696438545 89] 159.70639696438545]
Test Case: 970 | Input/Output: [[63.334305801165954 57] 120.33430580116595]
Test Case: 971 | Input/Output: [[-80.8796699059032 9] -71.8796699059032]
Test Case: 972 | Input/Output: [[25.256023710939985 53] 78.25602371093998]
Test Case: 973 | Input/Output: [[46.88829835700494 -80] -33.11170164299506]
Test Case: 974 | Input/Output: [[-53.181349081117716 69] 15.818650918882284]
Test Case: 975 | Input/Output: [[99.50207978085933 -63] 36.50207978085933]
Test Case: 976 | Input/Output: [[81.3893019832359 -97] -15.610698016764104]
Test Case: 977 | Input/Output: [[8.828806452717131 -50] -41.17119354728287]
Test Case: 978 | Input/Output: [[-60.747124923123195 -13] -73.7471249231232]
Test Case: 979 | Input/Output: [[45.81712814117523 -76] -30.182871858824768]
Test Case: 980 | Input/Output: [[47.975492378407466 20] 67.97549237840747]
Test Case: 981 | Input/Output: [[30.94726338690174 61] 91.94726338690174]
Test Case: 982 | Input/Output: [[-88.20947502535554 -99] -187.20947502535554]
Test Case: 983 | Input/Output: [[1.152348119502264 63] 64.15234811950226]
Test Case: 984 | Input/Output: [[97.79657576831602 25] 122.79657576831602]
Test Case: 985 | Input/Output: [[-12.590723763156376 23] 10.409276236843624]
Test Case: 986 | Input/Output: [[70.75208568100174 -13] 57.752085681001745]
Test Case: 987 | Input/Output: [[20.001375867207244 50] 70.00137586720724]
Test Case: 988 | Input/Output: [[40.255980688229414 -75] -34.744019311770586]
Test Case: 989 | Input/Output: [[-91.46146545273379 -62] -153.4614654527338]
Test Case: 990 | Input/Output: [[-21.981582575459612 14] -7.981582575459612]
Test Case: 991 | Input/Output: [[91.4791408439531 67] 158.4791408439531]
Test Case: 992 | Input/Output: [[31.68844475707698 -48] -16.31155524292302]
Test Case: 993 | Input/Output: [[-50.33219066328955 -66] -116.33219066328955]
Test Case: 994 | Input/Output: [[85.45710322936728 -34] 51.45710322936728]
Test Case: 995 | Input/Output: [[31.15809494946319 63] 94.15809494946319]
Test Case: 996 | Input/Output: [[-44.25704666628647 0] -44.25704666628647]
Test Case: 997 | Input/Output: [[24.60155055571856 -18] 6.6015505557185605]
Test Case: 998 | Input/Output: [[-15.801512098321524 52] 36.198487901678476]
Test Case: 999 | Input/Output: [[69.2066788329829 55] 124.2066788329829]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -68 38 -42 -30 -35 -45 -84 30 -12 -120 41 -72 -13 59 70 -18
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 56514.0
Test mean error for best: 28.25700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -12.0514028787
Correct output: -5.4680423906  | Program output: 2.5319576094  
Correct output: -24.9418699852 | Program output: -7.9418699852 
Correct output: 56.9568119314  | Program output: 90.9568119314 
Correct output: -31.6601191221 | Program output: 65.3398808779 
Correct output: -37.1210864176 | Program output: 29.8789135824 
Correct output: -79.2516975843 | Program output: -98.2516975843
Correct output: 44.9272196671  | Program output: 24.9272196671 
Correct output: 66.6210657667  | Program output: 28.6210657667 
Correct output: -55.0537383904 | Program output: -34.0537383904
Correct output: -79.6354294126 | Program output: -89.6354294126
Correct output: 1.2524717345   | Program output: -8.7475282655 
Correct output: -3.1599714069  | Program output: 41.8400285931 
Correct output: 129.8497046591 | Program output: 57.8497046591 
Correct output: -125.0022721297 | Program output: -84.0022721297
Correct output: 141.1949920159 | Program output: 83.1949920159 
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 34.2843412425 
Correct output: 33.2581162527  | Program output: -36.7418837473
Correct output: 123.421863126  | Program output: 42.421863126  
Correct output: 106.1474875213 | Program output: 47.1474875213 
Correct output: 12.1495725478  | Program output: -78.8504274522
Correct output: -146.6027540177 | Program output: -53.6027540177
Correct output: -61.2140896321 | Program output: -66.2140896321
Correct output: 2.2138108865   | Program output: 8.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction print_float} {:instruction float_sub} {:instruction integer_flush} {:instruction 7.86482727348357} {:instruction float_sub} {:instruction float_dup_items} {:instruction in2})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min integer_mult float_cos in1 float_inc float_shove print_float float_sub integer_flush 7.86482727348357 float_sub float_dup_items in2)
Errors: [85.0 12 8.0 12 17.0 2 34.0 2 97.0 13 67.0 13 19.0 2 20.0 1 38.0 2 21.0 2 10.0 1 10.0 11 45.0 12 72.0 3 41.0 3 58.0 3 0.0 0 88.0 3 70.0 11 81.0 2 59.0 3 91.0 12 93.0 3 5.0 1 6.0 1]
Total: 1265.0
Mean: 25.3
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 17986.695009000003
Median total errors in population: 25339.0
Error averages by case: (706.8820260000005 13.178 690.6834615999998 12.907 702.9237498999987 13.133 710.9942557000015 12.512 712.2801853999994 13.881 709.0950037999997 13.689 707.0518429000019 13.132 694.7599103000001 12.425 696.6414803999991 12.461 710.920821600001 13.091 706.6955778000024 13.202 686.7287081999991 12.221 701.4906955000002 12.902 714.9820612000018 13.196 729.1905989000014 13.986 716.9322525999986 13.145 691.1717642999973 13.039 715.6523320000028 13.303 701.101348899999 13.205 714.627370799999 12.387 709.1858396999997 13.11 702.1300774000007 13.047 739.2573231999988 13.971 699.4466994999988 12.939 690.2866214000018 11.521)
Error minima by case: (2.6637 8 0.532 9 1.0581 2 0.9568 2 3.8507 9 0.8789 8 0.7483 1 2.1451 1 0.1571 2 1.0537 1 0.3646 1 0.0647 7 1.16 7 30.8497 3 2.8237 2 17.805 2 0.0 0 23.2843 2 0.2581 8 24.4219 2 7.1475 2 0.5236 8 33.3972 2 1.7407 1 0.1288 1)
Average genome size in population (length): 51.771
Average program size in population (points): 52.771
Average percent parens in population: 0.037
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.333
Error (vector) diversity:			 0.352
Behavioral diversity:				 0.374
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1298839
--- Timings ---
Current time: 1529614829580 milliseconds
Total Time:           3.9 seconds
Initialization:       0.1 seconds,  2.9%
Reproduction:         0.6 seconds, 14.5%
Fitness Testing:      3.2 seconds, 82.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 56514.0
Test mean error for best: 28.25700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -12.0514028787
Correct output: -5.4680423906  | Program output: 2.5319576094  
Correct output: -24.9418699852 | Program output: -7.9418699852 
Correct output: 56.9568119314  | Program output: 90.9568119314 
Correct output: -31.6601191221 | Program output: 65.3398808779 
Correct output: -37.1210864176 | Program output: 29.8789135824 
Correct output: -79.2516975843 | Program output: -98.2516975843
Correct output: 44.9272196671  | Program output: 24.9272196671 
Correct output: 66.6210657667  | Program output: 28.6210657667 
Correct output: -55.0537383904 | Program output: -34.0537383904
Correct output: -79.6354294126 | Program output: -89.6354294126
Correct output: 1.2524717345   | Program output: -8.7475282655 
Correct output: -3.1599714069  | Program output: 41.8400285931 
Correct output: 129.8497046591 | Program output: 57.8497046591 
Correct output: -125.0022721297 | Program output: -84.0022721297
Correct output: 141.1949920159 | Program output: 83.1949920159 
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 34.2843412425 
Correct output: 33.2581162527  | Program output: -36.7418837473
Correct output: 123.421863126  | Program output: 42.421863126  
Correct output: 106.1474875213 | Program output: 47.1474875213 
Correct output: 12.1495725478  | Program output: -78.8504274522
Correct output: -146.6027540177 | Program output: -53.6027540177
Correct output: -61.2140896321 | Program output: -66.2140896321
Correct output: 2.2138108865   | Program output: 8.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction print_float} {:instruction float_sub} {:instruction integer_flush} {:instruction 7.86482727348357} {:instruction float_sub} {:instruction float_dup_items} {:instruction in2})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min integer_mult float_cos in1 float_inc float_shove print_float float_sub integer_flush 7.86482727348357 float_sub float_dup_items in2)
Errors: [85.0 12 8.0 12 17.0 2 34.0 2 97.0 13 67.0 13 19.0 2 20.0 1 38.0 2 21.0 2 10.0 1 10.0 11 45.0 12 72.0 3 41.0 3 58.0 3 0.0 0 88.0 3 70.0 11 81.0 2 59.0 3 91.0 12 93.0 3 5.0 1 6.0 1]
Total: 1265.0
Mean: 25.3
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 6099.9334418
Median total errors in population: 1892.5910999999994
Error averages by case: (243.06831360000018 12.497 189.1516859999999 12.084 211.8053152000012 10.411 233.81582180000223 10.144 239.81678289999982 12.883 228.40215589999988 12.591 240.8470824999984 10.435 210.86457370000116 10.026 222.08370899999875 10.204 227.3906975999989 10.244 238.68991449999962 10.668 194.65445289999988 11.425 210.53258600000024 12.027 262.60307879999914 10.764 269.08845389999794 11.109 266.7424083000019 10.595 203.82331900000017 10.317 261.9915648999994 10.818 227.79929090000005 12.372 261.7644757999977 10.077 248.23923969999913 10.49 233.15949610000004 12.097 289.5628085999978 11.13 221.91371250000128 10.166 187.31750169999955 9.231)
Error minima by case: (2.9486 8 0.532 7 0.0916 2 0.9568 2 3.8507 9 0.8789 8 0.7483 1 0.9272 1 0.1571 2 3.727 1 0.3646 1 0.0647 7 1.16 7 27.0 2 2.8237 2 41.0 2 0.0 0 11.0 2 0.2581 8 18.0 2 7.1475 1 1.1496 8 49.1763 2 1.7407 1 0.1288 1)
Average genome size in population (length): 59.374
Average program size in population (points): 60.374
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.524
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.765
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.765
Total error diversity:				 0.288
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.332
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2788064
--- Timings ---
Current time: 1529614834004 milliseconds
Total Time:           8.5 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.0 seconds, 35.6%
Fitness Testing:      4.8 seconds, 56.3%
Report:               0.6 seconds,  6.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 56514.0
Test mean error for best: 28.25700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -12.0514028787
Correct output: -5.4680423906  | Program output: 2.5319576094  
Correct output: -24.9418699852 | Program output: -7.9418699852 
Correct output: 56.9568119314  | Program output: 90.9568119314 
Correct output: -31.6601191221 | Program output: 65.3398808779 
Correct output: -37.1210864176 | Program output: 29.8789135824 
Correct output: -79.2516975843 | Program output: -98.2516975843
Correct output: 44.9272196671  | Program output: 24.9272196671 
Correct output: 66.6210657667  | Program output: 28.6210657667 
Correct output: -55.0537383904 | Program output: -34.0537383904
Correct output: -79.6354294126 | Program output: -89.6354294126
Correct output: 1.2524717345   | Program output: -8.7475282655 
Correct output: -3.1599714069  | Program output: 41.8400285931 
Correct output: 129.8497046591 | Program output: 57.8497046591 
Correct output: -125.0022721297 | Program output: -84.0022721297
Correct output: 141.1949920159 | Program output: 83.1949920159 
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 34.2843412425 
Correct output: 33.2581162527  | Program output: -36.7418837473
Correct output: 123.421863126  | Program output: 42.421863126  
Correct output: 106.1474875213 | Program output: 47.1474875213 
Correct output: 12.1495725478  | Program output: -78.8504274522
Correct output: -146.6027540177 | Program output: -53.6027540177
Correct output: -61.2140896321 | Program output: -66.2140896321
Correct output: 2.2138108865   | Program output: 8.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction print_float} {:instruction float_sub} {:instruction integer_flush} {:instruction 7.86482727348357} {:instruction float_sub} {:instruction float_dup_items} {:instruction in2})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min integer_mult float_cos in1 float_inc float_shove print_float float_sub integer_flush 7.86482727348357 float_sub float_dup_items in2)
Errors: [85.0 12 8.0 12 17.0 2 34.0 2 97.0 13 67.0 13 19.0 2 20.0 1 38.0 2 21.0 2 10.0 1 10.0 11 45.0 12 72.0 3 41.0 3 58.0 3 0.0 0 88.0 3 70.0 11 81.0 2 59.0 3 91.0 12 93.0 3 5.0 1 6.0 1]
Total: 1265.0
Mean: 25.3
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 4457.0497514000035
Median total errors in population: 1291.0
Error averages by case: (198.28245999999976 13.095 128.12132810000028 12.372 147.7640599000005 5.796 165.0120939000004 5.741 206.60623149999995 13.441 180.99086930000016 13.068 161.65257149999962 5.417 146.0591573000004 5.627 160.30315649999977 5.81 154.82978909999989 5.284 154.17820189999983 5.995 141.33989189999986 11.523 165.1826022999998 12.62 190.82987969999996 6.49 177.8518525999993 6.234 184.1654404000007 6.327 138.09024940000003 5.299 199.35646259999987 6.438 188.7932905999997 12.186 195.3071909999994 6.021 179.19101289999995 5.824 208.02336429999986 12.334 212.42869479999928 6.231 146.18660139999997 5.279 127.23829849999981 4.813)
Error minima by case: (8.0514 9 0.532 9 6.9419 2 10.9568 2 20.6601 10 26.1211 8 7.4903 1 1.0728 1 11.3789 1 15.0537 1 7.8741 1 0.0758 7 1.16 8 16.1503 3 39.0 2 23.195 2 0.0 0 33.2843 2 0.2581 9 37.1335 2 13.8525 2 2.8504 9 37.3972 2 3.7859 1 0.1801 1)
Average genome size in population (length): 58.365
Average program size in population (points): 59.365
Average percent parens in population: 0.021
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.985
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.104
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4251314
--- Timings ---
Current time: 1529614837650 milliseconds
Total Time:          12.0 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.5 seconds, 37.7%
Fitness Testing:      6.4 seconds, 53.3%
Report:               1.0 seconds,  8.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 56514.0
Test mean error for best: 28.25700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -12.0514028787
Correct output: -5.4680423906  | Program output: 2.5319576094  
Correct output: -24.9418699852 | Program output: -7.9418699852 
Correct output: 56.9568119314  | Program output: 90.9568119314 
Correct output: -31.6601191221 | Program output: 65.3398808779 
Correct output: -37.1210864176 | Program output: 29.8789135824 
Correct output: -79.2516975843 | Program output: -98.2516975843
Correct output: 44.9272196671  | Program output: 24.9272196671 
Correct output: 66.6210657667  | Program output: 28.6210657667 
Correct output: -55.0537383904 | Program output: -34.0537383904
Correct output: -79.6354294126 | Program output: -89.6354294126
Correct output: 1.2524717345   | Program output: -8.7475282655 
Correct output: -3.1599714069  | Program output: 41.8400285931 
Correct output: 129.8497046591 | Program output: 57.8497046591 
Correct output: -125.0022721297 | Program output: -84.0022721297
Correct output: 141.1949920159 | Program output: 83.1949920159 
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 34.2843412425 
Correct output: 33.2581162527  | Program output: -36.7418837473
Correct output: 123.421863126  | Program output: 42.421863126  
Correct output: 106.1474875213 | Program output: 47.1474875213 
Correct output: 12.1495725478  | Program output: -78.8504274522
Correct output: -146.6027540177 | Program output: -53.6027540177
Correct output: -61.2140896321 | Program output: -66.2140896321
Correct output: 2.2138108865   | Program output: 8.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_dup_items} {:instruction in1} {:instruction float_shove} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction tagged_437} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction integer_dec} {:instruction tagged_530} {:instruction float_mult} {:instruction integer_dup} {:instruction float_pop} {:instruction float_stackdepth} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_div} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_rot} {:instruction integer_flush} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction print_float} {:instruction in1} {:instruction float_shove} {:instruction 79.75237327726668} {:instruction float_shove} {:instruction float_dec} {:instruction float_div} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_dec} {:instruction tag_float_347} {:instruction tag_float_919} {:instruction print_float} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup})
Best program: (integer_shove float_dup_items in1 float_shove integer_shove float_stackdepth tagged_437 float_stackdepth integer_yankdup integer_pop integer_dec tagged_530 float_mult integer_dup float_pop float_stackdepth integer_yank float_mult integer_mod integer_sub integer_div float_sub integer_yankdup float_add float_rot float_rot integer_flush float_add integer_add float_min integer_mult float_cos in1 float_inc float_shove print_float in1 float_shove 79.75237327726668 float_shove float_dec float_div integer_fromfloat float_tan float_dec tag_float_347 tag_float_919 print_float print_float integer_fromfloat integer_dup)
Errors: [85.0 12 8.0 12 17.0 2 34.0 2 97.0 13 67.0 13 19.0 2 20.0 1 38.0 2 21.0 2 10.0 1 10.0 11 45.0 12 72.0 3 41.0 3 58.0 3 0.0 0 88.0 3 70.0 11 81.0 2 59.0 3 91.0 12 93.0 3 5.0 1 6.0 1]
Total: 1265.0
Mean: 25.3
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 4377.1027198
Median total errors in population: 1270.0
Error averages by case: (205.49588110000002 13.122 131.60151050000005 12.289 145.14061180000002 3.544 156.49405710000002 3.448 211.6189791 13.432 184.6441656 13.35 148.7947178 2.882 145.3778679 3.327 161.1375983 3.449 148.8255789 2.874 140.9510148 3.428 140.3375285 11.407 165.44578099999998 12.407 190.85853059999997 4.394 166.6029415 3.817 178.8068067 4.329 131.9000991 2.54 204.81097440000002 4.334 192.3107748 11.649 198.6981838 4.041 179.607393 3.665 210.522089 12.398 211.63480710000002 3.848 136.6085904 2.692 129.76223699999997 2.448)
Error minima by case: (72.0783 11 4.6482 9 9.9419 2 32.0 2 16.6601 10 2.0202 9 19.0 1 20.0 1 38.0 2 19.0 1 10.0 1 0.7953 8 2.6191 9 27.0 2 39.0 2 41.0 2 0.0 0 11.0 2 32.6823 10 18.0 2 40.0 1 12.1496 9 91.0 2 5.0 1 0.8712 1)
Average genome size in population (length): 47.822
Average program size in population (points): 48.822
Average percent parens in population: 0.026
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.46525
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 85
Genome diversity (% unique Plush genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.032
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5447614
--- Timings ---
Current time: 1529614841139 milliseconds
Total Time:          15.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.1 seconds, 39.2%
Fitness Testing:      7.8 seconds, 50.6%
Report:               1.5 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 56514.0
Test mean error for best: 28.25700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -12.0514028787
Correct output: -5.4680423906  | Program output: 2.5319576094  
Correct output: -24.9418699852 | Program output: -7.9418699852 
Correct output: 56.9568119314  | Program output: 90.9568119314 
Correct output: -31.6601191221 | Program output: 65.3398808779 
Correct output: -37.1210864176 | Program output: 29.8789135824 
Correct output: -79.2516975843 | Program output: -98.2516975843
Correct output: 44.9272196671  | Program output: 24.9272196671 
Correct output: 66.6210657667  | Program output: 28.6210657667 
Correct output: -55.0537383904 | Program output: -34.0537383904
Correct output: -79.6354294126 | Program output: -89.6354294126
Correct output: 1.2524717345   | Program output: -8.7475282655 
Correct output: -3.1599714069  | Program output: 41.8400285931 
Correct output: 129.8497046591 | Program output: 57.8497046591 
Correct output: -125.0022721297 | Program output: -84.0022721297
Correct output: 141.1949920159 | Program output: 83.1949920159 
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 34.2843412425 
Correct output: 33.2581162527  | Program output: -36.7418837473
Correct output: 123.421863126  | Program output: 42.421863126  
Correct output: 106.1474875213 | Program output: 47.1474875213 
Correct output: 12.1495725478  | Program output: -78.8504274522
Correct output: -146.6027540177 | Program output: -53.6027540177
Correct output: -61.2140896321 | Program output: -66.2140896321
Correct output: 2.2138108865   | Program output: 8.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction in2} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction integer_div} {:instruction -66.52471224041092} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction print_float} {:instruction in1} {:instruction float_shove} {:instruction 79.75237327726668} {:instruction float_shove} {:instruction float_dec} {:instruction float_div} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_dec} {:instruction tag_float_347} {:instruction tag_float_919} {:instruction print_float} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup})
Best program: (float_sin float_sin integer_dec float_sin in2 integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_frominteger integer_div -66.52471224041092 integer_fromfloat float_rot float_add integer_add float_min integer_mult float_cos in1 float_inc float_shove print_float in1 float_shove 79.75237327726668 float_shove float_dec float_div integer_fromfloat float_tan float_dec tag_float_347 tag_float_919 print_float print_float integer_fromfloat integer_dup)
Errors: [85.0 12 8.0 12 17.0 2 34.0 2 97.0 13 67.0 13 19.0 2 20.0 1 38.0 2 21.0 2 10.0 1 10.0 11 45.0 12 72.0 3 41.0 3 58.0 3 0.0 0 88.0 3 70.0 11 81.0 2 59.0 3 91.0 12 93.0 3 5.0 1 6.0 1]
Total: 1265.0
Mean: 25.3
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3229.8404991
Median total errors in population: 1265.0
Error averages by case: (159.2509651 12.467 89.14820829999998 12.162 97.4545969 3.001 113.03036380000002 2.948 170.53619260000002 13.238 143.17261199999996 13.194 98.9998361 2.775 99.69059510000002 2.279 116.2500702 2.943 101.2310442 2.774 90.76637099999999 2.355 90.4447488 11.222 122.9166293 12.207 147.6404642 3.932 119.79083849999999 3.751 134.90127470000002 3.901 81.44677060000001 1.417 162.2278855 3.901 145.3926869 11.353 155.83611589999998 3.159 135.64146819999996 3.688 164.5654698 12.227 167.4052405 3.762 86.11768569999998 2.091 87.2933652 1.942)
Error minima by case: (26.9486 11 5.5069 9 16.0 2 10.9568 2 31.7228 11 36.2983 9 19.0 1 1.0728 1 20.6211 2 20.0 1 10.0 1 0.2525 9 2.16 9 72.0 3 40.0 2 58.0 3 0.0 0 76.2843 3 12.7419 10 77.4219 2 59.0 2 2.8605 10 92.0 2 5.0 1 1.2138 1)
Average genome size in population (length): 43.611
Average program size in population (points): 44.611
Average percent parens in population: 0.024
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.91275
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 127
Genome diversity (% unique Plush genomes):	 0.618
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 127
Syntactic diversity (% unique Push programs):	 0.618
Total error diversity:				 0.019
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6537939
--- Timings ---
Current time: 1529614844465 milliseconds
Total Time:          18.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.5 seconds, 39.9%
Fitness Testing:      9.2 seconds, 49.0%
Report:               2.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 56546.0
Test mean error for best: 28.27300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -11.0514028787
Correct output: -5.4680423906  | Program output: 3.5319576094  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 91.9568119314 
Correct output: -31.6601191221 | Program output: 66.3398808779 
Correct output: -37.1210864176 | Program output: 30.8789135824 
Correct output: -79.2516975843 | Program output: -97.2516975843
Correct output: 44.9272196671  | Program output: 25.9272196671 
Correct output: 66.6210657667  | Program output: 29.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -88.6354294126
Correct output: 1.2524717345   | Program output: -7.7475282655 
Correct output: -3.1599714069  | Program output: 42.8400285931 
Correct output: 129.8497046591 | Program output: 58.8497046591 
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 84.1949920159 
Correct output: -37.2353445012 | Program output: -36.2353445012
Correct output: 122.2843412425 | Program output: 35.2843412425 
Correct output: 33.2581162527  | Program output: -35.7418837473
Correct output: 123.421863126  | Program output: 43.421863126  
Correct output: 106.1474875213 | Program output: 48.1474875213 
Correct output: 12.1495725478  | Program output: -77.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -65.2140896321
Correct output: 2.2138108865   | Program output: 9.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min integer_mult float_cos in1 float_inc float_shove float_inc float_shove print_float)
Errors: [84.0 13 9.0 12 18.0 2 35.0 2 98.0 13 68.0 12 18.0 2 19.0 2 37.0 2 22.0 2 9.0 2 9.0 11 46.0 12 71.0 3 42.0 3 57.0 2 1.0 1 87.0 3 69.0 11 80.0 2 58.0 3 90.0 12 94.0 3 4.0 1 7.0 1]
Total: 1264.0
Mean: 25.28
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2384.5166171000005
Median total errors in population: 1265.0
Error averages by case: (127.9092282 12.14 52.056279 12.091 63.27349709999999 2.586 78.4898996 2.545 138.24247329999997 13.126 109.8014827 13.108 65.4698089 2.57 65.1754144 1.605 82.36322340000001 2.543 67.21526589999998 2.58 56.9409548 1.659 56.54564499999999 11.124 88.7531546 12.113 114.9421793 3.533 86.5252249 3.567 101.71330619999999 3.516 47.2536547 0.697 130.0927753 3.519 113.51830480000001 11.197 123.45324740000001 2.555 102.49031040000001 3.515 133.3675795 12.12 135.92773769999997 3.572 52.1066955 1.635 50.1292745 1.544)
Error minima by case: (25.9486 10 4.6482 9 16.0 2 9.9568 2 30.6806 10 36.2983 9 18.0 1 2.0728 1 19.6211 2 20.0 1 9.0 1 0.3079 9 2.16 9 71.0 3 40.0 2 57.0 2 0.0 0 75.2843 3 13.7419 11 76.4219 2 58.0 2 11.2541 8 92.0 2 4.0 1 1.3183 1)
Average genome size in population (length): 42.793
Average program size in population (points): 43.793
Average percent parens in population: 0.023
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.3595
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 126
Genome diversity (% unique Plush genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 126
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.017
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7607764
--- Timings ---
Current time: 1529614847637 milliseconds
Total Time:          22.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.9 seconds, 40.2%
Fitness Testing:     10.7 seconds, 48.3%
Report:               2.4 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 56546.0
Test mean error for best: 28.27300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -11.0514028787
Correct output: -5.4680423906  | Program output: 3.5319576094  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 91.9568119314 
Correct output: -31.6601191221 | Program output: 66.3398808779 
Correct output: -37.1210864176 | Program output: 30.8789135824 
Correct output: -79.2516975843 | Program output: -97.2516975843
Correct output: 44.9272196671  | Program output: 25.9272196671 
Correct output: 66.6210657667  | Program output: 29.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -88.6354294126
Correct output: 1.2524717345   | Program output: -7.7475282655 
Correct output: -3.1599714069  | Program output: 42.8400285931 
Correct output: 129.8497046591 | Program output: 58.8497046591 
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 84.1949920159 
Correct output: -37.2353445012 | Program output: -36.2353445012
Correct output: 122.2843412425 | Program output: 35.2843412425 
Correct output: 33.2581162527  | Program output: -35.7418837473
Correct output: 123.421863126  | Program output: 43.421863126  
Correct output: 106.1474875213 | Program output: 48.1474875213 
Correct output: 12.1495725478  | Program output: -77.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -65.2140896321
Correct output: 2.2138108865   | Program output: 9.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction print_integer} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float} {:instruction float_sub} {:instruction integer_flush} {:instruction 7.86482727348357} {:instruction float_sub} {:instruction float_dup_items} {:instruction in2})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add print_integer integer_mult float_cos in1 float_inc float_shove float_inc float_shove print_float float_sub integer_flush 7.86482727348357 float_sub float_dup_items in2)
Errors: [84.0 13 9.0 12 18.0 2 35.0 2 98.0 13 68.0 12 18.0 2 19.0 2 37.0 2 22.0 2 9.0 2 9.0 11 46.0 12 71.0 3 42.0 3 57.0 2 1.0 1 87.0 3 69.0 11 80.0 2 58.0 3 90.0 12 94.0 3 4.0 1 7.0 1]
Total: 1264.0
Mean: 25.28
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2860.9375935
Median total errors in population: 1265.0
Error averages by case: (145.31149910000002 12.163 72.9277791 12.12 81.92436760000001 2.837 97.8986825 2.779 156.2090319 13.155 128.3976838 13.123 85.0865209 2.834 84.82571030000001 1.858 101.66436700000001 2.782 85.8172902 2.839 76.74050809999999 1.928 75.2888762 11.165 107.7773047 12.142 133.58842629999998 3.776 105.7554685 3.828 120.66480619999999 3.751 66.2434883 0.994 148.396148 3.759 131.15277159999997 11.249 141.90962449999998 2.778 121.38848410000001 3.765 151.4281849 12.158 153.1848596 3.839 71.0027094 1.905 71.0480007 1.778)
Error minima by case: (72.0639 10 4.6482 9 16.0 2 33.0 2 30.8542 10 36.1217 9 18.0 1 19.0 1 37.0 2 20.0 1 9.0 1 1.6846 9 2.16 9 71.0 3 40.0 2 57.0 2 0.0 0 87.0 3 32.259 11 80.0 2 58.0 2 11.8439 9 92.0 2 4.0 1 1.2779 1)
Average genome size in population (length): 42.772
Average program size in population (points): 43.772
Average percent parens in population: 0.023
Minimum age in population: 6.0
Maximum age in population: 10.625
Average age in population: 8.83040625
Median age in population: 8.90625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 90
Genome diversity (% unique Plush genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.016
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.016
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 8677064
--- Timings ---
Current time: 1529614850736 milliseconds
Total Time:          25.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.3 seconds, 40.8%
Fitness Testing:     12.0 seconds, 47.6%
Report:               2.8 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 56546.0
Test mean error for best: 28.27300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -11.0514028787
Correct output: -5.4680423906  | Program output: 3.5319576094  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 91.9568119314 
Correct output: -31.6601191221 | Program output: 66.3398808779 
Correct output: -37.1210864176 | Program output: 30.8789135824 
Correct output: -79.2516975843 | Program output: -97.2516975843
Correct output: 44.9272196671  | Program output: 25.9272196671 
Correct output: 66.6210657667  | Program output: 29.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -88.6354294126
Correct output: 1.2524717345   | Program output: -7.7475282655 
Correct output: -3.1599714069  | Program output: 42.8400285931 
Correct output: 129.8497046591 | Program output: 58.8497046591 
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 84.1949920159 
Correct output: -37.2353445012 | Program output: -36.2353445012
Correct output: 122.2843412425 | Program output: 35.2843412425 
Correct output: 33.2581162527  | Program output: -35.7418837473
Correct output: 123.421863126  | Program output: 43.421863126  
Correct output: 106.1474875213 | Program output: 48.1474875213 
Correct output: 12.1495725478  | Program output: -77.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -65.2140896321
Correct output: 2.2138108865   | Program output: 9.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min integer_mult float_cos in1 float_inc float_shove float_inc float_shove print_float)
Errors: [84.0 13 9.0 12 18.0 2 35.0 2 98.0 13 68.0 12 18.0 2 19.0 2 37.0 2 22.0 2 9.0 2 9.0 11 46.0 12 71.0 3 42.0 3 57.0 2 1.0 1 87.0 3 69.0 11 80.0 2 58.0 3 90.0 12 94.0 3 4.0 1 7.0 1]
Total: 1264.0
Mean: 25.28
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2641.1098369
Median total errors in population: 1265.0
Error averages by case: (137.0144202 12.225 64.62312700000001 12.113 73.15330379999999 2.736 89.15370060000001 2.69 148.2991251 13.177 120.15038429999998 13.088 75.15795959999998 2.736 75.8708777 1.813 92.86027220000001 2.689 77.02808130000001 2.749 66.70748310000002 1.885 66.3949172 11.169 99.3558269 12.141 125.0364592 3.685 96.0879136 3.727 111.935479 3.605 57.26502789999999 0.939 140.03211 3.659 122.7956316 11.256 133.46336700000003 2.686 112.73672940000003 3.674 142.47509029999998 12.165 145.0032344 3.738 61.93891469999999 1.806 62.7294008 1.69)
Error minima by case: (26.9486 10 4.6482 9 15.9419 2 10.9568 2 30.8542 10 36.2983 9 18.0 1 1.0728 1 20.6211 2 19.0537 1 9.0 1 1.6846 9 2.16 9 71.0 3 39.0023 2 57.0 2 0.0 0 76.2843 3 12.7419 11 77.4219 2 58.0 2 12.4068 9 91.6028 2 4.0 1 1.6165 1)
Average genome size in population (length): 42.26
Average program size in population (points): 43.26
Average percent parens in population: 0.024
Minimum age in population: 7.5
Maximum age in population: 12.203125
Average age in population: 10.282875
Median age in population: 10.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 67
Genome diversity (% unique Plush genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.013
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 9733564
--- Timings ---
Current time: 1529614853816 milliseconds
Total Time:          28.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.7 seconds, 41.4%
Fitness Testing:     13.3 seconds, 46.9%
Report:               3.2 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 56546.0
Test mean error for best: 28.27300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -11.0514028787
Correct output: -5.4680423906  | Program output: 3.5319576094  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 91.9568119314 
Correct output: -31.6601191221 | Program output: 66.3398808779 
Correct output: -37.1210864176 | Program output: 30.8789135824 
Correct output: -79.2516975843 | Program output: -97.2516975843
Correct output: 44.9272196671  | Program output: 25.9272196671 
Correct output: 66.6210657667  | Program output: 29.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -88.6354294126
Correct output: 1.2524717345   | Program output: -7.7475282655 
Correct output: -3.1599714069  | Program output: 42.8400285931 
Correct output: 129.8497046591 | Program output: 58.8497046591 
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 84.1949920159 
Correct output: -37.2353445012 | Program output: -36.2353445012
Correct output: 122.2843412425 | Program output: 35.2843412425 
Correct output: 33.2581162527  | Program output: -35.7418837473
Correct output: 123.421863126  | Program output: 43.421863126  
Correct output: 106.1474875213 | Program output: 48.1474875213 
Correct output: 12.1495725478  | Program output: -77.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -65.2140896321
Correct output: 2.2138108865   | Program output: 9.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min integer_mult float_cos in1 float_inc float_shove float_inc float_shove print_float)
Errors: [84.0 13 9.0 12 18.0 2 35.0 2 98.0 13 68.0 12 18.0 2 19.0 2 37.0 2 22.0 2 9.0 2 9.0 11 46.0 12 71.0 3 42.0 3 57.0 2 1.0 1 87.0 3 69.0 11 80.0 2 58.0 3 90.0 12 94.0 3 4.0 1 7.0 1]
Total: 1264.0
Mean: 25.28
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2748.3444056000003
Median total errors in population: 1265.0
Error averages by case: (141.3360852 12.427 68.25904999999999 12.089 78.30608199999999 2.786 93.35796069999999 2.712 151.92060429999998 13.12 124.0014212 12.803 80.0081501 2.788 79.63181529999999 2.082 96.58579760000002 2.724 82.26618029999999 2.79 71.64362609999999 2.172 71.01466089999998 11.121 103.2593481 12.111 128.7149602 3.715 101.42608929999999 3.777 115.74669370000001 3.402 62.6053748 1.228 143.5418998 3.694 127.06872090000002 11.209 137.05838150000002 2.721 116.38811570000001 3.697 146.5112303 12.121 149.90400759999997 3.777 66.7882965 1.846 66.36685349999999 1.721)
Error minima by case: (71.4083 10 4.6482 9 16.0 2 33.0 2 30.6806 10 36.6889 10 18.0 1 19.0 1 37.0 2 20.0 1 9.0 1 0.2878 8 2.6191 9 71.0 3 40.0 2 57.0 2 0.0 0 87.0 3 31.7178 10 80.0 2 58.0 2 10.6093 9 92.0 2 4.0 1 0.6735 1)
Average genome size in population (length): 41.036
Average program size in population (points): 42.036
Average percent parens in population: 0.024
Minimum age in population: 8.875
Maximum age in population: 13.671875
Average age in population: 11.7022421875
Median age in population: 11.75
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 77
Genome diversity (% unique Plush genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.021
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 10759464
--- Timings ---
Current time: 1529614856950 milliseconds
Total Time:          31.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.1 seconds, 41.8%
Fitness Testing:     14.6 seconds, 46.5%
Report:               3.5 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 56546.0
Test mean error for best: 28.27300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -11.0514028787
Correct output: -5.4680423906  | Program output: 3.5319576094  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 91.9568119314 
Correct output: -31.6601191221 | Program output: 66.3398808779 
Correct output: -37.1210864176 | Program output: 30.8789135824 
Correct output: -79.2516975843 | Program output: -97.2516975843
Correct output: 44.9272196671  | Program output: 25.9272196671 
Correct output: 66.6210657667  | Program output: 29.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -88.6354294126
Correct output: 1.2524717345   | Program output: -7.7475282655 
Correct output: -3.1599714069  | Program output: 42.8400285931 
Correct output: 129.8497046591 | Program output: 58.8497046591 
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 84.1949920159 
Correct output: -37.2353445012 | Program output: -36.2353445012
Correct output: 122.2843412425 | Program output: 35.2843412425 
Correct output: 33.2581162527  | Program output: -35.7418837473
Correct output: 123.421863126  | Program output: 43.421863126  
Correct output: 106.1474875213 | Program output: 48.1474875213 
Correct output: 12.1495725478  | Program output: -77.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -65.2140896321
Correct output: 2.2138108865   | Program output: 9.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction tagged_565} {:instruction float_mult} {:instruction integer_dup} {:instruction float_pop} {:instruction float_stackdepth} {:instruction integer_yank} {:instruction float_mult} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_div} {:instruction float_sub} {:instruction integer_yankdup} {:instruction float_div} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction print_float} {:instruction in1} {:instruction float_shove} {:instruction 79.75237327726668} {:instruction float_shove} {:instruction float_dec} {:instruction float_div} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_dec} {:instruction tag_float_347} {:instruction tag_float_919} {:instruction print_float} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup})
Best program: (integer_div tagged_565 float_mult integer_dup float_pop float_stackdepth integer_yank float_mult integer_mod integer_sub integer_div float_sub integer_yankdup float_div integer_dec float_stackdepth integer_inc integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min integer_mult float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min integer_mult float_cos in1 float_inc float_inc float_shove print_float in1 float_shove 79.75237327726668 float_shove float_dec float_div integer_fromfloat float_tan float_dec tag_float_347 tag_float_919 print_float print_float integer_fromfloat integer_dup)
Errors: [84.0 13 9.0 12 18.0 2 35.0 2 98.0 13 68.0 12 18.0 2 19.0 2 37.0 2 22.0 2 9.0 2 9.0 11 46.0 12 71.0 3 42.0 3 57.0 2 1.0 1 87.0 3 69.0 11 80.0 2 58.0 3 90.0 12 94.0 3 4.0 1 7.0 1]
Total: 1264.0
Mean: 25.28
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2783.9646358000005
Median total errors in population: 1264.0
Error averages by case: (141.6897634 12.905 70.82410509999998 12.055 79.87996399999997 2.794 95.7948459 2.749 154.30839609999998 13.059 126.39238629999998 12.224 80.38388429999999 2.804 81.0376046 2.652 97.9269381 2.742 83.76060650000001 2.799 72.0323217 2.708 71.53195730000002 11.063 105.7553538 12.065 129.98105879999997 3.73 102.80204429999999 3.795 117.013351 2.902 64.1143079 1.778 144.8184339 3.733 127.5154179 11.145 138.5052958 2.741 117.73471500000001 3.732 146.98891619999998 12.068 151.3395646 3.798 67.2431261 1.871 68.9342772 1.744)
Error minima by case: (24.9486 10 4.7697 9 15.0 2 8.9568 2 30.9255 10 7.532 11 18.0 1 3.0728 1 18.6211 1 19.0 1 9.0 1 0.1462 8 3.6191 8 71.0 3 39.0 2 57.0 2 0.0 0 74.2843 2 14.7419 9 75.4219 2 58.0 2 11.4706 10 91.0 2 4.0 1 0.4238 1)
Average genome size in population (length): 39.872
Average program size in population (points): 40.872
Average percent parens in population: 0.025
Minimum age in population: 10.59375
Maximum age in population: 15.05078125
Average age in population: 13.138796875
Median age in population: 13.22265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 154
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 154
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.017
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 11756264
--- Timings ---
Current time: 1529614860156 milliseconds
Total Time:          34.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.5 seconds, 42.1%
Fitness Testing:     15.9 seconds, 46.2%
Report:               3.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 56563.0
Test mean error for best: 28.28150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -10.0514028787
Correct output: -5.4680423906  | Program output: 4.5319576094  
Correct output: -24.9418699852 | Program output: -5.9418699852 
Correct output: 56.9568119314  | Program output: 92.9568119314 
Correct output: -31.6601191221 | Program output: 67.3398808779 
Correct output: -37.1210864176 | Program output: 31.8789135824 
Correct output: -79.2516975843 | Program output: -96.2516975843
Correct output: 44.9272196671  | Program output: 26.9272196671 
Correct output: 66.6210657667  | Program output: 30.6210657667 
Correct output: -55.0537383904 | Program output: -32.0537383904
Correct output: -79.6354294126 | Program output: -87.6354294126
Correct output: 1.2524717345   | Program output: -6.7475282655 
Correct output: -3.1599714069  | Program output: 43.8400285931 
Correct output: 129.8497046591 | Program output: 59.8497046591 
Correct output: -125.0022721297 | Program output: -82.0022721297
Correct output: 141.1949920159 | Program output: 85.1949920159 
Correct output: -37.2353445012 | Program output: -35.2353445012
Correct output: 122.2843412425 | Program output: 36.2843412425 
Correct output: 33.2581162527  | Program output: -34.7418837473
Correct output: 123.421863126  | Program output: 44.421863126  
Correct output: 106.1474875213 | Program output: 49.1474875213 
Correct output: 12.1495725478  | Program output: -76.8504274522
Correct output: -146.6027540177 | Program output: -51.6027540177
Correct output: -61.2140896321 | Program output: -64.2140896321
Correct output: 2.2138108865   | Program output: 10.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction tagged_530} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (integer_div tagged_530 float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min integer_mult float_cos in1 float_inc float_shove float_inc float_inc float_shove print_float)
Errors: [83.0 13 10.0 12 19.0 2 36.0 2 99.0 13 69.0 12 17.0 2 18.0 2 36.0 2 23.0 2 8.0 2 8.0 11 47.0 11 70.0 2 43.0 2 56.0 3 2.0 1 86.0 3 68.0 11 79.0 3 57.0 3 89.0 12 95.0 3 3.0 1 8.0 2]
Total: 1261.0
Mean: 25.22
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2818.710586
Median total errors in population: 1264.0
Error averages by case: (143.4274633 12.998 70.853523 12.069 81.90444159999998 2.8 97.02647400000001 2.734 155.56369919999997 13.075 127.6955797 12.152 82.3261333 2.814 82.09715059999999 2.728 98.93119899999999 2.744 85.80111889999999 2.795 73.97523720000001 2.797 73.4185302 11.078 107.03163590000001 12.081 130.89105320000002 3.733 104.80070570000001 3.791 117.9925892 2.819 66.2287232 1.861 145.67009739999997 3.734 129.2569245 11.155 139.18916330000002 2.744 118.675869 3.728 148.64095569999998 12.075 153.2389263 3.793 69.2078106 1.873 68.95758199999999 1.737)
Error minima by case: (25.9486 10 5.5069 9 16.0 2 9.9568 2 31.7228 11 36.2983 9 17.0 1 2.0728 1 19.6211 2 20.0 1 8.0 1 0.248 9 2.16 9 70.0 2 40.0 2 56.0 2 0.0 0 75.2843 3 13.7419 10 76.4219 2 57.0 2 11.1496 9 92.0 2 3.0 1 1.2138 1)
Average genome size in population (length): 39.889
Average program size in population (points): 40.889
Average percent parens in population: 0.025
Minimum age in population: 11.59375
Maximum age in population: 16.677734375
Average age in population: 14.58577734375
Median age in population: 14.6201171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 93
Genome diversity (% unique Plush genomes):	 0.644
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.644
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 12753489
--- Timings ---
Current time: 1529614863225 milliseconds
Total Time:          37.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.9 seconds, 42.2%
Fitness Testing:     17.3 seconds, 45.7%
Report:               4.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 56563.0
Test mean error for best: 28.28150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -10.0514028787
Correct output: -5.4680423906  | Program output: 4.5319576094  
Correct output: -24.9418699852 | Program output: -5.9418699852 
Correct output: 56.9568119314  | Program output: 92.9568119314 
Correct output: -31.6601191221 | Program output: 67.3398808779 
Correct output: -37.1210864176 | Program output: 31.8789135824 
Correct output: -79.2516975843 | Program output: -96.2516975843
Correct output: 44.9272196671  | Program output: 26.9272196671 
Correct output: 66.6210657667  | Program output: 30.6210657667 
Correct output: -55.0537383904 | Program output: -32.0537383904
Correct output: -79.6354294126 | Program output: -87.6354294126
Correct output: 1.2524717345   | Program output: -6.7475282655 
Correct output: -3.1599714069  | Program output: 43.8400285931 
Correct output: 129.8497046591 | Program output: 59.8497046591 
Correct output: -125.0022721297 | Program output: -82.0022721297
Correct output: 141.1949920159 | Program output: 85.1949920159 
Correct output: -37.2353445012 | Program output: -35.2353445012
Correct output: 122.2843412425 | Program output: 36.2843412425 
Correct output: 33.2581162527  | Program output: -34.7418837473
Correct output: 123.421863126  | Program output: 44.421863126  
Correct output: 106.1474875213 | Program output: 49.1474875213 
Correct output: 12.1495725478  | Program output: -76.8504274522
Correct output: -146.6027540177 | Program output: -51.6027540177
Correct output: -61.2140896321 | Program output: -64.2140896321
Correct output: 2.2138108865   | Program output: 10.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction tagged_530} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (integer_div tagged_530 float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min integer_mult float_cos in1 float_inc float_shove float_inc float_inc float_shove print_float)
Errors: [83.0 13 10.0 12 19.0 2 36.0 2 99.0 13 69.0 12 17.0 2 18.0 2 36.0 2 23.0 2 8.0 2 8.0 11 47.0 11 70.0 2 43.0 2 56.0 3 2.0 1 86.0 3 68.0 11 79.0 3 57.0 3 89.0 12 95.0 3 3.0 1 8.0 2]
Total: 1261.0
Mean: 25.22
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2736.7816728
Median total errors in population: 1264.0
Error averages by case: (140.7200281 13.002 66.97825650000001 12.061 79.06288130000002 2.751 93.3594234 2.7 151.6721729 13.057 123.7686249 12.141 79.3990798 2.759 78.31640960000001 2.689 95.2346288 2.703 82.9635588 2.75 71.0309712 2.743 70.5429457 11.078 103.1168353 12.064 127.45979829999999 3.666 102.0838132 3.729 114.57874580000001 2.78 63.3323875 1.806 142.24186429999997 3.688 126.53177070000001 11.151 135.7519652 2.713 115.12352460000001 3.682 145.93637589999997 12.073 150.61723469999998 3.741 66.261076 1.813 65.6333003 1.724)
Error minima by case: (21.0514 9 5.5069 9 16.0 2 33.0 2 31.7228 9 36.2983 9 4.5833 1 18.0 1 27.3789 2 19.6147 1 4.967 1 0.2525 9 2.16 9 35.8497 2 40.0 2 47.195 2 0.0 0 28.2843 3 31.6903 10 29.4219 2 12.1475 2 10.5818 9 71.9343 2 3.0 1 0.5384 1)
Average genome size in population (length): 39.629
Average program size in population (points): 40.629
Average percent parens in population: 0.026
Minimum age in population: 13.53125
Maximum age in population: 18.072265625
Average age in population: 16.07194140625
Median age in population: 16.125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 60
Genome diversity (% unique Plush genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 60
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.024
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.024
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 13744214
--- Timings ---
Current time: 1529614866206 milliseconds
Total Time:          40.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.3 seconds, 42.4%
Fitness Testing:     18.5 seconds, 45.5%
Report:               4.8 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 56584.0
Test mean error for best: 28.29200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -9.0514028787 
Correct output: -5.4680423906  | Program output: 5.5319576094  
Correct output: -24.9418699852 | Program output: -4.9418699852 
Correct output: 56.9568119314  | Program output: 93.9568119314 
Correct output: -31.6601191221 | Program output: 68.3398808779 
Correct output: -37.1210864176 | Program output: 32.8789135824 
Correct output: -79.2516975843 | Program output: -95.2516975843
Correct output: 44.9272196671  | Program output: 27.9272196671 
Correct output: 66.6210657667  | Program output: 31.6210657667 
Correct output: -55.0537383904 | Program output: -31.0537383904
Correct output: -79.6354294126 | Program output: -86.6354294126
Correct output: 1.2524717345   | Program output: -5.7475282655 
Correct output: -3.1599714069  | Program output: 44.8400285931 
Correct output: 129.8497046591 | Program output: 60.8497046591 
Correct output: -125.0022721297 | Program output: -81.0022721297
Correct output: 141.1949920159 | Program output: 86.1949920159 
Correct output: -37.2353445012 | Program output: -34.2353445012
Correct output: 122.2843412425 | Program output: 37.2843412425 
Correct output: 33.2581162527  | Program output: -33.7418837473
Correct output: 123.421863126  | Program output: 45.421863126  
Correct output: 106.1474875213 | Program output: 50.1474875213 
Correct output: 12.1495725478  | Program output: -75.8504274522
Correct output: -146.6027540177 | Program output: -50.6027540177
Correct output: -61.2140896321 | Program output: -63.2140896321
Correct output: 2.2138108865   | Program output: 11.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_max} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction float_rot} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div integer_pop integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_max float_min integer_mult float_cos in1 float_inc float_shove float_min integer_mult float_cos float_rot float_cos in1 float_inc float_shove float_inc float_inc float_shove float_inc float_shove print_float)
Errors: [82.0 12 11.0 11 20.0 1 37.0 2 100.0 13 70.0 12 16.0 2 17.0 2 35.0 2 24.0 2 7.0 2 7.0 11 48.0 12 69.0 3 44.0 3 55.0 3 3.0 1 85.0 3 67.0 10 78.0 3 56.0 2 88.0 12 96.0 3 2.0 1 9.0 2]
Total: 1256.0
Mean: 25.12
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2762.0950027
Median total errors in population: 1264.0
Error averages by case: (140.4946738 12.965 70.55437239999999 12.053 79.08309589999999 2.831 95.00375319999999 2.751 153.59677729999999 13.058 125.70250649999998 12.141 79.52697299999998 2.836 79.85511050000001 2.738 96.7610506 2.756 83.06847599999999 2.835 71.17435440000001 2.828 70.3822818 11.059 104.9824187 11.963 128.8824856 3.647 102.2785044 3.726 115.9534304 2.938 63.49389169999999 1.899 143.7050291 3.756 126.23296440000001 11.14 137.2057463 2.85 116.60663210000001 3.743 145.5984945 12.055 150.78375979999998 3.83 66.3517662 1.918 68.65145410000001 1.849)
Error minima by case: (24.9486 9 4.7472 9 16.0 1 9.9568 2 30.9393 10 36.4002 8 16.0 1 2.0728 1 18.6211 2 20.0 1 7.0 1 1.0318 9 2.4391 9 69.0 2 40.0 2 55.0 2 0.0 0 74.2843 3 13.7419 9 75.4219 2 56.0 2 4.5897 9 92.0 2 2.0 1 0.5882 1)
Average genome size in population (length): 39.596
Average program size in population (points): 40.596
Average percent parens in population: 0.026
Minimum age in population: 14.73046875
Maximum age in population: 19.3505859375
Average age in population: 17.5572060546875
Median age in population: 17.637939453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.018
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 14734114
--- Timings ---
Current time: 1529614869296 milliseconds
Total Time:          43.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.7 seconds, 42.8%
Fitness Testing:     19.7 seconds, 45.1%
Report:               5.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 56584.0
Test mean error for best: 28.29200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -9.0514028787 
Correct output: -5.4680423906  | Program output: 5.5319576094  
Correct output: -24.9418699852 | Program output: -4.9418699852 
Correct output: 56.9568119314  | Program output: 93.9568119314 
Correct output: -31.6601191221 | Program output: 68.3398808779 
Correct output: -37.1210864176 | Program output: 32.8789135824 
Correct output: -79.2516975843 | Program output: -95.2516975843
Correct output: 44.9272196671  | Program output: 27.9272196671 
Correct output: 66.6210657667  | Program output: 31.6210657667 
Correct output: -55.0537383904 | Program output: -31.0537383904
Correct output: -79.6354294126 | Program output: -86.6354294126
Correct output: 1.2524717345   | Program output: -5.7475282655 
Correct output: -3.1599714069  | Program output: 44.8400285931 
Correct output: 129.8497046591 | Program output: 60.8497046591 
Correct output: -125.0022721297 | Program output: -81.0022721297
Correct output: 141.1949920159 | Program output: 86.1949920159 
Correct output: -37.2353445012 | Program output: -34.2353445012
Correct output: 122.2843412425 | Program output: 37.2843412425 
Correct output: 33.2581162527  | Program output: -33.7418837473
Correct output: 123.421863126  | Program output: 45.421863126  
Correct output: 106.1474875213 | Program output: 50.1474875213 
Correct output: 12.1495725478  | Program output: -75.8504274522
Correct output: -146.6027540177 | Program output: -50.6027540177
Correct output: -61.2140896321 | Program output: -63.2140896321
Correct output: 2.2138108865   | Program output: 11.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_max} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction float_rot} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div integer_pop integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_max float_min integer_mult float_cos in1 float_inc float_shove float_min integer_mult float_cos float_rot float_cos in1 float_inc float_shove float_inc float_inc float_shove float_inc float_shove print_float)
Errors: [82.0 12 11.0 11 20.0 1 37.0 2 100.0 13 70.0 12 16.0 2 17.0 2 35.0 2 24.0 2 7.0 2 7.0 11 48.0 12 69.0 3 44.0 3 55.0 3 3.0 1 85.0 3 67.0 10 78.0 3 56.0 2 88.0 12 96.0 3 2.0 1 9.0 2]
Total: 1256.0
Mean: 25.12
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2544.1252656
Median total errors in population: 1264.0
Error averages by case: (131.95394650000003 12.978 62.020829 12.041 70.60824590000001 2.701 86.7711224 2.667 145.7134268 13.045 117.6248876 12.126 70.1074181 2.713 70.72222930000001 2.656 87.80044919999999 2.671 74.60379429999999 2.711 61.6616482 2.705 61.05516709999999 11.06 96.71231840000002 11.604 120.2615148 3.193 93.94387429999999 3.251 107.2317592 3.192 54.744563400000004 1.756 135.20200569999997 3.658 117.57720359999999 11.117 128.64401360000002 3.126 107.85456260000001 3.639 137.1703609 12.061 142.9434171 3.706 56.8171466 1.762 60.105361 2.135)
Error minima by case: (26.9486 9 5.2886 9 6.9076 1 10.9568 2 13.6258 10 19.0868 11 16.0 1 1.0728 1 20.6211 2 20.0 1 7.0 1 0.2878 8 3.16 8 69.0 2 40.0 2 55.0 2 0.0 0 76.2843 3 12.7419 8 77.4219 2 56.0 2 8.5696 9 92.0 2 2.0 1 0.1916 1)
Average genome size in population (length): 41.35
Average program size in population (points): 42.35
Average percent parens in population: 0.024
Minimum age in population: 16.66748046875
Maximum age in population: 20.77001953125
Average age in population: 19.03786669921875
Median age in population: 19.12841796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 93
Genome diversity (% unique Plush genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 93
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.021
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 15767864
--- Timings ---
Current time: 1529614872418 milliseconds
Total Time:          46.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.2 seconds, 43.0%
Fitness Testing:     21.0 seconds, 44.9%
Report:               5.6 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 56584.0
Test mean error for best: 28.29200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -9.0514028787 
Correct output: -5.4680423906  | Program output: 5.5319576094  
Correct output: -24.9418699852 | Program output: -4.9418699852 
Correct output: 56.9568119314  | Program output: 93.9568119314 
Correct output: -31.6601191221 | Program output: 68.3398808779 
Correct output: -37.1210864176 | Program output: 32.8789135824 
Correct output: -79.2516975843 | Program output: -95.2516975843
Correct output: 44.9272196671  | Program output: 27.9272196671 
Correct output: 66.6210657667  | Program output: 31.6210657667 
Correct output: -55.0537383904 | Program output: -31.0537383904
Correct output: -79.6354294126 | Program output: -86.6354294126
Correct output: 1.2524717345   | Program output: -5.7475282655 
Correct output: -3.1599714069  | Program output: 44.8400285931 
Correct output: 129.8497046591 | Program output: 60.8497046591 
Correct output: -125.0022721297 | Program output: -81.0022721297
Correct output: 141.1949920159 | Program output: 86.1949920159 
Correct output: -37.2353445012 | Program output: -34.2353445012
Correct output: 122.2843412425 | Program output: 37.2843412425 
Correct output: 33.2581162527  | Program output: -33.7418837473
Correct output: 123.421863126  | Program output: 45.421863126  
Correct output: 106.1474875213 | Program output: 50.1474875213 
Correct output: 12.1495725478  | Program output: -75.8504274522
Correct output: -146.6027540177 | Program output: -50.6027540177
Correct output: -61.2140896321 | Program output: -63.2140896321
Correct output: 2.2138108865   | Program output: 11.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction tagged_530} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (integer_div tagged_530 float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min integer_mult float_cos in1 float_inc float_shove float_inc float_shove float_inc float_inc float_shove print_float)
Errors: [82.0 12 11.0 11 20.0 1 37.0 2 100.0 13 70.0 12 16.0 2 17.0 2 35.0 2 24.0 2 7.0 2 7.0 11 48.0 12 69.0 3 44.0 3 55.0 3 3.0 1 85.0 3 67.0 10 78.0 3 56.0 2 88.0 12 96.0 3 2.0 1 9.0 2]
Total: 1256.0
Mean: 25.12
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2848.3287763999997
Median total errors in population: 1261.0
Error averages by case: (143.14699949999996 12.923 74.6423198 11.998 84.10086419999998 2.829 98.99800889999999 2.82 157.14138029999998 13.055 129.5658665 12.137 82.97943919999999 2.895 82.1193126 2.81 98.92391450000001 2.818 88.10376010000002 2.885 74.464574 2.885 73.65324229999999 11.053 108.92201690000002 11.225 131.0727437 2.966 107.2609224 3.032 118.36700570000002 3.766 68.5588518 1.969 145.6952895 3.822 129.02331519999998 11.089 139.1997779 3.701 118.75969490000003 3.767 148.39806029999994 12.058 155.581741 3.868 69.772627 1.963 72.8380482 2.705)
Error minima by case: (21.0514 2 2.2018 8 17.0 1 7.9568 2 30.2755 10 37.1211 11 16.0 1 3.0728 1 11.0 2 21.0 2 7.0 1 0.2008 2 3.16 9 23.0 2 41.0 2 9.0 2 0.0 0 28.2843 3 14.7419 2 29.4219 2 10.0 2 7.5696 9 93.0 2 2.0 1 0.0124 1)
Average genome size in population (length): 43.501
Average program size in population (points): 44.501
Average percent parens in population: 0.023
Minimum age in population: 18.29150390625
Maximum age in population: 22.3753662109375
Average age in population: 20.47240856933594
Median age in population: 20.531005859375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 104
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 104
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.021
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 16855389
--- Timings ---
Current time: 1529614875455 milliseconds
Total Time:          49.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.5 seconds, 43.2%
Fitness Testing:     22.3 seconds, 44.7%
Report:               6.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 56764.0
Test mean error for best: 28.38200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -7.0514028787 
Correct output: -5.4680423906  | Program output: 7.5319576094  
Correct output: -24.9418699852 | Program output: -2.9418699852 
Correct output: 56.9568119314  | Program output: 95.9568119314 
Correct output: -31.6601191221 | Program output: 70.3398808779 
Correct output: -37.1210864176 | Program output: 34.8789135824 
Correct output: -79.2516975843 | Program output: -93.2516975843
Correct output: 44.9272196671  | Program output: 29.9272196671 
Correct output: 66.6210657667  | Program output: 33.6210657667 
Correct output: -55.0537383904 | Program output: -29.0537383904
Correct output: -79.6354294126 | Program output: -84.6354294126
Correct output: 1.2524717345   | Program output: -3.7475282655 
Correct output: -3.1599714069  | Program output: 46.8400285931 
Correct output: 129.8497046591 | Program output: 62.8497046591 
Correct output: -125.0022721297 | Program output: -79.0022721297
Correct output: 141.1949920159 | Program output: 88.1949920159 
Correct output: -37.2353445012 | Program output: -32.2353445012
Correct output: 122.2843412425 | Program output: 39.2843412425 
Correct output: 33.2581162527  | Program output: -31.7418837473
Correct output: 123.421863126  | Program output: 47.421863126  
Correct output: 106.1474875213 | Program output: 52.1474875213 
Correct output: 12.1495725478  | Program output: -73.8504274522
Correct output: -146.6027540177 | Program output: -48.6027540177
Correct output: -61.2140896321 | Program output: -61.2140896321
Correct output: 2.2138108865   | Program output: 13.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_shove} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec tagged_922 integer_max float_div print_float float_add integer_dup_items integer_max float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_shove float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min float_yank float_rot in1 float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove print_float)
Errors: [80.0 12 13.0 12 22.0 1 39.0 2 102.0 13 72.0 12 14.0 2 15.0 2 33.0 2 26.0 2 5.0 2 5.0 11 50.0 12 67.0 2 46.0 3 53.0 3 5.0 1 83.0 3 65.0 11 76.0 3 54.0 3 86.0 12 98.0 2 0.0 0 11.0 2]
Total: 1250.0
Mean: 25.0
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2762.5033072
Median total errors in population: 1261.0
Error averages by case: (139.45408890000002 12.691 71.26976049999999 11.769 80.3061584 2.603 96.33796559999998 2.814 154.139175 13.035 126.62790269999996 12.125 78.736891 2.892 79.0366597 2.798 95.9762016 2.815 84.3557118 2.876 70.29596740000001 2.88 69.32530009999999 11.046 105.8690996 11.411 128.2913057 3.154 103.73265990000002 3.224 115.5369929 3.786 64.753399 1.952 142.96423869999998 3.805 125.06379940000001 10.872 136.50551539999998 3.712 115.95276720000003 3.53 144.2729316 12.039 152.07893190000001 3.856 65.44279420000001 1.947 69.816089 2.729)
Error minima by case: (25.9486 8 4.5342 9 16.0 1 9.9568 2 30.6804 10 37.1549 10 14.0 1 2.0728 1 19.6211 2 20.0 1 5.0 1 0.0318 8 2.6191 9 67.0 2 28.1595 2 53.0 2 0.0 0 75.2843 3 0.306 8 76.0 2 54.0 2 8.5696 8 49.76 2 0.0 0 0.0124 1)
Average genome size in population (length): 44.103
Average program size in population (points): 45.103
Average percent parens in population: 0.023
Minimum age in population: 19.29150390625
Maximum age in population: 24.25537109375
Average age in population: 22.01662164306641
Median age in population: 22.06048583984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.029
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 17957964
--- Timings ---
Current time: 1529614878547 milliseconds
Total Time:          53.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.9 seconds, 43.3%
Fitness Testing:     23.6 seconds, 44.5%
Report:               6.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 56796.0
Test mean error for best: 28.39800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -6.0514028787 
Correct output: -5.4680423906  | Program output: 8.5319576094  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 96.9568119314 
Correct output: -31.6601191221 | Program output: 71.3398808779 
Correct output: -37.1210864176 | Program output: 35.8789135824 
Correct output: -79.2516975843 | Program output: -92.2516975843
Correct output: 44.9272196671  | Program output: 30.9272196671 
Correct output: 66.6210657667  | Program output: 34.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -83.6354294126
Correct output: 1.2524717345   | Program output: -2.7475282655 
Correct output: -3.1599714069  | Program output: 47.8400285931 
Correct output: 129.8497046591 | Program output: 63.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 89.1949920159 
Correct output: -37.2353445012 | Program output: -31.2353445012
Correct output: 122.2843412425 | Program output: 40.2843412425 
Correct output: 33.2581162527  | Program output: -30.7418837473
Correct output: 123.421863126  | Program output: 48.421863126  
Correct output: 106.1474875213 | Program output: 53.1474875213 
Correct output: 12.1495725478  | Program output: -72.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -60.2140896321
Correct output: 2.2138108865   | Program output: 14.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction tagged_530} {:instruction float_sin} {:instruction integer_max} {:instruction float_sin} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (integer_div tagged_530 float_sin integer_max float_sin integer_max float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min integer_mult float_cos in1 float_inc float_shove float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_shove print_float)
Errors: [79.0 12 14.0 12 23.0 2 40.0 1 103.0 12 73.0 12 13.0 2 14.0 2 32.0 2 27.0 2 4.0 2 4.0 10 51.0 12 66.0 3 47.0 3 52.0 3 6.0 1 82.0 3 64.0 11 75.0 3 53.0 3 85.0 11 99.0 2 1.0 1 12.0 2]
Total: 1248.0
Mean: 24.96
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 2427.0479755999995
Median total errors in population: 1256.0
Error averages by case: (125.76193579999999 12.125 58.45342139999998 11.279 67.24640470000001 2.044 83.5064645 2.735 141.86080470000002 13.024 114.0802654 12.092 64.8874507 2.823 64.77405009999998 2.713 81.91273420000002 2.741 71.5958579 2.836 56.48315530000002 2.831 54.71232839999999 11.028 92.89450280000001 11.883 114.86376209999997 3.558 91.6870855 3.697 102.06823829999998 3.704 51.711833100000014 1.921 129.60930509999997 3.734 111.0031719 10.337 123.11006300000001 3.645 102.27198350000003 2.973 130.11962030000004 11.996 140.5495052 3.769 51.44277490000001 1.86 56.45525680000001 2.638)
Error minima by case: (6.1513 2 4.6482 9 17.0 1 9.8405 1 30.8542 10 36.2983 9 12.0 1 13.0 1 0.1762 2 21.0 2 3.0 1 0.1211 2 2.16 8 23.0 2 41.0 2 9.0 2 0.0 0 39.0 3 21.0 2 32.0 2 10.0 2 7.5696 8 93.0 1 0.0 0 0.0124 1)
Average genome size in population (length): 44.699
Average program size in population (points): 45.699
Average percent parens in population: 0.022
Minimum age in population: 20.6708984375
Maximum age in population: 25.4775390625
Average age in population: 23.57689715576172
Median age in population: 23.61766052246094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 68
Genome diversity (% unique Plush genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.032
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.034
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 19075439
--- Timings ---
Current time: 1529614881676 milliseconds
Total Time:          56.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.3 seconds, 43.3%
Fitness Testing:     25.0 seconds, 44.5%
Report:               6.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 56796.0
Test mean error for best: 28.39800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -6.0514028787 
Correct output: -5.4680423906  | Program output: 8.5319576094  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 96.9568119314 
Correct output: -31.6601191221 | Program output: 71.3398808779 
Correct output: -37.1210864176 | Program output: 35.8789135824 
Correct output: -79.2516975843 | Program output: -92.2516975843
Correct output: 44.9272196671  | Program output: 30.9272196671 
Correct output: 66.6210657667  | Program output: 34.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -83.6354294126
Correct output: 1.2524717345   | Program output: -2.7475282655 
Correct output: -3.1599714069  | Program output: 47.8400285931 
Correct output: 129.8497046591 | Program output: 63.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 89.1949920159 
Correct output: -37.2353445012 | Program output: -31.2353445012
Correct output: 122.2843412425 | Program output: 40.2843412425 
Correct output: 33.2581162527  | Program output: -30.7418837473
Correct output: 123.421863126  | Program output: 48.421863126  
Correct output: 106.1474875213 | Program output: 53.1474875213 
Correct output: 12.1495725478  | Program output: -72.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -60.2140896321
Correct output: 2.2138108865   | Program output: 14.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction tagged_530} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_cos} {:instruction float_rot} {:instruction float_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (integer_div tagged_530 float_sin float_sin integer_dec float_sin integer_max integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_dup_times integer_dec float_yankdup integer_add float_cos float_rot float_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min integer_mult float_cos in1 float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove print_float)
Errors: [79.0 12 14.0 12 23.0 2 40.0 1 103.0 12 73.0 12 13.0 2 14.0 2 32.0 2 27.0 2 4.0 2 4.0 10 51.0 12 66.0 3 47.0 3 52.0 3 6.0 1 82.0 3 64.0 11 75.0 3 53.0 3 85.0 11 99.0 2 1.0 1 12.0 2]
Total: 1248.0
Mean: 24.96
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2550.7329413
Median total errors in population: 1256.0
Error averages by case: (129.8172553 12.02 63.933249499999995 11.377 72.67551259999999 2.149 89.019841 2.83 146.46449299999998 12.979 118.91700349999999 12.078 69.67616850000002 2.901 69.38493079999999 2.831 86.49890570000002 2.851 77.1197478 2.891 61.29978900000001 2.9 59.26937109999999 11.001 97.9188518 11.97 119.55534409999997 3.706 97.27968000000001 3.87 107.055854 3.821 57.3322933 1.985 134.08921270000002 3.857 115.03981869999998 10.471 127.65763020000001 3.757 106.94482860000004 3.219 134.2054421 11.987 145.79907539999996 3.612 56.28506170000001 1.869 61.93358090000001 2.628)
Error minima by case: (22.9486 6 1.6184 9 7.4527 1 6.9568 1 0.7344 9 4.7265 9 11.0 2 0.0728 1 16.6211 1 21.0 2 2.0 1 0.6589 9 2.6191 8 64.0 2 41.0 2 50.0 2 0.0 0 72.2843 2 2.3225 8 73.0 2 51.0 2 5.6319 9 93.0 1 0.0 0 0.2752 1)
Average genome size in population (length): 44.568
Average program size in population (points): 45.568
Average percent parens in population: 0.022
Minimum age in population: 21.6708984375
Maximum age in population: 26.96499633789062
Average age in population: 25.16253659057617
Median age in population: 25.20804595947266
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.04
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 20189639
--- Timings ---
Current time: 1529614884867 milliseconds
Total Time:          59.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.7 seconds, 43.4%
Fitness Testing:     26.4 seconds, 44.5%
Report:               7.1 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 57206.0
Test mean error for best: 28.60300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -2.0514028787 
Correct output: -5.4680423906  | Program output: 12.5319576094 
Correct output: -24.9418699852 | Program output: 2.0581300148  
Correct output: 56.9568119314  | Program output: 100.9568119314
Correct output: -31.6601191221 | Program output: 75.3398808779 
Correct output: -37.1210864176 | Program output: 39.8789135824 
Correct output: -79.2516975843 | Program output: -88.2516975843
Correct output: 44.9272196671  | Program output: 34.9272196671 
Correct output: 66.6210657667  | Program output: 38.6210657667 
Correct output: -55.0537383904 | Program output: -24.0537383904
Correct output: -79.6354294126 | Program output: -79.6354294126
Correct output: 1.2524717345   | Program output: 1.2524717345  
Correct output: -3.1599714069  | Program output: 51.8400285931 
Correct output: 129.8497046591 | Program output: 67.8497046591 
Correct output: -125.0022721297 | Program output: -74.0022721297
Correct output: 141.1949920159 | Program output: 93.1949920159 
Correct output: -37.2353445012 | Program output: -27.2353445012
Correct output: 122.2843412425 | Program output: 44.2843412425 
Correct output: 33.2581162527  | Program output: -26.7418837473
Correct output: 123.421863126  | Program output: 52.421863126  
Correct output: 106.1474875213 | Program output: 57.1474875213 
Correct output: 12.1495725478  | Program output: -68.8504274522
Correct output: -146.6027540177 | Program output: -43.6027540177
Correct output: -61.2140896321 | Program output: -56.2140896321
Correct output: 2.2138108865   | Program output: 18.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_shove} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec tagged_922 integer_max float_div print_float float_add integer_dup_items integer_max float_sin float_sin integer_dec float_sin integer_max float_max float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_shove float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove print_float)
Errors: [75.0 11 18.0 12 27.0 12 44.0 3 107.0 13 77.0 12 9.0 2 10.0 1 28.0 2 31.0 2 0.0 0 0.0 0 55.0 12 62.0 3 51.0 3 48.0 3 10.0 1 78.0 3 60.0 12 71.0 2 49.0 3 81.0 12 103.0 2 5.0 2 16.0 2]
Total: 1245.0
Mean: 24.9
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2972.8331947999995
Median total errors in population: 1250.0
Error averages by case: (145.31753410000002 12.069 81.7563748 11.943 91.3464339 2.451 107.22067969999999 2.797 164.36198 12.913 137.1307385 12.147 85.66565729999998 3.011 85.6618058 2.919 102.38672399999999 2.935 95.5161542 2.999 77.45655160000001 3.0 76.0318992 10.899 116.4715471 12.04 134.50302649999998 3.452 114.9234083 3.982 122.01151260000002 3.909 76.1082884 2.091 148.9438813 3.93 131.11297770000002 11.06 142.58719810000005 3.848 122.23340540000004 3.816 150.0312604 11.921 162.6803327 3.189 72.88127220000003 1.647 80.86555100000001 2.659)
Error minima by case: (8.0216 8 5.6482 9 13.0581 1 7.9568 1 31.8542 9 36.3147 10 9.0 1 4.0728 1 1.6941 1 9.0537 1 0.0 0 0.0 0 0.229 8 10.1503 2 39.0023 2 29.195 2 0.0 0 49.7157 2 15.7419 9 34.5781 2 7.8525 2 6.3253 8 43.3972 1 0.0 0 0.0817 1)
Average genome size in population (length): 44.516
Average program size in population (points): 45.516
Average percent parens in population: 0.023
Minimum age in population: 23.980712890625
Maximum age in population: 28.54429626464844
Average age in population: 26.73918314361572
Median age in population: 26.78129577636719
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.626
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.626
Total error diversity:				 0.037
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 21302539
--- Timings ---
Current time: 1529614888040 milliseconds
Total Time:          62.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.1 seconds, 43.5%
Fitness Testing:     27.7 seconds, 44.3%
Report:               7.5 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 57206.0
Test mean error for best: 28.60300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -2.0514028787 
Correct output: -5.4680423906  | Program output: 12.5319576094 
Correct output: -24.9418699852 | Program output: 2.0581300148  
Correct output: 56.9568119314  | Program output: 100.9568119314
Correct output: -31.6601191221 | Program output: 75.3398808779 
Correct output: -37.1210864176 | Program output: 39.8789135824 
Correct output: -79.2516975843 | Program output: -88.2516975843
Correct output: 44.9272196671  | Program output: 34.9272196671 
Correct output: 66.6210657667  | Program output: 38.6210657667 
Correct output: -55.0537383904 | Program output: -24.0537383904
Correct output: -79.6354294126 | Program output: -79.6354294126
Correct output: 1.2524717345   | Program output: 1.2524717345  
Correct output: -3.1599714069  | Program output: 51.8400285931 
Correct output: 129.8497046591 | Program output: 67.8497046591 
Correct output: -125.0022721297 | Program output: -74.0022721297
Correct output: 141.1949920159 | Program output: 93.1949920159 
Correct output: -37.2353445012 | Program output: -27.2353445012
Correct output: 122.2843412425 | Program output: 44.2843412425 
Correct output: 33.2581162527  | Program output: -26.7418837473
Correct output: 123.421863126  | Program output: 52.421863126  
Correct output: 106.1474875213 | Program output: 57.1474875213 
Correct output: 12.1495725478  | Program output: -68.8504274522
Correct output: -146.6027540177 | Program output: -43.6027540177
Correct output: -61.2140896321 | Program output: -56.2140896321
Correct output: 2.2138108865   | Program output: 18.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_shove} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec tagged_922 integer_max float_div print_float float_add integer_dup_items integer_max float_sin float_sin integer_dec float_sin integer_max float_max float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_shove float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove print_float)
Errors: [75.0 11 18.0 12 27.0 12 44.0 3 107.0 13 77.0 12 9.0 2 10.0 1 28.0 2 31.0 2 0.0 0 0.0 0 55.0 12 62.0 3 51.0 3 48.0 3 10.0 1 78.0 3 60.0 12 71.0 2 49.0 3 81.0 12 103.0 2 5.0 2 16.0 2]
Total: 1245.0
Mean: 24.9
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2681.3112729000004
Median total errors in population: 1248.0
Error averages by case: (133.52424809999997 12.075 71.8472587 12.057 80.40383200000001 2.747 96.67560770000003 2.238 154.7200142 12.459 126.9790328 12.126 72.7121097 2.874 72.8959532 2.815 89.84402560000002 2.821 84.47717829999999 2.865 64.36612590000001 2.869 63.1258874 10.355 106.16397000000002 12.065 122.2619741 3.523 103.9677115 3.845 109.5957676 3.802 64.8901342 1.955 136.9758289 3.811 119.13859039999998 11.176 130.4954769 3.73 109.86789410000003 3.808 138.44028999999998 11.469 152.41520559999998 2.934 60.766863799999996 1.693 69.9252922 2.723)
Error minima by case: (27.9486 8 4.5823 8 0.1877 1 5.9568 1 6.5306 10 11.9916 9 9.0 1 0.0728 1 1.3789 1 5.0537 1 0.0 0 0.0 0 2.2743 8 6.1503 2 35.0023 2 30.195 2 0.0 0 45.7157 2 11.7419 9 30.5781 2 3.8525 2 5.4068 7 44.3972 1 0.0 0 0.0027 1)
Average genome size in population (length): 45.61
Average program size in population (points): 46.61
Average percent parens in population: 0.022
Minimum age in population: 24.980712890625
Maximum age in population: 30.04813385009766
Average age in population: 28.2805869178772
Median age in population: 28.34476661682129
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.035
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 22442789
--- Timings ---
Current time: 1529614891288 milliseconds
Total Time:          65.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.5 seconds, 43.4%
Fitness Testing:     29.1 seconds, 44.3%
Report:               8.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 57206.0
Test mean error for best: 28.60300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -2.0514028787 
Correct output: -5.4680423906  | Program output: 12.5319576094 
Correct output: -24.9418699852 | Program output: 2.0581300148  
Correct output: 56.9568119314  | Program output: 100.9568119314
Correct output: -31.6601191221 | Program output: 75.3398808779 
Correct output: -37.1210864176 | Program output: 39.8789135824 
Correct output: -79.2516975843 | Program output: -88.2516975843
Correct output: 44.9272196671  | Program output: 34.9272196671 
Correct output: 66.6210657667  | Program output: 38.6210657667 
Correct output: -55.0537383904 | Program output: -24.0537383904
Correct output: -79.6354294126 | Program output: -79.6354294126
Correct output: 1.2524717345   | Program output: 1.2524717345  
Correct output: -3.1599714069  | Program output: 51.8400285931 
Correct output: 129.8497046591 | Program output: 67.8497046591 
Correct output: -125.0022721297 | Program output: -74.0022721297
Correct output: 141.1949920159 | Program output: 93.1949920159 
Correct output: -37.2353445012 | Program output: -27.2353445012
Correct output: 122.2843412425 | Program output: 44.2843412425 
Correct output: 33.2581162527  | Program output: -26.7418837473
Correct output: 123.421863126  | Program output: 52.421863126  
Correct output: 106.1474875213 | Program output: 57.1474875213 
Correct output: 12.1495725478  | Program output: -68.8504274522
Correct output: -146.6027540177 | Program output: -43.6027540177
Correct output: -61.2140896321 | Program output: -56.2140896321
Correct output: 2.2138108865   | Program output: 18.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_sin} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_sin integer_max float_sin float_sin integer_dec float_sin float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_frominteger integer_div float_frominteger integer_fromfloat integer_max float_max float_max integer_div float_max integer_sub integer_mult integer_shove print_float float_yankdup integer_add float_dec float_shove float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove print_float)
Errors: [75.0 11 18.0 12 27.0 12 44.0 3 107.0 13 77.0 12 9.0 2 10.0 1 28.0 2 31.0 2 0.0 0 0.0 0 55.0 12 62.0 3 51.0 3 48.0 3 10.0 1 78.0 3 60.0 12 71.0 2 49.0 3 81.0 12 103.0 2 5.0 2 16.0 2]
Total: 1245.0
Mean: 24.9
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3234.5035796
Median total errors in population: 1248.0
Error averages by case: (154.21865680000002 12.038 95.1522539 12.057 103.46607610000002 3.546 118.91948949999998 2.293 175.72512210000005 12.246 148.75294589999996 12.156 94.75298419999999 3.109 95.1703858 3.015 111.70118950000001 3.059 107.33290790000001 3.087 86.6283218 3.032 85.86566080000001 9.79 128.5024386 12.052 143.4279444 4.012 126.2308728 4.08 131.0319329 4.048 88.1703756 2.214 157.69949689999999 4.048 140.2988589 11.218 151.40930250000002 3.922 131.29626130000003 4.043 159.2400348 11.267 173.63133279999997 3.182 83.94922770000001 2.215 93.2595061 2.941)
Error minima by case: (19.9486 1 6.7143 9 16.0 1 3.9568 1 9.2876 9 3.8266 10 4.0 1 5.0 1 13.6211 1 5.8454 1 0.0 0 0.0 0 4.9994 8 57.0 2 40.0 2 43.0 2 0.0 0 69.2843 2 16.7419 10 66.0 2 44.0 2 5.6243 8 85.7036 1 0.0 0 0.0817 1)
Average genome size in population (length): 46.845
Average program size in population (points): 47.845
Average percent parens in population: 0.022
Minimum age in population: 27.60740280151367
Maximum age in population: 31.6506290435791
Average age in population: 29.76915000534058
Median age in population: 29.78802394866943
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 82
Genome diversity (% unique Plush genomes):	 0.646
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.646
Total error diversity:				 0.034
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 23613914
--- Timings ---
Current time: 1529614894599 milliseconds
Total Time:          68.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.8 seconds, 43.3%
Fitness Testing:     30.5 seconds, 44.3%
Report:               8.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 57206.0
Test mean error for best: 28.60300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -2.0514028787 
Correct output: -5.4680423906  | Program output: 12.5319576094 
Correct output: -24.9418699852 | Program output: 2.0581300148  
Correct output: 56.9568119314  | Program output: 100.9568119314
Correct output: -31.6601191221 | Program output: 75.3398808779 
Correct output: -37.1210864176 | Program output: 39.8789135824 
Correct output: -79.2516975843 | Program output: -88.2516975843
Correct output: 44.9272196671  | Program output: 34.9272196671 
Correct output: 66.6210657667  | Program output: 38.6210657667 
Correct output: -55.0537383904 | Program output: -24.0537383904
Correct output: -79.6354294126 | Program output: -79.6354294126
Correct output: 1.2524717345   | Program output: 1.2524717345  
Correct output: -3.1599714069  | Program output: 51.8400285931 
Correct output: 129.8497046591 | Program output: 67.8497046591 
Correct output: -125.0022721297 | Program output: -74.0022721297
Correct output: 141.1949920159 | Program output: 93.1949920159 
Correct output: -37.2353445012 | Program output: -27.2353445012
Correct output: 122.2843412425 | Program output: 44.2843412425 
Correct output: 33.2581162527  | Program output: -26.7418837473
Correct output: 123.421863126  | Program output: 52.421863126  
Correct output: 106.1474875213 | Program output: 57.1474875213 
Correct output: 12.1495725478  | Program output: -68.8504274522
Correct output: -146.6027540177 | Program output: -43.6027540177
Correct output: -61.2140896321 | Program output: -56.2140896321
Correct output: 2.2138108865   | Program output: 18.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction print_float} {:instruction integer_sub} {:instruction float_shove} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_shove} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div print_float integer_sub float_shove integer_shove 46 float_yankdup integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_yankdup integer_add integer_mult float_shove float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove print_float)
Errors: [75.0 11 18.0 12 27.0 12 44.0 3 107.0 13 77.0 12 9.0 2 10.0 1 28.0 2 31.0 2 0.0 0 0.0 0 55.0 12 62.0 3 51.0 3 48.0 3 10.0 1 78.0 3 60.0 12 71.0 2 49.0 3 81.0 12 103.0 2 5.0 2 16.0 2]
Total: 1245.0
Mean: 24.9
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3266.9944837999997
Median total errors in population: 1248.0
Error averages by case: (155.42229129999998 11.889 96.6383774 12.067 104.9554591 5.216 120.45964620000001 2.573 177.6850377 12.43 150.4973306 12.171 95.66628039999999 3.068 96.24031509999999 2.821 112.73766870000001 3.018 108.7525307 3.053 87.5096846 2.678 87.0284598 8.142 130.2151963 12.067 144.14054270000003 3.984 127.34287189999999 4.047 131.5843936 4.016 90.5038467 2.18 158.54429940000006 4.018 141.632132 11.406 152.2190441 3.728 132.13931240000002 3.989 160.7557157 11.448 174.87450499999997 3.154 86.2659323 2.36 94.75761010000001 2.903)
Error minima by case: (18.6677 2 4.6482 8 17.0 1 6.9568 1 30.8542 10 37.1549 9 3.0 1 4.0 1 16.6211 1 21.0 1 0.0 0 0.0 0 2.6191 9 51.5859 2 41.0 2 42.0 2 0.0 0 26.7742 2 3.2581 10 34.4722 2 41.0999 2 5.0313 10 93.0 1 0.0 0 2.5659 1)
Average genome size in population (length): 49.781
Average program size in population (points): 50.781
Average percent parens in population: 0.021
Minimum age in population: 28.65624237060547
Maximum age in population: 33.4214973449707
Average age in population: 31.27369112110138
Median age in population: 31.30137491226196
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.711
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.711
Total error diversity:				 0.029
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 24858439
--- Timings ---
Current time: 1529614897783 milliseconds
Total Time:          72.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.2 seconds, 43.2%
Fitness Testing:     31.9 seconds, 44.2%
Report:               9.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 57206.0
Test mean error for best: 28.60300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -2.0514028787 
Correct output: -5.4680423906  | Program output: 12.5319576094 
Correct output: -24.9418699852 | Program output: 2.0581300148  
Correct output: 56.9568119314  | Program output: 100.9568119314
Correct output: -31.6601191221 | Program output: 75.3398808779 
Correct output: -37.1210864176 | Program output: 39.8789135824 
Correct output: -79.2516975843 | Program output: -88.2516975843
Correct output: 44.9272196671  | Program output: 34.9272196671 
Correct output: 66.6210657667  | Program output: 38.6210657667 
Correct output: -55.0537383904 | Program output: -24.0537383904
Correct output: -79.6354294126 | Program output: -79.6354294126
Correct output: 1.2524717345   | Program output: 1.2524717345  
Correct output: -3.1599714069  | Program output: 51.8400285931 
Correct output: 129.8497046591 | Program output: 67.8497046591 
Correct output: -125.0022721297 | Program output: -74.0022721297
Correct output: 141.1949920159 | Program output: 93.1949920159 
Correct output: -37.2353445012 | Program output: -27.2353445012
Correct output: 122.2843412425 | Program output: 44.2843412425 
Correct output: 33.2581162527  | Program output: -26.7418837473
Correct output: 123.421863126  | Program output: 52.421863126  
Correct output: 106.1474875213 | Program output: 57.1474875213 
Correct output: 12.1495725478  | Program output: -68.8504274522
Correct output: -146.6027540177 | Program output: -43.6027540177
Correct output: -61.2140896321 | Program output: -56.2140896321
Correct output: 2.2138108865   | Program output: 18.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_mult} {:instruction float_shove} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec tagged_922 integer_max float_div print_float float_add integer_dup_items integer_max float_sin float_sin integer_dec float_sin integer_max float_max float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add integer_mult float_shove float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove print_float)
Errors: [75.0 11 18.0 12 27.0 12 44.0 3 107.0 13 77.0 12 9.0 2 10.0 1 28.0 2 31.0 2 0.0 0 0.0 0 55.0 12 62.0 3 51.0 3 48.0 3 10.0 1 78.0 3 60.0 12 71.0 2 49.0 3 81.0 12 103.0 2 5.0 2 16.0 2]
Total: 1245.0
Mean: 24.9
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3298.4704548
Median total errors in population: 1245.0
Error averages by case: (154.3397764 11.401 99.9018373 12.061 106.9666649 9.988 124.31924369999999 3.464 181.20448099999996 12.861 154.1899044 12.173 95.101596 3.071 95.3296097 2.419 111.84109779999999 3.015 112.89105289999999 3.065 87.1214646 1.862 85.14259219999998 3.534 133.9344461 12.063 143.32821920000004 3.997 131.74165339999996 4.049 130.8335917 4.001 93.71447410000002 2.273 157.6660228 4.014 140.4210609 11.858 151.4596441 3.322 131.2973973 3.979 159.302726 11.876 178.98465789999997 3.191 89.49689249999999 2.88 98.60434790000001 2.919)
Error minima by case: (25.9486 2 5.9289 8 16.0 1 9.9568 1 32.121 10 16.532 9 0.0 0 1.0 1 19.0 1 20.0 1 0.0 0 0.0 0 3.6208 9 53.0 2 40.0 2 39.0 2 0.0 0 69.0 2 12.7419 9 62.0 2 40.0 2 3.4706 9 92.0 1 0.0 0 1.0886 1)
Average genome size in population (length): 57.916
Average program size in population (points): 58.916
Average percent parens in population: 0.018
Minimum age in population: 30.42112731933594
Maximum age in population: 34.85955238342285
Average age in population: 32.83485379981995
Median age in population: 32.8664858341217
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.718
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.718
Total error diversity:				 0.03
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 26306339
--- Timings ---
Current time: 1529614901177 milliseconds
Total Time:          75.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.6 seconds, 43.1%
Fitness Testing:     33.4 seconds, 44.2%
Report:               9.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 57206.0
Test mean error for best: 28.60300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -2.0514028787 
Correct output: -5.4680423906  | Program output: 12.5319576094 
Correct output: -24.9418699852 | Program output: 2.0581300148  
Correct output: 56.9568119314  | Program output: 100.9568119314
Correct output: -31.6601191221 | Program output: 75.3398808779 
Correct output: -37.1210864176 | Program output: 39.8789135824 
Correct output: -79.2516975843 | Program output: -88.2516975843
Correct output: 44.9272196671  | Program output: 34.9272196671 
Correct output: 66.6210657667  | Program output: 38.6210657667 
Correct output: -55.0537383904 | Program output: -24.0537383904
Correct output: -79.6354294126 | Program output: -79.6354294126
Correct output: 1.2524717345   | Program output: 1.2524717345  
Correct output: -3.1599714069  | Program output: 51.8400285931 
Correct output: 129.8497046591 | Program output: 67.8497046591 
Correct output: -125.0022721297 | Program output: -74.0022721297
Correct output: 141.1949920159 | Program output: 93.1949920159 
Correct output: -37.2353445012 | Program output: -27.2353445012
Correct output: 122.2843412425 | Program output: 44.2843412425 
Correct output: 33.2581162527  | Program output: -26.7418837473
Correct output: 123.421863126  | Program output: 52.421863126  
Correct output: 106.1474875213 | Program output: 57.1474875213 
Correct output: 12.1495725478  | Program output: -68.8504274522
Correct output: -146.6027540177 | Program output: -43.6027540177
Correct output: -61.2140896321 | Program output: -56.2140896321
Correct output: 2.2138108865   | Program output: 18.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_shove} {:instruction float_shove} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction float_tan} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec tagged_922 integer_max float_div print_float float_add integer_dup_items integer_max float_sin float_sin integer_dec float_sin integer_max float_max float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup float_yankdup float_shove float_shove float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min float_tan float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc integer_min float_inc float_shove float_inc float_shove print_float)
Errors: [75.0 11 18.0 12 27.0 12 44.0 3 107.0 13 77.0 12 9.0 2 10.0 1 28.0 2 31.0 2 0.0 0 0.0 0 55.0 12 62.0 3 51.0 3 48.0 3 10.0 1 78.0 3 60.0 12 71.0 2 49.0 3 81.0 12 103.0 2 5.0 2 16.0 2]
Total: 1245.0
Mean: 24.9
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3037.9629169
Median total errors in population: 1245.0
Error averages by case: (144.05408040000003 11.134 89.79565360000001 12.052 99.70703659999998 11.935 113.7094534 3.704 171.46170879999997 13.028 144.13049840000002 12.153 84.83136289999999 2.964 82.62098650000001 2.133 99.22035819999998 2.888 104.2583426 2.948 76.85767539999999 1.431 75.18852700000001 1.606 123.58041039999999 12.054 131.11498410000002 3.884 123.40817399999999 3.944 118.51694810000002 3.872 84.95350719999999 2.216 145.59677549999998 3.887 130.1423892 12.043 139.23000839999997 3.042 118.90983890000001 3.84 149.24419740000002 12.039 171.13429490000001 3.084 80.7598984 2.987 87.87280659999999 2.795)
Error minima by case: (7.3899 1 5.5736 9 20.0 1 0.9568 1 31.7766 10 36.549 9 0.0 0 1.0 1 1.0624 1 24.0 1 0.0 0 0.0 0 3.1562 9 41.81 2 44.0 2 39.0 2 3.0 1 34.2447 2 11.5449 10 35.3822 2 18.1078 2 2.1832 10 96.0 1 0.0 0 0.3401 1)
Average genome size in population (length): 62.298
Average program size in population (points): 63.298
Average percent parens in population: 0.016
Minimum age in population: 31.7652759552002
Maximum age in population: 36.22447657585144
Average age in population: 34.29144684481621
Median age in population: 34.30370557308197
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.033
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 27863789
--- Timings ---
Current time: 1529614904804 milliseconds
Total Time:          79.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.0 seconds, 43.0%
Fitness Testing:     35.0 seconds, 44.3%
Report:               9.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 57206.0
Test mean error for best: 28.60300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -2.0514028787 
Correct output: -5.4680423906  | Program output: 12.5319576094 
Correct output: -24.9418699852 | Program output: 2.0581300148  
Correct output: 56.9568119314  | Program output: 100.9568119314
Correct output: -31.6601191221 | Program output: 75.3398808779 
Correct output: -37.1210864176 | Program output: 39.8789135824 
Correct output: -79.2516975843 | Program output: -88.2516975843
Correct output: 44.9272196671  | Program output: 34.9272196671 
Correct output: 66.6210657667  | Program output: 38.6210657667 
Correct output: -55.0537383904 | Program output: -24.0537383904
Correct output: -79.6354294126 | Program output: -79.6354294126
Correct output: 1.2524717345   | Program output: 1.2524717345  
Correct output: -3.1599714069  | Program output: 51.8400285931 
Correct output: 129.8497046591 | Program output: 67.8497046591 
Correct output: -125.0022721297 | Program output: -74.0022721297
Correct output: 141.1949920159 | Program output: 93.1949920159 
Correct output: -37.2353445012 | Program output: -27.2353445012
Correct output: 122.2843412425 | Program output: 44.2843412425 
Correct output: 33.2581162527  | Program output: -26.7418837473
Correct output: 123.421863126  | Program output: 52.421863126  
Correct output: 106.1474875213 | Program output: 57.1474875213 
Correct output: 12.1495725478  | Program output: -68.8504274522
Correct output: -146.6027540177 | Program output: -43.6027540177
Correct output: -61.2140896321 | Program output: -56.2140896321
Correct output: 2.2138108865   | Program output: 18.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction in2} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction print_float} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 45} {:instruction float_shove} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_add} {:instruction float_dec} {:instruction float_shove} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin in2 float_div float_max integer_div print_float integer_sub integer_mult integer_shove 45 float_shove integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_add float_dec float_shove float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_add float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove print_float)
Errors: [75.0 11 18.0 12 27.0 12 44.0 3 107.0 13 77.0 12 9.0 2 10.0 1 28.0 2 31.0 2 0.0 0 0.0 0 55.0 12 62.0 3 51.0 3 48.0 3 10.0 1 78.0 3 60.0 12 71.0 2 49.0 3 81.0 12 103.0 2 5.0 2 16.0 2]
Total: 1245.0
Mean: 24.9
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3419.0331215999995
Median total errors in population: 1245.0
Error averages by case: (158.32478410000002 11.166 106.331295 12.094 113.508832 11.899 130.0165209 3.87 186.7036514 13.086 159.72191809999998 12.225 99.00140300000001 3.075 99.54812729999999 2.317 115.8874631 3.068 118.3058118 3.074 91.12754120000001 1.576 89.538157 1.755 139.65236169999997 12.095 147.01959939999998 4.02 136.8156147 4.052 134.5782754 4.032 99.26160550000002 2.337 161.36856889999999 4.045 144.65784939999998 12.081 155.07098840000003 3.211 135.09437190000003 3.983 163.64305180000002 12.104 183.9173667 3.241 95.0048603 3.087 104.48010260000001 2.96)
Error minima by case: (26.2462 1 6.0209 9 7.5096 1 10.2544 1 0.7913 10 4.6696 9 0.0 0 1.0 1 0.6211 1 3.0537 1 0.0 0 0.0 0 5.0708 9 4.1503 2 33.0023 2 35.195 1 0.0 0 21.3462 2 13.4443 8 22.4837 2 1.8525 2 1.8439 10 49.3972 1 0.0 0 2.0886 1)
Average genome size in population (length): 62.549
Average program size in population (points): 63.549
Average percent parens in population: 0.016
Minimum age in population: 33.23857307434082
Maximum age in population: 37.89012670516968
Average age in population: 35.72765237927437
Median age in population: 35.76124614477158
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.031
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.04
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 29427514
--- Timings ---
Current time: 1529614908351 milliseconds
Total Time:          82.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.5 seconds, 42.9%
Fitness Testing:     36.6 seconds, 44.3%
Report:              10.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 55288.0
Test mean error for best: 27.64400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -5.0514028787 
Correct output: -5.4680423906  | Program output: 6.5319576094  
Correct output: -24.9418699852 | Program output: -3.9418699852 
Correct output: 56.9568119314  | Program output: 94.9568119314 
Correct output: -31.6601191221 | Program output: 69.3398808779 
Correct output: -37.1210864176 | Program output: 33.8789135824 
Correct output: -79.2516975843 | Program output: -91.2516975843
Correct output: 44.9272196671  | Program output: 31.9272196671 
Correct output: 66.6210657667  | Program output: 35.6210657667 
Correct output: -55.0537383904 | Program output: -30.0537383904
Correct output: -79.6354294126 | Program output: -82.6354294126
Correct output: 1.2524717345   | Program output: -1.7475282655 
Correct output: -3.1599714069  | Program output: 45.8400285931 
Correct output: 129.8497046591 | Program output: 64.8497046591 
Correct output: -125.0022721297 | Program output: -80.0022721297
Correct output: 141.1949920159 | Program output: 90.1949920159 
Correct output: -37.2353445012 | Program output: -30.2353445012
Correct output: 122.2843412425 | Program output: 41.2843412425 
Correct output: 33.2581162527  | Program output: -29.7418837473
Correct output: 123.421863126  | Program output: 49.421863126  
Correct output: 106.1474875213 | Program output: 54.1474875213 
Correct output: 12.1495725478  | Program output: -71.8504274522
Correct output: -146.6027540177 | Program output: -49.6027540177
Correct output: -61.2140896321 | Program output: -59.2140896321
Correct output: 2.2138108865   | Program output: 12.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_max} {:instruction float_min} {:instruction integer_mult} {:instruction 82} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec tagged_922 integer_max float_frominteger integer_fromfloat float_rot float_add integer_max float_min integer_mult 82 in1 float_inc float_shove float_min integer_mult float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc integer_dec float_yank float_inc float_shove float_inc float_inc float_shove float_frominteger integer_fromfloat float_rot float_add integer_add float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove print_float)
Errors: [78.0 12 12.0 12 21.0 2 38.0 2 101.0 13 71.0 12 12.0 2 13.0 2 31.0 2 25.0 2 3.0 2 3.0 10 49.0 12 65.0 3 45.0 3 51.0 3 7.0 1 81.0 3 63.0 12 74.0 3 52.0 3 84.0 11 97.0 2 2.0 2 10.0 1]
Total: 1220.0
Mean: 24.4
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2925.4835384
Median total errors in population: 1245.0
Error averages by case: (137.6340979 10.994 86.16601229999998 12.036 94.20424980000001 11.982 109.9455647 3.776 167.5180597000001 13.034 140.38173090000004 12.164 79.51048999999999 2.983 79.0053605 2.183 95.63532100000002 2.945 98.9695784 2.982 71.68106049999997 1.435 68.81927519999999 1.539 119.69068350000002 12.035 127.77646300000002 3.919 118.60187719999998 3.965 115.32384210000002 3.903 79.5164758 2.231 142.1318981 3.942 124.35955169999998 12.044 135.79612840000004 3.077 115.42535720000001 3.88 143.31996020000003 12.048 166.34600039999995 3.12 75.48382289999998 2.996 84.19867699999999 2.829)
Error minima by case: (11.9486 1 1.468 8 17.0 1 1.9568 1 27.6601 9 33.1211 7 1.0 1 0.0 0 5.6211 1 21.0 1 0.0 0 0.0 0 0.84 8 24.0471 2 35.792 2 35.3924 2 0.0 0 16.4817 2 10.7419 9 17.6192 2 0.3449 2 3.0903 10 57.3925 1 0.0 0 0.4446 1)
Average genome size in population (length): 62.019
Average program size in population (points): 63.019
Average percent parens in population: 0.016
Minimum age in population: 34.67772197723389
Maximum age in population: 39.2389777302742
Average age in population: 37.1860496764183
Median age in population: 37.23653945326805
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.045
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 30977989
--- Timings ---
Current time: 1529614911868 milliseconds
Total Time:          86.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.9 seconds, 42.8%
Fitness Testing:     38.2 seconds, 44.3%
Report:              11.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 55209.0
Test mean error for best: 27.60450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -6.0514028787 
Correct output: -5.4680423906  | Program output: 5.5319576094  
Correct output: -24.9418699852 | Program output: -4.9418699852 
Correct output: 56.9568119314  | Program output: 93.9568119314 
Correct output: -31.6601191221 | Program output: 68.3398808779 
Correct output: -37.1210864176 | Program output: 32.8789135824 
Correct output: -79.2516975843 | Program output: -92.2516975843
Correct output: 44.9272196671  | Program output: 30.9272196671 
Correct output: 66.6210657667  | Program output: 34.6210657667 
Correct output: -55.0537383904 | Program output: -31.0537383904
Correct output: -79.6354294126 | Program output: -83.6354294126
Correct output: 1.2524717345   | Program output: -2.7475282655 
Correct output: -3.1599714069  | Program output: 44.8400285931 
Correct output: 129.8497046591 | Program output: 63.8497046591 
Correct output: -125.0022721297 | Program output: -81.0022721297
Correct output: 141.1949920159 | Program output: 89.1949920159 
Correct output: -37.2353445012 | Program output: -31.2353445012
Correct output: 122.2843412425 | Program output: 40.2843412425 
Correct output: 33.2581162527  | Program output: -30.7418837473
Correct output: 123.421863126  | Program output: 48.421863126  
Correct output: 106.1474875213 | Program output: 53.1474875213 
Correct output: 12.1495725478  | Program output: -72.8504274522
Correct output: -146.6027540177 | Program output: -50.6027540177
Correct output: -61.2140896321 | Program output: -60.2140896321
Correct output: 2.2138108865   | Program output: 11.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_shove} {:instruction integer_add} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_add} {:instruction integer_max} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction float_inc} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_min} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_add} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div integer_rot integer_sub integer_mult integer_shove 46 float_shove integer_add integer_mult float_frominteger float_min float_dup_times integer_dec float_pop integer_sub integer_div float_frominteger integer_fromfloat float_rot float_add integer_max float_min integer_mult float_cos float_inc float_shove float_frominteger float_min integer_mult float_inc float_inc float_shove float_inc float_inc float_add integer_add float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_shove float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [79.0 12 11.0 11 20.0 1 37.0 2 100.0 13 70.0 12 13.0 2 14.0 2 32.0 2 24.0 2 4.0 2 4.0 10 48.0 12 66.0 3 44.0 3 52.0 3 6.0 1 82.0 3 64.0 11 75.0 3 53.0 3 85.0 11 96.0 3 1.0 1 9.0 2]
Total: 1219.0
Mean: 24.38
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2997.6457986000005
Median total errors in population: 1245.0
Error averages by case: (141.25760140000006 11.114 88.86551039999999 12.047 96.89281760000003 11.897 112.85955720000001 3.826 169.8570577 13.028 142.90389039999997 12.163 82.45789869999999 3.013 81.9389753 2.203 98.60118190000001 2.987 101.6150336 3.008 74.52545389999999 1.447 72.3887297 1.621 122.2548977 12.047 130.80705910000006 3.984 121.25351799999997 3.993 118.47043790000004 3.971 82.22889509999999 2.229 145.12004340000001 3.982 127.1882936 12.044 138.75564479999997 3.109 118.48136500000003 3.953 146.13768 12.044 168.87192779999995 3.151 78.256091 3.021 86.88523740000002 2.889)
Error minima by case: (17.9486 1 6.8408 8 16.0 1 0.9568 1 16.3027 9 10.8418 9 2.0 1 3.0 1 11.6211 1 7.0909 1 0.0 0 0.0 0 1.6718 9 29.2641 2 40.0 2 40.6094 2 0.0 0 21.6988 2 17.7419 9 22.8363 2 5.5619 2 1.8439 8 92.0 1 0.0 0 0.2904 1)
Average genome size in population (length): 62.056
Average program size in population (points): 63.056
Average percent parens in population: 0.016
Minimum age in population: 36.07069110870361
Maximum age in population: 40.66574642062187
Average age in population: 38.64799971032143
Median age in population: 38.71295239031315
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.046
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 32529389
--- Timings ---
Current time: 1529614915496 milliseconds
Total Time:          89.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.3 seconds, 42.7%
Fitness Testing:     39.9 seconds, 44.5%
Report:              11.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 52671.0
Test mean error for best: 26.33550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -0.0514028787 
Correct output: -5.4680423906  | Program output: 5.5319576094  
Correct output: -24.9418699852 | Program output: -4.9418699852 
Correct output: 56.9568119314  | Program output: 93.9568119314 
Correct output: -31.6601191221 | Program output: 68.3398808779 
Correct output: -37.1210864176 | Program output: 32.8789135824 
Correct output: -79.2516975843 | Program output: -86.2516975843
Correct output: 44.9272196671  | Program output: 36.9272196671 
Correct output: 66.6210657667  | Program output: 40.6210657667 
Correct output: -55.0537383904 | Program output: -31.0537383904
Correct output: -79.6354294126 | Program output: -77.6354294126
Correct output: 1.2524717345   | Program output: 3.2524717345  
Correct output: -3.1599714069  | Program output: 44.8400285931 
Correct output: 129.8497046591 | Program output: 69.8497046591 
Correct output: -125.0022721297 | Program output: -81.0022721297
Correct output: 141.1949920159 | Program output: 95.1949920159 
Correct output: -37.2353445012 | Program output: -25.2353445012
Correct output: 122.2843412425 | Program output: 46.2843412425 
Correct output: 33.2581162527  | Program output: -24.7418837473
Correct output: 123.421863126  | Program output: 54.421863126  
Correct output: 106.1474875213 | Program output: 59.1474875213 
Correct output: 12.1495725478  | Program output: -66.8504274522
Correct output: -146.6027540177 | Program output: -50.6027540177
Correct output: -61.2140896321 | Program output: -54.2140896321
Correct output: 2.2138108865   | Program output: 11.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec tagged_922 integer_max float_div print_float float_add integer_dup_items integer_max float_sin float_sin integer_dec integer_dup integer_max float_max float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_div float_frominteger integer_fromfloat float_rot print_float integer_max float_min integer_mult float_cos in1 float_inc float_shove float_min integer_mult float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_shove float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [73.0 12 11.0 11 20.0 1 37.0 2 100.0 13 70.0 12 7.0 2 8.0 2 26.0 2 24.0 2 2.0 1 2.0 1 48.0 12 60.0 2 44.0 3 46.0 3 12.0 2 76.0 3 58.0 12 69.0 3 47.0 3 79.0 12 96.0 3 7.0 2 9.0 2]
Total: 1154.0
Mean: 23.08
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3458.6521036
Median total errors in population: 1245.0
Error averages by case: (159.99356619999998 11.178 107.22154180000001 12.074 114.6638258 11.794 131.5741778 3.888 187.48898220000004 13.058 160.66328140000002 12.187 101.50969959999996 3.157 100.81210669999999 2.357 117.15809070000002 3.099 120.45178920000001 3.147 93.64009970000001 1.682 90.7450384 1.933 140.58200960000002 12.077 148.51501719999996 4.093 139.19862469999995 4.134 136.1934744 4.089 101.50776149999999 2.416 162.69611930000002 4.09 146.23533619999995 12.061 156.44871999999998 3.257 136.52923810000004 4.036 164.9260355 12.044 186.05627269999997 3.301 97.3608915 3.18 105.18040339999999 2.968)
Error minima by case: (12.9486 2 5.5736 9 2.8837 1 0.8493 1 31.7766 10 38.2999 9 2.0 1 0.0728 1 6.6211 1 21.0 1 0.0 0 0.0 0 3.7472 9 55.0 2 41.0 2 41.0 2 0.0 0 62.2843 2 11.7419 8 63.4219 2 42.0 2 4.1017 9 93.0 1 0.0 0 0.8084 1)
Average genome size in population (length): 62.096
Average program size in population (points): 63.096
Average percent parens in population: 0.016
Minimum age in population: 37.07069110870361
Maximum age in population: 41.93493010103703
Average age in population: 40.1004824655652
Median age in population: 40.10497975349426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.036
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 34081789
--- Timings ---
Current time: 1529614919009 milliseconds
Total Time:          93.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.7 seconds, 42.5%
Fitness Testing:     41.6 seconds, 44.5%
Report:              12.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 52671.0
Test mean error for best: 26.33550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -0.0514028787 
Correct output: -5.4680423906  | Program output: 5.5319576094  
Correct output: -24.9418699852 | Program output: -4.9418699852 
Correct output: 56.9568119314  | Program output: 93.9568119314 
Correct output: -31.6601191221 | Program output: 68.3398808779 
Correct output: -37.1210864176 | Program output: 32.8789135824 
Correct output: -79.2516975843 | Program output: -86.2516975843
Correct output: 44.9272196671  | Program output: 36.9272196671 
Correct output: 66.6210657667  | Program output: 40.6210657667 
Correct output: -55.0537383904 | Program output: -31.0537383904
Correct output: -79.6354294126 | Program output: -77.6354294126
Correct output: 1.2524717345   | Program output: 3.2524717345  
Correct output: -3.1599714069  | Program output: 44.8400285931 
Correct output: 129.8497046591 | Program output: 69.8497046591 
Correct output: -125.0022721297 | Program output: -81.0022721297
Correct output: 141.1949920159 | Program output: 95.1949920159 
Correct output: -37.2353445012 | Program output: -25.2353445012
Correct output: 122.2843412425 | Program output: 46.2843412425 
Correct output: 33.2581162527  | Program output: -24.7418837473
Correct output: 123.421863126  | Program output: 54.421863126  
Correct output: 106.1474875213 | Program output: 59.1474875213 
Correct output: 12.1495725478  | Program output: -66.8504274522
Correct output: -146.6027540177 | Program output: -50.6027540177
Correct output: -61.2140896321 | Program output: -54.2140896321
Correct output: 2.2138108865   | Program output: 11.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction integer_dup} {:instruction integer_max} {:instruction float_max} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction 46} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction print_float} {:instruction integer_max} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec tagged_922 integer_max float_div print_float float_add integer_dup_items integer_max float_sin float_sin integer_dec integer_dup integer_max float_max float_max integer_div float_max integer_sub integer_mult integer_shove 46 float_yankdup integer_div float_frominteger integer_fromfloat float_rot print_float integer_max float_min integer_mult float_cos in1 float_inc float_shove float_min integer_mult float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_shove float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [73.0 12 11.0 11 20.0 1 37.0 2 100.0 13 70.0 12 7.0 2 8.0 2 26.0 2 24.0 2 2.0 1 2.0 1 48.0 12 60.0 2 44.0 3 46.0 3 12.0 2 76.0 3 58.0 12 69.0 3 47.0 3 79.0 12 96.0 3 7.0 2 9.0 2]
Total: 1154.0
Mean: 23.08
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3143.9318411
Median total errors in population: 1245.0
Error averages by case: (147.77114730000005 11.195 92.70059420000003 12.004 100.45837250000001 10.823 118.2162551 3.709 174.807411 13.018 147.6860105 12.149 89.04014409999999 3.028 89.34824529999997 2.347 105.94053619999998 3.003 106.07812129999999 3.005 81.21490659999998 1.723 77.65289129999998 2.681 127.41533530000001 12.049 137.7639366 3.97 125.25869379999997 3.977 125.45537580000003 3.969 88.35066780000001 2.304 152.08929849999998 3.988 134.38735169999998 12.007 145.76992210000003 3.261 125.60194050000001 3.94 153.1432005 11.961 172.6619895 3.179 84.2557419 3.016 91.74175169999998 2.816)
Error minima by case: (31.9486 1 4.786 2 15.0581 1 4.9568 1 18.169 8 12.7081 8 0.0 0 1.0 1 0.3789 1 2.9518 1 0.0 0 0.0 0 3.1574 8 5.1503 2 34.0023 2 31.195 1 0.0 0 44.7157 2 7.7419 9 29.5781 2 2.8525 2 1.1876 8 45.3972 1 0.0 0 1.6455 1)
Average genome size in population (length): 62.156
Average program size in population (points): 63.156
Average percent parens in population: 0.016
Minimum age in population: 38.07069110870361
Maximum age in population: 43.40831745415926
Average age in population: 41.5999528779909
Median age in population: 41.65441326797009
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.058
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 35635689
--- Timings ---
Current time: 1529614922497 milliseconds
Total Time:          96.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.0 seconds, 42.4%
Fitness Testing:     43.2 seconds, 44.7%
Report:              12.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 50278.13999999999
Test mean error for best: 25.13907
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -3.0514028787 
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -89.2516975843
Correct output: 44.9272196671  | Program output: 33.9272196671 
Correct output: 66.6210657667  | Program output: 37.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -80.6354294126
Correct output: 1.2524717345   | Program output: 0.2524717345  
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 66.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 92.1949920159 
Correct output: -37.2353445012 | Program output: -28.2353445012
Correct output: 122.2843412425 | Program output: 43.2843412425 
Correct output: 33.2581162527  | Program output: -27.7418837473
Correct output: 123.421863126  | Program output: 51.421863126  
Correct output: 106.1474875213 | Program output: 56.1474875213 
Correct output: 12.1495725478  | Program output: -69.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -57.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_sin float_sin integer_dec tagged_922 integer_max float_div print_float float_add integer_dup_items integer_max float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub float_min integer_mult float_cos in1 float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [76.0 12 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 10.0 1 11.0 2 29.0 2 27.0 2 1.0 2 1.0 1 9.16 11 63.0 3 47.0 3 49.0 3 9.0 2 79.0 3 61.0 12 72.0 3 50.0 2 82.0 12 99.0 2 4.0 2 3.7862 10]
Total: 1075.6203
Mean: 21.512405
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2939.3846817
Median total errors in population: 1245.0
Error averages by case: (139.09294340000002 11.534 80.0458877 11.902 90.1995783 7.266 105.38552599999998 3.329 162.5947903 13.059 135.27990970000002 12.153 84.65697840000001 3.036 83.03651979999998 2.607 100.60334280000001 2.979 93.54041230000001 2.974 76.80011480000002 2.225 70.2328889 5.593 114.66811410000001 12.056 133.3212064 3.928 113.19758299999998 3.937 120.9232844 3.941 81.629366 2.272 147.6220531 3.948 129.6157241 11.882 141.3034851 3.494 121.02969110000001 3.932 148.3365473 11.734 161.01811979999997 3.231 77.789645 2.87 79.0089699 2.57)
Error minima by case: (0.445 1 5.468 2 15.0581 1 7.9568 1 12.6298 9 7.1688 9 1.0 1 0.0 0 6.7725 1 2.0537 1 0.0 0 0.0 0 3.16 7 17.0 2 32.0023 2 3.0 2 0.0 0 24.6073 2 15.0 2 25.7448 2 4.0 1 4.9212 9 45.3972 1 0.0 0 0.8719 1)
Average genome size in population (length): 63.584
Average program size in population (points): 64.584
Average percent parens in population: 0.016
Minimum age in population: 40.39696589112282
Maximum age in population: 44.89030239731073
Average age in population: 43.07473261378333
Median age in population: 43.13145197555423
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.093
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 37225289
--- Timings ---
Current time: 1529614926109 milliseconds
Total Time:         100.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.5 seconds, 42.3%
Fitness Testing:     44.9 seconds, 44.7%
Report:              13.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 50278.13999999999
Test mean error for best: 25.13907
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -3.0514028787 
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -89.2516975843
Correct output: 44.9272196671  | Program output: 33.9272196671 
Correct output: 66.6210657667  | Program output: 37.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -80.6354294126
Correct output: 1.2524717345   | Program output: 0.2524717345  
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 66.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 92.1949920159 
Correct output: -37.2353445012 | Program output: -28.2353445012
Correct output: 122.2843412425 | Program output: 43.2843412425 
Correct output: 33.2581162527  | Program output: -27.7418837473
Correct output: 123.421863126  | Program output: 51.421863126  
Correct output: 106.1474875213 | Program output: 56.1474875213 
Correct output: 12.1495725478  | Program output: -69.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -57.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_sin float_sin integer_dec tagged_922 integer_max float_div print_float float_add integer_dup_items integer_max float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub float_min integer_mult float_cos in1 float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [76.0 12 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 10.0 1 11.0 2 29.0 2 27.0 2 1.0 2 1.0 1 9.16 11 63.0 3 47.0 3 49.0 3 9.0 2 79.0 3 61.0 12 72.0 3 50.0 2 82.0 12 99.0 2 4.0 2 3.7862 10]
Total: 1075.6203
Mean: 21.512405
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2419.3981478999995
Median total errors in population: 1219.0
Error averages by case: (117.4585168 11.523 55.437203 11.497 64.13453260000001 2.626 84.6739283 2.734 143.62020750000002 13.005 115.27697030000002 12.096 65.39556830000001 2.708 62.47950379999999 2.673 80.89251529999999 2.664 71.7046395 2.682 57.85292509999999 2.546 48.03545519999998 7.975 94.28092459999999 11.99 114.43744400000001 3.558 91.34651129999999 3.616 101.70046080000003 3.607 60.83612230000001 2.125 129.3582888 3.629 111.73341769999998 11.547 122.8045461 3.548 102.02665540000001 3.558 131.40236359999997 11.514 140.3245132 3.252 57.01643779999999 2.328 53.85649660000001 2.311)
Error minima by case: (2.0686 1 4.5342 2 10.5965 1 8.4975 1 30.6804 9 36.3426 7 0.0 0 0.0 0 0.3789 1 0.9463 1 0.0 0 0.0 0 2.877 9 0.1503 2 29.0023 2 3.0 1 0.0 0 33.0 2 15.0 2 24.5781 2 2.1475 1 1.1017 8 45.3972 1 0.0 0 0.2138 1)
Average genome size in population (length): 66.203
Average program size in population (points): 67.203
Average percent parens in population: 0.015
Minimum age in population: 41.62521226704121
Maximum age in population: 46.49116298742592
Average age in population: 44.57257919530571
Median age in population: 44.65322154946625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.099
Error (vector) diversity:			 0.116
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 38880364
--- Timings ---
Current time: 1529614929734 milliseconds
Total Time:         104.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.9 seconds, 42.1%
Fitness Testing:     46.6 seconds, 44.8%
Report:              13.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 50278.13999999999
Test mean error for best: 25.13907
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: -3.0514028787 
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -89.2516975843
Correct output: 44.9272196671  | Program output: 33.9272196671 
Correct output: 66.6210657667  | Program output: 37.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -80.6354294126
Correct output: 1.2524717345   | Program output: 0.2524717345  
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 66.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 92.1949920159 
Correct output: -37.2353445012 | Program output: -28.2353445012
Correct output: 122.2843412425 | Program output: 43.2843412425 
Correct output: 33.2581162527  | Program output: -27.7418837473
Correct output: 123.421863126  | Program output: 51.421863126  
Correct output: 106.1474875213 | Program output: 56.1474875213 
Correct output: 12.1495725478  | Program output: -69.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -57.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_items} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_sin float_sin integer_dec tagged_922 integer_max float_div print_float float_add integer_dup_items integer_max float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub float_min integer_mult float_cos in1 float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [76.0 12 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 10.0 1 11.0 2 29.0 2 27.0 2 1.0 2 1.0 1 9.16 11 63.0 3 47.0 3 49.0 3 9.0 2 79.0 3 61.0 12 72.0 3 50.0 2 82.0 12 99.0 2 4.0 2 3.7862 10]
Total: 1075.6203
Mean: 21.512405
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2798.8460541
Median total errors in population: 1172.0
Error averages by case: (131.31658000000002 10.272 71.5061735 11.234 81.61476430000002 2.559 101.1142521 3.069 156.72444879999998 13.087 130.01575220000004 12.197 80.19670759999998 2.837 77.7428297 2.855 95.12386209999998 2.875 88.3721995 2.838 74.8403888 2.441 65.4529327 4.47 109.02856530000007 12.017 127.7668451 3.631 107.85224439999996 3.731 115.71222390000004 3.693 79.75234469999998 2.755 141.9883688 3.823 124.14110559999999 11.846 135.71262410000003 3.678 115.44790979999999 3.659 143.08142089999998 11.973 155.81975020000002 3.548 76.54486849999999 2.783 71.3188915 2.787)
Error minima by case: (10.0514 1 6.1989 2 1.8992 1 1.4068 1 8.6174 10 14.0784 9 0.0 0 0.0 0 0.6211 1 1.0537 1 0.0 0 0.0 0 1.971 9 2.1503 2 31.0023 2 3.0 1 0.0 0 12.0 2 14.0607 1 17.2948 2 0.0204 1 1.9784 2 45.3972 1 0.0 0 0.2138 1)
Average genome size in population (length): 66.928
Average program size in population (points): 67.928
Average percent parens in population: 0.015
Minimum age in population: 43.55085452646017
Maximum age in population: 47.8814963363111
Average age in population: 46.07512305627484
Median age in population: 46.10338310990483
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.752
Total error diversity:				 0.146
Error (vector) diversity:			 0.165
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 40553564
--- Timings ---
Current time: 1529614933300 milliseconds
Total Time:         107.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.3 seconds, 42.0%
Fitness Testing:     48.3 seconds, 44.9%
Report:              14.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 46965.139999999985
Test mean error for best: 23.48257
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 5.9485971213  
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -80.2516975843
Correct output: 44.9272196671  | Program output: 42.9272196671 
Correct output: 66.6210657667  | Program output: 46.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -71.6354294126
Correct output: 1.2524717345   | Program output: 9.2524717345  
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 75.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 101.1949920159
Correct output: -37.2353445012 | Program output: -19.2353445012
Correct output: 122.2843412425 | Program output: 52.2843412425 
Correct output: 33.2581162527  | Program output: -18.7418837473
Correct output: 123.421863126  | Program output: 60.421863126  
Correct output: 106.1474875213 | Program output: 65.1474875213 
Correct output: 12.1495725478  | Program output: -60.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -48.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction integer_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_shove} {:instruction float_min} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_div float_max integer_div integer_rot integer_sub integer_mult float_shove float_min in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [67.0 2 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 1.0 2 2.0 1 20.0 1 27.0 2 8.0 1 8.0 1 9.16 11 54.0 3 47.0 3 40.0 1 18.0 2 70.0 2 52.0 12 63.0 3 41.0 3 73.0 12 99.0 2 13.0 2 3.7862 10]
Total: 994.6203
Mean: 19.892406
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2470.0304871000008
Median total errors in population: 1141.0
Error averages by case: (121.73487940000001 7.427 62.558363899999904 10.03 72.98200520000002 2.708 92.24787089999998 4.199 138.08879519999962 12.935 115.89503380000015 12.193 63.61885250000001 2.644 62.775760899999966 2.817 80.09069799999996 3.011 77.8604612 2.733 59.983563000000004 2.215 57.12308240000001 3.027 93.11149500000035 11.881 113.80774670000008 3.806 97.20545919999998 3.652 102.03740790000003 3.754 66.4964108 2.714 127.65039230000001 3.978 108.12885779999999 11.884 121.46422900000007 3.815 100.95093510000008 3.692 127.22593840000002 12.006 145.9791189 3.377 62.76637059999999 2.703 61.25375900000014 3.792)
Error minima by case: (12.9486 1 0.468 1 10.0581 1 33.0 1 33.7641 9 10.532 10 0.0 0 0.0 0 1.6211 1 1.0537 1 0.0 0 0.0 0 4.0167 6 2.1503 2 25.3919 2 35.0 1 0.0 0 31.2843 2 9.7616 9 26.5781 2 0.1475 2 0.3253 8 40.3972 1 0.0 0 0.0 1)
Average genome size in population (length): 68.711
Average program size in population (points): 69.711
Average percent parens in population: 0.015
Minimum age in population: 44.55085452646017
Maximum age in population: 49.61988228699192
Average age in population: 47.65111152056511
Median age in population: 47.73264430370182
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.171
Error (vector) diversity:			 0.188
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 42271339
--- Timings ---
Current time: 1529614936971 milliseconds
Total Time:         111.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.7 seconds, 41.9%
Fitness Testing:     50.1 seconds, 45.0%
Report:              14.4 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 46965.139999999985
Test mean error for best: 23.48257
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 5.9485971213  
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -80.2516975843
Correct output: 44.9272196671  | Program output: 42.9272196671 
Correct output: 66.6210657667  | Program output: 46.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -71.6354294126
Correct output: 1.2524717345   | Program output: 9.2524717345  
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 75.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 101.1949920159
Correct output: -37.2353445012 | Program output: -19.2353445012
Correct output: 122.2843412425 | Program output: 52.2843412425 
Correct output: 33.2581162527  | Program output: -18.7418837473
Correct output: 123.421863126  | Program output: 60.421863126  
Correct output: 106.1474875213 | Program output: 65.1474875213 
Correct output: 12.1495725478  | Program output: -60.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -48.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction float_tan} {:instruction integer_rot} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_shove} {:instruction float_min} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_div float_max float_tan integer_rot integer_sub integer_mult float_shove float_min in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [67.0 2 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 1.0 2 2.0 1 20.0 1 27.0 2 8.0 1 8.0 1 9.16 11 54.0 3 47.0 3 40.0 1 18.0 2 70.0 2 52.0 12 63.0 3 41.0 3 73.0 12 99.0 2 13.0 2 3.7862 10]
Total: 994.6203
Mean: 19.892406
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2210.2712551999994
Median total errors in population: 1089.6203
Error averages by case: (111.85489580000005 8.576 51.76015499999984 6.929 63.20690629999999 3.094 85.86938179999994 7.476 104.24026619999917 12.488 94.80530070000009 12.088 55.28652320000001 2.371 54.046719999999944 3.198 71.63865739999994 3.375 69.3068578 2.745 51.953064599999976 2.544 46.201286600000024 3.413 67.19585440000074 11.466 107.54933380000014 4.331 89.60343519999999 3.688 97.19203820000013 4.075 57.42975610000003 2.725 120.07163119999997 4.384 99.54073920000005 11.955 114.4452279000001 4.216 93.89927320000007 3.986 118.44993280000004 11.952 138.82032589999997 3.142 54.02934899999998 2.781 48.09134290000024 6.785)
Error minima by case: (1.0268 1 4.6864 1 16.0 1 14.707 1 31.1008 11 13.8218 10 0.0 0 0.0 0 6.6211 1 1.0537 1 0.0 0 0.0 0 2.6545 8 45.0 2 31.0023 2 31.0 1 0.0 0 43.853 2 14.7419 9 49.4465 2 32.0 2 1.3907 7 51.3972 1 0.0 0 0.0 0)
Average genome size in population (length): 70.186
Average program size in population (points): 71.186
Average percent parens in population: 0.014
Minimum age in population: 46.49610847141594
Maximum age in population: 51.39117454225197
Average age in population: 49.37313949562982
Median age in population: 49.45837565872353
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 85
Genome diversity (% unique Plush genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.209
Error (vector) diversity:			 0.225
Behavioral diversity:				 0.226
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 44025989
--- Timings ---
Current time: 1529614940486 milliseconds
Total Time:         114.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.0 seconds, 41.8%
Fitness Testing:     51.8 seconds, 45.1%
Report:              15.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 46658.13999999998
Test mean error for best: 23.32907
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 6.9485971213  
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -79.2516975843
Correct output: 44.9272196671  | Program output: 43.9272196671 
Correct output: 66.6210657667  | Program output: 47.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -70.6354294126
Correct output: 1.2524717345   | Program output: 10.2524717345 
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 76.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 102.1949920159
Correct output: -37.2353445012 | Program output: -18.2353445012
Correct output: 122.2843412425 | Program output: 53.2843412425 
Correct output: 33.2581162527  | Program output: -17.7418837473
Correct output: 123.421863126  | Program output: 61.421863126  
Correct output: 106.1474875213 | Program output: 66.1474875213 
Correct output: 12.1495725478  | Program output: -59.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -47.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction float_max} {:instruction integer_div} {:instruction float_max} {:instruction integer_sub} {:instruction float_min} {:instruction integer_mult} {:instruction float_cos} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction integer_sub} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin integer_max float_sin float_sin integer_dec tagged_922 integer_max float_div print_float float_add integer_dec float_sin integer_max float_div float_max integer_div float_max integer_sub float_min integer_mult float_cos in1 float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank integer_sub in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [66.0 2 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 0.0 0 1.0 1 19.0 2 27.0 2 9.0 1 9.0 1 9.16 11 53.0 3 47.0 3 39.0 2 19.0 2 69.0 3 51.0 12 62.0 3 40.0 2 72.0 12 99.0 2 14.0 2 3.7862 10]
Total: 987.6203
Mean: 19.752405
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2526.9922542999957
Median total errors in population: 1075.6203
Error averages by case: (126.53628450000001 10.624 64.47008009999958 5.14 77.5867259 3.675 102.50134149999995 9.866 101.39933219999864 12.248 101.08327520000029 12.049 68.27757580000001 2.399 69.54167669999984 3.755 86.7092591 3.735 83.19687019999998 3.021 62.4071655 2.746 58.98144239999996 3.85 70.96999270000137 11.198 122.93722960000022 4.681 103.92611259999994 3.949 113.49407100000026 4.54 67.45572010000001 2.775 134.60465679999993 4.774 112.6359983 11.984 129.18807850000013 4.572 109.19208990000017 4.262 131.52569219999998 12.031 151.76383879999992 3.198 63.944710400000005 2.815 59.925034300000405 8.851)
Error minima by case: (10.9486 1 1.468 1 11.9419 1 11.2078 1 28.2796 9 25.8789 9 0.0 0 0.0 0 4.6211 1 0.0537 1 0.0 0 0.0 0 0.2205 8 45.0 2 30.0023 2 31.0 1 0.0 0 30.2843 2 4.9752 9 38.4219 2 32.0 2 2.8504 8 45.3972 1 0.0 0 0.2548 1)
Average genome size in population (length): 68.402
Average program size in population (points): 69.402
Average percent parens in population: 0.015
Minimum age in population: 48.65846253931522
Maximum age in population: 52.65461550897453
Average age in population: 50.83093092779443
Median age in population: 50.87505038816016
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 68
Genome diversity (% unique Plush genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.763
Total error diversity:				 0.217
Error (vector) diversity:			 0.23
Behavioral diversity:				 0.231
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 45736039
--- Timings ---
Current time: 1529614944071 milliseconds
Total Time:         118.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.5 seconds, 41.8%
Fitness Testing:     53.4 seconds, 45.1%
Report:              15.4 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 45488.13999999998
Test mean error for best: 22.74407
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 10.9485971213 
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -75.2516975843
Correct output: 44.9272196671  | Program output: 47.9272196671 
Correct output: 66.6210657667  | Program output: 51.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -66.6354294126
Correct output: 1.2524717345   | Program output: 14.2524717345 
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 80.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 106.1949920159
Correct output: -37.2353445012 | Program output: -14.2353445012
Correct output: 122.2843412425 | Program output: 57.2843412425 
Correct output: 33.2581162527  | Program output: -13.7418837473
Correct output: 123.421863126  | Program output: 65.421863126  
Correct output: 106.1474875213 | Program output: 70.1474875213 
Correct output: 12.1495725478  | Program output: -55.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -43.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction tagged_802} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_shove} {:instruction float_min} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin float_sin integer_dec float_sin integer_max float_sin float_sin integer_dec tagged_922 integer_max float_div print_float float_add tagged_802 integer_sub integer_mult float_shove float_min in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank integer_dup in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [62.0 2 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 4.0 1 3.0 1 15.0 2 27.0 2 13.0 2 13.0 1 9.16 11 49.0 3 47.0 3 35.0 2 23.0 2 65.0 3 47.0 11 58.0 3 36.0 2 68.0 12 99.0 2 18.0 2 3.7862 10]
Total: 974.6203
Mean: 19.492407
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2037.9415298999945
Median total errors in population: 1074.6203
Error averages by case: (106.79411770000002 8.788 45.3900798999997 5.714 57.72824650000002 3.353 83.67374109999996 9.584 84.21879879999929 12.22 82.87275059999955 12.015 46.9186941 2.307 48.51766599999988 3.424 65.95435359999983 3.548 63.824074999999965 2.725 43.185625099999996 2.031 39.85722199999998 3.372 52.43319310000122 11.189 102.97030720000024 4.465 84.76257329999996 3.664 93.3062936000002 4.246 49.524103200000006 2.401 114.72300099999993 4.591 93.18144620000001 11.909 109.24398270000012 4.316 88.81694750000014 4.299 113.18920160000002 11.992 134.11626479999995 2.909 45.8315806 2.513 40.77726469999986 8.555)
Error minima by case: (25.0514 1 5.5433 1 16.7053 1 33.9568 1 31.3691 9 10.532 9 0.0 0 0.0 0 7.0 1 13.9281 1 0.0 0 0.0 0 2.869 8 41.0 2 41.0 2 27.0 1 0.0 0 21.2843 2 0.1572 8 29.4219 2 28.0 2 3.8439 9 77.6209 1 0.0 0 0.2138 1)
Average genome size in population (length): 70.247
Average program size in population (points): 71.247
Average percent parens in population: 0.014
Minimum age in population: 50.21885656192899
Maximum age in population: 54.28515733173117
Average age in population: 52.22866767408838
Median age in population: 52.30093180539552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.235
Error (vector) diversity:			 0.255
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 47492214
--- Timings ---
Current time: 1529614947892 milliseconds
Total Time:         122.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.9 seconds, 41.7%
Fitness Testing:     55.2 seconds, 45.2%
Report:              15.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 44041.13999999998
Test mean error for best: 22.02057
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 16.9485971213 
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -69.2516975843
Correct output: 44.9272196671  | Program output: 53.9272196671 
Correct output: 66.6210657667  | Program output: 57.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -60.6354294126
Correct output: 1.2524717345   | Program output: 20.2524717345 
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 86.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 112.1949920159
Correct output: -37.2353445012 | Program output: -8.2353445012 
Correct output: 122.2843412425 | Program output: 63.2843412425 
Correct output: 33.2581162527  | Program output: -7.7418837473 
Correct output: 123.421863126  | Program output: 71.421863126  
Correct output: 106.1474875213 | Program output: 76.1474875213 
Correct output: 12.1495725478  | Program output: -49.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -37.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction integer_max} {:instruction float_div} {:instruction float_yank} {:instruction float_min} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_797} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin float_sin float_sin integer_dec float_sin integer_max float_div integer_max float_div float_yank float_min in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc tagged_797 float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_max float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [56.0 2 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 10.0 1 9.0 2 9.0 2 27.0 2 19.0 2 19.0 2 9.16 11 43.0 3 47.0 3 29.0 2 29.0 2 59.0 3 41.0 11 52.0 3 30.0 2 62.0 12 99.0 2 24.0 2 3.7862 10]
Total: 958.6203
Mean: 19.172405
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2189.3165800999977
Median total errors in population: 1047.1522
Error averages by case: (110.54159249999991 6.533 51.1554670999995 4.843 64.09046090000002 3.546 90.20571529999995 10.607 83.21825149999886 12.102 85.94049479999998 11.996 54.55088340000001 2.782 53.06647519999982 3.619 70.57171939999996 3.716 72.6211578 2.909 54.2887029 2.228 47.4575207 3.757 54.241312100001366 11.108 107.98488810000019 4.732 93.2955472 3.857 98.99380610000024 4.294 59.80309610000002 2.751 119.28557799999997 4.796 98.8722156 11.816 114.01259730000015 4.655 93.7303691000002 4.743 117.94600529999998 11.911 142.0817711 2.997 56.65047929999999 2.746 46.205473300000286 9.461)
Error minima by case: (14.9486 1 5.1474 1 17.0 1 4.4236 1 31.3691 9 36.8301 8 0.0 0 0.0 0 5.0 1 3.9463 1 0.0 0 0.0 0 2.869 9 8.8497 2 20.0023 2 25.0 1 0.0 0 30.7157 2 5.4631 8 15.5781 2 11.1475 2 1.4605 8 56.3972 1 0.0 0 0.2138 1)
Average genome size in population (length): 71.478
Average program size in population (points): 72.478
Average percent parens in population: 0.014
Minimum age in population: 51.21885656192899
Maximum age in population: 55.4343066055153
Average age in population: 53.56595229109976
Median age in population: 53.58114740932069
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.263
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 49279164
--- Timings ---
Current time: 1529614951585 milliseconds
Total Time:         125.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.3 seconds, 41.6%
Fitness Testing:     56.9 seconds, 45.2%
Report:              16.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 43442.139999999985
Test mean error for best: 21.72107
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 19.9485971213 
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -66.2516975843
Correct output: 44.9272196671  | Program output: 56.9272196671 
Correct output: 66.6210657667  | Program output: 60.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -57.6354294126
Correct output: 1.2524717345   | Program output: 23.2524717345 
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 89.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 115.1949920159
Correct output: -37.2353445012 | Program output: -5.2353445012 
Correct output: 122.2843412425 | Program output: 66.2843412425 
Correct output: 33.2581162527  | Program output: -4.7418837473 
Correct output: 123.421863126  | Program output: 74.421863126  
Correct output: 106.1474875213 | Program output: 79.1474875213 
Correct output: 12.1495725478  | Program output: -46.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -34.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction float_pop} {:instruction integer_dec} {:instruction tagged_922} {:instruction integer_max} {:instruction float_frominteger} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction float_min} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction integer_sub} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_dec float_sin float_pop integer_dec tagged_922 integer_max float_frominteger integer_fromfloat float_rot float_min in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank integer_sub in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [53.0 2 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 13.0 2 12.0 2 6.0 1 27.0 2 22.0 2 22.0 2 9.16 11 40.0 2 47.0 3 26.0 2 32.0 2 56.0 3 38.0 11 49.0 3 27.0 3 59.0 12 99.0 2 27.0 2 3.7862 10]
Total: 949.6203
Mean: 18.992407
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2311.0816122999972
Median total errors in population: 994.6203
Error averages by case: (114.51037049999992 4.803 55.5837844999996 4.532 70.41859720000004 3.518 96.18508499999994 10.705 88.60805129999883 12.116 91.65603510000015 12.045 58.334645200000004 2.49 57.60247639999983 3.199 74.30194179999992 3.496 78.5041435 2.843 62.01214129999998 2.294 56.480314199999995 3.566 59.94011230000131 11.114 110.98154700000023 4.626 98.23278749999996 3.776 101.49388270000028 3.834 67.66081559999999 2.676 122.70093329999993 4.593 102.4164491 11.958 117.38587480000011 4.555 96.97418850000021 4.629 121.31289989999999 11.896 147.0052492 2.927 64.68848009999999 2.715 51.62880630000039 9.556)
Error minima by case: (36.0821 1 4.5209 1 14.0581 1 10.5429 1 30.4399 9 24.9789 9 0.0 0 0.0 0 4.3789 1 6.9463 1 0.0 0 0.0 0 2.8806 8 9.1503 2 20.0023 2 26.0 1 0.0 0 48.7157 2 12.8382 10 33.5781 2 6.8525 2 0.9784 7 44.3972 1 0.0 0 0.0765 1)
Average genome size in population (length): 73.969
Average program size in population (points): 74.969
Average percent parens in population: 0.013
Minimum age in population: 52.40200112201273
Maximum age in population: 57.00966603243432
Average age in population: 54.98916157913228
Median age in population: 55.03282716570538
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.234
Error (vector) diversity:			 0.253
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 51128389
--- Timings ---
Current time: 1529614955275 milliseconds
Total Time:         129.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.7 seconds, 41.5%
Fitness Testing:     58.7 seconds, 45.3%
Report:              17.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 43192.139999999985
Test mean error for best: 21.59607
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 19.9485971213 
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -66.2516975843
Correct output: 44.9272196671  | Program output: 56.9272196671 
Correct output: 66.6210657667  | Program output: 60.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -57.6354294126
Correct output: 1.2524717345   | Program output: 23.2524717345 
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 89.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 115.1949920159
Correct output: -37.2353445012 | Program output: -34.2353445012
Correct output: 122.2843412425 | Program output: 66.2843412425 
Correct output: 33.2581162527  | Program output: -4.7418837473 
Correct output: 123.421863126  | Program output: 74.421863126  
Correct output: 106.1474875213 | Program output: 79.1474875213 
Correct output: 12.1495725478  | Program output: -46.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -34.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction tagged_610} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_shove} {:instruction float_min} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_max float_sin float_sin tagged_610 tagged_922 integer_max float_div print_float float_add integer_sub integer_mult float_shove float_min in1 float_inc float_shove integer_shove integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [53.0 2 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 13.0 2 12.0 2 6.0 1 27.0 2 22.0 2 22.0 2 9.16 11 40.0 2 47.0 3 26.0 2 3.0 1 56.0 3 38.0 11 49.0 3 27.0 3 59.0 12 99.0 2 27.0 2 3.7862 10]
Total: 919.6203
Mean: 18.392406
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2488.121537599997
Median total errors in population: 987.6203
Error averages by case: (120.36449749999986 4.807 64.90978739999954 4.877 78.71199370000002 3.514 104.40468689999993 10.728 96.32299549999858 12.134 99.61250550000034 12.045 66.5275569 2.307 65.08125489999982 3.191 79.08850349999993 3.676 86.64897200000001 2.965 70.4479588 2.597 66.62235660000002 3.814 68.3381574000016 11.135 115.32764900000032 4.607 106.38519029999996 3.917 105.80158400000032 3.959 76.4740887 2.703 126.96175469999989 4.757 107.0600714 11.8 121.5427272000001 4.515 101.47762630000027 4.654 125.88109370000001 12.022 154.63086659999996 3.066 73.37989799999997 2.746 59.98376110000051 9.598)
Error minima by case: (15.0514 1 0.468 1 10.9419 1 14.0718 1 15.6601 9 21.1211 2 0.0 0 0.0 0 2.0 1 19.9463 1 1.0 1 0.0318 1 0.7795 6 18.8497 2 10.0023 2 18.0 1 0.0 0 20.7157 2 15.634 1 5.5781 2 19.0 2 1.0259 8 56.6028 1 0.0 0 0.03 1)
Average genome size in population (length): 77.783
Average program size in population (points): 78.783
Average percent parens in population: 0.013
Minimum age in population: 54.01018930278951
Maximum age in population: 58.57253928013961
Average age in population: 56.49141257064723
Median age in population: 56.55307591575547
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.231
Error (vector) diversity:			 0.263
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 53072964
--- Timings ---
Current time: 1529614959190 milliseconds
Total Time:         133.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.1 seconds, 41.3%
Fitness Testing:     60.6 seconds, 45.4%
Report:              17.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 43192.139999999985
Test mean error for best: 21.59607
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 19.9485971213 
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -66.2516975843
Correct output: 44.9272196671  | Program output: 56.9272196671 
Correct output: 66.6210657667  | Program output: 60.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -57.6354294126
Correct output: 1.2524717345   | Program output: 23.2524717345 
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 89.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 115.1949920159
Correct output: -37.2353445012 | Program output: -34.2353445012
Correct output: 122.2843412425 | Program output: 66.2843412425 
Correct output: 33.2581162527  | Program output: -4.7418837473 
Correct output: 123.421863126  | Program output: 74.421863126  
Correct output: 106.1474875213 | Program output: 79.1474875213 
Correct output: 12.1495725478  | Program output: -46.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -34.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_max} {:instruction float_sin} {:instruction float_sin} {:instruction tagged_610} {:instruction tagged_922} {:instruction integer_max} {:instruction float_div} {:instruction print_float} {:instruction float_add} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_shove} {:instruction float_min} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin integer_max float_sin float_sin tagged_610 tagged_922 integer_max float_div print_float float_add integer_sub integer_mult float_shove float_min in1 float_inc float_shove integer_shove integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [53.0 2 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 13.0 2 12.0 2 6.0 1 27.0 2 22.0 2 22.0 2 9.16 11 40.0 2 47.0 3 26.0 2 3.0 1 56.0 3 38.0 11 49.0 3 27.0 3 59.0 12 99.0 2 27.0 2 3.7862 10]
Total: 919.6203
Mean: 18.392406
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2214.965126599998
Median total errors in population: 973.6203
Error averages by case: (107.55012739999991 4.475 53.18832379999954 4.397 68.07174610000001 3.314 93.68698799999993 10.719 85.60500339999915 12.097 88.52816959999973 11.981 58.65375610000002 2.368 57.19328569999987 3.362 66.4477523999999 3.599 74.2933929 2.884 64.39980849999999 2.802 59.853368500000016 3.607 56.88025570000122 11.107 103.21960970000018 4.533 94.67187089999996 3.808 93.5093412000002 3.894 69.32364989999998 2.725 115.04554389999993 4.71 92.00456339999998 11.425 109.50262820000007 4.468 89.0645458000001 4.61 111.16624739999997 11.87 143.24639669999996 2.97 66.9158454 2.728 48.871906000000195 9.618)
Error minima by case: (16.0514 1 1.468 1 11.9419 1 7.9271 1 12.6004 9 7.1395 2 0.0 0 0.0 0 1.0 1 10.7932 1 0.0 0 0.0 0 0.2205 8 13.8497 2 15.0023 2 10.0 1 0.0 0 25.7157 2 3.635 1 10.5781 2 11.0 2 0.1754 7 57.6028 1 0.0 0 0.2138 1)
Average genome size in population (length): 82.08
Average program size in population (points): 83.08
Average percent parens in population: 0.012
Minimum age in population: 55.18007044952537
Maximum age in population: 59.70462863914872
Average age in population: 57.82798195333874
Median age in population: 57.86420160467787
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.25
Error (vector) diversity:			 0.291
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 55124964
--- Timings ---
Current time: 1529614963038 milliseconds
Total Time:         137.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.5 seconds, 41.1%
Fitness Testing:     62.5 seconds, 45.5%
Report:              18.2 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 42496.13999999998
Test mean error for best: 21.24807
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 23.9485971213 
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -62.2516975843
Correct output: 44.9272196671  | Program output: 60.9272196671 
Correct output: 66.6210657667  | Program output: 64.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -53.6354294126
Correct output: 1.2524717345   | Program output: 27.2524717345 
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 93.8497046591 
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 119.1949920159
Correct output: -37.2353445012 | Program output: -34.2353445012
Correct output: 122.2843412425 | Program output: 70.2843412425 
Correct output: 33.2581162527  | Program output: -0.7418837473 
Correct output: 123.421863126  | Program output: 78.421863126  
Correct output: 106.1474875213 | Program output: 83.1474875213 
Correct output: 12.1495725478  | Program output: -42.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -30.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction float_div} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction integer_sub} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction print_integer} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_dup_items float_inc float_shove integer_swap float_inc float_div float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_yank float_inc float_inc integer_inc float_inc float_min float_yank float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank integer_sub in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_inc float_shove float_inc float_shove float_inc print_integer in1 float_inc float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [49.0 2 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 17.0 2 16.0 2 2.0 1 27.0 2 26.0 2 26.0 2 9.16 11 36.0 3 47.0 3 22.0 2 3.0 1 52.0 3 34.0 11 45.0 3 23.0 3 55.0 11 99.0 2 31.0 2 3.7862 10]
Total: 903.6203
Mean: 18.072407
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2540.442007599996
Median total errors in population: 958.6203
Error averages by case: (116.90796789999986 4.688 69.00985969999982 4.277 81.76320150000002 3.398 107.84931289999992 10.84 99.93387809999845 12.1 102.99241070000053 11.887 74.01236469999999 2.728 74.33802179999992 3.666 77.7233371 3.521 87.00088520000001 3.204 79.47940679999999 2.95 75.68769719999999 3.936 72.24961980000177 11.119 112.73727520000018 4.596 107.6925861 3.966 103.08455790000018 3.987 83.75206459999998 3.167 124.78070209999997 4.783 101.2997045 10.831 119.09575470000007 4.5 99.17705330000013 4.677 120.66765990000003 11.86 156.01312119999997 3.103 82.35504809999999 2.927 64.34251660000092 9.785)
Error minima by case: (0.7955 1 5.1474 1 17.0 1 2.8851 1 27.4715 9 22.0105 2 0.0 0 0.0 0 0.0 0 4.0779 1 0.0 0 0.0 0 2.8806 9 16.8497 2 41.0 2 8.0 1 0.0 0 22.7157 2 8.3319 1 7.5781 2 9.0 2 0.0343 5 87.4711 1 0.0 0 0.0691 1)
Average genome size in population (length): 87.246
Average program size in population (points): 88.246
Average percent parens in population: 0.011
Minimum age in population: 56.18007044952537
Maximum age in population: 61.36617122427197
Average age in population: 59.25485203330512
Median age in population: 59.27459780877871
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.247
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 57306114
--- Timings ---
Current time: 1529614967218 milliseconds
Total Time:         141.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.0 seconds, 41.0%
Fitness Testing:     64.5 seconds, 45.6%
Report:              18.8 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 41343.13999999998
Test mean error for best: 20.67157
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 33.9485971213 
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -52.2516975843
Correct output: 44.9272196671  | Program output: 70.9272196671 
Correct output: 66.6210657667  | Program output: 74.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -43.6354294126
Correct output: 1.2524717345   | Program output: 37.2524717345 
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 103.8497046591
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 129.1949920159
Correct output: -37.2353445012 | Program output: -34.2353445012
Correct output: 122.2843412425 | Program output: 80.2843412425 
Correct output: 33.2581162527  | Program output: 9.2581162527  
Correct output: 123.421863126  | Program output: 88.421863126  
Correct output: 106.1474875213 | Program output: 93.1474875213 
Correct output: 12.1495725478  | Program output: -32.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -20.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction float_div} {:instruction integer_max} {:instruction float_div} {:instruction float_yank} {:instruction float_min} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin float_sin float_sin float_sin integer_dec float_sin integer_max float_div integer_max float_div float_yank float_min in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_yank float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove integer_shove float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [39.0 2 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 27.0 2 26.0 2 8.0 2 27.0 2 36.0 2 36.0 2 9.16 11 26.0 2 47.0 3 12.0 2 3.0 1 42.0 3 24.0 2 35.0 3 13.0 3 45.0 11 99.0 2 41.0 2 3.7862 10]
Total: 870.6203
Mean: 17.412407
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2564.0913134999973
Median total errors in population: 945.6203
Error averages by case: (116.34964869999997 4.849 66.25303339999974 4.739 82.89765019999999 3.466 106.87283389999996 10.608 101.30017829999885 12.143 102.64156640000012 11.875 82.75709259999998 3.072 75.52053299999996 3.693 75.38348260000004 3.325 88.89748660000004 3.404 88.0945428 3.135 80.44004019999997 4.396 71.56682020000126 11.118 110.08614230000015 4.475 112.35249989999997 4.048 100.30315610000015 3.938 84.02038179999998 4.113 122.43374479999997 4.732 100.49306679999998 9.652 116.72399590000005 4.456 96.31799680000016 4.606 122.32522609999998 11.92 160.49002839999997 3.192 90.43060009999999 2.99 61.62156560000035 9.573)
Error minima by case: (3.6619 1 0.468 1 8.9419 1 3.1149 1 16.8507 10 14.2338 2 0.0 0 0.8643 1 0.0 0 20.0 1 1.0 1 0.0099 1 2.5063 2 12.0 2 0.0023 2 2.0 1 0.0 0 28.0 2 1.0001 1 21.0 2 1.0 1 1.4468 2 54.6028 1 0.0 0 0.2138 1)
Average genome size in population (length): 94.77
Average program size in population (points): 95.77
Average percent parens in population: 0.011
Minimum age in population: 57.88291928940453
Maximum age in population: 62.6602869840026
Average age in population: 60.76365472147919
Median age in population: 60.83061057940768
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.287
Error (vector) diversity:			 0.336
Behavioral diversity:				 0.337
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 59675364
--- Timings ---
Current time: 1529614971549 milliseconds
Total Time:         145.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.4 seconds, 40.8%
Fitness Testing:     66.7 seconds, 45.8%
Report:              19.5 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 40859.38099999998
Test mean error for best: 20.42969
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 33.9485971213 
Correct output: -5.4680423906  | Program output: 4.0           
Correct output: -24.9418699852 | Program output: -3.9418699852 
Correct output: 56.9568119314  | Program output: 4.0           
Correct output: -31.6601191221 | Program output: 4.0           
Correct output: -37.1210864176 | Program output: 4.0           
Correct output: -79.2516975843 | Program output: -52.2516975843
Correct output: 44.9272196671  | Program output: 70.9272196671 
Correct output: 66.6210657667  | Program output: 74.6210657667 
Correct output: -55.0537383904 | Program output: -30.0537383904
Correct output: -79.6354294126 | Program output: -43.6354294126
Correct output: 1.2524717345   | Program output: 37.2524717345 
Correct output: -3.1599714069  | Program output: 4.0           
Correct output: 129.8497046591 | Program output: 103.8497046591
Correct output: -125.0022721297 | Program output: -80.0022721297
Correct output: 141.1949920159 | Program output: 129.1949920159
Correct output: -37.2353445012 | Program output: -34.2353445012
Correct output: 122.2843412425 | Program output: 80.2843412425 
Correct output: 33.2581162527  | Program output: 9.2581162527  
Correct output: 123.421863126  | Program output: 88.421863126  
Correct output: 106.1474875213 | Program output: 93.1474875213 
Correct output: 12.1495725478  | Program output: -32.8504274522
Correct output: -146.6027540177 | Program output: -49.6027540177
Correct output: -61.2140896321 | Program output: -20.2140896321
Correct output: 2.2138108865   | Program output: 4.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction integer_pop} {:instruction integer_mult} {:instruction float_shove} {:instruction float_min} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction print_integer} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_inc} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_sin integer_dec float_sin float_sin float_sin integer_dec float_sin integer_max integer_pop integer_mult float_shove float_min in1 float_inc float_shove in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_max float_inc float_inc float_yank float_inc float_yank float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove print_integer float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_inc float_shove float_frominteger float_shove in1 float_inc float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [39.0 2 9.468 11 21.0 2 52.9568 12 35.6601 12 41.1211 12 27.0 2 26.0 2 8.0 2 25.0 2 36.0 2 36.0 2 7.16 11 26.0 2 45.0 3 12.0 2 3.0 1 42.0 3 24.0 2 35.0 3 13.0 3 45.0 11 97.0 2 41.0 2 1.7862 10]
Total: 867.1522
Mean: 17.343044
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2617.9795682999975
Median total errors in population: 929.6203
Error averages by case: (118.2824657 5.137 71.60253779999996 5.585 86.88797210000001 3.471 111.05078539999997 10.599 104.48090819999842 12.145 106.60994030000025 11.953 83.43133299999997 2.993 81.69524499999996 3.366 79.59570709999997 2.983 91.5363447 3.386 88.11529219999998 3.046 84.20917280000003 4.555 75.27355620000162 11.099 111.13700940000008 4.059 112.72420319999998 4.031 100.34735270000013 3.609 81.1633713 4.545 124.2281323 4.345 103.25871000000001 8.893 118.36441300000003 4.107 98.29248180000009 4.225 122.42237150000001 11.96 160.35398629999997 3.205 90.30193129999995 2.888 66.89834500000072 9.531)
Error minima by case: (13.0514 1 1.4495 1 8.9419 1 1.0432 1 24.7426 10 22.3916 2 0.0 0 1.0 1 0.0 0 4.4589 1 0.0 0 0.0 0 2.4032 1 12.0 2 38.0023 1 2.0 1 0.0 0 28.0 2 0.0791 1 21.0 2 1.0 1 3.0055 1 44.3972 1 0.0 0 0.1448 1)
Average genome size in population (length): 101.803
Average program size in population (points): 102.803
Average percent parens in population: 0.010
Minimum age in population: 59.84876129509757
Maximum age in population: 64.21331220792172
Average age in population: 62.22448793936298
Median age in population: 62.23142257242876
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.318
Error (vector) diversity:			 0.384
Behavioral diversity:				 0.384
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 62220439
--- Timings ---
Current time: 1529614975954 milliseconds
Total Time:         150.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.8 seconds, 40.5%
Fitness Testing:     68.9 seconds, 45.9%
Report:              20.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 41245.13999999998
Test mean error for best: 20.62257
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 35.9485971213 
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -1.9418699852 
Correct output: 56.9568119314  | Program output: 6.0           
Correct output: -31.6601191221 | Program output: 6.0           
Correct output: -37.1210864176 | Program output: 6.0           
Correct output: -79.2516975843 | Program output: -50.2516975843
Correct output: 44.9272196671  | Program output: 72.9272196671 
Correct output: 66.6210657667  | Program output: 76.6210657667 
Correct output: -55.0537383904 | Program output: -28.0537383904
Correct output: -79.6354294126 | Program output: -41.6354294126
Correct output: 1.2524717345   | Program output: 39.2524717345 
Correct output: -3.1599714069  | Program output: 6.0           
Correct output: 129.8497046591 | Program output: 105.8497046591
Correct output: -125.0022721297 | Program output: -78.0022721297
Correct output: 141.1949920159 | Program output: 131.1949920159
Correct output: -37.2353445012 | Program output: -34.2353445012
Correct output: 122.2843412425 | Program output: 82.2843412425 
Correct output: 33.2581162527  | Program output: 11.2581162527 
Correct output: 123.421863126  | Program output: 90.421863126  
Correct output: 106.1474875213 | Program output: 95.1474875213 
Correct output: 12.1495725478  | Program output: -30.8504274522
Correct output: -146.6027540177 | Program output: -47.6027540177
Correct output: -61.2140896321 | Program output: -18.2140896321
Correct output: 2.2138108865   | Program output: 6.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_inc float_yank float_inc float_shove float_inc float_shove float_inc float_dup_times float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_yank float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_shove integer_dup_items float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [37.0 2 8.9361 2 23.0 2 50.9568 11 37.6601 12 43.1211 12 29.0 2 28.0 2 10.0 1 27.0 2 38.0 2 38.0 2 9.16 11 24.0 2 47.0 3 10.0 1 3.0 1 40.0 2 22.0 2 33.0 3 11.0 3 43.0 12 99.0 2 43.0 2 3.7862 10]
Total: 864.6203
Mean: 17.292406
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2426.2245369999987
Median total errors in population: 921.1522
Error averages by case: (111.72947759999998 5.225 61.06799009999991 6.119 79.7940749 3.254 102.09989529999993 10.521 97.38746289999877 12.103 97.5761026000001 11.866 77.9226882 2.998 74.20536139999993 3.184 71.6076488 2.669 85.71098340000003 3.34 82.16729799999997 3.018 77.2830916 4.837 65.8356916000014 11.052 103.41241580000006 3.823 107.11024269999987 4.053 91.64648560000009 3.384 68.3399865 3.352 117.57683260000003 4.105 97.51916709999998 8.897 111.28514210000003 3.923 90.36993280000004 4.001 117.120062 11.861 154.6735820999999 3.254 84.05043339999996 2.744 55.70348790000047 9.446)
Error minima by case: (4.8243 1 5.468 1 17.0 1 4.0432 1 31.6601 9 37.1211 2 0.0 0 1.0 1 0.0 0 4.0537 1 0.0 0 0.0 0 3.16 2 9.1503 1 6.9977 2 1.0 1 0.0 0 6.2843 2 0.7419 1 0.4219 2 1.0 1 0.7463 1 48.3972 1 0.0 0 0.1514 1)
Average genome size in population (length): 102.452
Average program size in population (points): 103.452
Average percent parens in population: 0.010
Minimum age in population: 60.84876129509757
Maximum age in population: 65.33219826009622
Average age in population: 63.74145546826765
Median age in population: 63.80078121933514
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.336
Error (vector) diversity:			 0.412
Behavioral diversity:				 0.412
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 64781764
--- Timings ---
Current time: 1529614980404 milliseconds
Total Time:         154.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.2 seconds, 40.3%
Fitness Testing:     71.3 seconds, 46.1%
Report:              20.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 40312.21579999999
Test mean error for best: 20.15611
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 38.9485971213 
Correct output: -5.4680423906  | Program output: 3.0           
Correct output: -24.9418699852 | Program output: -4.9418699852 
Correct output: 56.9568119314  | Program output: 3.0           
Correct output: -31.6601191221 | Program output: 3.0           
Correct output: -37.1210864176 | Program output: 3.0           
Correct output: -79.2516975843 | Program output: -47.2516975843
Correct output: 44.9272196671  | Program output: 75.9272196671 
Correct output: 66.6210657667  | Program output: 79.6210657667 
Correct output: -55.0537383904 | Program output: -31.0537383904
Correct output: -79.6354294126 | Program output: -38.6354294126
Correct output: 1.2524717345   | Program output: 42.2524717345 
Correct output: -3.1599714069  | Program output: 3.0           
Correct output: 129.8497046591 | Program output: 108.8497046591
Correct output: -125.0022721297 | Program output: -81.0022721297
Correct output: 141.1949920159 | Program output: 134.1949920159
Correct output: -37.2353445012 | Program output: -33.2353445012
Correct output: 122.2843412425 | Program output: 85.2843412425 
Correct output: 33.2581162527  | Program output: 14.2581162527 
Correct output: 123.421863126  | Program output: 93.421863126  
Correct output: 106.1474875213 | Program output: 98.1474875213 
Correct output: 12.1495725478  | Program output: -27.8504274522
Correct output: -146.6027540177 | Program output: -50.6027540177
Correct output: -61.2140896321 | Program output: -15.2140896321
Correct output: 2.2138108865   | Program output: 3.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_swap} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove in1 float_inc integer_max float_inc float_shove float_inc float_shove float_swap float_shove in1 float_inc float_shove in2 float_shove in2 float_mod integer_yankdup float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [34.0 2 8.468 11 20.0 1 53.9568 12 34.6601 11 40.1211 11 32.0 2 31.0 2 13.0 2 24.0 2 41.0 2 41.0 2 6.16 10 21.0 2 44.0 3 7.0 2 4.0 1 37.0 3 19.0 2 30.0 2 8.0 3 40.0 11 96.0 3 46.0 2 0.7862 10]
Total: 846.1522
Mean: 16.923044
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2730.3445368999987
Median total errors in population: 905.1522
Error averages by case: (120.85556959999998 5.177 77.79433110000004 6.361 90.95136660000004 3.131 116.30920279999994 10.732 107.52283509999819 12.127 110.27025470000054 11.897 93.36961129999997 3.337 88.24735169999998 3.196 83.22090019999999 2.652 96.67116850000004 3.396 98.0657755 3.33 91.69937240000002 4.808 79.47677280000171 11.054 113.83858180000001 3.875 117.55571489999993 4.198 102.37668850000003 3.377 77.42525020000001 2.74 127.4444282 4.101 107.8352939 7.455 121.4119077 3.943 101.27551350000005 4.024 126.53081590000001 11.816 164.7833870999999 3.391 99.98829320000002 3.094 72.58714970000081 9.625)
Error minima by case: (15.0514 1 0.468 1 10.9419 1 5.9568 1 27.5336 10 13.8218 2 2.0 1 0.1299 1 0.0 0 2.1075 1 0.0 0 0.0 0 0.9665 1 9.1503 2 39.0023 2 0.0 0 0.0 0 30.0 2 1.2743 1 23.0 2 1.0 1 0.3755 1 43.3972 1 0.0 0 0.3533 1)
Average genome size in population (length): 104.312
Average program size in population (points): 105.312
Average percent parens in population: 0.010
Minimum age in population: 62.41726600534548
Maximum age in population: 66.93544855499795
Average age in population: 65.15567057510965
Median age in population: 65.17770404428279
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.332
Error (vector) diversity:			 0.41
Behavioral diversity:				 0.41
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 67389589
--- Timings ---
Current time: 1529614984859 milliseconds
Total Time:         159.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.7 seconds, 40.1%
Fitness Testing:     73.6 seconds, 46.3%
Report:              21.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 40573.21579999998
Test mean error for best: 20.28661
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 3.0           
Correct output: -24.9418699852 | Program output: -4.9418699852 
Correct output: 56.9568119314  | Program output: 3.0           
Correct output: -31.6601191221 | Program output: 3.0           
Correct output: -37.1210864176 | Program output: 3.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -31.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 3.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -81.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -35.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -50.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 3.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mult} {:instruction float_shove} {:instruction float_min} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction print_integer} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_inc} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (integer_mult float_shove float_min in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_yank float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_shove float_inc float_inc float_inc float_max float_inc float_inc float_yank float_inc float_yank float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_yankdup float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove print_integer float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove float_inc float_shove in1 float_inc float_shove in2 float_inc float_shove float_frominteger float_shove in1 float_inc float_shove in2 float_mod float_inc float_shove integer_mult float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [27.0 2 8.468 11 20.0 1 53.9568 12 34.6601 11 40.1211 11 39.0 2 38.0 2 20.0 1 24.0 2 48.0 2 48.0 2 6.16 10 14.0 2 44.0 3 0.0 0 2.0 1 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 96.0 3 53.0 2 0.7862 10]
Total: 824.1522
Mean: 16.483044
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2536.7416230999993
Median total errors in population: 882.38625
Error averages by case: (111.15192590000001 5.225 67.20444789999996 7.214 84.95474880000002 3.013 109.22217069999995 10.749 100.86293429999844 12.086 102.76056180000033 11.877 90.21072309999997 3.191 81.64252649999997 3.025 74.9168652 2.723 91.91014229999999 3.33 93.92668570000004 3.165 86.55863390000005 4.753 71.68840640000174 11.012 103.38230670000003 3.656 114.1058867999999 4.138 91.74855880000003 3.317 70.1119728 2.501 116.40620990000001 3.991 97.04437800000002 5.646 110.33208360000003 3.8 90.02723680000001 3.838 117.89568980000003 11.8 160.98629779999985 3.41 95.53857319999997 2.972 62.19465640000059 9.525)
Error minima by case: (15.0514 1 0.468 1 10.9419 1 1.9568 1 31.9033 10 26.8789 2 0.0 0 0.0 0 0.0 0 5.0537 1 0.0 0 0.0 0 3.4032 1 14.0 1 35.0023 2 0.0 0 0.0 0 11.7157 2 0.7426 1 0.4219 2 1.0 1 0.0142 1 46.3972 1 0.0 0 0.2138 1)
Average genome size in population (length): 109.544
Average program size in population (points): 110.544
Average percent parens in population: 0.009
Minimum age in population: 64.36198572791841
Maximum age in population: 68.60355565067215
Average age in population: 66.62947650518497
Median age in population: 66.68396478543107
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.346
Error (vector) diversity:			 0.444
Behavioral diversity:				 0.444
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 70128214
--- Timings ---
Current time: 1529614989397 milliseconds
Total Time:         163.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.1 seconds, 39.8%
Fitness Testing:     76.0 seconds, 46.5%
Report:              22.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 40917.322099999976
Test mean error for best: 20.45866
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 3.4680423906  
Correct output: -24.9418699852 | Program output: -3.9418699852 
Correct output: 56.9568119314  | Program output: 5.0           
Correct output: -31.6601191221 | Program output: 5.0           
Correct output: -37.1210864176 | Program output: 5.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -30.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 5.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -80.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -34.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -49.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 5.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mult} {:instruction float_shove} {:instruction float_min} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_797} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (integer_mult float_shove float_min in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_dup_times integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_rot float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_add float_inc float_shove float_inc float_shove float_inc float_inc tagged_797 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod float_inc float_shove float_inc float_shove float_inc float_shove integer_mod float_shove print_float)
Errors: [25.0 2 8.9361 2 21.0 2 51.9568 11 36.6601 12 42.1211 12 41.0 2 40.0 1 22.0 2 25.0 2 50.0 1 50.0 1 8.16 11 12.0 2 45.0 3 2.0 1 3.0 1 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 97.0 2 55.0 1 2.7862 10]
Total: 828.6203
Mean: 16.572407
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2446.3895478000013
Median total errors in population: 870.1522
Error averages by case: (106.82193280000001 5.187 64.27623930000004 7.486 80.03633850000003 2.98 104.95151409999995 10.908 98.10542999999804 11.994 99.39077630000068 11.733 87.28276029999996 3.069 83.4717529 3.131 76.68732470000005 2.99 86.86115099999995 3.383 90.8375078 3.064 86.71314139999998 4.761 67.24686330000156 10.848 98.70720960000003 3.51 108.52686959999993 4.069 87.05662900000006 3.35 65.8188793 2.556 112.76843850000002 4.069 91.17899389999995 5.192 106.90452290000003 3.837 85.86454230000001 3.795 110.57544520000002 11.659 155.8898742999999 3.454 92.50971979999994 2.865 58.42469100000058 9.591)
Error minima by case: (0.8684 1 5.468 1 10.8255 1 0.9568 1 4.1073 10 1.3537 2 1.0 1 0.0 0 0.0 0 3.7147 1 0.0 0 0.0 0 2.6718 1 9.1503 1 37.0023 2 0.0 0 0.0 0 6.7157 2 0.292 1 8.4219 1 0.0 0 1.3029 2 45.3972 1 0.0 0 0.0 0)
Average genome size in population (length): 113.301
Average program size in population (points): 114.301
Average percent parens in population: 0.009
Minimum age in population: 65.4062422144766
Maximum age in population: 70.18584177536405
Average age in population: 68.14848048650497
Median age in population: 68.15540579416188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.353
Error (vector) diversity:			 0.482
Behavioral diversity:				 0.482
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 72960764
--- Timings ---
Current time: 1529614994213 milliseconds
Total Time:         168.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.6 seconds, 39.6%
Fitness Testing:     78.4 seconds, 46.6%
Report:              23.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 40269.795599999976
Test mean error for best: 20.13490
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 42.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -4.9418699852 
Correct output: 56.9568119314  | Program output: 3.0           
Correct output: -31.6601191221 | Program output: 3.0           
Correct output: -37.1210864176 | Program output: 3.0           
Correct output: -79.2516975843 | Program output: -43.2516975843
Correct output: 44.9272196671  | Program output: 79.9272196671 
Correct output: 66.6210657667  | Program output: 83.6210657667 
Correct output: -55.0537383904 | Program output: -31.0537383904
Correct output: -79.6354294126 | Program output: -34.6354294126
Correct output: 1.2524717345   | Program output: 46.2524717345 
Correct output: -3.1599714069  | Program output: 3.0           
Correct output: 129.8497046591 | Program output: 112.8497046591
Correct output: -125.0022721297 | Program output: -81.0022721297
Correct output: 141.1949920159 | Program output: 138.1949920159
Correct output: -37.2353445012 | Program output: -35.2353445012
Correct output: 122.2843412425 | Program output: 89.2843412425 
Correct output: 33.2581162527  | Program output: 18.2581162527 
Correct output: 123.421863126  | Program output: 97.421863126  
Correct output: 106.1474875213 | Program output: 102.1474875213
Correct output: 12.1495725478  | Program output: -23.8504274522
Correct output: -146.6027540177 | Program output: -50.6027540177
Correct output: -61.2140896321 | Program output: -11.2140896321
Correct output: 2.2138108865   | Program output: 3.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_797} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_479} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_yank float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc tagged_797 float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_rot float_inc float_inc float_inc tagged_479 float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc float_shove integer_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove float_inc float_shove in1 float_inc integer_max float_inc float_shove float_inc integer_sub float_inc float_shove in1 float_inc float_shove in2 float_shove in2 float_mod float_shove print_float)
Errors: [30.0 1 5.9361 2 20.0 1 53.9568 12 34.6601 11 40.1211 11 36.0 2 35.0 2 17.0 2 24.0 2 45.0 2 45.0 2 6.16 10 17.0 2 44.0 3 3.0 2 2.0 1 33.0 3 15.0 2 26.0 3 4.0 1 36.0 11 96.0 3 50.0 1 0.7862 10]
Total: 821.6203
Mean: 16.432405
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2614.626168200002
Median total errors in population: 859.6203
Error averages by case: (109.10953980000001 5.418 71.89171380000005 7.376 85.52262580000003 2.976 112.23770759999995 10.903 103.95161789999908 11.961 106.08298979999988 11.726 96.54183529999999 3.25 92.64366310000001 3.301 86.37502910000002 3.258 93.470026 3.469 100.6392446 3.27 93.19505079999998 4.925 74.55199890000134 10.794 104.01614190000001 3.554 114.94377699999997 4.233 92.70873550000006 3.451 71.07431550000001 2.704 117.77647460000001 4.244 97.3380611 5.279 111.81615510000006 3.97 91.58637169999999 3.69 115.57524700000003 11.502 161.75016789999995 3.714 102.11537889999998 3.052 66.10829950000034 9.584)
Error minima by case: (14.0514 1 0.532 1 9.9419 1 0.0432 1 3.9978 9 8.9636 2 0.6362 1 2.0 1 0.0 0 8.9691 1 0.0 0 0.0 0 3.16 1 6.0 1 40.0 2 0.0 0 0.0 0 6.8101 2 2.7419 1 7.9476 1 0.0 0 0.6696 2 55.6028 1 0.0 0 0.0 0)
Average genome size in population (length): 118.453
Average program size in population (points): 119.453
Average percent parens in population: 0.008
Minimum age in population: 67.03423922892165
Maximum age in population: 71.42574875313463
Average age in population: 69.60389813800711
Median age in population: 69.67861492954981
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.349
Error (vector) diversity:			 0.501
Behavioral diversity:				 0.502
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 75922114
--- Timings ---
Current time: 1529614999048 milliseconds
Total Time:         173.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.1 seconds, 39.3%
Fitness Testing:     81.1 seconds, 46.8%
Report:              23.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 39724.35029999999
Test mean error for best: 19.86218
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 43.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -42.2516975843
Correct output: 44.9272196671  | Program output: 80.9272196671 
Correct output: 66.6210657667  | Program output: 84.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -33.6354294126
Correct output: 1.2524717345   | Program output: 47.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 113.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 139.1949920159
Correct output: -37.2353445012 | Program output: -36.2353445012
Correct output: 122.2843412425 | Program output: 90.2843412425 
Correct output: 33.2581162527  | Program output: 19.2581162527 
Correct output: 123.421863126  | Program output: 98.421863126  
Correct output: 106.1474875213 | Program output: 103.1474875213
Correct output: 12.1495725478  | Program output: -22.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -10.2140896321
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_add float_inc float_shove float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [29.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 37.0 2 36.0 2 18.0 2 22.0 2 46.0 2 46.0 2 5.16 11 16.0 2 42.0 3 2.0 2 1.0 1 32.0 3 14.0 2 25.0 3 3.0 1 35.0 11 94.0 3 51.0 2 0.2138 9]
Total: 813.0479
Mean: 16.260958
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2460.344795900001
Median total errors in population: 853.6203
Error averages by case: (102.89847019999998 5.437 66.1861001 7.053 80.55732880000001 3.016 105.34663589999994 10.725 98.86906809999853 11.964 100.22278220000021 11.607 92.7876294 3.279 88.0551358 3.218 81.53768320000003 3.213 86.80982759999995 3.481 97.1172676 3.251 91.76157550000002 4.941 68.52579020000147 10.685 94.95859210000003 3.456 108.97213449999992 4.078 84.42470510000005 3.288 67.5373751 2.775 108.61566490000001 4.145 88.55705040000001 5.236 102.7012223 3.798 82.9280786 3.398 106.43060079999998 11.387 155.87370979999994 3.71 98.51343269999998 3.135 60.50193500000061 9.379)
Error minima by case: (11.0 1 4.6355 1 15.0581 1 0.0432 1 5.0 2 5.0 1 2.0 1 0.0 0 0.0 0 7.0537 1 0.0 0 0.0 0 3.0187 2 1.0 1 37.0023 1 0.0 0 0.0 0 2.2843 1 0.4137 1 7.0 1 0.0 0 1.1496 2 45.3972 1 0.0 0 0.0 0)
Average genome size in population (length): 123.089
Average program size in population (points): 124.089
Average percent parens in population: 0.008
Minimum age in population: 68.13140775362734
Maximum age in population: 73.15993866219114
Average age in population: 71.02688808242426
Median age in population: 71.0436078650452
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.941
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.941
Total error diversity:				 0.374
Error (vector) diversity:			 0.556
Behavioral diversity:				 0.556
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 78999414
--- Timings ---
Current time: 1529615003887 milliseconds
Total Time:         178.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.6 seconds, 39.1%
Fitness Testing:     83.7 seconds, 47.0%
Report:              24.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 39903.35029999999
Test mean error for best: 19.95168
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 46.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -39.2516975843
Correct output: 44.9272196671  | Program output: 83.9272196671 
Correct output: 66.6210657667  | Program output: 87.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -30.6354294126
Correct output: 1.2524717345   | Program output: 50.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 116.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 142.1949920159
Correct output: -37.2353445012 | Program output: -36.2353445012
Correct output: 122.2843412425 | Program output: 93.2843412425 
Correct output: 33.2581162527  | Program output: 22.2581162527 
Correct output: 123.421863126  | Program output: 101.421863126 
Correct output: 106.1474875213 | Program output: 106.1474875213
Correct output: 12.1495725478  | Program output: -19.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -7.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_add float_inc float_shove float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [26.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 40.0 1 39.0 2 21.0 2 22.0 2 49.0 2 49.0 2 5.16 11 13.0 2 42.0 3 1.0 1 1.0 1 29.0 3 11.0 2 22.0 2 0.0 0 32.0 11 94.0 3 54.0 2 0.2138 9]
Total: 805.0479
Mean: 16.100958
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2289.328712
Median total errors in population: 845.6203
Error averages by case: (95.7425601 5.426 58.16775989999989 6.587 72.7884896 2.796 101.75901189999995 10.897 91.80282079999903 11.804 93.1687822999998 11.647 88.18685420000003 3.097 83.10868080000002 3.072 76.7696745 3.05 77.83385239999997 3.31 91.55376209999999 3.092 86.43386419999999 4.955 61.90798760000129 10.67 88.02954010000008 3.258 100.67115589999995 4.059 77.4283967 2.965 60.491839500000005 2.609 101.57593000000001 3.963 80.48404760000003 5.161 95.3936444 3.559 75.78064900000003 3.033 99.55210550000002 11.321 147.66713639999995 3.712 93.59407839999999 2.907 53.02208810000009 9.464)
Error minima by case: (13.0514 1 1.532 1 1.3832 1 0.0432 1 8.1014 2 6.9624 2 0.0 0 1.0 1 0.0 0 20.0 1 0.0 0 0.0 0 2.17 2 3.0 1 40.0 2 0.0 0 0.0 0 19.0 1 1.0 1 12.0 1 0.0 0 0.2959 1 54.6028 1 0.0 0 0.0 0)
Average genome size in population (length): 127.44
Average program size in population (points): 128.44
Average percent parens in population: 0.008
Minimum age in population: 70.13027954991972
Maximum age in population: 74.30466629451278
Average age in population: 72.40372488583843
Median age in population: 72.44594252457516
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.354
Error (vector) diversity:			 0.523
Behavioral diversity:				 0.524
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 82185489
--- Timings ---
Current time: 1529615008878 milliseconds
Total Time:         183.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.1 seconds, 38.8%
Fitness Testing:     86.5 seconds, 47.3%
Report:              25.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_add float_inc float_shove float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2744.020175400001
Median total errors in population: 837.60005
Error averages by case: (112.48118070000002 5.431 78.7021778 6.921 92.38523500000001 2.929 118.98504649999995 11.18 108.61102499999812 11.761 110.88533620000051 11.527 106.91083959999999 3.229 101.50710960000005 3.293 94.12403680000004 3.259 100.14765179999996 3.5 111.4200718 3.24 107.1317031 4.912 79.99832500000171 10.542 102.73012330000002 3.549 121.07428869999993 4.152 92.3623897000001 3.138 78.89277800000004 2.824 116.3040225 4.211 98.31066839999998 5.192 110.48653929999999 3.778 91.16177929999998 3.219 116.59901959999998 11.404 167.06082809999998 4.077 112.81884469999997 3.087 72.99915490000075 9.575)
Error minima by case: (1.551 1 0.532 1 8.9419 1 0.0432 1 31.244 10 27.8789 2 1.0 1 0.0 0 0.8156 1 20.0 1 0.0 0 0.0 0 2.7438 1 0.0 0 40.0 1 0.0 0 0.0 0 0.2843 2 0.0 0 9.0 1 0.0 0 0.7049 9 54.6028 1 0.0 0 0.0 0)
Average genome size in population (length): 128.529
Average program size in population (points): 129.529
Average percent parens in population: 0.008
Minimum age in population: 71.47325967127429
Maximum age in population: 75.6717866663293
Average age in population: 73.8295376152991
Median age in population: 73.86286017764654
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.335
Error (vector) diversity:			 0.475
Behavioral diversity:				 0.477
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 85398864
--- Timings ---
Current time: 1529615013963 milliseconds
Total Time:         188.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.6 seconds, 38.6%
Fitness Testing:     89.2 seconds, 47.5%
Report:              26.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_add float_inc float_shove float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2307.5371187000023
Median total errors in population: 833.1522
Error averages by case: (92.73634269999998 5.021 60.79486130000004 7.196 74.32547980000001 2.901 103.86196029999996 11.311 92.07003409999918 11.603 94.2938609999999 11.441 91.75442130000002 3.23 85.3519498 3.17 77.43063060000001 3.161 81.60990990000002 3.446 96.62651030000004 3.181 91.12482090000005 4.618 62.99550360000104 10.393 84.75674550000002 3.415 103.81357039999995 4.042 74.83129940000002 2.977 60.89753420000001 2.647 98.03159370000004 4.117 77.86274650000001 4.863 92.16716570000003 3.633 72.96349689999998 2.971 96.8703457 11.234 150.0280672 4.211 98.12506939999996 3.051 54.92319850000013 9.457)
Error minima by case: (2.0 1 5.261 1 13.0581 1 0.0432 1 30.9033 3 9.532 2 2.8263 1 0.2649 1 0.0 0 9.0537 1 0.0 0 0.0 0 2.4032 1 1.0 1 18.9977 1 0.0 0 0.0 0 2.2843 1 0.0 0 2.0 1 0.0 0 3.3183 2 43.3972 1 0.0 0 0.0 1)
Average genome size in population (length): 129.965
Average program size in population (points): 130.965
Average percent parens in population: 0.008
Minimum age in population: 72.68879649936554
Maximum age in population: 77.15427799104312
Average age in population: 75.23396608359958
Median age in population: 75.25598710574896
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.952
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.952
Total error diversity:				 0.356
Error (vector) diversity:			 0.464
Behavioral diversity:				 0.465
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 88648189
--- Timings ---
Current time: 1529615018886 milliseconds
Total Time:         193.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.1 seconds, 38.4%
Fitness Testing:     92.0 seconds, 47.7%
Report:              26.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc integer_add float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_add float_inc float_shove float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2510.1591002
Median total errors in population: 825.6203
Error averages by case: (101.38631459999999 5.188 65.75593039999973 5.317 81.37102360000003 3.079 111.06926979999997 11.485 97.90395999999842 11.671 99.89015190000026 11.592 99.4222078 3.113 95.39786629999999 3.159 88.3998673 3.119 87.46473850000004 3.354 103.83076990000004 3.183 97.77942010000007 4.757 68.2111984000017 10.613 95.92580590000001 3.371 108.84203589999991 3.986 85.53633490000003 2.946 71.12856370000002 2.752 109.43402989999997 4.038 88.35397799999998 5.044 103.53075950000003 3.582 84.13354710000002 2.835 107.92544759999998 11.359 155.67762529999993 4.24 105.35350600000001 3.01 60.32074780000013 9.321)
Error minima by case: (4.317 1 5.3255 2 9.0581 1 1.0432 2 22.2244 3 7.7756 2 0.0 0 0.3432 1 0.0 0 13.0537 1 2.0 1 0.2613 1 2.17 2 1.0 1 40.0 1 0.0 0 0.0 0 0.2843 1 0.0 0 10.0 1 0.0 0 2.0866 2 39.3972 1 0.0 0 0.0 0)
Average genome size in population (length): 127.759
Average program size in population (points): 128.759
Average percent parens in population: 0.008
Minimum age in population: 74.0821423985338
Maximum age in population: 78.69875460242531
Average age in population: 76.615129228055
Median age in population: 76.66835441378636
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.951
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.951
Total error diversity:				 0.326
Error (vector) diversity:			 0.425
Behavioral diversity:				 0.431
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 91842239
--- Timings ---
Current time: 1529615023862 milliseconds
Total Time:         198.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.6 seconds, 38.2%
Fitness Testing:     94.8 seconds, 47.9%
Report:              27.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_add float_inc float_shove float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2199.3770871000006
Median total errors in population: 817.0479
Error averages by case: (88.80278439999998 5.098 56.24507699999962 3.875 68.19656090000001 3.195 100.61512439999997 11.575 85.04773789999888 11.811 88.57981969999999 11.779 88.71055619999996 3.028 84.17619420000004 2.931 75.8738261 2.894 74.38480149999997 3.258 93.33567979999998 3.09 87.02361950000002 4.648 56.82246270000104 10.728 81.49082980000006 3.17 96.25535169999986 3.817 71.37669550000004 2.59 56.813013900000016 2.559 95.30016649999997 3.817 75.37118940000005 4.83 89.19142220000002 3.341 69.93005650000003 2.522 94.8404359 11.301 143.3609988999999 4.169 94.52921569999997 3.008 50.931466799999896 9.138)
Error minima by case: (12.0 1 4.6864 2 16.0 1 1.0432 1 30.78 3 36.4674 2 5.0 1 0.2649 1 1.0 1 20.0 1 3.0 1 0.2525 1 2.221 2 0.0 0 40.0 1 0.0 0 0.0 0 0.7157 1 0.0 0 7.4219 1 0.0 0 1.6913 2 92.0 1 0.0 0 0.0558 1)
Average genome size in population (length): 127.218
Average program size in population (points): 128.218
Average percent parens in population: 0.008
Minimum age in population: 75.44607698715538
Maximum age in population: 80.07825447733477
Average age in population: 78.12369011485545
Median age in population: 78.12135706472175
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.28
Error (vector) diversity:			 0.341
Behavioral diversity:				 0.344
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 95022789
--- Timings ---
Current time: 1529615028850 milliseconds
Total Time:         202.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.1 seconds, 38.0%
Fitness Testing:     97.6 seconds, 48.1%
Report:              28.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove integer_sub float_inc float_yank float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_swap float_yank float_rot in1 float_shove integer_max float_inc float_shove in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2227.522630600001
Median total errors in population: 813.0479
Error averages by case: (90.0764312 5.1 56.0350459999995 3.562 68.8025519 3.156 101.29778569999993 11.518 86.04666209999867 11.934 89.12770680000017 11.909 90.54870599999998 3.153 86.12748860000004 3.046 78.0487236 2.996 74.74252680000001 3.148 95.46558390000001 3.183 89.00463030000004 4.618 57.28125950000131 10.901 83.65284520000004 3.333 96.97071879999991 3.861 73.78482710000002 2.66 55.847911400000015 2.325 97.25103779999996 3.913 75.37615180000003 4.833 91.16576549999999 3.435 71.95335750000002 2.683 94.83052099999998 11.283 143.66219529999992 4.094 96.92045729999997 3.074 50.826739499999796 8.957)
Error minima by case: (13.0 1 1.532 2 8.9419 1 0.0432 2 30.78 2 28.8789 3 0.0 0 0.0263 1 0.0 0 20.0 1 3.0 1 0.5513 1 3.1599 2 0.0 0 40.0 1 0.0 0 0.0 0 1.2843 1 1.127 1 3.2465 1 0.0 0 0.8247 8 54.6028 2 0.0 0 0.0 0)
Average genome size in population (length): 126.952
Average program size in population (points): 127.952
Average percent parens in population: 0.008
Minimum age in population: 76.86649153205646
Maximum age in population: 81.54147441705989
Average age in population: 79.54657135474821
Median age in population: 79.60027809684354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.249
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.301
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 98196689
--- Timings ---
Current time: 1529615033768 milliseconds
Total Time:         207.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.5 seconds, 37.8%
Fitness Testing:    100.3 seconds, 48.2%
Report:              29.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction integer_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_div} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_797} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction print_integer} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove integer_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_yank float_inc float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_yank float_inc float_yank float_inc float_inc float_inc float_shove float_inc float_inc integer_div float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_shove float_inc float_inc tagged_797 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_dec float_inc float_min float_inc float_yank float_inc float_inc float_shove print_integer float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc integer_max float_inc float_shove in1 integer_mod float_rot in1 float_inc integer_max integer_yankdup float_shove in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2042.3427849000027
Median total errors in population: 811.0479
Error averages by case: (80.6716783 4.937 47.14279369999958 3.544 60.7784707 3.102 93.91089339999995 11.566 78.25897969999959 12.019 81.37544859999966 12.008 85.78144440000001 3.162 79.50302799999996 3.006 71.51191229999998 2.948 66.7963157 3.076 89.93855049999998 3.192 81.23203580000006 4.486 49.353661600000954 10.965 77.06003459999998 3.281 88.45914319999996 3.862 67.22645300000002 2.612 48.02239 2.012 90.38335919999999 3.865 67.57447479999999 4.66 84.50615650000002 3.405 65.14677639999996 2.598 86.92784990000001 11.193 135.98486689999996 4.022 91.38630309999998 3.118 41.89876459999986 8.872)
Error minima by case: (12.0 1 4.9361 2 9.0581 1 0.0432 2 29.4751 2 34.936 2 5.5262 1 0.2649 1 3.0 1 9.8925 1 0.0 0 0.0 0 0.9749 2 0.0 0 39.0 1 0.0 0 0.0 0 0.2843 1 0.0 0 8.0 1 0.0 0 0.2425 7 39.3972 2 4.0 1 0.0558 1)
Average genome size in population (length): 126.551
Average program size in population (points): 127.551
Average percent parens in population: 0.008
Minimum age in population: 78.56408959319003
Maximum age in population: 82.71076428857874
Average age in population: 80.90069027526893
Median age in population: 80.94910593581712
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.218
Error (vector) diversity:			 0.248
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 101360689
--- Timings ---
Current time: 1529615038663 milliseconds
Total Time:         212.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.9 seconds, 37.6%
Fitness Testing:    103.0 seconds, 48.4%
Report:              29.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_add float_inc float_shove float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc integer_mult integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2233.1837922000027
Median total errors in population: 811.0479
Error averages by case: (88.49722639999999 4.887 56.76310859999947 3.646 70.55753890000001 3.222 102.53998469999995 11.459 87.53816969999929 12.042 90.02319019999999 12.015 92.19301459999998 3.158 85.44854900000001 2.802 76.54119170000001 2.779 77.69719870000003 3.22 97.43566790000001 3.144 91.02670850000004 4.465 58.720542500001 10.95 81.45557739999998 3.109 99.49782579999992 3.994 71.1921348 2.393 58.0433983 1.825 94.44279560000001 3.676 74.29797630000003 4.753 88.22680230000002 3.19 69.07476299999998 2.411 94.55324290000001 11.311 146.18675929999998 4.158 99.07482259999996 3.082 51.693602499999535 8.771)
Error minima by case: (13.0 1 1.532 2 5.3943 1 0.0432 2 12.1126 2 17.5735 2 2.0 1 0.0136 1 0.0 0 12.0537 1 4.0 1 1.1232 1 3.0 2 0.0 0 40.0 1 0.0 0 0.0 0 5.2843 1 1.0 1 9.0 1 0.0 0 0.655 9 40.3972 2 1.0 1 0.0757 1)
Average genome size in population (length): 125.929
Average program size in population (points): 126.929
Average percent parens in population: 0.008
Minimum age in population: 79.80801692916569
Maximum age in population: 84.21364489485227
Average age in population: 82.23000784766953
Median age in population: 82.29888806709671
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.221
Error (vector) diversity:			 0.253
Behavioral diversity:				 0.262
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 104509114
--- Timings ---
Current time: 1529615043625 milliseconds
Total Time:         217.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.4 seconds, 37.4%
Fitness Testing:    105.8 seconds, 48.6%
Report:              30.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_integer} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_86} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc integer_stackdepth float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove print_integer float_shove float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_shove integer_stackdepth float_inc float_yank float_shove float_inc float_shove integer_mult float_inc float_inc float_shove float_shove float_inc float_shove float_inc float_inc float_add float_inc integer_add float_shove float_inc float_inc float_shove float_inc float_shove float_inc integer_add float_inc float_inc float_inc integer_stackdepth float_inc float_inc integer_add float_inc float_inc float_dup_items float_inc float_inc float_inc float_inc float_shove float_inc float_inc tagged_86 float_inc float_inc float_yank float_inc float_inc float_inc float_inc integer_yank float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_shove float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 1920.3962165000019
Median total errors in population: 811.0479
Error averages by case: (77.4846544 4.865 45.87127709999948 3.51 57.74266989999999 3.064 91.64649959999994 11.609 74.91361059999998 12.043 78.56792749999926 12.022 78.23034660000003 2.907 72.9518983 2.681 64.15519049999999 2.629 63.95117709999996 3.029 83.1031681 2.934 78.15618260000005 4.429 46.41131900000053 11.0 68.28990799999998 2.974 85.94125629999995 3.879 58.09225140000001 2.264 46.48542510000001 1.712 82.5948385 3.591 63.3734931 4.564 76.2824729 3.108 56.785759699999986 2.306 82.22131540000001 11.238 133.66738229999987 3.989 84.79801229999998 2.839 40.59918020000022 8.893)
Error minima by case: (12.0 1 1.532 2 8.9419 1 0.0432 2 31.0 2 28.8789 2 5.0 1 1.0728 1 2.0 1 11.8925 1 2.0 1 0.1629 1 3.0 1 1.0 1 39.0 1 0.0 0 0.0 0 1.2843 1 0.0 0 8.0 1 0.0 0 4.7992 9 44.7945 2 0.0 0 0.2138 1)
Average genome size in population (length): 125.723
Average program size in population (points): 126.723
Average percent parens in population: 0.008
Minimum age in population: 81.07013243283113
Maximum age in population: 85.61955033892794
Average age in population: 83.6084314502642
Median age in population: 83.64396911245512
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.201
Error (vector) diversity:			 0.22
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 107652264
--- Timings ---
Current time: 1529615048486 milliseconds
Total Time:         222.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.8 seconds, 37.2%
Fitness Testing:    108.5 seconds, 48.7%
Report:              31.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_add float_inc float_shove float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2101.893999700002
Median total errors in population: 811.0479
Error averages by case: (84.84943569999999 5.187 51.1045211999995 3.783 63.72896229999997 3.234 96.09008679999995 11.384 82.34218869999951 12.093 84.46258959999945 12.079 85.34535060000002 3.207 79.86139960000001 2.894 72.39481569999998 2.85 70.08797489999998 3.191 89.96223859999999 3.193 82.91021580000002 4.716 52.81819980000127 11.003 78.63394679999996 3.231 92.10407519999994 4.024 68.66250520000003 2.579 50.96304490000003 1.802 92.26322199999998 3.771 71.1859742 4.951 86.24743360000004 3.336 66.9486511 2.598 89.93644749999996 11.264 139.57005079999993 4.14 91.18982359999998 3.091 45.9178454999999 8.712)
Error minima by case: (11.0 1 4.3524 2 16.0 1 0.0432 2 26.425 8 4.3345 3 1.0 1 0.0 0 0.3124 1 3.0314 1 3.0 1 0.1234 1 0.9749 1 0.0 0 40.0 2 0.0 0 0.0 0 0.2843 1 0.1734 1 7.0 1 0.0 0 0.4239 2 88.5176 1 0.0 0 0.0284 1)
Average genome size in population (length): 125.066
Average program size in population (points): 126.066
Average percent parens in population: 0.008
Minimum age in population: 82.54639395544642
Maximum age in population: 86.89044280125084
Average age in population: 84.95785244426393
Median age in population: 85.00614106048964
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.224
Error (vector) diversity:			 0.238
Behavioral diversity:				 0.239
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 110778964
--- Timings ---
Current time: 1529615053260 milliseconds
Total Time:         227.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        84.2 seconds, 37.0%
Fitness Testing:    111.1 seconds, 48.9%
Report:              32.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_sub} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc print_integer float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_dup_times float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_rot float_inc float_shove float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_sub float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2205.292608900001
Median total errors in population: 810.0479
Error averages by case: (89.92938280000003 5.041 54.786759399999625 3.511 69.451723 3.176 100.77618889999995 11.568 84.69844099999949 12.045 87.87207609999956 12.034 91.11395369999998 3.269 84.87463209999997 3.026 76.26822379999999 2.924 74.66143249999999 3.161 95.98021729999999 3.288 90.75600700000005 4.589 55.90601440000116 10.996 81.1499573 3.283 96.36619319999991 3.977 71.543091 2.574 56.61666930000002 1.74 94.50816640000002 3.816 73.87920500000004 4.791 88.67280340000002 3.38 69.69274689999997 2.617 93.17892810000001 11.279 143.58636279999988 4.103 97.23041379999997 3.181 49.57101969999975 8.853)
Error minima by case: (3.5255 1 5.468 2 14.465 1 1.0432 2 31.6601 3 36.2983 3 6.0 1 0.3753 1 1.0 1 10.8925 1 1.0 1 0.4181 1 2.16 2 0.0 0 15.208 1 0.0 0 0.0 0 1.2843 1 0.0 0 3.4219 1 0.0 0 0.1392 8 43.7945 2 0.7859 1 0.0757 1)
Average genome size in population (length): 125.241
Average program size in population (points): 126.241
Average percent parens in population: 0.008
Minimum age in population: 83.80420887173238
Maximum age in population: 88.04554665777565
Average age in population: 86.26743212494154
Median age in population: 86.33939398732127
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.229
Error (vector) diversity:			 0.253
Behavioral diversity:				 0.259
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 113910089
--- Timings ---
Current time: 1529615058262 milliseconds
Total Time:         232.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        85.6 seconds, 36.8%
Fitness Testing:    114.0 seconds, 49.0%
Report:              32.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_86} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_inc in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove integer_max float_inc float_inc float_inc float_shove float_inc float_shove float_yank float_inc float_shove float_inc float_dup_times float_inc float_inc float_yank float_inc float_shove float_inc float_shove float_inc float_dup_times float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_rot float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc integer_sub float_inc float_min float_inc float_inc float_shove float_inc float_inc tagged_86 float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2222.2536465000026
Median total errors in population: 811.0479
Error averages by case: (88.68968450000003 5.029 56.8540417999997 3.697 68.548342 3.3 101.71748239999995 11.456 86.4045638999993 12.078 89.37698629999973 12.048 91.20916120000001 3.375 85.50029049999999 3.053 77.3158717 2.971 74.8303172 3.301 96.42208869999996 3.356 89.65547290000003 4.603 57.801192100000996 10.978 82.67140849999998 3.328 96.7142071999999 4.045 72.7820611 2.643 55.40172300000001 1.815 95.96429080000004 3.88 74.4248066 4.838 90.25148460000003 3.436 71.06074269999999 2.688 92.14080289999997 11.26 143.65644459999993 4.212 97.71508589999993 3.289 51.689093399999784 8.777)
Error minima by case: (3.0 1 4.9361 2 15.465 1 1.0432 1 29.4751 3 34.936 2 1.0 1 2.0 1 4.0 1 11.8925 1 2.0 1 0.4577 1 0.9749 1 0.0 0 40.0 2 0.0 0 0.0 0 3.2843 1 0.5642 1 1.0 1 0.0 0 1.345 2 44.7945 2 1.0 1 0.2138 1)
Average genome size in population (length): 125.5
Average program size in population (points): 126.5
Average percent parens in population: 0.008
Minimum age in population: 85.12999351412839
Maximum age in population: 89.55604594334478
Average age in population: 87.64813165393034
Median age in population: 87.64322991228201
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.233
Error (vector) diversity:			 0.255
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 117047664
--- Timings ---
Current time: 1529615063018 milliseconds
Total Time:         237.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        87.0 seconds, 36.7%
Fitness Testing:    116.7 seconds, 49.2%
Report:              33.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_sub} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction -47} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_dup_times integer_swap float_inc float_inc float_shove float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank integer_dup_times float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_rot float_inc print_integer float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_sub float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 -47 float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2064.365785100001
Median total errors in population: 811.0479
Error averages by case: (81.80360810000003 4.965 49.029910499999524 3.456 63.751365699999965 3.081 94.57741289999994 11.594 79.29923319999921 12.02 82.32933809999973 12.039 86.59697389999998 3.161 77.62188580000003 2.852 69.54041269999999 2.827 70.74310629999997 3.07 91.55170519999999 3.163 81.86335380000001 4.51 50.4184970000011 10.957 76.06425329999999 3.187 92.25947889999995 3.842 65.92793349999998 2.526 51.66094510000002 1.7 88.75460220000001 3.774 67.5830777 4.789 82.8025189 3.296 64.33905229999996 2.534 89.33301889999997 11.219 139.5826221999999 4.019 92.63629999999996 3.049 43.77717889999986 8.888)
Error minima by case: (8.6781 1 1.532 2 8.9419 1 0.8419 2 27.3202 2 28.8789 3 1.0 1 0.0 0 1.0 1 20.0 1 0.0 0 0.0 0 0.9749 2 1.0 1 40.0 1 0.0 0 0.0 0 15.0 1 0.0 0 8.0 1 0.0 0 1.1403 1 54.6028 2 0.0 0 0.0757 1)
Average genome size in population (length): 125.868
Average program size in population (points): 126.868
Average percent parens in population: 0.008
Minimum age in population: 86.12999351412839
Maximum age in population: 91.14706943923935
Average age in population: 89.09417839539734
Median age in population: 89.13124120007319
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.223
Error (vector) diversity:			 0.245
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 120194539
--- Timings ---
Current time: 1529615067929 milliseconds
Total Time:         242.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        88.4 seconds, 36.5%
Fitness Testing:    119.4 seconds, 49.3%
Report:              34.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_86} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_inc integer_max float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_inc float_inc float_yank float_yank float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_stackdepth float_inc float_shove float_inc float_inc float_add float_inc integer_add float_shove float_inc float_inc float_shove float_inc float_shove float_inc integer_add float_inc float_inc float_inc float_shove float_inc float_inc integer_add float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_inc tagged_86 float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2185.1411449000025
Median total errors in population: 811.0479
Error averages by case: (86.38372830000002 4.844 55.92160569999952 3.666 67.56567629999998 3.242 101.05793169999994 11.563 85.02532859999928 12.064 88.36215289999993 12.062 89.57965540000002 3.242 84.68424879999999 2.985 75.88906069999999 2.921 73.60603779999995 3.229 94.75903069999998 3.217 88.61408300000001 4.441 56.72843130000123 11.011 80.43209480000002 3.246 95.14399759999989 4.025 70.7676972 2.566 53.89483950000001 1.646 94.0165742 3.837 72.5647371 4.643 87.88393490000003 3.368 69.04564079999999 2.632 91.75073470000002 11.282 142.4739149999999 4.176 96.35772229999995 3.119 50.74328559999966 8.862)
Error minima by case: (11.9486 1 1.532 2 8.9419 1 0.0432 2 31.6601 2 28.8789 2 2.0 1 0.9811 1 3.0 1 5.7487 1 0.0 0 0.0 0 3.0 1 3.0 1 21.6303 1 0.0 0 0.0 0 1.2843 1 0.1767 1 12.0 1 0.0 0 3.1496 8 49.8673 2 0.0 0 0.0757 1)
Average genome size in population (length): 126.26
Average program size in population (points): 127.26
Average percent parens in population: 0.008
Minimum age in population: 87.12999351412839
Maximum age in population: 92.47306203570875
Average age in population: 90.42581284431584
Median age in population: 90.48587002353973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.213
Error (vector) diversity:			 0.229
Behavioral diversity:				 0.234
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 123351139
--- Timings ---
Current time: 1529615072917 milliseconds
Total Time:         247.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.9 seconds, 36.4%
Fitness Testing:    122.2 seconds, 49.5%
Report:              34.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction tagged_490} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_sub} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc tagged_490 float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc print_integer float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_shove float_inc float_inc float_inc integer_rot float_dup_times float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_yank float_yank float_inc float_shove float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_add float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_sub float_shove float_inc float_inc float_yank float_inc float_inc float_shove integer_stackdepth float_inc float_yank float_inc float_inc float_max float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2235.4166674000026
Median total errors in population: 811.0479
Error averages by case: (90.72845790000001 4.876 55.759620799999524 3.524 71.43685679999996 3.201 101.74437419999995 11.563 86.13681169999886 12.046 88.897372 12.021 92.23258989999991 3.197 85.79369990000006 3.012 76.9516896 2.947 76.48815029999997 3.19 97.54614249999999 3.209 91.99930370000004 4.424 57.24072750000155 10.992 82.05652950000005 3.286 98.11236679999986 3.964 72.25026499999998 2.635 58.594129500000015 1.79 95.41548920000001 3.843 75.394892 4.67 89.43340830000002 3.411 70.2542764 2.646 94.12499220000001 11.245 145.0973340999999 4.12 99.29312399999993 3.115 50.62706359999947 8.88)
Error minima by case: (8.1861 1 0.0 0 8.9419 2 0.0432 2 0.0 0 0.0 0 5.0 1 1.6033 1 1.0 1 7.4928 1 0.0 0 0.0 0 0.0 0 1.0 1 40.0 1 0.0 0 0.0 0 3.2843 1 0.7579 1 7.0 1 0.0 0 0.1403 2 40.3972 2 0.5943 1 0.0757 1)
Average genome size in population (length): 125.727
Average program size in population (points): 126.727
Average percent parens in population: 0.008
Minimum age in population: 89.26812168896905
Maximum age in population: 94.00199351357915
Average age in population: 91.80604810139398
Median age in population: 91.8497352690248
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.219
Error (vector) diversity:			 0.238
Behavioral diversity:				 0.24
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 126494364
--- Timings ---
Current time: 1529615077980 milliseconds
Total Time:         252.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.3 seconds, 36.2%
Fitness Testing:    125.0 seconds, 49.6%
Report:              35.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_mult} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_yankdup} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_dup_times integer_swap float_inc float_inc float_shove float_shove float_inc float_inc integer_inc float_inc float_shove float_mult float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_stackdepth float_inc float_inc float_yank float_inc float_inc float_shove float_yank float_inc float_inc float_shove integer_swap float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc integer_add float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove integer_sub float_inc float_yank float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_yankdup float_inc float_shove float_inc float_inc integer_sub float_inc float_min float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_shove integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_yankdup float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2347.276632300002
Median total errors in population: 811.0479
Error averages by case: (95.2847691 5.159 59.427891299999544 3.806 74.62813210000002 3.286 105.43597889999994 11.387 91.4648204999988 12.089 93.31247450000014 12.06 95.13394229999992 3.2 89.36406060000006 2.997 81.72585280000006 2.933 82.64702349999997 3.262 99.99418310000001 3.223 93.75959780000007 4.685 61.893306200001476 11.048 87.24888830000003 3.292 104.01595919999988 4.073 77.15803980000004 2.656 62.712741500000014 1.846 100.99071189999998 3.855 80.59286430000004 4.906 95.0891524 3.431 75.69842090000004 2.633 99.73163049999998 11.264 151.08037589999992 4.172 101.38382569999993 3.107 54.392989199999384 8.739)
Error minima by case: (9.5056 1 5.2257 2 15.0 1 1.0432 2 29.4751 3 34.936 3 0.0 0 0.7011 1 0.0 0 19.0 1 3.0 1 0.4577 1 0.9749 1 1.0 1 39.0 1 0.0 0 0.0 0 4.2843 1 1.0 1 10.0 1 0.0 0 1.5488 2 91.0 2 1.0 1 0.0757 1)
Average genome size in population (length): 126.47
Average program size in population (points): 127.47
Average percent parens in population: 0.008
Minimum age in population: 90.91534877177189
Maximum age in population: 95.14127652263537
Average age in population: 93.12964699535284
Median age in population: 93.13151220524212
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.224
Error (vector) diversity:			 0.241
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 129656164
--- Timings ---
Current time: 1529615082946 milliseconds
Total Time:         257.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.8 seconds, 36.1%
Fitness Testing:    127.7 seconds, 49.7%
Report:              36.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_378} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_shove float_inc float_inc float_inc float_shove tagged_378 float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_add integer_min float_yankdup float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 1893.3072903000027
Median total errors in population: 810.0479
Error averages by case: (75.50393350000003 4.891 42.04608999999954 3.49 56.744165599999995 3.084 88.69551939999994 11.507 72.88798799999972 12.012 75.94580129999909 12.032 78.72834739999999 3.039 72.77568760000003 2.826 64.25424229999997 2.81 62.12394769999994 3.063 83.73707669999997 3.025 76.19085060000003 4.427 43.562443200000935 11.044 69.35636949999999 3.133 84.3385608999999 3.924 59.512264199999976 2.44 43.0542026 1.506 82.85190329999998 3.721 61.32015 4.64 76.82622940000003 3.257 57.692856499999955 2.46 81.78304619999999 11.265 132.0524586999999 3.997 85.23509099999993 2.935 36.76906470000033 8.791)
Error minima by case: (0.0552 1 1.532 2 8.9419 1 1.0432 2 24.2953 2 28.8789 3 2.0 1 0.2886 1 1.0 1 20.0 1 0.0 0 0.0 0 3.1599 2 3.0 1 40.0 1 0.0 0 0.0 0 2.2843 1 0.2991 1 11.4219 1 0.0 0 2.0137 8 54.6028 2 0.0 1 0.0757 1)
Average genome size in population (length): 126.425
Average program size in population (points): 127.425
Average percent parens in population: 0.008
Minimum age in population: 92.28529717272203
Maximum age in population: 96.52114678328734
Average age in population: 94.4618441192282
Median age in population: 94.49283355200117
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.211
Error (vector) diversity:			 0.226
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 132816914
--- Timings ---
Current time: 1529615088099 milliseconds
Total Time:         262.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.3 seconds, 36.0%
Fitness Testing:    130.5 seconds, 49.8%
Report:              37.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_sub} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_stackdepth float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove integer_inc float_inc float_inc float_inc float_shove float_inc float_shove float_yank float_inc float_shove float_inc float_dup_times float_inc float_inc float_yank integer_sub float_shove float_inc float_shove float_inc float_dup_times float_inc float_inc float_shove float_inc float_shove integer_rot float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc integer_sub float_inc float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_rot in1 float_shove integer_max float_inc float_shove in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2085.0661749000014
Median total errors in population: 810.0479
Error averages by case: (83.4323557 5.046 51.142134899999455 3.77 63.80777979999998 3.243 96.77983899999995 11.449 81.74295579999932 12.077 84.30288059999945 12.032 86.1804268 3.216 79.3503879 2.929 71.33476679999998 2.904 69.25842359999999 3.211 90.26872240000003 3.215 83.96561650000005 4.6 52.63617260000147 10.999 76.72147410000001 3.253 91.4168728999999 3.984 66.91472740000005 2.581 50.684539500000014 1.715 90.2463376 3.801 69.40358370000003 4.815 84.3533638 3.327 65.17515549999997 2.583 87.61860019999997 11.26 138.7084842999999 4.169 91.46177309999993 3.164 46.07280039999979 8.743)
Error minima by case: (6.0 1 5.468 2 16.0 1 0.0432 2 9.3028 2 22.6514 2 0.6229 1 1.7985 1 1.0 1 20.0 1 0.2392 1 0.2525 1 0.6514 1 1.0 1 40.0 2 0.0 0 0.0 0 3.2843 1 0.4355 1 2.0 1 0.0 0 1.6008 2 92.0 2 2.0 1 0.2138 1)
Average genome size in population (length): 126.499
Average program size in population (points): 127.499
Average percent parens in population: 0.008
Minimum age in population: 93.28529717272203
Maximum age in population: 98.01476660495
Average age in population: 95.87159004006067
Median age in population: 95.91076613672182
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.218
Error (vector) diversity:			 0.233
Behavioral diversity:				 0.238
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 135979414
--- Timings ---
Current time: 1529615092961 milliseconds
Total Time:         267.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.7 seconds, 35.8%
Fitness Testing:    133.2 seconds, 49.9%
Report:              38.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction tagged_883} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_swap} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_sub} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc tagged_883 float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_swap float_inc float_shove float_inc float_inc float_yank float_sub float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc integer_dup_times float_frominteger float_inc float_inc float_yank float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_inc float_shove float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc integer_dup_times float_inc float_inc float_yank float_inc float_inc float_min float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_yank integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2094.4815193000027
Median total errors in population: 811.0479
Error averages by case: (83.15336070000004 4.968 50.74203089999958 3.594 63.78239989999997 3.295 98.13900859999994 11.551 81.97553819999908 12.071 85.18734410000002 12.063 86.23359649999996 3.271 79.48513080000004 2.899 71.12463069999998 2.877 72.0264667 3.235 91.1855487 3.262 83.68863830000001 4.482 53.6980288000013 11.008 76.06671930000002 3.171 95.27915009999991 4.099 66.5014939 2.558 50.57439530000001 1.754 89.75015680000003 3.813 68.3015824 4.775 83.6195071 3.317 64.74991299999998 2.584 87.76772509999999 11.275 141.09685259999992 4.196 92.48525439999996 3.182 45.7260463999995 8.841)
Error minima by case: (2.0 1 1.532 1 8.9419 1 0.9568 2 31.0 2 28.8789 2 0.0 0 0.1243 1 3.0 1 20.0 1 2.0 1 0.0 0 3.0 1 0.0 0 40.0 1 0.0 0 0.0 0 0.2843 1 0.0 0 2.0 1 0.0 0 1.9915 1 54.6028 2 0.0 0 0.0634 1)
Average genome size in population (length): 127.133
Average program size in population (points): 128.133
Average percent parens in population: 0.008
Minimum age in population: 94.28529717272203
Maximum age in population: 99.14888898859014
Average age in population: 97.24044829027484
Median age in population: 97.2978488537268
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.964
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.964
Total error diversity:				 0.225
Error (vector) diversity:			 0.241
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 139157889
--- Timings ---
Current time: 1529615098118 milliseconds
Total Time:         272.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        97.3 seconds, 35.7%
Fitness Testing:    136.0 seconds, 50.0%
Report:              38.7 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_max} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_max float_min integer_swap float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_yank float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_swap float_shove float_inc float_yank float_inc float_yank float_shove float_inc float_shove float_inc float_shove float_min float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove integer_sub float_inc float_yank float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_inc integer_add float_inc float_inc integer_add float_inc float_min float_inc float_inc integer_yankdup float_inc float_inc float_yank float_inc float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2400.6395540000017
Median total errors in population: 811.0479
Error averages by case: (96.06599650000003 4.892 64.11987109999947 3.708 77.46947180000002 3.272 110.62057709999993 11.585 94.56853279999885 12.086 97.42534560000001 12.045 97.59246599999997 3.312 92.57160820000003 3.025 83.6930324 3.018 83.34420800000001 3.252 102.88380209999997 3.28 97.78767760000002 4.405 66.05542450000165 11.032 88.01329980000001 3.315 104.41358379999987 4.092 78.30180929999999 2.643 64.3155249 1.837 101.50720119999998 3.909 80.8569244 4.697 95.50548160000001 3.41 76.53098110000003 2.686 98.61004600000003 11.285 151.7151416999999 4.193 104.59503399999998 3.208 59.016512499999415 8.873)
Error minima by case: (10.0 1 4.9361 2 15.465 1 0.0432 2 31.6601 10 36.2983 2 0.0 0 0.6247 1 0.0 0 11.8925 1 0.0 0 0.0 0 2.16 2 0.8977 1 40.0 1 0.0 0 0.0 0 1.2843 1 0.0 0 6.0 1 0.0 0 0.0618 2 44.7945 2 3.0 1 0.0757 1)
Average genome size in population (length): 127.061
Average program size in population (points): 128.061
Average percent parens in population: 0.008
Minimum age in population: 96.4905327303588
Maximum age in population: 100.8781028036211
Average age in population: 98.55034262841033
Median age in population: 98.60454016435499
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.227
Error (vector) diversity:			 0.252
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 142334514
--- Timings ---
Current time: 1529615103061 milliseconds
Total Time:         277.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.7 seconds, 35.6%
Fitness Testing:    138.8 seconds, 50.1%
Report:              39.5 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_shove} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dec} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_shove float_shove integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_shove float_inc integer_dec float_shove float_shove float_inc float_inc float_inc float_dup_times float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_yank float_inc float_inc float_inc integer_max float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_div float_inc float_inc float_yank float_yank float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_add float_inc integer_add float_shove float_inc float_inc float_shove float_inc float_frominteger float_inc integer_add float_inc float_inc float_inc float_shove float_inc float_inc integer_add float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 136
Size: 137
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2076.034724200002
Median total errors in population: 811.0479
Error averages by case: (80.80949810000003 4.749 49.91534219999949 3.672 61.82763909999997 3.237 95.46318979999995 11.567 79.6169570999992 12.072 82.69701719999989 12.075 86.85711499999996 3.019 80.61294939999999 2.733 72.01304079999997 2.73 69.01040529999999 3.212 92.09737369999999 3.017 82.92502750000003 4.272 50.982801400000994 11.002 76.25735380000002 3.085 91.11720449999987 4.028 66.02632949999999 2.41 51.30964160000001 1.876 90.44003569999998 3.671 70.6364557 4.478 84.2543378 3.185 64.73857139999998 2.348 89.61407949999999 11.244 138.34195499999987 4.146 94.08028229999995 2.952 44.749120799999886 8.861)
Error minima by case: (11.0514 1 1.532 2 0.4046 1 1.0432 2 6.3137 3 11.7746 3 1.0 1 2.0 1 5.0 1 12.0537 1 1.0 1 0.0245 1 0.9749 1 0.0 0 40.0 2 0.0 0 0.0 0 2.2843 1 1.0 1 9.0 1 0.0 0 1.2754 2 40.3972 2 1.0 1 0.2138 1)
Average genome size in population (length): 127.521
Average program size in population (points): 128.521
Average percent parens in population: 0.008
Minimum age in population: 97.68383098658047
Maximum age in population: 102.0937022076818
Average age in population: 99.87061285753909
Median age in population: 99.92798530029324
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.223
Error (vector) diversity:			 0.24
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 145522689
--- Timings ---
Current time: 1529615108094 milliseconds
Total Time:         282.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.1 seconds, 35.5%
Fitness Testing:    141.7 seconds, 50.2%
Report:              40.3 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_yank} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_swap float_shove float_inc float_yank float_inc float_yank float_shove float_inc float_shove float_inc float_shove float_min float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_add float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc integer_sub float_inc float_stackdepth float_inc float_yank float_frominteger float_inc float_min float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_swap float_yank float_rot in1 float_shove integer_max float_inc float_shove in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2082.105010200003
Median total errors in population: 811.0479
Error averages by case: (81.07155060000001 4.982 46.55668129999945 3.551 64.56604819999998 3.094 93.00751249999993 11.53 78.32030399999968 12.04 80.42048719999944 11.98 90.19984699999999 3.306 79.6275983 2.85 71.79998739999999 2.873 69.81320109999999 3.085 95.09793960000003 3.257 82.47140340000006 4.475 48.632352400000805 10.917 77.9970427 3.161 91.52543999999996 3.81 68.3242648 2.527 51.90918900000001 1.715 90.57714039999998 3.775 70.3784842 4.727 84.60873460000002 3.286 66.62263889999998 2.552 91.4952907 11.289 138.7327538 3.994 96.18144879999991 3.163 41.40766930000006 8.821)
Error minima by case: (1.0514 1 1.532 2 8.9419 1 0.0432 2 19.0582 2 10.9418 2 1.0 1 0.0 0 2.0 1 20.0 1 0.0 0 0.0 0 2.7438 1 0.0 0 40.0 1 0.0 0 0.0 0 2.7157 1 0.0 0 9.0 1 0.0 0 0.2201 7 54.6028 2 1.0 1 0.0757 1)
Average genome size in population (length): 127.355
Average program size in population (points): 128.355
Average percent parens in population: 0.008
Minimum age in population: 99.04901846948209
Maximum age in population: 103.2846720371771
Average age in population: 101.1610595304952
Median age in population: 101.1928104386208
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.221
Error (vector) diversity:			 0.243
Behavioral diversity:				 0.246
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 148706689
--- Timings ---
Current time: 1529615113072 milliseconds
Total Time:         287.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.6 seconds, 35.4%
Fitness Testing:    144.4 seconds, 50.3%
Report:              41.0 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in1} {:instruction integer_max} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup} {:instruction float_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 in1 integer_max float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc integer_dup float_mult float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove integer_dec float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_rot float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_inc float_shove float_inc float_inc float_dup_times float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2085.012233100001
Median total errors in population: 811.0479
Error averages by case: (82.55405019999999 4.935 49.19270539999968 3.699 61.786959599999975 3.187 95.07062589999994 11.558 79.78052649999968 12.065 82.32135219999952 12.06 87.05510930000003 3.161 80.95383529999998 2.889 72.9082215 2.896 67.99659379999996 3.148 92.02880210000002 3.149 82.68374330000003 4.462 50.754459900000924 10.989 78.3515147 3.206 90.02207289999993 3.947 68.643269 2.595 50.155877399999994 1.846 91.91431869999998 3.806 71.0131258 4.702 85.80383960000002 3.354 66.86441359999998 2.604 90.68082430000001 11.216 137.52709749999988 4.055 93.39529019999998 3.052 44.11160439999991 8.861)
Error minima by case: (0.5167 1 5.3363 2 16.0 1 0.0432 1 23.1325 2 0.7783 2 1.0 1 1.3049 1 2.0 1 20.0 1 1.0 1 0.2525 1 3.1594 1 0.0 0 40.0 2 0.0 0 0.0 0 0.2843 1 0.0 0 8.0 1 0.0 0 0.1496 2 92.0 2 0.0 0 0.1288 1)
Average genome size in population (length): 127.487
Average program size in population (points): 128.487
Average percent parens in population: 0.008
Minimum age in population: 100.0490184694821
Maximum age in population: 104.5272621642412
Average age in population: 102.4965137536208
Median age in population: 102.5435198406511
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.96
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.96
Total error diversity:				 0.225
Error (vector) diversity:			 0.24
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 151893964
--- Timings ---
Current time: 1529615118243 milliseconds
Total Time:         292.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.1 seconds, 35.3%
Fitness Testing:    147.2 seconds, 50.4%
Report:              41.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_flush} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_sub} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_pop} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc integer_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_shove float_inc float_inc float_inc float_inc float_shove integer_flush float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove integer_sub float_inc float_inc float_add float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_yank float_inc float_inc integer_mult float_inc float_shove float_inc float_yank float_inc float_sub float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc integer_pop float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2110.344827800003
Median total errors in population: 811.0479
Error averages by case: (83.17824610000001 4.896 48.52762439999961 3.679 63.61695599999996 3.297 94.52268879999994 11.492 80.45674549999927 12.042 82.9690343 12.02 89.75620599999999 3.22 81.32733630000003 2.891 73.13710980000002 2.892 70.18664099999998 3.27 95.09250400000003 3.178 85.98931030000007 4.457 50.96250020000104 10.933 78.4955622 3.237 92.70884979999985 4.045 68.4619462 2.572 51.85221270000002 1.771 92.03436449999997 3.809 71.27056080000006 4.692 85.95513570000001 3.359 66.87927039999998 2.59 90.90251529999992 11.226 139.81245959999995 4.19 96.76805849999994 3.163 43.7549893999996 8.805)
Error minima by case: (6.4148 1 5.0166 2 15.0 1 0.0432 2 25.3202 2 10.4843 3 0.4076 1 0.0 0 0.9867 1 19.0 1 4.0 1 0.3611 1 2.16 1 0.0 0 39.0 1 0.0 0 0.0 0 6.2843 1 0.0 0 8.0 1 0.0 0 0.0284 2 91.0 2 1.0 1 0.0757 1)
Average genome size in population (length): 127.934
Average program size in population (points): 128.934
Average percent parens in population: 0.008
Minimum age in population: 101.2698087131558
Maximum age in population: 105.9572873123292
Average age in population: 103.8664361502455
Median age in population: 103.9058475190433
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.238
Error (vector) diversity:			 0.253
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 155092489
--- Timings ---
Current time: 1529615123239 milliseconds
Total Time:         297.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.5 seconds, 35.2%
Fitness Testing:    150.1 seconds, 50.5%
Report:              42.6 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction integer_swap} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc integer_shove float_inc float_shove float_inc float_inc float_inc float_shove float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_yank float_shove float_inc float_dec float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_inc float_shove float_inc float_inc float_inc float_inc float_yankdup float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc float_frominteger float_inc float_dup_items integer_dec float_inc float_inc float_min float_add float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod integer_swap in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2136.4799181000026
Median total errors in population: 811.0479
Error averages by case: (84.07894690000002 4.986 50.19330139999962 3.673 64.68973889999995 3.244 96.52380479999995 11.441 81.6325380999993 12.08 83.6381205999998 12.051 90.40080949999998 3.145 81.91873320000003 2.938 74.03259259999999 2.947 71.98908619999996 3.23 94.6676646 3.123 84.85977370000003 4.487 52.20491600000118 10.966 79.75403800000001 3.262 94.04785779999985 3.959 69.976897 2.611 56.115031900000005 1.722 93.26008179999997 3.868 71.47751090000003 4.656 87.18793550000001 3.358 68.02170579999998 2.624 91.65608259999999 11.25 141.07226869999988 4.138 96.30776299999994 3.136 45.12771859999991 8.75)
Error minima by case: (10.0 1 1.532 2 8.9419 1 0.0432 2 31.6601 2 28.8789 2 1.0 1 0.1412 1 3.0 1 19.0 1 0.0 0 0.0 0 3.16 1 0.0 1 39.0 1 0.0 0 0.0 0 0.7157 1 0.0 0 6.0 1 0.0 0 0.3863 2 54.6028 2 1.0 1 0.0 0)
Average genome size in population (length): 127.25
Average program size in population (points): 128.25
Average percent parens in population: 0.008
Minimum age in population: 102.6473691396362
Maximum age in population: 107.4010990023255
Average age in population: 105.1353869873344
Median age in population: 105.2084647224063
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.955
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.225
Error (vector) diversity:			 0.24
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 158273839
--- Timings ---
Current time: 1529615128179 milliseconds
Total Time:         302.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.9 seconds, 35.0%
Fitness Testing:    152.9 seconds, 50.6%
Report:              43.4 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc integer_dup integer_flush integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove print_integer float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc integer_yank float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_inc float_shove float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc float_frominteger float_min float_inc float_inc float_shove integer_sub float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2189.1986797000027
Median total errors in population: 811.0479
Error averages by case: (87.93925120000003 5.036 54.183263899999474 3.7 68.65632360000001 3.314 99.80120559999995 11.431 84.84113039999887 12.074 87.82465399999998 12.074 89.60045799999993 3.164 83.16358800000006 2.907 75.08355000000002 2.922 75.10880650000001 3.241 94.60366250000001 3.164 88.56501500000007 4.546 56.29032100000135 11.016 80.78970679999998 3.226 97.42826449999986 4.042 71.03386060000001 2.579 55.62910710000001 1.71 94.2883218 3.807 73.72773310000008 4.776 88.33633320000003 3.363 69.0917593 2.606 91.96234510000002 11.26 144.1925744999999 4.165 96.0128295999999 3.076 49.085614399999635 8.76)
Error minima by case: (3.0514 1 5.0 2 15.0 1 0.0432 1 11.5564 3 18.4436 3 1.0 1 1.0 1 0.0 0 19.0 1 0.0 0 0.0 0 3.1599 1 0.0 0 39.0 1 0.0 0 0.0 0 0.2843 2 0.0 0 9.0 1 0.0 0 1.392 2 91.0 2 0.0 0 0.0757 1)
Average genome size in population (length): 127.558
Average program size in population (points): 128.558
Average percent parens in population: 0.008
Minimum age in population: 103.8439191628731
Maximum age in population: 109.2108670975311
Average age in population: 106.4072574341291
Median age in population: 106.4617147863594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.964
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.964
Total error diversity:				 0.234
Error (vector) diversity:			 0.254
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 161463014
--- Timings ---
Current time: 1529615133149 milliseconds
Total Time:         307.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.4 seconds, 35.0%
Fitness Testing:    155.7 seconds, 50.7%
Report:              44.1 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction integer_dec} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_pop} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_flush} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_shove float_inc float_inc float_shove float_inc integer_yankdup float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_shove float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_max float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_shove float_inc float_dec float_shove float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_inc float_sub integer_dec float_inc float_shove float_inc integer_pop float_shove float_inc float_inc float_add float_inc float_shove float_inc float_inc float_inc float_shove integer_sub float_inc float_yank float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc integer_sub float_inc float_min float_inc float_yank float_frominteger float_inc float_shove float_inc integer_dup_times float_yank float_inc float_inc float_shove float_inc float_swap float_yank float_rot in1 float_shove integer_max float_inc float_shove in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_flush float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2094.897012000002
Median total errors in population: 811.0479
Error averages by case: (83.3645978 4.865 49.070598299999745 3.555 64.58687189999999 3.004 96.28501009999994 11.585 81.53526269999927 12.05 83.26273339999985 12.038 87.18901070000001 3.201 81.65216760000003 2.936 73.07618330000001 2.896 69.60000670000001 3.004 92.4615 3.174 85.41703320000002 4.399 51.38797890000097 10.936 77.80772099999997 3.206 90.85097969999997 3.766 68.16440029999998 2.55 51.670819500000015 1.702 91.40579070000003 3.802 69.09610740000002 4.661 85.54686520000001 3.344 66.44758269999997 2.596 88.012394 11.19 138.48863040000003 3.949 94.10209109999998 3.217 43.910675399999874 8.878)
Error minima by case: (0.9486 1 1.532 2 8.9419 1 0.0432 2 4.7057 3 25.2943 2 1.0 1 0.0 0 0.0 1 20.0 1 0.0 0 0.0 0 1.221 2 0.0 1 40.0 1 0.0 0 0.0 0 0.2843 1 0.0 0 2.4623 1 0.0 0 0.6137 1 54.6028 2 0.0 0 0.0757 1)
Average genome size in population (length): 128.016
Average program size in population (points): 129.016
Average percent parens in population: 0.008
Minimum age in population: 104.8439191628731
Maximum age in population: 109.6411635198888
Average age in population: 107.7419076974228
Median age in population: 107.7592411910756
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.953
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.953
Total error diversity:				 0.225
Error (vector) diversity:			 0.242
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 164663439
--- Timings ---
Current time: 1529615138137 milliseconds
Total Time:         312.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.9 seconds, 34.9%
Fitness Testing:    158.4 seconds, 50.7%
Report:              44.8 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction -81} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction -47} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc -81 float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove integer_max float_inc float_shove float_inc float_inc float_mod integer_swap float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_yank float_inc float_shove float_inc float_inc float_inc float_inc integer_pop float_inc integer_add float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove integer_sub float_inc float_yank float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_yankdup float_inc integer_mult float_inc float_inc integer_sub float_inc float_min float_inc float_inc float_shove float_inc float_dup_items float_yank float_inc float_inc float_shove float_inc float_min float_yank float_inc float_inc float_add float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 -47 float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2040.086530100002
Median total errors in population: 811.0479
Error averages by case: (81.2391893 4.939 46.57293049999962 3.616 61.77751549999998 3.143 93.29435369999995 11.445 78.9576168999996 12.052 80.64764119999947 12.03 86.03946269999997 3.168 78.13481749999997 2.811 69.89333289999996 2.768 67.94807299999998 3.128 90.9243573 3.171 82.00004860000003 4.479 48.972607400000655 10.955 75.1988225 3.104 89.73413309999995 3.869 65.2216005 2.439 50.29662200000001 1.816 88.94567930000002 3.694 68.54617860000002 4.697 82.7650923 3.23 63.57819659999999 2.469 88.13239679999998 11.232 137.22672359999996 4.042 92.44747179999993 3.055 41.50566650000011 8.734)
Error minima by case: (1.6296 1 1.532 2 8.9419 1 0.0432 2 23.4274 9 17.9664 3 2.0 1 0.0728 1 3.0 1 0.0337 1 2.0 1 2.0E-4 1 3.0 2 2.0 1 40.0 1 0.0 0 0.0 0 1.2843 1 0.0 0 3.0 1 0.0 0 0.8504 2 54.6028 2 0.0 0 0.0757 1)
Average genome size in population (length): 128.177
Average program size in population (points): 129.177
Average percent parens in population: 0.008
Minimum age in population: 105.8439191628731
Maximum age in population: 111.0394293276002
Average age in population: 109.0511800119288
Median age in population: 109.0858236326048
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.219
Error (vector) diversity:			 0.235
Behavioral diversity:				 0.237
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 167868089
--- Timings ---
Current time: 1529615143215 milliseconds
Total Time:         317.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.3 seconds, 34.8%
Fitness Testing:    161.4 seconds, 50.8%
Report:              45.6 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_mult} {:instruction float_swap} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction tagged_883} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction 2} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_inc float_shove float_inc float_min float_inc float_shove float_inc float_inc float_frominteger float_inc float_mult float_swap float_shove float_inc float_inc float_inc float_shove float_inc tagged_883 integer_min float_inc float_inc 2 float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_shove float_shove float_inc float_inc integer_dup_times float_frominteger float_inc float_inc float_yank float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_inc integer_flush float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc integer_dup_times float_inc float_inc float_yank float_inc float_inc float_min float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_yank integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2350.813606300003
Median total errors in population: 811.0479
Error averages by case: (93.5579093 4.902 60.98460319999945 3.56 75.49611290000004 3.237 105.90789669999994 11.536 91.7292465999988 12.11 93.8196307 12.083 98.92454080000005 3.265 90.556322 3.087 81.8124742 3.033 80.57538580000003 3.235 103.14657409999998 3.26 96.29885400000002 4.472 62.16633530000142 11.057 86.25451089999999 3.377 102.54183269999994 4.019 76.53899720000001 2.665 61.49748530000001 1.653 99.3357868 3.929 80.48874950000005 4.691 93.46132240000001 3.466 74.55769399999998 2.719 98.46551609999999 11.287 149.0643212999999 4.176 104.92276700000001 3.246 55.79773749999965 8.846)
Error minima by case: (6.0514 1 5.468 2 16.0 1 1.0432 2 8.4178 3 13.7911 2 0.0 0 0.0 0 3.654 1 20.0 1 0.0 0 0.0 0 3.16 2 1.0 1 40.0 1 0.0 0 0.0 0 0.2843 1 0.0 0 10.0 1 0.0 0 1.655 7 92.0 2 1.0 1 0.0757 1)
Average genome size in population (length): 128.532
Average program size in population (points): 129.532
Average percent parens in population: 0.008
Minimum age in population: 107.5840929664151
Maximum age in population: 112.6050700813921
Average age in population: 110.3952055615982
Median age in population: 110.4490882632182
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.215
Error (vector) diversity:			 0.244
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 171081664
--- Timings ---
Current time: 1529615148320 milliseconds
Total Time:         322.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.7 seconds, 34.6%
Fitness Testing:    164.3 seconds, 51.0%
Report:              46.3 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_inc} {:instruction 13} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_div} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_shove float_min integer_swap float_inc float_inc float_shove float_stackdepth float_inc 13 float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_yank float_inc float_inc float_inc integer_max float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_div float_yankdup float_inc float_yank float_yank float_inc float_shove float_inc float_shove float_inc float_stackdepth float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_add float_inc integer_add float_shove float_inc float_inc float_shove float_inc float_frominteger float_inc integer_add float_inc float_inc float_inc float_shove float_inc float_inc integer_add float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 139
Size: 140
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2221.646959700002
Median total errors in population: 811.0479
Error averages by case: (88.29575540000003 5.006 55.01895059999945 3.614 68.8413312 3.19 102.26657469999994 11.569 86.3287159999986 12.087 89.08669620000029 12.069 90.89037779999994 3.172 85.66720049999998 2.896 77.46348479999997 2.808 76.57799719999997 3.171 95.96963530000002 3.194 88.75062050000003 4.57 57.435814700001536 11.032 82.3244309 3.194 97.91015659999991 3.982 72.2466814 2.498 55.829328200000006 1.836 96.2784072 3.73 75.07239870000005 4.8 90.13738100000002 3.291 70.94359419999999 2.547 93.85423460000001 11.301 145.32251309999992 4.11 97.60807359999993 3.117 49.90860529999924 8.834)
Error minima by case: (8.9486 1 5.468 2 16.0 1 0.9568 2 31.6601 2 36.7358 3 2.0 1 1.0 1 1.0 1 20.0 1 0.0 0 0.0 0 3.0 1 2.0 1 30.9977 1 0.0 0 0.0 0 3.2843 1 0.0 0 11.0 1 0.0 0 0.3908 8 61.1841 2 0.0 0 0.0757 1)
Average genome size in population (length): 128.644
Average program size in population (points): 129.644
Average percent parens in population: 0.008
Minimum age in population: 108.9538475178064
Maximum age in population: 113.8113451602895
Average age in population: 111.7103332108634
Median age in population: 111.7497794187939
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.21
Error (vector) diversity:			 0.231
Behavioral diversity:				 0.234
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 174297964
--- Timings ---
Current time: 1529615153393 milliseconds
Total Time:         327.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.2 seconds, 34.6%
Fitness Testing:    167.1 seconds, 51.0%
Report:              47.1 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_yank} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min print_integer float_inc float_inc float_shove float_inc float_inc float_shove float_mult float_shove float_inc float_inc integer_sub float_shove float_inc float_inc float_shove float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_yank float_shove float_inc float_dec float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc integer_mod float_inc float_shove float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_yank float_inc float_inc float_shove float_inc integer_sub float_inc float_stackdepth float_inc float_yank float_frominteger float_inc float_min float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_swap float_yank float_rot in1 float_shove integer_max float_inc float_shove in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec integer_div in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2132.9051185000017
Median total errors in population: 811.0479
Error averages by case: (85.34965909999994 5.205 51.42092819999964 3.682 65.54175619999998 3.219 97.49074809999995 11.469 83.53902969999956 12.093 85.31346559999959 11.998 87.57915339999995 3.274 81.35540900000004 2.984 73.53053559999998 2.921 70.8436823 3.204 92.36759800000003 3.27 84.77167280000005 4.751 53.62436410000077 10.896 79.568708 3.266 93.52534599999994 3.867 69.7344501 2.61 52.7824185 1.797 93.06804010000002 3.806 72.50276620000002 4.996 87.30405910000005 3.376 68.1163531 2.683 91.02647839999996 11.303 139.7272075 4.131 93.63502700000001 3.237 46.34126239999991 8.807)
Error minima by case: (3.8451 1 4.468 2 16.0 1 0.0432 2 29.4751 3 34.936 2 1.0 1 0.0 0 0.3789 1 20.0 1 1.0 1 0.4068 1 0.9749 1 1.0 1 40.0 1 0.0 0 0.0 0 2.2843 1 0.0 0 7.0 1 0.0 0 0.655 2 92.0 2 1.0 1 0.0757 1)
Average genome size in population (length): 128.554
Average program size in population (points): 129.554
Average percent parens in population: 0.008
Minimum age in population: 110.3725284272783
Maximum age in population: 115.3056141571841
Average age in population: 113.0923655487724
Median age in population: 113.1464219553019
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.231
Error (vector) diversity:			 0.247
Behavioral diversity:				 0.249
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 177511839
--- Timings ---
Current time: 1529615158455 milliseconds
Total Time:         332.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.7 seconds, 34.5%
Fitness Testing:    169.9 seconds, 51.1%
Report:              47.9 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction integer_add} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_add} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dup_times} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mult} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove integer_add integer_swap float_inc float_inc integer_dec float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_max float_inc float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_shove integer_yankdup float_inc float_shove float_shove float_inc float_inc float_inc float_dup_times float_inc float_inc float_yank float_inc float_shove float_inc float_inc in2 float_shove float_inc integer_mult float_add float_inc float_shove float_inc float_shove float_inc integer_add tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_inc integer_mod float_rot float_inc float_inc float_yank float_inc float_inc integer_min float_inc float_inc float_inc float_min float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_sub float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dup_times float_shove in2 float_shove in2 float_mod integer_mult float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2229.617455200002
Median total errors in population: 811.0479
Error averages by case: (88.57975390000001 4.888 55.27685839999954 3.72 68.56977790000003 3.329 100.95578179999995 11.523 84.93655829999928 12.093 88.07361789999968 12.102 92.64642369999999 3.257 87.06749400000002 3.094 78.54174670000002 3.029 75.02287599999998 3.273 97.96946100000001 3.224 90.29198560000003 4.435 56.557273500001074 11.061 83.59728750000002 3.348 97.3745855999999 4.162 74.27403390000002 2.706 55.30530850000001 1.72 96.67837069999997 3.941 74.04427430000001 4.62 90.72222990000003 3.472 72.12777469999997 2.769 93.6133525 11.242 144.33255039999992 4.238 99.45378560000002 3.314 50.20729289999995 8.837)
Error minima by case: (8.0 1 5.2257 2 15.0 1 2.0432 2 5.485 3 20.7425 9 0.0 0 0.0 0 2.0 1 19.0 1 0.0 0 0.0 0 1.221 1 0.0 0 39.0 1 0.0 0 0.0 0 3.2843 1 0.0 0 4.0 1 0.0 0 0.107 7 91.0 2 2.0 1 0.0757 1)
Average genome size in population (length): 129.012
Average program size in population (points): 130.012
Average percent parens in population: 0.008
Minimum age in population: 111.6474837912485
Maximum age in population: 116.4603933014711
Average age in population: 114.4965624182392
Median age in population: 114.5325573352797
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.23
Error (vector) diversity:			 0.249
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 180737239
--- Timings ---
Current time: 1529615163502 milliseconds
Total Time:         337.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.1 seconds, 34.4%
Fitness Testing:    172.7 seconds, 51.2%
Report:              48.6 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yankdup} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_sub} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction -95} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_min} {:instruction integer_div} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_yankdup float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_frominteger float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove print_integer float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc integer_yank float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_sub float_inc float_shove float_inc float_inc float_inc float_inc float_inc integer_add float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc float_frominteger float_min float_inc float_inc float_shove integer_sub float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_min -95 float_yank float_inc float_inc float_shove float_inc float_swap float_yank float_rot in1 float_shove integer_max float_inc float_shove in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_min integer_div in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2570.7863911000027
Median total errors in population: 811.0479
Error averages by case: (102.2884102 5.349 67.74321879999962 3.847 83.09304290000009 3.402 113.48452689999992 11.506 98.8933256999983 12.058 100.69685470000061 12.047 105.75709239999992 3.516 99.58448500000002 3.195 92.02590310000002 3.097 89.30107710000004 3.385 110.46466919999996 3.524 101.5084018 4.891 69.83975670000166 10.944 98.45205890000003 3.497 110.72072119999991 4.097 88.7740838000001 2.85 70.4927069 2.068 111.64511509999997 4.038 88.14791070000005 5.133 105.72429940000002 3.596 86.99245500000005 2.886 107.14718329999992 11.313 156.82481570000002 4.301 111.6893169 3.435 62.674959699999235 8.845)
Error minima by case: (0.0552 1 5.468 2 16.0 1 0.0432 2 29.4751 2 34.936 2 2.0 1 0.5912 1 0.0 1 20.0 1 2.0 1 0.7475 1 0.9749 1 1.0 1 40.0 1 0.0 0 0.0 0 4.2843 1 0.0 0 10.0 1 0.0 0 0.0137 8 92.0 1 0.6945 1 0.0 0)
Average genome size in population (length): 128.79
Average program size in population (points): 129.79
Average percent parens in population: 0.008
Minimum age in population: 113.7310932177447
Maximum age in population: 117.7350640619103
Average age in population: 115.8184025558681
Median age in population: 115.8613298422762
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.244
Error (vector) diversity:			 0.259
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 183957139
--- Timings ---
Current time: 1529615168526 milliseconds
Total Time:         342.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.6 seconds, 34.3%
Fitness Testing:    175.4 seconds, 51.2%
Report:              49.4 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc integer_dup integer_flush integer_mult float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc integer_stackdepth float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_inc integer_dup float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_shove float_shove float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc integer_mod float_inc float_shove float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_rot integer_dup_times float_inc float_inc float_yank float_inc float_inc float_min float_inc float_yank float_inc float_max float_inc float_inc float_shove float_add float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_frominteger float_shove integer_mod float_shove in1 integer_dec integer_div in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2580.4209381000023
Median total errors in population: 811.0479
Error averages by case: (103.37767579999996 5.114 70.95524569999995 3.926 82.24068120000004 3.431 115.77467609999995 11.514 101.13980379999823 12.104 103.94526590000056 12.043 105.58207919999995 3.564 99.19210420000007 3.215 91.21278460000003 3.169 87.46807020000004 3.39 110.66327199999999 3.528 103.83981390000008 4.678 72.98039650000149 10.973 97.23418920000002 3.519 109.03053529999991 4.135 87.77348070000005 2.888 72.73893010000002 2.104 110.30664139999999 4.082 88.34684670000004 4.968 104.49108120000004 3.619 85.78463800000002 2.961 106.3829001999999 11.274 155.22108810000003 4.326 111.88436109999999 3.462 66.00337699999943 8.864)
Error minima by case: (4.8712 1 1.8674 1 9.0581 1 0.0432 1 12.4529 2 6.9919 2 2.0 1 2.3432 1 0.0 0 10.9408 1 1.0 1 0.1629 1 2.16 1 1.0 1 34.2897 1 0.0 0 0.0 0 0.2843 1 0.0 0 8.0 1 0.0 0 0.3151 8 39.3972 2 0.0 0 0.0757 1)
Average genome size in population (length): 128.607
Average program size in population (points): 129.607
Average percent parens in population: 0.008
Minimum age in population: 114.8219279176964
Maximum age in population: 119.1291127432236
Average age in population: 117.128733037233
Median age in population: 117.1793391760162
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.951
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.951
Total error diversity:				 0.226
Error (vector) diversity:			 0.241
Behavioral diversity:				 0.246
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 187172539
--- Timings ---
Current time: 1529615173618 milliseconds
Total Time:         347.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.2 seconds, 34.3%
Fitness Testing:    178.2 seconds, 51.3%
Report:              50.2 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_dup_items} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_div} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_div} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction float_shove} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove integer_dup_items float_shove float_inc float_inc float_inc float_shove float_inc integer_swap float_yank float_shove float_inc float_shove float_inc float_shove float_shove float_inc float_inc integer_shove float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_add float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove integer_div float_inc float_add float_inc float_shove float_inc float_inc in2 float_inc float_yank float_inc float_inc in2 float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc integer_dup_times float_inc float_inc integer_dec float_inc float_inc float_min float_inc float_yank float_inc float_inc float_inc float_inc float_shove integer_div in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod integer_dup_items in1 integer_dec float_shove in2 float_shove in2 float_mod float_shove float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2399.114179400003
Median total errors in population: 811.0479
Error averages by case: (97.11001209999999 5.056 60.1485928999996 3.72 77.47666900000003 3.336 107.07346979999994 11.435 91.55616769999881 12.062 93.48945630000026 12.03 99.94762379999997 3.242 92.39755279999997 3.082 84.12182159999998 3.038 82.8153432 3.338 105.01652820000002 3.234 97.20153250000001 4.616 62.35428380000122 10.988 89.65126999999995 3.399 104.58561329999989 4.078 79.82100240000003 2.756 64.57778070000002 1.854 103.04621830000004 3.936 82.34878050000002 4.859 97.06497620000002 3.508 78.08980659999999 2.767 102.68804500000003 11.309 151.25668859999996 4.232 106.27975809999997 3.181 55.184185999999606 8.755)
Error minima by case: (3.1041 1 4.525 2 13.465 1 0.9568 1 9.6601 2 15.1211 2 1.0 1 0.0 0 1.0 1 12.8925 1 1.0 1 0.1234 1 2.6902 1 0.0 0 40.0 1 0.0 0 0.0 0 0.1041 1 0.2076 1 6.0 1 0.0 0 0.7978 2 45.7945 2 1.0 1 0.0757 1)
Average genome size in population (length): 128.48
Average program size in population (points): 129.48
Average percent parens in population: 0.008
Minimum age in population: 115.8219279176964
Maximum age in population: 120.3988427819926
Average age in population: 118.4654102724201
Median age in population: 118.5223714839353
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.231
Error (vector) diversity:			 0.253
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 190384639
--- Timings ---
Current time: 1529615178804 milliseconds
Total Time:         352.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.6 seconds, 34.2%
Fitness Testing:    181.1 seconds, 51.3%
Report:              50.9 seconds, 14.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_239} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup} {:instruction float_mult} {:instruction float_shove} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_158} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction tagged_163} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction tagged_147} {:instruction integer_min} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc tagged_239 float_inc float_inc float_inc float_shove float_inc integer_dup float_mult float_shove integer_dup_items float_inc float_shove float_inc integer_dup_times float_swap float_shove float_inc float_shove float_inc float_inc float_shove float_mod float_inc float_shove float_inc float_inc tagged_158 float_inc float_inc float_shove float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_yank float_inc float_yank float_inc float_inc float_inc float_shove float_inc float_inc float_swap float_inc float_shove float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_add float_inc tagged_163 float_inc float_shove float_inc float_inc tagged_765 float_inc float_yank float_inc float_inc float_dec float_inc float_min float_inc float_yank float_yankdup float_inc float_shove float_inc float_inc integer_sub float_inc float_min float_inc float_inc print_integer float_inc float_inc float_yank float_inc float_min float_inc float_inc float_inc float_min float_rot in1 float_inc in1 integer_mod integer_rot float_inc float_shove float_inc tagged_147 integer_min float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2400.3383467000026
Median total errors in population: 811.0479
Error averages by case: (95.87909240000002 4.911 62.71832179999959 3.623 77.56112420000004 3.289 110.19752839999995 11.539 94.4546328999983 12.074 97.26689230000066 12.052 97.96521029999994 3.307 92.73832460000006 3.082 83.7149568 3.052 83.54703570000001 3.28 103.41063270000001 3.294 98.03441660000003 4.471 65.82286540000143 11.048 88.38257500000003 3.381 104.90160389999991 4.07 78.72507069999997 2.712 63.32779340000001 1.808 101.71858329999996 3.953 80.7444842 4.738 95.72857390000001 3.477 76.9120142 2.753 98.50522290000002 11.281 151.97789639999988 4.216 104.91930689999991 3.215 57.72418779999926 8.834)
Error minima by case: (10.0514 1 5.468 2 16.0 1 0.0432 2 7.6494 2 21.8247 2 1.0 1 0.0 0 3.0 1 20.0 1 1.0 1 0.8595 1 0.1753 2 0.0 0 40.0 1 0.0 0 0.0 0 1.7157 1 0.0 0 7.0 1 0.0 0 0.9098 2 92.0 2 3.0 1 0.0757 1)
Average genome size in population (length): 128.231
Average program size in population (points): 129.231
Average percent parens in population: 0.008
Minimum age in population: 116.8219279176964
Maximum age in population: 121.7797978109037
Average age in population: 119.7291824722446
Median age in population: 119.7822281799836
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.228
Error (vector) diversity:			 0.249
Behavioral diversity:				 0.252
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 193590514
--- Timings ---
Current time: 1529615183775 milliseconds
Total Time:         357.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.1 seconds, 34.1%
Fitness Testing:    183.9 seconds, 51.4%
Report:              51.8 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_sub} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_462} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_409} {:instruction float_inc} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_sub} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction integer_mod} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc integer_dup integer_flush integer_mult float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc integer_stackdepth float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_inc integer_dup float_shove float_inc float_shove float_inc float_shove float_inc float_add float_inc float_shove float_inc float_inc float_frominteger float_shove float_inc float_inc float_yank float_sub float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc integer_dup_times float_frominteger float_inc float_inc float_yank float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_inc integer_flush float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc integer_dup_times float_inc float_inc float_yank float_inc float_inc tagged_462 float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc tagged_409 float_inc float_yank float_rot in1 float_inc in1 integer_mod integer_sub float_inc float_shove float_inc float_yank integer_mod in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2097.569265400003
Median total errors in population: 811.0479
Error averages by case: (84.08174419999999 4.732 50.71395589999949 3.587 65.47229309999997 3.243 96.62911049999997 11.562 82.62512079999931 12.023 84.90179369999954 12.017 86.83058840000001 3.147 80.8823179 2.821 71.63481909999996 2.807 71.02526399999996 3.229 92.3012611 3.078 86.48165930000002 4.274 52.71781260000129 10.928 75.7730585 3.145 93.01580009999994 3.999 65.64197649999998 2.491 53.3163575 1.625 89.56010600000002 3.761 68.60286300000001 4.427 83.62111360000002 3.303 64.17953349999998 2.5 87.74360829999996 11.216 140.24008269999993 4.15 94.08558999999995 3.082 45.49243509999989 8.852)
Error minima by case: (13.0 1 4.0 1 16.0 1 0.0432 2 29.4751 2 34.936 2 0.7483 1 1.8644 1 0.0 1 20.0 1 1.0 1 0.7122 1 0.9749 1 0.0 0 40.0 1 0.0 0 0.0 0 4.2843 1 0.0 0 9.0 1 0.0 0 2.7049 9 92.0 2 1.0 1 0.0691 1)
Average genome size in population (length): 128.179
Average program size in population (points): 129.179
Average percent parens in population: 0.008
Minimum age in population: 118.7443599170755
Maximum age in population: 123.1697732746974
Average age in population: 121.1156023448607
Median age in population: 121.1638156611
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.213
Error (vector) diversity:			 0.23
Behavioral diversity:				 0.233
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 196795039
--- Timings ---
Current time: 1529615188881 milliseconds
Total Time:         363.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.5 seconds, 34.0%
Fitness Testing:    186.8 seconds, 51.5%
Report:              52.6 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction print_integer} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_flush} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_yank} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction integer_rot} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction integer_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc print_integer float_shove float_inc float_shove float_inc float_shove float_inc float_inc print_integer float_inc float_inc integer_mult float_inc float_shove float_inc integer_flush print_integer float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc integer_mod float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc integer_sub float_inc float_stackdepth float_inc float_yank float_frominteger float_inc float_min float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_swap float_yank float_rot in1 integer_rot integer_max float_inc float_shove in1 integer_mod integer_stackdepth float_inc integer_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 135
Size: 136
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2094.0800065000035
Median total errors in population: 811.0479
Error averages by case: (83.16040830000003 4.865 49.265081399999666 3.541 64.67809759999999 3.15 94.61379319999995 11.577 79.36360549999931 11.999 82.44481539999998 12.013 87.55692879999994 3.311 80.925716 2.95 72.4270744 2.9 71.73429389999997 3.136 92.8849931 3.303 84.76630620000005 4.442 50.445998100000985 10.902 77.72396200000003 3.246 93.42241459999993 3.885 67.90012320000002 2.61 53.41038920000001 1.707 91.20957229999998 3.838 67.14622470000002 4.698 85.1577719 3.4 65.9922158 2.616 87.32254420000004 11.222 140.65232749999993 4.069 94.33273149999998 3.27 44.023617699999704 8.869)
Error minima by case: (2.9486 1 5.468 2 16.0 1 0.9568 2 31.6601 2 36.5586 2 1.0 1 0.2183 1 1.8484 1 20.0 1 0.0 0 0.0 0 2.6191 1 1.0 1 27.8843 1 0.0 0 0.0 0 3.2843 1 0.0 0 7.0 1 0.0 0 0.1496 2 49.4848 2 0.0 0 0.0757 1)
Average genome size in population (length): 128.357
Average program size in population (points): 129.357
Average percent parens in population: 0.008
Minimum age in population: 119.9052891723433
Maximum age in population: 124.7017168347072
Average age in population: 122.4954983351358
Median age in population: 122.5208003004523
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.235
Error (vector) diversity:			 0.254
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 200003964
--- Timings ---
Current time: 1529615193958 milliseconds
Total Time:         367.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.9 seconds, 34.0%
Fitness Testing:    189.6 seconds, 51.5%
Report:              53.3 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_mod} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction -61} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_swap} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction tagged_68} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_dup_times integer_swap float_inc float_inc float_inc float_inc print_integer float_inc float_inc float_inc float_inc float_shove float_inc float_shove float_shove float_inc float_shove float_inc float_shove float_inc float_mod float_shove float_inc float_inc float_sub float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_max float_inc float_inc float_shove tagged_268 float_inc float_yank float_shove float_inc float_inc in2 float_shove float_inc float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_mult float_inc float_inc float_inc float_inc float_shove -61 float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc integer_dup_times float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc float_min float_inc float_inc float_min float_inc float_swap float_yank float_rot in1 float_shove integer_max float_inc float_shove in1 integer_mod integer_rot float_inc float_shove float_inc tagged_68 integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2418.790615000003
Median total errors in population: 811.0479
Error averages by case: (96.31982990000003 5.005 62.038343499999506 3.765 77.5259504 3.354 107.60569579999995 11.5 92.45028049999915 12.056 95.06419819999975 12.084 102.0848330999999 3.414 93.00316709999996 3.046 84.44438479999998 3.01 82.83096099999997 3.308 106.96215750000002 3.447 97.74913170000002 4.58 63.66771750000115 11.035 89.1804992 3.34 104.56644599999993 4.123 80.09514920000002 2.726 68.49731420000002 1.922 102.6180519 3.946 83.89655900000004 4.864 96.6626695 3.42 78.0580339 2.692 102.41873479999997 11.277 151.2495121999999 4.224 108.46170299999993 3.407 56.97229109999974 8.822)
Error minima by case: (3.9279 1 1.532 2 8.9419 1 0.9568 2 25.0346 2 4.9654 2 1.0 1 1.7894 1 2.0 1 20.0 1 1.0 1 0.1234 1 2.7438 1 1.0 1 40.0 1 0.0 0 0.0 0 4.2843 1 0.0 0 5.0 1 0.0 0 0.345 2 54.6028 2 2.0 1 0.0142 1)
Average genome size in population (length): 128.634
Average program size in population (points): 129.634
Average percent parens in population: 0.008
Minimum age in population: 121.3962679268195
Maximum age in population: 126.153296557267
Average age in population: 123.8860636136703
Median age in population: 123.9129658411887
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.963
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.963
Total error diversity:				 0.236
Error (vector) diversity:			 0.253
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 203219989
--- Timings ---
Current time: 1529615198903 milliseconds
Total Time:         373.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.4 seconds, 33.9%
Fitness Testing:    192.4 seconds, 51.6%
Report:              54.2 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_215} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove integer_swap float_inc in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc integer_add float_inc in2 float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc integer_flush float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_yank float_inc float_inc float_shove tagged_215 float_inc float_shove float_shove float_inc float_inc float_inc float_div float_inc float_inc float_yank float_inc float_rot float_inc float_inc float_inc float_inc float_stackdepth integer_dup float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc integer_sub float_inc float_add float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove float_shove integer_mod float_shove in1 integer_dec integer_div in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2046.3200623000023
Median total errors in population: 811.0479
Error averages by case: (81.7457072 4.695 47.48523949999954 3.43 64.71730189999998 3.083 94.90589699999995 11.588 77.60977999999923 12.059 80.66728569999982 12.066 85.9836267 3.078 78.934406 2.761 69.8206917 2.743 69.88162189999997 3.055 91.15958649999999 3.047 83.50633060000003 4.263 48.950869900000995 11.051 74.02627879999999 3.086 91.42894979999993 3.899 64.18932559999999 2.417 52.009376900000014 1.577 87.84928039999998 3.7 66.30472929999999 4.471 81.83567120000002 3.207 62.5312241 2.451 87.61900419999999 11.225 139.1984331999999 4.006 92.80984979999995 2.949 42.379594399999775 8.863)
Error minima by case: (1.9486 1 0.0 0 16.0 1 0.9568 2 0.0 0 0.0 0 2.0 1 1.8759 1 1.1632 1 20.0 1 0.6354 1 0.2526 1 0.0 0 1.0 1 40.0 2 0.0 0 0.0 0 0.7157 1 0.4137 1 7.0 1 0.0 0 0.7092 8 92.0 2 0.0 0 0.0 0)
Average genome size in population (length): 128.879
Average program size in population (points): 129.879
Average percent parens in population: 0.008
Minimum age in population: 122.9170053321007
Maximum age in population: 127.2339985819023
Average age in population: 125.2296904861025
Median age in population: 125.2471912582393
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.207
Error (vector) diversity:			 0.221
Behavioral diversity:				 0.224
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 206441964
--- Timings ---
Current time: 1529615203852 milliseconds
Total Time:         378.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       127.8 seconds, 33.8%
Fitness Testing:    195.2 seconds, 51.6%
Report:              54.9 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_yankdup} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_rot} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_yank} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction integer_swap} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_yankdup float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_stackdepth float_inc float_shove float_inc float_inc float_shove float_inc integer_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_shove float_dec float_inc float_shove float_inc float_inc float_yank integer_dup_times float_inc integer_yank float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_rot float_inc print_integer float_inc float_shove float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove integer_add float_inc float_inc integer_flush float_inc float_stackdepth float_inc float_yank float_frominteger float_inc float_min float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_swap float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod integer_swap in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2146.5957973000022
Median total errors in population: 811.0479
Error averages by case: (85.44260740000004 4.857 51.70549489999965 3.585 66.58722269999997 3.158 98.58570009999994 11.382 83.48816569999923 12.069 86.31524959999983 12.075 89.93278829999997 3.151 83.17486570000001 2.919 74.18794829999997 2.937 71.75226379999997 3.131 95.13888389999998 3.135 87.32212589999999 4.395 54.66373590000116 11.083 78.54602630000001 3.199 94.3264129999999 3.96 69.25503470000001 2.582 54.03788680000002 1.601 92.04418059999996 3.848 70.6833546 4.611 86.02839460000001 3.349 67.2457435 2.622 91.1931336 11.293 141.07530229999992 4.058 96.57502119999992 3.012 46.6162538999997 8.66)
Error minima by case: (2.2222 1 5.1947 2 12.5448 1 0.0 0 19.2631 3 24.724 2 4.0 1 0.5187 1 2.0 1 20.0 1 1.0 1 0.2987 1 2.3402 2 1.0 1 40.0 1 0.0 0 0.0 0 2.2843 1 0.0 0 1.7778 1 0.0 0 0.1496 2 67.5311 2 0.2141 1 0.0 0)
Average genome size in population (length): 128.264
Average program size in population (points): 129.264
Average percent parens in population: 0.008
Minimum age in population: 124.0105746073815
Maximum age in population: 128.8366261005069
Average age in population: 126.5583024815525
Median age in population: 126.5600111949539
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.226
Error (vector) diversity:			 0.242
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 209648789
--- Timings ---
Current time: 1529615208955 milliseconds
Total Time:         383.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.3 seconds, 33.8%
Fitness Testing:    198.0 seconds, 51.7%
Report:              55.6 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_456} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_min} {:instruction integer_div} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mult} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc integer_sub float_mod float_inc float_inc float_shove float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_yank float_shove float_inc integer_dec float_inc float_shove float_inc float_inc print_integer float_inc float_shove float_inc float_dup_items float_inc float_inc integer_flush float_shove float_inc float_inc float_yank float_inc float_inc tagged_456 integer_mod float_rot float_inc float_inc float_inc float_inc float_shove float_inc integer_dup_times float_inc float_add float_yank float_inc float_inc float_min integer_dup float_inc float_inc float_inc float_min float_inc float_inc float_inc integer_sub float_inc float_min float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_sub float_inc float_min integer_div float_rot in1 float_inc in1 integer_mult integer_max integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2453.3044186000025
Median total errors in population: 811.0479
Error averages by case: (98.09063959999996 5.106 61.8226098999995 3.628 80.52659030000005 3.362 110.23633079999995 11.474 94.81671319999843 12.111 96.34718970000027 12.041 101.27973339999997 3.188 94.33748929999999 2.976 87.00449700000003 2.941 85.8302368 3.287 106.68631960000002 3.185 98.9673501 4.6 65.51711410000163 11.048 91.23285930000002 3.283 107.42981489999984 4.078 81.8823966 2.627 67.22987490000003 1.725 104.9594187 3.811 83.50650410000003 4.846 98.9942745 3.378 80.5225559 2.615 105.33095189999999 11.314 154.02988049999988 4.222 106.94307269999997 3.237 56.9160007999993 8.781)
Error minima by case: (2.7599 1 2.532 2 7.9419 1 0.0432 2 31.6601 9 29.8789 2 2.0 1 3.0 1 0.4951 1 20.0 1 2.0 1 0.2613 1 3.16 2 1.0 1 40.0 2 0.0 0 0.0 0 0.2401 1 0.0 0 3.0 1 0.0 0 0.7453 2 53.6028 2 0.0 0 0.1845 1)
Average genome size in population (length): 128.646
Average program size in population (points): 129.646
Average percent parens in population: 0.008
Minimum age in population: 125.1508378683326
Maximum age in population: 129.9523482776192
Average age in population: 127.882753668972
Median age in population: 127.9145296640462
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.218
Error (vector) diversity:			 0.239
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 212865014
--- Timings ---
Current time: 1529615213887 milliseconds
Total Time:         388.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.7 seconds, 33.7%
Fitness Testing:    200.7 seconds, 51.7%
Report:              56.4 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_stackdepth} {:instruction tagged_268} {:instruction float_inc} {:instruction integer_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_mod} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction -41} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction float_dup_times} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_shove integer_max float_inc float_inc float_yank float_inc float_inc float_inc float_yank float_inc float_stackdepth tagged_268 float_inc integer_swap float_mod float_inc float_shove float_dup_items float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc integer_pop float_inc float_yank float_inc float_inc integer_dup_times float_inc float_inc float_yank float_inc float_inc float_min float_inc float_yank float_inc float_max float_inc float_inc float_shove float_inc float_inc float_yank float_yank float_inc float_yank float_inc integer_mod float_shove float_inc float_yank float_rot in1 float_inc in1 -41 integer_max float_inc float_shove float_inc float_shove float_shove integer_mod integer_mod float_shove in1 float_dup_times float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2356.985634900003
Median total errors in population: 811.0479
Error averages by case: (93.72600410000003 5.25 61.20382069999937 3.738 73.4755132 3.312 106.36911119999994 11.505 91.26312449999801 12.093 93.88265760000056 12.069 96.31807089999997 3.33 90.5111364 2.999 83.29221319999998 2.982 80.53436560000002 3.294 101.0532827 3.302 93.40460670000006 4.74 62.59048330000204 10.977 89.2485014 3.341 102.0734432999999 4.051 79.34868230000001 2.681 61.26553750000003 1.985 102.75104739999999 3.888 79.51100740000007 5.054 96.7316036 3.435 77.77209609999997 2.724 98.7898815 11.29 148.91288169999996 4.22 102.41421819999994 3.27 56.17634439999911 8.836)
Error minima by case: (0.724 1 1.532 2 8.9419 1 0.0432 2 25.4914 3 28.8789 2 1.0 1 0.0 0 1.2623 1 20.0 1 0.0 0 0.0 0 3.0 1 1.0 1 40.0 1 0.0 0 0.0 0 2.276 1 0.0 0 4.724 1 0.0 0 0.1403 1 54.6028 1 0.0 0 0.0757 1)
Average genome size in population (length): 129.017
Average program size in population (points): 130.017
Average percent parens in population: 0.008
Minimum age in population: 126.7886821225116
Maximum age in population: 131.3044338570344
Average age in population: 129.2645321640553
Median age in population: 129.2770618810861
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.236
Error (vector) diversity:			 0.256
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 216090739
--- Timings ---
Current time: 1529615218897 milliseconds
Total Time:         393.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.1 seconds, 33.6%
Fitness Testing:    203.6 seconds, 51.8%
Report:              57.2 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_dup} {:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction -81} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_dec} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_yank} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc integer_dup in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc -81 float_inc float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove print_integer float_inc float_inc integer_pop float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_dec float_inc float_shove float_inc float_inc float_yank integer_dup_times float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank integer_dec float_inc float_shove float_inc float_inc float_add float_inc float_shove float_inc float_dup_items float_inc float_inc integer_flush float_shove float_inc float_inc float_inc float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc integer_flush float_inc float_stackdepth float_inc float_yank float_frominteger float_inc float_min float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_mult float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2410.1214181000023
Median total errors in population: 811.0479
Error averages by case: (97.07464230000005 5.019 54.05584429999966 3.672 78.48124880000005 3.256 102.70701149999995 11.454 88.16883639999902 12.046 89.8550543999999 12.001 104.35388479999995 3.363 93.17603320000003 3.035 85.92492800000005 3.027 84.7961535 3.267 110.24775679999998 3.323 98.84229610000007 4.557 58.15176970000123 10.993 92.04405310000003 3.318 106.58654419999988 4.031 82.74505450000004 2.68 64.54267720000001 1.752 103.71340320000002 3.909 85.78897570000001 4.811 98.50934220000005 3.415 79.95840659999999 2.732 104.07112029999999 11.326 153.05467269999988 4.176 111.01245079999995 3.291 49.03925779999986 8.766)
Error minima by case: (7.2045 1 0.0 0 0.0581 1 0.0432 1 0.0 0 0.0 0 1.0 1 0.0 0 0.0061 1 5.8532 1 2.0 1 0.0647 1 0.0 0 0.0 0 40.0 1 0.0 0 0.0 0 1.2843 1 1.0 1 8.0 1 0.0 0 0.8505 2 85.6958 2 0.0 0 0.0757 1)
Average genome size in population (length): 129.492
Average program size in population (points): 130.492
Average percent parens in population: 0.008
Minimum age in population: 128.2841857988908
Maximum age in population: 132.6971461945012
Average age in population: 130.6205293018415
Median age in population: 130.6176122686497
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.259
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 219328089
--- Timings ---
Current time: 1529615224010 milliseconds
Total Time:         398.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.6 seconds, 33.6%
Fitness Testing:    206.4 seconds, 51.9%
Report:              57.9 seconds, 14.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_shove} {:instruction integer_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mult} {:instruction integer_max} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc integer_dup integer_flush integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove print_integer float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_rot float_inc float_inc float_inc float_inc float_stackdepth float_add integer_dup_times float_inc float_shove float_inc float_inc float_shove float_inc float_inc integer_yankdup float_inc float_shove float_inc integer_sub float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_inc float_min float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_yankdup integer_mult float_inc float_inc float_shove float_inc float_swap float_shove integer_inc float_min float_yank float_rot in1 float_inc in1 integer_mult integer_max integer_max float_inc float_shove float_inc float_shove integer_rot float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2052.7956728000017
Median total errors in population: 811.0479
Error averages by case: (81.35967370000003 4.885 43.226624599999745 3.632 62.78256029999996 3.185 91.18560019999993 11.552 76.40049629999969 12.025 78.45379279999942 12.013 87.99221369999997 3.144 78.97439019999996 2.861 70.90484779999998 2.882 69.26122049999994 3.16 93.03374610000002 3.078 82.7602584 4.426 46.25610940000073 10.953 77.0034602 3.192 92.39766429999995 3.967 67.43188079999999 2.554 52.40246700000001 1.773 89.7534526 3.805 69.49676709999999 4.572 84.55844180000003 3.339 65.46574509999996 2.523 89.56530240000002 11.167 138.78447889999987 4.081 94.57213819999997 3.037 38.124340400000065 8.842)
Error minima by case: (3.9448 1 4.9361 2 16.0 1 0.0432 2 31.244 3 36.5527 2 1.0 1 0.0 0 0.9593 1 20.0 1 1.0 1 1.0 1 1.221 2 2.0 1 40.0 1 0.0 0 0.0 0 3.2843 1 0.0 0 7.0 1 0.0 0 0.3908 2 92.0 2 2.0 1 0.0757 1)
Average genome size in population (length): 128.614
Average program size in population (points): 129.614
Average percent parens in population: 0.008
Minimum age in population: 129.6949872553441
Maximum age in population: 134.1569038593506
Average age in population: 131.9755754396321
Median age in population: 132.0185758464721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.238
Error (vector) diversity:			 0.257
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 222543514
--- Timings ---
Current time: 1529615229121 milliseconds
Total Time:         403.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       135.1 seconds, 33.5%
Fitness Testing:    209.3 seconds, 51.9%
Report:              58.8 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_stackdepth} {:instruction tagged_268} {:instruction float_inc} {:instruction integer_rot} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction -41} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction float_dup_times} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_shove integer_max float_inc float_inc float_yank float_inc float_inc float_inc float_yank float_inc float_stackdepth tagged_268 float_inc integer_rot float_mod float_inc float_shove float_dup_items float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc integer_pop float_inc float_yank float_inc float_inc integer_dup_times float_inc float_inc float_yank float_inc float_inc float_min float_inc float_yank float_inc float_max float_inc float_inc float_shove float_inc float_inc float_yank float_yank float_inc float_yank float_inc integer_rot float_shove float_inc float_yank float_rot in1 float_inc in1 -41 integer_max float_inc float_shove float_inc float_shove float_shove integer_mod integer_mod float_shove in1 float_dup_times float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2406.3744186000026
Median total errors in population: 808.5798
Error averages by case: (95.52650480000003 4.762 62.93674189999955 3.678 79.33531110000008 3.249 108.09561399999994 11.554 93.31467139999869 12.096 96.14397950000016 12.052 101.36930929999995 3.341 93.18498540000002 2.949 83.5429035 2.958 85.34465200000001 3.224 106.98689599999997 3.33 100.37702860000006 4.331 64.57505390000132 11.046 86.47266139999998 3.234 106.34007409999991 4.046 76.53580690000001 2.56 65.736051 1.715 100.00593320000003 3.876 80.127277 4.503 94.08797110000002 3.342 74.62991430000001 2.565 99.83722949999996 11.276 153.4114937999999 4.15 108.73933579999995 3.239 57.77901909999954 8.862)
Error minima by case: (9.0 1 1.532 2 8.9419 1 0.0432 2 31.6601 2 28.8789 2 0.0 0 0.0 0 0.0 0 20.0 1 5.0 1 0.0 0 3.16 1 0.0 0 40.0 1 0.0 0 0.0 0 5.2843 1 0.1767 1 5.0 1 0.0 0 0.8557 1 54.6028 1 0.0 0 0.0757 1)
Average genome size in population (length): 128.559
Average program size in population (points): 129.559
Average percent parens in population: 0.008
Minimum age in population: 131.0981349755539
Maximum age in population: 135.2097746819014
Average age in population: 133.2875662504274
Median age in population: 133.324776787576
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.209
Error (vector) diversity:			 0.226
Behavioral diversity:				 0.227
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 225757664
--- Timings ---
Current time: 1529615234061 milliseconds
Total Time:         408.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.6 seconds, 33.5%
Fitness Testing:    212.0 seconds, 51.9%
Report:              59.5 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_stackdepth} {:instruction tagged_268} {:instruction float_inc} {:instruction integer_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_stackdepth float_shove float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_shove print_integer float_inc float_inc float_shove float_inc float_inc float_shove integer_max float_inc float_inc float_yank float_inc float_inc float_inc float_yank float_inc float_stackdepth tagged_268 float_inc integer_swap float_mod float_inc float_shove float_dup_items float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc float_frominteger float_min float_inc float_inc integer_sub integer_sub float_inc float_shove float_inc float_inc float_rot in1 float_inc in1 integer_pop integer_dup_times float_inc float_shove float_inc in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2104.222517800002
Median total errors in population: 811.0479
Error averages by case: (82.48503790000001 4.721 48.083703799999476 3.62 64.14505949999999 3.342 95.14956709999994 11.457 81.4713861999994 12.074 83.13340379999951 12.032 90.36057929999996 3.262 80.89605110000002 2.957 72.10771479999998 2.993 70.5134889 3.316 95.82579399999997 3.186 86.2195576 4.29 51.495236000001015 10.941 76.99633899999998 3.298 93.37761739999995 4.068 67.92753389999999 2.622 53.79679080000002 1.696 90.30838209999999 3.91 69.92158219999999 4.463 84.3338936 3.397 65.30779519999999 2.63 88.11071909999998 11.184 139.95781789999992 4.229 97.01246759999997 3.18 43.662998999999736 8.754)
Error minima by case: (1.0552 1 5.468 2 10.0581 1 0.0432 2 31.6601 2 36.7358 2 1.0 1 0.0 0 2.0 1 5.0537 1 7.0 1 0.0318 1 3.0 1 0.0 1 40.0 1 0.0 0 0.0 0 13.0 1 0.0 0 6.0 1 0.0 0 0.6137 2 40.3972 2 2.0 1 0.0757 1)
Average genome size in population (length): 128.357
Average program size in population (points): 129.357
Average percent parens in population: 0.008
Minimum age in population: 132.0981349755539
Maximum age in population: 136.6514232836296
Average age in population: 134.5791098948701
Median age in population: 134.6065386160108
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.232
Error (vector) diversity:			 0.254
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 228966864
--- Timings ---
Current time: 1529615239013 milliseconds
Total Time:         413.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.1 seconds, 33.4%
Fitness Testing:    214.8 seconds, 52.0%
Report:              60.2 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction tagged_777} {:instruction float_inc} {:instruction float_shove} {:instruction float_sub} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_min} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_215} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction -41} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction float_shove} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_shove float_shove float_inc tagged_777 float_inc float_shove float_sub float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_shove integer_mult float_shove float_inc float_inc float_shove float_inc integer_min float_yank float_inc float_inc float_yank float_inc float_yank float_inc float_inc float_shove tagged_215 float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_rot float_inc float_inc float_inc float_inc float_stackdepth float_shove integer_dup_times float_inc float_shove float_inc float_inc float_shove float_inc float_inc integer_yankdup float_inc float_shove float_inc integer_sub float_inc float_inc tagged_765 float_inc integer_mod float_rot float_inc float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_yank float_inc float_yank float_inc float_inc float_shove float_inc float_yank float_rot in1 float_inc in1 -41 integer_max float_inc float_shove float_inc float_shove float_shove integer_mod integer_mod float_shove in1 float_shove float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2395.371572200002
Median total errors in population: 811.0479
Error averages by case: (94.97584669999996 5.006 58.50057589999949 3.754 77.37033750000003 3.324 105.56617339999993 11.482 93.90284099999865 12.029 94.33665880000012 12.041 100.72418559999997 3.273 92.97536349999997 2.916 84.57497939999999 2.93 83.58177960000002 3.321 105.6675983 3.266 96.53226530000005 4.514 62.40292210000137 10.934 88.8159828 3.198 105.21583269999992 4.022 79.56584370000002 2.614 65.47123760000001 1.857 102.24087149999998 3.841 82.0365172 4.792 96.22201770000001 3.314 77.70524960000002 2.612 102.40168839999997 11.314 151.6426911 4.235 106.87061709999992 3.254 53.43149569999968 8.797)
Error minima by case: (6.9486 1 5.3363 2 16.0 1 0.0432 2 31.433 2 36.6003 2 1.0 1 0.0 0 2.0 1 20.0 1 1.0 1 0.2948 1 3.1594 1 0.0 0 40.0 1 0.0 0 0.0 0 5.2843 1 0.0 0 9.0 1 0.0 0 0.8608 7 92.0 2 1.0 1 0.0757 1)
Average genome size in population (length): 128.507
Average program size in population (points): 129.507
Average percent parens in population: 0.008
Minimum age in population: 133.3699028026627
Maximum age in population: 137.709695860089
Average age in population: 135.9504793363867
Median age in population: 135.9760714270049
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.232
Error (vector) diversity:			 0.257
Behavioral diversity:				 0.258
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 232179714
--- Timings ---
Current time: 1529615244124 milliseconds
Total Time:         418.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       139.5 seconds, 33.4%
Fitness Testing:    217.6 seconds, 52.0%
Report:              60.9 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_min} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_min} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction tagged_299} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction tagged_68} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_mult float_inc float_inc float_shove float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_shove float_inc integer_min float_yank float_inc float_inc float_shove tagged_268 float_inc float_dup_items float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_inc float_inc integer_pop float_inc float_inc float_mult float_inc float_inc float_inc float_shove float_inc float_inc float_div float_inc float_inc float_inc float_yank float_inc float_inc float_rot float_inc float_inc float_inc float_inc float_dec float_inc float_inc float_inc integer_mult float_inc float_inc integer_add float_inc float_min float_shove float_inc float_inc float_yank float_inc float_yank float_inc float_inc float_yank integer_stackdepth float_inc float_shove float_inc float_inc float_yank float_inc integer_yankdup float_shove float_inc float_yank float_swap in1 float_inc in1 tagged_299 integer_max float_inc float_shove float_inc tagged_68 integer_mod integer_stackdepth in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2564.482617900003
Median total errors in population: 811.0479
Error averages by case: (103.34052640000002 5.126 65.96554469999957 3.717 85.19182110000001 3.361 112.44818579999993 11.47 97.48877599999885 12.085 99.90655170000022 12.06 107.6437381999999 3.497 98.96936230000004 3.172 90.58248039999997 3.191 90.3865707 3.364 112.68981140000001 3.456 105.45921040000006 4.675 68.44102070000133 11.028 94.9909251 3.45 111.71080019999991 4.137 86.51497140000001 2.853 72.95087680000002 1.878 108.67510389999997 4.067 88.06460120000003 4.909 102.90596570000004 3.558 84.32947760000002 2.836 107.53144349999997 11.389 158.13221439999998 4.259 113.7528467999999 3.435 60.65779149999949 8.779)
Error minima by case: (12.0 1 5.468 2 1.8825 1 0.0432 1 8.6007 9 14.0617 2 1.0 1 0.0 0 0.6211 1 20.0 1 2.0 1 0.1234 1 1.221 1 0.0 0 40.0 1 0.0 0 0.0 0 0.2843 1 0.2575 1 1.5781 1 0.0 0 1.5488 8 63.2607 2 1.0 1 0.0 0)
Average genome size in population (length): 128.547
Average program size in population (points): 129.547
Average percent parens in population: 0.008
Minimum age in population: 134.3699028026627
Maximum age in population: 139.2318438485783
Average age in population: 137.2484406047356
Median age in population: 137.2797980224683
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.242
Error (vector) diversity:			 0.264
Behavioral diversity:				 0.267
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 235393639
--- Timings ---
Current time: 1529615249130 milliseconds
Total Time:         423.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.0 seconds, 33.3%
Fitness Testing:    220.4 seconds, 52.1%
Report:              61.7 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 39570.53649999998
Test mean error for best: 19.78527
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_max} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_swap} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction tagged_299} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction tagged_68} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_dup float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_frominteger float_inc float_mult float_inc float_inc float_shove float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_shove integer_max float_inc float_shove float_inc float_inc float_mod integer_swap float_inc float_inc print_integer float_shove float_inc float_shove float_inc float_inc float_yank float_inc float_shove float_inc float_shove float_inc float_inc tagged_765 float_inc integer_mod float_inc float_shove float_inc float_inc float_inc float_inc float_dup_times integer_rot float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_max float_inc integer_dup_times float_inc float_inc integer_dec float_inc print_integer float_yankdup float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc integer_yankdup float_shove float_inc float_yank float_swap in1 float_inc in1 tagged_299 integer_max float_inc float_shove float_inc tagged_68 integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_inc integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2211.1577113000026
Median total errors in population: 811.0479
Error averages by case: (89.53870380000001 5.123 52.60211529999956 3.62 68.64091070000002 3.232 98.51855049999996 11.466 84.80673529999886 12.086 86.48129740000009 12.041 91.9491011 3.289 85.46486189999996 2.974 76.63647579999996 2.974 74.90725459999999 3.221 97.06358969999998 3.315 89.91876610000001 4.646 54.87350810000125 10.961 82.9859384 3.294 96.83636829999992 3.938 73.49522359999999 2.649 58.10122620000001 1.915 96.51424189999996 3.887 74.15922930000004 4.846 90.4538717 3.409 71.51946620000001 2.645 93.29888379999998 11.272 143.5855982 4.127 98.26693109999995 3.227 47.58886229999956 8.793)
Error minima by case: (10.0 1 1.532 2 8.9419 1 0.0432 2 31.6601 2 28.8789 2 0.2156 1 0.0728 1 2.8873 1 12.0537 1 1.0 1 0.4577 1 2.9006 1 1.0 1 39.0 1 0.0 0 0.0 0 3.2843 1 0.0 0 6.0 1 0.0 0 0.7049 8 40.3972 2 0.0 0 0.0757 1)
Average genome size in population (length): 128.219
Average program size in population (points): 129.219
Average percent parens in population: 0.008
Minimum age in population: 135.3699028026627
Maximum age in population: 140.700336648041
Average age in population: 138.5749809261561
Median age in population: 138.6157243202236
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.955
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.955
Total error diversity:				 0.236
Error (vector) diversity:			 0.252
Behavioral diversity:				 0.253
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 238599364
--- Timings ---
Current time: 1529615254061 milliseconds
Total Time:         428.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.4 seconds, 33.3%
Fitness Testing:    223.2 seconds, 52.1%
Report:              62.5 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction tagged_777} {:instruction float_inc} {:instruction float_shove} {:instruction float_sub} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_208} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_min} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min float_inc float_shove float_min integer_swap float_inc float_inc integer_yank float_inc float_inc float_shove float_inc float_inc float_shove float_shove float_inc tagged_777 float_inc float_shove float_sub float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc tag_integer_208 float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_shove integer_min float_inc tagged_765 float_inc integer_mod float_inc float_shove float_inc float_inc float_inc float_inc print_integer integer_swap float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc integer_sub float_inc float_yank float_inc float_inc float_frominteger float_mod float_inc float_inc integer_sub integer_sub float_inc float_inc float_min float_inc float_yank float_inc float_max float_inc float_inc float_shove float_inc float_inc float_yank float_yank float_inc float_inc integer_sub float_rot in1 float_inc in1 integer_mod integer_max float_inc float_dup_times float_inc in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2356.897286200002
Median total errors in population: 811.0479
Error averages by case: (94.78202519999999 4.936 57.86758989999951 3.607 75.50849770000002 3.293 102.87387139999994 11.518 88.49858909999891 12.069 90.85591909999997 12.037 99.06267159999996 3.349 92.40934460000004 2.945 84.25759680000002 2.952 81.71732909999999 3.284 104.11840950000008 3.319 96.64058760000005 4.494 60.330017500001354 10.937 88.16018000000003 3.275 103.52051339999991 4.005 78.3786724 2.586 62.58036750000002 1.832 102.1560756 3.871 80.1288052 4.803 95.84110259999999 3.384 76.97615470000001 2.623 99.25650339999994 11.277 149.9014517 4.189 105.76405949999996 3.164 52.745951099999665 8.816)
Error minima by case: (13.0 1 0.0 0 8.9419 1 0.0432 2 0.0 0 0.0 0 0.0 0 0.0713 1 6.0 1 17.8925 1 2.0 1 0.0 0 0.0 0 0.0 0 40.0 1 0.0 0 0.0 0 10.2843 1 0.4379 1 9.0 1 0.0 0 2.6137 2 50.7945 2 2.0 1 0.0757 1)
Average genome size in population (length): 128.051
Average program size in population (points): 129.051
Average percent parens in population: 0.008
Minimum age in population: 136.3699028026627
Maximum age in population: 142.0045778596306
Average age in population: 139.8845705377986
Median age in population: 139.9356764798244
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.215
Error (vector) diversity:			 0.237
Behavioral diversity:				 0.24
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 241800914
--- Timings ---
Current time: 1529615259126 milliseconds
Total Time:         433.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.8 seconds, 33.2%
Fitness Testing:    226.1 seconds, 52.2%
Report:              63.2 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction tag_integer_240} {:instruction float_inc} {:instruction tagged_777} {:instruction float_inc} {:instruction float_shove} {:instruction float_sub} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_min} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_dup} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction integer_div} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_shove float_inc integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_shove tag_integer_240 float_inc tagged_777 float_inc float_shove float_sub float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_min float_shove integer_mult float_shove float_inc float_inc float_shove float_inc integer_min float_yank float_inc float_inc float_yank float_inc float_yank float_inc float_inc float_inc float_yank float_inc float_inc float_add float_inc float_shove float_inc float_dup_items float_inc float_inc float_min float_shove float_inc float_inc float_yank integer_flush float_inc integer_sub float_inc float_min float_inc float_yank integer_min float_inc float_yank float_inc float_inc float_inc float_mult float_inc float_min float_inc float_yank float_yankdup float_inc float_shove float_inc float_inc integer_sub float_inc integer_max float_inc float_inc print_integer float_inc float_inc float_yank float_inc float_min float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_yank float_rot in1 float_inc in1 integer_dup integer_max float_inc float_shove float_inc float_shove float_shove integer_mod float_shove in1 integer_dec integer_div in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2516.3528650000026
Median total errors in population: 811.0479
Error averages by case: (99.70659580000006 5.067 60.37759619999944 3.589 81.34858690000003 3.145 107.60372519999994 11.587 92.96439859999866 12.092 94.85554470000014 12.083 108.25691909999992 3.352 99.87719980000001 3.02 91.14994300000004 2.996 88.0381938 3.141 113.25249209999997 3.322 101.52684760000002 4.601 63.18357970000136 11.044 96.02616390000001 3.279 108.89444349999992 3.989 86.55464150000006 2.665 70.13917110000001 1.734 108.36411769999998 3.875 88.54406610000004 4.772 102.43813010000005 3.404 85.02356950000002 2.705 109.42523229999999 11.293 155.7227782999999 4.096 114.82727769999988 3.285 55.237650799999514 8.878)
Error minima by case: (3.87 1 5.468 2 15.0 1 0.0432 2 14.8129 9 25.4064 3 0.0 0 1.0 1 2.0 1 19.0 1 4.0 1 0.0 0 1.221 2 2.0 1 39.0 1 0.0 0 0.0 0 0.9641 1 0.0 0 0.13 1 0.0 0 0.4359 1 91.0 2 0.7859 1 0.0757 1)
Average genome size in population (length): 127.534
Average program size in population (points): 128.534
Average percent parens in population: 0.008
Minimum age in population: 138.3571640592394
Maximum age in population: 143.2080827484545
Average age in population: 141.2038969597445
Median age in population: 141.2562511245293
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.219
Error (vector) diversity:			 0.238
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 244989539
--- Timings ---
Current time: 1529615264090 milliseconds
Total Time:         438.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.3 seconds, 33.2%
Fitness Testing:    228.8 seconds, 52.2%
Report:              64.0 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_min} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tag_integer_208} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_min} {:instruction -69} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_div} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_sub} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mod} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_shove float_min float_inc in2 float_inc float_inc float_shove float_inc integer_sub float_inc float_inc float_inc float_shove float_inc float_swap float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc tag_integer_208 float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_shove integer_min -69 tagged_765 float_inc integer_mod float_div float_shove float_inc float_inc float_inc float_inc print_integer integer_swap float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_dup_times float_inc integer_sub float_dup_items integer_dec float_inc float_inc float_frominteger float_mod float_inc float_inc integer_sub integer_sub float_inc float_inc float_min float_inc integer_min float_inc float_max float_inc float_inc float_shove float_inc float_inc float_yank float_yank float_inc float_inc integer_sub float_rot in1 float_inc in1 integer_mod integer_max float_inc float_dup_times float_inc in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2550.3957842000027
Median total errors in population: 811.0479
Error averages by case: (101.20063230000007 5.096 65.13786909999942 3.694 81.48864200000003 3.262 111.91776189999996 11.525 96.42496859999858 12.062 98.28943400000017 12.074 108.87518269999993 3.468 100.13642140000005 3.085 92.17304920000001 3.072 86.63981759999999 3.25 114.04084199999998 3.465 102.79437550000002 4.641 67.3920566000015 11.02 97.55018640000007 3.463 107.92538159999994 4.034 87.85870090000007 2.807 68.53872709999999 1.757 110.72203669999996 4.016 87.54694690000004 4.919 104.8081825 3.513 85.97672710000002 2.818 108.3465294 11.34 154.12210499999995 4.176 115.46914459999991 3.452 60.165063099999415 8.846)
Error minima by case: (9.7737 1 1.532 2 8.9419 1 1.0432 2 18.7858 2 11.2142 3 0.0 0 0.9513 1 0.0 0 19.0 1 0.0 0 0.0 0 3.16 2 0.0 0 39.0 1 0.0 0 0.0 0 11.0 1 0.0 0 9.0 1 0.0 0 0.6137 2 54.6028 2 0.0 0 0.0757 1)
Average genome size in population (length): 127.916
Average program size in population (points): 128.916
Average percent parens in population: 0.008
Minimum age in population: 140.3981914284374
Maximum age in population: 144.6569958648322
Average age in population: 142.5030476847549
Median age in population: 142.5137025800106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.237
Error (vector) diversity:			 0.262
Behavioral diversity:				 0.265
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 248187564
--- Timings ---
Current time: 1529615269020 milliseconds
Total Time:         443.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.7 seconds, 33.1%
Fitness Testing:    231.6 seconds, 52.3%
Report:              64.7 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_shove} {:instruction integer_dup} {:instruction float_shove} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_268} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_dec} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction in2} {:instruction float_yank} {:instruction float_max} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_sub} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_shove float_shove integer_dup float_shove integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc integer_mod integer_swap float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_shove float_inc integer_min float_inc float_shove float_inc float_inc tagged_268 float_inc integer_dup float_inc float_yank float_inc float_inc float_shove integer_dec float_inc float_shove float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_shove integer_max float_inc tagged_765 float_inc integer_mod float_inc float_shove float_inc float_inc float_inc float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc float_frominteger float_min float_inc float_inc integer_sub integer_sub float_inc integer_mult float_inc float_inc float_rot in1 float_inc in1 in2 float_yank float_max in1 float_inc in1 integer_mod integer_sub float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2424.2537787000024
Median total errors in population: 810.0479
Error averages by case: (96.26561840000001 5.039 59.45249529999944 3.642 76.6417376 3.222 105.68227859999995 11.477 91.06667779999897 12.096 93.25962049999984 12.099 104.86063379999997 3.434 93.93937750000002 3.13 86.19476389999997 3.081 83.42103419999998 3.191 109.01524499999998 3.412 97.4794452000001 4.58 61.626331400001376 11.071 92.23590079999998 3.485 104.43462189999991 4.014 82.38117400000002 2.755 64.20407950000002 1.749 105.34947269999996 4.021 83.11952130000002 4.839 99.38938610000002 3.511 80.39364079999999 2.831 104.03808580000002 11.302 151.62925299999995 4.118 109.73014259999997 3.255 54.30424099999952 8.785)
Error minima by case: (8.4756 1 5.468 2 9.0581 1 1.0432 2 29.3399 2 23.8789 3 2.8972 1 0.0 0 1.0 1 5.9463 1 5.0 1 0.1234 1 3.0 1 0.0 0 20.9977 2 0.0 0 0.0 0 4.2843 2 0.181 1 6.0 1 0.0 0 0.1403 7 39.3972 2 0.0 0 0.2138 1)
Average genome size in population (length): 126.977
Average program size in population (points): 127.977
Average percent parens in population: 0.008
Minimum age in population: 141.3981914284374
Maximum age in population: 146.1564212813055
Average age in population: 143.8236314486138
Median age in population: 143.8469751284473
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.238
Error (vector) diversity:			 0.254
Behavioral diversity:				 0.257
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 251362239
--- Timings ---
Current time: 1529615273957 milliseconds
Total Time:         448.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.1 seconds, 33.0%
Fitness Testing:    234.4 seconds, 52.3%
Report:              65.5 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction -81} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction 39} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_flush} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_min} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_sub} {:instruction integer_sub} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_swap} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_sub} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_shove float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_shove float_inc -81 float_inc float_min float_inc float_inc float_inc float_shove float_shove float_inc integer_add float_inc in2 float_inc float_inc 39 float_inc float_shove float_inc float_inc integer_flush float_inc float_inc integer_max float_inc float_inc float_yank float_inc float_yank float_inc integer_flush float_shove float_inc float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_shove integer_min float_inc tagged_765 float_inc integer_mod float_inc float_shove float_inc float_inc float_inc float_inc print_integer integer_yankdup float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc integer_sub float_inc float_yank float_inc float_inc float_frominteger float_mult float_inc integer_mult integer_sub integer_sub integer_min float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_swap float_yank float_rot in1 float_inc in1 integer_mod integer_sub float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2299.378102500002
Median total errors in population: 811.0479
Error averages by case: (91.63397830000007 4.827 54.2602590999995 3.632 74.5318097 3.211 103.41150879999996 11.532 89.5294964999989 12.073 91.45845869999984 12.037 97.32554859999996 3.17 87.89705790000002 2.952 79.24043119999997 2.963 80.56725059999998 3.16 102.63745259999999 3.138 94.1288669 4.37 59.83608200000157 10.991 83.5091558 3.231 102.88565569999986 3.951 74.3051311 2.591 61.38437220000002 1.747 96.65050100000002 3.851 78.89279930000004 4.619 90.77463180000001 3.348 72.1895185 2.61 98.38294569999996 11.242 148.89415949999992 4.09 104.49428569999992 3.139 49.252745299999795 8.829)
Error minima by case: (6.0514 1 1.532 2 8.9419 1 0.0432 2 25.2029 3 4.7971 2 1.0 1 0.2015 1 0.0 0 13.0537 1 2.0 1 0.4285 1 3.1599 2 1.0 1 40.0 1 0.0 0 0.0 0 5.2843 1 0.0 0 4.4219 1 0.0 0 2.9857 9 39.3972 2 0.0 0 0.0 0)
Average genome size in population (length): 126.995
Average program size in population (points): 127.995
Average percent parens in population: 0.008
Minimum age in population: 142.9436079822558
Maximum age in population: 147.3786833063079
Average age in population: 145.178096999898
Median age in population: 145.2209771126697
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.234
Error (vector) diversity:			 0.253
Behavioral diversity:				 0.256
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 254537914
--- Timings ---
Current time: 1529615278877 milliseconds
Total Time:         453.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       149.5 seconds, 33.0%
Fitness Testing:    237.2 seconds, 52.4%
Report:              66.2 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_integer} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_mult} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_min} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yank} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_sub} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove print_integer float_inc float_shove float_inc float_inc integer_min float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_yank float_inc float_dup_items float_inc float_max float_inc float_inc float_shove float_mult float_inc float_shove float_inc integer_swap float_mod float_inc float_shove float_min float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_yank float_inc integer_min float_shove float_inc float_inc float_max float_inc integer_sub float_inc float_dup_times float_inc float_yank integer_sub float_inc integer_dup_times float_inc float_inc float_yank float_inc float_inc float_dup_times float_inc float_yank float_inc float_max float_inc float_inc float_shove float_inc float_inc float_inc integer_inc float_inc float_swap float_yank float_rot in1 float_shove integer_max float_inc float_shove in1 integer_mod integer_max float_inc integer_inc float_inc float_shove integer_mod float_shove in1 integer_sub float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2122.623808100002
Median total errors in population: 811.0479
Error averages by case: (83.19121580000001 5.053 47.98814799999955 3.592 63.663511199999974 3.139 93.65177039999995 11.53 77.31396349999972 12.045 80.58364869999951 12.056 93.56871099999996 3.352 84.1109702 2.906 75.71202729999999 2.926 68.86583799999998 3.119 98.6111703 3.298 84.85890890000002 4.535 48.85990300000104 10.987 80.84281520000003 3.272 90.62464099999991 3.891 71.07988929999998 2.623 50.60987239999999 1.673 94.15420470000004 3.866 70.81129650000003 4.755 88.23540780000002 3.388 69.27397869999999 2.616 93.65650679999995 11.217 138.11001309999992 4.036 99.52482239999992 3.206 42.80257389999977 8.837)
Error minima by case: (2.0 1 5.0 2 9.0581 1 1.0432 2 19.6601 2 25.1211 3 0.0 0 0.0177 1 0.6211 1 13.0537 1 1.0 1 0.2613 1 3.16 1 0.0 0 25.2423 2 0.0 0 0.0 0 1.2843 1 0.0 0 0.5741 1 0.0 0 0.4512 1 39.3972 2 2.0 1 0.2138 1)
Average genome size in population (length): 127.184
Average program size in population (points): 128.184
Average percent parens in population: 0.008
Minimum age in population: 144.2813088232326
Maximum age in population: 148.8958588557243
Average age in population: 146.5592334010067
Median age in population: 146.6059202613088
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.943
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.943
Total error diversity:				 0.224
Error (vector) diversity:			 0.243
Behavioral diversity:				 0.245
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 257717889
--- Timings ---
Current time: 1529615283855 milliseconds
Total Time:         458.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.9 seconds, 32.9%
Fitness Testing:    240.0 seconds, 52.4%
Report:              66.9 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 39974.35029999999
Test mean error for best: 19.98718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_div} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_inc} {:instruction float_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dup_times} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc integer_sub float_shove float_inc float_min integer_swap float_inc float_inc float_sub float_inc float_inc integer_mod float_min integer_swap float_inc float_inc float_shove float_stackdepth float_dec float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_min float_inc float_inc float_div float_inc float_inc print_integer float_inc float_shove float_inc float_shove float_inc float_inc float_shove integer_inc float_inc float_inc float_shove float_inc float_shove float_max float_inc float_inc float_shove float_inc integer_dec float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_mult float_inc float_inc float_inc float_inc integer_yankdup float_frominteger float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc integer_add integer_inc float_inc float_rot float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_inc float_shove float_inc float_inc float_sub float_inc float_min float_yank float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dup_times float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2531.3011383000025
Median total errors in population: 811.0479
Error averages by case: (101.1066192 4.843 63.98375839999945 3.557 82.2299916 3.184 110.88133719999993 11.528 94.58998569999925 12.085 97.73242139999968 12.064 109.08999249999992 3.176 98.33854990000003 3.039 89.2236738 3.021 87.1578729 3.189 113.79871220000001 3.158 103.3545928 4.359 66.18269960000157 11.052 95.0418271 3.333 108.33621579999999 3.99 85.25858890000005 2.673 70.60323080000002 1.542 106.76511179999999 3.938 88.54605919999997 4.646 102.49096469999998 3.442 83.75261620000002 2.667 111.58871410000003 11.307 154.90843199999995 4.112 115.47342239999993 3.095 59.041748099999765 8.824)
Error minima by case: (7.9486 1 0.0 0 16.0 1 0.0432 2 0.0 0 0.0 0 1.0 1 0.0 0 1.0 1 20.0 1 1.0 1 0.1232 1 0.0 0 2.0 1 40.0 1 0.0 0 0.0 0 1.0195 1 0.0 0 0.1181 1 0.0 0 2.1496 7 92.0 2 0.0 0 0.0752 1)
Average genome size in population (length): 127.318
Average program size in population (points): 128.318
Average percent parens in population: 0.008
Minimum age in population: 145.3309357136811
Maximum age in population: 150.0634984748876
Average age in population: 147.8670523257835
Median age in population: 147.9174693403228
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.222
Error (vector) diversity:			 0.242
Behavioral diversity:				 0.246
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 260901114
--- Timings ---
Current time: 1529615288876 milliseconds
Total Time:         463.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.4 seconds, 32.9%
Fitness Testing:    242.8 seconds, 52.5%
Report:              67.7 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction print_integer} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_mult} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction integer_min} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yank} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_yank} {:instruction float_rot} {:instruction in1} {:instruction float_shove} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_sub} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove print_integer float_inc float_shove float_inc float_inc integer_min float_inc float_shove float_inc float_shove float_inc float_inc float_shove float_inc float_shove float_inc float_inc float_yank float_inc float_dup_items float_inc float_max float_inc float_inc float_shove float_mult float_inc float_shove float_inc integer_swap float_mod float_inc float_shove float_min float_inc float_yank float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_yank float_inc integer_min float_shove float_inc float_inc float_max float_inc integer_sub float_inc float_dup_times float_inc float_yank integer_sub float_inc integer_dup_times float_inc float_inc float_yank float_inc float_inc float_dup_times float_inc float_yank float_inc float_max float_inc float_inc float_shove float_inc float_inc float_inc integer_inc float_inc float_swap float_yank float_rot in1 float_shove integer_max float_inc float_shove in1 integer_mod integer_max float_inc integer_inc float_inc float_shove integer_mod float_shove in1 integer_sub float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2293.722972800002
Median total errors in population: 811.0479
Error averages by case: (91.03836149999998 5.118 50.510375899999694 3.732 72.59412669999999 3.279 97.70294629999992 11.547 83.11369949999934 12.008 83.96388709999964 12.01 100.1960733 3.399 88.45713380000002 2.999 81.0502764 3.002 79.2790082 3.307 104.94563430000004 3.366 91.68443010000003 4.658 52.88614190000087 10.849 89.24165340000005 3.34 101.87537989999991 3.946 78.98845080000004 2.729 61.642259599999996 1.919 100.52553639999998 3.92 79.9037651 4.81 95.32576480000002 3.455 75.77933930000003 2.728 100.01623579999999 11.189 147.72006979999998 4.189 106.24765059999994 3.3 45.351772299999915 8.884)
Error minima by case: (5.6726 1 1.532 2 3.1937 2 0.0432 2 9.9119 3 14.8789 2 2.0 1 0.0728 1 0.3598 1 12.0537 1 5.0 1 0.1209 1 3.1594 1 1.0 1 40.0 1 0.0 0 0.0 0 14.0 1 0.0 0 7.0 1 0.0 0 0.9098 2 39.3972 2 0.0 0 0.0752 1)
Average genome size in population (length): 127.327
Average program size in population (points): 128.327
Average percent parens in population: 0.008
Minimum age in population: 146.3309357136811
Maximum age in population: 151.2564967371477
Average age in population: 149.1722967825778
Median age in population: 149.237444486247
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.957
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.957
Total error diversity:				 0.249
Error (vector) diversity:			 0.267
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 264084464
--- Timings ---
Current time: 1529615293801 milliseconds
Total Time:         467.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.8 seconds, 32.9%
Fitness Testing:    245.6 seconds, 52.5%
Report:              68.4 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 39325.350299999984
Test mean error for best: 19.66268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 47.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -38.2516975843
Correct output: 44.9272196671  | Program output: 84.9272196671 
Correct output: 66.6210657667  | Program output: 88.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -29.6354294126
Correct output: 1.2524717345   | Program output: 51.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 117.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 94.2843412425 
Correct output: 33.2581162527  | Program output: 23.2581162527 
Correct output: 123.421863126  | Program output: 102.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: -18.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -6.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_mod} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_yank} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_min} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction integer_swap} {:instruction float_inc} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction float_sin} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_shove} {:instruction integer_sub} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_68} {:instruction integer_mod} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_shove float_inc integer_mod float_inc float_inc integer_sub integer_dup_times float_inc float_inc float_shove float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_yank float_shove float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc integer_mod integer_sub float_inc integer_yank float_add float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc float_inc float_inc integer_sub float_inc float_min float_inc float_yank float_inc float_inc integer_dup_times float_inc float_inc float_min float_inc float_inc float_min float_inc float_yank float_inc print_integer float_inc float_inc float_shove float_inc integer_add float_inc float_min float_shove float_inc float_inc float_yank float_inc float_inc integer_sub float_inc integer_swap float_inc float_rot in1 float_inc in1 integer_mod float_sin float_inc float_shove float_dec float_shove integer_sub float_shove in1 integer_dec float_shove in2 integer_max float_inc float_inc tagged_68 integer_mod in1 integer_dec float_shove in2 integer_max float_inc float_shove float_inc float_shove integer_rot float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [25.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 41.0 2 40.0 1 22.0 2 22.0 2 50.0 1 50.0 1 5.16 11 12.0 2 42.0 3 2.0 1 0.0 0 28.0 3 10.0 1 21.0 2 1.0 1 31.0 11 94.0 3 55.0 1 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 150
Size: 151
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2421.8819128000027
Median total errors in population: 813.0479
Error averages by case: (95.7306001 5.113 56.078629999999585 3.724 78.58365940000003 3.339 104.62314799999996 11.425 91.26545969999862 12.09 92.28967810000023 12.087 105.78438709999988 3.623 92.13736730000011 3.166 83.98188530000002 3.132 86.84592740000002 3.322 110.80572329999995 3.604 98.12689820000001 4.691 61.033596100001425 11.001 90.09462360000006 3.442 108.72144119999986 4.068 81.06425900000005 2.846 66.41268230000001 1.81 103.03500229999996 4.038 82.40795110000003 4.901 97.23577800000004 3.554 78.55749260000002 2.865 103.6650304 11.266 154.88868189999988 4.246 111.6140499999999 3.582 51.231960399999394 8.731)
Error minima by case: (0.9448 1 1.532 2 8.9419 1 0.0432 2 31.433 2 28.8789 3 1.0 1 0.3049 1 0.0 0 19.9463 1 6.6354 1 0.1234 1 3.0 1 0.0 0 10.0023 1 0.0 0 0.0 0 3.2843 1 0.0 0 6.0 1 0.0 0 0.44 2 54.6028 2 2.2141 1 0.0757 1)
Average genome size in population (length): 127.735
Average program size in population (points): 128.735
Average percent parens in population: 0.008
Minimum age in population: 147.61043539408
Maximum age in population: 152.6482800396601
Average age in population: 150.5779903603514
Median age in population: 150.6333024305156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.961
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.961
Total error diversity:				 0.258
Error (vector) diversity:			 0.279
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 267278014
--- Timings ---
Current time: 1529615299101 milliseconds
Total Time:         473.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.3 seconds, 32.8%
Fitness Testing:    248.4 seconds, 52.5%
Report:              69.2 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 39845.35029999999
Test mean error for best: 19.92268
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 45.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -40.2516975843
Correct output: 44.9272196671  | Program output: 82.9272196671 
Correct output: 66.6210657667  | Program output: 86.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -31.6354294126
Correct output: 1.2524717345   | Program output: 49.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 115.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 92.2843412425 
Correct output: 33.2581162527  | Program output: 21.2581162527 
Correct output: 123.421863126  | Program output: 100.421863126 
Correct output: 106.1474875213 | Program output: 105.1474875213
Correct output: 12.1495725478  | Program output: -20.8504274522
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -8.2140896321 
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_inc} {:instruction float_shove} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_integer} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_860} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_swap} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction float_dup_items} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction integer_min} {:instruction float_div} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction -61} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_stackdepth} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction float_min} {:instruction integer_mod} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_shove} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (in1 float_inc float_shove float_min integer_stackdepth float_inc float_inc float_shove float_inc float_inc float_shove integer_sub float_inc float_inc float_inc print_integer float_inc float_inc float_shove float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_yank float_shove float_inc float_shove float_inc float_inc tagged_860 float_inc float_shove float_inc float_inc integer_swap float_mod float_inc float_shove float_dup_items float_inc float_yank float_shove integer_min float_div float_yank integer_dup_times float_inc integer_yank float_inc float_inc float_inc float_inc float_inc float_inc float_shove float_inc float_inc float_inc float_inc float_inc float_inc float_mult float_inc float_inc float_inc float_inc float_shove -61 float_swap float_inc float_inc float_yank float_inc float_inc float_shove float_inc float_inc integer_add integer_inc float_inc float_min float_shove float_inc integer_sub float_inc float_stackdepth float_yank float_inc integer_inc float_shove float_inc float_inc float_yank float_inc float_inc integer_dup_times float_inc float_inc float_yank float_shove float_inc float_min integer_mod float_rot in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_shove float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [27.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 39.0 2 38.0 2 20.0 1 22.0 2 48.0 2 48.0 2 5.16 11 14.0 2 42.0 3 0.0 0 0.0 0 30.0 2 12.0 2 23.0 2 1.0 1 33.0 11 94.0 3 53.0 2 0.2138 9]
Total: 802.0479
Mean: 16.040958
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2506.216498500002
Median total errors in population: 811.0479
Error averages by case: (100.19621990000006 4.983 63.235509899999464 3.742 84.4426755 3.349 109.56302799999993 11.49 94.83575609999863 12.075 97.15301980000021 12.089 106.67872079999992 3.435 95.08354440000002 3.066 86.49003009999997 3.034 90.63159049999997 3.33 111.9366996 3.426 102.96187270000007 4.555 65.99238080000164 11.001 90.33425000000001 3.336 112.96325019999986 4.08 81.09759160000002 2.72 72.21311730000001 1.915 103.9840129 3.931 87.61537960000004 4.828 97.86916930000002 3.413 79.48758390000002 2.725 107.24432429999999 11.326 158.20782499999987 4.264 113.4128933999999 3.414 58.25005289999932 8.809)
Error minima by case: (10.0 1 4.9361 2 10.0581 1 0.0432 2 31.6601 2 36.6358 3 1.0 1 1.0 1 0.6211 1 12.0537 1 0.0 0 0.0 0 1.221 2 1.0 1 39.0 1 0.0 0 0.0 0 1.2843 1 0.0 0 4.5781 1 0.0 0 1.8504 2 40.3972 2 1.0 1 0.0757 1)
Average genome size in population (length): 127.707
Average program size in population (points): 128.707
Average percent parens in population: 0.008
Minimum age in population: 149.0854562017197
Maximum age in population: 153.9510381826002
Average age in population: 151.907697799442
Median age in population: 151.9162476757681
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.232
Error (vector) diversity:			 0.246
Behavioral diversity:				 0.248
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 270470939
--- Timings ---
Current time: 1529615303988 milliseconds
Total Time:         478.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.7 seconds, 32.8%
Fitness Testing:    251.2 seconds, 52.5%
Report:              70.1 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 35014.350299999984
Test mean error for best: 17.50718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 88.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -63.2516975843
Correct output: 44.9272196671  | Program output: 60.9272196671 
Correct output: 66.6210657667  | Program output: 82.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -63.6354294126
Correct output: 1.2524717345   | Program output: 17.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 145.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 157.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 138.2843412425
Correct output: 33.2581162527  | Program output: 49.2581162527 
Correct output: 123.421863126  | Program output: 139.421863126 
Correct output: 106.1474875213 | Program output: 122.1474875213
Correct output: 12.1495725478  | Program output: 28.1495725478 
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -45.2140896321
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_swap} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_min} {:instruction float_inc} {:instruction integer_yank} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_dup_items float_swap float_shove float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc integer_mod integer_min float_inc integer_yank float_add float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc float_inc float_inc float_inc in1 float_inc float_inc float_inc float_shove float_inc integer_sub float_inc float_add float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [16.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 16.0 2 16.0 2 16.0 2 22.0 2 16.0 2 16.0 1 5.16 11 16.0 2 42.0 3 16.0 2 0.0 0 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 94.0 3 16.0 2 0.2138 9]
Total: 634.0479
Mean: 12.680958
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2733.8995179000035
Median total errors in population: 811.0479
Error averages by case: (108.40135420000007 5.063 69.04195670000003 3.706 89.28902940000003 3.297 116.25812379999996 11.479 102.40902199999844 12.136 104.20663070000032 12.128 116.43536819999996 3.328 108.332483 3.049 100.03290009999998 3.023 97.003309 3.291 121.21523319999999 3.345 111.4224627 4.636 73.05866990000172 11.1 104.10061860000002 3.32 117.6611625999999 4.086 94.80279210000002 2.693 75.70508490000002 1.789 117.58266330000001 3.926 98.00197510000005 4.825 111.6622588 3.447 93.2718095 2.699 119.01681730000001 11.339 164.09338839999992 4.211 122.74219569999997 3.273 64.18520869999952 8.778)
Error minima by case: (0.743 1 4.0 1 9.0581 1 2.0432 2 30.0 1 36.0 2 2.914 1 0.9272 1 0.0 0 13.0537 1 3.2977 1 0.3551 1 1.221 1 1.0 1 40.0 1 0.0 0 0.0 0 0.2843 1 0.0 0 10.0 1 0.0 0 0.1403 2 39.3972 2 0.0 0 0.0 0)
Average genome size in population (length): 127.273
Average program size in population (points): 128.273
Average percent parens in population: 0.008
Minimum age in population: 150.4153260714514
Maximum age in population: 155.7581535576101
Average age in population: 153.2642723141415
Median age in population: 153.2814140356285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.208
Error (vector) diversity:			 0.232
Behavioral diversity:				 0.235
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 273653014
--- Timings ---
Current time: 1529615308990 milliseconds
Total Time:         483.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.2 seconds, 32.7%
Fitness Testing:    254.0 seconds, 52.6%
Report:              70.8 seconds, 14.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 35014.350299999984
Test mean error for best: 17.50718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 88.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -63.2516975843
Correct output: 44.9272196671  | Program output: 60.9272196671 
Correct output: 66.6210657667  | Program output: 82.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -63.6354294126
Correct output: 1.2524717345   | Program output: 17.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 145.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 157.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 138.2843412425
Correct output: 33.2581162527  | Program output: 49.2581162527 
Correct output: 123.421863126  | Program output: 139.421863126 
Correct output: 106.1474875213 | Program output: 122.1474875213
Correct output: 12.1495725478  | Program output: 28.1495725478 
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -45.2140896321
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_swap} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_min} {:instruction float_inc} {:instruction integer_yank} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_dup_items float_swap float_shove float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc integer_mod integer_min float_inc integer_yank float_add float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc float_inc float_inc float_inc in1 float_inc float_inc float_inc float_shove float_inc integer_sub float_inc float_add float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [16.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 16.0 2 16.0 2 16.0 2 22.0 2 16.0 2 16.0 1 5.16 11 16.0 2 42.0 3 16.0 2 0.0 0 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 94.0 3 16.0 2 0.2138 9]
Total: 634.0479
Mean: 12.680958
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2276.485723400003
Median total errors in population: 811.0479
Error averages by case: (90.57225120000001 4.81 52.774808399999635 3.581 72.5253004 3.135 99.15917969999994 11.586 85.21947119999935 12.074 87.36596699999969 12.098 98.95291189999992 3.247 88.98136749999999 2.908 80.32535449999997 2.849 78.56400799999999 3.127 104.3596169 3.22 93.64250890000002 4.361 55.050388800000796 11.015 84.12348970000001 3.167 99.99573749999995 3.934 74.118094 2.454 60.093658500000004 1.61 97.8611118 3.753 78.43437660000006 4.588 91.76984140000002 3.275 72.8465932 2.513 98.75031050000003 11.26 147.23504559999995 4.058 105.54452149999992 3.215 47.521808699999944 8.86)
Error minima by case: (7.026 1 5.468 2 16.0 1 2.0432 2 31.6601 2 36.7358 3 2.0 1 0.3049 1 2.0 1 20.0 1 1.0 1 0.1232 1 3.0 1 1.0 1 40.0 2 0.0 0 0.0 0 1.2843 1 0.0 0 6.0 1 0.0 0 0.1496 2 92.0 2 0.6716 1 0.0757 1)
Average genome size in population (length): 127.716
Average program size in population (points): 128.716
Average percent parens in population: 0.008
Minimum age in population: 151.4153260714514
Maximum age in population: 157.1655074627168
Average age in population: 154.6002393595323
Median age in population: 154.659085839853
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.946
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.946
Total error diversity:				 0.227
Error (vector) diversity:			 0.243
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 276845989
--- Timings ---
Current time: 1529615313935 milliseconds
Total Time:         488.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.7 seconds, 32.7%
Fitness Testing:    256.8 seconds, 52.6%
Report:              71.5 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 35014.350299999984
Test mean error for best: 17.50718
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 88.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -63.2516975843
Correct output: 44.9272196671  | Program output: 60.9272196671 
Correct output: 66.6210657667  | Program output: 82.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -63.6354294126
Correct output: 1.2524717345   | Program output: 17.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 145.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 157.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 138.2843412425
Correct output: 33.2581162527  | Program output: 49.2581162527 
Correct output: 123.421863126  | Program output: 139.421863126 
Correct output: 106.1474875213 | Program output: 122.1474875213
Correct output: 12.1495725478  | Program output: 28.1495725478 
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -45.2140896321
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_swap} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction integer_yank} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_mod} {:instruction integer_max} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mod} {:instruction float_shove} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_dup_items float_swap float_shove float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc print_float integer_min float_inc integer_yank float_add float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc float_inc float_inc float_inc in1 float_inc float_inc float_inc float_shove float_inc integer_sub float_inc float_add float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc in1 float_inc in1 integer_mod integer_max float_inc float_shove float_inc float_shove integer_mod float_shove in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [16.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 16.0 2 16.0 2 16.0 2 22.0 2 16.0 2 16.0 1 5.16 11 16.0 2 42.0 3 16.0 2 0.0 0 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 94.0 3 16.0 2 0.2138 9]
Total: 634.0479
Mean: 12.680958
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2271.460438700002
Median total errors in population: 811.0479
Error averages by case: (89.93275640000002 5.016 53.086171299999535 3.539 74.51066130000001 3.11 98.59093929999996 11.516 84.02085599999891 12.069 86.75106670000007 12.048 97.95384299999998 3.326 85.34220570000004 3.141 77.5221308 3.067 79.5249951 3.09 102.85173610000002 3.304 90.33656400000005 4.53 54.679469800001264 11.026 86.12651570000003 3.406 100.71369879999992 3.898 77.10248460000003 2.765 61.38539880000001 1.654 96.50271440000003 3.951 76.61953609999999 4.737 91.50543310000002 3.566 74.59538760000001 2.833 98.9573459 11.15 147.9649455999999 4.027 104.19699759999999 3.25 47.8535849999996 8.814)
Error minima by case: (3.0317 1 4.468 2 3.402 1 0.0432 2 31.6601 9 36.5527 2 6.0 1 0.8757 1 0.0 0 0.634 1 0.0 0 0.0 0 3.0 2 1.0 1 14.6267 1 0.0 0 0.0 0 2.2843 1 0.0 0 7.0 1 0.0 0 0.8504 2 69.8261 2 1.0 1 0.0757 1)
Average genome size in population (length): 127.887
Average program size in population (points): 128.887
Average percent parens in population: 0.008
Minimum age in population: 152.4681041805859
Maximum age in population: 157.8854065729068
Average age in population: 155.9892574864152
Median age in population: 155.994067299933
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.252
Error (vector) diversity:			 0.269
Behavioral diversity:				 0.271
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 280043314
--- Timings ---
Current time: 1529615318902 milliseconds
Total Time:         493.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       161.1 seconds, 32.7%
Fitness Testing:    259.6 seconds, 52.7%
Report:              72.2 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 33516.350300000006
Test mean error for best: 16.75818
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 85.9485971213 
Correct output: -5.4680423906  | Program output: 0.4680423906  
Correct output: -24.9418699852 | Program output: -6.9418699852 
Correct output: 56.9568119314  | Program output: 2.0           
Correct output: -31.6601191221 | Program output: 2.0           
Correct output: -37.1210864176 | Program output: 2.0           
Correct output: -79.2516975843 | Program output: -66.2516975843
Correct output: 44.9272196671  | Program output: 57.9272196671 
Correct output: 66.6210657667  | Program output: 79.6210657667 
Correct output: -55.0537383904 | Program output: -33.0537383904
Correct output: -79.6354294126 | Program output: -66.6354294126
Correct output: 1.2524717345   | Program output: 14.2524717345 
Correct output: -3.1599714069  | Program output: 2.0           
Correct output: 129.8497046591 | Program output: 142.8497046591
Correct output: -125.0022721297 | Program output: -83.0022721297
Correct output: 141.1949920159 | Program output: 154.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 135.2843412425
Correct output: 33.2581162527  | Program output: 46.2581162527 
Correct output: 123.421863126  | Program output: 136.421863126 
Correct output: 106.1474875213 | Program output: 119.1474875213
Correct output: 12.1495725478  | Program output: 25.1495725478 
Correct output: -146.6027540177 | Program output: -52.6027540177
Correct output: -61.2140896321 | Program output: -48.2140896321
Correct output: 2.2138108865   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_swap} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction integer_yank} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_409} {:instruction float_inc} {:instruction float_inc} {:instruction -38} {:instruction float_rot} {:instruction in1} {:instruction float_inc} {:instruction in1} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction in1} {:instruction integer_dec} {:instruction float_shove} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_dup_items float_swap float_shove float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_dec float_inc float_inc float_inc float_shove float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc print_float integer_min float_inc integer_yank float_add float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc float_inc float_inc float_inc in1 float_inc float_inc float_inc float_shove float_inc integer_sub float_inc float_add float_yank float_inc float_inc tagged_409 float_inc float_inc -38 float_rot in1 float_inc in1 integer_pop integer_dup_times float_inc float_shove float_inc in1 integer_dec float_shove in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [13.0 2 5.9361 2 18.0 2 54.9568 12 33.6601 12 39.1211 12 13.0 2 13.0 2 13.0 2 22.0 2 13.0 2 13.0 1 5.16 11 13.0 2 42.0 3 13.0 2 0.0 0 13.0 2 13.0 2 13.0 2 13.0 2 13.0 2 94.0 3 13.0 2 0.2138 9]
Total: 592.0479
Mean: 11.840958
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2439.673073600002
Median total errors in population: 810.0479
Error averages by case: (99.81641330000001 4.991 60.862634599999495 3.509 82.32702900000001 3.139 106.59949749999994 11.605 91.55808059999866 12.069 94.19041060000016 12.064 103.71209169999997 3.241 91.61102730000003 3.032 83.2423624 2.962 87.1481768 3.127 108.59629739999998 3.215 100.80600100000007 4.495 62.37488290000147 11.023 89.3819142 3.362 108.67022089999995 3.941 79.78406840000002 2.681 69.6043156 1.654 101.386343 3.865 84.7396456 4.782 96.44118470000001 3.424 77.88355849999998 2.719 106.19962029999998 11.156 154.79692359999996 4.073 110.03933219999992 3.151 55.74204149999944 8.879)
Error minima by case: (0.4386 1 5.0 2 9.0581 1 0.0432 2 19.6601 3 25.1211 2 1.0 1 0.0 0 1.5758 1 7.8925 1 1.0 1 0.0057 1 3.0 1 1.0 1 40.0 2 0.0 0 0.0 0 2.2843 1 0.0 0 5.0 1 0.0 0 0.0902 2 39.3972 2 0.0 0 0.1381 1)
Average genome size in population (length): 127.455
Average program size in population (points): 128.455
Average percent parens in population: 0.008
Minimum age in population: 154.924233827111
Maximum age in population: 159.6772383964573
Average age in population: 157.3463353105447
Median age in population: 157.3818001906817
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.223
Error (vector) diversity:			 0.24
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 283229764
--- Timings ---
Current time: 1529615323836 milliseconds
Total Time:         498.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.6 seconds, 32.6%
Fitness Testing:    262.4 seconds, 52.7%
Report:              72.9 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 18745.0
Test mean error for best: 9.37250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 88.9485971213 
Correct output: -5.4680423906  | Program output: 10.5319576094 
Correct output: -24.9418699852 | Program output: -8.9418699852 
Correct output: 56.9568119314  | Program output: 72.9568119314 
Correct output: -31.6601191221 | Program output: -15.6601191221
Correct output: -37.1210864176 | Program output: -21.1210864176
Correct output: -79.2516975843 | Program output: -63.2516975843
Correct output: 44.9272196671  | Program output: 60.9272196671 
Correct output: 66.6210657667  | Program output: 82.6210657667 
Correct output: -55.0537383904 | Program output: -39.0537383904
Correct output: -79.6354294126 | Program output: -63.6354294126
Correct output: 1.2524717345   | Program output: 17.2524717345 
Correct output: -3.1599714069  | Program output: 12.8400285931 
Correct output: 129.8497046591 | Program output: 145.8497046591
Correct output: -125.0022721297 | Program output: -109.0022721297
Correct output: 141.1949920159 | Program output: 157.1949920159
Correct output: -37.2353445012 | Program output: -21.2353445012
Correct output: 122.2843412425 | Program output: 138.2843412425
Correct output: 33.2581162527  | Program output: 49.2581162527 
Correct output: 123.421863126  | Program output: 139.421863126 
Correct output: 106.1474875213 | Program output: 122.1474875213
Correct output: 12.1495725478  | Program output: 28.1495725478 
Correct output: -146.6027540177 | Program output: -130.6027540177
Correct output: -61.2140896321 | Program output: -45.2140896321
Correct output: 2.2138108865   | Program output: 18.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_swap} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction integer_yank} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_dup_items float_swap float_shove float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc print_float integer_min float_inc integer_yank float_add float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc float_inc float_inc float_inc in1 float_inc float_inc float_inc float_shove float_inc integer_sub float_inc float_add float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [16.0 2 16.0 12 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 1 16.0 12 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2]
Total: 469.0
Mean: 9.38
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2660.9209019000027
Median total errors in population: 811.0479
Error averages by case: (105.45558670000003 5.374 70.24062459999979 3.728 87.37990860000009 3.362 116.94857779999995 11.461 103.16852759999807 12.103 104.97002220000054 12.081 112.14074999999981 3.708 101.42068340000009 3.395 94.57507630000008 3.317 93.40550409999999 3.357 115.33299819999995 3.721 104.70692230000003 4.799 73.58913890000176 11.101 100.54560340000009 3.648 115.47232209999987 4.134 92.39058100000011 3.064 73.80761069999998 1.823 112.15851299999999 4.146 93.634222 5.294 106.98750410000004 3.693 89.80199930000006 3.108 112.87103559999996 10.938 160.8142428999999 4.303 115.81569169999989 3.564 65.28125539999927 8.784)
Error minima by case: (0.7737 1 5.468 2 10.0581 1 0.0432 2 16.0 2 16.0 2 2.0 1 0.2229 1 0.6211 1 12.0537 1 1.0 1 0.4622 1 3.0 1 0.0 0 16.0 1 0.0 0 0.0 0 0.7157 1 0.5792 1 3.0 1 0.0 0 0.8504 1 16.0 2 1.0 1 0.0757 1)
Average genome size in population (length): 127.293
Average program size in population (points): 128.293
Average percent parens in population: 0.008
Minimum age in population: 155.924233827111
Maximum age in population: 160.8188354417642
Average age in population: 158.7296789539167
Median age in population: 158.7796644144354
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.261
Error (vector) diversity:			 0.284
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 286412314
--- Timings ---
Current time: 1529615328736 milliseconds
Total Time:         502.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.0 seconds, 32.6%
Fitness Testing:    265.3 seconds, 52.7%
Report:              73.6 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 17693.0
Test mean error for best: 8.84650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 87.9485971213 
Correct output: -5.4680423906  | Program output: 9.5319576094  
Correct output: -24.9418699852 | Program output: -9.9418699852 
Correct output: 56.9568119314  | Program output: 71.9568119314 
Correct output: -31.6601191221 | Program output: -16.6601191221
Correct output: -37.1210864176 | Program output: -22.1210864176
Correct output: -79.2516975843 | Program output: -64.2516975843
Correct output: 44.9272196671  | Program output: 59.9272196671 
Correct output: 66.6210657667  | Program output: 81.6210657667 
Correct output: -55.0537383904 | Program output: -40.0537383904
Correct output: -79.6354294126 | Program output: -64.6354294126
Correct output: 1.2524717345   | Program output: 16.2524717345 
Correct output: -3.1599714069  | Program output: 11.8400285931 
Correct output: 129.8497046591 | Program output: 144.8497046591
Correct output: -125.0022721297 | Program output: -110.0022721297
Correct output: 141.1949920159 | Program output: 156.1949920159
Correct output: -37.2353445012 | Program output: -22.2353445012
Correct output: 122.2843412425 | Program output: 137.2843412425
Correct output: 33.2581162527  | Program output: 48.2581162527 
Correct output: 123.421863126  | Program output: 138.421863126 
Correct output: 106.1474875213 | Program output: 121.1474875213
Correct output: 12.1495725478  | Program output: 27.1495725478 
Correct output: -146.6027540177 | Program output: -131.6027540177
Correct output: -61.2140896321 | Program output: -46.2140896321
Correct output: 2.2138108865   | Program output: 17.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_swap} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_cos} {:instruction float_inc} {:instruction float_add} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_swap} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction integer_yank} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_add} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction float_inc} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_dup_items float_swap float_shove float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_cos float_inc float_add float_shove integer_mult float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove tagged_268 float_inc float_shove float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_swap in2 float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc print_float integer_min float_inc integer_yank float_add float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc float_inc float_inc float_add in1 float_inc float_inc float_inc float_shove float_inc integer_sub float_inc float_add float_yank float_inc float_inc float_shove float_inc float_inc float_yank float_inc float_inc float_shove float_inc in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [15.0 2 15.0 12 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 1 15.0 12 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2]
Total: 444.0
Mean: 8.88
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2675.579077500002
Median total errors in population: 811.0479
Error averages by case: (109.39603209999994 5.679 65.75393499999947 3.667 88.13368559999999 3.256 113.63795279999994 11.415 101.24377489999897 12.078 101.90136549999993 12.044 112.70299259999992 3.833 100.29013229999998 3.598 97.27182599999999 3.493 92.98935839999997 3.24 114.73812179999999 3.872 101.27620690000005 4.805 69.85098530000154 11.159 106.22053800000008 3.81 113.6905326999999 4.088 100.2236503000001 3.387 74.24058260000002 1.65 115.04661299999995 4.159 98.82986899999999 5.69 110.97645390000007 3.802 97.04370870000005 3.412 117.45986589999995 9.841 160.6908108999999 4.17 112.69437059999986 3.656 60.71071269999975 8.761)
Error minima by case: (1.2318 1 5.0 2 15.0 1 0.1581 2 15.0 2 15.0 2 1.0 1 0.0 0 0.0 0 15.0 1 0.0 0 0.0 0 2.7438 2 1.0 1 15.0 1 0.0 0 0.0 0 0.2843 1 0.0 0 1.0 1 0.0 0 0.6137 1 15.0 2 0.0 0 0.0757 1)
Average genome size in population (length): 126.512
Average program size in population (points): 127.512
Average percent parens in population: 0.008
Minimum age in population: 157.1085336344653
Maximum age in population: 161.8567148000032
Average age in population: 160.059556760631
Median age in population: 160.1056818399177
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.268
Error (vector) diversity:			 0.29
Behavioral diversity:				 0.292
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 289575439
--- Timings ---
Current time: 1529615333518 milliseconds
Total Time:         507.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.4 seconds, 32.6%
Fitness Testing:    268.0 seconds, 52.8%
Report:              74.2 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 13503.0
Test mean error for best: 6.75150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 83.9485971213 
Correct output: -5.4680423906  | Program output: 5.5319576094  
Correct output: -24.9418699852 | Program output: -13.9418699852
Correct output: 56.9568119314  | Program output: 67.9568119314 
Correct output: -31.6601191221 | Program output: -20.6601191221
Correct output: -37.1210864176 | Program output: -26.1210864176
Correct output: -79.2516975843 | Program output: -68.2516975843
Correct output: 44.9272196671  | Program output: 55.9272196671 
Correct output: 66.6210657667  | Program output: 77.6210657667 
Correct output: -55.0537383904 | Program output: -44.0537383904
Correct output: -79.6354294126 | Program output: -68.6354294126
Correct output: 1.2524717345   | Program output: 12.2524717345 
Correct output: -3.1599714069  | Program output: 7.8400285931  
Correct output: 129.8497046591 | Program output: 140.8497046591
Correct output: -125.0022721297 | Program output: -114.0022721297
Correct output: 141.1949920159 | Program output: 152.1949920159
Correct output: -37.2353445012 | Program output: -26.2353445012
Correct output: 122.2843412425 | Program output: 133.2843412425
Correct output: 33.2581162527  | Program output: 44.2581162527 
Correct output: 123.421863126  | Program output: 134.421863126 
Correct output: 106.1474875213 | Program output: 117.1474875213
Correct output: 12.1495725478  | Program output: 23.1495725478 
Correct output: -146.6027540177 | Program output: -135.6027540177
Correct output: -61.2140896321 | Program output: -50.2140896321
Correct output: 2.2138108865   | Program output: 13.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_swap} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_flush} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction integer_yank} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_dup_items float_swap float_shove float_min integer_swap float_inc float_inc float_inc float_shove float_inc integer_add float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_inc float_inc float_shove float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_yank in2 integer_mult float_inc float_inc float_shove float_inc float_flush tagged_750 float_shove float_inc float_inc float_inc float_inc print_float integer_min float_inc integer_yank float_add float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc float_inc float_inc float_inc in1 integer_shove float_inc float_inc float_shove float_inc integer_sub integer_mult float_add float_yank float_inc float_inc float_shove float_inc float_inc float_mod integer_mod float_shove print_float)
Errors: [11.0 2 11.0 11 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 1 11.0 12 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2]
Total: 343.0
Mean: 6.86
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3097.384155400002
Median total errors in population: 807.0479
Error averages by case: (124.51355829999996 6.143 82.61909660000029 4.346 111.81898140000001 3.608 127.72743319999994 10.893 119.89136189999815 11.746 119.59474610000055 11.734 127.1083323999997 4.242 109.97751330000011 3.945 112.28449710000004 3.874 117.5523276 3.542 126.23526139999993 4.266 105.3421893 4.89 87.58797250000173 11.244 122.87563850000019 4.139 137.24985079999985 4.318 120.62878540000027 4.029 99.18081459999999 1.942 126.77802429999997 4.27 119.50462499999993 6.393 124.79070710000006 3.986 116.99344870000019 3.993 132.9723149 7.863 180.6885352999999 4.422 123.31180559999979 4.028 77.77433409999924 8.526)
Error minima by case: (1.0514 1 1.532 2 8.9419 1 4.0 1 11.0 2 11.0 2 0.4676 1 1.0 1 0.0899 1 11.0 1 0.0 0 0.0 0 1.221 1 0.8497 1 11.0 2 0.0 0 0.0 0 0.7157 1 1.0 1 8.4219 1 0.0 0 0.1057 1 11.0 2 0.0 0 0.2138 1)
Average genome size in population (length): 124.914
Average program size in population (points): 125.914
Average percent parens in population: 0.008
Minimum age in population: 159.086302144208
Maximum age in population: 163.3007547763188
Average age in population: 161.4664689558294
Median age in population: 161.501516078854
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.933
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.933
Total error diversity:				 0.305
Error (vector) diversity:			 0.34
Behavioral diversity:				 0.343
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 292698714
--- Timings ---
Current time: 1529615338130 milliseconds
Total Time:         512.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.8 seconds, 32.6%
Fitness Testing:    270.6 seconds, 52.8%
Report:              74.9 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 13503.0
Test mean error for best: 6.75150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 83.9485971213 
Correct output: -5.4680423906  | Program output: 5.5319576094  
Correct output: -24.9418699852 | Program output: -13.9418699852
Correct output: 56.9568119314  | Program output: 67.9568119314 
Correct output: -31.6601191221 | Program output: -20.6601191221
Correct output: -37.1210864176 | Program output: -26.1210864176
Correct output: -79.2516975843 | Program output: -68.2516975843
Correct output: 44.9272196671  | Program output: 55.9272196671 
Correct output: 66.6210657667  | Program output: 77.6210657667 
Correct output: -55.0537383904 | Program output: -44.0537383904
Correct output: -79.6354294126 | Program output: -68.6354294126
Correct output: 1.2524717345   | Program output: 12.2524717345 
Correct output: -3.1599714069  | Program output: 7.8400285931  
Correct output: 129.8497046591 | Program output: 140.8497046591
Correct output: -125.0022721297 | Program output: -114.0022721297
Correct output: 141.1949920159 | Program output: 152.1949920159
Correct output: -37.2353445012 | Program output: -26.2353445012
Correct output: 122.2843412425 | Program output: 133.2843412425
Correct output: 33.2581162527  | Program output: 44.2581162527 
Correct output: 123.421863126  | Program output: 134.421863126 
Correct output: 106.1474875213 | Program output: 117.1474875213
Correct output: 12.1495725478  | Program output: 23.1495725478 
Correct output: -146.6027540177 | Program output: -135.6027540177
Correct output: -61.2140896321 | Program output: -50.2140896321
Correct output: 2.2138108865   | Program output: 13.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_swap} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_flush} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction integer_yank} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_add} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_dup_items float_swap float_shove float_min integer_swap float_inc float_inc float_inc float_shove float_inc integer_add float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_inc float_inc float_shove float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_yank in2 integer_mult float_inc float_inc float_shove float_inc float_flush tagged_750 float_shove float_inc float_inc float_inc float_inc print_float integer_min float_inc integer_yank float_add float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc float_inc float_inc float_inc in1 integer_shove float_inc float_inc float_shove float_inc integer_sub integer_mult float_add float_yank float_inc float_inc float_shove float_inc float_inc float_mod integer_mod float_shove print_float)
Errors: [11.0 2 11.0 11 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 1 11.0 12 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2]
Total: 343.0
Mean: 6.86
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3118.1683742000023
Median total errors in population: 634.0479
Error averages by case: (122.47315479999995 5.664 94.31256530000084 5.877 114.12365490000006 3.923 133.29228089999998 9.555 126.66643029999823 10.611 125.56662290000078 10.582 120.29791899999978 4.054 108.5985559000001 3.934 112.57606030000004 3.913 119.41675740000004 3.686 118.19445329999995 4.092 104.6652121 4.335 100.01814730000152 11.401 122.84244110000013 4.125 137.06879669999984 4.408 121.90569080000022 4.106 104.26945800000001 2.324 125.16388039999998 4.18 120.1499326999999 5.778 123.95659530000006 3.939 119.12823520000016 4.111 126.64768709999991 6.003 173.97126359999987 4.432 115.52972659999983 3.922 90.75785229999926 7.62)
Error minima by case: (0.0514 1 4.9361 2 1.0 1 9.6779 2 10.0 1 4.8789 2 0.4206 1 0.1323 1 0.3789 1 5.0 1 0.0 0 0.0 0 2.16 1 0.8497 1 9.9977 2 0.0 0 0.0 0 0.7157 1 4.0 1 4.0 1 0.1475 1 0.8504 1 11.0 1 0.0 0 0.2138 1)
Average genome size in population (length): 121.514
Average program size in population (points): 122.514
Average percent parens in population: 0.008
Minimum age in population: 160.601859717621
Maximum age in population: 165.2217831750821
Average age in population: 162.964222466515
Median age in population: 162.9723688341263
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.291
Error (vector) diversity:			 0.316
Behavioral diversity:				 0.32
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 295736714
--- Timings ---
Current time: 1529615342763 milliseconds
Total Time:         517.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.2 seconds, 32.5%
Fitness Testing:    273.2 seconds, 52.8%
Report:              75.4 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 10175.0
Test mean error for best: 5.08750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 80.9485971213 
Correct output: -5.4680423906  | Program output: 2.5319576094  
Correct output: -24.9418699852 | Program output: -16.9418699852
Correct output: 56.9568119314  | Program output: 64.9568119314 
Correct output: -31.6601191221 | Program output: -23.6601191221
Correct output: -37.1210864176 | Program output: -29.1210864176
Correct output: -79.2516975843 | Program output: -71.2516975843
Correct output: 44.9272196671  | Program output: 52.9272196671 
Correct output: 66.6210657667  | Program output: 74.6210657667 
Correct output: -55.0537383904 | Program output: -47.0537383904
Correct output: -79.6354294126 | Program output: -71.6354294126
Correct output: 1.2524717345   | Program output: 9.2524717345  
Correct output: -3.1599714069  | Program output: 4.8400285931  
Correct output: 129.8497046591 | Program output: 137.8497046591
Correct output: -125.0022721297 | Program output: -117.0022721297
Correct output: 141.1949920159 | Program output: 149.1949920159
Correct output: -37.2353445012 | Program output: -29.2353445012
Correct output: 122.2843412425 | Program output: 130.2843412425
Correct output: 33.2581162527  | Program output: 41.2581162527 
Correct output: 123.421863126  | Program output: 131.421863126 
Correct output: 106.1474875213 | Program output: 114.1474875213
Correct output: 12.1495725478  | Program output: 20.1495725478 
Correct output: -146.6027540177 | Program output: -138.6027540177
Correct output: -61.2140896321 | Program output: -53.2140896321
Correct output: 2.2138108865   | Program output: 10.2138108865 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_swap} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction tagged_268} {:instruction float_dec} {:instruction float_shove} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_flush} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction integer_yank} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_add} {:instruction float_yank} {:instruction float_shove} {:instruction float_inc} {:instruction in2} {:instruction float_shove} {:instruction in2} {:instruction float_mod} {:instruction integer_mod} {:instruction float_shove} {:instruction print_float})
Best program: (float_dup_items float_swap float_shove float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_shove tagged_268 float_dec float_shove float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_flush tagged_750 float_shove float_inc float_inc float_inc float_inc print_float integer_min float_inc integer_yank float_add float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc float_inc float_inc float_inc in1 integer_shove float_inc float_inc float_shove float_inc integer_sub integer_mult float_add float_yank float_shove float_inc in2 float_shove in2 float_mod integer_mod float_shove print_float)
Errors: [8.0 2 8.0 12 8.0 2 8.0 2 8.0 2 8.0 2 8.0 1 8.0 2 8.0 2 8.0 2 8.0 1 8.0 1 8.0 12 8.0 2 8.0 2 8.0 1 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2 8.0 2]
Total: 266.0
Mean: 5.32
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2924.560703000001
Median total errors in population: 564.0479
Error averages by case: (114.10193559999992 5.163 96.42382830000047 9.401 104.7019896000001 4.623 120.44623949999999 6.462 121.58024829999938 7.59 117.04345680000027 7.494 110.9991320999998 4.019 104.9751919000001 3.916 108.0293045000001 3.864 110.62286250000012 3.993 109.46919339999994 3.994 98.55161499999996 3.688 104.6206728000005 11.72 115.74484320000008 4.042 122.30116459999967 4.403 115.37788230000025 4.063 101.54524579999999 3.362 117.27364810000005 4.098 112.75964859999986 5.262 116.94252600000003 3.89 113.0120056000001 4.084 117.62425129999988 5.306 140.1235026999998 4.381 107.23900129999987 3.904 94.81831319999965 5.511)
Error minima by case: (0.9486 1 0.0 0 5.0 1 6.1198 1 0.0 0 0.0 0 1.0 1 1.0 1 0.3789 1 1.9463 1 0.0 0 0.0 0 0.0 0 0.8497 1 5.9977 1 1.0 1 0.0 0 1.0 1 1.0 1 1.0 1 1.0 1 0.0629 1 8.0 1 0.0 1 0.2138 1)
Average genome size in population (length): 114.566
Average program size in population (points): 115.566
Average percent parens in population: 0.009
Minimum age in population: 161.8489617500093
Maximum age in population: 166.4135060176313
Average age in population: 164.4458182489709
Median age in population: 164.4718480675615
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.259
Error (vector) diversity:			 0.268
Behavioral diversity:				 0.269
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 298600889
--- Timings ---
Current time: 1529615347267 milliseconds
Total Time:         521.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       169.7 seconds, 32.5%
Fitness Testing:    275.6 seconds, 52.9%
Report:              76.0 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 6760.0
Test mean error for best: 3.38000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 77.9485971213 
Correct output: -5.4680423906  | Program output: -0.4680423906 
Correct output: -24.9418699852 | Program output: -19.9418699852
Correct output: 56.9568119314  | Program output: 61.9568119314 
Correct output: -31.6601191221 | Program output: -26.6601191221
Correct output: -37.1210864176 | Program output: -32.1210864176
Correct output: -79.2516975843 | Program output: -74.2516975843
Correct output: 44.9272196671  | Program output: 49.9272196671 
Correct output: 66.6210657667  | Program output: 71.6210657667 
Correct output: -55.0537383904 | Program output: -50.0537383904
Correct output: -79.6354294126 | Program output: -74.6354294126
Correct output: 1.2524717345   | Program output: 6.2524717345  
Correct output: -3.1599714069  | Program output: 1.8400285931  
Correct output: 129.8497046591 | Program output: 134.8497046591
Correct output: -125.0022721297 | Program output: -120.0022721297
Correct output: 141.1949920159 | Program output: 146.1949920159
Correct output: -37.2353445012 | Program output: -32.2353445012
Correct output: 122.2843412425 | Program output: 127.2843412425
Correct output: 33.2581162527  | Program output: 38.2581162527 
Correct output: 123.421863126  | Program output: 128.421863126 
Correct output: 106.1474875213 | Program output: 111.1474875213
Correct output: 12.1495725478  | Program output: 17.1495725478 
Correct output: -146.6027540177 | Program output: -141.6027540177
Correct output: -61.2140896321 | Program output: -56.2140896321
Correct output: 2.2138108865   | Program output: 7.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_swap} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_add} {:instruction print_float})
Best program: (float_dup_items float_swap float_shove float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_inc float_shove float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc print_float integer_min float_inc float_yankdup float_add float_inc float_shove integer_rot float_shove float_mod float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc float_inc float_inc float_inc in1 integer_shove float_inc float_dec float_shove float_inc integer_sub integer_mult float_add print_float)
Errors: [5.0 1 5.0 1 5.0 2 5.0 2 5.0 2 5.0 1 5.0 1 5.0 1 5.0 2 5.0 1 5.0 1 5.0 1 5.0 12 5.0 2 5.0 1 5.0 1 5.0 1 5.0 1 5.0 1 5.0 1 5.0 2 5.0 1 5.0 1 5.0 2 5.0 1]
Total: 168.0
Mean: 3.36
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2628.5835614999996
Median total errors in population: 444.0
Error averages by case: (105.19563679999999 4.333 88.75588610000003 11.785 90.34658389999996 4.479 104.4315775 3.68 109.35393150000004 4.898 104.6724422 4.78 98.61145729999996 3.517 95.23852199999999 3.459 100.35048920000003 3.494 97.65996020000003 3.678 96.57139959999999 3.455 87.43586919999997 2.875 101.54904289999992 11.953 107.11850480000005 3.656 106.86901529999983 3.859 106.4784790000001 3.639 92.08340570000003 3.493 107.97034160000001 3.676 103.2004429 4.495 107.93978770000001 3.506 104.45788310000006 3.68 106.55415449999998 4.572 111.83207339999987 3.836 94.41991689999993 3.452 87.82175819999993 3.415)
Error minima by case: (0.9486 1 1.4859 1 2.0 1 5.0 1 5.0 1 5.0 1 1.0 1 2.0 1 1.3789 1 0.0 0 0.0 0 0.0 0 3.16 1 5.0 1 5.0 1 3.0 1 0.0 0 5.0 1 2.7419 1 5.0 1 2.0 1 0.2138 1 5.0 1 0.0 0 0.0 0)
Average genome size in population (length): 107.747
Average program size in population (points): 108.747
Average percent parens in population: 0.009
Minimum age in population: 163.3360559102008
Maximum age in population: 167.8903213143312
Average age in population: 165.981424483203
Median age in population: 165.9965202004642
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.165
Error (vector) diversity:			 0.173
Behavioral diversity:				 0.173
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 301294664
--- Timings ---
Current time: 1529615351487 milliseconds
Total Time:         525.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.1 seconds, 32.5%
Fitness Testing:    277.9 seconds, 52.9%
Report:              76.7 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 5574.0
Test mean error for best: 2.78700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 76.9485971213 
Correct output: -5.4680423906  | Program output: -1.4680423906 
Correct output: -24.9418699852 | Program output: -20.9418699852
Correct output: 56.9568119314  | Program output: 60.9568119314 
Correct output: -31.6601191221 | Program output: -27.6601191221
Correct output: -37.1210864176 | Program output: -33.1210864176
Correct output: -79.2516975843 | Program output: -75.2516975843
Correct output: 44.9272196671  | Program output: 48.9272196671 
Correct output: 66.6210657667  | Program output: 70.6210657667 
Correct output: -55.0537383904 | Program output: -51.0537383904
Correct output: -79.6354294126 | Program output: -75.6354294126
Correct output: 1.2524717345   | Program output: 5.2524717345  
Correct output: -3.1599714069  | Program output: 0.8400285931  
Correct output: 129.8497046591 | Program output: 133.8497046591
Correct output: -125.0022721297 | Program output: -121.0022721297
Correct output: 141.1949920159 | Program output: 145.1949920159
Correct output: -37.2353445012 | Program output: -33.2353445012
Correct output: 122.2843412425 | Program output: 126.2843412425
Correct output: 33.2581162527  | Program output: 37.2581162527 
Correct output: 123.421863126  | Program output: 127.421863126 
Correct output: 106.1474875213 | Program output: 110.1474875213
Correct output: 12.1495725478  | Program output: 16.1495725478 
Correct output: -146.6027540177 | Program output: -142.6027540177
Correct output: -61.2140896321 | Program output: -57.2140896321
Correct output: 2.2138108865   | Program output: 6.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_swap} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction integer_add} {:instruction float_yank} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_shove} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_add} {:instruction print_float})
Best program: (float_dup_items float_swap float_shove float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_inc float_shove float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 integer_add float_yank float_swap float_inc integer_add float_inc float_inc float_inc float_inc print_float integer_min float_inc float_yankdup float_add float_inc float_shove integer_rot float_shove float_mod float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc float_inc float_inc float_inc in1 integer_shove float_inc float_dec float_shove integer_dup integer_sub integer_mult float_add print_float)
Errors: [4.0 1 4.0 1 4.0 1 4.0 2 4.0 2 4.0 1 4.0 1 4.0 1 4.0 2 4.0 1 4.0 1 4.0 1 4.0 12 4.0 2 4.0 1 4.0 1 4.0 1 4.0 1 4.0 1 4.0 1 4.0 2 4.0 1 4.0 1 4.0 2 4.0 1]
Total: 142.0
Mean: 2.84
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2607.2201729
Median total errors in population: 369.0
Error averages by case: (102.80731969999995 4.285 87.9039308 11.755 93.696469 3.997 104.25748869999998 3.501 109.24625300000007 4.636 104.51749840000001 4.499 98.61799679999996 3.471 93.52278859999997 3.481 98.8694418 3.447 97.53340930000002 3.71 96.02989599999998 3.461 88.56214509999997 3.279 100.5518409999999 11.996 104.65665040000003 3.605 106.45330909999987 3.857 105.15883720000008 3.551 91.40067340000002 3.592 105.24698880000001 3.629 102.0231406 4.352 104.84424010000002 3.493 102.43749200000003 3.627 105.60450880000002 4.346 110.4481735999999 3.813 93.45232679999995 3.556 89.14035389999998 3.298)
Error minima by case: (0.0514 1 0.1278 1 1.0 1 1.3868 1 4.0 1 4.0 1 4.0 1 4.0 1 0.3789 1 2.0 1 0.0 0 0.0 0 2.1681 1 1.0 1 0.5984 1 4.0 1 0.0 0 4.0 1 0.6597 1 4.0 1 2.8525 1 4.0 1 4.0 1 0.0 0 0.2138 1)
Average genome size in population (length): 102.714
Average program size in population (points): 103.714
Average percent parens in population: 0.010
Minimum age in population: 164.3360559102008
Maximum age in population: 169.2522140826673
Average age in population: 167.5068248376815
Median age in population: 167.551641396968
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.162
Error (vector) diversity:			 0.169
Behavioral diversity:				 0.17
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 303862664
--- Timings ---
Current time: 1529615355635 milliseconds
Total Time:         529.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.4 seconds, 32.5%
Fitness Testing:    280.1 seconds, 52.9%
Report:              77.3 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 3248.0
Test mean error for best: 1.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 74.9485971213 
Correct output: -5.4680423906  | Program output: -3.4680423906 
Correct output: -24.9418699852 | Program output: -22.9418699852
Correct output: 56.9568119314  | Program output: 58.9568119314 
Correct output: -31.6601191221 | Program output: -29.6601191221
Correct output: -37.1210864176 | Program output: -35.1210864176
Correct output: -79.2516975843 | Program output: -77.2516975843
Correct output: 44.9272196671  | Program output: 46.9272196671 
Correct output: 66.6210657667  | Program output: 68.6210657667 
Correct output: -55.0537383904 | Program output: -53.0537383904
Correct output: -79.6354294126 | Program output: -77.6354294126
Correct output: 1.2524717345   | Program output: 3.2524717345  
Correct output: -3.1599714069  | Program output: -1.1599714069 
Correct output: 129.8497046591 | Program output: 131.8497046591
Correct output: -125.0022721297 | Program output: -123.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -35.2353445012
Correct output: 122.2843412425 | Program output: 124.2843412425
Correct output: 33.2581162527  | Program output: 35.2581162527 
Correct output: 123.421863126  | Program output: 125.421863126 
Correct output: 106.1474875213 | Program output: 108.1474875213
Correct output: 12.1495725478  | Program output: 14.1495725478 
Correct output: -146.6027540177 | Program output: -144.6027540177
Correct output: -61.2140896321 | Program output: -59.2140896321
Correct output: 2.2138108865   | Program output: 4.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_sin} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_add} {:instruction print_float})
Best program: (float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_inc float_shove float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc integer_yankdup float_sin float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc print_float integer_min float_inc float_yankdup float_add float_inc float_shove integer_rot float_shove float_mod float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc in1 integer_shove float_inc float_dec float_shove float_inc integer_sub integer_mult float_add print_float)
Errors: [2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1]
Total: 78.0
Mean: 1.56
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2187.7882192999996
Median total errors in population: 292.0
Error averages by case: (87.91594639999997 4.163 70.81015569999997 11.495 75.66872379999998 3.592 87.3460942 3.34 92.73648880000007 4.48 87.71646770000004 4.264 82.79244259999999 2.843 77.40578489999997 3.285 83.18958639999998 3.3 79.27657869999993 3.364 79.54734489999997 2.87 71.74708009999996 3.262 85.14126169999989 11.915 88.6327486 3.442 88.12703399999992 3.526 88.59335460000005 3.264 73.51402530000001 3.271 89.70615649999999 3.448 87.35717419999999 4.168 89.13938820000003 3.349 86.51286170000004 3.464 91.48572059999998 4.223 92.20399309999993 3.508 76.1095656999999 3.288 70.92224089999993 3.066)
Error minima by case: (0.3556 1 0.1655 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 0.3789 1 0.0537 1 0.0 0 0.0 0 2.0 1 0.8497 1 2.0 1 2.0 1 0.0 0 2.0 1 2.0 1 1.477 1 1.1475 1 1.7479 1 2.0 1 0.0 0 0.2138 1)
Average genome size in population (length): 100.257
Average program size in population (points): 101.257
Average percent parens in population: 0.010
Minimum age in population: 166.7606063844663
Maximum age in population: 170.7722651157425
Average age in population: 169.0299926626253
Median age in population: 169.0483634133925
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.136
Error (vector) diversity:			 0.14
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 306369439
--- Timings ---
Current time: 1529615359870 milliseconds
Total Time:         534.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       173.9 seconds, 32.6%
Fitness Testing:    282.2 seconds, 52.8%
Report:              77.8 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 3248.0
Test mean error for best: 1.62400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 74.9485971213 
Correct output: -5.4680423906  | Program output: -3.4680423906 
Correct output: -24.9418699852 | Program output: -22.9418699852
Correct output: 56.9568119314  | Program output: 58.9568119314 
Correct output: -31.6601191221 | Program output: -29.6601191221
Correct output: -37.1210864176 | Program output: -35.1210864176
Correct output: -79.2516975843 | Program output: -77.2516975843
Correct output: 44.9272196671  | Program output: 46.9272196671 
Correct output: 66.6210657667  | Program output: 68.6210657667 
Correct output: -55.0537383904 | Program output: -53.0537383904
Correct output: -79.6354294126 | Program output: -77.6354294126
Correct output: 1.2524717345   | Program output: 3.2524717345  
Correct output: -3.1599714069  | Program output: -1.1599714069 
Correct output: 129.8497046591 | Program output: 131.8497046591
Correct output: -125.0022721297 | Program output: -123.0022721297
Correct output: 141.1949920159 | Program output: 143.1949920159
Correct output: -37.2353445012 | Program output: -35.2353445012
Correct output: 122.2843412425 | Program output: 124.2843412425
Correct output: 33.2581162527  | Program output: 35.2581162527 
Correct output: 123.421863126  | Program output: 125.421863126 
Correct output: 106.1474875213 | Program output: 108.1474875213
Correct output: 12.1495725478  | Program output: 14.1495725478 
Correct output: -146.6027540177 | Program output: -144.6027540177
Correct output: -61.2140896321 | Program output: -59.2140896321
Correct output: 2.2138108865   | Program output: 4.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction float_swap} {:instruction float_shove} {:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_dec} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_flush} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_add} {:instruction print_float})
Best program: (float_dup_items float_swap float_shove float_min integer_swap float_inc float_inc float_inc in2 float_inc float_shove float_inc float_shove float_inc float_inc float_inc float_shove float_inc float_inc integer_flush integer_swap float_inc float_shove integer_mult float_dec float_shove float_inc float_inc float_inc float_shove float_inc float_inc float_yank float_shove integer_mult float_shove float_inc float_inc float_inc float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc float_flush float_shove float_inc float_inc float_inc float_inc print_float float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc in1 integer_shove float_inc float_dec float_shove float_inc integer_sub integer_mult float_add print_float)
Errors: [2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1]
Total: 78.0
Mean: 1.56
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2687.2060177999997
Median total errors in population: 266.0
Error averages by case: (107.14505539999996 4.08 92.22945690000002 10.022 97.38169400000002 3.611 105.47437779999998 3.429 110.29693380000006 4.554 106.02688049999993 4.13 102.85812619999996 2.781 99.55844780000002 3.335 103.13683590000002 3.506 100.4055246 3.417 101.13299819999996 2.761 95.65847849999997 3.35 102.84693459999991 11.791 108.19574930000005 3.623 106.45022739999985 3.595 107.7338981000001 3.051 96.5792845 3.093 108.94882290000001 3.399 106.20466239999999 4.097 108.69053280000001 3.36 106.29314440000006 3.653 109.33709889999994 4.072 110.09733339999991 3.566 98.81546939999994 3.375 93.07905009999993 2.978)
Error minima by case: (0.9486 1 0.0 0 1.0581 1 0.0 0 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 1.0537 1 2.0 1 0.2525 1 2.0 1 0.73 1 2.0 1 2.0 1 0.0 0 2.0 1 2.0 1 2.0 1 0.1475 1 2.0 1 2.0 1 0.0 0 0.0 0)
Average genome size in population (length): 99.801
Average program size in population (points): 100.801
Average percent parens in population: 0.010
Minimum age in population: 168.1725015067344
Maximum age in population: 172.2342749522253
Average age in population: 170.4440464724774
Median age in population: 170.4658311528374
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.12
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 308864964
--- Timings ---
Current time: 1529615363940 milliseconds
Total Time:         538.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.3 seconds, 32.6%
Fitness Testing:    284.3 seconds, 52.8%
Report:              78.5 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 2125.0
Test mean error for best: 1.06250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 73.9485971213 
Correct output: -5.4680423906  | Program output: -4.4680423906 
Correct output: -24.9418699852 | Program output: -23.9418699852
Correct output: 56.9568119314  | Program output: 57.9568119314 
Correct output: -31.6601191221 | Program output: -30.6601191221
Correct output: -37.1210864176 | Program output: -36.1210864176
Correct output: -79.2516975843 | Program output: -78.2516975843
Correct output: 44.9272196671  | Program output: 45.9272196671 
Correct output: 66.6210657667  | Program output: 67.6210657667 
Correct output: -55.0537383904 | Program output: -54.0537383904
Correct output: -79.6354294126 | Program output: -78.6354294126
Correct output: 1.2524717345   | Program output: 2.2524717345  
Correct output: -3.1599714069  | Program output: -2.1599714069 
Correct output: 129.8497046591 | Program output: 130.8497046591
Correct output: -125.0022721297 | Program output: -124.0022721297
Correct output: 141.1949920159 | Program output: 142.1949920159
Correct output: -37.2353445012 | Program output: -36.2353445012
Correct output: 122.2843412425 | Program output: 123.2843412425
Correct output: 33.2581162527  | Program output: 34.2581162527 
Correct output: 123.421863126  | Program output: 124.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: 13.1495725478 
Correct output: -146.6027540177 | Program output: -145.6027540177
Correct output: -61.2140896321 | Program output: -60.2140896321
Correct output: 2.2138108865   | Program output: 3.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_820} {:instruction integer_fromfloat} {:instruction print_float} {:instruction float_inc} {:instruction float_inc} {:instruction float_pop} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_add} {:instruction print_float})
Best program: (float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_inc float_shove integer_mult float_shove float_inc float_inc float_inc float_shove float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc tagged_820 integer_fromfloat print_float float_inc float_inc float_pop print_float integer_min float_inc float_yankdup float_add float_inc float_shove integer_rot float_shove float_mod float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_yank float_inc float_inc integer_dup integer_min float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_frominteger float_dup_items in1 integer_shove float_inc float_dec float_shove float_inc integer_sub integer_mult float_add print_float)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 51.0
Mean: 1.02
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2092.1416812999996
Median total errors in population: 168.0
Error averages by case: (85.82343369999995 3.567 65.4884889 5.873 72.11938219999998 3.305 83.20589430000001 3.166 88.78685740000003 4.394 84.34546040000001 3.623 79.49787539999993 2.612 74.41694699999996 2.71 80.9008652 3.259 75.70132869999996 2.79 76.56549729999998 2.588 70.17816699999996 3.243 81.90907879999989 11.33 86.07830540000003 3.434 84.4755709999999 2.943 85.8455560000001 2.675 70.24690290000001 2.43 86.94496539999999 2.809 84.81868099999993 3.596 86.50669350000001 2.742 84.07317450000002 3.421 88.60664969999998 3.554 88.60844649999996 2.962 73.35161719999995 3.189 65.13684189999998 2.294)
Error minima by case: (0.9486 1 0.3402 1 0.0581 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.4951 1 1.0 1 1.0 1 1.0 1 1.0 1 0.0 0 1.0 1 0.5162 1 1.0 1 1.0 1 0.7479 1 1.0 1 0.0 0 0.0 0)
Average genome size in population (length): 95.725
Average program size in population (points): 96.725
Average percent parens in population: 0.010
Minimum age in population: 169.397277394884
Maximum age in population: 173.7154470869157
Average age in population: 171.765473209969
Median age in population: 171.8338341184472
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.113
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 311258239
--- Timings ---
Current time: 1529615368213 milliseconds
Total Time:         542.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.8 seconds, 32.6%
Fitness Testing:    286.4 seconds, 52.8%
Report:              79.1 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 2125.0
Test mean error for best: 1.06250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 73.9485971213 
Correct output: -5.4680423906  | Program output: -4.4680423906 
Correct output: -24.9418699852 | Program output: -23.9418699852
Correct output: 56.9568119314  | Program output: 57.9568119314 
Correct output: -31.6601191221 | Program output: -30.6601191221
Correct output: -37.1210864176 | Program output: -36.1210864176
Correct output: -79.2516975843 | Program output: -78.2516975843
Correct output: 44.9272196671  | Program output: 45.9272196671 
Correct output: 66.6210657667  | Program output: 67.6210657667 
Correct output: -55.0537383904 | Program output: -54.0537383904
Correct output: -79.6354294126 | Program output: -78.6354294126
Correct output: 1.2524717345   | Program output: 2.2524717345  
Correct output: -3.1599714069  | Program output: -2.1599714069 
Correct output: 129.8497046591 | Program output: 130.8497046591
Correct output: -125.0022721297 | Program output: -124.0022721297
Correct output: 141.1949920159 | Program output: 142.1949920159
Correct output: -37.2353445012 | Program output: -36.2353445012
Correct output: 122.2843412425 | Program output: 123.2843412425
Correct output: 33.2581162527  | Program output: 34.2581162527 
Correct output: 123.421863126  | Program output: 124.421863126 
Correct output: 106.1474875213 | Program output: 107.1474875213
Correct output: 12.1495725478  | Program output: 13.1495725478 
Correct output: -146.6027540177 | Program output: -145.6027540177
Correct output: -61.2140896321 | Program output: -60.2140896321
Correct output: 2.2138108865   | Program output: 3.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_shove} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_sin} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_add} {:instruction print_float})
Best program: (integer_sub integer_swap float_inc float_inc float_inc float_shove float_inc integer_add float_inc float_shove float_inc float_inc float_inc float_inc integer_flush float_inc float_shove float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc integer_yankdup float_sin float_yank in2 float_inc integer_dec float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc print_float integer_min float_inc float_yankdup float_add float_inc float_shove integer_rot float_shove float_mod float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_inc float_frominteger float_inc in1 integer_shove float_inc float_dec float_shove float_inc integer_sub integer_mult float_add print_float)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 51.0
Mean: 1.02
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2390.4464697
Median total errors in population: 168.0
Error averages by case: (98.43151149999993 3.4 80.93087860000001 3.61 86.72016169999998 2.884 95.2189485 2.97 101.76641690000007 4.393 97.3174073 3.579 90.77640719999998 2.546 88.140729 2.358 93.07503459999998 3.01 88.7601569 2.527 87.8722205 2.518 81.41750859999998 3.136 92.62544659999996 9.997 97.45553539999999 3.331 95.53545579999995 2.652 96.73487440000005 2.526 83.18682630000002 2.339 98.85810889999999 2.606 97.37191699999995 3.332 98.2261031 2.442 95.7724402 3.162 101.02009569999996 3.411 100.54234560000002 2.653 85.39605999999993 3.135 76.60187939999997 2.175)
Error minima by case: (1.0 1 0.468 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.9463 1 1.0 1 0.2525 1 1.0 1 0.1503 1 1.0 1 0.0 0 0.0 0 1.0 1 1.0 1 1.0 1 0.1475 1 1.0 1 1.0 1 0.0 0 0.0 0)
Average genome size in population (length): 94.229
Average program size in population (points): 95.229
Average percent parens in population: 0.011
Minimum age in population: 170.441237293611
Maximum age in population: 175.2652683133581
Average age in population: 173.2456602966354
Median age in population: 173.3014844248207
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.906
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.906
Total error diversity:				 0.094
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 313613989
--- Timings ---
Current time: 1529615372252 milliseconds
Total Time:         546.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.2 seconds, 32.6%
Fitness Testing:    288.5 seconds, 52.8%
Report:              79.7 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 72.9485971213 
Correct output: -5.4680423906  | Program output: -5.4680423906 
Correct output: -24.9418699852 | Program output: -24.9418699852
Correct output: 56.9568119314  | Program output: 56.9568119314 
Correct output: -31.6601191221 | Program output: -31.6601191221
Correct output: -37.1210864176 | Program output: -37.1210864176
Correct output: -79.2516975843 | Program output: -79.2516975843
Correct output: 44.9272196671  | Program output: 44.9272196671 
Correct output: 66.6210657667  | Program output: 66.6210657667 
Correct output: -55.0537383904 | Program output: -55.0537383904
Correct output: -79.6354294126 | Program output: -79.6354294126
Correct output: 1.2524717345   | Program output: 1.2524717345  
Correct output: -3.1599714069  | Program output: -3.1599714069 
Correct output: 129.8497046591 | Program output: 129.8497046591
Correct output: -125.0022721297 | Program output: -125.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 122.2843412425
Correct output: 33.2581162527  | Program output: 33.2581162527 
Correct output: 123.421863126  | Program output: 123.421863126 
Correct output: 106.1474875213 | Program output: 106.1474875213
Correct output: 12.1495725478  | Program output: 12.1495725478 
Correct output: -146.6027540177 | Program output: -146.6027540177
Correct output: -61.2140896321 | Program output: -61.2140896321
Correct output: 2.2138108865   | Program output: 2.2138108865  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction integer_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_flush} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction integer_mult} {:instruction float_shove} {:instruction integer_rot} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_swap} {:instruction float_inc} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_sin} {:instruction float_yank} {:instruction float_yank} {:instruction float_inc} {:instruction integer_dec} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_750} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_add} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_mod} {:instruction float_inc} {:instruction float_shove} {:instruction integer_rot} {:instruction float_shove} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_765} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_flush} {:instruction in1} {:instruction integer_shove} {:instruction float_inc} {:instruction float_dec} {:instruction float_shove} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_add} {:instruction print_float})
Best program: (float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove integer_rot float_inc float_inc float_shove float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc integer_yankdup float_sin float_yank float_yank float_inc integer_dec float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc print_float integer_min float_inc float_yankdup float_add float_inc float_shove integer_rot float_shove float_mod float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_frominteger integer_flush in1 integer_shove float_inc float_dec float_shove float_inc integer_sub integer_mult float_add print_float)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 1925.5815929999999
Median total errors in population: 103.0
Error averages by case: (78.70314989999994 3.283 65.687184 3.389 67.90751960000001 2.515 76.7053443 2.581 83.27064340000004 4.223 78.06678360000001 3.483 73.0124166 2.46 69.05999759999997 2.305 73.20849999999999 2.521 69.62942989999999 2.451 70.58977889999998 2.448 66.6447633 3.015 75.79229509999993 5.339 77.41878779999998 3.265 76.18896519999996 2.59 77.02091680000001 2.453 66.34898130000002 2.25 78.88068179999998 2.541 77.98121429999999 3.172 78.21719440000001 2.372 75.80773520000001 2.667 82.1147456 3.259 80.72180159999998 2.624 68.60718389999997 3.03 65.5405789 2.219)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 94.299
Average program size in population (points): 95.299
Average percent parens in population: 0.011
Minimum age in population: 171.9488650600729
Maximum age in population: 176.4662365751929
Average age in population: 174.7188688330868
Median age in population: 174.793236945416
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.1
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 315971639
--- Timings ---
Current time: 1529615376432 milliseconds
Total Time:         550.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.7 seconds, 32.6%
Fitness Testing:    290.5 seconds, 52.8%
Report:              80.3 seconds, 14.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 124
Successful program: (float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove integer_rot float_inc float_inc float_shove float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc integer_yankdup float_sin float_yank float_yank float_inc integer_dec float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc print_float integer_min float_inc float_yankdup float_add float_inc float_shove integer_rot float_shove float_mod float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_frominteger integer_flush in1 integer_shove float_inc float_dec float_shove float_inc integer_sub integer_mult float_add print_float)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 95


Auto-simplifying with starting size: 95
step: 0
program: (float_min integer_swap float_inc float_inc float_inc float_shove float_inc float_inc integer_flush float_inc float_inc float_shove integer_mult float_shove integer_rot float_inc float_inc float_shove float_swap float_inc integer_add float_yank in2 float_inc float_inc float_inc float_shove float_inc float_inc integer_yankdup float_sin float_yank float_yank float_inc integer_dec float_inc float_shove float_inc float_inc tagged_750 float_shove float_inc float_inc float_inc float_inc print_float integer_min float_inc float_yankdup float_add float_inc float_shove integer_rot float_shove float_mod float_inc float_shove integer_rot float_shove float_inc float_inc tagged_765 float_inc float_inc float_inc float_yank float_inc float_inc float_inc float_inc float_yank float_inc float_inc integer_dup float_inc float_inc float_inc float_inc float_inc float_inc float_inc integer_shove float_frominteger integer_flush in1 integer_shove float_inc float_dec float_shove float_inc integer_sub integer_mult float_add print_float)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 95

step: 500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 72.9485971213  | Program output: 72.9485971213 
Correct output: -5.4680423906  | Program output: -5.4680423906 
Correct output: -24.9418699852 | Program output: -24.9418699852
Correct output: 56.9568119314  | Program output: 56.9568119314 
Correct output: -31.6601191221 | Program output: -31.6601191221
Correct output: -37.1210864176 | Program output: -37.1210864176
Correct output: -79.2516975843 | Program output: -79.2516975843
Correct output: 44.9272196671  | Program output: 44.9272196671 
Correct output: 66.6210657667  | Program output: 66.6210657667 
Correct output: -55.0537383904 | Program output: -55.0537383904
Correct output: -79.6354294126 | Program output: -79.6354294126
Correct output: 1.2524717345   | Program output: 1.2524717345  
Correct output: -3.1599714069  | Program output: -3.1599714069 
Correct output: 129.8497046591 | Program output: 129.8497046591
Correct output: -125.0022721297 | Program output: -125.0022721297
Correct output: 141.1949920159 | Program output: 141.1949920159
Correct output: -37.2353445012 | Program output: -37.2353445012
Correct output: 122.2843412425 | Program output: 122.2843412425
Correct output: 33.2581162527  | Program output: 33.2581162527 
Correct output: 123.421863126  | Program output: 123.421863126 
Correct output: 106.1474875213 | Program output: 106.1474875213
Correct output: 12.1495725478  | Program output: 12.1495725478 
Correct output: -146.6027540177 | Program output: -146.6027540177
Correct output: -61.2140896321 | Program output: -61.2140896321
Correct output: 2.2138108865   | Program output: 2.2138108865  
;;******************************
