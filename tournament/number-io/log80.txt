Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-22.480814074445348 26] 3.519185925554652]
Train Case:   1 | Input/Output: [[91.9603289886011 60] 151.9603289886011]
Train Case:   2 | Input/Output: [[-75.33861394933179 -79] -154.33861394933177]
Train Case:   3 | Input/Output: [[65.68994065718348 81] 146.68994065718348]
Train Case:   4 | Input/Output: [[13.096159227406119 -55] -41.90384077259388]
Train Case:   5 | Input/Output: [[-83.45786057657887 78] -5.457860576578867]
Train Case:   6 | Input/Output: [[-66.05873065068874 56] -10.058730650688744]
Train Case:   7 | Input/Output: [[71.23822574604887 -8] 63.23822574604887]
Train Case:   8 | Input/Output: [[-94.845327027247 55] -39.845327027246995]
Train Case:   9 | Input/Output: [[1.890471682212052 -13] -11.109528317787948]
Train Case:  10 | Input/Output: [[8.375124655688325 -74] -65.62487534431168]
Train Case:  11 | Input/Output: [[36.94897542910326 56] 92.94897542910326]
Train Case:  12 | Input/Output: [[-37.671112690245835 -52] -89.67111269024583]
Train Case:  13 | Input/Output: [[79.86078042743691 8] 87.86078042743691]
Train Case:  14 | Input/Output: [[57.34178857878871 -46] 11.341788578788709]
Train Case:  15 | Input/Output: [[-90.04527297235445 29] -61.045272972354454]
Train Case:  16 | Input/Output: [[48.29093921231947 36] 84.29093921231947]
Train Case:  17 | Input/Output: [[-10.127415585378756 84] 73.87258441462124]
Train Case:  18 | Input/Output: [[-86.90997221452793 89] 2.090027785472074]
Train Case:  19 | Input/Output: [[89.71755184426456 -91] -1.2824481557354375]
Train Case:  20 | Input/Output: [[-90.24814383932895 91] 0.7518561606710534]
Train Case:  21 | Input/Output: [[57.56832722211965 -11] 46.56832722211965]
Train Case:  22 | Input/Output: [[-31.12128046508016 76] 44.87871953491984]
Train Case:  23 | Input/Output: [[37.796727502708194 -93] -55.203272497291806]
Train Case:  24 | Input/Output: [[93.64338971192407 -92] 1.6433897119240726]
Test Case:   0 | Input/Output: [[1.2456690495865246 77] 78.24566904958652]
Test Case:   1 | Input/Output: [[-41.052204014297125 -27] -68.05220401429713]
Test Case:   2 | Input/Output: [[-69.19029026436381 -4] -73.19029026436381]
Test Case:   3 | Input/Output: [[-31.78053363659579 60] 28.21946636340421]
Test Case:   4 | Input/Output: [[38.143708401985435 49] 87.14370840198544]
Test Case:   5 | Input/Output: [[77.50982864150458 -3] 74.50982864150458]
Test Case:   6 | Input/Output: [[-95.11098313362037 38] -57.110983133620365]
Test Case:   7 | Input/Output: [[67.15086310163142 -11] 56.150863101631415]
Test Case:   8 | Input/Output: [[97.05951987605016 -41] 56.05951987605016]
Test Case:   9 | Input/Output: [[93.55133019150082 30] 123.55133019150082]
Test Case:  10 | Input/Output: [[-57.41407061806814 64] 6.585929381931862]
Test Case:  11 | Input/Output: [[4.234942884313028 -21] -16.76505711568697]
Test Case:  12 | Input/Output: [[83.8625359044457 -90] -6.137464095554293]
Test Case:  13 | Input/Output: [[2.1508608035887704 51] 53.15086080358877]
Test Case:  14 | Input/Output: [[33.163703953666555 14] 47.163703953666555]
Test Case:  15 | Input/Output: [[81.41123604403657 -100] -18.58876395596343]
Test Case:  16 | Input/Output: [[71.82196945118537 85] 156.82196945118537]
Test Case:  17 | Input/Output: [[-6.528499838142082 -83] -89.52849983814208]
Test Case:  18 | Input/Output: [[-10.09430278849544 -32] -42.09430278849544]
Test Case:  19 | Input/Output: [[-53.36412910888748 18] -35.36412910888748]
Test Case:  20 | Input/Output: [[11.422988624363 -5] 6.4229886243630006]
Test Case:  21 | Input/Output: [[40.00684259585384 -45] -4.99315740414616]
Test Case:  22 | Input/Output: [[92.12970046482312 80] 172.12970046482312]
Test Case:  23 | Input/Output: [[10.94280559020811 -24] -13.05719440979189]
Test Case:  24 | Input/Output: [[97.31906432208544 -29] 68.31906432208544]
Test Case:  25 | Input/Output: [[-78.29480197147694 86] 7.705198028523057]
Test Case:  26 | Input/Output: [[8.52363492106683 -9] -0.4763650789331706]
Test Case:  27 | Input/Output: [[6.700728046406269 85] 91.70072804640627]
Test Case:  28 | Input/Output: [[73.33410692615584 -12] 61.33410692615584]
Test Case:  29 | Input/Output: [[-46.95265698266851 15] -31.952656982668508]
Test Case:  30 | Input/Output: [[-3.3486341651184546 -14] -17.348634165118455]
Test Case:  31 | Input/Output: [[76.03893343479714 -68] 8.038933434797144]
Test Case:  32 | Input/Output: [[85.49842144509563 82] 167.49842144509563]
Test Case:  33 | Input/Output: [[-50.84327653746148 -8] -58.84327653746148]
Test Case:  34 | Input/Output: [[17.826982539287812 -58] -40.17301746071219]
Test Case:  35 | Input/Output: [[3.982386670934673 -46] -42.01761332906533]
Test Case:  36 | Input/Output: [[-29.128517538649007 0] -29.128517538649007]
Test Case:  37 | Input/Output: [[-7.819358065050125 -56] -63.819358065050125]
Test Case:  38 | Input/Output: [[-68.89583372791357 -94] -162.89583372791355]
Test Case:  39 | Input/Output: [[-19.556321490461357 -57] -76.55632149046136]
Test Case:  40 | Input/Output: [[-54.656520758470585 6] -48.656520758470585]
Test Case:  41 | Input/Output: [[-54.65881269031407 11] -43.65881269031407]
Test Case:  42 | Input/Output: [[-48.89838066295687 6] -42.89838066295687]
Test Case:  43 | Input/Output: [[-30.833538905163522 -35] -65.83353890516352]
Test Case:  44 | Input/Output: [[-93.99760802879658 0] -93.99760802879658]
Test Case:  45 | Input/Output: [[-26.704318627338893 -65] -91.70431862733889]
Test Case:  46 | Input/Output: [[46.142299693139904 -50] -3.857700306860096]
Test Case:  47 | Input/Output: [[86.84150006217436 -42] 44.84150006217436]
Test Case:  48 | Input/Output: [[-7.737795177852377 -85] -92.73779517785238]
Test Case:  49 | Input/Output: [[95.22870240338466 16] 111.22870240338466]
Test Case:  50 | Input/Output: [[-81.73759902724538 -92] -173.73759902724538]
Test Case:  51 | Input/Output: [[-38.640903801282974 59] 20.359096198717026]
Test Case:  52 | Input/Output: [[-17.948631496084204 -13] -30.948631496084204]
Test Case:  53 | Input/Output: [[19.27467527722979 66] 85.27467527722979]
Test Case:  54 | Input/Output: [[-4.102144448035688 87] 82.89785555196431]
Test Case:  55 | Input/Output: [[-93.72481121918577 11] -82.72481121918577]
Test Case:  56 | Input/Output: [[67.74652199706011 82] 149.7465219970601]
Test Case:  57 | Input/Output: [[11.898550695116668 5] 16.89855069511667]
Test Case:  58 | Input/Output: [[43.64293328546725 1] 44.64293328546725]
Test Case:  59 | Input/Output: [[62.43666652875734 -10] 52.43666652875734]
Test Case:  60 | Input/Output: [[-25.381808814703803 57] 31.618191185296197]
Test Case:  61 | Input/Output: [[95.55329140436282 -83] 12.553291404362824]
Test Case:  62 | Input/Output: [[47.10763627610527 -17] 30.107636276105268]
Test Case:  63 | Input/Output: [[-38.43528284025486 33] -5.435282840254857]
Test Case:  64 | Input/Output: [[-26.86336077551259 -89] -115.86336077551259]
Test Case:  65 | Input/Output: [[-75.84424754521481 95] 19.155752454785187]
Test Case:  66 | Input/Output: [[60.95149156229715 19] 79.95149156229715]
Test Case:  67 | Input/Output: [[-30.751287720255732 -10] -40.75128772025573]
Test Case:  68 | Input/Output: [[-55.49529265868516 -72] -127.49529265868516]
Test Case:  69 | Input/Output: [[-45.14212622103748 -83] -128.14212622103747]
Test Case:  70 | Input/Output: [[81.64729774040967 -98] -16.35270225959033]
Test Case:  71 | Input/Output: [[99.18500173367241 50] 149.1850017336724]
Test Case:  72 | Input/Output: [[-38.20062561786837 -94] -132.20062561786835]
Test Case:  73 | Input/Output: [[83.74322068846746 40] 123.74322068846746]
Test Case:  74 | Input/Output: [[19.30306079109218 -54] -34.69693920890782]
Test Case:  75 | Input/Output: [[29.262055887481353 -34] -4.737944112518647]
Test Case:  76 | Input/Output: [[-79.33127900605308 -71] -150.33127900605308]
Test Case:  77 | Input/Output: [[72.30533461327369 -84] -11.694665386726314]
Test Case:  78 | Input/Output: [[22.239481604784856 83] 105.23948160478486]
Test Case:  79 | Input/Output: [[-67.15064124297362 -51] -118.15064124297362]
Test Case:  80 | Input/Output: [[-58.73374785821311 -84] -142.73374785821312]
Test Case:  81 | Input/Output: [[-36.01995109427254 83] 46.98004890572746]
Test Case:  82 | Input/Output: [[-86.98278399482275 -67] -153.98278399482274]
Test Case:  83 | Input/Output: [[-89.56285675289737 38] -51.562856752897375]
Test Case:  84 | Input/Output: [[-89.89536525463424 -72] -161.89536525463424]
Test Case:  85 | Input/Output: [[-6.395302491784975 100] 93.60469750821503]
Test Case:  86 | Input/Output: [[-21.16806196483539 3] -18.16806196483539]
Test Case:  87 | Input/Output: [[16.69844665554973 -71] -54.30155334445027]
Test Case:  88 | Input/Output: [[61.27302615594411 77] 138.2730261559441]
Test Case:  89 | Input/Output: [[84.87881291224798 -3] 81.87881291224798]
Test Case:  90 | Input/Output: [[17.466090912572525 -51] -33.533909087427475]
Test Case:  91 | Input/Output: [[-71.90112792344189 -91] -162.9011279234419]
Test Case:  92 | Input/Output: [[94.19241311049217 -57] 37.19241311049217]
Test Case:  93 | Input/Output: [[-33.53491265444342 61] 27.465087345556583]
Test Case:  94 | Input/Output: [[6.653709105134126 -9] -2.3462908948658736]
Test Case:  95 | Input/Output: [[90.6750155390682 -58] 32.6750155390682]
Test Case:  96 | Input/Output: [[48.51158639135079 -11] 37.51158639135079]
Test Case:  97 | Input/Output: [[-68.05052656272876 -43] -111.05052656272876]
Test Case:  98 | Input/Output: [[-76.92172723535116 -91] -167.92172723535117]
Test Case:  99 | Input/Output: [[91.09011208541898 64] 155.09011208541898]
Test Case: 100 | Input/Output: [[-92.17959323620832 -27] -119.17959323620832]
Test Case: 101 | Input/Output: [[81.74621961345508 93] 174.74621961345508]
Test Case: 102 | Input/Output: [[62.167506276931505 -95] -32.832493723068495]
Test Case: 103 | Input/Output: [[35.85247418805068 -100] -64.14752581194932]
Test Case: 104 | Input/Output: [[-33.74682504547677 -91] -124.74682504547677]
Test Case: 105 | Input/Output: [[-71.39583054681836 -90] -161.39583054681836]
Test Case: 106 | Input/Output: [[-23.786428938984088 -67] -90.78642893898409]
Test Case: 107 | Input/Output: [[-85.20755217856244 -12] -97.20755217856244]
Test Case: 108 | Input/Output: [[-22.574726664711008 10] -12.574726664711008]
Test Case: 109 | Input/Output: [[-56.26846609856096 43] -13.268466098560957]
Test Case: 110 | Input/Output: [[27.62463251634692 83] 110.62463251634692]
Test Case: 111 | Input/Output: [[-58.17552712950966 34] -24.17552712950966]
Test Case: 112 | Input/Output: [[-41.56926791521918 -33] -74.56926791521917]
Test Case: 113 | Input/Output: [[79.4074543817415 -83] -3.592545618258498]
Test Case: 114 | Input/Output: [[-15.517395332275768 -97] -112.51739533227577]
Test Case: 115 | Input/Output: [[-37.44133370236871 40] 2.558666297631291]
Test Case: 116 | Input/Output: [[-6.814136299350679 -51] -57.81413629935068]
Test Case: 117 | Input/Output: [[-90.77310555296172 79] -11.773105552961724]
Test Case: 118 | Input/Output: [[-23.641139528209408 -8] -31.641139528209408]
Test Case: 119 | Input/Output: [[63.727713258823684 52] 115.72771325882368]
Test Case: 120 | Input/Output: [[8.959273714747411 61] 69.95927371474741]
Test Case: 121 | Input/Output: [[-72.49720235074932 -26] -98.49720235074932]
Test Case: 122 | Input/Output: [[73.34546619732305 35] 108.34546619732305]
Test Case: 123 | Input/Output: [[-26.312690979014747 -81] -107.31269097901475]
Test Case: 124 | Input/Output: [[-78.92814770089444 -95] -173.92814770089444]
Test Case: 125 | Input/Output: [[-68.25896869438932 -90] -158.25896869438932]
Test Case: 126 | Input/Output: [[-98.29054900031657 25] -73.29054900031657]
Test Case: 127 | Input/Output: [[28.80597566572996 -34] -5.19402433427004]
Test Case: 128 | Input/Output: [[52.861524876389296 66] 118.8615248763893]
Test Case: 129 | Input/Output: [[-17.173610025540853 -29] -46.17361002554085]
Test Case: 130 | Input/Output: [[10.000065311894588 76] 86.00006531189459]
Test Case: 131 | Input/Output: [[82.12546508015075 -99] -16.874534919849253]
Test Case: 132 | Input/Output: [[-43.67327270279644 -47] -90.67327270279644]
Test Case: 133 | Input/Output: [[-46.67228194799211 87] 40.32771805200789]
Test Case: 134 | Input/Output: [[-8.678151623282233 2] -6.678151623282233]
Test Case: 135 | Input/Output: [[-69.78102427235713 11] -58.78102427235713]
Test Case: 136 | Input/Output: [[47.884837293668284 -90] -42.115162706331716]
Test Case: 137 | Input/Output: [[-77.84720640946314 91] 13.15279359053686]
Test Case: 138 | Input/Output: [[-63.42771361206243 66] 2.5722863879375666]
Test Case: 139 | Input/Output: [[52.204858172275976 -16] 36.204858172275976]
Test Case: 140 | Input/Output: [[-88.9244890571998 -24] -112.9244890571998]
Test Case: 141 | Input/Output: [[-89.60050288831556 -70] -159.60050288831556]
Test Case: 142 | Input/Output: [[12.497646436192554 92] 104.49764643619255]
Test Case: 143 | Input/Output: [[-1.529190891939976 63] 61.470809108060024]
Test Case: 144 | Input/Output: [[-7.79775373412086 -37] -44.79775373412086]
Test Case: 145 | Input/Output: [[-44.16112069105071 -6] -50.16112069105071]
Test Case: 146 | Input/Output: [[39.952337427493376 16] 55.952337427493376]
Test Case: 147 | Input/Output: [[55.252385360919845 48] 103.25238536091985]
Test Case: 148 | Input/Output: [[-25.087319391053526 -11] -36.087319391053526]
Test Case: 149 | Input/Output: [[-34.65939108674385 47] 12.340608913256148]
Test Case: 150 | Input/Output: [[91.39027222222157 -87] 4.390272222221569]
Test Case: 151 | Input/Output: [[77.55294022707531 -25] 52.55294022707531]
Test Case: 152 | Input/Output: [[88.3192987516772 54] 142.3192987516772]
Test Case: 153 | Input/Output: [[74.27872149508048 -27] 47.278721495080475]
Test Case: 154 | Input/Output: [[22.481790351583243 60] 82.48179035158324]
Test Case: 155 | Input/Output: [[41.976647823614144 19] 60.976647823614144]
Test Case: 156 | Input/Output: [[-93.68236503428564 -81] -174.68236503428562]
Test Case: 157 | Input/Output: [[-55.94694944528202 -30] -85.94694944528203]
Test Case: 158 | Input/Output: [[-96.85253566998102 -32] -128.85253566998102]
Test Case: 159 | Input/Output: [[-30.099533238196628 -42] -72.09953323819663]
Test Case: 160 | Input/Output: [[-70.90053210021185 6] -64.90053210021185]
Test Case: 161 | Input/Output: [[69.47638714035565 70] 139.47638714035565]
Test Case: 162 | Input/Output: [[3.962277032077921 -97] -93.03772296792208]
Test Case: 163 | Input/Output: [[-93.16392307252868 3] -90.16392307252868]
Test Case: 164 | Input/Output: [[16.097500489940074 -80] -63.902499510059926]
Test Case: 165 | Input/Output: [[-3.0093114179521763 36] 32.990688582047824]
Test Case: 166 | Input/Output: [[90.03706326168779 -25] 65.03706326168779]
Test Case: 167 | Input/Output: [[-57.61567889837498 31] -26.61567889837498]
Test Case: 168 | Input/Output: [[55.71631836096839 -47] 8.716318360968387]
Test Case: 169 | Input/Output: [[16.821428993338984 -12] 4.821428993338984]
Test Case: 170 | Input/Output: [[-19.080192880514232 30] 10.919807119485768]
Test Case: 171 | Input/Output: [[77.23103614414913 45] 122.23103614414913]
Test Case: 172 | Input/Output: [[-11.328841123841855 93] 81.67115887615815]
Test Case: 173 | Input/Output: [[65.94840567839583 -99] -33.05159432160417]
Test Case: 174 | Input/Output: [[-87.74035391284099 -100] -187.740353912841]
Test Case: 175 | Input/Output: [[43.334424783014356 -83] -39.665575216985644]
Test Case: 176 | Input/Output: [[-90.35182522577145 -12] -102.35182522577145]
Test Case: 177 | Input/Output: [[6.83097363819833 52] 58.83097363819833]
Test Case: 178 | Input/Output: [[-64.04386196417231 -79] -143.04386196417232]
Test Case: 179 | Input/Output: [[20.33257172218093 -58] -37.66742827781907]
Test Case: 180 | Input/Output: [[70.16838823932565 95] 165.16838823932565]
Test Case: 181 | Input/Output: [[1.7853150867664453 33] 34.785315086766445]
Test Case: 182 | Input/Output: [[92.83466524166963 50] 142.83466524166963]
Test Case: 183 | Input/Output: [[-98.41765014401955 -83] -181.41765014401955]
Test Case: 184 | Input/Output: [[94.55295070636208 -10] 84.55295070636208]
Test Case: 185 | Input/Output: [[-57.22267903754057 52] -5.222679037540573]
Test Case: 186 | Input/Output: [[91.15230552261465 19] 110.15230552261465]
Test Case: 187 | Input/Output: [[-43.25710539195418 -73] -116.25710539195418]
Test Case: 188 | Input/Output: [[-7.669119153733007 -59] -66.669119153733]
Test Case: 189 | Input/Output: [[-43.25794217419152 -70] -113.25794217419153]
Test Case: 190 | Input/Output: [[-28.294166533330184 -90] -118.29416653333018]
Test Case: 191 | Input/Output: [[-84.21544881134074 89] 4.784551188659265]
Test Case: 192 | Input/Output: [[-42.18905404437532 -33] -75.18905404437533]
Test Case: 193 | Input/Output: [[-23.509453722478497 -75] -98.5094537224785]
Test Case: 194 | Input/Output: [[24.37597939204204 -73] -48.62402060795796]
Test Case: 195 | Input/Output: [[-95.12489856970194 92] -3.1248985697019407]
Test Case: 196 | Input/Output: [[56.01098088857708 42] 98.01098088857708]
Test Case: 197 | Input/Output: [[41.90755314885814 -15] 26.907553148858142]
Test Case: 198 | Input/Output: [[41.420739301367405 29] 70.4207393013674]
Test Case: 199 | Input/Output: [[6.161437116178519 94] 100.16143711617852]
Test Case: 200 | Input/Output: [[-67.35821223982508 7] -60.35821223982508]
Test Case: 201 | Input/Output: [[73.28582524675755 20] 93.28582524675755]
Test Case: 202 | Input/Output: [[-14.168363603850452 80] 65.83163639614955]
Test Case: 203 | Input/Output: [[-67.1870564314934 31] -36.1870564314934]
Test Case: 204 | Input/Output: [[-17.222907955433882 74] 56.77709204456612]
Test Case: 205 | Input/Output: [[-8.412123167360178 98] 89.58787683263982]
Test Case: 206 | Input/Output: [[40.00887911017429 -73] -32.99112088982571]
Test Case: 207 | Input/Output: [[56.98958197872082 -18] 38.98958197872082]
Test Case: 208 | Input/Output: [[-1.3455003241582943 -8] -9.345500324158294]
Test Case: 209 | Input/Output: [[-11.30329040472165 -49] -60.30329040472165]
Test Case: 210 | Input/Output: [[-31.265067848534684 91] 59.734932151465316]
Test Case: 211 | Input/Output: [[-57.161391908289616 18] -39.161391908289616]
Test Case: 212 | Input/Output: [[-36.05588498795107 9] -27.055884987951067]
Test Case: 213 | Input/Output: [[-99.63275558872138 -99] -198.63275558872138]
Test Case: 214 | Input/Output: [[77.8027843281788 -95] -17.197215671821198]
Test Case: 215 | Input/Output: [[2.8822777611635217 -76] -73.11772223883648]
Test Case: 216 | Input/Output: [[-77.86784220405383 -97] -174.86784220405383]
Test Case: 217 | Input/Output: [[-69.32829756994923 -47] -116.32829756994923]
Test Case: 218 | Input/Output: [[-98.3919579150386 33] -65.3919579150386]
Test Case: 219 | Input/Output: [[-56.766437097106184 66] 9.233562902893816]
Test Case: 220 | Input/Output: [[22.255510485176003 17] 39.255510485176]
Test Case: 221 | Input/Output: [[91.6419395166746 -86] 5.641939516674597]
Test Case: 222 | Input/Output: [[-30.609422406754064 -90] -120.60942240675406]
Test Case: 223 | Input/Output: [[-55.58100436544955 55] -0.5810043654495516]
Test Case: 224 | Input/Output: [[12.975077830967365 60] 72.97507783096736]
Test Case: 225 | Input/Output: [[38.14633566776263 46] 84.14633566776263]
Test Case: 226 | Input/Output: [[-50.33452759986397 -33] -83.33452759986397]
Test Case: 227 | Input/Output: [[24.401816036607002 -22] 2.401816036607002]
Test Case: 228 | Input/Output: [[-8.953393307243289 -26] -34.95339330724329]
Test Case: 229 | Input/Output: [[-2.0172445117873963 74] 71.9827554882126]
Test Case: 230 | Input/Output: [[50.32369999870687 -18] 32.32369999870687]
Test Case: 231 | Input/Output: [[69.2399313414841 -6] 63.239931341484095]
Test Case: 232 | Input/Output: [[-73.27318563951101 47] -26.273185639511013]
Test Case: 233 | Input/Output: [[-0.31501826259392374 47] 46.684981737406076]
Test Case: 234 | Input/Output: [[66.98861759805314 54] 120.98861759805314]
Test Case: 235 | Input/Output: [[-92.05286688647097 7] -85.05286688647097]
Test Case: 236 | Input/Output: [[-58.94355079471254 87] 28.056449205287457]
Test Case: 237 | Input/Output: [[33.09425069781142 -35] -1.9057493021885819]
Test Case: 238 | Input/Output: [[-25.04759899930073 92] 66.95240100069927]
Test Case: 239 | Input/Output: [[78.50077928923861 -13] 65.50077928923861]
Test Case: 240 | Input/Output: [[-90.81964348327539 -52] -142.8196434832754]
Test Case: 241 | Input/Output: [[5.134905071761423 -96] -90.86509492823858]
Test Case: 242 | Input/Output: [[4.276579045911205 -33] -28.723420954088795]
Test Case: 243 | Input/Output: [[49.91446603513572 -17] 32.91446603513572]
Test Case: 244 | Input/Output: [[-90.42110323049872 55] -35.421103230498716]
Test Case: 245 | Input/Output: [[50.930203804681895 76] 126.9302038046819]
Test Case: 246 | Input/Output: [[85.39055487576454 27] 112.39055487576454]
Test Case: 247 | Input/Output: [[-67.21643294128569 84] 16.78356705871431]
Test Case: 248 | Input/Output: [[94.21434155519381 -86] 8.214341555193812]
Test Case: 249 | Input/Output: [[48.70699342615512 -53] -4.2930065738448775]
Test Case: 250 | Input/Output: [[17.12947838921255 -55] -37.87052161078745]
Test Case: 251 | Input/Output: [[24.291371506194494 -13] 11.291371506194494]
Test Case: 252 | Input/Output: [[-76.67734883903631 -97] -173.6773488390363]
Test Case: 253 | Input/Output: [[51.20171833464377 -47] 4.201718334643772]
Test Case: 254 | Input/Output: [[-49.22433233768388 -32] -81.22433233768388]
Test Case: 255 | Input/Output: [[-42.072191368969044 61] 18.927808631030956]
Test Case: 256 | Input/Output: [[-64.35001084749292 49] -15.350010847492925]
Test Case: 257 | Input/Output: [[-50.58312231475408 -36] -86.58312231475408]
Test Case: 258 | Input/Output: [[42.51731081482424 89] 131.51731081482424]
Test Case: 259 | Input/Output: [[-33.94097364165469 -65] -98.9409736416547]
Test Case: 260 | Input/Output: [[-5.4237911058229145 -42] -47.423791105822914]
Test Case: 261 | Input/Output: [[-18.67909037221736 2] -16.67909037221736]
Test Case: 262 | Input/Output: [[99.64723245426279 55] 154.6472324542628]
Test Case: 263 | Input/Output: [[-94.70141236643596 -14] -108.70141236643596]
Test Case: 264 | Input/Output: [[-43.28140446468116 -96] -139.28140446468115]
Test Case: 265 | Input/Output: [[-83.99022174066187 -98] -181.99022174066187]
Test Case: 266 | Input/Output: [[2.7184413340648064 -97] -94.2815586659352]
Test Case: 267 | Input/Output: [[73.1440407637815 82] 155.1440407637815]
Test Case: 268 | Input/Output: [[-28.294336858764197 55] 26.705663141235803]
Test Case: 269 | Input/Output: [[97.29225432704115 -79] 18.29225432704115]
Test Case: 270 | Input/Output: [[-38.97215190586935 -95] -133.97215190586934]
Test Case: 271 | Input/Output: [[73.4373766471378 64] 137.4373766471378]
Test Case: 272 | Input/Output: [[-36.580216565636746 77] 40.419783434363254]
Test Case: 273 | Input/Output: [[-71.68200214170788 92] 20.317997858292117]
Test Case: 274 | Input/Output: [[-21.1090989356737 -29] -50.1090989356737]
Test Case: 275 | Input/Output: [[33.050668605544445 36] 69.05066860554444]
Test Case: 276 | Input/Output: [[23.54687221606602 55] 78.54687221606602]
Test Case: 277 | Input/Output: [[60.92533791354785 -35] 25.92533791354785]
Test Case: 278 | Input/Output: [[56.81349680624001 21] 77.81349680624001]
Test Case: 279 | Input/Output: [[86.4215636141885 90] 176.4215636141885]
Test Case: 280 | Input/Output: [[25.10584100748636 -10] 15.105841007486362]
Test Case: 281 | Input/Output: [[-67.10157682145012 -74] -141.10157682145012]
Test Case: 282 | Input/Output: [[-64.95443727260503 -95] -159.95443727260505]
Test Case: 283 | Input/Output: [[-54.407935946952904 -44] -98.4079359469529]
Test Case: 284 | Input/Output: [[-53.35689365935681 -49] -102.35689365935681]
Test Case: 285 | Input/Output: [[-9.432214183824186 72] 62.567785816175814]
Test Case: 286 | Input/Output: [[-29.413892760407734 92] 62.586107239592266]
Test Case: 287 | Input/Output: [[41.995099475070106 42] 83.9950994750701]
Test Case: 288 | Input/Output: [[-62.65750887149111 94] 31.34249112850889]
Test Case: 289 | Input/Output: [[20.96923404280338 69] 89.96923404280338]
Test Case: 290 | Input/Output: [[-60.38326318469436 -20] -80.38326318469436]
Test Case: 291 | Input/Output: [[-83.69002556083646 -5] -88.69002556083646]
Test Case: 292 | Input/Output: [[7.520225614820191 100] 107.52022561482019]
Test Case: 293 | Input/Output: [[7.924958347662653 85] 92.92495834766265]
Test Case: 294 | Input/Output: [[-55.65918424394436 26] -29.65918424394436]
Test Case: 295 | Input/Output: [[2.61782830311283 71] 73.61782830311283]
Test Case: 296 | Input/Output: [[-82.62875578155354 -26] -108.62875578155354]
Test Case: 297 | Input/Output: [[-37.9443790427717 92] 54.0556209572283]
Test Case: 298 | Input/Output: [[82.43254596330704 50] 132.43254596330704]
Test Case: 299 | Input/Output: [[57.52817964454559 -21] 36.52817964454559]
Test Case: 300 | Input/Output: [[-76.44789378364865 -6] -82.44789378364865]
Test Case: 301 | Input/Output: [[52.95797823899312 44] 96.95797823899312]
Test Case: 302 | Input/Output: [[78.92074638919729 -39] 39.92074638919729]
Test Case: 303 | Input/Output: [[-26.881436623849837 30] 3.1185633761501634]
Test Case: 304 | Input/Output: [[-31.037290972963746 61] 29.962709027036254]
Test Case: 305 | Input/Output: [[-73.18434882829163 67] -6.184348828291633]
Test Case: 306 | Input/Output: [[70.84142733727299 -11] 59.84142733727299]
Test Case: 307 | Input/Output: [[51.699538847293155 67] 118.69953884729316]
Test Case: 308 | Input/Output: [[-78.054274289359 9] -69.054274289359]
Test Case: 309 | Input/Output: [[14.593770448007689 -89] -74.40622955199231]
Test Case: 310 | Input/Output: [[-85.20188862415891 -100] -185.20188862415893]
Test Case: 311 | Input/Output: [[-4.3436879688241135 -89] -93.34368796882411]
Test Case: 312 | Input/Output: [[-61.666671763770765 -75] -136.66667176377075]
Test Case: 313 | Input/Output: [[78.27761314535758 75] 153.27761314535758]
Test Case: 314 | Input/Output: [[-86.70205817402189 -100] -186.7020581740219]
Test Case: 315 | Input/Output: [[14.08506588224779 6] 20.08506588224779]
Test Case: 316 | Input/Output: [[-9.674882439138884 55] 45.325117560861116]
Test Case: 317 | Input/Output: [[-4.766890516110351 49] 44.23310948388965]
Test Case: 318 | Input/Output: [[32.83841544152014 60] 92.83841544152014]
Test Case: 319 | Input/Output: [[-22.06255104573384 -16] -38.06255104573384]
Test Case: 320 | Input/Output: [[-8.099198789578239 -18] -26.09919878957824]
Test Case: 321 | Input/Output: [[49.973946570808636 39] 88.97394657080864]
Test Case: 322 | Input/Output: [[78.996170651413 100] 178.996170651413]
Test Case: 323 | Input/Output: [[18.424601421814657 11] 29.424601421814657]
Test Case: 324 | Input/Output: [[44.175878732547034 -75] -30.824121267452966]
Test Case: 325 | Input/Output: [[37.822325031679895 80] 117.8223250316799]
Test Case: 326 | Input/Output: [[-33.67117613007832 5] -28.671176130078322]
Test Case: 327 | Input/Output: [[61.60234495691827 -42] 19.602344956918273]
Test Case: 328 | Input/Output: [[37.60089264293532 44] 81.60089264293532]
Test Case: 329 | Input/Output: [[-14.508483849705797 64] 49.4915161502942]
Test Case: 330 | Input/Output: [[-3.861881370828172 -16] -19.861881370828172]
Test Case: 331 | Input/Output: [[12.934813310718923 80] 92.93481331071892]
Test Case: 332 | Input/Output: [[-53.30466136259959 -29] -82.30466136259959]
Test Case: 333 | Input/Output: [[-58.53714555605318 39] -19.537145556053183]
Test Case: 334 | Input/Output: [[11.41710826581803 10] 21.41710826581803]
Test Case: 335 | Input/Output: [[93.86584393426517 -4] 89.86584393426517]
Test Case: 336 | Input/Output: [[-60.09197305496665 -17] -77.09197305496664]
Test Case: 337 | Input/Output: [[77.30648125898671 34] 111.30648125898671]
Test Case: 338 | Input/Output: [[-70.23417214525702 44] -26.23417214525702]
Test Case: 339 | Input/Output: [[-34.62170717391169 44] 9.378292826088312]
Test Case: 340 | Input/Output: [[-83.23820380015114 12] -71.23820380015114]
Test Case: 341 | Input/Output: [[46.06479324340259 25] 71.06479324340259]
Test Case: 342 | Input/Output: [[-15.035517114633265 15] -0.03551711463326512]
Test Case: 343 | Input/Output: [[84.15065249480332 -88] -3.8493475051966755]
Test Case: 344 | Input/Output: [[70.54076405571095 24] 94.54076405571095]
Test Case: 345 | Input/Output: [[-65.19147984414039 -72] -137.1914798441404]
Test Case: 346 | Input/Output: [[50.15493501722639 25] 75.15493501722639]
Test Case: 347 | Input/Output: [[-19.36739569204289 16] -3.3673956920428907]
Test Case: 348 | Input/Output: [[-29.77893612443239 93] 63.22106387556761]
Test Case: 349 | Input/Output: [[-46.6003319087346 -7] -53.6003319087346]
Test Case: 350 | Input/Output: [[57.043695504338245 -57] 0.04369550433824543]
Test Case: 351 | Input/Output: [[-61.89078595557649 51] -10.89078595557649]
Test Case: 352 | Input/Output: [[8.36795518570392 93] 101.36795518570392]
Test Case: 353 | Input/Output: [[-5.578494246803658 -12] -17.578494246803658]
Test Case: 354 | Input/Output: [[92.35220398873616 46] 138.35220398873616]
Test Case: 355 | Input/Output: [[-42.95212335162635 72] 29.047876648373652]
Test Case: 356 | Input/Output: [[-47.340659770551795 -51] -98.3406597705518]
Test Case: 357 | Input/Output: [[16.659335204775047 42] 58.65933520477505]
Test Case: 358 | Input/Output: [[-43.42454461946228 61] 17.57545538053772]
Test Case: 359 | Input/Output: [[73.2581882394106 -18] 55.2581882394106]
Test Case: 360 | Input/Output: [[61.625708884703215 -6] 55.625708884703215]
Test Case: 361 | Input/Output: [[-24.558482539246995 -56] -80.558482539247]
Test Case: 362 | Input/Output: [[7.738865008410684 64] 71.73886500841068]
Test Case: 363 | Input/Output: [[45.15885890511859 -9] 36.15885890511859]
Test Case: 364 | Input/Output: [[-94.36585920513636 87] -7.36585920513636]
Test Case: 365 | Input/Output: [[45.07962318864952 -36] 9.07962318864952]
Test Case: 366 | Input/Output: [[78.6178380567408 -21] 57.617838056740794]
Test Case: 367 | Input/Output: [[43.28188469160693 83] 126.28188469160693]
Test Case: 368 | Input/Output: [[-79.6579472941976 -67] -146.65794729419758]
Test Case: 369 | Input/Output: [[64.87030428790655 62] 126.87030428790655]
Test Case: 370 | Input/Output: [[2.5570163733552818 8] 10.557016373355282]
Test Case: 371 | Input/Output: [[29.435186349337243 -40] -10.564813650662757]
Test Case: 372 | Input/Output: [[66.30564768432507 61] 127.30564768432507]
Test Case: 373 | Input/Output: [[94.8658952326212 -12] 82.8658952326212]
Test Case: 374 | Input/Output: [[-46.18553632668283 91] 44.81446367331717]
Test Case: 375 | Input/Output: [[-36.23529659376099 83] 46.76470340623901]
Test Case: 376 | Input/Output: [[-0.577081643448679 -71] -71.57708164344868]
Test Case: 377 | Input/Output: [[21.226541620276535 35] 56.226541620276535]
Test Case: 378 | Input/Output: [[92.26575875487083 43] 135.26575875487083]
Test Case: 379 | Input/Output: [[73.34620655913926 86] 159.34620655913926]
Test Case: 380 | Input/Output: [[-37.4603059100074 36] -1.4603059100073992]
Test Case: 381 | Input/Output: [[-65.24609825713239 -13] -78.24609825713239]
Test Case: 382 | Input/Output: [[-50.27445580889487 32] -18.27445580889487]
Test Case: 383 | Input/Output: [[1.55410297451472 -3] -1.44589702548528]
Test Case: 384 | Input/Output: [[63.280688402922635 -95] -31.719311597077365]
Test Case: 385 | Input/Output: [[1.4530377194803776 20] 21.453037719480378]
Test Case: 386 | Input/Output: [[-49.761285120601805 24] -25.761285120601805]
Test Case: 387 | Input/Output: [[-24.104568727634827 -24] -48.10456872763483]
Test Case: 388 | Input/Output: [[-96.55556787326634 12] -84.55556787326634]
Test Case: 389 | Input/Output: [[26.574509253600226 44] 70.57450925360023]
Test Case: 390 | Input/Output: [[62.29776559931901 -3] 59.29776559931901]
Test Case: 391 | Input/Output: [[68.24320994763079 55] 123.24320994763079]
Test Case: 392 | Input/Output: [[32.82723760981949 100] 132.8272376098195]
Test Case: 393 | Input/Output: [[-85.34686745163454 58] -27.346867451634537]
Test Case: 394 | Input/Output: [[-73.11728102490846 -75] -148.11728102490846]
Test Case: 395 | Input/Output: [[26.705422968668884 -91] -64.29457703133112]
Test Case: 396 | Input/Output: [[-66.96103281135623 -35] -101.96103281135623]
Test Case: 397 | Input/Output: [[54.40215418036007 5] 59.40215418036007]
Test Case: 398 | Input/Output: [[75.78369463725721 73] 148.7836946372572]
Test Case: 399 | Input/Output: [[-91.22130122521459 -90] -181.22130122521457]
Test Case: 400 | Input/Output: [[13.844793330808187 -16] -2.155206669191813]
Test Case: 401 | Input/Output: [[7.946465131196305 -73] -65.0535348688037]
Test Case: 402 | Input/Output: [[47.69382877377052 -63] -15.30617122622948]
Test Case: 403 | Input/Output: [[-78.63409459427334 -59] -137.63409459427334]
Test Case: 404 | Input/Output: [[-17.198405529439384 -81] -98.19840552943938]
Test Case: 405 | Input/Output: [[36.88829989980172 -27] 9.888299899801723]
Test Case: 406 | Input/Output: [[-57.65228128045028 -3] -60.65228128045028]
Test Case: 407 | Input/Output: [[2.5063758895648363 -7] -4.493624110435164]
Test Case: 408 | Input/Output: [[-29.93423315204315 34] 4.065766847956851]
Test Case: 409 | Input/Output: [[-27.168752007678364 -78] -105.16875200767836]
Test Case: 410 | Input/Output: [[72.83762513465953 -30] 42.83762513465953]
Test Case: 411 | Input/Output: [[-50.845423696035596 -71] -121.8454236960356]
Test Case: 412 | Input/Output: [[-68.2767511262789 -81] -149.2767511262789]
Test Case: 413 | Input/Output: [[11.39539915457371 22] 33.39539915457371]
Test Case: 414 | Input/Output: [[-91.55819434949987 -2] -93.55819434949987]
Test Case: 415 | Input/Output: [[88.50140161847435 -3] 85.50140161847435]
Test Case: 416 | Input/Output: [[59.32433968912429 74] 133.3243396891243]
Test Case: 417 | Input/Output: [[-95.85316388990637 68] -27.85316388990637]
Test Case: 418 | Input/Output: [[82.95528822708869 73] 155.9552882270887]
Test Case: 419 | Input/Output: [[-20.525136500932973 -79] -99.52513650093297]
Test Case: 420 | Input/Output: [[11.017240061995338 -71] -59.98275993800466]
Test Case: 421 | Input/Output: [[-1.277796971313137 -13] -14.277796971313137]
Test Case: 422 | Input/Output: [[-86.43691608582236 -58] -144.43691608582236]
Test Case: 423 | Input/Output: [[21.278273140765208 60] 81.27827314076521]
Test Case: 424 | Input/Output: [[0.31847722129228373 -72] -71.68152277870772]
Test Case: 425 | Input/Output: [[-55.129991767917645 -56] -111.12999176791764]
Test Case: 426 | Input/Output: [[-98.71695549365734 -46] -144.71695549365734]
Test Case: 427 | Input/Output: [[17.799532313784283 -44] -26.200467686215717]
Test Case: 428 | Input/Output: [[93.99706425624669 -72] 21.997064256246688]
Test Case: 429 | Input/Output: [[32.73329457437609 20] 52.73329457437609]
Test Case: 430 | Input/Output: [[74.30818165358946 9] 83.30818165358946]
Test Case: 431 | Input/Output: [[-30.868189432922975 15] -15.868189432922975]
Test Case: 432 | Input/Output: [[55.27350739238727 -14] 41.27350739238727]
Test Case: 433 | Input/Output: [[-31.330801273720297 51] 19.669198726279703]
Test Case: 434 | Input/Output: [[80.53599005582635 -6] 74.53599005582635]
Test Case: 435 | Input/Output: [[-96.88826929316572 33] -63.88826929316572]
Test Case: 436 | Input/Output: [[-7.936690679766926 -73] -80.93669067976693]
Test Case: 437 | Input/Output: [[-2.0085711554354617 -63] -65.00857115543546]
Test Case: 438 | Input/Output: [[52.65881736563355 23] 75.65881736563355]
Test Case: 439 | Input/Output: [[2.6242198542741733 31] 33.62421985427417]
Test Case: 440 | Input/Output: [[-74.33649065679248 -3] -77.33649065679248]
Test Case: 441 | Input/Output: [[-76.03637692605345 -28] -104.03637692605345]
Test Case: 442 | Input/Output: [[19.215786923989413 93] 112.21578692398941]
Test Case: 443 | Input/Output: [[-14.401071937308927 -76] -90.40107193730893]
Test Case: 444 | Input/Output: [[40.07403743420187 -80] -39.92596256579813]
Test Case: 445 | Input/Output: [[11.477803541996721 -59] -47.52219645800328]
Test Case: 446 | Input/Output: [[-76.41143817104357 -11] -87.41143817104357]
Test Case: 447 | Input/Output: [[24.69997520838139 5] 29.69997520838139]
Test Case: 448 | Input/Output: [[-61.43219761370131 -83] -144.4321976137013]
Test Case: 449 | Input/Output: [[0.15937019567735433 6] 6.159370195677354]
Test Case: 450 | Input/Output: [[2.1679182360405633 66] 68.16791823604056]
Test Case: 451 | Input/Output: [[-42.337605341308745 55] 12.662394658691255]
Test Case: 452 | Input/Output: [[32.04169667234754 -73] -40.95830332765246]
Test Case: 453 | Input/Output: [[22.454630872258875 94] 116.45463087225887]
Test Case: 454 | Input/Output: [[86.78755986018018 -88] -1.2124401398198188]
Test Case: 455 | Input/Output: [[-79.34143181866027 89] 9.658568181339731]
Test Case: 456 | Input/Output: [[-93.63177083119156 -22] -115.63177083119156]
Test Case: 457 | Input/Output: [[27.56025276002481 26] 53.56025276002481]
Test Case: 458 | Input/Output: [[-34.72554176111167 55] 20.27445823888833]
Test Case: 459 | Input/Output: [[-47.81070003977672 -60] -107.81070003977672]
Test Case: 460 | Input/Output: [[-48.348035088037086 -76] -124.34803508803708]
Test Case: 461 | Input/Output: [[-89.6237859958849 -21] -110.6237859958849]
Test Case: 462 | Input/Output: [[65.08587833416695 10] 75.08587833416695]
Test Case: 463 | Input/Output: [[65.33862246881111 -4] 61.33862246881111]
Test Case: 464 | Input/Output: [[-73.22150996241128 89] 15.778490037588725]
Test Case: 465 | Input/Output: [[91.46405693706265 79] 170.46405693706265]
Test Case: 466 | Input/Output: [[87.30770743134556 -87] 0.30770743134556255]
Test Case: 467 | Input/Output: [[-35.29062083046274 26] -9.290620830462743]
Test Case: 468 | Input/Output: [[-80.23629497197528 93] 12.763705028024717]
Test Case: 469 | Input/Output: [[-44.49973901017168 61] 16.50026098982832]
Test Case: 470 | Input/Output: [[-89.64448846343024 47] -42.644488463430235]
Test Case: 471 | Input/Output: [[-88.14460540153055 -57] -145.14460540153055]
Test Case: 472 | Input/Output: [[-81.69908559012724 54] -27.69908559012724]
Test Case: 473 | Input/Output: [[-38.21621287349546 9] -29.216212873495458]
Test Case: 474 | Input/Output: [[83.93366875420836 4] 87.93366875420836]
Test Case: 475 | Input/Output: [[0.9362765999107836 -54] -53.063723400089216]
Test Case: 476 | Input/Output: [[22.949355964618604 -58] -35.050644035381396]
Test Case: 477 | Input/Output: [[-96.50440083959752 47] -49.50440083959752]
Test Case: 478 | Input/Output: [[-61.15232178936372 97] 35.84767821063628]
Test Case: 479 | Input/Output: [[-39.968677686411084 -53] -92.96867768641108]
Test Case: 480 | Input/Output: [[-52.33308791632998 69] 16.66691208367002]
Test Case: 481 | Input/Output: [[25.867365964442214 31] 56.867365964442214]
Test Case: 482 | Input/Output: [[40.066310799750624 -57] -16.933689200249376]
Test Case: 483 | Input/Output: [[64.77927858887827 -29] 35.77927858887827]
Test Case: 484 | Input/Output: [[-49.95151784777994 43] -6.9515178477799395]
Test Case: 485 | Input/Output: [[34.233970524319176 35] 69.23397052431918]
Test Case: 486 | Input/Output: [[68.42797320978485 -5] 63.42797320978485]
Test Case: 487 | Input/Output: [[-55.29606951042909 -55] -110.29606951042909]
Test Case: 488 | Input/Output: [[84.73759715095682 -2] 82.73759715095682]
Test Case: 489 | Input/Output: [[-2.7951291279587593 31] 28.20487087204124]
Test Case: 490 | Input/Output: [[-10.256246492853876 72] 61.743753507146124]
Test Case: 491 | Input/Output: [[39.939695893834966 -53] -13.060304106165034]
Test Case: 492 | Input/Output: [[-31.33921917286871 92] 60.66078082713129]
Test Case: 493 | Input/Output: [[-51.93796076209074 -99] -150.93796076209074]
Test Case: 494 | Input/Output: [[34.10380499725778 -59] -24.896195002742218]
Test Case: 495 | Input/Output: [[19.23211209349745 -60] -40.76788790650255]
Test Case: 496 | Input/Output: [[-19.792400402403516 -71] -90.79240040240352]
Test Case: 497 | Input/Output: [[-67.51880908653314 -19] -86.51880908653314]
Test Case: 498 | Input/Output: [[-60.651935499535135 22] -38.651935499535135]
Test Case: 499 | Input/Output: [[88.11016135499708 32] 120.11016135499708]
Test Case: 500 | Input/Output: [[-79.26317399411022 -86] -165.26317399411022]
Test Case: 501 | Input/Output: [[-17.35834344521625 -52] -69.35834344521625]
Test Case: 502 | Input/Output: [[-51.36403163399268 44] -7.364031633992681]
Test Case: 503 | Input/Output: [[31.240979197825766 -89] -57.759020802174234]
Test Case: 504 | Input/Output: [[1.521170009570156 -83] -81.47882999042984]
Test Case: 505 | Input/Output: [[-21.17189905402867 -99] -120.17189905402867]
Test Case: 506 | Input/Output: [[-21.110735724662916 8] -13.110735724662916]
Test Case: 507 | Input/Output: [[-45.167972167788164 80] 34.832027832211836]
Test Case: 508 | Input/Output: [[72.86109377754673 54] 126.86109377754673]
Test Case: 509 | Input/Output: [[-7.150956655004919 52] 44.84904334499508]
Test Case: 510 | Input/Output: [[3.243382028643609 42] 45.24338202864361]
Test Case: 511 | Input/Output: [[-60.48373936954232 64] 3.51626063045768]
Test Case: 512 | Input/Output: [[-43.762445190191436 77] 33.237554809808564]
Test Case: 513 | Input/Output: [[-25.341452425422204 -36] -61.341452425422204]
Test Case: 514 | Input/Output: [[-71.27741057819337 -9] -80.27741057819337]
Test Case: 515 | Input/Output: [[72.77946462702346 -35] 37.77946462702346]
Test Case: 516 | Input/Output: [[97.30169357955302 40] 137.30169357955302]
Test Case: 517 | Input/Output: [[90.56911161698861 -33] 57.56911161698861]
Test Case: 518 | Input/Output: [[-84.88129552397568 86] 1.1187044760243197]
Test Case: 519 | Input/Output: [[99.80570558278438 18] 117.80570558278438]
Test Case: 520 | Input/Output: [[3.1420543830062115 -60] -56.85794561699379]
Test Case: 521 | Input/Output: [[-78.78466183024402 25] -53.78466183024402]
Test Case: 522 | Input/Output: [[-23.663457654179695 51] 27.336542345820305]
Test Case: 523 | Input/Output: [[-13.972298036712402 -47] -60.9722980367124]
Test Case: 524 | Input/Output: [[46.215779137748115 -41] 5.215779137748115]
Test Case: 525 | Input/Output: [[51.014731656739656 79] 130.01473165673966]
Test Case: 526 | Input/Output: [[22.044981788860184 12] 34.044981788860184]
Test Case: 527 | Input/Output: [[-24.983651473360766 -17] -41.983651473360766]
Test Case: 528 | Input/Output: [[-2.572368128211906 3] 0.42763187178809403]
Test Case: 529 | Input/Output: [[40.221693601091914 -85] -44.778306398908086]
Test Case: 530 | Input/Output: [[-41.53877427551613 66] 24.461225724483867]
Test Case: 531 | Input/Output: [[50.09991587522035 84] 134.09991587522035]
Test Case: 532 | Input/Output: [[13.191641126807994 84] 97.191641126808]
Test Case: 533 | Input/Output: [[99.83351373229402 -26] 73.83351373229402]
Test Case: 534 | Input/Output: [[76.00553478304454 93] 169.00553478304454]
Test Case: 535 | Input/Output: [[65.34199683314458 -55] 10.341996833144577]
Test Case: 536 | Input/Output: [[38.15305196678517 -81] -42.84694803321483]
Test Case: 537 | Input/Output: [[51.51478924022496 81] 132.51478924022496]
Test Case: 538 | Input/Output: [[86.40158174374378 56] 142.40158174374378]
Test Case: 539 | Input/Output: [[-81.73065651976495 -35] -116.73065651976495]
Test Case: 540 | Input/Output: [[-48.818516725976345 -35] -83.81851672597634]
Test Case: 541 | Input/Output: [[-18.13219550251752 19] 0.8678044974824815]
Test Case: 542 | Input/Output: [[-91.46375679871753 -87] -178.46375679871753]
Test Case: 543 | Input/Output: [[26.23556987061295 -36] -9.764430129387051]
Test Case: 544 | Input/Output: [[56.66789717067559 -28] 28.667897170675587]
Test Case: 545 | Input/Output: [[65.11960621838375 49] 114.11960621838375]
Test Case: 546 | Input/Output: [[23.891546135081796 51] 74.8915461350818]
Test Case: 547 | Input/Output: [[70.07855817017611 -66] 4.078558170176109]
Test Case: 548 | Input/Output: [[33.595396113395225 99] 132.59539611339522]
Test Case: 549 | Input/Output: [[-89.74756384306536 -63] -152.74756384306536]
Test Case: 550 | Input/Output: [[39.98920990860012 -66] -26.010790091399883]
Test Case: 551 | Input/Output: [[-0.905584824069777 -81] -81.90558482406978]
Test Case: 552 | Input/Output: [[59.9196314392301 73] 132.9196314392301]
Test Case: 553 | Input/Output: [[-31.3928200327028 -37] -68.3928200327028]
Test Case: 554 | Input/Output: [[3.6668768260067424 64] 67.66687682600674]
Test Case: 555 | Input/Output: [[42.59264199604087 3] 45.59264199604087]
Test Case: 556 | Input/Output: [[-33.31244978749544 -96] -129.31244978749544]
Test Case: 557 | Input/Output: [[11.64250888429703 -16] -4.35749111570297]
Test Case: 558 | Input/Output: [[-8.560572799201253 52] 43.43942720079875]
Test Case: 559 | Input/Output: [[-25.953649016759158 58] 32.04635098324084]
Test Case: 560 | Input/Output: [[-30.483095569395587 -38] -68.48309556939559]
Test Case: 561 | Input/Output: [[-99.08512011570177 28] -71.08512011570177]
Test Case: 562 | Input/Output: [[-63.93932061912739 -81] -144.9393206191274]
Test Case: 563 | Input/Output: [[70.86789999149497 50] 120.86789999149497]
Test Case: 564 | Input/Output: [[-36.258722287904476 93] 56.741277712095524]
Test Case: 565 | Input/Output: [[-0.8393714310643361 43] 42.160628568935664]
Test Case: 566 | Input/Output: [[-93.31327234339446 76] -17.31327234339446]
Test Case: 567 | Input/Output: [[-81.47682832548703 19] -62.476828325487034]
Test Case: 568 | Input/Output: [[88.0613347594826 70] 158.0613347594826]
Test Case: 569 | Input/Output: [[76.78807898966735 39] 115.78807898966735]
Test Case: 570 | Input/Output: [[-77.33841829590668 2] -75.33841829590668]
Test Case: 571 | Input/Output: [[-97.30822619933994 -99] -196.30822619933994]
Test Case: 572 | Input/Output: [[-87.79615245087365 -21] -108.79615245087365]
Test Case: 573 | Input/Output: [[63.9832224614415 -48] 15.9832224614415]
Test Case: 574 | Input/Output: [[-73.6971220370508 -2] -75.6971220370508]
Test Case: 575 | Input/Output: [[53.67583705718195 -60] -6.324162942818049]
Test Case: 576 | Input/Output: [[26.710483252711214 95] 121.71048325271121]
Test Case: 577 | Input/Output: [[26.06666254382776 -20] 6.066662543827761]
Test Case: 578 | Input/Output: [[86.97120597034527 70] 156.97120597034527]
Test Case: 579 | Input/Output: [[31.702439311591036 -3] 28.702439311591036]
Test Case: 580 | Input/Output: [[-54.73530621021989 62] 7.264693789780111]
Test Case: 581 | Input/Output: [[87.66391256241869 21] 108.66391256241869]
Test Case: 582 | Input/Output: [[15.530023195027184 72] 87.53002319502718]
Test Case: 583 | Input/Output: [[27.333021934190242 -41] -13.666978065809758]
Test Case: 584 | Input/Output: [[-13.637197554424958 -71] -84.63719755442496]
Test Case: 585 | Input/Output: [[-66.58506413247338 -10] -76.58506413247338]
Test Case: 586 | Input/Output: [[-39.383524654639125 -37] -76.38352465463913]
Test Case: 587 | Input/Output: [[-11.827608072988866 46] 34.172391927011134]
Test Case: 588 | Input/Output: [[29.796571537518304 39] 68.7965715375183]
Test Case: 589 | Input/Output: [[72.15781338990413 74] 146.15781338990413]
Test Case: 590 | Input/Output: [[-7.666519247394049 96] 88.33348075260595]
Test Case: 591 | Input/Output: [[-5.0390611007521215 51] 45.96093889924788]
Test Case: 592 | Input/Output: [[-9.738542291284674 -29] -38.73854229128467]
Test Case: 593 | Input/Output: [[-87.40941540023088 73] -14.409415400230884]
Test Case: 594 | Input/Output: [[30.758915602865926 -40] -9.241084397134074]
Test Case: 595 | Input/Output: [[-5.124646814223553 22] 16.875353185776447]
Test Case: 596 | Input/Output: [[72.3313614082141 87] 159.3313614082141]
Test Case: 597 | Input/Output: [[96.34844965428084 57] 153.34844965428084]
Test Case: 598 | Input/Output: [[-47.84143332384308 91] 43.15856667615692]
Test Case: 599 | Input/Output: [[70.99042960985025 55] 125.99042960985025]
Test Case: 600 | Input/Output: [[71.40928717564051 87] 158.40928717564051]
Test Case: 601 | Input/Output: [[-76.64440147429113 -77] -153.64440147429113]
Test Case: 602 | Input/Output: [[33.26815314316204 60] 93.26815314316204]
Test Case: 603 | Input/Output: [[-43.75651361623354 -95] -138.75651361623355]
Test Case: 604 | Input/Output: [[6.428614475897888 -39] -32.57138552410211]
Test Case: 605 | Input/Output: [[-16.42056638509817 -67] -83.42056638509817]
Test Case: 606 | Input/Output: [[-66.63498607439165 -34] -100.63498607439165]
Test Case: 607 | Input/Output: [[21.448935273915197 38] 59.4489352739152]
Test Case: 608 | Input/Output: [[54.69626607369318 78] 132.69626607369318]
Test Case: 609 | Input/Output: [[63.03166870871405 -21] 42.03166870871405]
Test Case: 610 | Input/Output: [[-59.74879871607215 54] -5.748798716072152]
Test Case: 611 | Input/Output: [[-44.405487012151525 18] -26.405487012151525]
Test Case: 612 | Input/Output: [[-41.19041710011082 35] -6.190417100110821]
Test Case: 613 | Input/Output: [[21.601818003756094 0] 21.601818003756094]
Test Case: 614 | Input/Output: [[-2.949117000636562 17] 14.050882999363438]
Test Case: 615 | Input/Output: [[-6.989507215191026 35] 28.010492784808974]
Test Case: 616 | Input/Output: [[81.30418201939605 83] 164.30418201939605]
Test Case: 617 | Input/Output: [[19.44338013196922 17] 36.44338013196922]
Test Case: 618 | Input/Output: [[-8.407318569714278 3] -5.407318569714278]
Test Case: 619 | Input/Output: [[-47.46253409222692 67] 19.537465907773083]
Test Case: 620 | Input/Output: [[78.93430552940217 86] 164.93430552940217]
Test Case: 621 | Input/Output: [[83.45013582300274 -58] 25.45013582300274]
Test Case: 622 | Input/Output: [[-38.81955240725787 6] -32.81955240725787]
Test Case: 623 | Input/Output: [[-54.98729321862987 12] -42.98729321862987]
Test Case: 624 | Input/Output: [[-17.724833869661666 -100] -117.72483386966167]
Test Case: 625 | Input/Output: [[78.67641158924457 -73] 5.676411589244566]
Test Case: 626 | Input/Output: [[-37.80582352761359 80] 42.19417647238641]
Test Case: 627 | Input/Output: [[91.94809530798526 -10] 81.94809530798526]
Test Case: 628 | Input/Output: [[45.834242964214354 71] 116.83424296421435]
Test Case: 629 | Input/Output: [[-47.92107568127521 -63] -110.92107568127521]
Test Case: 630 | Input/Output: [[-81.40646139351828 -57] -138.40646139351827]
Test Case: 631 | Input/Output: [[47.60492962425596 -80] -32.39507037574404]
Test Case: 632 | Input/Output: [[23.497790036405604 -94] -70.5022099635944]
Test Case: 633 | Input/Output: [[-86.37672302569473 34] -52.37672302569473]
Test Case: 634 | Input/Output: [[79.52894200407107 50] 129.52894200407107]
Test Case: 635 | Input/Output: [[-24.90625357285859 -17] -41.90625357285859]
Test Case: 636 | Input/Output: [[-34.8875298444774 -76] -110.8875298444774]
Test Case: 637 | Input/Output: [[89.92584407789772 -67] 22.92584407789772]
Test Case: 638 | Input/Output: [[66.03650106469013 69] 135.03650106469013]
Test Case: 639 | Input/Output: [[-82.51118424286773 -38] -120.51118424286773]
Test Case: 640 | Input/Output: [[33.93637250399706 -48] -14.063627496002937]
Test Case: 641 | Input/Output: [[-50.86263064770555 50] -0.8626306477055508]
Test Case: 642 | Input/Output: [[20.431750123442143 -91] -70.56824987655786]
Test Case: 643 | Input/Output: [[-10.32354839227719 70] 59.67645160772281]
Test Case: 644 | Input/Output: [[-73.3661559155135 73] -0.36615591551350235]
Test Case: 645 | Input/Output: [[-51.99181648608662 -15] -66.99181648608662]
Test Case: 646 | Input/Output: [[15.213681936315425 75] 90.21368193631542]
Test Case: 647 | Input/Output: [[31.930151356458452 70] 101.93015135645845]
Test Case: 648 | Input/Output: [[47.90459998920696 18] 65.90459998920696]
Test Case: 649 | Input/Output: [[81.26279939877361 -65] 16.26279939877361]
Test Case: 650 | Input/Output: [[14.770093470870975 -79] -64.22990652912902]
Test Case: 651 | Input/Output: [[45.044900798400846 -98] -52.955099201599154]
Test Case: 652 | Input/Output: [[-94.6993506445349 -87] -181.6993506445349]
Test Case: 653 | Input/Output: [[-43.81292194796349 -54] -97.81292194796349]
Test Case: 654 | Input/Output: [[-54.12527721802913 77] 22.874722781970867]
Test Case: 655 | Input/Output: [[72.93040775543315 -81] -8.069592244566849]
Test Case: 656 | Input/Output: [[-84.1951341817944 19] -65.1951341817944]
Test Case: 657 | Input/Output: [[16.05972325215032 -20] -3.94027674784968]
Test Case: 658 | Input/Output: [[70.7737235462148 60] 130.7737235462148]
Test Case: 659 | Input/Output: [[3.9735352347634034 25] 28.973535234763403]
Test Case: 660 | Input/Output: [[94.00177260843188 -77] 17.001772608431878]
Test Case: 661 | Input/Output: [[63.83129326233683 -29] 34.83129326233683]
Test Case: 662 | Input/Output: [[-24.498092381345344 -15] -39.498092381345344]
Test Case: 663 | Input/Output: [[48.51969639515056 -43] 5.519696395150561]
Test Case: 664 | Input/Output: [[49.03012377955815 37] 86.03012377955815]
Test Case: 665 | Input/Output: [[-84.6950521225622 -50] -134.6950521225622]
Test Case: 666 | Input/Output: [[-92.66605995615427 6] -86.66605995615427]
Test Case: 667 | Input/Output: [[14.590924004997419 -40] -25.40907599500258]
Test Case: 668 | Input/Output: [[28.587088886270465 -93] -64.41291111372954]
Test Case: 669 | Input/Output: [[-55.70132130572869 -18] -73.7013213057287]
Test Case: 670 | Input/Output: [[-27.43595320304391 -94] -121.43595320304391]
Test Case: 671 | Input/Output: [[4.597042848862415 -42] -37.402957151137585]
Test Case: 672 | Input/Output: [[-46.3342351809593 -96] -142.3342351809593]
Test Case: 673 | Input/Output: [[49.15440207924863 21] 70.15440207924863]
Test Case: 674 | Input/Output: [[-83.93722000844815 -97] -180.93722000844815]
Test Case: 675 | Input/Output: [[26.249054511274636 -66] -39.750945488725364]
Test Case: 676 | Input/Output: [[31.314421160674982 -58] -26.685578839325018]
Test Case: 677 | Input/Output: [[0.639468700604823 10] 10.639468700604823]
Test Case: 678 | Input/Output: [[45.29519457606915 -83] -37.70480542393085]
Test Case: 679 | Input/Output: [[52.70929329942015 -73] -20.290706700579847]
Test Case: 680 | Input/Output: [[87.20749000834837 68] 155.20749000834837]
Test Case: 681 | Input/Output: [[72.54388545133449 -30] 42.54388545133449]
Test Case: 682 | Input/Output: [[96.98648624675414 58] 154.98648624675414]
Test Case: 683 | Input/Output: [[49.82396835307762 -46] 3.8239683530776176]
Test Case: 684 | Input/Output: [[-85.42548242917923 -22] -107.42548242917923]
Test Case: 685 | Input/Output: [[40.055522146997475 -42] -1.9444778530025246]
Test Case: 686 | Input/Output: [[60.36962005551166 -17] 43.36962005551166]
Test Case: 687 | Input/Output: [[-85.00319073194476 -11] -96.00319073194476]
Test Case: 688 | Input/Output: [[-61.12700547818783 -80] -141.12700547818784]
Test Case: 689 | Input/Output: [[-20.551938339489624 -39] -59.551938339489624]
Test Case: 690 | Input/Output: [[-38.71307171608147 26] -12.713071716081473]
Test Case: 691 | Input/Output: [[28.238959912613893 85] 113.2389599126139]
Test Case: 692 | Input/Output: [[-22.677065918439993 76] 53.32293408156001]
Test Case: 693 | Input/Output: [[8.497495602505182 85] 93.49749560250518]
Test Case: 694 | Input/Output: [[-14.485187401854247 76] 61.51481259814575]
Test Case: 695 | Input/Output: [[76.21482308583643 94] 170.21482308583643]
Test Case: 696 | Input/Output: [[89.03803546461558 -58] 31.038035464615575]
Test Case: 697 | Input/Output: [[30.928166541068606 7] 37.928166541068606]
Test Case: 698 | Input/Output: [[37.03963989094632 75] 112.03963989094632]
Test Case: 699 | Input/Output: [[37.434497669751494 15] 52.434497669751494]
Test Case: 700 | Input/Output: [[-56.52094505577736 64] 7.479054944222639]
Test Case: 701 | Input/Output: [[-95.04682255837729 10] -85.04682255837729]
Test Case: 702 | Input/Output: [[-52.17533616315062 62] 9.824663836849382]
Test Case: 703 | Input/Output: [[-63.246891135238556 8] -55.246891135238556]
Test Case: 704 | Input/Output: [[14.266347260958895 9] 23.266347260958895]
Test Case: 705 | Input/Output: [[-2.4452211815779776 57] 54.55477881842202]
Test Case: 706 | Input/Output: [[-87.55550339065492 11] -76.55550339065492]
Test Case: 707 | Input/Output: [[-24.632636499380737 28] 3.3673635006192626]
Test Case: 708 | Input/Output: [[50.87246496605812 33] 83.87246496605812]
Test Case: 709 | Input/Output: [[0.2809155460037829 21] 21.280915546003783]
Test Case: 710 | Input/Output: [[-11.834883969647848 -91] -102.83488396964785]
Test Case: 711 | Input/Output: [[84.0878255546773 -42] 42.087825554677295]
Test Case: 712 | Input/Output: [[-71.400152716375 59] -12.400152716375004]
Test Case: 713 | Input/Output: [[47.210991620163725 -88] -40.789008379836275]
Test Case: 714 | Input/Output: [[-58.690559937392585 22] -36.690559937392585]
Test Case: 715 | Input/Output: [[-53.755634725848054 -53] -106.75563472584805]
Test Case: 716 | Input/Output: [[80.28611964173083 -22] 58.286119641730835]
Test Case: 717 | Input/Output: [[14.082112291078602 -57] -42.9178877089214]
Test Case: 718 | Input/Output: [[72.27440139410487 -46] 26.27440139410487]
Test Case: 719 | Input/Output: [[-47.37634560642676 -91] -138.37634560642675]
Test Case: 720 | Input/Output: [[-16.880112496987508 10] -6.880112496987508]
Test Case: 721 | Input/Output: [[14.91271717692409 -88] -73.08728282307591]
Test Case: 722 | Input/Output: [[-1.1943543731202766 46] 44.80564562687972]
Test Case: 723 | Input/Output: [[92.0111151012141 73] 165.0111151012141]
Test Case: 724 | Input/Output: [[46.534312353794775 60] 106.53431235379477]
Test Case: 725 | Input/Output: [[-16.37553996200505 65] 48.62446003799495]
Test Case: 726 | Input/Output: [[1.2176089762587594 -75] -73.78239102374124]
Test Case: 727 | Input/Output: [[75.5339267920748 -67] 8.533926792074794]
Test Case: 728 | Input/Output: [[90.30967747550608 -50] 40.30967747550608]
Test Case: 729 | Input/Output: [[-67.11209546754327 34] -33.11209546754327]
Test Case: 730 | Input/Output: [[-99.5986355793615 -16] -115.5986355793615]
Test Case: 731 | Input/Output: [[-13.811585113729777 -54] -67.81158511372978]
Test Case: 732 | Input/Output: [[53.296341282332605 -75] -21.703658717667395]
Test Case: 733 | Input/Output: [[90.48757725219622 41] 131.48757725219622]
Test Case: 734 | Input/Output: [[-71.23065909002923 -47] -118.23065909002923]
Test Case: 735 | Input/Output: [[67.05055889511178 -26] 41.05055889511178]
Test Case: 736 | Input/Output: [[-67.94734929562316 -46] -113.94734929562316]
Test Case: 737 | Input/Output: [[94.30521487786817 -97] -2.694785122131833]
Test Case: 738 | Input/Output: [[79.6608273329465 -70] 9.660827332946496]
Test Case: 739 | Input/Output: [[-37.01881125746369 -76] -113.01881125746368]
Test Case: 740 | Input/Output: [[87.43542352337036 -82] 5.4354235233703605]
Test Case: 741 | Input/Output: [[92.75226344001015 41] 133.75226344001015]
Test Case: 742 | Input/Output: [[-17.22771946426296 53] 35.77228053573704]
Test Case: 743 | Input/Output: [[-38.33906152401725 48] 9.660938475982753]
Test Case: 744 | Input/Output: [[-48.52072492654984 -42] -90.52072492654983]
Test Case: 745 | Input/Output: [[34.020923152783325 7] 41.020923152783325]
Test Case: 746 | Input/Output: [[5.215304715655506 7] 12.215304715655506]
Test Case: 747 | Input/Output: [[20.000526102719604 -9] 11.000526102719604]
Test Case: 748 | Input/Output: [[-33.506114164321005 48] 14.493885835678995]
Test Case: 749 | Input/Output: [[95.32924568434865 35] 130.32924568434865]
Test Case: 750 | Input/Output: [[91.615579063577 69] 160.615579063577]
Test Case: 751 | Input/Output: [[-1.4510437334278379 2] 0.5489562665721621]
Test Case: 752 | Input/Output: [[11.74863575534711 -11] 0.7486357553471095]
Test Case: 753 | Input/Output: [[-83.34166923374241 -14] -97.34166923374241]
Test Case: 754 | Input/Output: [[-0.295967701577581 -100] -100.29596770157758]
Test Case: 755 | Input/Output: [[32.01465074546567 82] 114.01465074546567]
Test Case: 756 | Input/Output: [[67.109423333016 5] 72.109423333016]
Test Case: 757 | Input/Output: [[72.95765115653725 -67] 5.957651156537253]
Test Case: 758 | Input/Output: [[86.44995505252814 -65] 21.44995505252814]
Test Case: 759 | Input/Output: [[66.71557762517776 10] 76.71557762517776]
Test Case: 760 | Input/Output: [[77.61862168341179 37] 114.61862168341179]
Test Case: 761 | Input/Output: [[-75.19796498128017 7] -68.19796498128017]
Test Case: 762 | Input/Output: [[-62.153788295003935 -80] -142.15378829500395]
Test Case: 763 | Input/Output: [[-78.04289283049827 15] -63.042892830498275]
Test Case: 764 | Input/Output: [[10.835174142021842 82] 92.83517414202184]
Test Case: 765 | Input/Output: [[-94.6310663580823 29] -65.6310663580823]
Test Case: 766 | Input/Output: [[61.21765827951805 2] 63.21765827951805]
Test Case: 767 | Input/Output: [[-97.02413968763469 68] -29.024139687634687]
Test Case: 768 | Input/Output: [[-93.14561896059554 99] 5.854381039404458]
Test Case: 769 | Input/Output: [[-59.601716787724904 72] 12.398283212275096]
Test Case: 770 | Input/Output: [[15.355360578548442 78] 93.35536057854844]
Test Case: 771 | Input/Output: [[97.93454319198923 2] 99.93454319198923]
Test Case: 772 | Input/Output: [[-92.57372437627815 -22] -114.57372437627815]
Test Case: 773 | Input/Output: [[36.502797409523396 -83] -46.497202590476604]
Test Case: 774 | Input/Output: [[61.57496302761405 -73] -11.425036972385954]
Test Case: 775 | Input/Output: [[-15.936211055875262 -39] -54.93621105587526]
Test Case: 776 | Input/Output: [[-74.57790431816278 35] -39.57790431816278]
Test Case: 777 | Input/Output: [[85.3497418201975 -79] 6.349741820197494]
Test Case: 778 | Input/Output: [[84.61700255731932 -64] 20.617002557319324]
Test Case: 779 | Input/Output: [[53.71678890353891 -4] 49.71678890353891]
Test Case: 780 | Input/Output: [[43.53395095842629 -92] -48.46604904157371]
Test Case: 781 | Input/Output: [[-3.750701817466549 -25] -28.75070181746655]
Test Case: 782 | Input/Output: [[-22.184823663521414 -33] -55.18482366352141]
Test Case: 783 | Input/Output: [[82.68362234117089 90] 172.6836223411709]
Test Case: 784 | Input/Output: [[25.701625582628623 23] 48.70162558262862]
Test Case: 785 | Input/Output: [[-67.04309123889804 -23] -90.04309123889804]
Test Case: 786 | Input/Output: [[-49.83827010646458 -66] -115.83827010646458]
Test Case: 787 | Input/Output: [[-34.63934766540446 86] 51.36065233459554]
Test Case: 788 | Input/Output: [[65.9327777071172 63] 128.9327777071172]
Test Case: 789 | Input/Output: [[-7.440158380278959 88] 80.55984161972104]
Test Case: 790 | Input/Output: [[73.15779814868168 -27] 46.15779814868168]
Test Case: 791 | Input/Output: [[36.19778500656392 -26] 10.197785006563919]
Test Case: 792 | Input/Output: [[-86.57679581480727 22] -64.57679581480727]
Test Case: 793 | Input/Output: [[-12.655453744215507 -35] -47.65545374421551]
Test Case: 794 | Input/Output: [[97.73173270625784 -13] 84.73173270625784]
Test Case: 795 | Input/Output: [[51.18434741060389 15] 66.18434741060389]
Test Case: 796 | Input/Output: [[-58.088459459415475 41] -17.088459459415475]
Test Case: 797 | Input/Output: [[-33.06336730836712 -89] -122.06336730836712]
Test Case: 798 | Input/Output: [[2.3258062260753434 93] 95.32580622607534]
Test Case: 799 | Input/Output: [[84.21012783399624 94] 178.21012783399624]
Test Case: 800 | Input/Output: [[37.01338531467749 62] 99.01338531467749]
Test Case: 801 | Input/Output: [[88.19878109369233 54] 142.19878109369233]
Test Case: 802 | Input/Output: [[-51.104909921831144 -35] -86.10490992183114]
Test Case: 803 | Input/Output: [[20.644022257991182 85] 105.64402225799118]
Test Case: 804 | Input/Output: [[-93.48959243087467 78] -15.489592430874666]
Test Case: 805 | Input/Output: [[84.22424413565551 31] 115.22424413565551]
Test Case: 806 | Input/Output: [[-18.18754633564876 -79] -97.18754633564876]
Test Case: 807 | Input/Output: [[79.39082784968437 68] 147.39082784968437]
Test Case: 808 | Input/Output: [[-51.504334274038975 51] -0.5043342740389747]
Test Case: 809 | Input/Output: [[-48.71567035492737 57] 8.284329645072631]
Test Case: 810 | Input/Output: [[60.051321962952386 77] 137.0513219629524]
Test Case: 811 | Input/Output: [[-46.88706443264139 59] 12.112935567358612]
Test Case: 812 | Input/Output: [[60.08176678225237 95] 155.08176678225237]
Test Case: 813 | Input/Output: [[-70.84031175831242 8] -62.840311758312424]
Test Case: 814 | Input/Output: [[62.35873419809505 92] 154.35873419809505]
Test Case: 815 | Input/Output: [[88.04099160094262 12] 100.04099160094262]
Test Case: 816 | Input/Output: [[42.01575274842415 5] 47.01575274842415]
Test Case: 817 | Input/Output: [[-57.18893207999465 34] -23.18893207999465]
Test Case: 818 | Input/Output: [[-87.94061642884414 38] -49.94061642884414]
Test Case: 819 | Input/Output: [[-41.73964766689533 -50] -91.73964766689534]
Test Case: 820 | Input/Output: [[-56.29031525523078 28] -28.29031525523078]
Test Case: 821 | Input/Output: [[92.09984206536643 -12] 80.09984206536643]
Test Case: 822 | Input/Output: [[-15.638308833981583 -46] -61.63830883398158]
Test Case: 823 | Input/Output: [[-30.60480785745365 -22] -52.60480785745365]
Test Case: 824 | Input/Output: [[2.6420298109819385 37] 39.64202981098194]
Test Case: 825 | Input/Output: [[-53.0278090016927 13] -40.0278090016927]
Test Case: 826 | Input/Output: [[-45.97248052194362 32] -13.972480521943623]
Test Case: 827 | Input/Output: [[-30.681765911725904 43] 12.318234088274096]
Test Case: 828 | Input/Output: [[-64.42594817503016 99] 34.57405182496984]
Test Case: 829 | Input/Output: [[21.664671701649254 -13] 8.664671701649254]
Test Case: 830 | Input/Output: [[96.68994222703452 31] 127.68994222703452]
Test Case: 831 | Input/Output: [[50.25940250348151 -26] 24.25940250348151]
Test Case: 832 | Input/Output: [[99.98933810860103 -45] 54.98933810860103]
Test Case: 833 | Input/Output: [[52.65815399134706 16] 68.65815399134706]
Test Case: 834 | Input/Output: [[-68.00504534772998 86] 17.994954652270025]
Test Case: 835 | Input/Output: [[24.902806856076978 53] 77.90280685607698]
Test Case: 836 | Input/Output: [[-57.69990890211116 20] -37.69990890211116]
Test Case: 837 | Input/Output: [[68.21916965785587 -25] 43.21916965785587]
Test Case: 838 | Input/Output: [[56.71203605819858 85] 141.71203605819858]
Test Case: 839 | Input/Output: [[-76.9698958851098 -51] -127.9698958851098]
Test Case: 840 | Input/Output: [[7.832670728218233 -62] -54.16732927178177]
Test Case: 841 | Input/Output: [[72.96924971612248 60] 132.96924971612248]
Test Case: 842 | Input/Output: [[41.05257946466614 -14] 27.052579464666138]
Test Case: 843 | Input/Output: [[69.11641647948866 60] 129.11641647948866]
Test Case: 844 | Input/Output: [[65.42056017374435 86] 151.42056017374435]
Test Case: 845 | Input/Output: [[-48.277734900900924 23] -25.277734900900924]
Test Case: 846 | Input/Output: [[-0.8146112128036407 90] 89.18538878719636]
Test Case: 847 | Input/Output: [[83.23312857217587 -71] 12.233128572175872]
Test Case: 848 | Input/Output: [[-88.51991220505586 -48] -136.51991220505585]
Test Case: 849 | Input/Output: [[-31.54047876399892 57] 25.45952123600108]
Test Case: 850 | Input/Output: [[-7.142723045640409 -41] -48.14272304564041]
Test Case: 851 | Input/Output: [[-39.6873834910211 -96] -135.6873834910211]
Test Case: 852 | Input/Output: [[-42.811585889601744 17] -25.811585889601744]
Test Case: 853 | Input/Output: [[91.9358661335929 58] 149.9358661335929]
Test Case: 854 | Input/Output: [[67.3383053351817 18] 85.3383053351817]
Test Case: 855 | Input/Output: [[57.77301068250452 33] 90.77301068250452]
Test Case: 856 | Input/Output: [[-94.63749129345325 -76] -170.63749129345325]
Test Case: 857 | Input/Output: [[-79.99797163846571 83] 3.002028361534286]
Test Case: 858 | Input/Output: [[61.75351539586342 36] 97.75351539586342]
Test Case: 859 | Input/Output: [[54.05646320903432 -81] -26.94353679096568]
Test Case: 860 | Input/Output: [[42.185599163753096 -65] -22.814400836246904]
Test Case: 861 | Input/Output: [[35.992827802182546 51] 86.99282780218255]
Test Case: 862 | Input/Output: [[4.398964869904631 4] 8.398964869904631]
Test Case: 863 | Input/Output: [[-7.895385265444759 -39] -46.89538526544476]
Test Case: 864 | Input/Output: [[-51.19214339747984 -87] -138.19214339747984]
Test Case: 865 | Input/Output: [[46.52527271084378 -2] 44.52527271084378]
Test Case: 866 | Input/Output: [[25.28136560883027 76] 101.28136560883027]
Test Case: 867 | Input/Output: [[-74.54373378816707 -100] -174.54373378816706]
Test Case: 868 | Input/Output: [[-62.20538938549238 -63] -125.20538938549238]
Test Case: 869 | Input/Output: [[5.574454478676259 -39] -33.42554552132374]
Test Case: 870 | Input/Output: [[-73.48250444396453 59] -14.48250444396453]
Test Case: 871 | Input/Output: [[-53.86936473404447 100] 46.13063526595553]
Test Case: 872 | Input/Output: [[71.72144402248185 35] 106.72144402248185]
Test Case: 873 | Input/Output: [[-12.004650919570992 -62] -74.00465091957099]
Test Case: 874 | Input/Output: [[-31.62176810690049 -74] -105.62176810690049]
Test Case: 875 | Input/Output: [[37.116097386129894 5] 42.116097386129894]
Test Case: 876 | Input/Output: [[-10.17905563247929 56] 45.82094436752071]
Test Case: 877 | Input/Output: [[52.960763869955656 92] 144.96076386995566]
Test Case: 878 | Input/Output: [[75.41378698639147 -28] 47.41378698639147]
Test Case: 879 | Input/Output: [[-46.07914082563962 -71] -117.07914082563963]
Test Case: 880 | Input/Output: [[55.44202142566769 38] 93.44202142566769]
Test Case: 881 | Input/Output: [[58.28179610619253 -16] 42.28179610619253]
Test Case: 882 | Input/Output: [[-47.88767952265427 -23] -70.88767952265427]
Test Case: 883 | Input/Output: [[-66.15713626445456 54] -12.157136264454564]
Test Case: 884 | Input/Output: [[-79.7910756008725 -91] -170.7910756008725]
Test Case: 885 | Input/Output: [[44.050480632725765 71] 115.05048063272577]
Test Case: 886 | Input/Output: [[2.016272252651305 -60] -57.983727747348695]
Test Case: 887 | Input/Output: [[-68.33423393744593 -95] -163.33423393744593]
Test Case: 888 | Input/Output: [[32.76608756340042 27] 59.76608756340042]
Test Case: 889 | Input/Output: [[-7.537135843717493 -37] -44.53713584371749]
Test Case: 890 | Input/Output: [[-32.44591267237897 24] -8.445912672378967]
Test Case: 891 | Input/Output: [[54.31541703589261 29] 83.31541703589261]
Test Case: 892 | Input/Output: [[-89.15968563959116 -40] -129.15968563959115]
Test Case: 893 | Input/Output: [[81.59478180130318 3] 84.59478180130318]
Test Case: 894 | Input/Output: [[-54.05774253991018 62] 7.94225746008982]
Test Case: 895 | Input/Output: [[-32.55578880623307 20] -12.555788806233068]
Test Case: 896 | Input/Output: [[-32.397200077701655 -43] -75.39720007770165]
Test Case: 897 | Input/Output: [[39.349945715709765 -37] 2.349945715709765]
Test Case: 898 | Input/Output: [[-69.22124269172703 42] -27.221242691727028]
Test Case: 899 | Input/Output: [[-32.91122457483415 47] 14.08877542516585]
Test Case: 900 | Input/Output: [[8.863977899510672 42] 50.86397789951067]
Test Case: 901 | Input/Output: [[69.90640366256181 76] 145.90640366256181]
Test Case: 902 | Input/Output: [[-14.398634946948135 -1] -15.398634946948135]
Test Case: 903 | Input/Output: [[-27.271400996446488 -28] -55.27140099644649]
Test Case: 904 | Input/Output: [[-41.372946093104154 80] 38.627053906895846]
Test Case: 905 | Input/Output: [[-64.06148161812831 79] 14.938518381871688]
Test Case: 906 | Input/Output: [[89.30471393179323 -76] 13.30471393179323]
Test Case: 907 | Input/Output: [[72.12349637503789 -16] 56.12349637503789]
Test Case: 908 | Input/Output: [[-62.02321678116765 7] -55.02321678116765]
Test Case: 909 | Input/Output: [[63.0199534813128 -74] -10.980046518687203]
Test Case: 910 | Input/Output: [[-2.698312148744648 24] 21.301687851255352]
Test Case: 911 | Input/Output: [[-59.081866888896386 7] -52.081866888896386]
Test Case: 912 | Input/Output: [[31.26318044530794 -38] -6.736819554692062]
Test Case: 913 | Input/Output: [[16.391390603421584 -15] 1.3913906034215842]
Test Case: 914 | Input/Output: [[-94.87116124379547 -23] -117.87116124379547]
Test Case: 915 | Input/Output: [[-80.23691765257574 -73] -153.23691765257576]
Test Case: 916 | Input/Output: [[-18.479001407805143 -52] -70.47900140780514]
Test Case: 917 | Input/Output: [[28.760007370327457 21] 49.76000737032746]
Test Case: 918 | Input/Output: [[-54.35484307884349 -73] -127.35484307884349]
Test Case: 919 | Input/Output: [[-76.98405610419412 73] -3.9840561041941243]
Test Case: 920 | Input/Output: [[44.62406867306984 55] 99.62406867306984]
Test Case: 921 | Input/Output: [[-75.80445167951055 -32] -107.80445167951055]
Test Case: 922 | Input/Output: [[52.321772132065945 -35] 17.321772132065945]
Test Case: 923 | Input/Output: [[-53.25544631161196 -61] -114.25544631161196]
Test Case: 924 | Input/Output: [[-79.25191516466674 14] -65.25191516466674]
Test Case: 925 | Input/Output: [[3.5116397171123452 85] 88.51163971711235]
Test Case: 926 | Input/Output: [[43.6680858681587 -78] -34.3319141318413]
Test Case: 927 | Input/Output: [[97.99481292257099 -38] 59.994812922570986]
Test Case: 928 | Input/Output: [[18.4579069958166 41] 59.4579069958166]
Test Case: 929 | Input/Output: [[-6.132874102371133 67] 60.86712589762887]
Test Case: 930 | Input/Output: [[58.14647413205287 -22] 36.14647413205287]
Test Case: 931 | Input/Output: [[49.27523993565114 -4] 45.27523993565114]
Test Case: 932 | Input/Output: [[-76.21191517627386 55] -21.211915176273862]
Test Case: 933 | Input/Output: [[-45.47697059901925 -98] -143.47697059901924]
Test Case: 934 | Input/Output: [[44.764744944102944 60] 104.76474494410294]
Test Case: 935 | Input/Output: [[81.11753784069094 -68] 13.117537840690943]
Test Case: 936 | Input/Output: [[-85.95003725417045 36] -49.950037254170454]
Test Case: 937 | Input/Output: [[-17.773840030909753 -60] -77.77384003090975]
Test Case: 938 | Input/Output: [[69.18975760240113 -65] 4.18975760240113]
Test Case: 939 | Input/Output: [[-49.930834524534994 32] -17.930834524534994]
Test Case: 940 | Input/Output: [[93.88255543604694 35] 128.88255543604694]
Test Case: 941 | Input/Output: [[-80.80067918471887 -51] -131.8006791847189]
Test Case: 942 | Input/Output: [[-72.41973587803112 -10] -82.41973587803112]
Test Case: 943 | Input/Output: [[-41.44476885297648 85] 43.55523114702352]
Test Case: 944 | Input/Output: [[17.535342848669615 -24] -6.464657151330385]
Test Case: 945 | Input/Output: [[90.7607254529041 91] 181.7607254529041]
Test Case: 946 | Input/Output: [[21.296321900135794 -91] -69.7036780998642]
Test Case: 947 | Input/Output: [[-94.53433055684917 -20] -114.53433055684917]
Test Case: 948 | Input/Output: [[77.29076053663658 -73] 4.290760536636583]
Test Case: 949 | Input/Output: [[-69.42167442596583 -31] -100.42167442596583]
Test Case: 950 | Input/Output: [[19.83485822817275 74] 93.83485822817275]
Test Case: 951 | Input/Output: [[-4.979233945204783 -87] -91.97923394520478]
Test Case: 952 | Input/Output: [[74.49117634036199 -47] 27.49117634036199]
Test Case: 953 | Input/Output: [[24.26053854632086 -93] -68.73946145367914]
Test Case: 954 | Input/Output: [[26.16886995240975 -38] -11.83113004759025]
Test Case: 955 | Input/Output: [[59.15686025422582 -85] -25.84313974577418]
Test Case: 956 | Input/Output: [[-0.6137623566905575 -29] -29.613762356690557]
Test Case: 957 | Input/Output: [[-54.91088960775896 -47] -101.91088960775896]
Test Case: 958 | Input/Output: [[-63.23761531869674 73] 9.76238468130326]
Test Case: 959 | Input/Output: [[-23.45353716912777 -1] -24.45353716912777]
Test Case: 960 | Input/Output: [[-13.326873046286721 0] -13.326873046286721]
Test Case: 961 | Input/Output: [[54.89395687268811 -97] -42.10604312731189]
Test Case: 962 | Input/Output: [[70.39940805822027 -82] -11.600591941779726]
Test Case: 963 | Input/Output: [[17.829597043191868 46] 63.82959704319187]
Test Case: 964 | Input/Output: [[66.18573191847105 -27] 39.18573191847105]
Test Case: 965 | Input/Output: [[-29.608599788058143 -16] -45.60859978805814]
Test Case: 966 | Input/Output: [[-3.4704828872695686 -62] -65.47048288726957]
Test Case: 967 | Input/Output: [[59.80797047894538 98] 157.80797047894538]
Test Case: 968 | Input/Output: [[95.34148741011671 79] 174.3414874101167]
Test Case: 969 | Input/Output: [[-76.84717656398081 -55] -131.8471765639808]
Test Case: 970 | Input/Output: [[-25.83428886563432 -39] -64.83428886563432]
Test Case: 971 | Input/Output: [[-26.427870773848383 -29] -55.42787077384838]
Test Case: 972 | Input/Output: [[-59.77731596689482 -79] -138.77731596689483]
Test Case: 973 | Input/Output: [[24.963208743198123 57] 81.96320874319812]
Test Case: 974 | Input/Output: [[91.58343107988102 30] 121.58343107988102]
Test Case: 975 | Input/Output: [[85.42011612514153 -82] 3.420116125141533]
Test Case: 976 | Input/Output: [[28.002280125972078 -56] -27.997719874027922]
Test Case: 977 | Input/Output: [[-31.942426488354798 48] 16.057573511645202]
Test Case: 978 | Input/Output: [[-93.12830933306972 82] -11.128309333069723]
Test Case: 979 | Input/Output: [[-72.7273575118915 32] -40.7273575118915]
Test Case: 980 | Input/Output: [[-90.07322503896565 -13] -103.07322503896565]
Test Case: 981 | Input/Output: [[-12.522071258889312 -88] -100.52207125888931]
Test Case: 982 | Input/Output: [[96.43065890145255 5] 101.43065890145255]
Test Case: 983 | Input/Output: [[-81.108002689277 -49] -130.108002689277]
Test Case: 984 | Input/Output: [[94.28032559544471 99] 193.2803255954447]
Test Case: 985 | Input/Output: [[-19.2387640963031 60] 40.7612359036969]
Test Case: 986 | Input/Output: [[49.482768059294386 -39] 10.482768059294386]
Test Case: 987 | Input/Output: [[-9.991645025683411 33] 23.00835497431659]
Test Case: 988 | Input/Output: [[-0.5187847513374635 -20] -20.518784751337463]
Test Case: 989 | Input/Output: [[55.73969843825964 -17] 38.73969843825964]
Test Case: 990 | Input/Output: [[-19.341560293217697 -62] -81.3415602932177]
Test Case: 991 | Input/Output: [[-38.352657357412134 -96] -134.35265735741214]
Test Case: 992 | Input/Output: [[5.9897688635699495 -68] -62.01023113643005]
Test Case: 993 | Input/Output: [[-56.66726587777695 -1] -57.66726587777695]
Test Case: 994 | Input/Output: [[-90.47786535424306 56] -34.477865354243065]
Test Case: 995 | Input/Output: [[-88.27413171203224 21] -67.27413171203224]
Test Case: 996 | Input/Output: [[90.49040997551515 -81] 9.49040997551515]
Test Case: 997 | Input/Output: [[-1.9903047715922781 98] 96.00969522840772]
Test Case: 998 | Input/Output: [[48.788532865439436 -48] 0.7885328654394357]
Test Case: 999 | Input/Output: [[-56.86744470400682 -44] -100.86744470400683]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -22 -90 -55 96 -103 -49 -35 -60 0 -50 -4 -4 -39 -114 115 -23
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 54992.0
Test mean error for best: 27.49600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -22.4808140744
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: -83.4578605766
Correct output: -10.0587306507 | Program output: -66.0587306507
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -94.8453270272
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: -90.0452729724
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -10.1274155854
Correct output: 2.0900277855   | Program output: -86.9099722145
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: -90.2481438393
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -31.1212804651
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction float_yankdup} {:instruction in1} {:instruction float_dup} {:instruction print_float} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dec})
Best program: (float_pop float_yankdup in1 float_dup print_float integer_inc float_frominteger integer_dec float_dup_items float_dec)
Errors: [26.0 13 60.0 2 79.0 2 81.0 3 55.0 12 78.0 2 56.0 2 8.0 2 55.0 2 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 29.0 2 36.0 2 84.0 12 89.0 10 91.0 12 91.0 12 11.0 2 76.0 13 93.0 11 92.0 2]
Total: 1588.0
Mean: 31.76
Genome size: 10
Size: 11
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 18153.4799665
Median total errors in population: 25332.0
Error averages by case: (698.2966948999998 12.59 726.3678255999998 13.205 743.7111185000015 14.174 725.8455885999997 13.327 712.9498130999986 13.87 705.8012063999996 12.405 705.0015795000007 13.075 715.263856500001 11.854 709.706287 13.233 704.3377186000009 13.728 718.6962808000007 13.928 710.8292893000017 12.577 726.7785356999997 13.326 704.4486677000018 12.433 710.7395467000008 12.672 712.3059272999996 13.186 708.0677554000017 12.494 712.5959873000002 13.189 707.6249774999997 12.37 712.695270300001 13.143 706.0081700000002 12.36 713.3230909000007 12.691 708.0507839000002 13.338 717.9395926000007 13.836 711.2194023999994 11.871)
Error minima by case: (0.4808 8 8.0397 2 6.3386 2 11.1028 3 0.0962 8 0.5421 2 0.0587 2 0.2382 2 0.1198 2 0.8905 3 0.7131 8 4.051 2 3.1127 2 1.0031 2 1.3418 2 1.0453 2 1.6778 2 1.1137 8 0.0355 8 0.1689 8 0.0217 7 5.5993 2 3.9097 8 0.6331 7 0.0023 2)
Average genome size in population (length): 49.665
Average program size in population (points): 50.665
Average percent parens in population: 0.043
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.32
Error (vector) diversity:			 0.343
Behavioral diversity:				 0.362
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1245577
--- Timings ---
Current time: 1529615846948 milliseconds
Total Time:           3.1 seconds
Initialization:       0.1 seconds,  3.6%
Reproduction:         0.5 seconds, 17.8%
Fitness Testing:      2.4 seconds, 78.6%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 68200.66239999993
Test mean error for best: 34.10033
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 
-18.2111756481
Correct output: 151.9603289886 | Program output: 
73.7491533405
Correct output: -154.3386139493 | Program output: 
-18.2111756481
Correct output: 146.6899406572 | Program output: 
47.4787650091
Correct output: -41.9038407726 | Program output: 
7.9811428067 
Correct output: -5.4578605766  | Program output: 
-18.2111756481
Correct output: -10.0587306507 | Program output: 
-18.2111756481
Correct output: 63.238225746   | Program output: 
53.027050098 
Correct output: -39.8453270272 | Program output: 
-18.2111756481
Correct output: -11.1095283178 | Program output: 
0.693541174  
Correct output: -65.6248753443 | Program output: 
6.914198319  
Correct output: 92.9489754291  | Program output: 
18.737799781 
Correct output: -89.6711126902 | Program output: 
-18.2111756481
Correct output: 87.8607804274  | Program output: 
61.6496047794
Correct output: 11.3417885788  | Program output: 
39.1306129307
Correct output: -61.0452729724 | Program output: 
-18.2111756481
Correct output: 84.2909392123  | Program output: 
30.0797635642
Correct output: 73.8725844146  | Program output: 
-8.0837600627
Correct output: 2.0900277855   | Program output: 
-18.2111756481
Correct output: -1.2824481557  | Program output: 
71.5063761962
Correct output: 0.7518561607   | Program output: 
-18.2111756481
Correct output: 46.5683272221  | Program output: 
39.357151574 
Correct output: 44.8787195349  | Program output: 
-18.2111756481
Correct output: -55.2032724973 | Program output: 
19.5855518546
Correct output: 1.6433897119   | Program output: 
75.4322140638
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_cos} {:instruction tag_float_957} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_min} {:instruction float_yank} {:instruction float_flush} {:instruction float_sub} {:instruction float_dup} {:instruction float_tan} {:instruction float_tan} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_integer_390} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction print_newline} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_yank} {:instruction 28.48700714496357} {:instruction float_mod} {:instruction float_cos} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction -16.72834034841169} {:instruction integer_pop} {:instruction float_add} {:instruction integer_dup} {:instruction in1} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_div float_cos tag_float_957 integer_fromfloat float_dec integer_min float_yank float_flush float_sub float_dup float_tan float_tan float_shove float_stackdepth tag_integer_390 integer_shove integer_swap float_max integer_mod print_newline integer_dup integer_flush integer_stackdepth integer_pop float_shove float_yank float_sub float_stackdepth integer_mod float_dup_times float_yank 28.48700714496357 float_mod float_cos float_tan integer_mod integer_stackdepth integer_rot -16.72834034841169 integer_pop float_add integer_dup in1 float_mod integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [21.7304 11 78.2112 13 136.1274 12 99.2112 11 49.885 11 12.7533 13 8.1524 11 10.2112 11 21.6342 13 11.8031 10 72.5391 10 74.2112 11 71.4599 10 26.2112 9 27.7888 12 42.8341 12 54.2112 11 81.9563 13 20.3012 14 72.7888 11 18.963 12 7.2112 13 63.0899 11 74.7888 13 73.7888 12]
Total: 1521.8629
Mean: 30.437258
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 6663.147942299997
Median total errors in population: 1660.6919999999996
Error averages by case: (220.6064416000001 12.145 299.30719469999997 10.197 312.4109566999995 11.145 301.10324789999936 10.561 249.55928780000008 12.563 239.59023220000037 9.581 233.93576109999893 9.917 250.2618147999996 9.547 247.8563640999981 10.298 222.36650759999975 12.255 265.46681469999953 12.874 266.88153679999914 10.022 271.8408849000009 10.439 251.528293599999 9.713 238.54562559999906 10.087 250.41313169999987 10.175 258.5799958999994 9.719 266.30799450000063 12.393 241.9232857999995 11.296 249.30996999999942 12.209 241.89734980000028 11.615 243.0783711000019 10.096 251.42977110000004 12.593 267.1935402999991 12.438 248.35756800000013 9.518)
Error minima by case: (0.4808 7 8.0397 2 4.6614 2 11.1028 2 0.0962 8 0.5421 2 0.0587 2 0.2382 2 2.1547 2 0.8905 4 0.7131 8 4.051 2 1.6711 2 4.0809 1 1.0947 2 3.8665 1 1.2909 2 1.1137 8 0.0355 8 0.0054 7 0.0217 7 5.5993 1 3.9097 7 0.1043 9 0.0023 2)
Average genome size in population (length): 57.766
Average program size in population (points): 58.766
Average percent parens in population: 0.023
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.499
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.774
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.774
Total error diversity:				 0.28
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.31
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2696316
--- Timings ---
Current time: 1529615850671 milliseconds
Total Time:           6.7 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.3 seconds, 34.0%
Fitness Testing:      4.0 seconds, 59.2%
Report:               0.3 seconds,  5.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 67894.95129999999
Test mean error for best: 33.94748
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 
-17.0334370759
Correct output: 151.9603289886 | Program output: 
74.9268919127
Correct output: -154.3386139493 | Program output: 
-17.0334370759
Correct output: 146.6899406572 | Program output: 
48.6565035812
Correct output: -41.9038407726 | Program output: 
9.1588813789 
Correct output: -5.4578605766  | Program output: 
-17.0334370759
Correct output: -10.0587306507 | Program output: 
-17.0334370759
Correct output: 63.238225746   | Program output: 
54.2047886701
Correct output: -39.8453270272 | Program output: 
-17.0334370759
Correct output: -11.1095283178 | Program output: 
1.8712797462 
Correct output: -65.6248753443 | Program output: 
8.0919368911 
Correct output: 92.9489754291  | Program output: 
19.9155383532
Correct output: -89.6711126902 | Program output: 
-17.0334370759
Correct output: 87.8607804274  | Program output: 
62.8273433515
Correct output: 11.3417885788  | Program output: 
40.3083515028
Correct output: -61.0452729724 | Program output: 
-17.0334370759
Correct output: 84.2909392123  | Program output: 
31.2575021364
Correct output: 73.8725844146  | Program output: 
-6.9060214906
Correct output: 2.0900277855   | Program output: 
-17.0334370759
Correct output: -1.2824481557  | Program output: 
72.6841147683
Correct output: 0.7518561607   | Program output: 
-17.0334370759
Correct output: 46.5683272221  | Program output: 
40.5348901462
Correct output: 44.8787195349  | Program output: 
-17.0334370759
Correct output: -55.2032724973 | Program output: 
20.7632904268
Correct output: 1.6433897119   | Program output: 
76.609952636 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_cos} {:instruction tag_float_957} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_min} {:instruction float_yank} {:instruction float_flush} {:instruction float_sub} {:instruction float_dup} {:instruction float_tan} {:instruction float_tan} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_integer_390} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction print_newline} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_yank} {:instruction 28.48700714496357} {:instruction float_mod} {:instruction float_cos} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction -16.72834034841169} {:instruction integer_pop} {:instruction float_dup} {:instruction float_cos} {:instruction integer_div} {:instruction tagged_536} {:instruction float_sub} {:instruction integer_inc} {:instruction float_pop} {:instruction float_yank} {:instruction 28.48700714496357} {:instruction float_mod} {:instruction float_cos} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction -16.72834034841169} {:instruction integer_pop} {:instruction float_add} {:instruction integer_dup} {:instruction in1} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_div float_cos tag_float_957 integer_fromfloat float_dec integer_min float_yank float_flush float_sub float_dup float_tan float_tan float_shove float_stackdepth tag_integer_390 integer_shove integer_swap float_max integer_mod print_newline integer_dup integer_flush integer_stackdepth integer_pop float_shove float_yank float_sub float_stackdepth integer_mod float_dup_times float_yank 28.48700714496357 float_mod float_cos float_tan integer_mod integer_stackdepth integer_rot -16.72834034841169 integer_pop float_dup float_cos integer_div tagged_536 float_sub integer_inc float_pop float_yank 28.48700714496357 float_mod float_cos float_tan integer_mod integer_stackdepth integer_rot -16.72834034841169 integer_pop float_add integer_dup in1 float_mod integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [20.5526 13 77.0334 11 137.3052 11 98.0334 9 51.0627 11 11.5756 12 6.9747 9 9.0334 11 22.8119 11 12.9808 12 73.7168 13 73.0334 12 72.6377 13 25.0334 12 28.9666 10 44.0118 11 53.0334 11 80.7786 11 19.1235 11 73.9666 12 17.7853 12 6.0334 10 61.9122 13 75.9666 10 74.9666 11]
Total: 1510.3296
Mean: 30.206593
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4409.7375075
Median total errors in population: 1604.0
Error averages by case: (137.14157969999997 12.859 188.92849899999993 5.605 202.6469048999999 6.008 202.9755469 6.205 163.02005899999992 12.25 172.73670889999994 5.336 159.7622350999999 5.44 137.8481904000001 5.276 163.62207599999994 5.657 128.87702760000005 11.747 181.53902760000003 12.467 174.2527607 5.454 170.37295039999992 5.817 140.7595907 5.264 152.0102132 5.55 150.31887399999997 5.631 158.8430950000001 5.25 189.91571470000022 12.316 178.37179519999998 10.876 183.3602366999998 12.177 180.88604270000013 12.14 134.8477243 5.472 177.3571383000001 12.925 191.8233904999999 11.649 182.81712600000012 5.332)
Error minima by case: (0.4808 7 59.0 2 75.3386 2 65.6899 2 0.5775 8 3.5238 2 4.8099 2 7.0 2 2.7938 2 1.8905 9 8.3751 9 36.949 2 33.6711 2 7.0 1 6.5878 2 5.0453 1 31.7073 2 10.1274 9 0.0355 8 0.0054 7 0.0217 7 6.0153 1 7.7049 8 0.7967 9 0.0023 2)
Average genome size in population (length): 44.158
Average program size in population (points): 45.158
Average percent parens in population: 0.033
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9285
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.118
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3804191
--- Timings ---
Current time: 1529615854111 milliseconds
Total Time:          10.1 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         3.7 seconds, 37.0%
Fitness Testing:      5.5 seconds, 54.2%
Report:               0.8 seconds,  7.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 67484.66239999994
Test mean error for best: 33.74233
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -18.2111756481
Correct output: 151.9603289886 | Program output: 73.7491533405 
Correct output: -154.3386139493 | Program output: -18.2111756481
Correct output: 146.6899406572 | Program output: 47.4787650091 
Correct output: -41.9038407726 | Program output: 7.9811428067  
Correct output: -5.4578605766  | Program output: -18.2111756481
Correct output: -10.0587306507 | Program output: -18.2111756481
Correct output: 63.238225746   | Program output: 53.027050098  
Correct output: -39.8453270272 | Program output: -18.2111756481
Correct output: -11.1095283178 | Program output: 0.693541174   
Correct output: -65.6248753443 | Program output: 6.914198319   
Correct output: 92.9489754291  | Program output: 18.737799781  
Correct output: -89.6711126902 | Program output: -18.2111756481
Correct output: 87.8607804274  | Program output: 61.6496047794 
Correct output: 11.3417885788  | Program output: 39.1306129307 
Correct output: -61.0452729724 | Program output: -18.2111756481
Correct output: 84.2909392123  | Program output: 30.0797635642 
Correct output: 73.8725844146  | Program output: -8.0837600627 
Correct output: 2.0900277855   | Program output: -18.2111756481
Correct output: -1.2824481557  | Program output: 71.5063761962 
Correct output: 0.7518561607   | Program output: -18.2111756481
Correct output: 46.5683272221  | Program output: 39.357151574  
Correct output: 44.8787195349  | Program output: -18.2111756481
Correct output: -55.2032724973 | Program output: 19.5855518546 
Correct output: 1.6433897119   | Program output: 75.4322140638 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_cos} {:instruction tag_float_957} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_min} {:instruction float_flush} {:instruction float_flush} {:instruction float_sub} {:instruction float_dup} {:instruction float_tan} {:instruction float_tan} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_integer_390} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_yank} {:instruction 28.48700714496357} {:instruction float_mod} {:instruction float_cos} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction -16.72834034841169} {:instruction integer_pop} {:instruction float_add} {:instruction integer_dup} {:instruction in1} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_div float_cos tag_float_957 integer_fromfloat float_dec integer_min float_flush float_flush float_sub float_dup float_tan float_tan float_shove float_stackdepth tag_integer_390 integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush integer_stackdepth integer_pop float_shove float_yank float_sub float_stackdepth integer_mod float_dup_times float_yank 28.48700714496357 float_mod float_cos float_tan integer_mod integer_stackdepth integer_rot -16.72834034841169 integer_pop float_add integer_dup in1 float_mod integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [21.7304 10 78.2112 13 136.1274 11 99.2112 11 49.885 11 12.7533 12 8.1524 10 10.2112 10 21.6342 12 11.8031 10 72.5391 10 74.2112 10 71.4599 9 26.2112 8 27.7888 11 42.8341 11 54.2112 10 81.9563 12 20.3012 13 72.7888 10 18.963 11 7.2112 12 63.0899 11 74.7888 13 73.7888 11]
Total: 1503.8629
Mean: 30.077257
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 4140.522492499999
Median total errors in population: 1588.0
Error averages by case: (130.23107220000003 13.049 163.8115055000001 3.963 181.74179189999992 3.992 182.39042570000004 4.618 155.27038629999987 12.247 173.51693239999994 3.857 155.29242370000009 3.857 116.65384440000008 3.674 155.61980859999997 3.942 116.1296543000001 11.461 171.65891939999992 12.25 159.45069850000002 3.773 155.06857700000006 3.882 116.28172500000005 3.645 147.43928439999996 3.817 134.56128949999993 3.931 141.23612620000006 3.746 181.45866320000007 12.227 182.96593059999998 10.594 186.93077909999997 12.186 184.57987740000002 12.263 117.97314300000006 3.85 174.15969280000002 13.115 189.10352420000004 11.527 187.80941719999998 3.721)
Error minima by case: (1.9686 8 59.0 2 72.961 2 64.6899 2 12.0962 10 5.1913 2 4.8099 2 7.0 2 21.6342 2 0.8905 10 7.3751 10 35.949 2 8.2935 2 7.0 1 9.7913 2 12.7127 1 35.0 2 9.1274 9 0.3279 8 0.0054 7 0.2182 9 4.6381 1 7.9368 9 18.5547 10 0.0929 2)
Average genome size in population (length): 33.908
Average program size in population (points): 34.908
Average percent parens in population: 0.043
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4295
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.042
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 4653016
--- Timings ---
Current time: 1529615857201 milliseconds
Total Time:          13.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.1 seconds, 38.2%
Fitness Testing:      6.8 seconds, 51.4%
Report:               1.3 seconds,  9.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 67443.73350000002
Test mean error for best: 33.72187
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -15.3418065622
Correct output: 151.9603289886 | Program output: 76.6185224264 
Correct output: -154.3386139493 | Program output: -15.3418065622
Correct output: 146.6899406572 | Program output: 50.348134095  
Correct output: -41.9038407726 | Program output: 10.8505118926 
Correct output: -5.4578605766  | Program output: -15.3418065622
Correct output: -10.0587306507 | Program output: -15.3418065622
Correct output: 63.238225746   | Program output: 55.8964191838 
Correct output: -39.8453270272 | Program output: -15.3418065622
Correct output: -11.1095283178 | Program output: 1.6724385777  
Correct output: -65.6248753443 | Program output: 1.4084427492  
Correct output: 92.9489754291  | Program output: 21.6071688669 
Correct output: -89.6711126902 | Program output: -15.3418065622
Correct output: 87.8607804274  | Program output: 64.5189738652 
Correct output: 11.3417885788  | Program output: 41.9999820166 
Correct output: -61.0452729724 | Program output: -15.3418065622
Correct output: 84.2909392123  | Program output: 32.9491326501 
Correct output: 73.8725844146  | Program output: -5.2143909768 
Correct output: 2.0900277855   | Program output: -15.3418065622
Correct output: -1.2824481557  | Program output: 74.375745282  
Correct output: 0.7518561607   | Program output: -15.3418065622
Correct output: 46.5683272221  | Program output: 42.2265206599 
Correct output: 44.8787195349  | Program output: -15.3418065622
Correct output: -55.2032724973 | Program output: 22.4549209405 
Correct output: 1.6433897119   | Program output: 78.3015831497 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction float_add} {:instruction float_dup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_yank} {:instruction integer_dup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction float_mult} {:instruction integer_dup_items} {:instruction float_inc} {:instruction integer_add} {:instruction float_cos} {:instruction integer_dup} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_shove} {:instruction -41.17725001232091} {:instruction integer_add} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_min} {:instruction integer_swap} {:instruction float_sin} {:instruction integer_sub} {:instruction float_yank} {:instruction 28.48700714496357} {:instruction float_mod} {:instruction float_cos} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction -16.72834034841169} {:instruction integer_pop} {:instruction float_add} {:instruction integer_dup} {:instruction in1} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_tan float_add float_dup float_inc float_frominteger float_dec float_yank integer_dup integer_dup_items integer_pop float_mult integer_dup_items float_inc integer_add float_cos integer_dup float_yankdup float_tan float_shove -41.17725001232091 integer_add integer_dup_times float_sub integer_min integer_swap float_sin integer_sub float_yank 28.48700714496357 float_mod float_cos float_tan integer_mod integer_stackdepth integer_rot -16.72834034841169 integer_pop float_add integer_dup in1 float_mod integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [18.861 10 75.3418 12 138.9968 10 96.3418 10 52.7544 11 9.8839 9 5.2831 9 7.3418 12 24.5035 10 12.782 10 67.0333 11 71.3418 12 74.3293 10 23.3418 11 30.6582 10 45.7035 10 51.3418 10 79.087 12 17.4318 13 75.6582 11 16.0937 9 4.3418 10 60.2205 12 77.6582 12 76.6582 10]
Total: 1478.9892
Mean: 29.579784
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 4334.6545795
Median total errors in population: 1588.0
Error averages by case: (138.43458809999998 12.698 174.57512119999967 5.994 200.19804239999982 5.713 192.53381829999967 5.912 162.49775350000021 11.926 170.8326691000002 5.706 155.4775061000001 5.361 124.63593070000033 5.268 158.55436890000004 5.785 125.3843838000003 11.515 179.72769049999965 12.031 169.48864919999968 5.402 167.66739429999961 5.409 127.89960490000034 4.925 152.27573930000005 5.501 146.2942950999997 5.626 152.02577249999993 5.391 190.13805199999973 12.099 179.51150169999949 11.115 191.00463430000036 11.99 180.5199499999997 12.331 125.61218110000037 5.66 180.4748349999998 12.822 193.6829830000004 11.71 191.8891145000004 5.428)
Error minima by case: (1.5566 8 31.9603 2 3.6614 2 15.3101 2 12.0962 9 2.3455 2 4.8099 2 1.5729 2 21.4875 2 0.8905 8 7.3751 9 19.051 2 14.3289 2 5.4499 1 9.3262 2 12.7127 2 12.2909 2 9.0615 9 0.0915 9 0.0054 7 0.3996 7 4.1709 2 19.9324 10 18.5547 8 0.1628 2)
Average genome size in population (length): 41.61
Average program size in population (points): 42.61
Average percent parens in population: 0.034
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.863
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.608
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.608
Total error diversity:				 0.067
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 5695555
--- Timings ---
Current time: 1529615860341 milliseconds
Total Time:          16.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.4 seconds, 38.9%
Fitness Testing:      8.3 seconds, 50.3%
Report:               1.7 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 62789.43539999999
Test mean error for best: 31.39472
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -18.2111756481
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -18.2111756481
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: -18.2111756481
Correct output: -10.0587306507 | Program output: -18.2111756481
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -18.2111756481
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -18.2111756481
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: -18.2111756481
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -10.1274155854
Correct output: 2.0900277855   | Program output: -18.2111756481
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: -18.2111756481
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -18.2111756481
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction integer_dec} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_sub} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_dec} {:instruction float_tan} {:instruction 59.163467644772396} {:instruction float_pop} {:instruction 28.48700714496357} {:instruction float_mod} {:instruction float_cos} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction -16.72834034841169} {:instruction integer_pop} {:instruction float_add} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_yankdup integer_flush -81.37761634098129 integer_dec in2 float_cos float_yankdup -81 float_sub integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_flush integer_inc float_dec integer_dec float_tan 59.163467644772396 float_pop 28.48700714496357 float_mod float_cos float_tan integer_mod integer_stackdepth integer_rot -16.72834034841169 integer_pop float_add integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [21.7304 10 60.0 2 136.1274 11 81.0 3 55.0 12 12.7533 12 8.1524 10 8.0 2 21.6342 12 13.0 11 74.0 12 56.0 2 71.4599 9 8.0 2 46.0 2 42.8341 11 36.0 2 84.0 12 20.3012 13 91.0 12 18.963 11 11.0 2 63.0899 11 93.0 11 92.0 2]
Total: 1424.0458
Mean: 28.480915
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3674.61373139999
Median total errors in population: 1521.8629
Error averages by case: (110.30349339999998 11.964 158.1281727999998 10.71 207.23179519999945 10.108 176.25293009999928 9.549 136.4083496999995 11.495 113.69189959999872 10.399 106.58571810000076 9.082 100.58231760000056 9.35 117.77088610000013 10.478 98.30040470000037 11.251 153.64224689999895 11.443 152.3289931 9.579 155.13420990000003 9.553 109.92310360000064 8.697 118.84356029999924 9.821 128.5018049999985 10.076 134.48047780000059 9.619 164.81947699999972 12.055 120.78625010000069 12.463 157.6829864000001 11.475 120.2321585000012 12.171 98.46236750000057 10.178 149.20960110000036 12.155 161.0606954000002 12.03 158.64283150000017 9.906)
Error minima by case: (2.7161 8 58.0 2 76.3386 2 64.6899 2 12.0962 8 2.3455 2 3.6642 2 3.6869 1 4.9058 2 0.8905 8 7.3751 8 33.3976 2 31.4983 2 6.0 1 0.4169 2 0.8619 2 24.7396 2 11.1274 8 1.2203 9 0.0054 7 0.0512 7 1.55 2 7.7049 8 36.7967 9 0.5854 2)
Average genome size in population (length): 53.749
Average program size in population (points): 54.749
Average percent parens in population: 0.022
Minimum age in population: 5.0
Maximum age in population: 9.25
Average age in population: 7.407375
Median age in population: 7.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.147
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.151
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7043780
--- Timings ---
Current time: 1529615863603 milliseconds
Total Time:          19.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.7 seconds, 39.0%
Fitness Testing:      9.9 seconds, 50.2%
Report:               2.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 62789.43539999999
Test mean error for best: 31.39472
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -18.2111756481
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -18.2111756481
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: -18.2111756481
Correct output: -10.0587306507 | Program output: -18.2111756481
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -18.2111756481
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -18.2111756481
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: -18.2111756481
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -10.1274155854
Correct output: 2.0900277855   | Program output: -18.2111756481
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: -18.2111756481
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -18.2111756481
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction integer_dec} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_sub} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_dec} {:instruction integer_dec} {:instruction float_tan} {:instruction 59.163467644772396} {:instruction float_pop} {:instruction 28.48700714496357} {:instruction float_mod} {:instruction float_cos} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction -16.72834034841169} {:instruction integer_pop} {:instruction float_add} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_yankdup integer_flush -81.37761634098129 integer_dec in2 float_cos float_yankdup -81 float_sub integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_flush integer_inc float_dec integer_dec float_tan 59.163467644772396 float_pop 28.48700714496357 float_mod float_cos float_tan integer_mod integer_stackdepth integer_rot -16.72834034841169 integer_pop float_add integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [21.7304 10 60.0 2 136.1274 11 81.0 3 55.0 12 12.7533 12 8.1524 10 8.0 2 21.6342 12 13.0 11 74.0 12 56.0 2 71.4599 9 8.0 2 46.0 2 42.8341 11 36.0 2 84.0 12 20.3012 13 91.0 12 18.963 11 11.0 2 63.0899 11 93.0 11 92.0 2]
Total: 1424.0458
Mean: 28.480915
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3566.6341198000014
Median total errors in population: 1500.4765
Error averages by case: (108.40675069999998 11.649 154.8278639999996 11.808 215.57351199999948 11.259 173.35649879999968 11.048 129.2855543 11.52 102.53357229999911 11.142 98.74659440000032 9.95 92.81127650000042 10.303 113.6474252000002 11.538 93.0131526 11.248 147.1000804999993 11.411 148.95986039999966 10.792 157.64435359999973 11.02 106.59327810000048 10.215 110.2374990999997 10.867 131.80092189999948 11.287 131.39128550000032 10.918 163.97907079999965 11.53 108.77380880000061 12.424 149.74206170000028 11.126 107.64409250000081 11.708 90.14215010000015 11.008 146.1138819999997 11.963 152.93880190000056 11.784 150.69477210000034 11.158)
Error minima by case: (1.9618 8 59.0 2 79.0 2 80.0 2 23.6927 8 2.3455 2 0.2025 2 4.8877 2 1.2025 2 5.9239 8 47.4137 8 55.0 2 31.4983 2 7.0 1 0.4169 2 0.513 2 35.0 2 45.3856 7 0.5326 8 0.2004 7 0.0098 8 1.5737 2 16.3917 9 36.9921 8 0.086 2)
Average genome size in population (length): 55.855
Average program size in population (points): 56.855
Average percent parens in population: 0.018
Minimum age in population: 6.25
Maximum age in population: 10.8125
Average age in population: 9.02878125
Median age in population: 9.0625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.207
Error (vector) diversity:			 0.208
Behavioral diversity:				 0.21
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 8443155
--- Timings ---
Current time: 1529615866895 milliseconds
Total Time:          23.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.0 seconds, 39.0%
Fitness Testing:     11.5 seconds, 50.1%
Report:               2.4 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 69224.83509999995
Test mean error for best: 34.61242
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -1.2158168295 
Correct output: 151.9603289886 | Program output: 91.1892341731 
Correct output: -154.3386139493 | Program output: -73.7872736292
Correct output: 146.6899406572 | Program output: 64.2613372115 
Correct output: -41.9038407726 | Program output: 1.168424528   
Correct output: -5.4578605766  | Program output: -0.2070953941 
Correct output: -10.0587306507 | Program output: -1.5450275101 
Correct output: 63.238225746   | Program output: 70.659373997  
Correct output: -39.8453270272 | Program output: -93.7590743952
Correct output: -11.1095283178 | Program output: 1.5654424041  
Correct output: -65.6248753443 | Program output: 7.8315823804  
Correct output: 92.9489754291  | Program output: 0.8977956209  
Correct output: -89.6711126902 | Program output: -36.115046781 
Correct output: 87.8607804274  | Program output: 79.6083748938 
Correct output: 11.3417885788  | Program output: 0.8450700651  
Correct output: -61.0452729724 | Program output: -0.5309174487 
Correct output: 84.2909392123  | Program output: 47.8765292113 
Correct output: 73.8725844146  | Program output: -0.9564465353 
Correct output: 2.0900277855   | Program output: -86.3720071055
Correct output: -1.2824481557  | Program output: 89.5343883499 
Correct output: 0.7518561607   | Program output: -0.7664071047 
Correct output: 46.5683272221  | Program output: 0.5774267041  
Correct output: 44.8787195349  | Program output: -29.7022910741
Correct output: -55.2032724973 | Program output: 1.5412200065  
Correct output: 1.6433897119   | Program output: 1.0778536526  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_cos} {:instruction tag_float_957} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_min} {:instruction float_flush} {:instruction float_flush} {:instruction float_sub} {:instruction float_dup} {:instruction float_tan} {:instruction float_tan} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_integer_390} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_yank} {:instruction 28.48700714496357} {:instruction float_mod} {:instruction float_cos} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_flush} {:instruction integer_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_cos} {:instruction integer_div} {:instruction tagged_536} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_pop} {:instruction float_yank} {:instruction in1} {:instruction float_mod} {:instruction float_cos} {:instruction float_tan} {:instruction float_add} {:instruction integer_dup} {:instruction in1} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc})
Best program: (float_div float_cos tag_float_957 integer_fromfloat float_dec integer_min float_flush float_flush float_sub float_dup float_tan float_tan float_shove float_stackdepth tag_integer_390 integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush integer_stackdepth integer_pop float_shove float_yank float_sub float_stackdepth integer_pop float_dup_times float_yank 28.48700714496357 float_mod float_cos float_tan integer_mod integer_stackdepth in2 float_flush integer_dup_items float_dup float_dup float_sub integer_shove integer_inc float_cos integer_div tagged_536 float_dup_items integer_inc float_pop float_yank in1 float_mod float_cos float_tan float_add integer_dup in1 float_mod integer_shove print_float float_yankdup float_yank float_tan integer_inc)
Errors: [4.735 9 60.7711 11 80.5513 11 82.4286 12 43.0723 9 5.2508 10 8.5137 9 7.4211 11 53.9137 10 12.675 12 73.4565 12 92.0512 9 53.5561 10 8.2524 10 10.4967 11 60.5144 11 36.4144 8 74.829 11 88.462 9 90.8168 11 1.5183 8 45.9909 9 74.581 11 56.7445 12 0.5655 10]
Total: 1383.5823
Mean: 27.671646
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3279.543546800006
Median total errors in population: 1483.3466
Error averages by case: (89.79063409999983 11.491 144.20006159999963 11.177 205.00492089999983 11.104 162.50541909999964 10.776 121.90053450000053 11.549 85.15680709999995 10.263 83.29530839999993 9.681 84.39944400000063 9.694 101.46257820000012 11.093 85.04651569999994 11.241 138.95386560000054 11.194 137.98597469999976 10.631 145.97589879999998 11.227 95.66198729999974 10.079 106.10820560000028 10.43 120.02686740000019 11.002 120.14880949999969 10.537 148.17954539999985 11.077 90.15679100000038 12.001 145.8395918000002 11.125 89.02167940000024 11.29 82.78399360000071 10.147 128.15946879999964 11.602 148.45019900000042 11.374 146.90644530000006 10.637)
Error minima by case: (2.7193 7 24.2717 2 61.2942 2 3.2717 3 23.6293 8 2.1988 2 0.2025 2 0.1711 2 1.2025 2 4.2323 8 48.5847 8 28.2717 2 34.2942 2 8.0 2 9.7844 2 3.1397 2 36.0 2 46.338 7 1.2203 9 0.1668 7 0.5359 7 2.7475 2 44.2036 9 37.6699 8 0.086 2)
Average genome size in population (length): 53.057
Average program size in population (points): 54.057
Average percent parens in population: 0.019
Minimum age in population: 8.0
Maximum age in population: 12.4375
Average age in population: 10.587078125
Median age in population: 10.640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.207
Error (vector) diversity:			 0.208
Behavioral diversity:				 0.209
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 9771630
--- Timings ---
Current time: 1529615870253 milliseconds
Total Time:          26.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.3 seconds, 39.2%
Fitness Testing:     13.1 seconds, 49.9%
Report:               2.8 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 69224.83509999995
Test mean error for best: 34.61242
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -1.2158168295 
Correct output: 151.9603289886 | Program output: 91.1892341731 
Correct output: -154.3386139493 | Program output: -73.7872736292
Correct output: 146.6899406572 | Program output: 64.2613372115 
Correct output: -41.9038407726 | Program output: 1.168424528   
Correct output: -5.4578605766  | Program output: -0.2070953941 
Correct output: -10.0587306507 | Program output: -1.5450275101 
Correct output: 63.238225746   | Program output: 70.659373997  
Correct output: -39.8453270272 | Program output: -93.7590743952
Correct output: -11.1095283178 | Program output: 1.5654424041  
Correct output: -65.6248753443 | Program output: 7.8315823804  
Correct output: 92.9489754291  | Program output: 0.8977956209  
Correct output: -89.6711126902 | Program output: -36.115046781 
Correct output: 87.8607804274  | Program output: 79.6083748938 
Correct output: 11.3417885788  | Program output: 0.8450700651  
Correct output: -61.0452729724 | Program output: -0.5309174487 
Correct output: 84.2909392123  | Program output: 47.8765292113 
Correct output: 73.8725844146  | Program output: -0.9564465353 
Correct output: 2.0900277855   | Program output: -86.3720071055
Correct output: -1.2824481557  | Program output: 89.5343883499 
Correct output: 0.7518561607   | Program output: -0.7664071047 
Correct output: 46.5683272221  | Program output: 0.5774267041  
Correct output: 44.8787195349  | Program output: -29.7022910741
Correct output: -55.2032724973 | Program output: 1.5412200065  
Correct output: 1.6433897119   | Program output: 1.0778536526  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_cos} {:instruction tag_float_957} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_min} {:instruction float_flush} {:instruction integer_swap} {:instruction float_sub} {:instruction float_dup} {:instruction float_tan} {:instruction float_tan} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_integer_390} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_yank} {:instruction 28.48700714496357} {:instruction float_mod} {:instruction float_cos} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_flush} {:instruction integer_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_cos} {:instruction integer_div} {:instruction tagged_536} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_pop} {:instruction float_yank} {:instruction in1} {:instruction float_mod} {:instruction float_cos} {:instruction float_tan} {:instruction float_add} {:instruction integer_dup} {:instruction in1} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc})
Best program: (float_div float_cos tag_float_957 integer_fromfloat float_dec integer_min float_flush integer_swap float_sub float_dup float_tan float_tan float_shove float_stackdepth tag_integer_390 integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush integer_stackdepth integer_pop float_shove float_yank float_sub float_stackdepth integer_pop float_dup_times float_yank 28.48700714496357 float_mod float_cos float_tan integer_mod integer_stackdepth in2 float_flush integer_dup_items float_dup float_dup float_sub integer_shove integer_inc float_cos integer_div tagged_536 float_dup_items integer_inc float_pop float_yank in1 float_mod float_cos float_tan float_add integer_dup in1 float_mod integer_shove print_float float_yankdup float_yank float_tan integer_inc)
Errors: [4.735 9 60.7711 11 80.5513 11 82.4286 12 43.0723 9 5.2508 10 8.5137 9 7.4211 11 53.9137 10 12.675 12 73.4565 12 92.0512 9 53.5561 10 8.2524 10 10.4967 11 60.5144 11 36.4144 8 74.829 11 88.462 9 90.8168 11 1.5183 8 45.9909 9 74.581 11 56.7445 12 0.5655 10]
Total: 1383.5823
Mean: 27.671646
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2931.5501474999915
Median total errors in population: 1468.9143000000004
Error averages by case: (72.19758890000011 11.347 123.50378209999931 9.876 197.82631349999986 10.848 141.99408499999947 9.782 109.88636870000059 11.505 70.92910829999992 9.958 71.4693232000003 9.461 68.84404500000034 8.857 93.9154603000004 10.87 71.4559081000002 11.277 127.62659170000087 11.101 117.75137979999937 9.419 138.64224629999953 10.939 74.1525413999998 8.761 98.49073630000044 9.614 112.06172789999975 10.439 99.25890079999965 9.159 134.75263210000006 11.337 73.76967889999996 11.815 138.9032939000007 11.127 72.15785790000031 10.716 70.09987370000032 8.872 111.07544460000014 11.254 142.37916630000072 11.089 139.3620928000006 9.621)
Error minima by case: (3.4744 8 39.477 2 79.0 2 18.477 2 6.0962 8 1.5549 2 0.2025 2 3.3393 2 1.2025 2 4.9931 8 17.6249 9 34.9914 2 41.6711 2 7.0 1 9.7844 2 2.1425 2 26.3333 2 15.915 8 0.3279 8 0.2004 7 0.4051 6 0.3393 2 13.0789 9 7.2033 8 0.086 2)
Average genome size in population (length): 52.861
Average program size in population (points): 53.861
Average percent parens in population: 0.019
Minimum age in population: 9.75
Maximum age in population: 14.1015625
Average age in population: 12.146125
Median age in population: 12.203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.666
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.666
Total error diversity:				 0.159
Error (vector) diversity:			 0.159
Behavioral diversity:				 0.16
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 11096555
--- Timings ---
Current time: 1529615873520 milliseconds
Total Time:          29.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.5 seconds, 39.1%
Fitness Testing:     14.7 seconds, 49.6%
Report:               3.2 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 69224.83509999995
Test mean error for best: 34.61242
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -1.2158168295 
Correct output: 151.9603289886 | Program output: 91.1892341731 
Correct output: -154.3386139493 | Program output: -73.7872736292
Correct output: 146.6899406572 | Program output: 64.2613372115 
Correct output: -41.9038407726 | Program output: 1.168424528   
Correct output: -5.4578605766  | Program output: -0.2070953941 
Correct output: -10.0587306507 | Program output: -1.5450275101 
Correct output: 63.238225746   | Program output: 70.659373997  
Correct output: -39.8453270272 | Program output: -93.7590743952
Correct output: -11.1095283178 | Program output: 1.5654424041  
Correct output: -65.6248753443 | Program output: 7.8315823804  
Correct output: 92.9489754291  | Program output: 0.8977956209  
Correct output: -89.6711126902 | Program output: -36.115046781 
Correct output: 87.8607804274  | Program output: 79.6083748938 
Correct output: 11.3417885788  | Program output: 0.8450700651  
Correct output: -61.0452729724 | Program output: -0.5309174487 
Correct output: 84.2909392123  | Program output: 47.8765292113 
Correct output: 73.8725844146  | Program output: -0.9564465353 
Correct output: 2.0900277855   | Program output: -86.3720071055
Correct output: -1.2824481557  | Program output: 89.5343883499 
Correct output: 0.7518561607   | Program output: -0.7664071047 
Correct output: 46.5683272221  | Program output: 0.5774267041  
Correct output: 44.8787195349  | Program output: -29.7022910741
Correct output: -55.2032724973 | Program output: 1.5412200065  
Correct output: 1.6433897119   | Program output: 1.0778536526  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_div} {:instruction float_cos} {:instruction tag_float_957} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_sub} {:instruction float_flush} {:instruction integer_swap} {:instruction float_sub} {:instruction float_dup} {:instruction float_tan} {:instruction float_tan} {:instruction float_shove} {:instruction float_stackdepth} {:instruction tag_integer_390} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_yank} {:instruction 28.48700714496357} {:instruction float_mod} {:instruction float_cos} {:instruction float_tan} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_flush} {:instruction integer_dup_items} {:instruction float_dup} {:instruction float_dup} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_cos} {:instruction integer_div} {:instruction tagged_536} {:instruction float_dup_items} {:instruction integer_inc} {:instruction float_pop} {:instruction float_yank} {:instruction in1} {:instruction float_mod} {:instruction float_cos} {:instruction float_tan} {:instruction float_add} {:instruction integer_dup} {:instruction in1} {:instruction float_mod} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc})
Best program: (float_div float_cos tag_float_957 integer_fromfloat float_dec integer_sub float_flush integer_swap float_sub float_dup float_tan float_tan float_shove float_stackdepth tag_integer_390 integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush integer_stackdepth integer_pop float_shove float_yank float_sub float_stackdepth integer_pop float_dup_times float_yank 28.48700714496357 float_mod float_cos float_tan integer_mod integer_stackdepth in2 float_flush integer_dup_items float_dup float_dup float_sub integer_shove integer_inc float_cos integer_div tagged_536 float_dup_items integer_inc float_pop float_yank in1 float_mod float_cos float_tan float_add integer_dup in1 float_mod integer_shove print_float float_yankdup float_yank float_tan integer_inc)
Errors: [4.735 9 60.7711 11 80.5513 11 82.4286 12 43.0723 9 5.2508 10 8.5137 9 7.4211 11 53.9137 10 12.675 12 73.4565 12 92.0512 9 53.5561 10 8.2524 10 10.4967 11 60.5144 11 36.4144 8 74.829 11 88.462 9 90.8168 11 1.5183 8 45.9909 9 74.581 11 56.7445 12 0.5655 10]
Total: 1383.5823
Mean: 27.671646
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2975.6342267999867
Median total errors in population: 1436.0350999999998
Error averages by case: (78.8521877 11.079 122.44605709999956 6.393 195.10627379999926 10.442 141.20357799999954 6.734 113.52274770000028 11.725 75.98456539999948 10.445 74.71060630000031 9.48 71.50102640000013 5.693 93.82202560000053 11.062 73.57076500000024 11.269 130.93532950000048 11.57 118.14003049999967 5.972 137.11460469999963 10.412 73.19028769999981 5.682 103.51751440000037 6.325 111.55974799999902 10.456 98.71614539999969 5.72 139.79501920000004 11.75 82.65229380000015 12.053 145.47327390000038 11.418 78.82540170000073 10.747 75.10237280000017 5.722 118.40269740000059 11.014 147.5325454000004 11.062 143.47912940000032 6.253)
Error minima by case: (1.9618 8 36.767 2 60.7888 2 17.5172 3 23.6927 8 0.2116 2 1.2806 2 2.5174 2 5.7209 2 4.9931 8 47.4137 9 22.2444 2 33.7888 2 8.0 1 7.9627 2 0.513 2 30.9024 2 31.4375 9 0.3279 8 0.2004 7 0.1261 7 3.1015 2 2.4436 8 36.9921 8 0.086 2)
Average genome size in population (length): 51.18
Average program size in population (points): 52.18
Average percent parens in population: 0.020
Minimum age in population: 11.375
Maximum age in population: 15.4609375
Average age in population: 13.51713671875
Median age in population: 13.56640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 63
Genome diversity (% unique Plush genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 63
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.127
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 12379705
--- Timings ---
Current time: 1529615876767 milliseconds
Total Time:          32.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        12.8 seconds, 39.1%
Fitness Testing:     16.1 seconds, 49.3%
Report:               3.7 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 52254.6268
Test mean error for best: 26.12731
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.0           
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.0           
Correct output: -10.0587306507 | Program output: 0.0           
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.0           
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.0           
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.0           
Correct output: 2.0900277855   | Program output: 0.0           
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 0.0           
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.0           
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction integer_dec} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_yankdup integer_flush -81.37761634098129 integer_dec in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush integer_stackdepth integer_pop float_shove float_yank float_sub float_stackdepth integer_pop float_dup_times float_yank integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [3.5192 11 60.0 2 79.0 2 81.0 3 55.0 12 5.4579 11 10.0587 11 8.0 2 39.8453 12 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 61.0453 12 36.0 2 73.8726 12 2.09 10 91.0 12 0.7519 9 11.0 2 44.8787 12 93.0 11 92.0 2]
Total: 1277.5196
Mean: 25.550392
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2889.721153699999
Median total errors in population: 1416.58925
Error averages by case: (77.21673620000003 10.985 120.67220179999981 4.439 182.59379100000024 10.466 139.655568 5.322 109.45742139999997 11.705 73.11336179999968 10.704 70.30076820000001 9.338 70.5088954 4.322 90.0663258000002 11.236 71.32917170000017 11.372 127.98596930000001 12.122 120.0692851000002 4.071 128.02016210000025 10.348 71.45494549999985 4.201 97.9911320000003 4.346 106.81346749999945 11.052 96.58328689999982 3.918 137.59679049999974 11.944 90.52668580000008 11.535 143.79939500000012 11.942 76.79276540000066 10.538 77.91396919999997 4.063 120.27906090000056 11.134 140.9833690000001 11.383 131.3316281999997 4.179)
Error minima by case: (1.9618 7 60.0 2 79.0 2 81.0 3 16.0962 8 0.2116 2 1.2806 2 5.5172 2 3.0897 2 4.1382 8 7.6249 8 34.9914 2 31.6711 2 8.0 2 9.7844 2 0.0041 2 26.3333 2 15.915 9 0.5326 7 0.2004 7 0.1261 7 8.5172 2 2.4436 8 2.7967 8 0.086 2)
Average genome size in population (length): 49.75
Average program size in population (points): 50.75
Average percent parens in population: 0.020
Minimum age in population: 12.53125
Maximum age in population: 16.89453125
Average age in population: 14.951419921875
Median age in population: 14.98828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.153
Error (vector) diversity:			 0.156
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 13627655
--- Timings ---
Current time: 1529615879921 milliseconds
Total Time:          36.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.1 seconds, 39.1%
Fitness Testing:     17.7 seconds, 49.0%
Report:               4.2 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 52254.6268
Test mean error for best: 26.12731
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.0           
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.0           
Correct output: -10.0587306507 | Program output: 0.0           
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.0           
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.0           
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.0           
Correct output: 2.0900277855   | Program output: 0.0           
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 0.0           
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.0           
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction integer_dec} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_yankdup integer_flush -81.37761634098129 integer_dec in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush integer_stackdepth integer_pop float_shove float_yank float_sub float_stackdepth integer_pop float_dup_times float_yank integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [3.5192 11 60.0 2 79.0 2 81.0 3 55.0 12 5.4579 11 10.0587 11 8.0 2 39.8453 12 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 61.0453 12 36.0 2 73.8726 12 2.09 10 91.0 12 0.7519 9 11.0 2 44.8787 12 93.0 11 92.0 2]
Total: 1277.5196
Mean: 25.550392
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3203.4183817000066
Median total errors in population: 1396.0465000000002
Error averages by case: (84.77582430000015 10.321 132.66499319999954 7.96 174.5525547000002 10.821 151.49355790000067 8.832 117.49317599999989 10.673 85.41272469999977 10.199 86.0579172 9.427 82.76793180000054 7.778 117.44791770000076 10.561 85.92888680000077 11.839 142.08562180000013 12.2 144.44809960000026 6.774 135.73038980000004 10.545 83.97107749999937 7.32 96.14934490000103 7.815 128.83064469999977 10.903 108.98913249999923 6.289 147.92290279999932 11.535 128.19504589999943 10.31 155.9168634000003 11.68 84.72541000000035 9.498 102.37208460000045 6.782 136.7228278000011 11.28 139.3219474000003 11.87 108.93550469999899 7.294)
Error minima by case: (1.9618 7 39.2289 2 79.0 2 17.5714 2 25.8012 8 0.2116 2 1.2806 2 6.3777 2 21.4675 2 2.5918 3 49.5223 9 55.0 2 52.0 2 7.0 1 0.4967 2 27.0 2 35.0 2 43.1961 8 0.5326 8 0.305 7 0.0167 7 9.5172 2 14.2023 9 39.1007 8 0.086 2)
Average genome size in population (length): 58.999
Average program size in population (points): 59.999
Average percent parens in population: 0.017
Minimum age in population: 13.984375
Maximum age in population: 18.2958984375
Average age in population: 16.5135595703125
Median age in population: 16.5693359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.127
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 15114155
--- Timings ---
Current time: 1529615883217 milliseconds
Total Time:          39.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.4 seconds, 39.2%
Fitness Testing:     19.3 seconds, 49.1%
Report:               4.5 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 51800.29709999999
Test mean error for best: 25.90015
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.9542088155  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.9542088155  
Correct output: -10.0587306507 | Program output: 0.9542088155  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.9542088155  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.9542088155  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.9542088155  
Correct output: 2.0900277855   | Program output: 0.9542088155  
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 0.9542088155  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.9542088155  
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction integer_dec} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_pop} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_yankdup integer_flush -81.37761634098129 integer_dec in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush integer_stackdepth integer_pop float_shove float_yank float_sub float_stackdepth integer_pop float_dup_times float_yank float_pop in1 float_max integer_shove print_float float_yankdup float_mult float_tan integer_inc float_sub float_min)
Errors: [2.565 9 60.0 2 79.0 2 81.0 3 55.0 12 6.4121 11 11.0129 11 8.0 2 40.7995 12 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 61.9995 12 36.0 2 72.9184 10 1.1358 7 91.0 12 0.2024 9 11.0 2 43.9245 12 93.0 11 92.0 2]
Total: 1269.9701000000002
Mean: 25.399403
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2774.370110699997
Median total errors in population: 1383.5823
Error averages by case: (63.7608625000005 9.574 116.89078259999911 10.385 137.07839560000215 10.544 136.72180659999987 11.227 98.33692049999988 9.71 68.23309800000087 9.986 69.3431996000012 9.204 66.66296479999978 10.185 107.77488630000109 10.097 68.06807300000115 11.99 125.66755410000019 12.096 138.61157510000064 8.66 110.4859310000011 9.659 66.73712119999908 9.51 69.78774650000145 10.309 112.81230779999993 10.901 92.23057979999906 7.901 128.97852219999896 11.205 134.55084119999952 9.474 138.6654658000004 11.227 65.77111180000134 8.652 96.3092833000006 8.678 126.00002990000162 11.316 113.90036570000045 12.021 67.07168579999883 9.408)
Error minima by case: (1.5192 8 40.0 1 37.4628 2 19.0 2 41.9038 8 3.975 2 8.066 2 6.3777 2 38.3625 2 10.4951 9 61.0726 9 44.0 2 31.0524 2 8.0 2 8.2488 2 26.4578 2 36.0 2 64.1863 8 0.09 7 1.0972 8 0.2024 8 9.5172 2 38.3421 9 55.2033 8 0.0023 2)
Average genome size in population (length): 65.472
Average program size in population (points): 66.472
Average percent parens in population: 0.015
Minimum age in population: 15.41796875
Maximum age in population: 19.9169921875
Average age in population: 17.899923828125
Median age in population: 17.949951171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.054
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 16768280
--- Timings ---
Current time: 1529615886627 milliseconds
Total Time:          42.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.7 seconds, 39.1%
Fitness Testing:     21.1 seconds, 49.3%
Report:               4.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 51924.7587
Test mean error for best: 25.96238
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.546563      
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.546563      
Correct output: -10.0587306507 | Program output: 0.546563      
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.546563      
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.546563      
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.546563      
Correct output: 2.0900277855   | Program output: 0.546563      
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 0.546563      
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.546563      
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush integer_stackdepth integer_pop float_shove float_yank float_sin float_stackdepth integer_pop float_dup_times float_yank integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [2.9726 9 60.0 2 79.0 2 81.0 3 55.0 12 6.0044 8 10.6053 9 8.0 2 40.3919 12 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 61.5918 12 36.0 2 73.326 10 1.5435 11 91.0 12 0.2053 7 11.0 2 44.3322 11 93.0 11 92.0 2]
Total: 1265.973
Mean: 25.31946
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3204.3561199000033
Median total errors in population: 1383.5823
Error averages by case: (79.9760829000003 10.008 133.42841719999961 8.868 154.2156154000007 9.082 152.48609910000076 9.731 120.46472499999989 10.351 86.08349079999982 9.947 86.55927470000002 9.385 86.6709494000006 8.672 120.9950373000009 10.239 88.90637050000096 11.922 145.34669980000012 12.186 148.62888229999993 7.539 128.16465070000083 8.358 84.21215419999933 8.159 96.78038970000118 8.77 127.14616489999985 10.835 109.29029049999916 6.946 143.67882449999942 11.413 136.38752479999934 9.638 158.76441810000028 11.492 84.2299210000006 8.984 109.99185950000053 7.528 136.37366370000143 11.568 140.0727344000004 11.919 103.89187949999891 8.07)
Error minima by case: (2.5192 7 60.0 2 79.0 2 71.4003 3 25.8324 8 3.975 2 5.9591 2 1.5395 2 23.7739 2 4.9619 9 49.5534 9 17.6594 2 52.0 2 8.0 2 4.4886 2 0.0041 2 9.0013 2 1.417 7 1.09 7 0.2004 7 0.0992 7 9.5172 2 13.7574 9 39.1318 8 0.039 2)
Average genome size in population (length): 61.33
Average program size in population (points): 62.33
Average percent parens in population: 0.017
Minimum age in population: 16.41796875
Maximum age in population: 21.2568359375
Average age in population: 19.17808422851562
Median age in population: 19.26025390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 91
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.069
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 18313880
--- Timings ---
Current time: 1529615889963 milliseconds
Total Time:          46.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.0 seconds, 39.2%
Fitness Testing:     22.7 seconds, 49.2%
Report:               5.2 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 51924.7587
Test mean error for best: 25.96238
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.546563      
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.546563      
Correct output: -10.0587306507 | Program output: 0.546563      
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.546563      
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.546563      
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.546563      
Correct output: 2.0900277855   | Program output: 0.546563      
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 0.546563      
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.546563      
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush integer_stackdepth integer_pop float_shove float_yank float_sin float_stackdepth integer_pop float_dup_times float_yank integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [2.9726 9 60.0 2 79.0 2 81.0 3 55.0 12 6.0044 8 10.6053 9 8.0 2 40.3919 12 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 61.5918 12 36.0 2 73.326 10 1.5435 11 91.0 12 0.2053 7 11.0 2 44.3322 11 93.0 11 92.0 2]
Total: 1265.973
Mean: 25.31946
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3003.0758220000016
Median total errors in population: 1277.5196
Error averages by case: (75.59558069999997 10.719 127.12877189999975 4.886 145.94701440000034 5.202 146.18652140000015 5.798 116.73965559999995 11.589 82.27415599999937 10.158 83.58370039999946 10.0 75.90239370000022 4.675 111.58017860000054 10.844 80.33417120000031 11.507 136.9031152000001 12.192 129.24749590000027 4.425 119.24602530000028 4.942 78.32929009999977 4.623 103.16760540000045 4.731 123.93717779999949 11.019 103.70642689999963 4.229 139.56595540000055 11.709 97.65860009999871 9.777 152.79416710000007 11.942 79.70719700000083 9.368 85.84208130000007 4.319 120.46275290000075 11.955 146.8338059000002 11.51 133.81598179999958 4.467)
Error minima by case: (1.6108 7 60.0 2 79.0 2 67.6899 3 40.421 8 3.975 2 7.3744 2 7.4211 2 10.0454 2 8.0886 10 63.883 9 38.949 2 14.3104 2 8.0 2 9.7844 2 26.4884 2 36.0 2 8.1274 8 0.1816 7 0.2004 7 0.1736 7 10.9441 2 12.8032 8 53.7204 8 0.086 2)
Average genome size in population (length): 52.289
Average program size in population (points): 53.289
Average percent parens in population: 0.019
Minimum age in population: 17.41796875
Maximum age in population: 22.76708984375
Average age in population: 20.33859069824219
Median age in population: 20.3895263671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 182
Genome diversity (% unique Plush genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 182
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.066
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 19624780
--- Timings ---
Current time: 1529615892996 milliseconds
Total Time:          49.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.3 seconds, 39.4%
Fitness Testing:     24.1 seconds, 49.0%
Report:               5.6 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 51924.7587
Test mean error for best: 25.96238
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.546563      
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.546563      
Correct output: -10.0587306507 | Program output: 0.546563      
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.546563      
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.546563      
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.546563      
Correct output: 2.0900277855   | Program output: 0.546563      
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 0.546563      
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.546563      
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush integer_stackdepth integer_pop float_shove float_yank float_sin float_stackdepth integer_pop float_dup_times float_yank integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [2.9726 9 60.0 2 79.0 2 81.0 3 55.0 12 6.0044 8 10.6053 9 8.0 2 40.3919 12 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 61.5918 12 36.0 2 73.326 10 1.5435 11 91.0 12 0.2053 7 11.0 2 44.3322 11 93.0 11 92.0 2]
Total: 1265.973
Mean: 25.31946
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2486.513518699997
Median total errors in population: 1277.5196
Error averages by case: (49.97895140000047 10.514 104.7866458 2.676 131.26811109999997 3.062 124.3743522 3.629 105.0543687 12.172 57.7388073000006 10.227 59.42984940000078 10.236 60.66892160000001 2.56 84.91007010000008 11.151 64.0152363 11.202 122.2700527 12.146 100.03406509999999 2.659 104.089415 3.044 54.76454460000001 2.652 96.4495296 2.609 100.51275000000007 11.133 81.14800199999999 2.644 116.47451520000028 11.324 55.27093909999911 9.224 138.9154605 12.11 54.459380000000394 9.456 63.5153871 2.609 90.66405830000002 12.073 140.96639929999998 11.221 139.8547063 2.566)
Error minima by case: (1.6108 7 60.0 2 79.0 2 81.0 3 42.7668 12 4.4579 2 9.0587 2 8.0 2 38.8453 2 10.7953 9 65.127 9 56.0 2 52.0 2 8.0 1 4.5018 2 19.9547 2 36.0 2 61.1162 8 0.1816 7 1.1013 8 0.064 7 11.0 2 12.8032 9 56.1575 11 0.6892 2)
Average genome size in population (length): 47.869
Average program size in population (points): 48.869
Average percent parens in population: 0.021
Minimum age in population: 18.94921875
Maximum age in population: 23.83056640625
Average age in population: 21.74507635498047
Median age in population: 21.7825927734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 97
Genome diversity (% unique Plush genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.06
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.061
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 20821505
--- Timings ---
Current time: 1529615895988 milliseconds
Total Time:          52.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.6 seconds, 39.6%
Fitness Testing:     25.4 seconds, 48.8%
Report:               6.0 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 52067.892600000014
Test mean error for best: 26.03395
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5197540207  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.5197540207  
Correct output: -10.0587306507 | Program output: 0.5197540207  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5197540207  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.5197540207  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5197540207  
Correct output: 2.0900277855   | Program output: 0.5197540207  
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 0.5197540207  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5197540207  
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush integer_stackdepth integer_pop float_shove float_yank float_sin float_stackdepth float_sin float_stackdepth integer_pop float_dup_times float_yank integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [2.9994 7 60.0 2 79.0 2 81.0 3 55.0 12 5.9776 11 10.5785 9 8.0 2 40.3651 11 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 61.565 11 36.0 2 73.3528 11 1.5703 10 91.0 12 0.2321 6 11.0 2 44.359 11 93.0 11 92.0 2]
Total: 1263.9997999999998
Mean: 25.279997
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2583.204039600007
Median total errors in population: 1269.9701000000002
Error averages by case: (51.45395640000027 9.774 106.94490219999999 2.729 136.756194 3.135 126.41255140000001 3.654 111.6633445 12.215 60.2078808000003 9.926 61.65414610000055 10.089 67.5550446 2.642 86.92932029999955 10.962 70.4646771 11.238 128.9033891 12.177 102.0353596 2.697 109.74554919999996 3.121 56.78228710000001 2.702 103.1335537 2.688 102.22597930000074 11.035 83.22308459999999 2.699 118.25842679999934 10.66 57.41131319999914 8.919 145.2778651 12.141 56.70457540000029 9.339 70.44441130000001 2.693 92.5698248999993 11.773 147.3093751 11.272 146.20702780000002 2.65)
Error minima by case: (1.565 7 59.246 2 79.0 2 81.0 3 42.7197 12 4.5037 2 9.1045 2 8.0 2 0.9954 2 10.7953 9 65.127 9 55.3183 2 52.0 2 7.031 1 10.3876 2 17.3228 2 35.0804 2 67.6721 8 0.1358 7 1.1013 8 0.064 6 11.0 2 38.6782 9 56.0191 11 0.6892 2)
Average genome size in population (length): 47.912
Average program size in population (points): 48.912
Average percent parens in population: 0.021
Minimum age in population: 20.41796875
Maximum age in population: 25.61407470703125
Average age in population: 23.38832067871094
Median age in population: 23.41583251953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.073
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.074
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 22019330
--- Timings ---
Current time: 1529615899135 milliseconds
Total Time:          55.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.9 seconds, 39.7%
Fitness Testing:     26.9 seconds, 48.7%
Report:               6.3 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 52025.79989999998
Test mean error for best: 26.01290
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [2.3633 9 60.0 2 79.0 2 81.0 3 55.0 12 6.6137 8 11.2146 8 8.0 2 41.0012 10 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 62.2011 9 36.0 2 72.7167 10 0.9342 11 91.0 12 0.404 8 11.0 2 43.7228 11 93.0 11 92.0 2]
Total: 1261.1716
Mean: 25.223433
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2758.581711499989
Median total errors in population: 1267.3811999999998
Error averages by case: (61.878038600000245 9.726 116.25594759999998 2.789 141.9994417 3.342 135.53807960000006 3.74 115.53654819999998 12.264 68.7452510999998 9.236 70.89660270000032 9.815 71.4903331 2.668 96.74778170000003 10.811 73.8805557 11.286 131.9847132 12.216 111.44127139999999 2.775 114.37487479999993 3.329 66.6258617 2.769 107.02239600000001 2.723 113.03483920000002 11.009 92.8181307 2.768 127.70558900000005 10.644 65.98205649999947 10.429 149.00211800000002 12.19 65.07696820000032 8.839 74.4026612 2.721 101.8316235999997 11.255 151.03017090000003 11.32 149.9318571 2.684)
Error minima by case: (1.6108 7 60.0 2 79.0 2 81.0 3 42.4092 9 1.6183 2 7.5796 2 8.0 2 37.3662 2 10.7953 9 65.127 9 56.0 2 52.0 2 8.0 1 10.6292 2 20.6315 2 36.0 2 63.1986 8 0.1816 7 1.1013 9 0.0089 6 11.0 2 13.2109 8 55.3007 11 0.8205 2)
Average genome size in population (length): 47.749
Average program size in population (points): 48.749
Average percent parens in population: 0.021
Minimum age in population: 22.77471923828125
Maximum age in population: 26.80540466308594
Average age in population: 24.98303184509277
Median age in population: 25.01225280761719
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 100
Genome diversity (% unique Plush genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.109
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 23213130
--- Timings ---
Current time: 1529615902299 milliseconds
Total Time:          58.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.2 seconds, 39.8%
Fitness Testing:     28.3 seconds, 48.5%
Report:               6.7 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 52025.79989999998
Test mean error for best: 26.01290
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [2.3633 9 60.0 2 79.0 2 81.0 3 55.0 12 6.6137 8 11.2146 8 8.0 2 41.0012 10 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 62.2011 9 36.0 2 72.7167 10 0.9342 11 91.0 12 0.404 8 11.0 2 43.7228 11 93.0 11 92.0 2]
Total: 1261.1716
Mean: 25.223433
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2702.1104938999974
Median total errors in population: 1265.973
Error averages by case: (63.64283230000042 9.615 117.0013071 2.834 136.78780710000007 3.264 136.30172319999997 3.777 108.10757199999999 12.19 70.36420839999978 8.631 72.66615130000046 9.249 63.9192834 2.599 98.59125450000094 11.188 68.33081659999999 11.222 125.8834888 12.154 112.3658167 2.783 109.20666609999992 3.237 67.66853340000002 2.792 99.51772989999999 2.653 115.06886639999894 11.341 93.76513990000001 2.798 129.3560510000003 10.394 67.31512249999986 10.842 141.8381083 12.114 66.34758190000056 7.902 66.68797620000001 2.652 103.47795610000026 11.164 143.88028119999998 11.24 142.77621960000002 2.607)
Error minima by case: (1.7033 7 60.0 2 79.0 2 81.0 3 42.4821 10 4.4425 2 9.0434 2 8.0 2 38.83 2 8.0886 9 63.883 9 56.0 2 52.0 2 8.0 2 10.3262 2 29.0 2 36.0 2 47.7001 8 0.2742 7 1.1013 8 0.0089 6 11.0 2 18.7062 9 55.3012 11 0.8205 2)
Average genome size in population (length): 47.601
Average program size in population (points): 48.601
Average percent parens in population: 0.021
Minimum age in population: 24.080810546875
Maximum age in population: 28.25696563720703
Average age in population: 26.37212921905518
Median age in population: 26.43057632446289
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 194
Genome diversity (% unique Plush genomes):	 0.613
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 194
Syntactic diversity (% unique Push programs):	 0.613
Total error diversity:				 0.1
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 24403155
--- Timings ---
Current time: 1529615905367 milliseconds
Total Time:          61.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.5 seconds, 39.9%
Fitness Testing:     29.7 seconds, 48.4%
Report:               7.1 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 52025.79989999998
Test mean error for best: 26.01290
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_dup integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_inc integer_inc float_sub float_min)
Errors: [2.3633 9 60.0 2 79.0 2 81.0 3 55.0 12 6.6137 8 11.2146 8 8.0 2 41.0012 10 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 62.2011 9 36.0 2 72.7167 10 0.9342 11 91.0 12 0.404 8 11.0 2 43.7228 11 93.0 11 92.0 2]
Total: 1261.1716
Mean: 25.223433
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2416.404186599997
Median total errors in population: 1265.973
Error averages by case: (45.2735154000004 9.225 100.27376740000001 2.702 133.7381738 3.356 119.91466759999996 3.62 105.084 12.155 51.28024449999981 8.885 54.02598100000048 9.087 60.575 2.54 80.55286900000064 11.077 65.31 11.197 123.077 12.135 95.3947246 2.616 105.70992919999998 3.283 50.17635340000002 2.639 96.561 2.591 97.95737769999975 11.169 76.42977400000001 2.647 111.96337559999988 10.427 47.923645599999865 10.594 139.176 12.094 46.8774089000006 7.572 63.416 2.59 85.48237889999967 11.088 141.07 11.204 140.123 2.545)
Error minima by case: (1.7307 7 59.0458 2 78.0 2 80.0458 2 54.0 12 4.4594 2 9.0603 2 7.0 2 9.2665 2 12.0 11 73.0 12 55.0458 2 51.0 2 7.0458 2 45.0 2 11.9334 1 35.0458 2 72.0841 8 0.3015 7 90.0 12 0.0056 6 10.0 1 43.0902 8 92.0 11 91.0 2)
Average genome size in population (length): 49.017
Average program size in population (points): 50.017
Average percent parens in population: 0.020
Minimum age in population: 25.76823425292969
Maximum age in population: 29.82932662963867
Average age in population: 27.8772642364502
Median age in population: 27.92557525634766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 125
Genome diversity (% unique Plush genomes):	 0.603
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.603
Total error diversity:				 0.083
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 25628580
--- Timings ---
Current time: 1529615908473 milliseconds
Total Time:          64.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.8 seconds, 40.0%
Fitness Testing:     31.2 seconds, 48.3%
Report:               7.5 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 52025.79989999998
Test mean error for best: 26.01290
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [2.3633 9 60.0 2 79.0 2 81.0 3 55.0 12 6.6137 8 11.2146 8 8.0 2 41.0012 10 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 62.2011 9 36.0 2 72.7167 10 0.9342 11 91.0 12 0.404 8 11.0 2 43.7228 11 93.0 11 92.0 2]
Total: 1261.1716
Mean: 25.223433
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2531.0546016999947
Median total errors in population: 1263.9997999999998
Error averages by case: (50.590416000000204 9.309 105.66561980000002 2.782 136.15172989999996 3.381 124.98923329999997 3.727 108.7678795 12.195 57.5594956999992 9.595 59.84915460000024 9.138 64.8672992 2.627 85.83120470000048 10.311 69.27876340000002 11.228 126.6930591 12.16 100.38374180000001 2.741 108.35392439999997 3.282 55.7428348 2.733 100.25072950000002 2.681 102.35045410000055 10.537 81.63410480000002 2.737 116.59052119999922 10.717 54.318667300000186 10.047 142.4134494 12.115 53.40238100000069 7.667 67.59690069999999 2.68 90.64796609999924 11.033 144.4636744 11.253 143.351397 2.634)
Error minima by case: (1.5526 7 60.0 2 79.0 2 66.6899 3 7.2133 10 4.4789 2 9.2529 2 8.0 2 9.2719 2 10.7953 9 16.5077 9 37.949 2 40.5539 2 8.0 2 10.3876 2 11.9281 2 36.0 2 7.1274 8 0.1234 7 1.1013 8 0.0023 6 11.0 2 28.1213 8 6.0861 10 0.6892 2)
Average genome size in population (length): 51.072
Average program size in population (points): 52.072
Average percent parens in population: 0.019
Minimum age in population: 26.95753479003906
Maximum age in population: 31.23199844360352
Average age in population: 29.46901073455811
Median age in population: 29.48823070526123
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.616
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.616
Total error diversity:				 0.106
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 26905380
--- Timings ---
Current time: 1529615911636 milliseconds
Total Time:          67.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.1 seconds, 40.0%
Fitness Testing:     32.7 seconds, 48.2%
Report:               7.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 52025.79989999998
Test mean error for best: 26.01290
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_inc integer_inc float_sub float_min)
Errors: [2.3633 9 60.0 2 79.0 2 81.0 3 55.0 12 6.6137 8 11.2146 8 8.0 2 41.0012 10 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 62.2011 9 36.0 2 72.7167 10 0.9342 11 91.0 12 0.404 8 11.0 2 43.7228 11 93.0 11 92.0 2]
Total: 1261.1716
Mean: 25.223433
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2678.6604237999936
Median total errors in population: 1263.7912000000001
Error averages by case: (60.6682375999998 9.982 113.99969150000001 2.804 137.9789973 3.256 133.4398654 3.744 109.75999439999998 12.155 68.50095899999954 9.14 70.45365789999957 9.026 65.75492390000001 2.626 95.75302130000054 9.864 70.24103090000001 11.207 127.6766033 12.148 109.433021 2.766 110.75305179999994 3.177 64.7421032 2.747 101.19052779999998 2.686 111.50125190000071 9.984 90.7322216 2.749 125.8965668000001 10.569 65.11284920000074 10.079 143.365899 12.092 64.48389300000082 8.241 68.50119389999999 2.682 100.44830620000006 10.936 145.4561006 11.217 144.3034553 2.636)
Error minima by case: (0.7049 7 59.0 2 78.0 2 65.6899 2 42.4092 11 4.4789 2 9.4605 2 7.0 2 39.2471 2 10.7953 9 65.127 9 36.949 2 51.0 2 7.0 1 10.6292 2 20.627 1 35.0 2 10.1274 8 0.0658 7 1.1013 9 0.0235 6 10.0 1 31.1213 8 55.3007 11 0.8205 2)
Average genome size in population (length): 51.08
Average program size in population (points): 52.08
Average percent parens in population: 0.020
Minimum age in population: 28.54359817504883
Maximum age in population: 32.9295825958252
Average age in population: 30.97191326713562
Median age in population: 30.998375415802
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.114
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 28182380
--- Timings ---
Current time: 1529615914781 milliseconds
Total Time:          70.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.4 seconds, 40.1%
Fitness Testing:     34.2 seconds, 48.2%
Report:               8.2 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 52025.79989999998
Test mean error for best: 26.01290
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_inc} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank integer_dup in1 float_max integer_shove print_float float_yankdup float_yank float_inc integer_inc float_sub float_min)
Errors: [2.3633 9 60.0 2 79.0 2 81.0 3 55.0 12 6.6137 8 11.2146 8 8.0 2 41.0012 10 13.0 11 74.0 12 56.0 2 52.0 2 8.0 2 46.0 2 62.2011 9 36.0 2 72.7167 10 0.9342 11 91.0 12 0.404 8 11.0 2 43.7228 11 93.0 11 92.0 2]
Total: 1261.1716
Mean: 25.223433
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2640.201548600004
Median total errors in population: 1261.1716
Error averages by case: (56.13975199999949 9.743 110.9573257 2.805 138.39022840000004 3.289 130.26664080000003 3.73 111.6426725 12.192 63.777851900000634 8.425 66.07931919999965 8.401 67.68418559999999 2.633 91.9586372999997 9.867 72.2431837 11.235 129.491421 12.164 105.9107183 2.79 110.93837119999988 3.272 61.39104629999998 2.772 103.2217549 2.693 108.42192210000104 9.306 87.2065437 2.798 121.85541130000085 10.521 59.804921000000995 10.749 145.41295069999998 12.123 59.43936480000056 8.591 70.46159660000001 2.694 95.96624770000128 11.204 147.29441759999997 11.25 146.3520643 2.646)
Error minima by case: (1.249 7 45.6661 2 79.0 2 70.7609 3 9.183 9 4.4789 2 9.2846 2 8.0 2 39.0712 2 8.0886 10 14.538 9 50.2407 2 38.5842 2 4.448 2 10.3262 2 20.3323 2 28.4729 2 63.0169 8 0.0658 7 4.1463 8 0.0095 6 11.0 2 13.0291 8 4.1164 7 2.334 2)
Average genome size in population (length): 48.379
Average program size in population (points): 49.379
Average percent parens in population: 0.020
Minimum age in population: 29.7921199798584
Maximum age in population: 34.18382740020752
Average age in population: 32.41667837142944
Median age in population: 32.43714213371277
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 100
Genome diversity (% unique Plush genomes):	 0.601
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 100
Syntactic diversity (% unique Push programs):	 0.601
Total error diversity:				 0.106
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 29391855
--- Timings ---
Current time: 1529615917928 milliseconds
Total Time:          74.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        29.7 seconds, 40.1%
Fitness Testing:     35.6 seconds, 48.1%
Report:               8.6 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 51768.187799999985
Test mean error for best: 25.88409
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 92.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 66.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 37.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 80.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 49.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank integer_dup in1 float_inc float_dup_times float_yank integer_dup in1 float_max integer_shove float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [2.3633 9 59.0 3 79.0 2 80.0 2 55.0 12 6.6137 8 11.2146 8 8.0 2 41.0012 10 13.0 11 74.0 12 55.0 2 52.0 2 7.0 1 46.0 2 62.2011 9 35.0 2 72.7167 10 0.9342 11 91.0 12 0.404 8 11.0 2 43.7228 11 93.0 11 92.0 2]
Total: 1255.1716
Mean: 25.103432
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2416.3659469000054
Median total errors in population: 1261.1716
Error averages by case: (47.70201159999955 9.62 103.56082519999998 2.695 129.70452460000004 2.996 122.9909092 3.623 101.2464123 12.151 55.584158000000876 8.189 57.87401149999959 8.214 57.2306812 2.549 83.99464009999934 9.888 60.816061499999996 11.184 118.43252269999999 12.128 98.47817479999999 2.679 102.62879439999999 2.971 53.266124999999995 2.666 92.77617990000002 2.602 100.57913550000104 9.115 79.66016499999998 2.698 114.64927990000093 10.459 51.47669990000094 10.947 135.2247468 12.093 51.196882000000436 8.63 59.9479436 2.599 88.32104840000149 11.227 137.16984399999998 11.195 136.1781698 2.558)
Error minima by case: (1.2074 7 40.0 1 75.3386 2 19.0 2 13.0962 11 5.0361 2 9.637 2 7.0 2 19.1547 2 1.8905 9 3.4424 9 44.0 2 20.6039 2 6.8441 1 10.6402 2 2.0453 2 34.8441 2 57.5193 8 0.0658 8 1.1013 9 0.014 7 10.0 1 28.5255 8 3.7967 9 0.8205 2)
Average genome size in population (length): 48.109
Average program size in population (points): 49.109
Average percent parens in population: 0.021
Minimum age in population: 31.64343452453613
Maximum age in population: 35.72110414505005
Average age in population: 33.87561606097221
Median age in population: 33.94456958770752
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 84
Genome diversity (% unique Plush genomes):	 0.628
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 84
Syntactic diversity (% unique Push programs):	 0.628
Total error diversity:				 0.086
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 30594580
--- Timings ---
Current time: 1529615921088 milliseconds
Total Time:          77.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.0 seconds, 40.1%
Fitness Testing:     37.1 seconds, 48.1%
Report:               9.0 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 51768.187799999985
Test mean error for best: 25.88409
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 92.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 66.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 37.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 80.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 49.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank integer_dup in1 float_inc float_dup_times float_yank integer_dup in1 float_max integer_shove float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [2.3633 9 59.0 3 79.0 2 80.0 2 55.0 12 6.6137 8 11.2146 8 8.0 2 41.0012 10 13.0 11 74.0 12 55.0 2 52.0 2 7.0 1 46.0 2 62.2011 9 35.0 2 72.7167 10 0.9342 11 91.0 12 0.404 8 11.0 2 43.7228 11 93.0 11 92.0 2]
Total: 1255.1716
Mean: 25.103432
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2665.8141565000055
Median total errors in population: 1261.1716
Error averages by case: (57.98798329999937 9.696 112.58212779999997 2.808 139.89565750000006 3.348 131.92271470000006 3.718 111.64875079999999 12.192 65.5363035000009 8.265 67.93167599999978 8.291 67.67229389999999 2.647 93.87742799999927 9.9 71.33453120000001 11.241 129.21038520000002 12.163 107.6978815 2.768 112.20714129999992 3.333 62.94013429999998 2.753 103.09823159999999 2.704 110.48734980000106 9.172 89.00472839999998 2.773 123.61179470000106 10.53 61.40163050000108 10.952 145.1822653 12.118 61.016850300000606 8.722 70.4791378 2.702 97.69577250000165 11.311 147.2699486 11.251 146.11543799999998 2.648)
Error minima by case: (0.5756 7 59.0 2 78.0 2 80.0 2 41.9038 11 5.2537 2 9.0624 2 7.0 2 39.8331 2 11.1095 10 65.6249 11 55.0 2 51.0 2 7.0 1 10.3876 2 21.9533 2 35.0 2 62.5893 8 0.0658 7 1.2824 8 0.014 7 10.0 1 12.6016 8 55.2033 11 0.6892 2)
Average genome size in population (length): 48.059
Average program size in population (points): 49.059
Average percent parens in population: 0.021
Minimum age in population: 32.77736663818359
Maximum age in population: 37.11783134937286
Average age in population: 35.30759461021423
Median age in population: 35.35066348314285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 61
Genome diversity (% unique Plush genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 61
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.095
Error (vector) diversity:			 0.095
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 31796080
--- Timings ---
Current time: 1529615924299 milliseconds
Total Time:          80.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.2 seconds, 40.1%
Fitness Testing:     38.6 seconds, 48.1%
Report:               9.4 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 51768.187799999985
Test mean error for best: 25.88409
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 92.9603289886 
Correct output: -154.3386139493 | Program output: -75.3386139493
Correct output: 146.6899406572 | Program output: 66.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 37.9489754291 
Correct output: -89.6711126902 | Program output: -37.6711126902
Correct output: 87.8607804274  | Program output: 80.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 49.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 89.7175518443 
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 37.7967275027 
Correct output: 1.6433897119   | Program output: 93.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction integer_shove} {:instruction float_max} {:instruction integer_shove} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank integer_dup in1 float_inc float_dup_times float_yank integer_dup in1 float_max integer_shove float_max integer_shove print_float float_yankdup float_yank float_tan integer_inc float_sub float_min)
Errors: [2.3633 9 59.0 3 79.0 2 80.0 2 55.0 12 6.6137 8 11.2146 8 8.0 2 41.0012 10 13.0 11 74.0 12 55.0 2 52.0 2 7.0 1 46.0 2 62.2011 9 35.0 2 72.7167 10 0.9342 11 91.0 12 0.404 8 11.0 2 43.7228 11 93.0 11 92.0 2]
Total: 1255.1716
Mean: 25.103432
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2822.6044014000063
Median total errors in population: 1261.1716
Error averages by case: (62.47044709999926 9.673 118.86328399999996 2.901 146.93201560000006 3.382 137.877608 3.772 119.2100487 12.191 70.57518400000089 8.323 72.72910570000006 8.339 75.54085409999999 2.694 98.67405219999927 10.013 78.39301669999999 11.257 135.6432125 12.169 113.59705919999998 2.88 119.60953849999986 3.337 69.04082519999999 2.833 110.7526881 2.757 114.99393720000127 9.279 95.12442239999999 2.879 128.88902190000124 10.552 66.5763233000011 10.991 152.5321845 12.128 66.30798890000058 8.67 78.3433679 2.743 102.8686759000016 11.333 154.55194690000002 11.258 153.45759289999998 2.696)
Error minima by case: (1.2074 8 58.8441 2 78.0 2 65.0373 2 42.4945 9 5.0361 2 9.637 2 7.0 2 39.4236 2 11.7002 10 66.2155 11 36.2963 2 51.0 2 6.8441 1 10.1859 2 27.0846 2 34.8441 2 10.7801 8 0.0658 7 1.8731 11 0.014 7 10.0 1 31.774 7 55.7939 10 0.4875 2)
Average genome size in population (length): 48.134
Average program size in population (points): 49.134
Average percent parens in population: 0.021
Minimum age in population: 34.32352751493454
Maximum age in population: 38.85155963897705
Average age in population: 36.72563297355175
Median age in population: 36.7890909910202
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.098
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 32999430
--- Timings ---
Current time: 1529615927532 milliseconds
Total Time:          83.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.6 seconds, 40.2%
Fitness Testing:     40.1 seconds, 48.0%
Report:               9.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 51403.02979999998
Test mean error for best: 25.70151
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 12.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 70.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 0.8904716822  
Correct output: -65.6248753443 | Program output: 7.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -38.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 56.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 88.7175518443 
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 56.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 36.7967275027 
Correct output: 1.6433897119   | Program output: 92.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction 21} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -89} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction float_dec} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction tag_float_963} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 21 integer_min -50 float_stackdepth integer_mult integer_pop in2 -89 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod float_pop integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank integer_dup in1 float_max float_inc float_dup_times float_yank integer_dup in1 float_max float_dec print_float float_yankdup float_yank float_tan tag_float_963 float_sub float_min)
Errors: [2.3633 9 60.0 2 78.0 3 81.0 3 54.0 12 6.6137 8 11.2146 8 7.0 2 41.0012 10 12.0 12 73.0 12 56.0 2 51.0 2 8.0 2 45.0 2 62.2011 9 36.0 2 72.7167 10 0.9342 11 90.0 12 0.404 8 10.0 1 43.7228 11 92.0 11 91.0 2]
Total: 1251.1716
Mean: 25.023432
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2342.2353104000053
Median total errors in population: 1261.1716
Error averages by case: (45.46304190000005 9.633 100.58433469999999 2.735 126.4078656000001 3.206 120.33612960000002 3.41 97.405458 12.13 53.7018453000008 8.103 55.79002609999965 8.167 52.721968200000006 2.494 81.8824428999994 9.813 57.329252399999994 11.272 115.56462109999998 12.125 96.0662376 2.587 98.5708667999999 3.085 50.30703999999999 2.517 88.7422788 2.539 98.24218720000059 9.147 77.07263249999998 2.586 112.31225210000086 10.464 49.83945020000067 10.903 131.55559379999997 12.091 49.54724180000023 8.562 55.527958500000004 2.449 86.19404540000133 11.247 133.62135629999997 11.183 132.50518359999998 2.496)
Error minima by case: (0.7615 7 31.9603 2 78.0 2 15.3101 2 41.9038 9 4.0361 2 8.637 2 7.0 2 1.275 2 11.1095 10 65.6249 11 19.051 2 51.0 2 7.0 1 10.1859 2 19.925 1 12.2909 2 8.1274 8 0.0658 8 1.2824 11 0.014 7 10.0 1 29.1213 8 55.2033 10 0.4875 2)
Average genome size in population (length): 48.54
Average program size in population (points): 49.54
Average percent parens in population: 0.020
Minimum age in population: 35.78922754526138
Maximum age in population: 40.11467945575714
Average age in population: 38.14766812041402
Median age in population: 38.16665253043175
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.106
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 34212930
--- Timings ---
Current time: 1529615930721 milliseconds
Total Time:          86.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.8 seconds, 40.1%
Fitness Testing:     41.6 seconds, 48.0%
Report:              10.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 51403.02979999998
Test mean error for best: 25.70151
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.3386139493
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 12.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 70.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 0.8904716822  
Correct output: -65.6248753443 | Program output: 7.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -38.6711126902
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 56.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 88.7175518443 
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 56.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 36.7967275027 
Correct output: 1.6433897119   | Program output: 92.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction 21} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -89} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction float_pop} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction float_dec} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction tag_float_963} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 21 integer_min -50 float_stackdepth integer_mult integer_pop in2 -89 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod float_pop integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank integer_dup in1 float_max float_inc float_dup_times float_yank integer_dup in1 float_max float_dec print_float float_yankdup float_yank float_tan tag_float_963 float_sub float_min)
Errors: [2.3633 9 60.0 2 78.0 3 81.0 3 54.0 12 6.6137 8 11.2146 8 7.0 2 41.0012 10 12.0 12 73.0 12 56.0 2 51.0 2 8.0 2 45.0 2 62.2011 9 36.0 2 72.7167 10 0.9342 11 90.0 12 0.404 8 10.0 1 43.7228 11 92.0 11 91.0 2]
Total: 1251.1716
Mean: 25.023432
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2531.363837100003
Median total errors in population: 1261.1716
Error averages by case: (53.09780599999967 9.701 107.22711269999998 3.121 132.7071789000001 3.477 126.90913830000002 3.088 106.5008456 12.181 60.49168910000079 8.121 62.73092559999964 8.201 62.77481139999999 2.646 88.53426929999938 9.783 64.87949649999999 11.574 123.47449959999999 12.173 102.81798739999998 2.604 105.41105749999996 3.103 57.22601719999999 2.434 97.73710159999999 2.706 104.87668460000086 9.33 83.92274929999999 2.616 119.15467930000098 10.533 56.903355600000715 10.903 139.60138879999997 12.13 56.51289750000016 8.489 65.50481959999999 2.377 93.20516530000145 11.307 142.1144396 11.255 140.53872080000002 2.656)
Error minima by case: (0.5526 7 58.0 2 78.0 2 79.0 2 41.9038 11 4.0361 2 8.637 2 7.0 2 38.4236 2 11.1095 10 65.6249 12 54.0 2 51.0 2 6.0 1 11.3418 2 27.0 1 34.0 2 70.906 8 0.0345 7 1.2824 12 0.014 6 10.0 1 41.9121 8 55.2033 11 1.6434 2)
Average genome size in population (length): 49.56
Average program size in population (points): 50.56
Average percent parens in population: 0.020
Minimum age in population: 36.94864064455032
Maximum age in population: 41.64939823746681
Average age in population: 39.51375735910237
Median age in population: 39.55388183891773
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.121
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 35451930
--- Timings ---
Current time: 1529615933937 milliseconds
Total Time:          90.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.1 seconds, 40.1%
Fitness Testing:     43.1 seconds, 47.9%
Report:              10.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 51258.187799999985
Test mean error for best: 25.62909
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 92.9603289886 
Correct output: -154.3386139493 | Program output: -76.3386139493
Correct output: 146.6899406572 | Program output: 66.6899406572 
Correct output: -41.9038407726 | Program output: 12.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 70.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 0.8904716822  
Correct output: -65.6248753443 | Program output: 7.3751246557  
Correct output: 92.9489754291  | Program output: 37.9489754291 
Correct output: -89.6711126902 | Program output: -38.6711126902
Correct output: 87.8607804274  | Program output: 80.8607804274 
Correct output: 11.3417885788  | Program output: 56.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 49.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 88.7175518443 
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 56.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 36.7967275027 
Correct output: 1.6433897119   | Program output: 92.6433897119 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup} {:instruction in1} {:instruction float_max} {:instruction float_dec} {:instruction print_float} {:instruction float_yankdup} {:instruction float_yank} {:instruction float_tan} {:instruction tag_float_963} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 float_dup_items integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank integer_dup in1 float_inc float_dup_times float_yank integer_dup float_max float_inc float_dup_times float_yank integer_dup in1 float_max float_dec print_float float_yankdup float_yank float_tan tag_float_963 float_sub float_min)
Errors: [2.3633 9 59.0 3 78.0 3 80.0 2 54.0 12 6.6137 8 11.2146 8 7.0 2 41.0012 10 12.0 12 73.0 12 55.0 2 51.0 2 7.0 1 45.0 2 62.2011 9 35.0 2 72.7167 10 0.9342 11 90.0 12 0.404 8 10.0 1 43.7228 11 92.0 11 91.0 2]
Total: 1245.1716
Mean: 24.903433
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2697.2466709000087
Median total errors in population: 1256.3636
Error averages by case: (59.61472149999946 9.766 113.802639 3.629 145.30104730000016 4.642 133.1616454 3.026 112.2084456 12.13 66.72330060000083 8.224 68.88872800000011 8.264 72.89738870000004 3.256 94.51179549999938 9.848 72.71867449999998 11.816 130.0371180999999 12.218 108.8673818 2.829 115.15194300000009 3.956 64.2017023 2.507 102.22426779999991 3.384 110.6774485000011 9.495 90.20557020000001 2.823 125.08348080000108 10.596 63.55608430000102 10.914 140.52505039999983 12.097 62.96348480000005 8.475 74.38034929999996 2.886 99.40328780000151 11.306 146.08743429999979 11.29 141.41768140000005 3.259)
Error minima by case: (0.1755 8 57.8441 2 78.0 2 78.8441 2 41.9038 11 4.4579 2 9.0587 2 7.0 2 38.8453 2 11.1095 10 65.6249 12 53.8441 2 51.0 2 5.8441 1 11.3418 2 28.0 1 33.8441 2 70.1779 8 0.0658 7 1.2824 12 0.0067 7 10.0 1 41.184 7 55.2033 11 1.6434 2)
Average genome size in population (length): 51.416
Average program size in population (points): 52.416
Average percent parens in population: 0.019
Minimum age in population: 38.741405159235
Maximum age in population: 42.9958815202117
Average age in population: 41.06005037803948
Median age in population: 41.13023488223553
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 103
Genome diversity (% unique Plush genomes):	 0.645
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.645
Total error diversity:				 0.142
Error (vector) diversity:			 0.145
Behavioral diversity:				 0.146
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 36737330
--- Timings ---
Current time: 1529615937147 milliseconds
Total Time:          93.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.4 seconds, 40.1%
Fitness Testing:     44.6 seconds, 47.9%
Report:              11.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 66179.05419999998
Test mean error for best: 33.08953
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: 1.1558706976  
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 1.1558706976  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 0.0           
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 0.0           
Correct output: 1.6433897119   | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_rot} {:instruction float_inc} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_max integer_mod -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush float_rot float_inc integer_inc float_sub float_min)
Errors: [2.3633 9 60.0 2 155.4945 12 81.0 3 55.0 12 6.6137 8 11.2146 8 8.0 2 41.0012 10 13.0 11 74.0 12 56.0 2 90.827 11 8.0 2 46.0 2 62.2011 9 36.0 2 72.7167 10 0.9342 11 1.2824 12 0.404 8 11.0 2 43.7228 11 55.2033 12 1.6434 11]
Total: 1187.6222
Mean: 23.752443
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2501.7849950000077
Median total errors in population: 1255.1716
Error averages by case: (48.693915999999895 9.696 105.41662350000001 3.466 153.43068619999994 6.218 124.37915439999996 3.269 104.60095830000002 12.091 56.680692500000866 8.319 59.10637479999965 8.37 76.96562010000024 4.702 85.31479339999939 9.963 67.74284119999983 11.64 123.64651739999947 12.346 99.42920029999995 2.891 116.95396230000073 5.483 55.42310770000001 2.41 90.85324809999973 4.994 102.08223510000064 9.279 80.81738010000001 2.874 114.22028810000096 10.504 52.676167600000525 10.921 119.76103919999933 12.073 52.3425294000002 8.706 74.98073339999982 4.797 88.97993580000143 11.271 134.32276449999918 11.419 120.54722560000019 4.715)
Error minima by case: (0.3633 8 32.9603 2 75.3386 2 14.3101 2 13.0962 11 4.4579 2 9.0587 2 6.0957 1 29.6542 2 1.8905 9 8.3751 9 18.051 2 37.6711 2 6.0 1 10.3262 2 8.4543 1 13.2909 2 10.1274 8 0.0658 6 0.873 8 0.014 7 10.0 1 1.3148 8 28.2033 10 0.8205 2)
Average genome size in population (length): 54.158
Average program size in population (points): 55.158
Average percent parens in population: 0.018
Minimum age in population: 39.741405159235
Maximum age in population: 44.80559004098177
Average age in population: 42.59994543998688
Median age in population: 42.65996866673231
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 107
Genome diversity (% unique Plush genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.162
Error (vector) diversity:			 0.167
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 38091294
--- Timings ---
Current time: 1529615940421 milliseconds
Total Time:          96.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.7 seconds, 40.1%
Fitness Testing:     46.1 seconds, 47.9%
Report:              11.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 66180.18469999998
Test mean error for best: 33.09009
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: 1.1558706976  
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 1.1558706976  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 0.0           
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 0.0           
Correct output: 1.6433897119   | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_min})
Best program: (float_dup_items integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_dup integer_mod -59 float_max integer_mod -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush float_min)
Errors: [2.3633 9 60.0 2 155.4945 12 81.0 3 55.0 12 6.6137 8 11.2146 8 8.0 2 41.0012 10 13.0 11 74.0 12 56.0 2 90.827 11 8.0 2 46.0 2 62.2011 9 36.0 2 72.7167 10 0.9342 11 1.2824 12 0.404 8 11.0 2 43.7228 11 55.2033 12 1.6434 11]
Total: 1187.6222
Mean: 23.752443
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2613.112987100008
Median total errors in population: 1252.0968999999998
Error averages by case: (59.89486679999915 9.706 118.86788230000012 3.449 164.7464384999995 8.777 137.28032629999996 3.953 96.94917450000003 12.092 67.67729450000093 8.458 70.02691600000004 8.537 83.16616000000062 6.536 96.34530589999939 10.129 59.904204799999576 11.922 116.33523719999927 12.538 111.72317579999988 3.24 120.28320740000137 7.496 67.28195040000004 2.995 79.32989239999993 7.034 113.10042760000127 9.389 93.2965813000001 3.189 126.37825600000136 10.55 63.56275810000121 10.957 97.62441109999885 12.058 63.305014900001005 8.761 77.26330589999966 6.71 100.16671580000155 11.297 122.29503219999877 11.614 98.33645140000036 6.585)
Error minima by case: (0.0102 8 32.9603 2 75.3386 2 7.3101 2 13.0962 10 4.3555 2 8.9563 2 7.0 2 34.9312 2 1.8905 9 6.6249 9 11.051 2 14.8945 2 5.6038 1 10.6402 2 13.7313 1 13.2909 2 7.1274 8 0.0658 7 1.1013 9 0.014 7 10.0 1 12.6016 8 3.7967 10 0.8205 2)
Average genome size in population (length): 54.98
Average program size in population (points): 55.98
Average percent parens in population: 0.018
Minimum age in population: 41.39656421542168
Maximum age in population: 46.02790310420096
Average age in population: 44.12258589973673
Median age in population: 44.1641809027642
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 78
Genome diversity (% unique Plush genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.162
Error (vector) diversity:			 0.167
Behavioral diversity:				 0.167
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 39465892
--- Timings ---
Current time: 1529615943602 milliseconds
Total Time:          99.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.0 seconds, 40.1%
Fitness Testing:     47.6 seconds, 47.8%
Report:              12.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 66179.05419999998
Test mean error for best: 33.08953
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 1.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: 1.1558706976  
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 1.1558706976  
Correct output: -10.0587306507 | Program output: 1.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 1.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 1.1558706976  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 1.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.1558706976  
Correct output: 2.0900277855   | Program output: 1.1558706976  
Correct output: -1.2824481557  | Program output: 0.0           
Correct output: 0.7518561607   | Program output: 1.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 1.1558706976  
Correct output: -55.2032724973 | Program output: 0.0           
Correct output: 1.6433897119   | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_rot} {:instruction float_inc} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_max integer_mod -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_inc float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush float_rot float_inc integer_inc float_sub float_min)
Errors: [2.3633 9 60.0 2 155.4945 12 81.0 3 55.0 12 6.6137 8 11.2146 8 8.0 2 41.0012 10 13.0 11 74.0 12 56.0 2 90.827 11 8.0 2 46.0 2 62.2011 9 36.0 2 72.7167 10 0.9342 11 1.2824 12 0.404 8 11.0 2 43.7228 11 55.2033 12 1.6434 11]
Total: 1187.6222
Mean: 23.752443
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2431.8448023000033
Median total errors in population: 1251.1716
Error averages by case: (52.990781299999675 9.721 109.07512540000005 3.215 135.81558000000018 5.445 127.75133060000005 3.54 92.4650208 12.084 63.08081430000082 8.128 64.26831859999962 8.281 59.67035029999997 3.813 89.51826259999936 9.781 53.46280719999991 11.976 110.40474349999985 12.227 104.02542610000005 2.879 102.7556868000003 4.417 59.511115400000016 2.668 82.03734619999989 4.032 104.40387310000075 9.067 85.55155550000002 2.909 120.15273750000094 10.483 59.61015580000069 10.896 115.10704079999967 12.057 59.50406730000036 8.862 59.4983596999999 3.318 94.41645080000137 11.291 124.36354449999959 11.309 116.02930820000014 3.976)
Error minima by case: (0.0715 8 32.9603 2 65.6614 2 14.3101 2 6.0962 10 3.9056 2 8.5065 2 6.0 1 8.1547 2 10.8905 2 6.6249 11 18.051 2 30.6711 1 5.0 1 11.3418 2 11.2422 1 13.2909 2 44.6142 8 0.0118 6 1.2824 10 0.014 7 9.0 1 15.6204 8 3.7967 10 1.6434 1)
Average genome size in population (length): 54.48
Average program size in population (points): 55.48
Average percent parens in population: 0.018
Minimum age in population: 43.09024687856436
Maximum age in population: 47.58447251562029
Average age in population: 45.54657177428529
Median age in population: 45.5737972301431
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.659
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.659
Total error diversity:				 0.178
Error (vector) diversity:			 0.184
Behavioral diversity:				 0.184
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 40828113
--- Timings ---
Current time: 1529615947012 milliseconds
Total Time:         103.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.3 seconds, 40.1%
Fitness Testing:     49.2 seconds, 47.8%
Report:              12.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 65998.06430000001
Test mean error for best: 32.99903
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: 0.1558706976  
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.1558706976  
Correct output: -10.0587306507 | Program output: 0.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.1558706976  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.1558706976  
Correct output: 2.0900277855   | Program output: 0.1558706976  
Correct output: -1.2824481557  | Program output: 0.0           
Correct output: 0.7518561607   | Program output: 0.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.1558706976  
Correct output: -55.2032724973 | Program output: 0.0           
Correct output: 1.6433897119   | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_min} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_rot} {:instruction float_inc} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_max integer_mod -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth float_min float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush float_rot float_inc integer_inc float_sub float_min)
Errors: [3.3633 9 60.0 2 154.4945 12 81.0 3 55.0 12 5.6137 8 10.2146 8 8.0 2 40.0012 10 13.0 11 74.0 12 56.0 2 89.827 11 8.0 2 46.0 2 61.2011 10 36.0 2 73.7167 10 1.9342 11 1.2824 12 0.596 7 11.0 2 44.7228 11 55.2033 12 1.6434 11]
Total: 1185.8142
Mean: 23.716284
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2573.151002500002
Median total errors in population: 1251.0828
Error averages by case: (53.8469006999997 9.802 104.92725610000018 3.944 146.57379220000018 5.438 121.29258780000013 3.865 107.3636873 12.086 62.89718000000061 8.228 64.49583489999974 8.452 70.6647277 3.326 89.49844469999951 9.877 68.8902771 11.854 125.23255769999987 12.175 99.35391730000015 3.427 113.84849690000026 4.577 62.61913890000008 3.099 99.35331559999989 3.488 104.73579710000077 9.227 81.76526900000012 3.59 119.33720630000084 10.51 59.15713930000054 10.785 131.88245599999982 12.073 59.10975570000034 9.006 71.93173039999994 2.848 93.97790320000114 11.304 139.2284630999996 11.337 132.84316750000013 4.006)
Error minima by case: (0.2074 8 31.9603 2 4.6614 2 11.6853 2 14.9038 9 3.4579 1 8.0587 2 5.0 1 12.8453 2 8.0886 1 6.6249 11 14.562 2 15.3289 1 5.0 1 10.1859 2 2.0453 1 5.904 2 4.5144 8 4.0E-4 6 1.2824 8 0.014 7 8.0 1 33.5083 8 3.7967 10 0.6434 1)
Average genome size in population (length): 55.864
Average program size in population (points): 56.864
Average percent parens in population: 0.018
Minimum age in population: 44.78852816484869
Maximum age in population: 49.0455200211145
Average age in population: 47.07780604307121
Median age in population: 47.06828154996037
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.221
Error (vector) diversity:			 0.23
Behavioral diversity:				 0.23
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 42224791
--- Timings ---
Current time: 1529615950292 milliseconds
Total Time:         106.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.6 seconds, 40.0%
Fitness Testing:     50.8 seconds, 47.8%
Report:              12.8 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 65702.44730000001
Test mean error for best: 32.85122
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: 0.1558706976  
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.1558706976  
Correct output: -10.0587306507 | Program output: 0.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.1558706976  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.1558706976  
Correct output: 2.0900277855   | Program output: 0.1558706976  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.1558706976  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_min})
Best program: (float_dup_items integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_dup integer_mod -59 float_max integer_mod -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush float_min)
Errors: [3.3633 9 60.0 2 154.4945 12 81.0 3 55.0 12 5.6137 8 10.2146 8 8.0 2 40.0012 10 13.0 11 74.0 12 56.0 2 89.827 11 8.0 2 46.0 2 61.2011 10 36.0 2 73.7167 10 1.9342 11 0.2824 10 0.596 7 11.0 2 44.7228 11 54.2033 11 2.6434 11]
Total: 1181.8142
Mean: 23.636284
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2559.8010165000037
Median total errors in population: 1243.47435
Error averages by case: (56.8722270999996 9.742 105.96739050000066 5.379 160.26728220000004 7.248 114.39739020000039 5.963 102.0382042 12.074 64.01945150000044 8.805 66.61973219999993 8.947 66.22901060000002 3.702 92.71402149999942 10.392 63.19023859999996 11.397 119.6919411999999 12.214 96.84942020000054 5.292 119.31061240000048 6.598 79.74795279999987 5.495 93.2749292999998 3.806 109.65637000000065 9.763 82.3855066000006 5.767 122.74894420000089 10.603 59.79059660000057 10.761 111.49309059999929 12.105 59.56896000000036 8.951 66.87869499999992 3.636 96.6450088000012 11.32 129.81300919999913 11.53 112.3190310000003 5.822)
Error minima by case: (0.0274 7 31.9603 2 3.6614 2 13.3101 2 14.9038 10 3.9056 1 8.5065 2 5.0 1 12.8453 2 10.0 1 6.6249 10 17.051 2 4.6711 1 5.0 1 10.1853 2 2.0453 1 12.2909 2 69.326 8 0.0416 6 0.2824 9 0.014 7 8.0 1 40.3322 8 3.7967 10 1.6434 1)
Average genome size in population (length): 56.034
Average program size in population (points): 57.034
Average percent parens in population: 0.018
Minimum age in population: 45.91761374846101
Maximum age in population: 50.07120864791796
Average age in population: 48.17709273472428
Median age in population: 48.16911642148625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.232
Error (vector) diversity:			 0.237
Behavioral diversity:				 0.238
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 43625655
--- Timings ---
Current time: 1529615953634 milliseconds
Total Time:         109.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.9 seconds, 40.0%
Fitness Testing:     52.4 seconds, 47.8%
Report:              13.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 65702.44730000001
Test mean error for best: 32.85122
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: 0.1558706976  
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.1558706976  
Correct output: -10.0587306507 | Program output: 0.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.1558706976  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.1558706976  
Correct output: 2.0900277855   | Program output: 0.1558706976  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.1558706976  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_min})
Best program: (float_dup_items integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_dup integer_mod -59 float_max integer_mod -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush float_min)
Errors: [3.3633 9 60.0 2 154.4945 12 81.0 3 55.0 12 5.6137 8 10.2146 8 8.0 2 40.0012 10 13.0 11 74.0 12 56.0 2 89.827 11 8.0 2 46.0 2 61.2011 10 36.0 2 73.7167 10 1.9342 11 0.2824 10 0.596 7 11.0 2 44.7228 11 54.2033 11 2.6434 11]
Total: 1181.8142
Mean: 23.636284
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2550.759630800001
Median total errors in population: 1187.6222
Error averages by case: (57.256436899999635 9.64 116.86675940000032 4.277 187.15760949999992 11.142 130.8776028000001 5.185 102.58748059999998 12.113 62.761530700000755 8.94 66.26718569999981 9.029 66.80662379999998 3.66 93.7568856999995 10.628 62.4948138999999 11.272 117.98434679999981 12.209 107.38244310000003 4.336 130.76324160000132 10.4 75.10609660000003 4.402 92.40880999999986 3.756 112.45824040000079 9.972 90.76923340000029 4.456 123.88063530000106 10.52 58.094394700000635 10.874 72.95511719999843 12.033 57.6701222000004 8.62 67.37619339999992 3.799 96.96078980000138 11.226 112.85378699999816 11.896 73.49525030000059 9.383)
Error minima by case: (0.3633 8 1.9603 2 4.6614 2 13.3101 2 13.0962 9 4.7109 2 9.3118 2 6.0 1 39.0984 2 1.8905 2 8.3751 10 17.051 2 10.407 1 4.0809 1 9.4264 2 18.2188 1 12.2909 2 10.1274 8 0.0658 8 0.2824 10 0.014 7 9.0 1 31.1213 7 2.7967 10 1.6434 1)
Average genome size in population (length): 56.773
Average program size in population (points): 57.773
Average percent parens in population: 0.017
Minimum age in population: 46.91761374846101
Maximum age in population: 51.49109153891914
Average age in population: 49.40518779976387
Median age in population: 49.43618002824951
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 107
Genome diversity (% unique Plush genomes):	 0.662
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.662
Total error diversity:				 0.187
Error (vector) diversity:			 0.188
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 45045030
--- Timings ---
Current time: 1529615956947 milliseconds
Total Time:         113.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.2 seconds, 40.0%
Fitness Testing:     54.0 seconds, 47.8%
Report:              13.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 65702.44730000001
Test mean error for best: 32.85122
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: 0.1558706976  
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.1558706976  
Correct output: -10.0587306507 | Program output: 0.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.1558706976  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.1558706976  
Correct output: 2.0900277855   | Program output: 0.1558706976  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.1558706976  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_min})
Best program: (float_dup_items integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_dup_times integer_shove integer_swap float_dup integer_mod -59 float_max integer_mod -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush float_min)
Errors: [3.3633 9 60.0 2 154.4945 12 81.0 3 55.0 12 5.6137 8 10.2146 8 8.0 2 40.0012 10 13.0 11 74.0 12 56.0 2 89.827 11 8.0 2 46.0 2 61.2011 10 36.0 2 73.7167 10 1.9342 11 0.2824 10 0.596 7 11.0 2 44.7228 11 54.2033 11 2.6434 11]
Total: 1181.8142
Mean: 23.636284
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2350.055616899999
Median total errors in population: 1187.6222
Error averages by case: (48.721839199999906 9.494 111.3552449000002 3.472 191.81797890000044 12.09 128.89667599999987 4.329 96.5059516 12.099 53.35628070000085 8.644 57.10357059999966 8.707 59.32406699999997 3.357 84.75067419999935 10.419 58.477793999999925 11.245 114.67853999999986 12.177 102.3543398999998 3.45 131.0316277000018 11.147 60.64218830000006 3.355 86.26201099999993 3.482 103.84353460000064 9.829 84.40048010000014 3.387 115.31830210000096 10.438 48.91274780000048 10.923 52.702246199998946 11.995 48.2742026000001 8.251 60.24375659999994 3.491 88.20676610000139 11.172 100.31904459999859 11.986 53.13875220000066 10.478)
Error minima by case: (1.0974 8 5.9603 2 75.3386 2 19.3101 2 13.0962 9 4.5032 2 9.1041 2 7.0 2 18.1547 2 1.8905 9 6.6249 10 36.949 2 30.6711 2 5.1392 1 9.03 2 2.0453 1 34.8441 2 4.1274 8 0.0658 7 0.2824 9 0.014 7 10.0 1 13.6016 8 2.7967 10 0.6434 2)
Average genome size in population (length): 57.467
Average program size in population (points): 58.467
Average percent parens in population: 0.017
Minimum age in population: 47.91761374846101
Maximum age in population: 52.84543365146965
Average age in population: 50.78689540114847
Median age in population: 50.82158634410007
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 72
Genome diversity (% unique Plush genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.112
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 46481777
--- Timings ---
Current time: 1529615960293 milliseconds
Total Time:         116.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.5 seconds, 40.0%
Fitness Testing:     55.6 seconds, 47.8%
Report:              14.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 65720.34100000001
Test mean error for best: 32.86017
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: 0.1558706976  
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.1558706976  
Correct output: -10.0587306507 | Program output: 0.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 8.3751246557  
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.1558706976  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.1558706976  
Correct output: 2.0900277855   | Program output: 0.1558706976  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.1558706976  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction integer_flush} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction float_dup} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_min})
Best program: (float_dup_items integer_flush -81.37761634098129 float_cos in2 float_cos float_yankdup -81 integer_min -50 float_stackdepth integer_mult integer_pop in2 -90 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_dup integer_mod -59 float_max float_dup -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush float_min)
Errors: [3.3633 9 60.0 2 154.4945 12 81.0 3 55.0 12 5.6137 8 10.2146 8 8.0 2 40.0012 10 13.0 11 74.0 12 56.0 2 89.827 11 8.0 2 46.0 2 61.2011 10 36.0 2 73.7167 10 1.9342 11 0.2824 10 0.596 7 11.0 2 44.7228 11 54.2033 11 2.6434 11]
Total: 1181.8142
Mean: 23.636284
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2179.8996277000106
Median total errors in population: 1185.8142
Error averages by case: (41.39507780000015 9.551 105.40695000000014 3.42 184.81863060000035 12.086 123.15688009999987 4.293 89.89147670000001 12.085 45.386838600000736 8.608 49.081860999999655 8.623 51.70367549999998 3.324 76.96550939999942 10.35 49.99958689999995 11.214 107.91714399999992 12.176 96.1372024999999 3.43 123.32315630000137 11.09 53.95205590000003 3.32 79.19586749999996 3.449 96.11032640000046 10.118 77.92834220000009 3.34 109.24337010000092 10.453 41.81325540000017 10.944 47.9432089999992 11.87 40.814406200000086 7.911 52.58397099999996 3.463 81.71254270000126 11.208 96.15913749999885 11.93 48.482154400000645 10.521)
Error minima by case: (1.6038 7 6.9603 2 73.3386 2 18.3101 2 16.0962 10 4.4579 2 9.0587 2 7.5906 2 18.1547 2 10.1095 9 6.6249 10 30.0855 2 8.6711 2 4.1392 1 10.7635 2 2.0453 2 21.4274 2 11.0091 8 0.1746 7 0.2824 10 0.014 7 10.5906 2 17.9848 8 2.7967 10 0.6434 2)
Average genome size in population (length): 57.171
Average program size in population (points): 58.171
Average percent parens in population: 0.017
Minimum age in population: 48.91761374846101
Maximum age in population: 54.03866958478466
Average age in population: 52.16610714919126
Median age in population: 52.22514080195106
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.119
Error (vector) diversity:			 0.119
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 47911149
--- Timings ---
Current time: 1529615963570 milliseconds
Total Time:         119.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.8 seconds, 39.9%
Fitness Testing:     57.1 seconds, 47.8%
Report:              14.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 64465.1928
Test mean error for best: 32.23260
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: 0.0           
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.1558706976  
Correct output: -10.0587306507 | Program output: 0.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 0.0           
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.1558706976  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.1558706976  
Correct output: 2.0900277855   | Program output: 0.1558706976  
Correct output: -1.2824481557  | Program output: 0.0           
Correct output: 0.7518561607   | Program output: 0.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.1558706976  
Correct output: -55.2032724973 | Program output: 0.0           
Correct output: 1.6433897119   | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -77} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction tagged_442} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_inc} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush float_sub integer_dup_items -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_mult integer_pop in2 -77 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_max integer_mod -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth tagged_442 float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush float_dup_times float_inc integer_inc float_sub float_min)
Errors: [3.3633 9 60.0 2 154.3386 14 81.0 3 55.0 12 5.6137 8 10.2146 8 8.0 2 40.0012 10 13.0 11 65.6249 13 56.0 2 89.827 11 8.0 2 46.0 2 61.2011 10 36.0 2 73.7167 10 1.9342 11 1.2824 12 0.596 7 11.0 2 44.7228 11 55.2033 12 1.6434 11]
Total: 1180.2832
Mean: 23.605663
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2476.7982089000157
Median total errors in population: 1185.8142
Error averages by case: (54.20646529999941 9.565 117.01168020000021 3.665 195.74307460000028 12.172 134.11961179999983 4.529 100.71937659999998 12.088 57.214214000000936 8.689 61.12306279999978 8.735 64.17912979999998 3.558 88.80327359999937 10.448 62.609678199999884 11.22 119.09740319999989 12.176 107.4408282999998 3.653 134.85986510000134 11.209 66.46408190000002 3.544 89.94567779999986 3.66 108.10065000000094 10.413 89.72062520000017 3.573 120.48063930000114 10.443 53.95139000000095 10.977 60.28209999999856 11.51 52.77374539999983 7.736 64.83954479999991 3.702 93.4407712000016 11.189 107.74705039999836 11.769 61.1912694000006 10.51)
Error minima by case: (1.6038 8 4.9603 2 79.0 2 17.3101 3 16.0962 10 4.4579 2 9.0587 2 8.0 2 18.1547 2 10.1095 9 6.6249 10 46.051 2 30.6711 2 3.1392 2 10.6292 2 2.0453 2 34.7091 2 71.9572 8 0.1746 8 0.2824 10 0.0367 7 11.0 2 42.9633 8 2.7967 10 1.6434 2)
Average genome size in population (length): 56.344
Average program size in population (points): 57.344
Average percent parens in population: 0.018
Minimum age in population: 51.02933688211488
Maximum age in population: 55.47182230673207
Average age in population: 53.60306637971418
Median age in population: 53.61636950199318
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.114
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 49319749
--- Timings ---
Current time: 1529615966854 milliseconds
Total Time:         122.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.1 seconds, 39.9%
Fitness Testing:     58.7 seconds, 47.8%
Report:              15.0 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 64465.1928
Test mean error for best: 32.23260
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: 0.0           
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.1558706976  
Correct output: -10.0587306507 | Program output: 0.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: 0.0           
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.1558706976  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.1558706976  
Correct output: 2.0900277855   | Program output: 0.1558706976  
Correct output: -1.2824481557  | Program output: 0.0           
Correct output: 0.7518561607   | Program output: 0.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.1558706976  
Correct output: -55.2032724973 | Program output: 0.0           
Correct output: 1.6433897119   | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -77} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction tagged_442} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_dup_times} {:instruction float_inc} {:instruction integer_inc} {:instruction float_sub} {:instruction float_min})
Best program: (float_sub integer_flush float_sub integer_dup_items -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_mult integer_pop in2 -77 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_max integer_mod -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth tagged_442 float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush float_dup_times float_inc integer_inc float_sub float_min)
Errors: [3.3633 9 60.0 2 154.3386 14 81.0 3 55.0 12 5.6137 8 10.2146 8 8.0 2 40.0012 10 13.0 11 65.6249 13 56.0 2 89.827 11 8.0 2 46.0 2 61.2011 10 36.0 2 73.7167 10 1.9342 11 1.2824 12 0.596 7 11.0 2 44.7228 11 55.2033 12 1.6434 11]
Total: 1180.2832
Mean: 23.605663
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2502.1859469000146
Median total errors in population: 1181.8142
Error averages by case: (55.43757149999966 9.538 117.96103320000017 3.505 196.87781390000032 12.087 135.23672289999988 4.412 102.335755 12.006 58.106437200000954 8.704 62.10239489999969 8.744 65.13433919999997 3.427 89.70199199999936 10.421 63.95291019999991 11.154 120.64694679999985 12.147 108.61099279999976 3.534 136.091739300001 11.171 67.40326100000004 3.434 92.03022199999991 3.51 109.07347280000083 10.347 90.79384210000013 3.452 121.82788290000089 10.476 54.86175180000068 10.958 60.740660699998614 10.643 53.6764734999998 7.823 65.97787289999992 3.568 94.62536790000152 11.169 108.29802619999823 11.339 62.514464200000674 10.597)
Error minima by case: (0.1906 7 57.9603 2 79.0 2 52.6899 3 9.016 9 3.5993 2 1.0015 2 8.0 2 11.0745 2 10.1095 9 6.3751 9 1.051 2 17.6711 2 6.1392 2 10.1129 2 3.0453 2 9.7091 2 20.1274 8 0.4653 6 0.2824 9 0.0367 6 4.4317 2 6.1213 7 2.7967 9 0.4145 2)
Average genome size in population (length): 54.28
Average program size in population (points): 55.28
Average percent parens in population: 0.018
Minimum age in population: 52.65011708834936
Maximum age in population: 57.09890426899801
Average age in population: 55.11449419113279
Median age in population: 55.17007085240766
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.119
Error (vector) diversity:			 0.119
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 50676749
--- Timings ---
Current time: 1529615970097 milliseconds
Total Time:         126.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.4 seconds, 39.9%
Fitness Testing:     60.2 seconds, 47.7%
Report:              15.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 63159.80939999999
Test mean error for best: 31.57990
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.1558706976  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -1.0          
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.1558706976  
Correct output: -10.0587306507 | Program output: 0.1558706976  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.1558706976  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -1.0          
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.1558706976  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.1558706976  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.1558706976  
Correct output: 2.0900277855   | Program output: 0.1558706976  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.1558706976  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.1558706976  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -77} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction float_max} {:instruction -58} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_dec} {:instruction float_add} {:instruction float_shove} {:instruction float_yank} {:instruction float_sin} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_min})
Best program: (float_sub integer_flush float_sub integer_dup_items -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_mult integer_pop in2 -77 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_dup integer_mod -59 float_max float_max -58 integer_dup integer_flush float_dec float_add float_shove float_yank float_sin float_stackdepth integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush float_min)
Errors: [3.3633 9 60.0 2 153.3386 12 81.0 3 55.0 12 5.6137 8 10.2146 8 8.0 2 40.0012 10 13.0 11 64.6249 12 56.0 2 89.827 11 8.0 2 46.0 2 61.2011 10 36.0 2 73.7167 10 1.9342 11 0.2824 10 0.596 7 11.0 2 44.7228 11 54.2033 11 2.6434 11]
Total: 1171.2832
Mean: 23.425665
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2172.3496917000166
Median total errors in population: 1181.8142
Error averages by case: (42.11812390000007 9.543 106.81106640000016 3.523 183.26704120000034 11.937 123.89625409999984 4.461 87.76041329999998 11.857 45.356939500000614 8.515 49.06454199999966 8.537 51.846755999999985 3.52 76.79145019999939 10.228 49.08813159999993 11.012 105.97108079999984 12.09 96.48430669999982 3.598 122.02013960000149 10.957 55.413210400000054 3.483 76.8917992999999 3.572 95.89514980000051 10.13 78.60088410000014 3.503 109.39738050000093 10.456 42.43145360000029 10.967 46.84718859999921 10.306 41.24560289999987 7.823 52.28871749999997 3.684 82.05674600000116 11.208 95.21890169999881 11.151 48.963412000000645 10.562)
Error minima by case: (2.3633 7 0.0397 2 75.3386 2 26.3101 3 13.0962 10 2.4579 2 0.2379 2 8.0 2 18.1547 2 1.8905 8 6.6249 10 36.949 2 30.6711 2 8.0 2 2.4039 2 2.0453 2 36.0 2 10.1274 8 0.9342 8 0.2824 9 0.0367 6 4.4333 2 2.7437 8 2.7967 10 1.6434 2)
Average genome size in population (length): 53.239
Average program size in population (points): 54.239
Average percent parens in population: 0.019
Minimum age in population: 53.84036922536325
Maximum age in population: 58.78117415775341
Average age in population: 56.59277336903725
Median age in population: 56.64853225862862
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.096
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 52007774
--- Timings ---
Current time: 1529615973341 milliseconds
Total Time:         129.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.6 seconds, 39.9%
Fitness Testing:     61.8 seconds, 47.7%
Report:              15.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 58797.6005
Test mean error for best: 29.39880
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -60.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -60.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.5782544318  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -60.0         
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -60.0         
Correct output: 1.6433897119   | Program output: -60.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction float_sub} {:instruction integer_dup_items} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -77} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub integer_flush float_sub integer_dup_items -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_mult integer_pop in2 -77 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9409 10 60.0 2 94.3386 13 81.0 3 55.0 12 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 5.6249 11 56.0 2 90.2494 12 8.0 2 46.0 2 61.6235 12 36.0 2 73.2943 8 1.5118 11 58.7176 12 0.1736 8 11.0 2 44.3005 9 4.7967 11 61.6434 11]
Total: 1131.3119
Mean: 22.626238
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2626.1950572000155
Median total errors in population: 1181.8142
Error averages by case: (60.59762059999924 9.527 122.36796180000013 3.494 199.46264429999985 12.088 139.7777999999999 4.396 107.3513187 11.964 63.69948980000102 8.603 67.38432879999996 8.653 70.51342860000003 3.445 94.43416689999937 10.33 68.68021199999994 11.118 125.69833979999969 12.19 113.6455973999998 3.516 139.72367980000104 11.062 72.28497070000002 3.43 97.0401950999998 3.622 113.17678710000133 10.267 95.82460200000018 3.453 126.66458670000146 10.417 60.67611980000118 10.978 66.85024539999824 10.539 59.52168999999944 7.786 71.79417009999995 3.698 99.78743910000163 11.176 112.97914449999784 11.28 68.75951820000068 10.467)
Error minima by case: (0.1906 8 5.9603 2 79.0 2 20.3101 3 9.0962 9 4.4579 2 0.2379 2 8.0 2 11.1547 2 10.1095 9 5.6249 10 9.0492 2 30.6711 2 3.961 2 2.4039 2 2.0453 2 0.3911 2 10.0272 8 0.3015 8 0.2824 9 0.0177 7 11.0 2 39.0211 8 2.7967 10 1.6434 2)
Average genome size in population (length): 53.68
Average program size in population (points): 54.68
Average percent parens in population: 0.019
Minimum age in population: 55.72293481863744
Maximum age in population: 60.22185319825985
Average age in population: 58.11307188533178
Median age in population: 58.15836048102574
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.133
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 53349778
--- Timings ---
Current time: 1529615976527 milliseconds
Total Time:         132.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.9 seconds, 39.9%
Fitness Testing:     63.3 seconds, 47.7%
Report:              16.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 61102.0527
Test mean error for best: 30.55103
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -22.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -59.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.5782544318  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -22.0         
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -22.0         
Correct output: 1.6433897119   | Program output: -22.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -77} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_mult integer_pop in2 -77 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_max integer_mod float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush)
Errors: [2.9409 10 60.0 2 132.3386 13 81.0 3 55.0 12 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 6.6249 12 56.0 2 90.2494 12 8.0 2 46.0 2 61.6235 12 36.0 2 73.2943 8 1.5118 11 20.7176 10 0.1736 8 11.0 2 44.3005 9 33.2033 11 23.6434 12]
Total: 1122.7184999999997
Mean: 22.45437
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2262.967150300015
Median total errors in population: 1181.8142
Error averages by case: (44.225982699999996 9.605 109.22662170000014 3.641 188.85556489999925 12.304 126.29805529999985 4.528 90.41017629999999 11.853 47.40715600000075 8.658 51.1266816999997 8.68 55.139324099999975 3.564 78.53249629999945 10.328 53.279119399999864 11.063 109.99717709999948 12.316 98.71183069999984 3.66 124.99597940000145 10.977 57.82462680000004 3.55 78.70719619999997 4.198 97.55365090000056 10.246 80.84496480000008 3.579 111.396026300001 10.453 44.351940400000295 10.945 56.69270289999883 10.83 43.26851400000003 7.874 58.569581399999905 4.304 84.10009320000133 11.179 102.94569639999848 11.417 58.24199140000059 10.512)
Error minima by case: (2.2903 8 7.9603 2 73.3386 2 5.3101 2 16.0962 10 4.4579 2 0.2379 2 0.2382 2 1.0833 2 0.1095 9 5.6249 9 34.051 2 8.6711 2 4.1392 1 2.4039 2 1.0453 1 22.7091 2 72.6437 7 0.8611 9 0.2824 9 0.0111 6 3.059 1 43.6498 8 2.7967 10 0.6434 2)
Average genome size in population (length): 54.722
Average program size in population (points): 55.722
Average percent parens in population: 0.018
Minimum age in population: 57.05070660433557
Maximum age in population: 61.41332653953486
Average age in population: 59.61614168021733
Median age in population: 59.6406263368267
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.185
Error (vector) diversity:			 0.188
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 54717828
--- Timings ---
Current time: 1529615979677 milliseconds
Total Time:         135.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.2 seconds, 39.9%
Fitness Testing:     64.8 seconds, 47.7%
Report:              16.7 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 60633.5548
Test mean error for best: 30.31678
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -22.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -59.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.5782544318  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -22.0         
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -22.0         
Correct output: 1.6433897119   | Program output: -22.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_dup_items} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -77} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_dup_items} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_max} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush})
Best program: (float_sub integer_flush integer_add integer_dup_items -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_mult integer_pop in2 -77 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_swap float_max integer_mod -59 float_dup_items float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_max integer_mod float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush)
Errors: [2.9409 10 60.0 2 132.3386 13 81.0 3 55.0 12 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 6.6249 12 56.0 2 90.2494 12 8.0 2 46.0 2 61.6235 12 36.0 2 73.2943 8 1.5118 11 20.7176 10 0.1736 8 11.0 2 44.3005 9 33.2033 11 23.6434 12]
Total: 1122.7184999999997
Mean: 22.45437
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2517.9320500000044
Median total errors in population: 1180.2832
Error averages by case: (56.01638699999979 9.593 119.22997660000017 3.63 195.72472959999806 12.393 136.17261189999988 4.523 101.1493368 11.695 59.19942970000081 8.789 62.93881839999973 8.878 68.31177720000002 3.676 90.22591049999944 10.534 64.66412669999976 11.019 115.09064699999904 12.324 109.60919759999982 3.652 136.05641510000157 11.143 68.8454779 3.527 87.76479609999967 5.104 109.1425170000008 10.463 91.9254838000002 3.565 122.18685000000094 10.389 56.092980000000615 10.975 61.636916599998756 10.848 54.928526999999875 7.85 73.73497769999982 5.243 95.21082570000118 11.083 105.86638279999846 11.421 63.28295130000068 10.607)
Error minima by case: (0.1755 8 6.9603 2 53.3386 2 4.3101 2 9.0962 9 4.4579 2 9.0587 2 1.2382 2 11.1547 2 1.8905 10 5.6249 10 33.051 2 8.6711 2 2.8608 1 6.0215 2 1.0453 2 21.7091 2 10.1274 8 0.9335 8 0.2824 8 0.0102 6 11.0 2 13.6016 8 2.7967 10 1.4875 2)
Average genome size in population (length): 54.49
Average program size in population (points): 55.49
Average percent parens in population: 0.018
Minimum age in population: 58.94247944089875
Maximum age in population: 62.97812468942766
Average age in population: 61.09003497597397
Median age in population: 61.11698007525479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.158
Error (vector) diversity:			 0.159
Behavioral diversity:				 0.16
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 56080153
--- Timings ---
Current time: 1529615982821 milliseconds
Total Time:         138.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.4 seconds, 39.9%
Fitness Testing:     66.3 seconds, 47.7%
Report:              17.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 61024.38600000001
Test mean error for best: 30.51219
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.5782544318  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -11.0         
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -13.0         
Correct output: 1.6433897119   | Program output: -12.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -77} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min -50 in2 integer_mult integer_pop in2 -77 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9409 10 60.0 2 74.3386 13 81.0 3 55.0 12 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 9.3751 11 56.0 2 90.2494 12 8.0 2 46.0 2 61.6235 12 36.0 2 73.2943 8 1.5118 11 9.7176 10 0.1736 8 11.0 2 44.3005 9 42.2033 11 13.6434 12]
Total: 1054.4687
Mean: 21.089375
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2339.1006777000007
Median total errors in population: 1171.2832
Error averages by case: (50.87784629999994 9.761 115.93805120000022 3.661 178.83908479999852 11.927 132.66210199999978 4.58 92.39996879999998 11.664 54.14559430000044 8.885 57.46751179999996 9.099 61.64050509999998 3.665 83.73869749999938 10.659 56.47303379999986 10.984 96.40929029999926 11.991 105.38064079999981 3.729 127.64464620000136 11.119 65.07164880000006 3.574 80.83201809999989 4.873 101.92732070000059 10.573 87.77779520000014 3.639 117.40193320000044 10.228 51.14384460000047 11.016 56.952472699999376 10.519 49.964835199999875 7.974 64.04161859999986 4.687 90.33296490000089 10.979 89.34468899999945 11.125 59.191563800000644 10.59)
Error minima by case: (1.9409 7 19.9603 2 73.3386 2 5.3101 2 13.0962 10 4.4579 2 6.9413 2 0.7618 2 17.8453 2 1.8905 9 4.6249 11 31.949 2 8.6711 2 7.0 1 8.3418 2 1.0453 2 22.7091 2 9.1274 8 0.5118 7 0.2824 8 0.0177 7 11.0 2 12.9689 8 2.7967 10 0.6434 2)
Average genome size in population (length): 54.333
Average program size in population (points): 55.333
Average percent parens in population: 0.018
Minimum age in population: 60.37902583746791
Maximum age in population: 64.2039334484407
Average age in population: 62.4759992781888
Median age in population: 62.52505405699696
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 58
Genome diversity (% unique Plush genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 58
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.149
Error (vector) diversity:			 0.152
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 57438478
--- Timings ---
Current time: 1529615985993 milliseconds
Total Time:         142.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 39.9%
Fitness Testing:     67.8 seconds, 47.7%
Report:              17.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 61024.38600000001
Test mean error for best: 30.51219
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.5782544318  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -11.0         
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -13.0         
Correct output: 1.6433897119   | Program output: -12.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -77} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min -50 in2 integer_mult integer_pop in2 -77 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9409 10 60.0 2 74.3386 13 81.0 3 55.0 12 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 9.3751 11 56.0 2 90.2494 12 8.0 2 46.0 2 61.6235 12 36.0 2 73.2943 8 1.5118 11 9.7176 10 0.1736 8 11.0 2 44.3005 9 42.2033 11 13.6434 12]
Total: 1054.4687
Mean: 21.089375
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2637.595014899983
Median total errors in population: 1151.0457
Error averages by case: (63.9633141000002 9.971 127.25050450000026 3.667 175.34949689999863 12.217 144.29792979999988 4.568 105.80095659999999 11.769 66.8034555 9.423 70.03204910000046 9.873 74.99623900000007 3.594 94.37228699999909 11.145 71.8121976 11.167 90.23460429999946 11.828 117.53301359999972 3.69 139.00586420000118 11.405 77.169386 3.569 97.62961289999964 4.949 111.65858970000087 11.108 99.87825600000025 3.631 129.85188469999966 9.681 63.99253460000035 10.98 84.25273990000025 10.891 62.790209400000045 8.236 75.67043869999992 3.786 103.07463190000014 10.514 89.93891479999974 11.089 86.69890410000072 10.786)
Error minima by case: (1.2451 8 20.9603 2 55.3386 2 5.3101 3 4.9038 10 1.4579 2 6.0587 2 8.0 2 3.8453 2 1.8905 10 4.6249 11 10.6172 2 7.6711 2 5.529 2 10.3418 2 1.0453 2 1.9591 2 8.4592 8 0.1841 7 0.2824 10 0.0089 7 11.0 2 37.4531 8 2.7967 10 0.6434 2)
Average genome size in population (length): 51.189
Average program size in population (points): 52.189
Average percent parens in population: 0.020
Minimum age in population: 61.59188518995961
Maximum age in population: 65.66005295054538
Average age in population: 63.86233221052333
Median age in population: 63.89831441230672
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.159
Error (vector) diversity:			 0.161
Behavioral diversity:				 0.162
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 58718203
--- Timings ---
Current time: 1529615989063 milliseconds
Total Time:         145.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.0 seconds, 39.9%
Fitness Testing:     69.2 seconds, 47.7%
Report:              17.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 61024.38600000001
Test mean error for best: 30.51219
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.5782544318  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -11.0         
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -13.0         
Correct output: 1.6433897119   | Program output: -12.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -77} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min -50 in2 integer_mult integer_pop in2 -77 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9409 10 60.0 2 74.3386 13 81.0 3 55.0 12 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 9.3751 11 56.0 2 90.2494 12 8.0 2 46.0 2 61.6235 12 36.0 2 73.2943 8 1.5118 11 9.7176 10 0.1736 8 11.0 2 44.3005 9 42.2033 11 13.6434 12]
Total: 1054.4687
Mean: 21.089375
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2236.579079299992
Median total errors in population: 1129.3119
Error averages by case: (47.49268370000045 10.087 111.97779540000016 3.493 158.3460986999995 12.443 128.97090229999984 4.372 89.0418362 11.777 50.08918169999962 9.842 53.35116270000037 10.567 59.26290939999999 3.43 77.85770959999958 11.529 54.92414520000005 11.118 63.26357680000108 11.825 102.11363299999984 3.458 121.08580670000127 11.557 61.149005400000085 3.453 84.8744598999998 5.029 95.74805420000095 11.532 84.13087540000011 3.444 114.5235689999991 9.104 46.86210070000015 10.907 75.43976880000132 10.73 45.60303189999992 8.406 59.83553109999996 3.568 87.20024279999947 9.959 71.56356690000007 10.947 78.15543180000067 11.139)
Error minima by case: (0.9409 7 57.9818 2 12.3386 2 52.7114 3 0.0962 10 0.5421 2 6.0587 2 8.0 2 2.1547 2 1.8905 10 4.6249 10 1.0295 2 7.6711 2 6.1177 2 10.3418 2 0.0453 2 9.6876 2 10.1274 8 0.4882 7 0.2824 10 0.0269 7 11.0 2 31.1213 8 2.7967 10 0.6434 2)
Average genome size in population (length): 47.122
Average program size in population (points): 48.122
Average percent parens in population: 0.021
Minimum age in population: 62.99943068778884
Maximum age in population: 67.13949825176047
Average age in population: 65.34467125698768
Median age in population: 65.36927317424451
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 153
Genome diversity (% unique Plush genomes):	 0.577
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 153
Syntactic diversity (% unique Push programs):	 0.577
Total error diversity:				 0.193
Error (vector) diversity:			 0.197
Behavioral diversity:				 0.197
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 59896253
--- Timings ---
Current time: 1529615992101 milliseconds
Total Time:         148.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.2 seconds, 40.0%
Fitness Testing:     70.6 seconds, 47.7%
Report:              18.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 61973.80600000001
Test mean error for best: 30.98690
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.5782544318  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -77} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min -50 in2 integer_mult integer_pop in2 -77 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9409 10 60.0 2 74.3386 13 81.0 3 55.0 12 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 9.3751 11 56.0 2 90.2494 12 8.0 2 46.0 2 61.6235 12 36.0 2 73.2943 8 1.5118 11 0.2824 10 0.1736 8 11.0 2 44.3005 9 54.2033 11 2.6434 11]
Total: 1045.0335
Mean: 20.90067
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1931.511773599992
Median total errors in population: 1122.7184999999997
Error averages by case: (35.18699390000059 10.109 98.1707972000001 3.098 144.7293909000007 12.508 116.09133079999988 4.004 72.75556399999998 11.797 38.164629200000206 9.847 41.655965399999815 10.63 44.9399636 3.023 67.0574725000001 11.618 42.70284580000006 11.079 53.79323080000039 11.698 89.73847909999992 3.072 101.9912361000011 11.426 47.01639180000002 3.062 77.72895289999998 5.656 85.29528920000092 11.604 71.40660970000005 3.058 103.2057329999989 8.865 34.92404500000014 10.888 66.46006950000167 10.703 33.666194099999366 8.351 46.184295599999956 3.122 75.34475609999926 9.785 62.84778820000031 11.014 69.33774920000069 11.099)
Error minima by case: (1.9409 8 59.4217 2 13.3386 2 66.6899 3 3.0962 10 0.4579 2 7.0587 2 5.7132 2 3.8453 2 1.8905 9 5.6249 9 35.424 2 7.6711 2 7.4217 2 10.1853 2 1.0453 2 26.7659 2 9.1274 8 0.3279 7 0.2824 8 0.0089 7 10.9567 2 12.6463 9 2.7967 10 0.6434 2)
Average genome size in population (length): 46.293
Average program size in population (points): 47.293
Average percent parens in population: 0.021
Minimum age in population: 64.6488828595509
Maximum age in population: 68.71375232140409
Average age in population: 66.75342385432884
Median age in population: 66.77760249614313
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 107
Genome diversity (% unique Plush genomes):	 0.552
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.552
Total error diversity:				 0.196
Error (vector) diversity:			 0.206
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 61053578
--- Timings ---
Current time: 1529615995231 milliseconds
Total Time:         151.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.5 seconds, 40.0%
Fitness Testing:     72.1 seconds, 47.6%
Report:              18.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 61973.80600000001
Test mean error for best: 30.98690
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.5782544318  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction in1} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -77} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos in1 integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min -50 in2 integer_mult integer_pop in2 -77 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9409 10 60.0 2 74.3386 13 81.0 3 55.0 12 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 9.3751 11 56.0 2 90.2494 12 8.0 2 46.0 2 61.6235 12 36.0 2 73.2943 8 1.5118 11 0.2824 10 0.1736 8 11.0 2 44.3005 9 54.2033 11 2.6434 11]
Total: 1045.0335
Mean: 20.90067
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2338.9622709
Median total errors in population: 1068.1716000000001
Error averages by case: (54.37198150000078 10.225 116.60611660000016 3.341 137.54366040000127 12.633 133.83128729999984 4.25 82.14712 11.608 57.244045599999446 10.098 60.78788640000061 10.946 66.0116231 3.339 85.51535159999924 11.855 62.70991930000006 11.154 62.27854920000023 11.41 108.12450969999979 3.377 106.35082700000147 11.29 66.99214140000008 3.298 100.02397939999949 7.96 103.36362370000089 11.844 90.64429310000017 3.352 121.21158529999839 8.855 54.51320790000001 10.922 82.11579360000205 11.017 53.37050590000023 8.49 67.26727759999994 3.475 93.35742889999887 9.753 70.78834160000004 11.025 85.13621480000069 11.138)
Error minima by case: (1.9409 8 23.9603 2 53.3386 2 23.3101 3 4.0962 10 0.4579 2 2.9413 2 2.7618 2 6.1547 2 0.1095 9 4.6249 11 16.064 2 6.6711 2 8.0 1 2.3418 2 1.0453 2 4.2909 2 3.0124 8 0.5118 7 0.2824 10 0.0089 7 6.4317 2 5.7139 9 2.7967 10 0.6434 2)
Average genome size in population (length): 47.664
Average program size in population (points): 48.664
Average percent parens in population: 0.021
Minimum age in population: 66.08675913787798
Maximum age in population: 70.3938272699967
Average age in population: 68.07631462757966
Median age in population: 68.09298785711358
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 171
Genome diversity (% unique Plush genomes):	 0.546
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.546
Total error diversity:				 0.191
Error (vector) diversity:			 0.199
Behavioral diversity:				 0.199
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 62245178
--- Timings ---
Current time: 1529615998324 milliseconds
Total Time:         154.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.8 seconds, 40.0%
Fitness Testing:     73.5 seconds, 47.6%
Report:              19.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 61973.80600000001
Test mean error for best: 30.98690
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: 13.0961592274 
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: 0.5782544318  
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 57.3417885788 
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction in1} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction -77} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos in1 integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min -50 in2 integer_mult integer_pop in2 -77 float_pop integer_sub float_max float_dup_times integer_shove integer_swap float_max integer_mod -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9409 10 60.0 2 74.3386 13 81.0 3 55.0 12 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 9.3751 11 56.0 2 90.2494 12 8.0 2 46.0 2 61.6235 12 36.0 2 73.2943 8 1.5118 11 0.2824 10 0.1736 8 11.0 2 44.3005 9 54.2033 11 2.6434 11]
Total: 1045.0335
Mean: 20.90067
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2166.3743512000037
Median total errors in population: 1054.4687
Error averages by case: (47.07027330000068 10.237 111.26193530000023 3.543 124.10288910000158 12.55 126.4680234999998 4.388 84.82582319999999 11.911 48.56103469999969 10.086 52.74639950000062 10.986 55.512124899999996 3.406 77.06340949999974 11.83 51.15996250000008 11.071 59.84780219999954 11.361 101.57258669999979 3.487 114.11994840000092 11.654 60.02257130000008 3.431 85.93718689999984 4.649 95.38466950000088 11.826 84.24271660000016 3.459 114.78165839999843 8.776 47.37771060000005 10.942 69.61024240000145 10.515 46.07969159999998 8.497 56.38676929999995 3.536 85.12103209999893 9.657 80.19232589999962 11.047 72.9345638000006 11.146)
Error minima by case: (1.9409 9 14.9603 2 15.3386 2 11.3101 2 4.9038 10 0.4579 2 5.9413 2 4.7379 2 5.1547 2 0.8905 10 4.6249 11 11.3242 2 1.3289 2 2.8608 1 0.3418 2 1.0453 2 2.6662 2 6.8726 8 0.5118 7 0.2824 10 0.0089 7 3.4317 2 6.1213 9 2.7967 10 1.6434 2)
Average genome size in population (length): 48.218
Average program size in population (points): 49.218
Average percent parens in population: 0.020
Minimum age in population: 67.26989968296846
Maximum age in population: 71.52647208414199
Average age in population: 69.49703630043793
Median age in population: 69.55953600323944
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 280
Genome diversity (% unique Plush genomes):	 0.556
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 280
Syntactic diversity (% unique Push programs):	 0.556
Total error diversity:				 0.205
Error (vector) diversity:			 0.208
Behavioral diversity:				 0.209
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 63450628
--- Timings ---
Current time: 1529616001443 milliseconds
Total Time:         157.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.1 seconds, 40.0%
Fitness Testing:     75.0 seconds, 47.6%
Report:              19.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 57141.06519999999
Test mean error for best: 28.57053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -51.0         
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -11.0         
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -13.0         
Correct output: 1.6433897119   | Program output: -12.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_min} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_tan} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_min -50 float_stackdepth integer_mult float_tan in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9409 10 60.0 2 74.3386 13 81.0 3 14.0962 11 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 62.3418 12 61.6235 12 36.0 2 73.2943 8 1.5118 11 9.7176 10 0.1736 8 11.0 2 44.3005 9 42.2033 11 13.6434 12]
Total: 984.3284000000001
Mean: 19.686567
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2124.0877200999994
Median total errors in population: 1054.4687
Error averages by case: (44.60703770000061 10.14 108.17597630000026 3.495 131.46067800000165 12.751 124.72728389999983 4.368 81.90001720000001 11.822 47.433535399999705 10.067 51.32095130000043 10.927 53.5236644 3.39 75.92192689999993 11.764 50.341097400000066 11.046 59.572292999999576 11.325 98.8699699999998 3.431 116.16532370000091 11.697 56.844771800000096 3.415 82.77730629999981 4.871 94.53338220000074 11.795 80.98018690000013 3.414 111.87319069999867 8.955 44.4164266 10.758 63.64030640000132 10.474 43.16861800000002 8.494 54.51630549999996 3.511 83.49893299999907 9.765 82.76639249999923 11.073 67.0131450000006 11.291)
Error minima by case: (1.9409 7 14.9603 2 6.6614 2 9.3101 3 0.9038 9 0.4579 2 9.0587 2 3.7618 2 5.1547 2 0.1095 9 0.6249 9 9.949 2 6.6711 2 2.8608 2 0.6582 2 1.0453 2 21.2909 2 9.1274 8 0.5118 7 0.2824 10 0.0323 6 11.0 2 19.8787 8 1.7967 10 0.6434 2)
Average genome size in population (length): 48.711
Average program size in population (points): 49.711
Average percent parens in population: 0.020
Minimum age in population: 68.47605311183611
Maximum age in population: 72.89613537404352
Average age in population: 70.90430181312504
Median age in population: 70.98347535120249
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 166
Genome diversity (% unique Plush genomes):	 0.543
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.543
Total error diversity:				 0.218
Error (vector) diversity:			 0.228
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 64668403
--- Timings ---
Current time: 1529616004586 milliseconds
Total Time:         160.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.4 seconds, 40.1%
Fitness Testing:     76.4 seconds, 47.6%
Report:              19.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 57429.63509999999
Test mean error for best: 28.71482
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -79.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -55.0         
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -74.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -46.0         
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -10.0         
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -12.0         
Correct output: 1.6433897119   | Program output: -11.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction in2} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 in2 -75 float_pop integer_sub float_max float_dup_times -59 integer_inc integer_mod float_dup_times float_yank float_yank in1 integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9409 10 60.0 2 75.3386 13 81.0 3 13.0962 11 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 8.3751 11 56.0 2 37.6711 11 8.0 2 57.3418 12 61.6235 12 36.0 2 73.2943 8 1.5118 11 8.7176 11 0.1736 8 11.0 2 44.3005 9 43.2033 11 12.6434 11]
Total: 978.3284000000001
Mean: 19.566568
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2079.2927602999944
Median total errors in population: 1053.4687
Error averages by case: (41.643823100000375 10.011 106.56866020000024 3.431 144.17347630000063 12.641 122.41896779999982 4.314 74.43844320000001 11.701 44.61915869999997 10.225 48.50502040000044 10.998 53.209083299999996 3.308 73.56548460000023 11.69 48.741067300000054 11.075 57.67001359999987 11.347 97.19965369999981 3.373 109.195490300001 11.602 56.28101230000009 3.363 81.03230639999992 6.273 92.69306230000068 11.752 79.05687080000008 3.367 109.32427459999889 9.482 41.97114589999992 10.279 59.66222960000072 10.529 40.70332699999962 8.746 54.283937299999955 3.409 80.28350849999894 10.202 84.08545849999933 11.113 62.72028460000065 11.016)
Error minima by case: (2.1083 7 14.9603 2 4.3386 2 11.3101 2 0.9038 9 0.4579 2 0.0587 2 5.7618 2 0.1547 2 0.1095 8 0.6249 10 27.949 2 6.6711 2 2.8608 2 8.3418 2 1.0453 1 28.7091 2 8.1274 8 0.6791 7 0.2824 10 0.0089 6 10.0 1 19.8787 8 3.2033 10 0.6434 2)
Average genome size in population (length): 49.965
Average program size in population (points): 50.965
Average percent parens in population: 0.020
Minimum age in population: 70.24561403111144
Maximum age in population: 74.33702519747565
Average age in population: 72.32535104977418
Median age in population: 72.37553367730764
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.59
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.59
Total error diversity:				 0.281
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.296
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 65917528
--- Timings ---
Current time: 1529616007866 milliseconds
Total Time:         163.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.6 seconds, 40.1%
Fitness Testing:     77.9 seconds, 47.6%
Report:              20.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 57429.63509999999
Test mean error for best: 28.71482
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -79.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -55.0         
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -74.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -46.0         
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -10.0         
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -12.0         
Correct output: 1.6433897119   | Program output: -11.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction in2} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 in2 -75 float_pop integer_sub float_max float_dup_times -59 integer_inc integer_mod float_dup_times float_yank float_yank in1 integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9409 10 60.0 2 75.3386 13 81.0 3 13.0962 11 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 8.3751 11 56.0 2 37.6711 11 8.0 2 57.3418 12 61.6235 12 36.0 2 73.2943 8 1.5118 11 8.7176 11 0.1736 8 11.0 2 44.3005 9 43.2033 11 12.6434 11]
Total: 978.3284000000001
Mean: 19.566568
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2383.0345888999996
Median total errors in population: 1049.2046
Error averages by case: (55.60936730000043 9.944 119.56919370000011 3.434 139.02738210000103 12.688 135.23158029999985 4.353 92.17982959999999 11.848 58.49241809999972 10.478 62.35799120000051 11.121 67.0868187 3.36 86.8371903999996 11.745 62.44658090000006 11.131 66.01717419999957 11.341 110.85560419999985 3.433 124.57072620000064 11.902 69.79942720000004 3.388 95.13631019999974 5.197 105.1805284000008 11.808 92.90679350000009 3.387 122.90925949999863 9.654 56.69975699999966 9.889 65.38261389999977 10.455 55.4859345000001 8.917 68.33161489999996 3.48 93.85678899999901 10.5 93.57245919999917 11.114 67.98724470000064 10.937)
Error minima by case: (0.0635 8 15.9603 2 16.3386 2 10.3101 3 2.0962 10 1.4579 2 4.9413 2 4.7618 2 4.1547 2 0.8905 9 5.6249 9 5.5994 2 6.6711 2 0.5112 1 0.6582 2 1.0453 2 3.0586 2 3.1274 8 0.1816 7 0.2824 9 0.0089 7 0.4317 2 8.1213 8 1.2033 10 0.8205 2)
Average genome size in population (length): 50.798
Average program size in population (points): 51.798
Average percent parens in population: 0.019
Minimum age in population: 71.24561403111144
Maximum age in population: 75.61539984686137
Average age in population: 73.8487092112621
Median age in population: 73.9032028553024
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 89
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.277
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 67187478
--- Timings ---
Current time: 1529616011127 milliseconds
Total Time:         167.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.0 seconds, 40.0%
Fitness Testing:     79.5 seconds, 47.5%
Report:              20.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 58081.87500000003
Test mean error for best: 29.04094
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.6693832761  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: 0.6693832761  
Correct output: -10.0587306507 | Program output: 0.6693832761  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.6693832761  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -47.0         
Correct output: -61.0452729724 | Program output: 0.6693832761  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.6693832761  
Correct output: 2.0900277855   | Program output: 0.6693832761  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.6693832761  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.6693832761  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction in1} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction in2} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap in1 -50 float_stackdepth integer_mult integer_pop in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 in2 float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float)
Errors: [2.8498 8 60.0 2 74.3386 13 81.0 3 14.0962 11 6.1272 10 10.7281 12 8.0 2 40.5147 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 58.3418 11 61.7147 12 36.0 2 73.2032 11 1.4206 10 0.2824 10 0.0825 9 11.0 2 44.2093 12 54.2033 11 2.6434 11]
Total: 973.8020000000002
Mean: 19.47604
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2293.4473571000044
Median total errors in population: 1045.0335
Error averages by case: (51.88482720000077 10.143 117.40649260000025 3.622 129.42087330000177 12.445 132.8999481999998 4.52 85.99932109999997 11.739 53.98874759999942 10.174 57.73208850000078 10.953 61.5959018 3.46 81.60524439999945 11.724 55.61547000000005 11.069 67.08438769999948 11.388 107.37105379999974 3.612 113.43880480000111 11.503 66.60901330000011 3.564 91.52785249999954 5.755 99.4245983000009 11.75 90.20788300000022 3.567 119.35982639999833 9.1 52.807277799999845 10.57 71.01156359999982 10.52 51.593172100000395 8.656 62.30774959999994 3.624 90.02593009999896 10.012 93.67744889999878 11.076 73.54988050000068 10.756)
Error minima by case: (1.5192 8 7.0397 2 6.6614 2 4.3101 3 2.9038 8 1.4579 2 6.0587 2 1.2382 2 6.1547 2 0.1095 9 0.6249 9 33.051 2 6.6711 2 2.8608 2 9.4334 2 2.0453 2 21.7091 2 9.1274 8 0.1358 7 0.2824 9 0.0418 6 11.0 2 11.6255 8 1.2033 10 0.3566 2)
Average genome size in population (length): 49.985
Average program size in population (points): 50.985
Average percent parens in population: 0.020
Minimum age in population: 72.24561403111144
Maximum age in population: 77.26102249020698
Average age in population: 75.22712889130291
Median age in population: 75.28168561275776
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 140
Genome diversity (% unique Plush genomes):	 0.593
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.593
Total error diversity:				 0.258
Error (vector) diversity:			 0.26
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 68437103
--- Timings ---
Current time: 1529616014310 milliseconds
Total Time:         170.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.2 seconds, 40.0%
Fitness Testing:     81.0 seconds, 47.5%
Report:              21.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 58276.70829999996
Test mean error for best: 29.13835
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -64.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -40.0         
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -59.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -37.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -31.0         
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -5.0          
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -9.0          
Correct output: 1.6433897119   | Program output: -7.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9409 10 60.0 2 90.3386 12 81.0 3 1.9038 10 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 6.6249 12 56.0 2 52.6711 11 8.0 2 42.3418 11 61.6235 12 36.0 2 73.2943 8 1.5118 11 3.7176 11 0.1736 8 11.0 2 44.3005 9 46.2033 11 8.6434 11]
Total: 972.3858
Mean: 19.447716
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2256.0911855000018
Median total errors in population: 1043.0335
Error averages by case: (52.376096400000826 10.183 116.03309220000027 3.551 125.27141180000174 12.496 132.44800909999978 4.469 74.55498269999997 11.324 54.680636599999254 10.055 58.12999610000075 10.876 61.694432499999984 3.488 81.77450359999911 11.704 57.836680400000056 11.055 62.6835772999993 11.333 106.03274859999969 3.594 97.43381110000173 10.908 66.17773260000014 3.538 99.06978299999865 9.294 98.72375010000088 11.691 88.68190560000029 3.533 119.13961359999843 8.942 52.69253159999996 10.847 69.01605410000106 10.5 51.423258500000415 8.538 62.289416899999935 3.656 91.00204399999902 9.817 87.5363063999989 11.066 71.8958107000007 11.035)
Error minima by case: (1.5192 8 60.0 2 53.3386 2 65.6899 3 1.9038 10 0.4579 2 5.9413 2 8.0 2 6.1547 2 0.8905 8 2.6249 9 36.949 2 6.6711 2 8.0 2 10.3262 2 0.0453 2 36.0 2 9.1274 8 0.3279 7 0.2824 9 0.0418 6 11.0 2 6.2346 8 3.2033 10 0.6434 2)
Average genome size in population (length): 49.164
Average program size in population (points): 50.164
Average percent parens in population: 0.020
Minimum age in population: 74.84234860244366
Maximum age in population: 78.83700083034736
Average age in population: 76.61938106326222
Median age in population: 76.6708797149256
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 142
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 142
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.245
Error (vector) diversity:			 0.247
Behavioral diversity:				 0.247
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 69666203
--- Timings ---
Current time: 1529616017453 milliseconds
Total Time:         173.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.5 seconds, 40.1%
Fitness Testing:     82.4 seconds, 47.5%
Report:              21.5 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 58285.30819999999
Test mean error for best: 29.14265
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.9542088155  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: 0.9542088155  
Correct output: -10.0587306507 | Program output: 0.9542088155  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.9542088155  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -47.0         
Correct output: -61.0452729724 | Program output: 0.9542088155  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.9542088155  
Correct output: 2.0900277855   | Program output: 0.9542088155  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.9542088155  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.9542088155  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction in1} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction in2} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 float_sub -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap in1 -50 float_stackdepth integer_mult integer_pop in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 in2 float_max float_dup_times integer_shove integer_swap integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.565 9 60.0 2 74.3386 13 81.0 3 14.0962 11 6.4121 11 11.0129 11 8.0 2 40.7995 12 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 58.3418 11 61.9995 12 36.0 2 72.9184 10 1.1358 7 0.2824 10 0.2024 9 11.0 2 43.9245 12 54.2033 11 2.6434 11]
Total: 971.9220000000003
Mean: 19.43844
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1978.5386567999985
Median total errors in population: 984.3284000000001
Error averages by case: (39.437335300000505 10.171 103.49797650000008 3.233 115.46668020000165 12.151 121.15436919999983 4.18 57.82428799999997 11.155 43.413068099999606 10.033 46.326580600000376 10.912 50.482766199999986 3.209 70.94431210000006 11.717 46.529099900000034 11.055 55.014436499999626 11.316 94.60419049999987 3.253 76.39517900000052 10.351 53.365930700000014 3.245 94.34126819999891 10.96 87.87090660000088 11.714 76.62564150000006 3.239 107.34240299999884 8.82 40.66506320000006 10.837 62.95993280000116 10.598 39.705292899999826 8.498 51.700347699999945 3.356 79.49725659999913 9.711 81.68561119999956 11.093 66.09672030000068 10.785)
Error minima by case: (1.5192 8 58.0397 2 5.6614 2 65.6899 3 1.9038 10 2.4579 2 8.5137 2 8.0 2 4.8453 2 0.1095 9 0.3751 9 28.7154 2 2.6711 2 8.0 1 3.3418 2 0.0453 2 20.0573 2 9.1274 8 0.1358 7 0.2824 9 0.064 7 11.0 2 13.1792 8 3.2033 10 0.6434 2)
Average genome size in population (length): 48.244
Average program size in population (points): 49.244
Average percent parens in population: 0.020
Minimum age in population: 75.84234860244366
Maximum age in population: 80.01101161639622
Average age in population: 78.02084882779609
Median age in population: 78.09465542167567
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 146
Genome diversity (% unique Plush genomes):	 0.57
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 146
Syntactic diversity (% unique Push programs):	 0.57
Total error diversity:				 0.218
Error (vector) diversity:			 0.224
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 70872303
--- Timings ---
Current time: 1529616020575 milliseconds
Total Time:         176.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.8 seconds, 40.1%
Fitness Testing:     83.9 seconds, 47.5%
Report:              21.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 58166.29659999999
Test mean error for best: 29.08315
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -47.0         
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction in1} {:instruction -50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction integer_pop} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction in2} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap in1 -50 float_stackdepth integer_mult integer_pop in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 in2 float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9409 10 60.0 2 74.3386 13 81.0 3 14.0962 11 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 58.3418 11 61.6235 12 36.0 2 73.2943 8 1.5118 11 0.2824 10 0.1736 8 11.0 2 44.3005 9 54.2033 11 2.6434 11]
Total: 969.8932000000002
Mean: 19.397863
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2140.7643087999977
Median total errors in population: 979.3284000000001
Error averages by case: (43.84772580000057 10.141 105.4360924000001 3.076 127.71870750000166 12.266 123.13089399999988 4.006 69.16470809999996 11.165 48.1576665 10.102 51.165765200000166 10.905 54.6080999 3.167 76.2615283 11.746 50.52237850000005 11.098 66.73289039999945 11.382 97.8062893999999 3.064 88.0479388000012 10.508 55.71847040000002 3.062 106.0041294999989 11.056 93.45637270000068 11.761 79.76385590000004 3.058 111.97571579999902 9.01 45.846142700000065 10.755 73.57496630000101 10.821 45.8218133999997 8.591 55.95285589999995 3.282 83.83531779999913 9.902 93.9353000999992 11.13 76.54268350000063 10.682)
Error minima by case: (1.5192 8 59.0 2 3.3386 2 65.6899 2 0.9038 9 0.4579 2 8.9413 2 8.0 2 2.8453 2 0.1095 9 0.3751 10 36.949 2 4.6711 2 7.0 1 9.3418 2 0.0453 2 35.0 2 9.1274 8 0.5118 7 0.2824 9 0.0091 7 11.0 2 13.8787 7 2.7967 10 0.3566 2)
Average genome size in population (length): 49.984
Average program size in population (points): 50.984
Average percent parens in population: 0.020
Minimum age in population: 76.96563653106931
Maximum age in population: 81.42476541007959
Average age in population: 79.44523653901074
Median age in population: 79.46417881077355
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 106
Genome diversity (% unique Plush genomes):	 0.589
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 106
Syntactic diversity (% unique Push programs):	 0.589
Total error diversity:				 0.24
Error (vector) diversity:			 0.248
Behavioral diversity:				 0.248
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 72121903
--- Timings ---
Current time: 1529616023822 milliseconds
Total Time:         179.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.1 seconds, 40.1%
Fitness Testing:     85.4 seconds, 47.5%
Report:              22.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 58242.412699999964
Test mean error for best: 29.12121
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -65.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -41.0         
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -60.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -38.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -32.0         
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -6.0          
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -10.0         
Correct output: 1.6433897119   | Program output: -8.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -60} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -60 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9409 10 60.0 2 89.3386 12 81.0 3 0.9038 9 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 5.6249 11 56.0 2 51.6711 11 8.0 2 43.3418 12 61.6235 12 36.0 2 73.2943 8 1.5118 11 4.7176 11 0.1736 8 11.0 2 44.3005 9 45.2033 11 9.6434 11]
Total: 969.3858
Mean: 19.387716
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2070.0509107999983
Median total errors in population: 978.3284000000001
Error averages by case: (44.30576740000076 9.854 105.04144040000013 3.127 120.11849450000159 12.051 122.37630449999992 4.033 60.51958799999998 11.134 47.81695089999972 10.142 51.3759935000007 11.053 54.492399 3.12 76.83571229999963 11.656 51.77567320000004 11.085 58.009155699999305 11.464 97.35010749999987 3.118 80.50977710000092 10.416 55.25997490000006 3.087 96.08918939999867 10.813 94.30951650000048 11.837 79.4031425000001 3.109 111.26367159999897 9.33 45.18542179999982 10.555 63.3898926000002 10.866 44.0334295 8.671 55.90664979999996 3.251 83.29853829999931 10.24 89.83125429999924 11.146 65.94786560000064 10.447)
Error minima by case: (0.3553 8 1.9603 2 4.3386 2 24.3101 3 0.9038 9 0.5421 2 7.0587 2 8.0 2 5.1547 2 0.1095 9 0.3751 10 17.4945 2 6.6711 2 7.4217 1 1.3418 2 0.0453 2 8.8365 2 1.5818 8 0.9335 7 0.2824 8 0.0323 7 11.0 2 7.1213 7 2.2033 10 1.3566 2)
Average genome size in population (length): 51.53
Average program size in population (points): 52.53
Average percent parens in population: 0.019
Minimum age in population: 77.96563653106931
Maximum age in population: 82.66066045581724
Average age in population: 80.82129382455281
Median age in population: 80.86026205927357
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 92
Genome diversity (% unique Plush genomes):	 0.562
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.562
Total error diversity:				 0.265
Error (vector) diversity:			 0.269
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 73410153
--- Timings ---
Current time: 1529616027119 milliseconds
Total Time:         183.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.4 seconds, 40.0%
Fitness Testing:     87.0 seconds, 47.5%
Report:              22.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 58491.036499999966
Test mean error for best: 29.24552
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5782544318  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -65.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -41.0         
Correct output: -5.4578605766  | Program output: 0.5782544318  
Correct output: -10.0587306507 | Program output: 0.5782544318  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5782544318  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -60.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -38.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -32.0         
Correct output: -61.0452729724 | Program output: 0.5782544318  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5782544318  
Correct output: 2.0900277855   | Program output: 0.5782544318  
Correct output: -1.2824481557  | Program output: -2.0          
Correct output: 0.7518561607   | Program output: 0.5782544318  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5782544318  
Correct output: -55.2032724973 | Program output: -2.0          
Correct output: 1.6433897119   | Program output: -2.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction -81.37761634098129} {:instruction float_swap} {:instruction in2} {:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_min} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_add})
Best program: (integer_min -81.37761634098129 float_swap in2 float_sub -81.37761634098129 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_min integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_add)
Errors: [2.9409 10 60.0 2 89.3386 12 81.0 3 0.9038 9 6.0361 10 10.637 11 8.0 2 40.4236 12 13.0 11 5.6249 11 56.0 2 51.6711 11 8.0 2 43.3418 12 61.6235 12 36.0 2 73.2943 8 1.5118 11 0.7176 11 0.1736 8 11.0 2 44.3005 9 53.2033 11 3.6434 12]
Total: 968.3858
Mean: 19.367716
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2248.6885189000022
Median total errors in population: 973.8932000000002
Error averages by case: (50.27201520000079 9.833 114.56475600000023 3.32 130.6702377000016 12.087 130.06359349999988 4.247 67.58319079999998 10.994 53.93200119999979 10.144 57.04007900000045 11.04 63.1845838 3.324 81.63350979999979 11.588 57.14542620000004 11.082 65.25002619999962 11.624 105.84730299999978 3.327 90.50063310000166 10.617 64.7370146000001 3.269 102.20132199999844 10.729 98.99121720000025 11.771 88.14155350000014 3.317 118.05320419999939 9.552 52.07420399999974 10.557 68.70467220000023 10.859 51.00985480000003 8.742 64.33014529999996 3.448 89.16962939999948 10.368 94.55499899999917 11.104 71.44234720000057 10.648)
Error minima by case: (1.565 7 31.9603 2 3.3386 2 15.3101 3 0.9038 9 0.4579 2 0.0587 2 5.7618 2 4.8453 2 0.1095 9 0.3751 10 19.051 2 0.3289 2 8.0 1 3.6582 2 1.0453 2 12.2909 2 5.4592 8 0.1358 7 0.2824 9 0.0078 6 2.5683 2 0.8787 7 2.2033 10 1.3566 2)
Average genome size in population (length): 52.048
Average program size in population (points): 53.048
Average percent parens in population: 0.019
Minimum age in population: 79.81436650411244
Maximum age in population: 84.08392923519025
Average age in population: 82.28137384927777
Median age in population: 82.33427903842092
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 103
Genome diversity (% unique Plush genomes):	 0.598
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 103
Syntactic diversity (% unique Push programs):	 0.598
Total error diversity:				 0.285
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.289
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 74711353
--- Timings ---
Current time: 1529616030419 milliseconds
Total Time:         186.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.7 seconds, 40.1%
Fitness Testing:     88.5 seconds, 47.5%
Report:              23.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 57804.865600000005
Test mean error for best: 28.90243
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.0457911845 
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.0457911845 
Correct output: -10.0587306507 | Program output: -0.0457911845 
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.0457911845 
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -47.0         
Correct output: -61.0452729724 | Program output: -0.0457911845 
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.0457911845 
Correct output: 2.0900277855   | Program output: -0.0457911845 
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: -0.0457911845 
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.0457911845 
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_sub} {:instruction -81.37761634098129} {:instruction in2} {:instruction float_cos} {:instruction -49.75088029575505} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_min} {:instruction -48} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_tan} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_yank} {:instruction float_max} {:instruction integer_mod} {:instruction -60} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_shove})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos float_sub -81.37761634098129 in2 float_cos -49.75088029575505 integer_swap -81 integer_min -50 in2 integer_min -48 float_stackdepth integer_mult float_tan in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove float_yank float_max integer_mod -60 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush integer_shove)
Errors: [3.565 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4121 9 10.0129 9 8.0 2 39.7995 10 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 58.3418 11 60.9995 8 36.0 2 73.9184 10 2.1358 9 0.2824 10 0.7976 10 11.0 2 44.9245 10 54.2033 11 2.6434 11]
Total: 964.5172000000002
Mean: 19.290344
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2046.0248799
Median total errors in population: 972.3858
Error averages by case: (43.173025800000566 10.076 104.1049259000001 3.133 124.9725165000017 12.276 121.37296769999988 4.066 57.17456769999999 10.791 47.625106899999636 10.231 50.70350560000059 10.973 53.3526493 3.144 76.42582459999964 11.814 50.34351580000003 11.11 56.08496289999996 11.566 96.3752417999999 3.136 84.9277497000014 10.768 54.10575220000003 3.089 92.40528189999878 10.866 94.18047980000085 11.845 78.40215080000007 3.137 110.45318109999863 9.084 44.593512200000006 10.524 59.24504620000012 10.745 43.46255199999997 8.566 54.71957109999999 3.25 82.71061329999914 9.964 86.66020119999929 11.08 62.47597790000066 10.74)
Error minima by case: (1.5192 8 46.9603 2 31.3386 2 41.6899 2 0.9038 9 0.4579 2 0.0587 2 7.7618 2 10.1547 2 0.8905 9 0.3751 10 12.051 2 6.3289 2 7.0 1 0.6582 2 1.0453 2 4.382 2 5.8726 8 0.1358 7 0.2824 9 0.0376 7 10.4317 2 15.1213 7 0.7967 10 1.0651 2)
Average genome size in population (length): 52.543
Average program size in population (points): 53.543
Average percent parens in population: 0.019
Minimum age in population: 80.97060979064322
Maximum age in population: 85.55283109870327
Average age in population: 83.66267418826764
Median age in population: 83.70896037618049
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 85
Genome diversity (% unique Plush genomes):	 0.574
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 85
Syntactic diversity (% unique Push programs):	 0.574
Total error diversity:				 0.269
Error (vector) diversity:			 0.276
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 76024928
--- Timings ---
Current time: 1529616033679 milliseconds
Total Time:         189.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.0 seconds, 40.0%
Fitness Testing:     90.1 seconds, 47.5%
Report:              23.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 57804.865600000005
Test mean error for best: 28.90243
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.0457911845 
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.0457911845 
Correct output: -10.0587306507 | Program output: -0.0457911845 
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.0457911845 
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -47.0         
Correct output: -61.0452729724 | Program output: -0.0457911845 
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.0457911845 
Correct output: 2.0900277855   | Program output: -0.0457911845 
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: -0.0457911845 
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.0457911845 
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_sub} {:instruction -81.37761634098129} {:instruction in2} {:instruction float_cos} {:instruction -49.75088029575505} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_min} {:instruction -48} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_tan} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_yank} {:instruction float_max} {:instruction integer_mod} {:instruction -60} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_shove})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos float_sub -81.37761634098129 in2 float_cos -49.75088029575505 integer_swap -81 integer_min -50 in2 integer_min -48 float_stackdepth integer_mult float_tan in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove float_yank float_max integer_mod -60 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush integer_shove)
Errors: [3.565 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4121 9 10.0129 9 8.0 2 39.7995 10 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 58.3418 11 60.9995 8 36.0 2 73.9184 10 2.1358 9 0.2824 10 0.7976 10 11.0 2 44.9245 10 54.2033 11 2.6434 11]
Total: 964.5172000000002
Mean: 19.290344
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2176.869780099997
Median total errors in population: 969.9506000000001
Error averages by case: (47.80445670000066 10.15 109.34295910000013 3.233 131.54249210000168 12.278 124.94476679999987 4.136 66.23768539999999 10.78 50.37374879999968 10.2 54.04629150000054 10.887 58.313998300000016 3.239 79.45553809999981 11.752 54.65141820000005 11.124 64.80589549999975 11.441 101.38667339999986 3.216 92.7090356000015 10.743 59.68488170000005 3.182 101.70104959999881 10.922 98.01609530000087 11.785 83.44254850000009 3.228 115.03667659999861 9.038 48.70505399999999 10.684 64.60451279999978 10.672 47.45339559999986 8.513 59.66876689999996 3.354 85.85095489999897 9.887 93.61662289999921 11.133 67.23626180000062 10.661)
Error minima by case: (1.5192 8 59.0 2 3.3386 2 56.3248 2 0.9038 9 1.4579 2 8.9413 2 2.7618 2 4.8453 2 0.1095 9 0.3751 11 2.5838 2 1.6711 2 2.5044 1 0.6582 2 0.0453 1 6.0742 2 10.1274 8 0.2313 7 0.2824 10 0.0089 7 8.3639 1 18.8787 8 2.7967 9 0.3566 2)
Average genome size in population (length): 53.226
Average program size in population (points): 54.226
Average percent parens in population: 0.019
Minimum age in population: 81.97060979064322
Maximum age in population: 87.04875110092595
Average age in population: 85.00677830266736
Median age in population: 85.07548128870636
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.599
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.599
Total error diversity:				 0.278
Error (vector) diversity:			 0.283
Behavioral diversity:				 0.284
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 77355578
--- Timings ---
Current time: 1529616036896 milliseconds
Total Time:         192.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.3 seconds, 40.0%
Fitness Testing:     91.6 seconds, 47.5%
Report:              24.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 58656.762700000036
Test mean error for best: 29.32838
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5983251791  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -65.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -41.0         
Correct output: -5.4578605766  | Program output: 0.5983251791  
Correct output: -10.0587306507 | Program output: 0.5983251791  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5983251791  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -60.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -38.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -32.0         
Correct output: -61.0452729724 | Program output: 0.5983251791  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5983251791  
Correct output: 2.0900277855   | Program output: 0.5983251791  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.5983251791  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5983251791  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -80.49829898291866} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_min} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -80.49829898291866 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_min integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9209 9 60.0 2 89.3386 12 81.0 3 0.9038 9 6.0562 9 10.6571 10 8.0 2 40.4437 11 13.0 11 5.6249 11 56.0 2 51.6711 11 8.0 2 43.3418 12 61.6436 12 36.0 2 73.2743 10 1.4917 9 0.2824 10 0.1535 8 11.0 2 44.2804 10 54.2033 11 2.6434 11]
Total: 962.9307000000002
Mean: 19.258614
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2293.5388675999975
Median total errors in population: 969.8932000000002
Error averages by case: (53.99692610000064 10.138 115.39829550000017 3.31 136.15901880000138 12.155 129.91479279999984 4.216 64.9262543 10.437 56.103223799999405 10.188 59.56634980000076 10.72 64.12334719999998 3.311 84.7195093999998 11.632 60.80488520000003 11.115 64.79349350000012 11.435 106.37233949999985 3.301 95.95783500000168 10.715 66.18844980000007 3.314 98.33285619999879 11.067 102.90198890000069 11.605 89.81755850000013 3.333 121.32463309999845 9.215 55.5958959 10.646 69.31980940000032 10.845 54.45780660000025 8.426 65.64587299999997 3.465 91.66147989999921 9.912 96.67151759999902 11.148 72.45872780000064 10.677)
Error minima by case: (1.565 8 51.0397 2 70.3386 2 65.6899 3 0.0962 9 0.4579 2 0.9413 2 3.7618 2 4.1547 2 0.1095 9 0.3751 10 32.9203 2 5.6711 2 8.0 2 0.3418 2 1.0453 2 24.2623 2 9.1274 8 0.1358 7 0.2824 8 0.0126 6 11.0 2 15.15 8 3.7967 10 0.3566 2)
Average genome size in population (length): 55.331
Average program size in population (points): 56.331
Average percent parens in population: 0.018
Minimum age in population: 83.65395146353063
Maximum age in population: 88.4469908918095
Average age in population: 86.43562183903137
Median age in population: 86.45318063884883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.627
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.627
Total error diversity:				 0.32
Error (vector) diversity:			 0.324
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 78738853
--- Timings ---
Current time: 1529616040215 milliseconds
Total Time:         196.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.6 seconds, 40.0%
Fitness Testing:     93.1 seconds, 47.4%
Report:              24.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 58669.20469999999
Test mean error for best: 29.33460
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.6740525704  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -65.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -41.0         
Correct output: -5.4578605766  | Program output: 0.6740525704  
Correct output: -10.0587306507 | Program output: 0.6740525704  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.6740525704  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -60.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -38.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -32.0         
Correct output: -61.0452729724 | Program output: 0.6740525704  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.6740525704  
Correct output: 2.0900277855   | Program output: 0.6740525704  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.6740525704  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.6740525704  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_sub} {:instruction -82.27109565297144} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -60} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_cos in2 float_cos float_sub -82.27109565297144 float_cos in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -60 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.8451 10 60.0 2 89.3386 12 81.0 3 0.9038 9 6.1319 10 10.7328 10 8.0 2 40.5194 11 13.0 11 5.6249 11 56.0 2 51.6711 11 8.0 2 43.3418 12 61.7193 9 36.0 2 73.1985 10 1.416 9 0.2824 10 0.0778 8 11.0 2 44.2047 10 54.2033 11 2.6434 11]
Total: 961.8548000000002
Mean: 19.237097
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2570.5137240999984
Median total errors in population: 969.3858
Error averages by case: (63.316731900000555 10.149 125.61358930000019 3.581 149.30795550000022 12.189 142.34628099999983 4.461 78.7183051 10.49 66.32422959999968 10.178 69.86347950000075 10.572 72.92780060000004 3.531 94.50865079999963 11.518 69.02710750000001 11.14 80.4313124000002 11.466 116.8727586999998 3.525 109.23810340000223 10.765 76.74205640000002 3.517 111.47529349999857 11.214 111.36172810000049 11.311 99.5016189000002 3.526 130.22547719999866 9.562 64.80744959999986 10.437 83.08373670000032 10.857 63.67406510000024 8.561 74.11467019999994 3.685 101.71832019999962 10.048 111.20240439999873 11.183 85.8085985000006 10.836)
Error minima by case: (1.565 8 39.9603 1 9.3386 2 19.0 2 0.0962 8 0.4579 2 0.9413 2 0.2382 2 3.8453 2 0.8905 9 0.3751 10 11.051 2 6.6711 2 0.8608 1 0.6582 2 2.0453 2 15.7091 2 2.1274 8 0.1358 7 0.2824 9 0.0089 6 10.5783 2 29.8787 8 3.7967 10 0.6434 2)
Average genome size in population (length): 56.465
Average program size in population (points): 57.465
Average percent parens in population: 0.018
Minimum age in population: 84.65395146353063
Maximum age in population: 89.88034323956396
Average age in population: 87.8110788467473
Median age in population: 87.88128337498289
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.632
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.632
Total error diversity:				 0.348
Error (vector) diversity:			 0.352
Behavioral diversity:				 0.353
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 80150478
--- Timings ---
Current time: 1529616043481 milliseconds
Total Time:         199.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.9 seconds, 40.0%
Fitness Testing:     94.6 seconds, 47.4%
Report:              24.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 58669.20469999999
Test mean error for best: 29.33460
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.6740525704  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -65.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -41.0         
Correct output: -5.4578605766  | Program output: 0.6740525704  
Correct output: -10.0587306507 | Program output: 0.6740525704  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.6740525704  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -60.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -38.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -32.0         
Correct output: -61.0452729724 | Program output: 0.6740525704  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.6740525704  
Correct output: 2.0900277855   | Program output: 0.6740525704  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.6740525704  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.6740525704  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_sub} {:instruction -82.27109565297144} {:instruction float_cos} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction float_cos} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -60} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (integer_min float_sub -81.37761634098129 float_cos in2 float_cos float_sub -82.27109565297144 float_cos in2 float_cos float_yankdup float_cos -81 integer_min -50 in2 integer_swap in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -60 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.8451 10 60.0 2 89.3386 12 81.0 3 0.9038 9 6.1319 10 10.7328 10 8.0 2 40.5194 11 13.0 11 5.6249 11 56.0 2 51.6711 11 8.0 2 43.3418 12 61.7193 9 36.0 2 73.1985 10 1.416 9 0.2824 10 0.0778 8 11.0 2 44.2047 10 54.2033 11 2.6434 11]
Total: 961.8548000000002
Mean: 19.237097
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2362.6708454999975
Median total errors in population: 968.3858
Error averages by case: (54.586378700000274 10.105 115.7728227000001 3.182 139.33702290000107 12.259 132.8111253999999 4.102 71.7784647 10.637 58.02678879999988 9.886 61.38611260000037 10.261 65.58659339999998 3.262 87.01541179999988 11.232 62.33076900000003 11.112 71.92613009999991 11.405 108.34300289999986 3.177 99.66606300000178 10.689 66.37791710000005 3.126 105.88521359999865 11.05 104.75769310000022 10.695 90.46430350000007 3.134 122.3664518999992 9.738 56.41816149999963 10.083 75.16764239999978 10.721 55.060131000000055 8.736 67.08468919999993 3.39 93.61627909999976 10.205 105.19899649999894 11.165 77.6226806000006 10.732)
Error minima by case: (1.5192 8 59.0 2 39.3386 2 65.6899 2 0.0962 9 1.4579 2 0.9413 2 8.0 2 4.8453 2 0.1095 9 0.3751 11 36.949 2 1.6711 2 7.0 1 0.3418 2 0.0453 2 35.0 2 9.1274 8 0.3006 7 0.2824 10 0.0054 6 11.0 2 25.0365 8 1.7967 10 1.6434 2)
Average genome size in population (length): 55.254
Average program size in population (points): 56.254
Average percent parens in population: 0.018
Minimum age in population: 85.95982231752332
Maximum age in population: 91.41813314582409
Average age in population: 89.12484031141409
Median age in population: 89.14888899256135
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 99
Genome diversity (% unique Plush genomes):	 0.61
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.61
Total error diversity:				 0.33
Error (vector) diversity:			 0.338
Behavioral diversity:				 0.338
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 81531828
--- Timings ---
Current time: 1529616046723 milliseconds
Total Time:         202.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.2 seconds, 40.0%
Fitness Testing:     96.2 seconds, 47.4%
Report:              25.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 57630.94489999995
Test mean error for best: 28.81547
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -66.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -42.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -61.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -39.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -33.0         
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -7.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -11.0         
Correct output: 1.6433897119   | Program output: -9.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_pop})
Best program: (float_sub -81.37761634098129 float_tan in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_mod integer_min float_max integer_dec integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush float_pop)
Errors: [3.5679 10 60.0 2 88.3386 13 81.0 3 0.0962 10 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 4.6249 11 56.0 2 50.6711 10 8.0 2 44.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 5.7176 11 0.8006 10 11.0 2 44.9275 8 44.2033 11 10.6434 11]
Total: 958.2052
Mean: 19.164104
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2599.8656477999994
Median total errors in population: 965.9506000000001
Error averages by case: (66.4282130000002 10.072 125.85654050000011 3.256 145.42067850000066 12.173 140.5461077999999 4.17 80.2554834 10.746 70.66732310000009 9.593 73.69563930000028 9.907 76.10655790000008 3.323 99.04879079999981 10.807 69.63107840000004 11.143 78.32509089999995 11.396 118.52615649999989 3.275 105.88345540000213 10.574 76.77173399999998 3.237 113.75065859999837 10.833 116.40294010000018 10.039 101.01964650000014 3.265 132.29009839999932 10.142 68.22913639999919 9.558 82.73306779999959 10.716 67.21236499999986 9.073 77.83900529999995 3.473 105.3769345999997 10.543 109.46792069999887 11.164 85.40202490000064 10.501)
Error minima by case: (2.1711 8 2.9603 2 8.3386 2 23.3101 3 0.0962 9 1.4579 2 0.0587 2 1.7618 2 6.1547 2 0.8905 10 0.3751 11 18.3229 2 5.6711 2 8.0 1 0.3418 2 0.0453 2 9.6649 2 0.7535 8 0.7419 7 0.2824 9 0.0089 6 9.4317 2 17.8153 8 3.7967 10 1.0651 2)
Average genome size in population (length): 55.16
Average program size in population (points): 56.16
Average percent parens in population: 0.018
Minimum age in population: 88.03698958863914
Maximum age in population: 92.8376687081424
Average age in population: 90.50249299786174
Median age in population: 90.55584693168208
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 147
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.34
Error (vector) diversity:			 0.342
Behavioral diversity:				 0.342
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 82910828
--- Timings ---
Current time: 1529616050034 milliseconds
Total Time:         206.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.5 seconds, 40.0%
Fitness Testing:     97.7 seconds, 47.4%
Report:              25.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 57630.94489999995
Test mean error for best: 28.81547
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -66.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -42.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -61.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -39.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -33.0         
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -7.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -11.0         
Correct output: 1.6433897119   | Program output: -9.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_pop})
Best program: (float_sub -81.37761634098129 float_tan in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_dec float_dup_times float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_mod integer_min float_max integer_dec integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush float_pop)
Errors: [3.5679 10 60.0 2 88.3386 13 81.0 3 0.0962 10 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 4.6249 11 56.0 2 50.6711 10 8.0 2 44.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 5.7176 11 0.8006 10 11.0 2 44.9275 8 44.2033 11 10.6434 11]
Total: 958.2052
Mean: 19.164104
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2322.780355299998
Median total errors in population: 964.5172000000002
Error averages by case: (55.74801479999995 9.781 116.08008610000013 3.303 136.87231340000093 12.141 133.60643829999987 4.225 65.1210965 10.341 58.49819269999988 9.56 61.85355820000005 9.99 64.26012309999999 3.325 86.70664850000054 11.009 62.71612310000005 11.114 66.38205180000014 11.397 107.88251029999988 3.315 96.79286980000171 10.679 66.66380190000002 3.281 99.97607709999863 11.196 104.40754179999945 10.607 90.11764600000014 3.303 122.26786390000012 10.134 55.84083789999958 9.49 71.56241630000014 10.758 54.643713999999875 8.457 66.26211389999995 3.445 94.27624240000056 10.632 96.94750259999923 11.137 74.05257090000062 10.622)
Error minima by case: (1.5192 7 60.0 2 0.6614 2 62.4921 3 0.0962 9 0.4579 2 0.9413 2 7.7618 2 4.1547 2 0.8905 9 0.3751 9 8.7511 2 1.6711 2 3.6629 2 0.3418 2 0.0453 2 0.0931 2 8.1274 8 0.09 7 0.2824 9 0.0089 6 10.4317 2 24.1213 8 0.2033 9 0.8205 2)
Average genome size in population (length): 58.615
Average program size in population (points): 59.615
Average percent parens in population: 0.017
Minimum age in population: 89.32500780497944
Maximum age in population: 94.11545233405073
Average age in population: 91.95665896929053
Median age in population: 91.99138246025505
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.345
Error (vector) diversity:			 0.35
Behavioral diversity:				 0.35
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 84376203
--- Timings ---
Current time: 1529616053366 milliseconds
Total Time:         209.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.8 seconds, 40.0%
Fitness Testing:     99.3 seconds, 47.4%
Report:              26.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 58860.84960000004
Test mean error for best: 29.43042
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.5806568729  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -51.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: 0.5806568729  
Correct output: -10.0587306507 | Program output: 0.5806568729  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.5806568729  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -51.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: 0.5806568729  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.5806568729  
Correct output: 2.0900277855   | Program output: 0.5806568729  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.5806568729  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.5806568729  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_min} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_min integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.9385 10 60.0 2 103.3386 12 81.0 3 9.0962 10 6.0385 10 10.6394 9 8.0 2 40.426 11 13.0 11 14.6249 12 56.0 2 38.6711 11 8.0 2 15.3418 12 61.6259 10 36.0 2 73.2919 11 1.5094 10 0.2824 10 0.1712 7 11.0 2 44.2981 11 54.2033 11 2.6434 11]
Total: 956.1406000000003
Mean: 19.122812
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2189.497956600002
Median total errors in population: 963.5583000000001
Error averages by case: (48.21927579999969 9.795 110.70112750000017 3.21 136.47116060000099 12.11 128.4487659999999 4.11 60.23799360000001 10.194 51.66934999999974 9.692 55.12140779999972 10.086 58.30280389999999 3.147 80.96461170000065 11.134 54.399217100000044 11.114 62.20237610000048 11.394 102.62114869999984 3.199 94.86843750000202 10.719 60.53198790000006 3.15 92.90449419999878 11.087 98.700483499999 10.653 84.66653590000008 3.162 116.3175576000001 10.14 49.12931159999951 9.548 69.2634037999998 10.723 47.97056059999988 8.232 59.783093099999974 3.255 87.62957180000086 10.441 94.59398789999915 11.152 71.78629240000062 10.546)
Error minima by case: (0.4808 7 60.0 2 18.3386 2 66.6899 3 0.0962 9 0.4579 2 0.9413 2 8.0 2 5.1547 2 0.1095 9 0.3751 9 37.949 2 5.6711 2 8.0 1 1.6582 2 5.9547 2 36.0 2 9.1274 8 0.4152 7 0.2824 9 0.0132 6 4.0426 2 2.1047 8 2.2033 10 0.0314 2)
Average genome size in population (length): 59.292
Average program size in population (points): 60.292
Average percent parens in population: 0.017
Minimum age in population: 90.56108153184763
Maximum age in population: 95.98057359258
Average age in population: 93.34802499078864
Median age in population: 93.37061730264107
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 68
Genome diversity (% unique Plush genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 68
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.348
Error (vector) diversity:			 0.354
Behavioral diversity:				 0.354
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 85858503
--- Timings ---
Current time: 1529616056763 milliseconds
Total Time:         212.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.1 seconds, 40.0%
Fitness Testing:    100.9 seconds, 47.4%
Report:              26.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 58151.45789999994
Test mean error for best: 29.07573
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -65.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -41.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -60.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -38.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -32.0         
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_tan} {:instruction float_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 float_tan float_stackdepth integer_min integer_min integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max float_dup_times integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_max integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 89.3386 12 81.0 3 0.9038 9 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 5.6249 11 56.0 2 51.6711 11 8.0 2 43.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 0.2824 10 0.8006 10 11.0 2 44.9275 8 54.2033 11 2.6434 11]
Total: 955.5776000000001
Mean: 19.111551
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2298.3851181999953
Median total errors in population: 961.9535000000001
Error averages by case: (55.14798799999943 10.119 116.11815550000017 3.201 137.61755710000116 12.166 131.79648749999987 4.109 60.74514000000001 10.047 57.69474279999998 9.925 61.58713729999959 10.07 64.84712029999999 3.169 87.30562810000038 11.173 61.73550320000006 11.163 62.947072500000736 11.348 108.77136409999984 3.211 97.64480490000197 10.807 67.12672150000004 3.167 94.98621359999872 11.283 105.88057419999842 9.893 90.75224740000012 3.199 122.39192629999948 10.213 56.15273109999938 9.569 65.49211829999946 10.584 54.96843459999962 8.376 66.50044829999996 3.301 93.15264930000093 10.384 96.62588109999895 11.152 68.08947120000065 10.678)
Error minima by case: (1.5192 7 60.0 2 8.3386 2 64.7192 3 0.0962 9 0.4579 2 1.9413 2 8.0 2 7.8453 2 0.8905 9 0.3751 11 10.9782 2 4.6711 2 5.89 1 0.3418 2 1.0453 2 2.3202 2 7.1274 8 0.2589 7 0.2824 10 0.0089 6 11.0 2 5.1213 8 1.7967 10 0.6434 2)
Average genome size in population (length): 57.904
Average program size in population (points): 58.904
Average percent parens in population: 0.017
Minimum age in population: 92.30566272518266
Maximum age in population: 97.03792195735106
Average age in population: 94.75358591257636
Median age in population: 94.73923520236401
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 125
Genome diversity (% unique Plush genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 125
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.283
Error (vector) diversity:			 0.287
Behavioral diversity:				 0.287
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 87306103
--- Timings ---
Current time: 1529616060080 milliseconds
Total Time:         216.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.4 seconds, 40.0%
Fitness Testing:    102.5 seconds, 47.4%
Report:              27.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 58808.45459999993
Test mean error for best: 29.40423
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.951261046   
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -51.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: 0.951261046   
Correct output: -10.0587306507 | Program output: 0.951261046   
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.951261046   
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -51.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: 0.951261046   
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.951261046   
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_add} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_min} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_add float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_min integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.5679 9 60.0 2 103.3386 12 81.0 3 9.0962 10 6.4091 9 11.01 10 8.0 2 40.7966 11 13.0 11 14.6249 12 56.0 2 38.6711 11 8.0 2 15.3418 12 61.9965 11 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 43.9275 11 54.2033 11 2.6434 11]
Total: 952.1688
Mean: 19.043377
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2470.9541195999936
Median total errors in population: 961.8548000000002
Error averages by case: (57.818361899999495 10.231 122.25442100000022 3.532 149.27253640000038 12.354 138.65718999999982 4.394 72.6848295 10.179 61.13655289999994 10.032 64.51193219999965 9.894 71.1903863 3.488 89.39546340000035 11.132 65.80987520000005 11.167 75.30645070000033 11.371 113.22430619999983 3.549 108.50114760000238 10.832 73.25275300000006 3.464 106.06202479999851 11.323 106.57848589999857 9.736 95.96505460000016 3.534 125.12369949999953 10.254 58.707286999999425 9.479 80.99620079999976 10.725 57.57171829999965 8.625 72.15142389999994 3.657 97.03768810000086 10.286 109.06355829999859 11.17 83.58077210000063 10.692)
Error minima by case: (1.5192 8 1.9603 2 11.3386 2 24.3101 3 0.0962 9 0.4579 2 0.9413 2 2.7618 2 1.8453 2 0.8905 10 0.3751 10 36.949 2 4.6711 2 8.0 1 0.3418 2 0.9547 2 36.0 2 9.1274 8 0.09 7 0.2824 9 0.0126 6 10.4317 2 24.1213 8 2.2033 9 0.3566 2)
Average genome size in population (length): 60.125
Average program size in population (points): 61.125
Average percent parens in population: 0.017
Minimum age in population: 93.95632899406002
Maximum age in population: 98.2489903841784
Average age in population: 96.13504547826587
Median age in population: 96.15571144029091
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 89
Genome diversity (% unique Plush genomes):	 0.64
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.64
Total error diversity:				 0.319
Error (vector) diversity:			 0.327
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 88809228
--- Timings ---
Current time: 1529616063465 milliseconds
Total Time:         219.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        87.7 seconds, 39.9%
Fitness Testing:    104.1 seconds, 47.5%
Report:              27.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 58767.02809999994
Test mean error for best: 29.38351
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.951261046   
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -51.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: 0.951261046   
Correct output: -10.0587306507 | Program output: 0.951261046   
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.951261046   
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -51.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: 0.951261046   
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.951261046   
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction integer_shove} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_min} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 float_cos integer_shove integer_swap -81 integer_min -50 in2 integer_min integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.5679 9 60.0 2 103.3386 12 81.0 3 9.0962 10 6.4091 9 11.01 10 8.0 2 40.7966 11 13.0 11 14.6249 12 56.0 2 38.6711 11 8.0 2 15.3418 12 61.9965 11 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 43.9275 11 54.2033 11 2.6434 11]
Total: 952.1688
Mean: 19.043377
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2672.399982899994
Median total errors in population: 963.4115999999999
Error averages by case: (70.2716163999999 10.202 130.7667365000002 3.551 153.04060460000042 12.414 146.76408039999987 4.435 78.10073329999999 10.508 72.69894189999954 9.819 76.21343389999981 9.27 80.37895590000007 3.505 100.87952190000087 11.108 76.15350760000003 11.202 78.58391990000027 11.461 122.3559973999998 3.54 111.33376300000205 10.736 82.46459409999999 3.511 109.14064319999879 11.132 118.28626179999863 9.765 104.97090420000019 3.525 135.48973479999998 10.237 69.9904878999998 9.431 85.15923340000064 10.952 68.89681959999984 8.922 81.32701659999996 3.665 108.09612510000072 10.11 108.30233509999891 11.164 87.98901440000063 10.58)
Error minima by case: (0.5192 8 59.4193 2 6.3386 2 65.6899 2 0.0962 9 0.4579 2 0.9413 2 8.0 2 1.1547 2 0.1095 9 0.6249 10 36.949 2 4.6711 2 7.4193 2 0.3418 2 5.9547 2 35.4193 2 8.1274 8 0.6879 7 0.2824 10 0.0157 6 0.4317 2 2.8787 7 1.2033 9 0.3566 2)
Average genome size in population (length): 63.535
Average program size in population (points): 64.535
Average percent parens in population: 0.016
Minimum age in population: 95.35468587567458
Maximum age in population: 99.45485449091562
Average age in population: 97.61861385171476
Median age in population: 97.62865010920153
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.373
Error (vector) diversity:			 0.385
Behavioral diversity:				 0.386
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 90397603
--- Timings ---
Current time: 1529616066901 milliseconds
Total Time:         222.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.0 seconds, 39.9%
Fitness Testing:    105.8 seconds, 47.5%
Report:              28.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 58767.02809999994
Test mean error for best: 29.38351
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: 0.951261046   
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -51.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: 0.951261046   
Correct output: -10.0587306507 | Program output: 0.951261046   
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: 0.951261046   
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -51.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: 0.951261046   
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: 0.951261046   
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction integer_shove} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_min} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 float_cos integer_shove integer_swap -81 integer_min -50 in2 integer_min integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_max integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [2.5679 9 60.0 2 103.3386 12 81.0 3 9.0962 10 6.4091 9 11.01 10 8.0 2 40.7966 11 13.0 11 14.6249 12 56.0 2 38.6711 11 8.0 2 15.3418 12 61.9965 11 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 43.9275 11 54.2033 11 2.6434 11]
Total: 952.1688
Mean: 19.043377
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2721.689760900001
Median total errors in population: 962.6039999999999
Error averages by case: (72.17432769999986 10.193 133.44810970000023 3.783 156.00433909999975 12.306 148.92775519999984 4.683 81.02652519999998 10.617 74.57183949999963 9.639 77.87410869999987 8.663 81.67466760000002 3.686 101.39066200000092 10.992 77.21228400000003 11.181 83.48044600000007 11.527 123.8890467999998 3.782 112.7477222000022 10.616 84.95024280000003 3.736 109.59698499999865 11.051 118.20751119999834 9.556 106.49997330000019 3.734 137.36299740000007 10.402 72.56037349999997 9.314 88.49039600000081 10.984 71.55371810000008 9.079 82.37040049999995 3.879 109.80261570000098 9.979 109.4487766999987 11.156 91.31693700000064 10.569)
Error minima by case: (2.2669 8 1.9603 2 6.3386 2 24.3101 3 0.0962 9 0.4579 2 1.9413 2 0.7618 2 0.8453 2 1.1095 10 0.6249 10 21.8028 2 0.3289 2 8.0 2 0.3418 2 0.0453 2 13.1448 2 2.7264 8 0.8377 7 0.2824 9 0.0083 6 10.9513 2 20.8787 8 1.2033 10 0.3566 2)
Average genome size in population (length): 66.198
Average program size in population (points): 67.198
Average percent parens in population: 0.015
Minimum age in population: 96.35468587567458
Maximum age in population: 100.8550127732274
Average age in population: 98.99394271877115
Median age in population: 99.05425297770412
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.354
Error (vector) diversity:			 0.37
Behavioral diversity:				 0.37
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 92052578
--- Timings ---
Current time: 1529616070351 milliseconds
Total Time:         226.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        90.3 seconds, 39.9%
Fitness Testing:    107.5 seconds, 47.5%
Report:              28.5 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 58371.81139999993
Test mean error for best: 29.18591
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -52.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -52.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -5.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -2.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -2.0          
Correct output: 1.6433897119   | Program output: -2.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_min} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_pop})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_min integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_add integer_mod integer_min float_max integer_mod integer_min float_max integer_dec integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush float_pop)
Errors: [3.5679 10 60.0 2 102.3386 12 81.0 3 10.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 13.6249 11 56.0 2 37.6711 11 8.0 2 16.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 0.7176 11 0.8006 10 11.0 2 44.9275 8 53.2033 11 3.6434 12]
Total: 949.2052
Mean: 18.984104
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2426.520080600005
Median total errors in population: 963.4115999999999
Error averages by case: (57.585863299999744 10.077 122.0318818000002 3.507 150.94540010000026 12.299 139.1164361999998 4.418 72.92651269999998 10.559 60.07012929999962 9.753 63.450764300000195 8.982 69.77713130000001 3.46 87.86850850000086 11.063 64.40800770000004 11.154 74.49313610000027 11.657 112.63577969999987 3.527 103.45477910000189 10.756 72.05197380000004 3.49 97.27238149999886 11.222 105.80611459999847 9.855 94.99591330000017 3.506 124.17753860000005 10.427 57.61425640000023 9.467 77.09519300000028 10.835 56.26139629999981 8.572 70.66916469999995 3.623 96.33453810000087 10.297 101.32537549999886 11.106 79.87890470000062 10.661)
Error minima by case: (2.1171 8 60.0 2 7.6614 2 54.9493 2 0.0962 9 0.4579 2 1.9413 2 7.9513 2 0.8453 2 1.8905 10 1.3751 10 1.2084 2 4.6711 2 1.1392 1 0.3418 2 2.0453 2 4.7091 2 0.8726 8 0.3279 8 0.2824 10 3.0E-4 6 8.2147 2 6.0138 8 1.2033 10 0.3566 2)
Average genome size in population (length): 66.205
Average program size in population (points): 67.205
Average percent parens in population: 0.015
Minimum age in population: 97.52264548479936
Maximum age in population: 102.2088579962004
Average age in population: 100.382516288061
Median age in population: 100.4021326532141
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.722
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.722
Total error diversity:				 0.413
Error (vector) diversity:			 0.432
Behavioral diversity:				 0.432
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 93707703
--- Timings ---
Current time: 1529616073828 milliseconds
Total Time:         229.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.6 seconds, 39.9%
Fitness Testing:    109.1 seconds, 47.5%
Report:              29.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 58332.38489999994
Test mean error for best: 29.16619
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -52.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -52.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -5.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -2.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -2.0          
Correct output: 1.6433897119   | Program output: -2.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction integer_shove} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_min} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 float_cos integer_shove integer_swap -81 integer_min -50 in2 integer_min integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_max integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 102.3386 12 81.0 3 10.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 13.6249 11 56.0 2 37.6711 11 8.0 2 16.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 0.7176 11 0.8006 10 11.0 2 44.9275 8 53.2033 11 3.6434 12]
Total: 949.2052
Mean: 18.984104
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2095.7907079999977
Median total errors in population: 958.2052
Error averages by case: (45.55606779999966 9.929 108.28712930000009 3.184 140.28232980000104 11.933 126.0389264999999 4.115 58.05341109999997 10.504 48.31977799999996 9.632 51.778602700000064 9.303 56.192624199999976 3.16 76.70571020000062 10.929 52.256928900000034 11.102 61.455062900000655 11.757 100.25839409999992 3.218 87.1006495000011 10.668 58.97226410000005 3.176 77.61597339999955 11.136 94.6341975999991 10.054 82.15469640000006 3.198 112.9795802 10.304 46.19396010000027 9.532 61.57232309999979 10.68 45.01762169999981 7.952 57.347003099999974 3.284 84.56589730000037 10.674 87.3256783999993 10.998 64.15789760000064 10.546)
Error minima by case: (0.4848 8 1.9603 2 15.3386 2 24.3101 2 0.0962 9 0.4579 2 0.9413 2 8.0 2 0.8453 2 0.8905 10 0.6249 10 36.949 2 4.6711 2 7.0 1 0.3418 2 1.9547 2 35.0 2 8.1274 8 0.1388 7 0.2824 10 0.0098 6 11.0 2 29.1213 6 2.2033 10 0.6434 2)
Average genome size in population (length): 65.538
Average program size in population (points): 66.538
Average percent parens in population: 0.015
Minimum age in population: 98.71672879509504
Maximum age in population: 103.6883217240296
Average age in population: 101.5802315990985
Median age in population: 101.6017157298645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.362
Error (vector) diversity:			 0.372
Behavioral diversity:				 0.372
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 95346153
--- Timings ---
Current time: 1529616077326 milliseconds
Total Time:         233.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.9 seconds, 39.8%
Fitness Testing:    110.9 seconds, 47.5%
Report:              29.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 58065.984299999946
Test mean error for best: 29.03299
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -54.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -54.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -54.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -7.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -4.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -4.0          
Correct output: 1.6433897119   | Program output: -4.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction integer_shove} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_min} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_pop})
Best program: (float_sub -81.37761634098129 float_tan in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 float_cos integer_shove integer_swap -81 integer_min -50 in2 integer_min integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap integer_dec float_dup_times integer_mod integer_min float_max integer_dec float_dup_times float_yank float_dup_times float_dec integer_mod integer_min float_max integer_dec float_dup_times float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_mod integer_min float_max integer_dec integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush float_pop)
Errors: [3.5679 10 60.0 2 100.3386 11 81.0 3 12.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 11.6249 11 56.0 2 35.6711 11 8.0 2 18.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 2.7176 11 0.8006 10 11.0 2 44.9275 8 51.2033 11 5.6434 11]
Total: 947.2052
Mean: 18.944103
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2644.102939300001
Median total errors in population: 959.9764
Error averages by case: (67.30918279999995 9.765 130.10827320000018 3.347 160.467958199999 12.027 147.40359179999987 4.284 82.34922279999998 10.635 70.23742509999943 9.609 73.60924049999987 9.847 78.92642600000009 3.341 97.98424280000113 11.12 73.0471894 11.205 84.5988558999996 11.895 122.50456779999983 3.386 106.89028910000222 10.809 81.91282999999996 3.342 98.56155539999855 11.257 115.3137029999983 10.637 105.30394910000017 3.355 134.3442140000004 9.999 68.49658470000023 9.547 84.04694799999963 10.686 67.4195263999994 7.58 80.39289069999994 3.471 105.68394780000118 11.007 106.99879139999837 11.066 86.31653340000064 10.658)
Error minima by case: (1.5679 8 60.0 2 5.6614 2 65.6899 3 0.0962 9 0.4579 2 3.0587 2 8.0 2 6.1547 2 1.1095 9 0.6249 10 18.949 2 0.3289 2 8.0 1 0.3418 2 0.0453 2 10.2909 2 0.1274 8 0.1388 7 0.2824 9 0.0623 6 11.0 2 4.0897 8 1.2033 10 1.6434 2)
Average genome size in population (length): 65.186
Average program size in population (points): 66.186
Average percent parens in population: 0.015
Minimum age in population: 99.71672879509504
Maximum age in population: 104.8380873554462
Average age in population: 102.994025798566
Median age in population: 103.0410200301685
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 45
Genome diversity (% unique Plush genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 45
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.336
Error (vector) diversity:			 0.352
Behavioral diversity:				 0.352
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 96975828
--- Timings ---
Current time: 1529616080910 milliseconds
Total Time:         236.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        94.2 seconds, 39.8%
Fitness Testing:    112.6 seconds, 47.5%
Report:              30.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 58065.984299999946
Test mean error for best: 29.03299
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -54.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -54.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -54.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -7.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -4.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -4.0          
Correct output: 1.6433897119   | Program output: -4.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction integer_shove} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_min} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_pop})
Best program: (float_sub -81.37761634098129 float_tan in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 float_cos integer_shove integer_swap -81 integer_min -50 in2 integer_min integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap integer_dec float_dup_times integer_mod integer_min float_max integer_dec float_dup_times float_yank float_dup_times float_dec integer_mod integer_min float_max integer_dec float_dup_times float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_mod integer_min float_max integer_dec integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush float_pop)
Errors: [3.5679 10 60.0 2 100.3386 11 81.0 3 12.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 11.6249 11 56.0 2 35.6711 11 8.0 2 18.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 2.7176 11 0.8006 10 11.0 2 44.9275 8 51.2033 11 5.6434 11]
Total: 947.2052
Mean: 18.944103
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2227.197308800002
Median total errors in population: 957.3742000000002
Error averages by case: (50.78122429999999 9.535 113.40341210000014 3.328 146.80615950000112 12.022 130.89200809999988 4.281 64.56081059999997 10.629 53.58234059999956 9.359 56.92471430000016 9.937 61.627563599999974 3.333 81.34332200000082 10.982 57.76681710000003 11.122 69.49723740000054 11.907 104.76524069999988 3.364 89.9606298000009 10.837 64.13755050000006 3.331 79.74905200000035 11.369 98.8696096999989 10.802 86.94422500000009 3.331 117.53187190000115 9.713 50.77452470000035 9.394 68.87761919999973 10.647 49.74068779999972 7.211 62.622271499999975 3.487 89.1830142000006 11.087 92.95979139999919 11.016 71.14761080000059 10.724)
Error minima by case: (1.6167 8 57.2575 2 6.6614 2 51.9871 3 0.9038 9 0.5421 2 3.0587 2 4.5279 2 6.8453 2 1.1095 9 2.6249 10 1.7539 2 5.3289 2 6.8421 2 0.6582 2 2.0453 2 10.2909 2 0.1274 8 0.1875 7 0.2824 9 0.0216 6 8.1942 2 6.1323 8 2.2033 10 0.3566 2)
Average genome size in population (length): 65.112
Average program size in population (points): 66.112
Average percent parens in population: 0.015
Minimum age in population: 102.1670871702983
Maximum age in population: 106.3926166610975
Average age in population: 104.3551759103054
Median age in population: 104.358317767237
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.693
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.693
Total error diversity:				 0.29
Error (vector) diversity:			 0.303
Behavioral diversity:				 0.303
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 98603628
--- Timings ---
Current time: 1529616084624 milliseconds
Total Time:         240.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.5 seconds, 39.7%
Fitness Testing:    114.4 seconds, 47.6%
Report:              30.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 57827.53819999994
Test mean error for best: 28.91377
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -52.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -52.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -5.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -8.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -13.0         
Correct output: 1.6433897119   | Program output: -4.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_pop})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_add integer_mod integer_min integer_dup_times integer_mod integer_div float_max integer_dec integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush float_pop)
Errors: [3.5679 10 60.0 2 102.3386 12 81.0 3 10.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 13.6249 11 56.0 2 37.6711 11 8.0 2 16.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 6.7176 11 0.8006 10 11.0 2 44.9275 8 42.2033 11 5.6434 11]
Total: 945.2052
Mean: 18.904104
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2619.7943850999995
Median total errors in population: 960.1127000000001
Error averages by case: (67.19975170000055 9.67 129.79214280000022 3.517 160.70742629999972 12.039 146.6551506999999 4.44 79.67516539999997 10.728 68.78368679999895 9.502 72.86563310000044 9.663 78.14025410000002 3.48 97.39696430000096 11.11 71.59725710000005 11.147 84.67943720000001 11.844 120.91898429999978 3.539 104.72770370000207 10.881 81.42038670000002 3.532 95.08699879999904 11.412 115.06316209999824 10.625 103.59291870000021 3.53 133.0206333000011 9.87 66.28103770000027 9.314 85.00727840000019 10.79 65.21692699999964 7.69 79.09968529999996 3.65 104.87881380000108 10.826 106.19266179999855 11.027 87.18332400000065 10.785)
Error minima by case: (1.5679 8 60.0 2 7.6614 2 66.6899 3 0.9038 9 0.4579 2 1.0587 2 8.0 2 6.8453 2 0.8905 9 0.3751 10 18.949 2 5.6711 2 8.0 2 1.6582 2 7.0453 2 10.2909 2 0.1274 9 0.1388 7 0.2824 10 0.0248 6 11.0 2 6.1213 8 1.2033 10 1.6434 2)
Average genome size in population (length): 66.106
Average program size in population (points): 67.106
Average percent parens in population: 0.015
Minimum age in population: 103.208060289869
Maximum age in population: 107.7078902937296
Average age in population: 105.7768328395612
Median age in population: 105.8177210208739
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.312
Error (vector) diversity:			 0.326
Behavioral diversity:				 0.326
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 100256278
--- Timings ---
Current time: 1529616088115 milliseconds
Total Time:         244.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.8 seconds, 39.7%
Fitness Testing:    116.1 seconds, 47.6%
Report:              31.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 57788.11169999994
Test mean error for best: 28.89406
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -52.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -52.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -5.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -8.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -13.0         
Correct output: 1.6433897119   | Program output: -4.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_dup_times} {:instruction integer_min} {:instruction -51} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_pop})
Best program: (float_sub -81.37761634098129 float_tan in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 float_yankdup integer_swap -81 integer_min -50 in2 float_dup_times integer_min -51 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_mod integer_min float_max integer_mod integer_min float_max integer_dec integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush float_pop)
Errors: [3.5679 10 60.0 2 102.3386 12 81.0 3 10.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 13.6249 11 56.0 2 37.6711 11 8.0 2 16.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 6.7176 11 0.8006 10 11.0 2 44.9275 8 42.2033 11 5.6434 11]
Total: 945.2052
Mean: 18.904104
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2414.619330499996
Median total errors in population: 963.919
Error averages by case: (60.33674630000033 9.945 120.40042690000014 3.381 151.32875429999987 11.904 137.79201439999989 4.31 72.36351219999997 10.924 62.55127029999914 9.436 66.14753240000032 8.721 67.5131024 3.346 90.74301830000101 11.008 65.37893570000003 11.192 76.9511922000001 11.673 111.99995459999985 3.378 96.0085785000016 10.762 70.62152520000002 3.365 87.73163159999915 11.29 108.59270169999849 9.923 94.14467520000012 3.362 126.36784700000116 10.126 60.18481600000035 9.167 75.41968170000104 11.001 59.02518899999998 8.625 68.77454779999997 3.463 98.49029820000104 10.211 96.02722289999882 11.027 77.41215570000064 10.772)
Error minima by case: (0.4808 8 54.182 2 3.3386 2 27.6899 3 4.0962 9 1.4579 2 7.0587 2 8.0 2 5.8453 2 0.1095 9 3.3751 10 4.8294 2 5.6711 2 8.0 1 1.6582 2 0.9547 2 9.1725 2 0.8726 9 0.1388 7 0.2824 9 0.1249 6 0.4317 2 8.1213 8 0.2033 9 0.3566 2)
Average genome size in population (length): 68.318
Average program size in population (points): 69.318
Average percent parens in population: 0.015
Minimum age in population: 104.208060289869
Maximum age in population: 109.131585362819
Average age in population: 107.1858076905295
Median age in population: 107.2149625484673
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.341
Error (vector) diversity:			 0.359
Behavioral diversity:				 0.359
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 101964253
--- Timings ---
Current time: 1529616091677 milliseconds
Total Time:         247.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.1 seconds, 39.6%
Fitness Testing:    117.9 seconds, 47.6%
Report:              31.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 57593.10249999998
Test mean error for best: 28.79655
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -54.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -54.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -54.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -7.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -10.0         
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -15.0         
Correct output: 1.6433897119   | Program output: -6.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_mult} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dec} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_pop})
Best program: (float_sub -81.37761634098129 float_tan in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 integer_mult integer_min -50 in2 integer_swap float_stackdepth float_yank in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_max integer_dec float_dup_times float_yank integer_dec float_max integer_dec integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush float_pop)
Errors: [3.5679 10 60.0 2 100.3386 11 81.0 3 12.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 11.6249 11 56.0 2 35.6711 11 8.0 2 18.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 8.7176 11 0.8006 10 11.0 2 44.9275 8 40.2033 10 7.6434 11]
Total: 943.2052
Mean: 18.864103
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2416.5483342000016
Median total errors in population: 953.6039999999999
Error averages by case: (61.71686800000042 10.221 120.8754636000001 3.342 149.8000227000002 11.834 138.30669839999987 4.244 68.77008859999998 11.092 62.79900569999901 9.355 66.71878170000039 7.581 70.3515778 3.358 92.0140570000009 10.987 68.06263350000005 11.177 73.36170000000041 11.541 112.97712219999991 3.326 93.27970260000147 10.784 72.80411250000002 3.332 82.17854779999949 11.33 110.0779236999983 9.065 95.3314667000001 3.331 128.0286245000012 10.336 61.50051700000029 8.848 73.46481860000134 11.133 60.303525300000395 9.677 71.43018409999999 3.487 99.4940760000011 9.358 96.47256439999877 11.051 75.75725180000059 10.881)
Error minima by case: (1.4848 8 59.0 2 7.6614 2 67.6899 2 2.0962 9 0.4579 2 6.0587 2 7.0 2 3.8453 2 0.1095 9 0.3751 9 18.949 2 3.6711 2 7.0 1 0.3418 2 4.0453 1 10.2909 2 0.1274 7 0.0557 7 0.2824 9 0.0216 6 10.0 1 21.1213 8 0.2033 9 0.6434 2)
Average genome size in population (length): 72.083
Average program size in population (points): 73.083
Average percent parens in population: 0.014
Minimum age in population: 105.2315665412054
Maximum age in population: 110.490828525834
Average age in population: 108.6245440837541
Median age in population: 108.6737845928218
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.333
Error (vector) diversity:			 0.344
Behavioral diversity:				 0.344
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 103766345
--- Timings ---
Current time: 1529616095301 milliseconds
Total Time:         251.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.4 seconds, 39.6%
Fitness Testing:    119.7 seconds, 47.7%
Report:              32.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 57581.70539999994
Test mean error for best: 28.79085
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -54.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -54.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -54.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -7.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -10.0         
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -15.0         
Correct output: 1.6433897119   | Program output: -6.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_mod} {:instruction tagged_655} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_pop})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap integer_dup integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_add integer_mod integer_min integer_dup_times integer_mod integer_div float_max integer_dec integer_dec float_dup_times float_dec integer_mod tagged_655 float_max integer_dec integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush float_pop)
Errors: [3.5679 10 60.0 2 100.3386 11 81.0 3 12.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 11.6249 11 56.0 2 35.6711 11 8.0 2 18.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 8.7176 11 0.8006 10 11.0 2 44.9275 8 40.2033 10 7.6434 11]
Total: 943.2052
Mean: 18.864103
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2786.604550800004
Median total errors in population: 953.6039999999999
Error averages by case: (76.48171989999965 10.355 133.88228720000012 3.502 168.42266339999892 11.846 150.06334719999984 4.399 87.89396139999997 11.14 77.4210757999999 9.465 81.37042279999945 7.404 82.58408080000008 3.436 106.88631210000092 11.074 81.121787 11.233 90.72702779999955 11.515 126.25343879999988 3.468 112.9184254000021 10.913 85.74681569999994 3.463 99.11747059999877 11.495 125.04217169999812 8.973 108.85577330000011 3.469 140.90460650000054 10.451 75.75152700000034 8.841 88.6423565000013 11.11 74.49771550000064 10.069 83.92506719999999 3.595 113.36123160000143 9.169 112.06594159999828 11.066 90.3643240000006 10.852)
Error minima by case: (0.5192 9 23.9603 2 13.3386 2 3.3101 2 0.9038 9 0.4579 2 4.0587 2 4.5279 2 0.8453 2 0.1095 9 0.6249 10 7.051 2 4.6711 2 7.0 1 0.6582 2 1.0453 2 11.2909 2 0.8726 9 0.1875 7 0.2824 9 0.1136 6 0.4317 2 8.1213 8 0.2033 9 1.6434 2)
Average genome size in population (length): 74.364
Average program size in population (points): 75.364
Average percent parens in population: 0.013
Minimum age in population: 107.173484830669
Maximum age in population: 112.2252756220642
Average age in population: 109.9289973401948
Median age in population: 109.951480226941
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.334
Error (vector) diversity:			 0.36
Behavioral diversity:				 0.361
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 105625496
--- Timings ---
Current time: 1529616098946 milliseconds
Total Time:         254.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.7 seconds, 39.5%
Fitness Testing:    121.6 seconds, 47.7%
Report:              32.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 57581.70539999994
Test mean error for best: 28.79085
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -54.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -54.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -54.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -7.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -10.0         
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -15.0         
Correct output: 1.6433897119   | Program output: -6.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_mod} {:instruction integer_min} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_pop})
Best program: (integer_pop -81.37761634098129 float_tan in2 integer_dec float_yankdup float_dup_times -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 integer_min -50 in2 float_dup_items integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_swap float_max integer_dec float_dup_times float_yank float_dup_times integer_max integer_mod integer_min float_max integer_dec float_dup_times float_dup_times integer_shove integer_swap float_max integer_mod integer_min float_max integer_mod integer_min float_max integer_dec integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush float_pop)
Errors: [3.5679 10 60.0 2 100.3386 11 81.0 3 12.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 11.6249 11 56.0 2 35.6711 11 8.0 2 18.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 8.7176 11 0.8006 10 11.0 2 44.9275 8 40.2033 10 7.6434 11]
Total: 943.2052
Mean: 18.864103
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2325.823415800004
Median total errors in population: 956.1859000000002
Error averages by case: (59.09733740000022 10.314 118.2628398000001 3.318 146.6339232000004 11.703 135.72274639999992 4.233 65.45982559999997 11.074 59.97158729999928 9.344 63.827933700000465 7.219 65.19980369999998 3.31 88.88146120000094 10.919 62.226493200000036 11.141 69.6427173000005 11.503 110.3006446999999 3.334 89.69463890000145 10.741 68.64472390000005 3.268 79.1238152999996 11.352 106.9191112999986 8.754 92.25733980000015 3.297 125.3744733000012 10.426 58.855547400000326 8.783 69.68116320000117 11.074 57.656688400000434 10.066 66.36985589999996 3.458 96.87607620000114 9.113 88.4902528999991 10.971 71.29741580000065 10.64)
Error minima by case: (1.6167 9 2.9603 2 8.6614 2 15.6899 3 0.9038 9 0.4579 2 1.0587 2 7.7618 2 5.8453 2 0.1095 9 1.6249 11 29.5513 2 3.6711 2 8.0 1 3.3418 2 0.0453 2 20.8932 2 7.1274 9 0.1875 8 0.2824 9 0.1507 6 10.4317 2 12.1213 8 0.2033 9 0.6434 2)
Average genome size in population (length): 74.621
Average program size in population (points): 75.621
Average percent parens in population: 0.013
Minimum age in population: 108.8362714520382
Maximum age in population: 113.7216870971899
Average age in population: 111.3194543654924
Median age in population: 111.3374930085647
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.37
Error (vector) diversity:			 0.393
Behavioral diversity:				 0.394
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 107491100
--- Timings ---
Current time: 1529616102678 milliseconds
Total Time:         258.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.0 seconds, 39.4%
Fitness Testing:    123.5 seconds, 47.7%
Report:              33.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 57581.70539999994
Test mean error for best: 28.79085
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -54.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -54.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -54.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -7.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -10.0         
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -15.0         
Correct output: 1.6433897119   | Program output: -6.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_dup} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -75} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction integer_div} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_mod} {:instruction tagged_655} {:instruction float_max} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_dec} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction float_pop})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap integer_dup integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -75 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_add integer_mod integer_min integer_dup_times integer_mod integer_div float_max integer_dec integer_dec float_dup_times float_dec integer_mod tagged_655 float_max integer_dec integer_dec float_dup_times float_dec float_yank in1 float_max float_frominteger print_float float_flush float_pop)
Errors: [3.5679 10 60.0 2 100.3386 11 81.0 3 12.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 11.6249 11 56.0 2 35.6711 11 8.0 2 18.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 8.7176 11 0.8006 10 11.0 2 44.9275 8 40.2033 10 7.6434 11]
Total: 943.2052
Mean: 18.864103
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2722.6779355000044
Median total errors in population: 953.2052
Error averages by case: (72.38559040000001 10.368 130.3549678000001 3.373 168.36123889999877 11.755 147.95274869999992 4.276 89.08796319999998 11.17 73.93184069999951 9.387 77.78079529999987 7.26 78.80602660000004 3.401 103.14053820000102 10.928 76.34830639999997 11.207 91.63763139999983 11.506 122.8997941999999 3.339 113.30132890000233 10.757 80.84033929999997 3.351 99.90647389999856 11.285 121.18796739999787 8.823 105.0828187000001 3.344 137.36125360000074 10.452 71.71081970000037 8.801 90.78597350000175 11.154 70.67875360000075 10.112 80.03235519999996 3.557 110.2665711000013 9.111 107.29189839999835 11.011 91.25094040000064 10.565)
Error minima by case: (2.5204 9 60.0 2 5.6614 2 61.6899 3 0.0962 10 0.4579 2 4.0587 2 8.0 2 1.8453 2 0.1095 9 1.6249 9 7.949 2 3.6711 2 2.8608 2 1.3418 2 0.9547 2 0.7091 2 0.8726 9 1.0912 8 0.2824 8 0.1507 6 11.0 2 19.3787 8 0.2033 9 0.3566 2)
Average genome size in population (length): 72.666
Average program size in population (points): 73.666
Average percent parens in population: 0.014
Minimum age in population: 109.8362714520382
Maximum age in population: 114.7216870971899
Average age in population: 112.625617929131
Median age in population: 112.6789948110372
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.314
Error (vector) diversity:			 0.334
Behavioral diversity:				 0.335
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 109307792
--- Timings ---
Current time: 1529616106324 milliseconds
Total Time:         262.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.3 seconds, 39.4%
Fitness Testing:    125.3 seconds, 47.8%
Report:              33.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 58152.81259999996
Test mean error for best: 29.07641
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 float_dup_items integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 15.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 0.2824 10 0.8006 10 11.0 2 44.9275 8 54.2033 11 2.6434 11]
Total: 917.5202
Mean: 18.350405
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2376.5177639000044
Median total errors in population: 959.5758000000002
Error averages by case: (58.50340070000024 10.344 118.11078180000007 3.307 153.3571073999999 11.823 135.55329259999993 4.237 72.83866179999997 11.164 59.76005299999909 9.382 63.667336200000584 7.234 67.14820539999997 3.385 89.00267510000093 10.916 64.81969780000003 11.175 75.67643160000021 11.446 110.14475959999993 3.306 97.17220010000173 10.824 68.29929740000006 3.249 84.59323899999939 11.385 107.63926069999856 8.797 91.8757716000001 3.292 124.54580310000124 10.426 57.911407300000384 8.816 76.78456140000195 11.15 56.677021700000516 10.111 68.19686709999999 3.53 96.7902548000009 9.095 90.93515089999887 10.94 76.56052580000065 10.62)
Error minima by case: (0.7118 7 60.0 2 5.6614 2 74.6899 2 0.0962 9 0.4579 2 6.0587 2 7.0 2 1.1547 2 0.1095 9 0.6249 10 20.949 2 2.3289 2 8.0 2 0.3418 2 5.0453 2 12.2909 2 1.8726 9 0.0557 8 0.2824 9 0.1507 6 6.5683 1 4.8787 8 0.2033 9 0.3566 2)
Average genome size in population (length): 73.655
Average program size in population (points): 74.655
Average percent parens in population: 0.014
Minimum age in population: 110.8362714520382
Maximum age in population: 116.0057484703925
Average age in population: 113.941147632824
Median age in population: 113.9831005102109
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.345
Error (vector) diversity:			 0.374
Behavioral diversity:				 0.375
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 111149167
--- Timings ---
Current time: 1529616109993 milliseconds
Total Time:         266.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.6 seconds, 39.3%
Fitness Testing:    127.2 seconds, 47.8%
Report:              34.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 58152.81259999996
Test mean error for best: 29.07641
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 float_dup_items integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 15.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 0.2824 10 0.8006 10 11.0 2 44.9275 8 54.2033 11 2.6434 11]
Total: 917.5202
Mean: 18.350405
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2411.2128817000043
Median total errors in population: 953.2052
Error averages by case: (58.85197750000021 10.302 116.10562390000011 3.151 157.0023672999996 11.562 134.17981939999993 4.069 77.86316409999998 11.174 60.522651199999224 9.363 64.43598200000044 7.181 67.1134026 3.188 90.73871890000096 10.894 66.63123549999997 11.161 81.07924879999989 11.436 109.2013671999999 3.15 101.23538120000184 10.737 66.78554260000001 3.111 88.67022209999918 11.293 109.62433319999839 8.722 91.1661473000001 3.129 124.4305597000012 10.377 58.34312060000034 8.747 80.4010544000017 11.122 57.16916430000043 10.109 68.66954779999999 3.345 96.95712750000101 9.016 95.71555569999882 10.818 80.61456690000063 10.548)
Error minima by case: (1.6167 9 20.9603 2 11.3386 2 15.6899 3 4.0962 9 0.4579 2 5.0587 2 0.2382 2 5.8453 2 0.1095 9 1.6249 9 5.6975 2 2.6711 2 8.0 2 0.3418 2 0.0453 2 13.2909 2 2.8726 9 0.1875 8 0.2824 10 0.0623 6 4.4317 2 6.8787 8 0.2033 9 0.3566 2)
Average genome size in population (length): 75.685
Average program size in population (points): 76.685
Average percent parens in population: 0.013
Minimum age in population: 111.8362714520382
Maximum age in population: 117.4848216459458
Average age in population: 115.2204746836436
Median age in population: 115.251107549429
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.341
Error (vector) diversity:			 0.365
Behavioral diversity:				 0.365
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 113041326
--- Timings ---
Current time: 1529616113714 milliseconds
Total Time:         269.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.9 seconds, 39.3%
Fitness Testing:    129.1 seconds, 47.9%
Report:              34.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 58152.81259999996
Test mean error for best: 29.07641
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 float_dup_items integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 15.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 0.2824 10 0.8006 10 11.0 2 44.9275 8 54.2033 11 2.6434 11]
Total: 917.5202
Mean: 18.350405
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2606.428646300005
Median total errors in population: 949.6039999999999
Error averages by case: (67.96609980000021 10.4 125.72390920000014 3.244 161.43706449999954 11.413 143.6606443999999 4.156 82.44277469999996 11.226 69.46093209999914 9.457 73.40931570000026 7.353 75.79940420000007 3.449 99.23221850000091 10.974 72.22655879999998 11.214 81.99410140000009 11.42 118.72161619999989 3.242 105.563606000002 10.793 75.8968314 3.212 94.9911213999992 11.256 117.94704109999829 8.86 100.69254670000012 3.244 133.043653000001 10.509 67.31499010000029 8.903 88.82469100000179 11.105 67.05745050000056 10.167 77.08193549999996 3.62 105.98968230000104 9.173 101.88042819999866 10.628 88.54502960000063 10.507)
Error minima by case: (2.0373 8 56.6939 2 13.6614 2 62.6389 3 2.0962 10 0.4579 2 1.9413 2 6.7618 2 0.8453 2 0.1095 9 1.6249 9 2.3174 2 2.3289 2 3.8098 2 10.3418 2 0.0453 2 0.2399 2 3.3528 9 0.6879 8 0.2824 10 0.1507 6 11.0 2 16.0725 8 0.2033 9 0.6434 2)
Average genome size in population (length): 78.172
Average program size in population (points): 79.172
Average percent parens in population: 0.013
Minimum age in population: 114.501286244313
Maximum age in population: 118.6454616179601
Average age in population: 116.6098699261706
Median age in population: 116.6691268149019
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.319
Error (vector) diversity:			 0.344
Behavioral diversity:				 0.344
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 114995626
--- Timings ---
Current time: 1529616117481 milliseconds
Total Time:         273.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.3 seconds, 39.2%
Fitness Testing:    131.0 seconds, 47.9%
Report:              35.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 58152.81259999996
Test mean error for best: 29.07641
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 float_dup_items integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 15.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 0.2824 10 0.8006 10 11.0 2 44.9275 8 54.2033 11 2.6434 11]
Total: 917.5202
Mean: 18.350405
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2331.010300200005
Median total errors in population: 950.1039999999999
Error averages by case: (56.10586130000004 10.288 113.47170130000005 3.086 151.21891540000013 11.435 131.76150929999994 4.016 72.86447539999996 11.186 57.891633199999404 9.351 61.82473180000029 7.231 64.88974819999996 3.418 88.02997980000093 10.895 61.31458130000006 11.135 74.67682950000025 11.399 106.80484159999997 3.089 95.2684773000014 10.791 63.51611860000004 3.04 86.69408209999949 11.367 106.72029169999864 8.802 88.3262248 3.059 122.31812920000105 10.413 55.83337650000037 8.831 79.00598350000166 11.045 53.62763490000017 10.081 65.96730469999999 3.572 94.60395110000083 9.113 90.74804259999922 10.544 79.74087510000065 10.598)
Error minima by case: (1.4848 9 56.2696 2 3.3386 2 50.9993 2 2.0962 8 0.4579 2 6.0587 2 6.7618 2 1.8453 2 0.1095 9 1.6249 11 2.7417 2 3.6711 2 7.0 1 1.3418 2 2.0453 2 11.3997 2 3.8726 9 0.0557 7 0.2824 9 0.0216 6 10.9513 2 6.9305 8 0.2033 9 0.6434 2)
Average genome size in population (length): 78.359
Average program size in population (points): 79.359
Average percent parens in population: 0.013
Minimum age in population: 115.7296314100066
Maximum age in population: 119.8402771453696
Average age in population: 117.9997714750657
Median age in population: 118.0329150164751
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.341
Error (vector) diversity:			 0.361
Behavioral diversity:				 0.361
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 116954601
--- Timings ---
Current time: 1529616121251 milliseconds
Total Time:         277.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.6 seconds, 39.2%
Fitness Testing:    133.0 seconds, 48.0%
Report:              35.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 58152.81259999996
Test mean error for best: 29.07641
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 float_dup_items integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 15.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 0.2824 10 0.8006 10 11.0 2 44.9275 8 54.2033 11 2.6434 11]
Total: 917.5202
Mean: 18.350405
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2445.550254100004
Median total errors in population: 964.0241000000001
Error averages by case: (61.994404400000235 10.35 121.73371130000015 3.346 150.41360360000024 11.674 138.41197429999988 4.273 75.08738999999997 11.191 64.21985469999925 9.334 67.74735750000028 7.315 70.27361900000002 3.584 92.13712840000089 10.852 65.15768710000005 11.135 75.1892997000003 11.443 113.57725739999984 3.369 97.4506206000019 10.841 71.19809400000003 3.303 88.26249069999884 11.398 109.61992269999843 8.845 95.51646280000014 3.326 127.96003840000112 10.503 62.68512200000028 8.933 80.43865210000135 11.046 61.37051300000049 10.086 70.80918429999996 3.739 100.49186850000102 9.272 92.56810489999863 10.668 80.75489270000064 10.655)
Error minima by case: (1.4808 8 60.0 2 8.6614 2 66.6899 2 2.0962 9 0.4579 2 5.0587 2 6.2382 2 5.8453 2 0.1095 9 1.6249 10 21.949 2 3.6711 2 8.0 2 1.3418 2 1.183 1 13.2909 2 2.8726 9 0.1875 7 0.2824 10 0.1712 6 6.4317 1 4.4872 8 0.2033 9 0.3566 2)
Average genome size in population (length): 77.345
Average program size in population (points): 78.345
Average percent parens in population: 0.013
Minimum age in population: 116.9179977500153
Maximum age in population: 121.2850664516617
Average age in population: 119.3003421062738
Median age in population: 119.3471893700857
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.366
Error (vector) diversity:			 0.392
Behavioral diversity:				 0.392
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 118888251
--- Timings ---
Current time: 1529616124988 milliseconds
Total Time:         280.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       109.9 seconds, 39.1%
Fitness Testing:    134.9 seconds, 48.0%
Report:              36.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 58152.81259999996
Test mean error for best: 29.07641
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -1.0          
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction float_dup_items} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction float_yank} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 float_dup_items integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_swap float_max integer_dec float_dup_times integer_mod float_yank float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 15.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 0.2824 10 0.8006 10 11.0 2 44.9275 8 54.2033 11 2.6434 11]
Total: 917.5202
Mean: 18.350405
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2160.1266691000037
Median total errors in population: 949.6039999999999
Error averages by case: (50.27170300000029 10.286 106.17747510000004 2.962 136.1675330000014 12.041 124.78603699999995 3.913 64.83361329999997 11.139 52.46282599999923 9.384 56.309725600000476 7.389 58.42383479999995 3.229 83.10103110000095 10.825 56.03754620000004 11.137 65.08926259999997 11.424 99.54097169999997 2.979 87.54586220000162 10.859 56.20734020000003 2.93 78.5118863999993 11.34 102.13301139999848 8.893 81.12005910000003 2.951 116.71022470000105 10.387 50.015383100000335 8.911 70.16463990000061 10.874 48.816824800000454 9.997 59.83432369999998 3.362 89.2323136000009 9.269 87.00578849999899 10.804 71.74945210000064 10.593)
Error minima by case: (2.5192 9 55.7941 2 4.3386 2 50.5237 3 1.0962 10 1.4579 2 2.0587 2 7.7618 2 6.1547 2 0.1095 9 1.6249 11 3.2173 2 0.6711 2 7.0487 1 2.6582 2 1.0453 2 11.8753 2 2.8726 9 1.09 7 0.2824 10 0.1507 6 10.9542 2 4.1016 8 0.2033 9 0.6434 2)
Average genome size in population (length): 75.352
Average program size in population (points): 76.352
Average percent parens in population: 0.013
Minimum age in population: 118.2465462696348
Maximum age in population: 122.8163742945751
Average age in population: 120.6495223167125
Median age in population: 120.6715375252451
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 132
Genome diversity (% unique Plush genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.364
Error (vector) diversity:			 0.392
Behavioral diversity:				 0.392
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 120772051
--- Timings ---
Current time: 1529616128762 milliseconds
Total Time:         284.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       111.2 seconds, 39.1%
Fitness Testing:    136.8 seconds, 48.1%
Report:              36.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 57647.99819999997
Test mean error for best: 28.82400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -7.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -12.0         
Correct output: 1.6433897119   | Program output: -3.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction integer_mult} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 integer_mult integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 15.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 5.7176 11 0.8006 10 11.0 2 44.9275 8 43.2033 11 4.6434 11]
Total: 914.9553999999999
Mean: 18.299109
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 1830.5779523000017
Median total errors in population: 949.2052
Error averages by case: (36.857367499999505 10.254 94.00061490000002 2.623 119.90774560000176 12.423 113.32090409999998 3.605 51.53062369999997 11.071 38.91781020000023 9.352 42.96906129999976 7.32 46.02208959999997 2.964 70.5909531000008 10.845 42.81728580000004 11.075 50.931681599999905 11.432 88.07466829999998 2.673 74.54038310000035 10.811 43.256948400000006 2.638 64.92335700000031 11.296 90.20770179999943 8.832 69.39875479999998 2.65 104.11680120000112 10.302 36.16469540000036 8.781 54.67796719999987 10.694 34.9490602999998 9.901 47.56255799999998 3.068 76.44326009999996 9.17 76.24038229999988 10.947 56.8492770000006 10.579)
Error minima by case: (1.5192 9 60.0 2 6.3386 2 61.6141 3 1.9038 10 1.5421 2 1.0587 2 8.0 2 5.8453 2 0.8905 9 3.6249 9 7.8731 2 3.6711 2 2.7849 1 1.6582 2 4.0453 2 0.5144 2 9.1274 8 0.09 7 0.2824 10 0.0216 6 11.0 2 3.2505 8 0.2033 9 0.6434 2)
Average genome size in population (length): 74.72
Average program size in population (points): 75.72
Average percent parens in population: 0.013
Minimum age in population: 120.0063609254983
Maximum age in population: 123.9782545506013
Average age in population: 121.981753161321
Median age in population: 122.0123914263583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 192
Genome diversity (% unique Plush genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.353
Error (vector) diversity:			 0.385
Behavioral diversity:				 0.385
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 122640051
--- Timings ---
Current time: 1529616132553 milliseconds
Total Time:         288.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.5 seconds, 39.0%
Fitness Testing:    138.8 seconds, 48.1%
Report:              37.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 57647.99819999997
Test mean error for best: 28.82400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -7.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -12.0         
Correct output: 1.6433897119   | Program output: -3.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 15.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 5.7176 11 0.8006 10 11.0 2 44.9275 8 43.2033 11 4.6434 11]
Total: 914.9553999999999
Mean: 18.299109
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2156.159221300002
Median total errors in population: 949.2052
Error averages by case: (51.68656899999991 10.274 107.99562 2.85 126.88547630000171 12.446 126.85610909999997 3.813 62.212585399999966 11.113 54.07693519999951 9.323 57.96054350000025 7.254 58.96032359999996 3.086 85.09658440000105 10.883 56.26495540000002 11.131 62.05492679999952 11.437 102.08596850000005 2.87 84.48866820000114 10.76 57.95576030000003 2.826 75.22547499999968 11.244 104.31661579999889 8.782 83.58106549999998 2.848 118.0739995000012 10.295 51.396321300000395 8.741 65.74037809999984 10.636 50.22026690000015 9.913 60.445755600000005 3.21 90.8043309000007 9.098 87.32382729999927 11.019 68.05915970000065 10.539)
Error minima by case: (0.504 9 2.9603 2 20.3386 2 23.3101 2 5.9038 10 2.4579 2 8.0624 2 7.0 2 1.8453 2 0.8905 9 5.6249 9 36.949 2 6.6711 2 8.0 1 1.3418 2 7.0453 2 29.5805 1 9.1274 9 0.9624 7 0.2824 9 0.0346 6 1.4317 1 0.8787 8 1.2033 10 0.8205 2)
Average genome size in population (length): 74.236
Average program size in population (points): 75.236
Average percent parens in population: 0.013
Minimum age in population: 121.0692940927491
Maximum age in population: 125.2925572876899
Average age in population: 123.3163853034689
Median age in population: 123.337762592839
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 180
Genome diversity (% unique Plush genomes):	 0.699
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 180
Syntactic diversity (% unique Push programs):	 0.699
Total error diversity:				 0.305
Error (vector) diversity:			 0.323
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 124495951
--- Timings ---
Current time: 1529616136278 milliseconds
Total Time:         292.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.8 seconds, 38.9%
Fitness Testing:    140.7 seconds, 48.2%
Report:              37.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 57647.99819999997
Test mean error for best: 28.82400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -7.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -12.0         
Correct output: 1.6433897119   | Program output: -3.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -82} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -82 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 15.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 5.7176 11 0.8006 10 11.0 2 44.9275 8 43.2033 11 4.6434 11]
Total: 914.9553999999999
Mean: 18.299109
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2011.8367111000023
Median total errors in population: 939.1403500000001
Error averages by case: (44.005964300000045 10.207 101.26584040000003 2.817 124.50342840000162 12.561 120.20983339999998 3.764 58.83476039999997 11.098 46.19865949999958 9.307 50.1514485000003 7.189 53.75743899999998 3.075 77.26914200000083 10.946 52.78173140000002 11.12 58.68442469999956 11.42 95.28543819999997 2.826 81.31262940000092 10.829 51.16138940000002 2.793 71.47393640000023 11.378 96.47260189999886 8.759 76.58583670000003 2.806 111.42722130000121 10.28 43.63741460000034 8.664 61.414522399999846 10.655 42.42786750000003 9.862 55.17486639999998 3.185 83.43547280000051 9.014 84.45542549999925 11.031 63.69841660000057 10.625)
Error minima by case: (1.4848 7 2.9603 2 70.3386 2 23.3101 3 1.0962 10 1.4579 2 8.0695 2 7.7618 2 8.1547 2 0.1095 9 3.6249 11 36.949 2 5.6711 2 8.0 2 1.6582 2 7.0453 2 36.0 2 10.1274 9 0.0557 7 0.2824 10 0.1507 6 10.4317 2 4.9124 8 2.2033 10 0.6434 2)
Average genome size in population (length): 74.292
Average program size in population (points): 75.292
Average percent parens in population: 0.013
Minimum age in population: 122.3638948799386
Maximum age in population: 126.7974237546871
Average age in population: 124.6809350709679
Median age in population: 124.7129565479514
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 124
Genome diversity (% unique Plush genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.335
Error (vector) diversity:			 0.352
Behavioral diversity:				 0.352
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 126353251
--- Timings ---
Current time: 1529616139987 milliseconds
Total Time:         296.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       115.1 seconds, 38.9%
Fitness Testing:    142.7 seconds, 48.2%
Report:              38.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 57765.138799999964
Test mean error for best: 28.88257
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -79.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -55.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -74.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -3.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: -0.048738954  
Correct output: 2.0900277855   | Program output: -0.048738954  
Correct output: -1.2824481557  | Program output: -6.0          
Correct output: 0.7518561607   | Program output: -0.048738954  
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -11.0         
Correct output: 1.6433897119   | Program output: -2.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_swap float_max integer_dec float_dup_times integer_mod integer_min float_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 75.3386 13 81.0 3 13.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 8.3751 11 56.0 2 37.6711 11 8.0 2 14.3418 12 60.9965 8 36.0 2 73.9213 10 2.1388 8 4.7176 11 0.8006 10 11.0 2 44.9275 8 44.2033 11 3.6434 12]
Total: 913.9553999999999
Mean: 18.279108
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2235.442187800003
Median total errors in population: 959.7378
Error averages by case: (54.47817270000015 10.294 113.47605980000007 3.021 129.02196810000177 12.475 131.67410909999998 3.96 64.96919289999997 11.123 56.7628794999994 9.343 60.258899200000364 7.285 63.42112099999998 3.149 86.56103840000094 10.931 58.99875860000004 11.131 64.22800089999949 11.392 106.29344469999994 3.04 86.65245270000094 10.77 63.17133800000006 2.986 78.73050569999957 11.284 105.3580931999987 8.804 88.37402300000004 3.022 121.16978200000119 10.334 54.500626600000366 8.759 68.75865500000025 10.76 53.15423560000031 9.901 65.01252029999998 3.276 93.68489920000081 9.134 88.11247829999934 11.003 70.83493330000067 10.607)
Error minima by case: (1.4808 8 60.0 2 70.3386 2 65.6899 3 7.9038 10 0.4579 2 8.6394 2 8.0 2 3.8453 2 0.8905 9 4.6249 10 36.949 2 5.6711 2 8.0 1 10.3262 2 5.0453 2 31.4133 2 10.1274 8 0.7765 8 0.2824 8 0.0579 6 11.0 2 5.8787 8 0.2033 9 0.6434 2)
Average genome size in population (length): 73.904
Average program size in population (points): 74.904
Average percent parens in population: 0.013
Minimum age in population: 123.7571151961965
Maximum age in population: 128.3759780221159
Average age in population: 126.0577303444416
Median age in population: 126.1150580820997
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.356
Error (vector) diversity:			 0.374
Behavioral diversity:				 0.374
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 128200851
--- Timings ---
Current time: 1529616143674 milliseconds
Total Time:         299.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.4 seconds, 38.9%
Fitness Testing:    144.6 seconds, 48.2%
Report:              38.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 57966.21659999996
Test mean error for best: 28.98311
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -7.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -12.0         
Correct output: 1.6433897119   | Program output: -3.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction integer_mult} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 integer_mult integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 15.3418 12 60.9965 8 36.0 2 72.9213 9 1.1388 9 5.7176 11 0.1994 6 11.0 2 44.9275 8 43.2033 11 4.6434 11]
Total: 908.3541999999999
Mean: 18.167084
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2163.322014700003
Median total errors in population: 961.8992000000001
Error averages by case: (51.15875340000019 10.35 109.8833689000001 3.069 127.81730420000176 12.464 128.02275319999993 4.007 63.884350999999974 11.14 53.23709469999933 9.343 56.9864721000004 7.325 59.81420329999997 3.257 82.66480910000087 10.834 55.984760900000026 11.145 63.32730619999938 11.454 102.53147819999991 3.091 85.38739880000144 10.777 59.60099990000005 3.034 77.44859749999979 11.283 100.51246789999865 8.818 83.90233560000007 3.065 117.87702140000108 10.406 51.278798800000295 8.856 67.89759910000078 10.91 49.92398340000034 10.014 61.11995929999998 3.384 89.95669360000082 9.223 84.74468789999922 11.035 69.45081630000068 10.624)
Error minima by case: (1.5192 9 60.0 2 4.6614 2 65.6899 2 6.9038 10 0.4579 2 8.0587 2 6.9513 2 3.8453 2 0.1095 9 5.6249 10 18.949 2 5.6711 2 8.0 1 4.3418 2 2.0453 1 10.2909 2 0.1274 9 0.09 7 0.2824 10 0.1323 6 9.9513 1 6.1857 8 1.2033 10 0.6434 2)
Average genome size in population (length): 73.011
Average program size in population (points): 74.011
Average percent parens in population: 0.014
Minimum age in population: 125.4458403745795
Maximum age in population: 129.5550339178263
Average age in population: 127.4438381025112
Median age in population: 127.4340570942502
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 55
Genome diversity (% unique Plush genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 55
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.365
Error (vector) diversity:			 0.394
Behavioral diversity:				 0.394
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 130026126
--- Timings ---
Current time: 1529616147367 milliseconds
Total Time:         303.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.8 seconds, 38.8%
Fitness Testing:    146.4 seconds, 48.3%
Report:              39.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 57966.21659999996
Test mean error for best: 28.98311
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -7.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -12.0         
Correct output: 1.6433897119   | Program output: -3.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction integer_mult} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 integer_mult integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 15.3418 12 60.9965 8 36.0 2 72.9213 9 1.1388 9 5.7176 11 0.1994 6 11.0 2 44.9275 8 43.2033 11 4.6434 11]
Total: 908.3541999999999
Mean: 18.167084
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2404.274120499999
Median total errors in population: 953.2052
Error averages by case: (59.92857060000006 10.344 118.98587420000011 3.166 138.94146160000082 12.462 136.8603717999999 4.107 76.18033349999997 11.151 62.04502719999938 9.331 65.72037750000024 7.279 66.72613109999996 3.259 91.00048150000089 10.898 63.39495270000003 11.115 75.41874589999979 11.469 111.27098679999993 3.202 97.31258280000137 10.758 69.12922760000006 3.192 88.11338569999964 11.173 109.03171659999863 8.824 93.28642490000007 3.181 126.45132480000119 10.408 60.13688960000029 8.823 81.47026430000167 11.071 59.00532420000025 9.929 67.81626959999997 3.398 98.5795346000006 9.195 96.20312229999918 11.073 81.90173910000068 10.555)
Error minima by case: (1.6167 8 59.0 2 39.3386 2 65.6899 2 7.9038 9 0.4579 2 2.0587 2 7.7849 2 5.1547 2 1.1095 8 2.3751 10 36.949 2 1.6711 2 7.0 1 4.6582 2 6.9547 2 28.8376 2 9.1274 9 0.09 7 0.2824 10 0.1507 6 8.885 2 6.8787 8 1.2033 10 0.6434 2)
Average genome size in population (length): 71.527
Average program size in population (points): 72.527
Average percent parens in population: 0.014
Minimum age in population: 126.4664988466201
Maximum age in population: 130.6519862808719
Average age in population: 128.8132312747602
Median age in population: 128.8320926421024
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.335
Error (vector) diversity:			 0.357
Behavioral diversity:				 0.357
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 131814301
--- Timings ---
Current time: 1529616151048 milliseconds
Total Time:         307.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.0 seconds, 38.8%
Fitness Testing:    148.3 seconds, 48.3%
Report:              39.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 57966.21659999996
Test mean error for best: 28.98311
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -7.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -12.0         
Correct output: 1.6433897119   | Program output: -3.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -82} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction integer_mult} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -82 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 integer_mult integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 15.3418 12 60.9965 8 36.0 2 72.9213 9 1.1388 9 5.7176 11 0.1994 6 11.0 2 44.9275 8 43.2033 11 4.6434 11]
Total: 908.3541999999999
Mean: 18.167084
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2011.4200551999963
Median total errors in population: 930.7731000000001
Error averages by case: (44.595970199999755 10.299 104.60032400000014 3.094 122.04257100000173 12.559 122.05836709999988 4.046 58.28966659999997 11.108 46.62118989999964 9.348 50.12565500000022 7.309 53.655632499999975 3.112 75.8071612000008 10.858 49.03871540000004 11.104 57.26093229999937 11.387 96.70043559999986 3.147 79.95941330000085 10.825 54.326388900000055 3.079 70.79859460000007 11.366 94.26583459999904 8.801 78.30805200000013 3.097 111.86186810000112 10.339 44.61060990000029 8.786 63.605348700001585 11.052 43.34385880000002 9.878 54.92969999999999 3.238 83.60360130000035 9.161 78.32603439999953 11.011 63.96112980000062 10.719)
Error minima by case: (1.6167 8 60.0 2 5.6614 2 65.6899 2 6.0962 10 0.4579 2 8.0587 2 8.0 2 5.8453 2 0.1095 9 4.6249 10 19.546 2 4.6711 2 8.0 2 2.3418 2 6.2933 2 10.888 2 0.4696 8 0.1875 7 0.2824 9 0.0623 6 11.0 2 16.1475 8 2.2033 10 0.3566 2)
Average genome size in population (length): 71.345
Average program size in population (points): 72.345
Average percent parens in population: 0.014
Minimum age in population: 127.9557675088145
Maximum age in population: 132.0712366856998
Average age in population: 130.2730809546531
Median age in population: 130.3417185530721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.335
Error (vector) diversity:			 0.353
Behavioral diversity:				 0.353
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 133597951
--- Timings ---
Current time: 1529616154825 milliseconds
Total Time:         310.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.4 seconds, 38.7%
Fitness Testing:    150.3 seconds, 48.3%
Report:              40.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 58083.35719999996
Test mean error for best: 29.04168
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -79.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -55.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -74.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -3.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -6.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -11.0         
Correct output: 1.6433897119   | Program output: -2.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction integer_mult} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 integer_mult integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 75.3386 13 81.0 3 13.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 8.3751 11 56.0 2 37.6711 11 8.0 2 14.3418 12 60.9965 8 36.0 2 72.9213 9 1.1388 9 4.7176 11 0.1994 6 11.0 2 44.9275 8 44.2033 11 3.6434 12]
Total: 907.3541999999999
Mean: 18.147083
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2385.884133099996
Median total errors in population: 959.2052
Error averages by case: (59.94287300000032 10.326 117.3529712000001 3.162 138.8126601000013 12.586 134.40594399999995 4.096 74.68951359999997 11.133 61.72326259999931 9.416 65.42652440000053 7.46 67.15313089999998 3.218 91.16074180000079 10.919 63.800697900000024 11.155 74.24176449999972 11.434 110.0542917999999 3.191 96.78579640000163 10.86 68.17907520000007 3.178 87.91874769999922 11.341 109.59334839999866 8.928 92.11114240000009 3.184 125.59109610000107 10.35 59.31255310000027 8.893 79.3072996000013 11.07 58.159771800000335 9.746 68.56082289999999 3.343 98.14015390000095 9.294 93.01677149999895 11.026 80.31917830000066 10.815)
Error minima by case: (1.6167 9 60.0 2 70.3386 2 65.6899 3 0.0962 10 0.4579 2 1.9413 2 7.7618 2 3.8453 2 0.8905 8 4.6249 8 36.949 2 5.6711 2 8.0 2 9.3418 2 1.3612 2 33.6717 2 10.1274 8 0.1875 7 0.2824 8 0.1507 6 10.4317 2 1.4123 8 2.2033 8 0.3566 2)
Average genome size in population (length): 70.918
Average program size in population (points): 71.918
Average percent parens in population: 0.014
Minimum age in population: 129.339519887354
Maximum age in population: 133.562168981436
Average age in population: 131.7192829409327
Median age in population: 131.7349400335116
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 39
Genome diversity (% unique Plush genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 39
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.335
Error (vector) diversity:			 0.361
Behavioral diversity:				 0.361
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 135370901
--- Timings ---
Current time: 1529616158518 milliseconds
Total Time:         314.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       121.7 seconds, 38.7%
Fitness Testing:    152.1 seconds, 48.4%
Report:              40.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 57975.03509999996
Test mean error for best: 28.98752
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -1.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -1.048738954  
Correct output: -10.0587306507 | Program output: -1.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -1.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -4.0          
Correct output: -61.0452729724 | Program output: -1.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -7.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -1.048738954  
Correct output: -55.2032724973 | Program output: -12.0         
Correct output: 1.6433897119   | Program output: -3.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction integer_mult} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 integer_mult integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [4.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 4.4091 9 9.01 6 8.0 2 38.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 15.3418 12 59.9965 7 36.0 2 72.9213 9 1.1388 9 5.7176 11 0.1994 6 11.0 2 45.9275 8 43.2033 11 4.6434 11]
Total: 905.3541999999999
Mean: 18.107084
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2070.1298889999957
Median total errors in population: 945.2052
Error averages by case: (47.27052810000013 10.261 108.22231860000012 3.188 124.3673380000018 12.485 125.78238269999989 4.143 59.52713839999997 11.094 48.970551599999375 9.377 52.697326200000404 7.451 56.68547659999996 3.283 77.58322460000088 10.921 49.87854700000005 11.078 58.8196557999994 11.397 99.70596999999988 3.237 81.98349670000094 10.758 58.00708840000007 3.191 71.76894170000004 11.341 95.79782309999881 8.914 81.43073540000006 3.22 113.86929010000118 10.226 47.005928300000306 8.912 65.18470140000139 11.053 45.7717276000002 9.327 57.627135099999954 3.431 86.08591910000062 9.261 80.4379322999996 10.998 66.2497122000007 10.852)
Error minima by case: (0.6412 8 59.0 2 71.3386 2 65.6899 2 1.9038 10 0.4579 2 1.0587 2 7.0 2 7.1547 2 0.1095 9 4.6249 9 17.1192 2 6.6711 2 7.0 1 10.3418 2 0.0453 2 8.4612 2 0.1274 8 0.09 7 0.2824 9 0.0623 6 10.0 1 16.3555 8 3.2033 10 0.6434 2)
Average genome size in population (length): 71.494
Average program size in population (points): 72.494
Average percent parens in population: 0.014
Minimum age in population: 130.8015098090029
Maximum age in population: 135.0364617727629
Average age in population: 133.1449823322742
Median age in population: 133.148401342644
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.375
Error (vector) diversity:			 0.408
Behavioral diversity:				 0.408
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 137158293
--- Timings ---
Current time: 1529616162343 milliseconds
Total Time:         318.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.0 seconds, 38.6%
Fitness Testing:    154.1 seconds, 48.4%
Report:              41.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 57699.16569999997
Test mean error for best: 28.84958
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -2.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -5.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -10.0         
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_swap float_max float_inc float_dup_times float_max integer_dec float_dup_times integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 13.3418 12 60.9965 8 36.0 2 72.9213 9 1.1388 9 3.7176 11 0.1994 6 11.0 2 44.9275 8 45.2033 11 2.6434 11]
Total: 904.3541999999999
Mean: 18.087084
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2197.679838199994
Median total errors in population: 949.4046
Error averages by case: (49.9912629999998 10.233 110.14001700000013 3.043 133.39553070000136 12.511 127.35255039999994 4.019 69.97701809999997 11.119 51.637157799999564 9.324 55.32190100000017 7.482 58.648711799999965 3.136 80.98762730000085 10.842 54.093698200000006 11.092 69.89999199999994 11.417 102.70666039999992 3.091 91.66537430000143 10.805 59.88403060000006 3.046 82.4165212999993 11.3 99.34533969999897 8.928 84.72125340000001 3.069 116.69868380000115 9.999 49.88978480000034 9.088 75.55567430000113 11.017 48.87566289999992 8.586 60.036603299999975 3.3 88.37712020000038 9.308 91.94970599999904 11.019 76.58795590000064 10.75)
Error minima by case: (1.5679 9 60.0 2 5.6614 2 65.6899 2 0.9038 9 0.4579 2 0.9413 2 7.0 2 6.1547 2 0.1095 9 4.6249 10 33.493 2 5.6711 2 8.0 1 10.3418 2 7.0453 1 24.835 2 10.1274 8 0.1388 7 0.2824 9 0.0248 6 10.0 1 14.5772 8 2.2033 10 0.6434 2)
Average genome size in population (length): 72.606
Average program size in population (points): 73.606
Average percent parens in population: 0.014
Minimum age in population: 132.0202386019419
Maximum age in population: 136.8222683969116
Average age in population: 134.5749966034982
Median age in population: 134.6188946673403
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 72
Genome diversity (% unique Plush genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 72
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.388
Error (vector) diversity:			 0.42
Behavioral diversity:				 0.42
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 138973468
--- Timings ---
Current time: 1529616166003 milliseconds
Total Time:         322.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       124.3 seconds, 38.6%
Fitness Testing:    155.9 seconds, 48.4%
Report:              41.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 57699.16569999997
Test mean error for best: 28.84958
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -80.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -56.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -75.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -53.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -2.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -5.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -10.0         
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction float_inc} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max integer_dec float_dup_times integer_mod integer_min integer_swap float_max float_inc float_dup_times float_max integer_dec float_dup_times integer_mod integer_min float_dec integer_dec float_dup_times float_yank float_yank in1 float_max float_frominteger print_float)
Errors: [3.5679 10 60.0 2 74.3386 13 81.0 3 14.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 9.3751 11 56.0 2 36.6711 11 8.0 2 13.3418 12 60.9965 8 36.0 2 72.9213 9 1.1388 9 3.7176 11 0.1994 6 11.0 2 44.9275 8 45.2033 11 2.6434 11]
Total: 904.3541999999999
Mean: 18.087084
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2480.846196999997
Median total errors in population: 961.1547999999999
Error averages by case: (64.75551460000038 10.256 121.8977758000001 3.159 138.35801050000103 12.602 139.77244139999996 4.096 74.61166059999998 11.167 66.95326339999929 9.447 70.6318972 7.775 73.32432930000002 3.2 96.46130170000096 10.986 71.3952122 11.177 74.38769099999976 11.453 114.97887119999992 3.193 96.49143500000136 10.9 73.64656670000001 3.194 88.28859539999945 11.376 114.6373183999985 9.16 97.3143936000001 3.205 129.58065580000115 9.935 63.827685900000326 9.292 81.47708230000134 11.035 62.82366649999962 8.058 74.82214969999998 3.335 102.80614990000093 9.485 95.45185979999916 11.042 82.89666910000066 10.726)
Error minima by case: (0.5192 8 59.6865 2 6.6614 2 62.678 3 1.0962 9 1.4579 2 8.01 2 4.5279 2 1.8453 2 0.1095 9 4.6249 11 8.937 2 6.6711 2 3.8488 1 10.3905 2 6.0453 2 0.279 2 6.8726 9 0.1358 7 0.2824 9 0.0623 6 8.1942 2 6.1213 8 2.2033 10 1.3299 2)
Average genome size in population (length): 73.389
Average program size in population (points): 74.389
Average percent parens in population: 0.014
Minimum age in population: 133.9646353611129
Maximum age in population: 138.621413536101
Average age in population: 136.1134140049683
Median age in population: 136.1182490636616
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 91
Genome diversity (% unique Plush genomes):	 0.719
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 91
Syntactic diversity (% unique Push programs):	 0.719
Total error diversity:				 0.39
Error (vector) diversity:			 0.429
Behavioral diversity:				 0.429
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 140808268
--- Timings ---
Current time: 1529616169723 milliseconds
Total Time:         325.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.6 seconds, 38.6%
Fitness Testing:    157.9 seconds, 48.5%
Report:              42.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 58184.27239999996
Test mean error for best: 29.09214
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -78.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -73.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -2.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -5.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -10.0         
Correct output: 1.6433897119   | Program output: -1.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction in2} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction integer_mult} {:instruction integer_min} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan in2 integer_dec float_yankdup integer_swap -81 integer_min -50 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap float_stackdepth integer_min in2 in2 integer_mult integer_min -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 76.3386 13 81.0 3 12.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 7.3751 11 56.0 2 38.6711 11 8.0 2 13.3418 12 60.9965 8 36.0 2 72.9213 9 1.1388 9 3.7176 11 0.1994 6 11.0 2 44.9275 8 45.2033 11 2.6434 11]
Total: 904.3541999999999
Mean: 18.087084
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2563.4299401999974
Median total errors in population: 969.9553999999999
Error averages by case: (65.94480500000043 10.246 125.80701230000015 3.288 144.4255505000006 12.42 143.3044550999999 4.226 82.16972909999997 11.17 68.42299289999926 9.434 71.79418499999998 7.786 75.71909540000003 3.342 96.93452550000089 10.966 69.4320305 11.164 82.05625550000008 11.461 117.96271269999983 3.316 103.08985470000206 10.743 77.50316119999994 3.341 94.46097869999883 11.197 114.38967419999814 9.11 100.43761940000019 3.331 130.53616970000112 9.907 65.02481290000028 9.351 88.49860460000188 11.111 64.09463089999963 7.936 77.05397909999996 3.509 104.07246460000107 9.52 101.45373429999884 11.065 89.38890640000066 10.512)
Error minima by case: (1.5679 8 59.0487 2 4.6614 2 65.6899 2 5.9038 9 1.4579 2 8.01 2 7.0 2 5.1547 2 0.8905 9 3.3751 9 17.949 2 6.6711 2 7.0487 1 1.6582 2 0.0453 2 9.2909 2 1.1274 9 0.1388 7 0.2824 9 0.0323 6 8.5683 1 6.8787 8 2.2033 10 0.3566 2)
Average genome size in population (length): 73.762
Average program size in population (points): 74.762
Average percent parens in population: 0.013
Minimum age in population: 135.0609553601899
Maximum age in population: 139.5602204294793
Average age in population: 137.4881248485074
Median age in population: 137.5449819718949
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 97
Genome diversity (% unique Plush genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 97
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.393
Error (vector) diversity:			 0.416
Behavioral diversity:				 0.416
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 142652443
--- Timings ---
Current time: 1529616173469 milliseconds
Total Time:         329.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.9 seconds, 38.5%
Fitness Testing:    159.8 seconds, 48.5%
Report:              42.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 58075.953299999965
Test mean error for best: 29.03798
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -79.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -55.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -74.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -1.0          
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -4.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -9.0          
Correct output: 1.6433897119   | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec float_dup_times float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 75.3386 13 81.0 3 13.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 8.3751 11 56.0 2 37.6711 11 8.0 2 12.3418 11 60.9965 8 36.0 2 72.9213 9 1.1388 9 2.7176 11 0.1994 6 11.0 2 44.9275 8 46.2033 11 1.6434 11]
Total: 901.3541999999999
Mean: 18.027084
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2179.971417799999
Median total errors in population: 962.3541999999999
Error averages by case: (51.2776996000002 10.165 110.2704749000001 3.071 129.5961651000018 12.373 128.32046749999992 4.022 67.03108339999997 11.1 53.42926659999927 9.345 56.9149385000003 7.67 57.10656259999997 3.09 82.78365820000091 10.943 52.75055850000004 11.102 67.1227397999995 11.404 102.74201439999989 3.118 88.77690430000146 10.718 59.35215110000006 3.074 80.49556999999952 11.124 100.9655827999986 8.931 84.3935303000001 3.087 116.6736386000012 9.824 49.96635490000031 9.296 74.0300975000018 11.118 48.964145999999815 7.877 58.70154109999997 3.214 90.2649432000008 9.404 86.49923339999924 11.007 74.90309550000063 10.562)
Error minima by case: (1.5192 7 60.0 2 1.6614 2 65.6899 3 0.0962 10 0.4579 2 2.0587 2 7.9513 2 5.1547 2 0.7809 9 5.3751 10 36.949 2 1.3289 2 8.0 1 5.3418 2 7.0453 2 29.7019 2 10.1274 9 0.1358 7 0.2824 9 0.0154 6 10.9513 2 9.7104 8 2.2033 10 1.3299 2)
Average genome size in population (length): 74.017
Average program size in population (points): 75.017
Average percent parens in population: 0.013
Minimum age in population: 136.6119133778046
Maximum age in population: 141.1068838071687
Average age in population: 138.8067586163411
Median age in population: 138.8439602777235
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.379
Error (vector) diversity:			 0.407
Behavioral diversity:				 0.407
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 144502935
--- Timings ---
Current time: 1529616177286 milliseconds
Total Time:         333.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.2 seconds, 38.5%
Fitness Testing:    161.8 seconds, 48.6%
Report:              43.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 58206.59459999996
Test mean error for best: 29.10330
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -78.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -73.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 0.0           
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -3.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -8.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 76.3386 13 81.0 3 12.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 7.3751 11 56.0 2 38.6711 11 8.0 2 11.3418 12 60.9965 8 36.0 2 72.9213 9 1.1388 9 1.7176 11 0.1994 6 11.0 2 44.9275 8 47.2033 11 0.6434 10]
Total: 899.3541999999999
Mean: 17.987083
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2177.210072699999
Median total errors in population: 960.3541999999999
Error averages by case: (52.30055739999982 10.134 110.83291070000008 3.113 128.60551150000182 12.471 128.94427919999993 4.071 65.18144879999997 11.116 53.83019909999953 9.381 57.548688100000255 7.718 58.756452699999976 3.093 83.6295502000009 10.973 56.88192310000004 11.109 65.38579989999955 11.464 103.2322913999999 3.142 87.10918890000107 10.803 61.100172700000044 3.085 76.72639879999983 11.148 102.20551469999893 8.838 85.18265240000007 3.095 117.7444264000012 9.802 50.72526760000036 9.3 69.4079685000015 11.089 49.764640499999814 7.861 60.32707529999997 3.218 90.66682010000075 9.398 83.88567879999954 11.056 70.21065590000062 10.546)
Error minima by case: (1.5192 9 60.0 2 3.6614 2 59.6899 3 1.0962 10 0.4579 2 7.0587 2 8.0 2 3.1547 2 0.1095 9 5.6249 9 5.949 2 5.6711 2 0.8608 1 5.3418 2 1.0453 2 2.7091 2 5.048 9 0.09 7 0.2824 9 0.0205 6 11.0 2 8.8787 8 2.2033 10 0.3566 2)
Average genome size in population (length): 74.473
Average program size in population (points): 75.473
Average percent parens in population: 0.013
Minimum age in population: 137.7619440820013
Maximum age in population: 142.3082078790877
Average age in population: 140.2387287979623
Median age in population: 140.2597781954519
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 92
Genome diversity (% unique Plush genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 92
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.405
Error (vector) diversity:			 0.444
Behavioral diversity:				 0.444
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 146364819
--- Timings ---
Current time: 1529616181107 milliseconds
Total Time:         337.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.5 seconds, 38.4%
Fitness Testing:    163.8 seconds, 48.6%
Report:              43.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 58206.59459999996
Test mean error for best: 29.10330
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -78.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -73.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 0.0           
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -3.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -8.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 76.3386 13 81.0 3 12.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 7.3751 11 56.0 2 38.6711 11 8.0 2 11.3418 12 60.9965 8 36.0 2 72.9213 9 1.1388 9 1.7176 11 0.1994 6 11.0 2 44.9275 8 47.2033 11 0.6434 10]
Total: 899.3541999999999
Mean: 17.987083
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2336.1047470999993
Median total errors in population: 959.3541999999999
Error averages by case: (58.96926980000012 10.177 118.07608650000006 3.266 133.24137930000157 12.568 136.21088609999993 4.188 68.60558579999997 11.153 60.713520399999275 9.404 64.28817280000028 7.633 67.40560179999999 3.28 89.87822560000093 11.004 65.52026660000003 11.164 68.95161699999987 11.436 110.40465869999996 3.249 91.53352060000148 10.863 69.59885599999998 3.284 79.99144969999946 11.23 108.3507238999987 8.95 92.5133535000001 3.277 124.66804280000122 9.812 57.588046700000355 9.328 74.02667760000142 11.129 56.645692599999805 7.717 68.54839779999999 3.442 97.37823840000084 9.364 89.60878129999931 11.096 74.78069580000066 10.593)
Error minima by case: (1.2057 8 60.0 2 5.6614 2 66.6899 3 5.0962 10 1.4579 2 0.0587 2 4.5279 2 1.1547 2 0.1095 9 3.3751 11 37.949 2 5.6711 2 8.0 2 1.3418 2 1.0453 2 18.2909 2 9.8726 7 0.09 7 0.2824 10 0.0043 6 7.5683 2 7.8787 8 3.2033 10 0.6434 2)
Average genome size in population (length): 73.418
Average program size in population (points): 74.418
Average percent parens in population: 0.013
Minimum age in population: 139.1440336716606
Maximum age in population: 143.9763339565952
Average age in population: 141.6843746689024
Median age in population: 141.7458917743507
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 139
Genome diversity (% unique Plush genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 139
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.381
Error (vector) diversity:			 0.427
Behavioral diversity:				 0.427
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 148200294
--- Timings ---
Current time: 1529616184901 milliseconds
Total Time:         340.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       130.8 seconds, 38.4%
Fitness Testing:    165.7 seconds, 48.6%
Report:              44.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 58206.59459999996
Test mean error for best: 29.10330
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -0.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -78.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -0.048738954  
Correct output: -10.0587306507 | Program output: -0.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -0.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -73.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 0.0           
Correct output: -61.0452729724 | Program output: -0.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -3.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -0.048738954  
Correct output: -55.2032724973 | Program output: -8.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [3.5679 10 60.0 2 76.3386 13 81.0 3 12.0962 11 5.4091 9 10.01 6 8.0 2 39.7966 11 13.0 11 7.3751 11 56.0 2 38.6711 11 8.0 2 11.3418 12 60.9965 8 36.0 2 72.9213 9 1.1388 9 1.7176 11 0.1994 6 11.0 2 44.9275 8 47.2033 11 0.6434 10]
Total: 899.3541999999999
Mean: 17.987083
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2037.6778146999995
Median total errors in population: 962.2615
Error averages by case: (45.01835850000012 10.11 105.83388360000014 3.212 126.5056640000018 12.525 123.38854769999988 4.113 59.89871399999996 11.096 46.898037699999456 9.344 50.442364500000295 7.733 54.04077459999997 3.245 75.87144910000082 10.984 49.31264290000004 11.085 60.20542359999943 11.419 97.30898839999989 3.186 83.60176740000121 10.788 56.38625240000006 3.222 70.91067660000002 11.286 94.26771039999875 9.091 79.24524070000005 3.2 110.73352310000118 9.76 43.902649200000305 9.26 66.1958461000015 11.089 43.903277299999765 7.633 55.16717139999997 3.396 83.33345500000058 9.442 81.08968429999952 11.06 66.39971220000066 10.537)
Error minima by case: (1.5192 8 56.9496 2 5.6614 2 51.6793 3 0.9038 9 0.4579 2 8.01 2 8.0 2 5.1547 2 0.1095 9 5.3751 10 2.0617 2 5.6711 2 4.8608 1 5.3418 2 1.9582 2 1.2909 2 2.1274 9 0.1388 7 0.2824 10 0.0248 6 11.0 2 4.8787 8 2.7967 10 0.3566 2)
Average genome size in population (length): 72.723
Average program size in population (points): 73.723
Average percent parens in population: 0.014
Minimum age in population: 140.1507626959518
Maximum age in population: 145.4152661626201
Average age in population: 143.0772668310459
Median age in population: 143.13073778738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 132
Genome diversity (% unique Plush genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.414
Error (vector) diversity:			 0.448
Behavioral diversity:				 0.448
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 150018436
--- Timings ---
Current time: 1529616188665 milliseconds
Total Time:         344.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.1 seconds, 38.3%
Fitness Testing:    167.7 seconds, 48.7%
Report:              44.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 58116.19829999995
Test mean error for best: 29.05810
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -1.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -79.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -55.0         
Correct output: -5.4578605766  | Program output: -1.048738954  
Correct output: -10.0587306507 | Program output: -1.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -1.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -74.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -1.0          
Correct output: -61.0452729724 | Program output: -1.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -4.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -1.048738954  
Correct output: -55.2032724973 | Program output: -9.0          
Correct output: 1.6433897119   | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [4.5679 10 60.0 2 75.3386 13 81.0 3 13.0962 11 4.4091 9 9.01 6 8.0 2 38.7966 11 13.0 11 8.3751 11 56.0 2 37.6711 11 8.0 2 12.3418 11 59.9965 7 36.0 2 72.9213 9 1.1388 9 2.7176 11 0.1994 6 11.0 2 45.9275 8 46.2033 11 1.6434 11]
Total: 898.3541999999999
Mean: 17.967085
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2347.4990661999987
Median total errors in population: 944.89175
Error averages by case: (57.757360000000006 10.178 117.02209730000008 3.198 138.34521090000112 12.56 135.02829249999994 4.12 73.24076039999997 11.178 59.903115899999385 9.366 63.60129440000026 7.666 65.08200659999999 3.191 89.04602780000093 10.967 62.003528900000035 11.147 73.43830099999974 11.459 109.69629079999993 3.211 96.43401800000146 10.8 67.29726490000002 3.191 83.04568239999955 11.046 107.39711529999889 9.071 91.68573430000005 3.186 123.77688290000124 9.78 57.29057270000034 9.29 77.42358470000158 11.107 56.24029809999982 7.594 66.33851219999997 3.343 96.58602300000058 9.395 95.55248039999915 11.128 76.65861080000066 10.436)
Error minima by case: (1.5192 9 0.9603 2 4.6614 2 4.3101 2 5.0962 10 0.4579 2 2.0587 2 8.0 2 4.1547 2 0.1095 9 2.6249 10 19.949 2 2.3289 2 8.0 1 8.3418 2 0.9547 2 11.2909 2 0.8726 9 0.1388 7 0.2824 10 0.0154 6 11.0 2 18.8787 8 2.7967 10 0.3566 2)
Average genome size in population (length): 72.576
Average program size in population (points): 73.576
Average percent parens in population: 0.014
Minimum age in population: 141.5509862472511
Maximum age in population: 146.668579458795
Average age in population: 144.4860654706102
Median age in population: 144.5214818590008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.376
Error (vector) diversity:			 0.409
Behavioral diversity:				 0.409
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 151832936
--- Timings ---
Current time: 1529616192347 milliseconds
Total Time:         348.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       133.4 seconds, 38.3%
Fitness Testing:    169.6 seconds, 48.7%
Report:              45.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 58116.19829999995
Test mean error for best: 29.05810
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -1.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -79.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -55.0         
Correct output: -5.4578605766  | Program output: -1.048738954  
Correct output: -10.0587306507 | Program output: -1.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -1.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -74.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -1.0          
Correct output: -61.0452729724 | Program output: -1.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -4.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -1.048738954  
Correct output: -55.2032724973 | Program output: -9.0          
Correct output: 1.6433897119   | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [4.5679 10 60.0 2 75.3386 13 81.0 3 13.0962 11 4.4091 9 9.01 6 8.0 2 38.7966 11 13.0 11 8.3751 11 56.0 2 37.6711 11 8.0 2 12.3418 11 59.9965 7 36.0 2 72.9213 9 1.1388 9 2.7176 11 0.1994 6 11.0 2 45.9275 8 46.2033 11 1.6434 11]
Total: 898.3541999999999
Mean: 17.967085
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2101.918548299999
Median total errors in population: 963.2052
Error averages by case: (47.64053039999988 10.121 108.8971257000001 3.254 125.93349100000178 12.41 126.71713169999988 4.147 62.22258819999997 11.106 50.124124599999426 9.357 53.69370540000025 7.743 56.893171999999964 3.264 78.6729938000009 10.96 52.042697500000024 11.107 62.958425499999365 11.412 100.78249439999988 3.257 85.12158730000127 10.682 59.03775940000006 3.221 73.25239139999996 10.875 97.17197979999872 9.132 82.4206403000001 3.241 113.6035945000012 9.761 46.66531140000032 9.277 67.64876080000174 11.091 45.70452719999975 7.55 58.12691469999996 3.403 86.93143280000068 9.441 84.0134802999993 11.115 68.42368820000067 10.291)
Error minima by case: (0.4808 8 52.0397 2 3.6614 2 65.6899 2 3.0962 9 0.5421 2 7.0587 2 4.5279 2 0.1547 2 0.1095 9 0.3751 10 20.949 2 6.6711 2 8.0 1 1.6582 2 2.0453 2 12.2909 2 1.8726 8 0.09 7 0.2824 9 0.0623 6 0.5683 2 1.1213 8 3.2033 10 0.3566 2)
Average genome size in population (length): 72.637
Average program size in population (points): 73.637
Average percent parens in population: 0.014
Minimum age in population: 143.133908052445
Maximum age in population: 147.9695773602952
Average age in population: 145.9194045307975
Median age in population: 145.9813396934425
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.392
Error (vector) diversity:			 0.426
Behavioral diversity:				 0.427
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 153649036
--- Timings ---
Current time: 1529616195996 milliseconds
Total Time:         352.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.7 seconds, 38.3%
Fitness Testing:    171.4 seconds, 48.7%
Report:              45.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 58116.19829999995
Test mean error for best: 29.05810
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -1.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -79.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -55.0         
Correct output: -5.4578605766  | Program output: -1.048738954  
Correct output: -10.0587306507 | Program output: -1.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -1.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -74.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -1.0          
Correct output: -61.0452729724 | Program output: -1.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -4.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -1.048738954  
Correct output: -55.2032724973 | Program output: -9.0          
Correct output: 1.6433897119   | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [4.5679 10 60.0 2 75.3386 13 81.0 3 13.0962 11 4.4091 9 9.01 6 8.0 2 38.7966 11 13.0 11 8.3751 11 56.0 2 37.6711 11 8.0 2 12.3418 11 59.9965 7 36.0 2 72.9213 9 1.1388 9 2.7176 11 0.1994 6 11.0 2 45.9275 8 46.2033 11 1.6434 11]
Total: 898.3541999999999
Mean: 17.967085
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2100.0324833999985
Median total errors in population: 956.3541999999999
Error averages by case: (47.70527320000033 10.1 107.5106143000001 3.052 129.6677983000018 12.567 125.36749059999988 3.959 62.683124799999966 11.106 50.42051269999918 9.336 54.205731200000535 7.749 56.622455599999974 3.099 80.3966297000009 10.971 53.057988099999996 11.104 63.11322679999948 11.413 100.13851899999992 3.053 87.20957260000128 10.776 58.482841400000055 3.031 69.0382595000002 10.955 98.8303156999985 9.164 81.86879140000003 3.033 114.01547470000118 9.732 47.46384800000033 9.284 65.27895590000165 11.104 46.537034699999545 7.427 57.79202809999997 3.219 86.29381740000083 9.453 85.12241649999937 11.123 65.16876320000064 10.231)
Error minima by case: (0.5192 8 50.9603 2 3.6614 2 3.6899 3 3.0962 9 0.4579 2 8.3722 2 4.3089 2 0.1547 2 0.1095 9 4.3751 9 0.051 2 6.6711 2 6.6837 1 5.3418 2 0.9547 2 3.1138 2 2.1274 8 0.09 7 0.2824 9 3.0E-4 6 11.0 2 7.8787 8 3.7967 10 0.6434 2)
Average genome size in population (length): 71.85
Average program size in population (points): 72.85
Average percent parens in population: 0.014
Minimum age in population: 144.7794223440578
Maximum age in population: 149.2706338443172
Average age in population: 147.2311995697002
Median age in population: 147.2837346959712
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 79
Genome diversity (% unique Plush genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 79
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.374
Error (vector) diversity:			 0.398
Behavioral diversity:				 0.398
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 155445462
--- Timings ---
Current time: 1529616199636 milliseconds
Total Time:         355.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       136.0 seconds, 38.2%
Fitness Testing:    173.3 seconds, 48.7%
Report:              46.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 58328.25289999995
Test mean error for best: 29.16413
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -1.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -77.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -53.0         
Correct output: -5.4578605766  | Program output: -1.048738954  
Correct output: -10.0587306507 | Program output: -1.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -1.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -72.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -50.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -1.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -2.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -1.048738954  
Correct output: -55.2032724973 | Program output: -7.0          
Correct output: 1.6433897119   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_inc float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [4.5679 10 60.0 2 77.3386 13 81.0 3 11.0962 11 4.4091 9 9.01 6 8.0 2 38.7966 11 13.0 11 6.3751 12 56.0 2 39.6711 11 8.0 2 10.3418 11 59.9965 7 36.0 2 72.9213 9 1.1388 9 0.7176 11 0.1994 6 11.0 2 45.9275 8 48.2033 11 0.3566 11]
Total: 896.0673999999998
Mean: 17.921349
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2009.2897733
Median total errors in population: 957.8541999999999
Error averages by case: (43.27773029999998 10.06 106.08749230000019 3.262 125.32537980000183 12.554 122.48856579999989 4.139 57.025276999999974 11.08 47.159175499999286 9.381 50.102179200000464 7.982 54.31235319999996 3.247 75.9232605000009 11.011 50.52254229999999 11.12 58.84729539999953 11.425 97.57979279999982 3.254 83.49202120000133 10.799 56.621579800000085 3.252 64.73686020000066 11.162 93.95834419999883 9.274 79.42740880000014 3.229 110.96699030000119 9.707 44.33800070000032 9.357 57.87466800000146 11.11 43.4064175999997 7.277 55.81691449999997 3.397 82.93130410000057 9.6 80.7540353999993 11.145 58.41018440000064 10.08)
Error minima by case: (0.4808 8 56.9603 2 3.6614 2 30.6899 3 2.0962 9 1.4579 2 8.3722 2 4.5279 2 1.1547 2 0.1095 9 4.3751 10 1.949 2 1.6711 2 5.1392 1 2.3418 2 8.0453 2 8.2909 2 1.1274 9 0.1388 7 0.2824 9 0.0579 6 8.1942 2 3.8787 8 0.7967 10 0.3566 2)
Average genome size in population (length): 71.221
Average program size in population (points): 72.221
Average percent parens in population: 0.014
Minimum age in population: 146.1029516300476
Maximum age in population: 150.7385182307633
Average age in population: 148.6620890366431
Median age in population: 148.6730029193745
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 98
Genome diversity (% unique Plush genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.359
Error (vector) diversity:			 0.384
Behavioral diversity:				 0.384
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 157226104
--- Timings ---
Current time: 1529616203343 milliseconds
Total Time:         359.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.3 seconds, 38.2%
Fitness Testing:    175.2 seconds, 48.8%
Report:              46.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 58328.25289999995
Test mean error for best: 29.16413
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -1.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -77.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -53.0         
Correct output: -5.4578605766  | Program output: -1.048738954  
Correct output: -10.0587306507 | Program output: -1.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -1.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -72.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -50.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -1.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -2.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -1.048738954  
Correct output: -55.2032724973 | Program output: -7.0          
Correct output: 1.6433897119   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_inc float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [4.5679 10 60.0 2 77.3386 13 81.0 3 11.0962 11 4.4091 9 9.01 6 8.0 2 38.7966 11 13.0 11 6.3751 12 56.0 2 39.6711 11 8.0 2 10.3418 11 59.9965 7 36.0 2 72.9213 9 1.1388 9 0.7176 11 0.1994 6 11.0 2 45.9275 8 48.2033 11 0.3566 11]
Total: 896.0673999999998
Mean: 17.921349
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2058.7043806999986
Median total errors in population: 955.4790999999999
Error averages by case: (44.32811740000012 10.081 104.2613988000001 3.04 131.85634440000172 12.477 120.46466119999991 3.948 64.20227049999997 11.128 45.73366789999939 9.332 50.63922660000034 7.929 52.68602099999997 3.084 76.82417160000088 10.929 50.40804300000001 11.126 65.43927009999956 11.451 96.8768370999999 3.026 89.68239210000192 10.76 55.71356980000005 3.051 72.06332460000009 10.935 95.18019619999872 9.129 78.66716800000006 3.011 111.49682170000119 9.706 43.6113976000003 9.354 67.05456910000153 11.149 42.54625639999965 7.283 54.23961809999999 3.199 82.6285315000004 9.621 88.75727119999871 11.153 67.50523480000064 9.936)
Error minima by case: (0.5192 8 59.373 2 3.6614 2 65.6899 2 0.0962 10 2.4579 2 8.01 2 4.5279 2 0.1547 2 0.1095 9 1.6249 9 16.949 2 7.6711 2 7.373 2 5.3418 2 8.0453 2 8.2909 2 2.1274 9 0.09 6 0.2824 9 0.0216 6 8.1942 2 2.0691 8 0.7967 9 0.3566 2)
Average genome size in population (length): 71.787
Average program size in population (points): 72.787
Average percent parens in population: 0.014
Minimum age in population: 147.5723461360892
Maximum age in population: 152.2428506992547
Average age in population: 150.045159106335
Median age in population: 150.106535668022
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 86
Genome diversity (% unique Plush genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.336
Error (vector) diversity:			 0.356
Behavioral diversity:				 0.356
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 159020930
--- Timings ---
Current time: 1529616207038 milliseconds
Total Time:         363.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.6 seconds, 38.2%
Fitness Testing:    177.1 seconds, 48.8%
Report:              47.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 58328.25289999995
Test mean error for best: 29.16413
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -1.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -77.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -53.0         
Correct output: -5.4578605766  | Program output: -1.048738954  
Correct output: -10.0587306507 | Program output: -1.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -1.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -72.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -50.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -1.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -2.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -1.048738954  
Correct output: -55.2032724973 | Program output: -7.0          
Correct output: 1.6433897119   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_inc} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_inc float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [4.5679 10 60.0 2 77.3386 13 81.0 3 11.0962 11 4.4091 9 9.01 6 8.0 2 38.7966 11 13.0 11 6.3751 12 56.0 2 39.6711 11 8.0 2 10.3418 11 59.9965 7 36.0 2 72.9213 9 1.1388 9 0.7176 11 0.1994 6 11.0 2 45.9275 8 48.2033 11 0.3566 11]
Total: 896.0673999999998
Mean: 17.921349
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2240.562946199999
Median total errors in population: 916.9553999999999
Error averages by case: (52.85713980000006 10.141 112.08993560000012 3.189 135.9351262000011 12.474 129.7547682999999 4.097 70.91181619999998 11.123 54.340410399999456 9.458 58.0681088000004 7.853 59.811866199999976 3.178 84.07481790000087 11.046 58.58635970000002 11.148 71.93917409999978 11.436 104.43642269999991 3.18 95.09985870000159 10.731 63.939376300000056 3.192 78.92336599999956 10.807 102.54064349999874 8.898 86.63433120000008 3.166 119.46213270000113 9.785 51.89138600000025 9.424 72.19773760000152 11.118 50.79855489999977 7.547 62.12922939999996 3.3 91.43046440000073 9.48 92.91740899999891 11.154 72.78151060000057 10.086)
Error minima by case: (0.4808 8 60.0 2 0.6614 2 63.0708 3 3.0962 9 1.4579 2 0.9413 2 8.0 2 0.1547 2 0.1095 9 0.3751 10 9.3298 2 7.6711 2 4.2416 2 1.3418 2 0.0453 2 0.6718 2 9.7466 9 0.09 7 0.2824 9 0.0154 6 11.0 2 2.8787 8 2.7967 10 0.3566 2)
Average genome size in population (length): 72.743
Average program size in population (points): 73.743
Average percent parens in population: 0.014
Minimum age in population: 149.1646518284216
Maximum age in population: 153.9742890456255
Average age in population: 151.358932487651
Median age in population: 151.3930466719478
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 112
Genome diversity (% unique Plush genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 112
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.351
Error (vector) diversity:			 0.372
Behavioral diversity:				 0.372
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 160839572
--- Timings ---
Current time: 1529616210682 milliseconds
Total Time:         366.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       139.9 seconds, 38.1%
Fitness Testing:    178.9 seconds, 48.8%
Report:              47.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 58173.72279999996
Test mean error for best: 29.08686
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -3.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -79.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -55.0         
Correct output: -5.4578605766  | Program output: -3.048738954  
Correct output: -10.0587306507 | Program output: -3.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -3.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -74.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -1.0          
Correct output: -61.0452729724 | Program output: -3.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -4.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -3.048738954  
Correct output: -55.2032724973 | Program output: -9.0          
Correct output: 1.6433897119   | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mod} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult integer_mod tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [6.5679 9 60.0 2 75.3386 13 81.0 3 13.0962 11 2.4091 9 7.01 7 8.0 2 36.7966 10 13.0 11 8.3751 11 56.0 2 37.6711 11 8.0 2 12.3418 11 57.9965 8 36.0 2 72.9213 9 1.1388 9 2.7176 11 0.1994 6 11.0 2 47.9275 8 46.2033 11 1.6434 11]
Total: 894.3541999999999
Mean: 17.887083
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2372.104711599999
Median total errors in population: 944.4694
Error averages by case: (58.52470880000026 10.153 117.80219830000013 3.204 143.91945650000082 12.489 134.67661639999992 4.124 79.07927049999996 11.12 59.50175009999929 9.342 64.19491120000049 7.609 63.14626409999999 3.211 89.78253380000099 10.953 59.71607480000001 11.118 80.13328709999993 11.439 110.45528289999984 3.209 103.12678950000158 10.788 68.37320990000005 3.21 86.04597269999913 10.688 106.9395909999986 8.483 91.4280877000001 3.194 124.44626960000123 9.753 57.354238000000336 9.412 76.12736110000145 11.109 56.28314179999951 7.675 65.12186489999998 3.358 96.85943950000087 9.33 96.36299029999898 11.147 76.2334011000006 10.352)
Error minima by case: (1.6167 8 3.9603 1 2.6614 2 19.0 2 0.0962 9 1.4091 2 3.0587 2 8.0 2 1.1547 2 0.1095 9 4.3751 10 32.949 2 1.3289 2 8.0 2 8.3418 2 8.0453 2 36.0 2 14.1274 7 0.09 7 0.2824 9 0.0248 6 11.0 2 7.8787 7 1.2033 10 0.3566 2)
Average genome size in population (length): 74.227
Average program size in population (points): 75.227
Average percent parens in population: 0.013
Minimum age in population: 150.1817574688135
Maximum age in population: 154.9742890456255
Average age in population: 152.647723314039
Median age in population: 152.6564319469958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 157
Genome diversity (% unique Plush genomes):	 0.706
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 157
Syntactic diversity (% unique Push programs):	 0.706
Total error diversity:				 0.357
Error (vector) diversity:			 0.378
Behavioral diversity:				 0.379
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 162695464
--- Timings ---
Current time: 1529616214397 milliseconds
Total Time:         370.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.1 seconds, 38.1%
Fitness Testing:    180.9 seconds, 48.8%
Report:              48.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 58173.72279999996
Test mean error for best: 29.08686
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -3.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -79.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -55.0         
Correct output: -5.4578605766  | Program output: -3.048738954  
Correct output: -10.0587306507 | Program output: -3.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -3.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -74.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -1.0          
Correct output: -61.0452729724 | Program output: -3.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -4.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -3.048738954  
Correct output: -55.2032724973 | Program output: -9.0          
Correct output: 1.6433897119   | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mod} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult integer_mod tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [6.5679 9 60.0 2 75.3386 13 81.0 3 13.0962 11 2.4091 9 7.01 7 8.0 2 36.7966 10 13.0 11 8.3751 11 56.0 2 37.6711 11 8.0 2 12.3418 11 57.9965 8 36.0 2 72.9213 9 1.1388 9 2.7176 11 0.1994 6 11.0 2 47.9275 8 46.2033 11 1.6434 11]
Total: 894.3541999999999
Mean: 17.887083
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2185.2260310999995
Median total errors in population: 944.9046
Error averages by case: (50.917410000000075 10.193 109.99467030000007 3.095 135.6995825000012 12.455 126.94867629999993 4.019 70.57976509999997 11.097 51.68382219999972 9.281 55.02061900000021 7.539 58.574024199999975 3.107 80.57406840000085 10.865 52.91984430000001 11.113 70.96860969999997 11.447 102.21641789999993 3.127 95.72880290000136 10.74 61.97094990000003 3.058 78.08502709999927 10.65 99.395160999999 8.317 83.51825610000004 3.067 114.60145330000113 9.784 47.65982110000031 9.418 72.26889830000121 11.073 46.6116262999998 7.79 60.497342499999995 3.245 89.20870640000057 9.327 92.04920039999925 11.13 72.29927590000048 10.297)
Error minima by case: (1.4808 8 39.9603 2 3.6614 2 7.3101 2 1.0962 9 0.4579 2 7.01 2 7.0 2 0.8453 2 0.1095 9 4.3751 10 2.3839 2 0.3289 2 2.7043 1 8.3418 2 2.0453 2 1.4687 2 1.1274 9 0.09 7 0.2824 9 0.0154 6 10.0 1 15.1213 8 2.7967 10 0.3566 2)
Average genome size in population (length): 74.536
Average program size in population (points): 75.536
Average percent parens in population: 0.013
Minimum age in population: 151.1896432896985
Maximum age in population: 156.1247096738736
Average age in population: 154.1031531687953
Median age in population: 154.1374689727818
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 130
Genome diversity (% unique Plush genomes):	 0.715
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 130
Syntactic diversity (% unique Push programs):	 0.715
Total error diversity:				 0.367
Error (vector) diversity:			 0.393
Behavioral diversity:				 0.393
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 164559048
--- Timings ---
Current time: 1529616218168 milliseconds
Total Time:         374.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       142.4 seconds, 38.1%
Fitness Testing:    182.8 seconds, 48.9%
Report:              48.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 58142.29629999996
Test mean error for best: 29.07115
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -3.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -79.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -55.0         
Correct output: -5.4578605766  | Program output: -3.048738954  
Correct output: -10.0587306507 | Program output: -3.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -3.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -74.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -52.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: -1.0          
Correct output: -61.0452729724 | Program output: -3.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -4.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -3.048738954  
Correct output: -55.2032724973 | Program output: -9.0          
Correct output: 1.6433897119   | Program output: 0.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_add} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mod} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_add -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult integer_mod tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [6.5679 9 60.0 2 75.3386 13 81.0 3 13.0962 11 2.4091 9 7.01 7 8.0 2 36.7966 10 13.0 11 8.3751 11 56.0 2 37.6711 11 8.0 2 12.3418 11 57.9965 8 36.0 2 72.9213 9 1.1388 9 2.7176 11 0.1994 6 11.0 2 47.9275 8 46.2033 11 1.6434 11]
Total: 894.3541999999999
Mean: 17.887083
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2168.3104737
Median total errors in population: 970.3541999999999
Error averages by case: (52.72664810000018 10.166 110.40183630000008 3.156 131.89094960000165 12.467 127.10406209999992 4.055 63.052046599999976 11.086 52.96669069999939 9.37 56.856105000000404 7.794 60.08874699999997 3.226 82.84944640000089 10.953 57.004713200000026 11.157 65.40916929999959 11.612 102.70438129999991 3.16 88.92478780000124 10.731 62.076950000000046 3.176 71.0809988 10.577 100.98629129999884 8.603 84.13423170000004 3.165 117.71093250000115 9.812 51.298151500000316 9.462 66.62438540000132 11.118 50.22777179999973 7.739 61.04245509999998 3.358 90.2311848000007 9.461 86.40265079999934 11.135 67.77188660000031 10.204)
Error minima by case: (2.5192 9 59.0521 2 2.6614 2 65.6899 3 0.0962 9 0.4579 2 1.9413 2 8.0 2 2.1547 2 0.8905 9 0.3751 11 16.949 2 4.3289 2 7.0521 1 1.6582 2 2.0453 2 8.2909 2 1.1274 9 0.09 7 0.2824 9 0.0579 6 11.0 2 1.2723 8 2.7967 10 0.3566 2)
Average genome size in population (length): 75.035
Average program size in population (points): 76.035
Average percent parens in population: 0.013
Minimum age in population: 153.2491673110799
Maximum age in population: 157.5765339371488
Average age in population: 155.5415566708166
Median age in population: 155.5913903668924
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 65
Genome diversity (% unique Plush genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 65
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.4
Error (vector) diversity:			 0.43
Behavioral diversity:				 0.431
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 166435050
--- Timings ---
Current time: 1529616221903 milliseconds
Total Time:         377.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.7 seconds, 38.0%
Fitness Testing:    184.7 seconds, 48.9%
Report:              49.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 58260.91609999996
Test mean error for best: 29.13046
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -4.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -78.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -4.048738954  
Correct output: -10.0587306507 | Program output: -4.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -4.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -73.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 0.0           
Correct output: -61.0452729724 | Program output: -4.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -3.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -4.048738954  
Correct output: -55.2032724973 | Program output: -8.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_add} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mod} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_add -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult integer_mod tagged_118 integer_mod integer_min float_dec integer_add float_dec integer_min float_dec integer_mult float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [7.5679 10 60.0 2 76.3386 13 81.0 3 12.0962 11 1.4091 9 6.01 7 8.0 2 35.7966 11 13.0 11 7.3751 11 56.0 2 38.6711 11 8.0 2 11.3418 12 56.9965 8 36.0 2 72.9213 9 1.1388 9 1.7176 11 0.1994 6 11.0 2 48.9275 7 47.2033 11 0.6434 10]
Total: 891.3541999999999
Mean: 17.827084
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2418.9693853000003
Median total errors in population: 960.5803
Error averages by case: (62.62646510000058 10.2 120.69489000000014 3.288 142.04218370000095 12.495 137.51633039999993 4.151 73.45279669999998 11.137 63.541300099998935 9.375 67.02300220000063 7.761 69.12467729999997 3.268 92.07052160000089 10.938 64.2155347 11.161 75.69872449999981 11.797 113.00010219999987 3.258 100.04228690000133 10.723 72.67654580000006 3.27 80.99723209999979 10.58 110.00364319999842 8.526 95.01457520000008 3.221 127.73505730000119 9.882 61.779524600000244 9.465 75.3894592000015 11.147 60.81155619999957 7.902 70.58023409999998 3.414 101.03012800000086 9.437 97.97668539999908 11.189 76.11592880000009 10.225)
Error minima by case: (0.5192 9 31.9603 2 0.3386 2 15.3101 3 0.0962 9 0.4091 2 5.01 2 8.0 2 4.1547 2 0.8905 9 0.3751 10 4.6395 2 2.6711 2 0.4487 1 0.6582 2 7.0453 2 4.0185 2 10.1274 9 0.09 7 0.2824 9 0.0216 6 11.0 2 12.2406 7 2.7967 10 0.3566 2)
Average genome size in population (length): 74.899
Average program size in population (points): 75.899
Average percent parens in population: 0.013
Minimum age in population: 154.7424637235667
Maximum age in population: 158.7599595903355
Average age in population: 156.9124304710539
Median age in population: 156.9564497450791
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 102
Genome diversity (% unique Plush genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 102
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.392
Error (vector) diversity:			 0.412
Behavioral diversity:				 0.412
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 168307659
--- Timings ---
Current time: 1529616225742 milliseconds
Total Time:         381.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.1 seconds, 38.0%
Fitness Testing:    186.6 seconds, 48.9%
Report:              49.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 58260.91609999996
Test mean error for best: 29.13046
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -4.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -78.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -4.048738954  
Correct output: -10.0587306507 | Program output: -4.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -4.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -73.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 0.0           
Correct output: -61.0452729724 | Program output: -4.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -3.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -4.048738954  
Correct output: -55.2032724973 | Program output: -8.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_add} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_max} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mod} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_add -76 float_pop integer_sub float_max float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult integer_mod tagged_118 integer_mod integer_min float_dec integer_add float_dec integer_min float_dec integer_mult float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [7.5679 10 60.0 2 76.3386 13 81.0 3 12.0962 11 1.4091 9 6.01 7 8.0 2 35.7966 11 13.0 11 7.3751 11 56.0 2 38.6711 11 8.0 2 11.3418 12 56.9965 8 36.0 2 72.9213 9 1.1388 9 1.7176 11 0.1994 6 11.0 2 48.9275 7 47.2033 11 0.6434 10]
Total: 891.3541999999999
Mean: 17.827084
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2337.7290991999994
Median total errors in population: 935.36005
Error averages by case: (57.78788549999991 10.154 116.58697240000009 3.199 143.505838400001 12.554 133.06653919999994 4.086 73.90164159999998 11.143 57.9347357999996 9.376 61.82333850000021 7.753 66.26160689999999 3.236 87.79843140000084 10.886 61.284299399999995 11.136 75.98028899999979 11.892 109.00912419999995 3.19 100.17224320000126 10.764 67.57379910000003 3.14 78.87687179999985 10.558 106.6801794999989 8.547 91.14985250000005 3.151 122.72976890000119 9.804 56.21419730000032 9.429 72.83523670000118 11.177 55.23136849999987 7.785 67.7571943 3.386 95.91742190000062 9.379 97.33242559999918 11.18 73.13683759999996 10.276)
Error minima by case: (0.6749 9 3.9603 2 2.6614 2 22.3101 2 2.0962 9 0.4091 2 1.0587 2 4.5279 2 0.1547 2 0.8905 9 1.6249 10 15.949 2 3.6711 2 8.0 2 3.3418 2 0.0453 2 7.2909 2 3.1274 9 0.09 7 0.2824 10 0.0366 6 8.1942 2 2.3896 7 1.2033 10 0.3566 2)
Average genome size in population (length): 75.537
Average program size in population (points): 76.537
Average percent parens in population: 0.013
Minimum age in population: 155.7424637235667
Maximum age in population: 160.4293155351458
Average age in population: 158.3129262956291
Median age in population: 158.3117889703269
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 110
Genome diversity (% unique Plush genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 110
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.39
Error (vector) diversity:			 0.407
Behavioral diversity:				 0.407
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 170196243
--- Timings ---
Current time: 1529616229556 milliseconds
Total Time:         385.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       146.4 seconds, 38.0%
Fitness Testing:    188.6 seconds, 48.9%
Report:              50.4 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 58333.25449999995
Test mean error for best: 29.16663
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -78.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -73.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 0.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -3.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -8.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mod} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult integer_mod tagged_118 integer_mod integer_min float_dec integer_add float_dec integer_min float_dec integer_mult float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [9.5679 10 60.0 2 76.3386 13 81.0 3 12.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 7.3751 11 56.0 2 38.6711 11 8.0 2 11.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 1.7176 11 0.1994 6 11.0 2 50.9275 8 47.2033 11 0.6434 10]
Total: 888.536
Mean: 17.77072
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2476.289118399999
Median total errors in population: 949.4552
Error averages by case: (63.92933920000039 10.107 122.35784980000012 3.381 145.00052130000049 12.561 139.19508799999988 4.234 75.92403029999998 11.158 65.13506999999909 9.408 68.42422550000039 7.96 72.46971970000004 3.419 94.33225170000095 10.827 69.32034200000001 11.184 78.24718319999988 11.838 114.47013679999986 3.359 102.89773840000164 10.728 74.502883 3.392 84.05201659999953 10.712 111.13030879999846 8.721 97.35137790000016 3.367 128.59815290000114 9.803 62.7554600000003 9.445 78.64105960000131 11.107 61.85151109999964 7.87 73.62682389999996 3.581 102.49357490000106 9.391 101.44578189999872 11.201 79.04667190000009 10.336)
Error minima by case: (1.5192 8 60.0 2 2.6614 2 64.6899 2 2.0962 10 0.4091 2 3.01 2 7.0 2 0.8453 2 0.1095 9 2.3751 9 14.7795 2 7.6711 2 8.0 1 3.3418 2 2.0453 2 6.1214 2 8.1274 9 0.1388 7 0.2824 9 0.153 6 10.0 1 15.2924 7 2.7967 9 0.3566 2)
Average genome size in population (length): 77.42
Average program size in population (points): 78.42
Average percent parens in population: 0.013
Minimum age in population: 156.7424637235667
Maximum age in population: 161.7348007685298
Average age in population: 159.8107192632033
Median age in population: 159.8467638582808
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 71
Genome diversity (% unique Plush genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 71
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.398
Error (vector) diversity:			 0.426
Behavioral diversity:				 0.426
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 172131868
--- Timings ---
Current time: 1529616233381 milliseconds
Total Time:         389.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.7 seconds, 37.9%
Fitness Testing:    190.5 seconds, 48.9%
Report:              51.0 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 58333.25449999995
Test mean error for best: 29.16663
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -78.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -73.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 0.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -3.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -8.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mod} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult integer_mod tagged_118 integer_mod integer_min float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [9.5679 10 60.0 2 76.3386 13 81.0 3 12.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 7.3751 11 56.0 2 38.6711 11 8.0 2 11.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 1.7176 11 0.1994 6 11.0 2 50.9275 8 47.2033 11 0.6434 10]
Total: 888.536
Mean: 17.77072
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2254.0008384000007
Median total errors in population: 967.6039999999999
Error averages by case: (55.40296860000018 9.92 112.93138790000019 3.311 140.12564390000102 12.473 130.3355352999999 4.199 71.07403099999998 11.108 53.85046989999961 9.411 57.67421840000031 8.207 61.073282899999974 3.244 83.37284290000078 10.732 58.544468499999994 11.147 73.32664609999995 11.685 104.92352159999983 3.29 97.95229720000155 10.691 64.56993920000006 3.271 75.64855209999965 10.723 101.75967099999887 8.964 87.33837990000013 3.286 120.6948167000012 9.744 53.97962410000027 9.439 71.30412160000111 11.084 53.03312779999984 7.784 62.41402099999997 3.382 93.06944970000063 9.349 92.82083319999903 11.16 68.92598790000028 10.251)
Error minima by case: (0.5192 8 60.0 2 2.6614 2 62.6899 3 0.9038 9 0.4091 1 3.3722 2 6.0 1 1.9681 2 0.1095 2 1.6249 10 18.949 2 7.6711 2 7.0487 1 0.6582 2 0.0453 2 10.2909 2 0.0018 8 0.1388 7 0.2824 10 0.1076 6 9.0 2 1.1213 7 1.7967 10 0.3566 2)
Average genome size in population (length): 80.999
Average program size in population (points): 81.999
Average percent parens in population: 0.012
Minimum age in population: 158.5306778803335
Maximum age in population: 163.1258384006796
Average age in population: 161.2337742720484
Median age in population: 161.2833961712504
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.416
Error (vector) diversity:			 0.442
Behavioral diversity:				 0.443
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 174157036
--- Timings ---
Current time: 1529616237379 milliseconds
Total Time:         393.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       149.0 seconds, 37.9%
Fitness Testing:    192.6 seconds, 49.0%
Report:              51.6 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 58333.25449999995
Test mean error for best: 29.16663
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -78.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -73.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 0.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -3.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -8.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mod} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult integer_mod tagged_118 integer_mod integer_min float_dec integer_add float_dec integer_min float_dec integer_mult float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [9.5679 10 60.0 2 76.3386 13 81.0 3 12.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 7.3751 11 56.0 2 38.6711 11 8.0 2 11.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 1.7176 11 0.1994 6 11.0 2 50.9275 8 47.2033 11 0.6434 10]
Total: 888.536
Mean: 17.77072
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2708.8273735000007
Median total errors in population: 970.0621
Error averages by case: (75.87157199999956 9.951 130.28013100000015 3.336 152.1896091 12.383 147.81226219999988 4.227 88.02998789999998 11.155 73.49264309999984 9.38 76.99826239999977 8.41 80.18573450000012 3.324 101.78774600000085 10.576 76.29616319999997 11.22 87.97995450000015 11.574 122.75897619999982 3.331 111.7306435000018 10.682 82.82667869999995 3.321 94.69354209999904 10.732 119.62951549999849 9.137 105.4556367000002 3.318 138.96916510000045 9.847 73.9062610000003 9.528 90.68791260000144 11.148 72.81739779999965 7.973 81.66652609999997 3.472 113.03024210000113 9.444 109.44984189999886 11.176 91.4799683000005 10.156)
Error minima by case: (1.5192 8 40.0 1 2.6614 2 19.0 2 0.9038 8 0.2286 2 3.0587 2 7.0 2 2.1547 2 0.1095 9 1.6249 10 3.9115 2 4.6711 2 6.1767 1 8.3418 2 5.0453 2 4.7465 2 3.1274 9 0.1388 7 0.2824 9 0.0579 6 10.0 1 2.8787 7 1.7967 9 0.3566 2)
Average genome size in population (length): 84.921
Average program size in population (points): 85.921
Average percent parens in population: 0.012
Minimum age in population: 160.1744688864533
Maximum age in population: 164.5010528171209
Average age in population: 162.6458356555183
Median age in population: 162.7102331337245
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 37
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 37
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.44
Error (vector) diversity:			 0.462
Behavioral diversity:				 0.463
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 176280462
--- Timings ---
Current time: 1529616241349 milliseconds
Total Time:         397.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.3 seconds, 37.8%
Fitness Testing:    194.7 seconds, 49.0%
Report:              52.1 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 58333.25449999995
Test mean error for best: 29.16663
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -78.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -54.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -73.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -51.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 0.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -3.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -8.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mod} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mod integer_min float_dec integer_add integer_mod integer_min float_dec integer_mult integer_mod tagged_118 integer_mod integer_min float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [9.5679 10 60.0 2 76.3386 13 81.0 3 12.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 7.3751 11 56.0 2 38.6711 11 8.0 2 11.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 1.7176 11 0.1994 6 11.0 2 50.9275 8 47.2033 11 0.6434 10]
Total: 888.536
Mean: 17.77072
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2437.7146989999987
Median total errors in population: 956.3541999999999
Error averages by case: (62.77752230000023 9.977 120.29992280000012 3.131 142.1093662000007 12.428 137.74084149999993 4.029 78.59270659999997 11.163 62.41462369999928 9.284 64.8907557000004 8.408 69.4943246 3.169 90.41732530000087 10.665 65.20626560000002 11.18 79.84596590000011 11.52 113.14641959999987 3.116 102.18333170000177 10.704 71.55429800000003 3.099 82.49563299999956 10.762 108.15174389999835 9.132 95.8423081000001 3.102 128.5203942000012 9.751 62.515121400000275 9.462 79.11836980000147 11.153 61.546916399999596 7.711 71.38301009999996 3.284 102.79907230000106 9.323 98.28143169999889 11.165 79.65102860000052 10.018)
Error minima by case: (1.6167 8 60.0 2 0.6614 2 65.6899 3 0.0962 10 0.0385 2 2.01 2 8.0 2 0.1547 2 0.1095 9 4.3751 9 14.7846 2 7.6711 2 8.0 1 3.3418 2 3.9148 2 6.1266 2 2.1274 8 0.1875 7 0.2824 9 0.1712 6 11.0 2 8.5282 7 1.7967 10 0.3566 2)
Average genome size in population (length): 87.437
Average program size in population (points): 88.437
Average percent parens in population: 0.011
Minimum age in population: 161.1744688864533
Maximum age in population: 165.7992457070552
Average age in population: 163.9325900447146
Median age in population: 164.002668985992
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.434
Error (vector) diversity:			 0.469
Behavioral diversity:				 0.469
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 178466821
--- Timings ---
Current time: 1529616245537 milliseconds
Total Time:         401.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.6 seconds, 37.8%
Fitness Testing:    196.9 seconds, 49.1%
Report:              52.7 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 58578.297099999945
Test mean error for best: 29.28915
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 3.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_add tagged_118 integer_mod integer_min float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 50.9275 8 49.2033 11 1.3566 11]
Total: 887.814
Mean: 17.75628
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2408.558640200001
Median total errors in population: 970.4737
Error averages by case: (62.791443900000196 10.01 121.1688111000001 3.111 140.61488740000092 12.468 138.8949331999999 3.987 76.47007909999996 11.116 60.75829749999953 9.203 64.06804170000042 8.434 68.97796470000003 3.097 89.0974620000009 10.854 63.362993200000005 11.141 78.10545989999987 11.538 114.23616199999994 3.1 99.90403280000139 10.731 72.5300552 3.07 80.08744009999967 11.0 106.4309953999988 9.131 96.12752180000005 3.063 127.51612420000116 9.703 61.1503418000003 9.41 76.5546969000013 11.124 59.02405439999954 7.45 70.40693649999997 3.224 101.9711711000008 9.366 96.86922819999906 11.168 74.90750610000053 10.033)
Error minima by case: (0.9017 8 34.9603 2 0.3386 2 29.6899 2 4.0962 10 0.0385 2 1.9613 2 5.0 1 0.1547 2 0.1095 1 0.6249 10 24.051 2 0.6711 2 7.0 1 3.3418 2 4.0453 2 32.7091 2 43.1274 9 0.09 7 0.2824 9 0.0216 6 8.0 2 7.8787 7 1.7967 10 0.3566 2)
Average genome size in population (length): 90.882
Average program size in population (points): 91.882
Average percent parens in population: 0.011
Minimum age in population: 162.9473475499803
Maximum age in population: 167.273289354351
Average age in population: 165.3731176295527
Median age in population: 165.4355560188355
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.427
Error (vector) diversity:			 0.448
Behavioral diversity:				 0.448
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 180739331
--- Timings ---
Current time: 1529616249637 milliseconds
Total Time:         405.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       152.9 seconds, 37.7%
Fitness Testing:    199.1 seconds, 49.1%
Report:              53.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 58578.297099999945
Test mean error for best: 29.28915
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 3.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_rot} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_rot integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_add tagged_118 integer_mod integer_min float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 50.9275 8 49.2033 11 1.3566 11]
Total: 887.814
Mean: 17.75628
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2467.9687799999983
Median total errors in population: 964.4790999999999
Error averages by case: (67.45994849999973 10.074 123.2820067000001 3.216 140.23462370000064 12.661 141.00144259999993 4.095 73.88837319999998 11.128 64.25857289999958 9.356 67.95136480000001 8.738 72.79497950000005 3.193 93.71178280000096 11.076 69.03476459999997 11.211 76.45229539999998 11.576 116.33437169999989 3.222 98.37267770000177 10.881 75.77312269999997 3.214 80.88749299999948 11.156 111.94345209999858 9.345 98.59634110000013 3.193 130.6737413000012 9.787 64.46485610000032 9.482 75.63811120000148 11.123 63.44338959999951 7.414 74.55599679999996 3.326 105.28113730000103 9.618 96.10607369999899 11.215 76.41886100000052 10.109)
Error minima by case: (1.4808 9 38.9603 1 0.3386 2 8.3101 2 0.0962 9 0.0385 2 0.01 2 3.9513 2 1.8453 2 0.1095 8 3.3751 10 12.051 2 2.3289 2 8.0 1 7.3418 2 8.0453 2 10.2909 2 0.1274 8 0.1388 7 0.2824 9 0.0579 6 6.9513 2 17.0839 7 0.7967 10 0.3566 2)
Average genome size in population (length): 93.523
Average program size in population (points): 94.523
Average percent parens in population: 0.011
Minimum age in population: 164.1933208910868
Maximum age in population: 169.273289354351
Average age in population: 166.7715984946183
Median age in population: 166.7968821414703
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.415
Error (vector) diversity:			 0.437
Behavioral diversity:				 0.438
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 183077823
--- Timings ---
Current time: 1529616253864 milliseconds
Total Time:         409.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.3 seconds, 37.7%
Fitness Testing:    201.3 seconds, 49.1%
Report:              54.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 58578.297099999945
Test mean error for best: 29.28915
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 3.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_rot} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_rot integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 50.9275 8 49.2033 11 1.3566 11]
Total: 887.814
Mean: 17.75628
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2121.8433337
Median total errors in population: 967.6039999999999
Error averages by case: (47.8959911000001 10.06 108.56267260000014 3.121 136.57941080000123 12.594 127.85210759999988 3.997 68.35493559999996 11.083 46.45865729999996 9.209 48.32969050000023 8.506 57.736978199999974 3.13 74.18596510000079 10.981 51.942223999999996 11.11 70.18890159999971 11.561 100.47848789999989 3.09 94.47976680000153 10.828 59.205160200000066 3.11 72.87488909999999 11.108 92.17638419999898 9.011 82.9073462000001 3.105 114.09336100000118 9.671 46.21841840000031 9.371 66.6379598000012 11.083 45.272404299999735 7.332 59.35441379999996 3.259 88.71525990000073 9.515 88.0707497999991 11.173 66.30619790000047 9.957)
Error minima by case: (1.5679 8 59.0 2 1.6614 2 63.6899 2 2.0962 9 0.0385 2 0.01 2 8.0 2 0.1547 2 0.1095 9 0.6249 10 14.8117 2 8.3289 2 7.0 1 7.3418 2 3.9685 2 6.1536 2 2.1274 8 0.1388 7 0.2824 9 0.0579 6 11.0 2 16.6359 7 1.7967 9 0.3566 2)
Average genome size in population (length): 95.593
Average program size in population (points): 96.593
Average percent parens in population: 0.010
Minimum age in population: 165.8251934122835
Maximum age in population: 170.3492219855913
Average age in population: 168.1173361969468
Median age in population: 168.1590422881556
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.427
Error (vector) diversity:			 0.448
Behavioral diversity:				 0.448
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 185467865
--- Timings ---
Current time: 1529616257980 milliseconds
Total Time:         413.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       155.6 seconds, 37.6%
Fitness Testing:    203.6 seconds, 49.2%
Report:              54.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 58578.297099999945
Test mean error for best: 29.28915
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 3.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush} {:instruction integer_yankdup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_min float_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_add float_dec integer_min float_dec integer_mult float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush integer_yankdup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 50.9275 8 49.2033 11 1.3566 11]
Total: 887.814
Mean: 17.75628
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2613.593903799999
Median total errors in population: 972.3541999999999
Error averages by case: (73.55300959999964 10.175 129.09628760000018 3.392 147.7271709000004 12.653 146.0029567999999 4.253 81.77519859999997 11.164 69.2491060999999 9.467 72.52837619999983 8.853 78.33801970000012 3.403 98.20031010000096 11.139 75.15806129999997 11.25 83.59541430000024 11.633 121.89357699999981 3.367 106.95117650000152 10.911 81.73493459999992 3.341 85.83410039999906 11.133 116.44048189999879 9.253 104.0887882000002 3.321 135.85279220000078 9.841 69.87404840000035 9.517 80.85459260000133 11.164 69.0141630999996 7.422 80.08312199999996 3.544 110.56179450000073 9.837 103.01034319999893 11.256 80.84507800000053 10.042)
Error minima by case: (1.5192 8 10.0397 2 0.6614 2 57.3101 3 3.0962 9 0.2286 2 0.99 2 8.0 2 0.1547 2 0.1095 9 0.6249 10 17.949 2 6.6711 2 8.0 2 0.3418 2 1.0453 2 9.2909 2 1.1274 9 0.09 6 0.2824 9 0.0216 6 11.0 2 14.8787 7 2.7967 10 0.3566 2)
Average genome size in population (length): 96.696
Average program size in population (points): 97.696
Average percent parens in population: 0.010
Minimum age in population: 166.8443092724713
Maximum age in population: 171.6898399255338
Average age in population: 169.5226648267679
Median age in population: 169.5613224454635
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.412
Error (vector) diversity:			 0.433
Behavioral diversity:				 0.433
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 187885674
--- Timings ---
Current time: 1529616262143 milliseconds
Total Time:         418.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.9 seconds, 37.5%
Fitness Testing:    205.8 seconds, 49.2%
Report:              55.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 58528.146199999945
Test mean error for best: 29.26407
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 50.9275 8 49.2033 11 0.3566 11]
Total: 886.814
Mean: 17.73628
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2303.8236058
Median total errors in population: 979.01935
Error averages by case: (57.78630740000005 10.123 114.72527080000012 3.331 142.64863700000072 12.594 131.9500716999999 4.213 72.75631239999998 11.206 55.49617960000008 9.436 58.4054158000003 8.817 63.14525939999997 3.3 84.72394610000094 11.075 60.32340639999997 11.162 75.74257520000002 11.714 106.56358619999988 3.314 100.59219430000186 10.818 65.98887850000006 3.314 78.66844979999938 10.949 103.18647849999863 9.197 88.81341860000012 3.302 121.5361013000012 9.768 54.49407250000036 9.468 72.99467850000107 11.124 53.759928699999634 7.391 64.54593139999996 3.482 96.63671280000104 9.797 94.7716079999987 11.232 73.4831849000004 9.958)
Error minima by case: (0.3833 8 40.0 1 0.3386 2 19.0 2 1.0962 10 0.2286 2 0.6394 2 1.7618 2 4.1547 2 0.1095 9 1.6249 10 2.7325 2 5.6711 2 2.3557 1 0.6582 2 9.0453 2 5.9255 2 2.1274 8 0.09 7 0.2824 10 0.0154 6 3.4317 2 17.8787 7 3.7967 10 0.3566 2)
Average genome size in population (length): 97.188
Average program size in population (points): 98.188
Average percent parens in population: 0.010
Minimum age in population: 168.1237541956715
Maximum age in population: 173.0456700505896
Average age in population: 170.8060802271276
Median age in population: 170.816214221384
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.42
Error (vector) diversity:			 0.444
Behavioral diversity:				 0.444
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 190315970
--- Timings ---
Current time: 1529616266357 milliseconds
Total Time:         422.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.3 seconds, 37.5%
Fitness Testing:    208.1 seconds, 49.3%
Report:              55.8 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 58528.146199999945
Test mean error for best: 29.26407
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 50.9275 8 49.2033 11 0.3566 11]
Total: 886.814
Mean: 17.73628
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2108.6474896
Median total errors in population: 962.7271999999999
Error averages by case: (50.59516240000028 10.092 109.3811750000001 3.082 131.5680035000018 12.604 126.9628672999999 3.961 61.77495509999998 11.065 49.06465140000008 9.291 51.50423540000053 8.606 57.56049469999997 3.1 77.49687990000093 10.913 50.131054399999975 11.046 63.04185389999945 11.782 101.80520139999987 3.102 89.32842800000154 10.713 60.813791600000044 3.065 67.55796470000038 11.128 94.81944609999866 8.997 84.07395700000009 3.052 114.91725160000122 9.678 47.85261100000032 9.382 63.316515800000914 10.995 46.974467799999594 7.32 59.31416489999995 3.241 90.43821590000088 9.708 86.23351929999906 11.166 64.81262150000019 10.219)
Error minima by case: (1.5192 8 36.9603 2 0.6614 2 10.3101 2 3.0962 9 0.0021 2 0.01 2 3.0858 2 0.1547 2 0.1095 9 0.6249 10 14.051 2 9.3289 2 7.0 1 0.3418 2 1.2594 2 5.6828 2 4.7356 9 0.09 7 0.2824 9 0.018 6 11.0 2 0.8787 7 0.2033 9 0.3566 2)
Average genome size in population (length): 97.525
Average program size in population (points): 98.525
Average percent parens in population: 0.010
Minimum age in population: 169.5475570121298
Maximum age in population: 174.3852603068563
Average age in population: 172.1217065726756
Median age in population: 172.154541450209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.445
Error (vector) diversity:			 0.467
Behavioral diversity:				 0.467
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 192754548
--- Timings ---
Current time: 1529616270592 milliseconds
Total Time:         426.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.6 seconds, 37.4%
Fitness Testing:    210.4 seconds, 49.3%
Report:              56.4 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 58528.146199999945
Test mean error for best: 29.26407
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 50.9275 8 49.2033 11 0.3566 11]
Total: 886.814
Mean: 17.73628
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2383.3339447999997
Median total errors in population: 989.133
Error averages by case: (61.17819520000054 10.088 118.99208520000009 3.318 149.22073890000036 12.616 135.28067699999988 4.209 77.91050049999997 11.175 58.39775030000012 9.343 61.087568500000565 8.688 66.63363339999994 3.309 87.33539140000097 10.992 60.976663399999964 11.115 81.47319759999995 12.003 110.98339409999991 3.306 106.12983950000182 10.654 69.23056960000008 3.29 78.9651105999998 11.089 105.15518619999858 9.067 92.94503590000011 3.299 122.67595790000124 9.733 56.89349910000031 9.419 74.47272760000037 11.001 56.04492419999957 7.368 67.88217529999999 3.486 99.65665730000086 9.739 100.0544285999989 11.226 73.8900375 10.335)
Error minima by case: (0.4808 8 11.0397 2 1.6614 2 19.0 2 0.9038 9 0.0012 2 0.01 2 7.0 2 1.1547 2 0.1095 9 2.6249 8 33.6315 2 1.3289 2 8.0 1 0.3418 2 1.7443 2 24.9734 2 10.8726 9 0.09 7 0.2824 9 0.1712 6 10.0 1 4.8787 7 1.7967 10 0.3566 2)
Average genome size in population (length): 96.861
Average program size in population (points): 97.861
Average percent parens in population: 0.010
Minimum age in population: 171.2128576158473
Maximum age in population: 175.4501165441145
Average age in population: 173.3820302335332
Median age in population: 173.4280764400614
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.443
Error (vector) diversity:			 0.47
Behavioral diversity:				 0.47
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 195176316
--- Timings ---
Current time: 1529616274884 milliseconds
Total Time:         430.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.9 seconds, 37.4%
Fitness Testing:    212.7 seconds, 49.4%
Report:              57.0 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 58528.146199999945
Test mean error for best: 29.26407
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 50.9275 8 49.2033 11 0.3566 11]
Total: 886.814
Mean: 17.73628
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2047.9661525000035
Median total errors in population: 969.4790999999999
Error averages by case: (48.51430299999988 10.083 107.01670410000015 3.166 134.87480140000142 12.659 124.84840299999988 4.089 58.64138619999998 11.102 46.550794200000034 9.363 48.74684590000007 8.674 55.44995429999997 3.238 75.24915770000099 11.008 51.72629969999996 11.096 62.920404699999715 12.011 98.58860449999983 3.24 89.44695350000156 10.6 58.15477010000006 3.183 60.274885600000424 11.13 94.273987299999 9.101 81.12242110000014 3.166 113.34159810000126 9.735 45.567699000000346 9.392 56.12346780000013 10.861 44.665999699999865 7.398 56.88485359999994 3.391 88.1679430000008 9.68 82.46521699999902 11.187 55.40369799999996 10.392)
Error minima by case: (0.4808 7 60.0 2 0.6614 2 60.2955 2 0.9038 9 0.1312 2 0.01 2 8.0 2 2.1547 2 0.1095 9 3.3751 10 3.5545 2 4.3289 2 1.5337 2 0.3418 2 8.0453 2 5.1035 2 9.3689 9 0.09 7 0.2824 10 0.0216 6 11.0 2 1.8898 7 0.7967 10 0.3566 2)
Average genome size in population (length): 96.375
Average program size in population (points): 97.375
Average percent parens in population: 0.010
Minimum age in population: 172.2128576158473
Maximum age in population: 176.6736205715336
Average age in population: 174.750630620598
Median age in population: 174.809756269209
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.466
Error (vector) diversity:			 0.494
Behavioral diversity:				 0.494
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 197585967
--- Timings ---
Current time: 1529616279269 milliseconds
Total Time:         435.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.2 seconds, 37.3%
Fitness Testing:    215.0 seconds, 49.4%
Report:              57.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 58528.146199999945
Test mean error for best: 29.26407
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_yankdup} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_yankdup -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 50.9275 8 49.2033 11 0.3566 11]
Total: 886.814
Mean: 17.73628
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2261.7124805000044
Median total errors in population: 981.4737
Error averages by case: (57.43845730000052 10.029 113.8628654000002 3.37 146.92911699999993 12.717 130.92776019999988 4.232 71.61350169999997 11.139 54.056502 9.362 57.44689330000063 8.756 58.84012719999996 3.274 83.71738210000103 11.078 57.553362999999926 11.089 75.16449910000013 12.099 105.3055623999998 3.363 102.73810020000239 10.609 63.16933320000009 3.295 70.93271989999954 11.363 102.81215269999812 9.164 87.48004380000013 3.314 119.42223430000125 9.687 53.05047990000035 9.386 68.47515649999991 10.869 52.24723589999933 7.334 60.86193779999997 3.42 95.52326060000134 9.713 93.98284429999843 11.202 67.73595069999995 10.561)
Error minima by case: (0.5192 8 56.1955 2 0.6614 2 31.6899 2 1.9038 9 0.14 2 0.01 2 8.0 2 1.8453 2 0.1095 9 3.3751 10 2.8159 2 0.6711 2 7.0 1 0.3418 2 5.6002 2 6.2909 2 2.9744 7 0.09 7 0.2824 9 0.0248 6 11.0 2 11.569 7 0.2033 9 0.3566 2)
Average genome size in population (length): 96.316
Average program size in population (points): 97.316
Average percent parens in population: 0.010
Minimum age in population: 173.5890877542287
Maximum age in population: 178.0682084459731
Average age in population: 176.0790353268725
Median age in population: 176.1442609870366
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.431
Error (vector) diversity:			 0.448
Behavioral diversity:				 0.449
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 199994058
--- Timings ---
Current time: 1529616283640 milliseconds
Total Time:         439.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       163.5 seconds, 37.2%
Fitness Testing:    217.4 seconds, 49.5%
Report:              58.4 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 58528.146199999945
Test mean error for best: 29.26407
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 54.9965 7 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 50.9275 8 49.2033 11 0.3566 11]
Total: 886.814
Mean: 17.73628
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2328.889169800001
Median total errors in population: 981.5969500000001
Error averages by case: (58.92851700000033 10.115 117.69752770000014 3.307 144.4056704000007 12.54 135.47605889999988 4.158 70.16102919999997 11.133 58.406676800000035 9.306 60.65078070000052 8.791 67.00647129999999 3.393 86.72177030000077 10.976 63.55088759999992 11.073 74.25323889999986 12.128 110.03666209999987 3.283 100.26529330000194 10.471 68.60880590000002 3.265 71.44507430000019 11.2 104.41569289999846 9.194 92.21020360000013 3.257 123.29501080000112 9.784 57.10066900000025 9.461 67.5540840999997 10.865 56.49551079999949 7.444 68.20920789999997 3.528 99.21127480000116 9.903 94.27752889999873 11.243 68.28452259999993 10.403)
Error minima by case: (0.4808 9 60.0 2 0.3386 2 62.6899 3 2.0962 9 0.2286 2 0.01 2 8.0 2 0.8453 2 0.1095 9 2.6249 10 33.949 2 3.3289 2 7.0487 1 0.3418 2 2.0453 2 36.0 2 12.1274 8 0.09 7 0.2824 10 0.0579 6 11.0 2 14.8787 7 0.2033 9 0.3566 2)
Average genome size in population (length): 96.314
Average program size in population (points): 97.314
Average percent parens in population: 0.010
Minimum age in population: 174.5890877542287
Maximum age in population: 179.3698842531773
Average age in population: 177.4143388443652
Median age in population: 177.4874422236785
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.458
Error (vector) diversity:			 0.475
Behavioral diversity:				 0.475
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 202402134
--- Timings ---
Current time: 1529616287924 milliseconds
Total Time:         443.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.8 seconds, 37.1%
Fitness Testing:    219.8 seconds, 49.5%
Report:              59.1 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 58641.93349999995
Test mean error for best: 29.32097
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -5.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -5.048738954  
Correct output: -10.0587306507 | Program output: -5.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -5.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -5.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -5.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float float_flush)
Errors: [8.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.4091 8 5.01 7 8.0 2 34.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 55.9965 8 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 49.9275 8 49.2033 11 0.3566 11]
Total: 886.693
Mean: 17.73386
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2441.772641600003
Median total errors in population: 969.6648
Error averages by case: (63.79916440000018 10.058 122.89053960000018 3.4 148.94409420000054 12.614 139.9357493999999 4.24 77.32100609999996 11.15 61.04121749999995 9.298 63.98295330000027 8.751 68.86682720000002 3.351 89.7545771000009 11.085 65.65177339999994 11.034 80.51151949999989 12.113 114.63332989999986 3.385 106.05571910000154 10.496 74.28073199999999 3.348 78.95854989999977 11.264 107.86188019999878 9.197 96.98462780000014 3.343 126.59672290000121 9.715 59.1790801000003 9.406 75.3405500999998 10.814 58.38135819999977 7.334 71.14858199999996 3.498 103.02874270000079 9.714 100.82006709999919 11.23 75.50627789999993 10.459)
Error minima by case: (0.5192 8 60.0 2 0.3386 2 68.6899 3 2.0962 9 0.0385 2 0.0387 2 8.0 2 0.8453 2 0.1095 9 3.3751 9 14.949 2 7.3289 2 8.0 2 0.3418 2 0.9547 2 6.2909 2 4.1274 9 0.09 7 0.2824 9 0.0216 6 11.0 2 2.0589 7 0.2033 9 0.3566 2)
Average genome size in population (length): 96.702
Average program size in population (points): 97.702
Average percent parens in population: 0.010
Minimum age in population: 176.1552896990162
Maximum age in population: 180.8300433285467
Average age in population: 178.7057636670271
Median age in population: 178.7186625593749
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.836
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.836
Total error diversity:				 0.448
Error (vector) diversity:			 0.466
Behavioral diversity:				 0.466
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 204819969
--- Timings ---
Current time: 1529616292140 milliseconds
Total Time:         448.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       166.2 seconds, 37.1%
Fitness Testing:    222.0 seconds, 49.6%
Report:              59.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 58477.146199999945
Test mean error for best: 29.23857
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.8904716822  
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 0.951261046   
Correct output: 2.0900277855   | Program output: 0.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 0.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0 11 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 72.9213 9 1.1388 9 0.2824 10 0.1994 6 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 886.1008
Mean: 17.722015
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2195.4778574
Median total errors in population: 969.6039999999999
Error averages by case: (54.566264999999966 10.092 117.9761248000002 3.563 135.64732060000136 12.637 134.5855696999998 4.387 61.349759499999976 11.024 54.03340059999993 9.322 56.512044200000176 8.775 62.563768399999965 3.535 81.53725880000093 11.052 54.92075149999986 10.966 65.50623549999979 12.06 108.08084689999978 3.555 91.91776420000129 10.494 69.21476670000004 3.518 63.120454600000194 11.41 99.41991109999893 9.219 90.63206450000018 3.499 118.45444050000131 9.776 51.55306100000029 9.453 58.23856359999984 10.76 51.40937319999999 7.39 64.32978509999992 3.687 95.38577760000062 9.824 84.59395419999952 11.181 58.13559559999997 10.614)
Error minima by case: (0.5192 9 59.0 2 1.6614 2 63.6899 2 1.0962 9 0.14 2 0.01 2 8.0 2 1.1547 2 0.1095 9 3.3751 10 34.949 2 7.3289 2 7.0 1 0.3418 2 10.0453 2 35.0 2 6.1274 9 0.09 7 0.2824 9 0.0623 6 5.5683 2 3.8787 7 1.7967 10 0.3566 2)
Average genome size in population (length): 97.869
Average program size in population (points): 98.869
Average percent parens in population: 0.010
Minimum age in population: 177.7994993795927
Maximum age in population: 182.3545442591928
Average age in population: 180.0503727912077
Median age in population: 180.0938400318342
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.473
Error (vector) diversity:			 0.495
Behavioral diversity:				 0.495
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 207267061
--- Timings ---
Current time: 1529616296449 milliseconds
Total Time:         452.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.5 seconds, 37.0%
Fitness Testing:    224.4 seconds, 49.6%
Report:              60.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 58666.41249999995
Test mean error for best: 29.33321
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction integer_min} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min integer_min integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times integer_add float_dup_times in1 float_max float_frominteger print_float float_flush)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.3566 11]
Total: 885.8747999999999
Mean: 17.717497
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2312.482848800003
Median total errors in population: 976.4680999999999
Error averages by case: (60.33198400000053 10.106 119.55008640000027 3.568 144.24236410000015 12.659 135.57339469999985 4.416 68.01994529999999 11.061 59.00520500000005 9.293 61.07869260000059 8.744 66.2981445 3.578 86.11083010000094 11.017 60.119575499999904 10.982 71.94643009999999 12.115 110.35320339999976 3.576 97.47981160000192 10.536 72.2102106 3.584 68.35404780000009 11.452 102.88929899999839 9.196 93.2104999000002 3.56 123.49268800000127 9.744 57.43706240000024 9.438 64.14785799999981 10.801 56.76744529999945 7.393 67.53846239999991 3.748 99.73641490000124 9.838 90.39802919999899 11.228 63.97116399999997 10.587)
Error minima by case: (0.4808 8 1.9603 1 0.3386 2 17.3101 2 2.0962 9 0.2286 2 0.01 2 8.0 2 0.8453 2 0.1095 9 2.6249 11 20.9299 2 4.6711 2 3.1392 2 0.3418 2 4.0453 2 12.2718 2 1.8535 9 0.09 7 0.2824 8 0.0409 6 11.0 2 9.1213 7 0.2033 9 0.3566 2)
Average genome size in population (length): 98.263
Average program size in population (points): 99.263
Average percent parens in population: 0.010
Minimum age in population: 179.0362499955722
Maximum age in population: 183.7679951069266
Average age in population: 181.4115967163008
Median age in population: 181.4403464948085
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.445
Error (vector) diversity:			 0.469
Behavioral diversity:				 0.47
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 209723954
--- Timings ---
Current time: 1529616300712 milliseconds
Total Time:         456.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.8 seconds, 37.0%
Fitness Testing:    226.7 seconds, 49.6%
Report:              60.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 58751.26619999995
Test mean error for best: 29.37563
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -9.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -9.048738954  
Correct output: -10.0587306507 | Program output: -9.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -9.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -9.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -9.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float)
Errors: [12.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 3.5909 9 1.01 7 8.0 2 30.7966 10 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 51.9965 8 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 53.9275 8 49.2033 11 0.3566 11]
Total: 885.8747999999999
Mean: 17.717497
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2367.3586667000036
Median total errors in population: 961.3171999999998
Error averages by case: (65.69742530000028 10.125 123.66787480000018 3.612 140.7515544000007 12.599 140.05288399999986 4.45 66.36992889999998 11.068 62.757611599999976 9.298 65.69650840000041 8.701 71.12533820000002 3.606 90.92618800000099 11.061 66.23901189999985 11.059 69.66375909999994 12.087 114.0526920999998 3.618 96.50009930000188 10.462 74.22664190000003 3.564 65.5855365000004 11.484 109.03044069999832 9.097 96.66700860000023 3.562 126.27543620000128 9.751 60.315717800000236 9.435 61.874291699999645 10.734 59.76860409999956 7.349 72.00068909999993 3.767 104.28913200000147 9.767 90.794726499999 11.214 60.93556559999989 10.624)
Error minima by case: (0.5192 8 40.0 1 0.3386 2 19.0 2 2.0962 9 0.3604 2 0.01 2 4.5279 2 1.8453 2 0.1095 9 2.3751 9 14.4386 2 9.6711 2 2.3505 1 0.3418 2 1.0453 1 5.7806 2 4.1274 9 0.09 7 0.2824 9 0.153 6 8.1942 1 16.8787 7 0.7967 10 0.3566 2)
Average genome size in population (length): 98.849
Average program size in population (points): 99.849
Average percent parens in population: 0.010
Minimum age in population: 180.0362499955722
Maximum age in population: 184.5634105805471
Average age in population: 182.6988265856733
Median age in population: 182.745294977183
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.429
Error (vector) diversity:			 0.446
Behavioral diversity:				 0.446
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 212195329
--- Timings ---
Current time: 1529616305055 milliseconds
Total Time:         460.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.1 seconds, 36.9%
Fitness Testing:    229.1 seconds, 49.7%
Report:              61.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 58751.26619999995
Test mean error for best: 29.37563
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -9.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -9.048738954  
Correct output: -10.0587306507 | Program output: -9.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -9.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 2.0           
Correct output: -61.0452729724 | Program output: -9.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -9.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 2.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float)
Errors: [12.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 3.5909 9 1.01 7 8.0 2 30.7966 10 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 9.3418 12 51.9965 8 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 53.9275 8 49.2033 11 0.3566 11]
Total: 885.8747999999999
Mean: 17.717497
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2336.545217900002
Median total errors in population: 969.6039999999999
Error averages by case: (60.9154023000004 10.071 121.38135980000014 3.599 144.8862507000007 12.652 137.88125109999987 4.442 68.19468039999998 11.094 58.1408222 9.261 60.98774700000047 8.684 68.50314799999995 3.516 86.36906390000094 11.028 64.24256279999986 10.941 71.9566098999998 12.128 111.98888589999984 3.566 100.80405530000188 10.574 72.72438440000005 3.574 68.12796840000043 11.385 104.60286359999839 9.175 94.54453660000017 3.536 124.24566590000127 9.705 57.490816100000245 9.387 64.92881639999968 10.786 56.98867229999957 7.299 69.26100539999996 3.693 99.76685680000121 9.784 92.71920639999904 11.227 63.22958629999997 10.556)
Error minima by case: (1.5192 8 40.0 1 0.3386 2 19.0 2 2.0962 10 0.14 2 0.01 2 7.0 2 2.1547 2 0.1095 9 1.6249 10 36.949 2 10.3289 2 8.0 2 0.3418 2 1.9547 1 36.0 2 61.9213 9 0.09 7 0.2824 9 0.0056 6 10.0 1 21.8787 7 1.7967 10 0.3566 2)
Average genome size in population (length): 99.101
Average program size in population (points): 100.101
Average percent parens in population: 0.010
Minimum age in population: 181.5471079526069
Maximum age in population: 185.9523835254138
Average age in population: 184.0449426988634
Median age in population: 184.0551922394524
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.421
Error (vector) diversity:			 0.444
Behavioral diversity:				 0.444
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 214672904
--- Timings ---
Current time: 1529616309371 milliseconds
Total Time:         465.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.5 seconds, 36.9%
Fitness Testing:    231.4 seconds, 49.7%
Report:              62.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 58615.861299999946
Test mean error for best: 29.30793
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2401.1318939000043
Median total errors in population: 969.6648
Error averages by case: (65.55229500000021 10.153 126.60629970000018 3.67 141.62913390000057 12.545 142.97266019999986 4.478 66.84331019999998 11.088 63.534646099999854 9.226 66.16757210000031 8.686 73.08333620000006 3.64 90.97424560000093 11.051 66.58617939999979 10.912 71.61215489999996 12.115 117.02059469999983 3.643 97.04666590000137 10.423 77.32443879999995 3.621 66.57498720000018 11.29 107.54971029999881 9.162 99.85952880000018 3.633 127.95640760000133 9.746 62.22665310000027 9.439 63.1260815999997 10.765 61.756486199999685 7.451 74.17788579999994 3.819 104.57297440000089 9.807 91.11130479999935 11.247 63.20734139999999 10.449)
Error minima by case: (0.5679 8 1.9603 1 0.6614 2 19.0 2 3.0962 9 0.0385 2 0.01 2 4.5279 2 0.8453 2 0.1095 9 1.3751 11 36.949 2 7.3289 2 7.0 1 0.3418 2 2.0453 2 35.0 2 10.1274 9 0.09 7 0.2824 9 0.1594 6 0.4317 1 19.389 7 0.2033 9 0.3566 2)
Average genome size in population (length): 99.756
Average program size in population (points): 100.756
Average percent parens in population: 0.010
Minimum age in population: 182.5471079526069
Maximum age in population: 187.0115991167569
Average age in population: 185.2135750936598
Median age in population: 185.2494523416162
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.44
Error (vector) diversity:			 0.464
Behavioral diversity:				 0.464
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 217166921
--- Timings ---
Current time: 1529616313679 milliseconds
Total Time:         469.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.8 seconds, 36.8%
Fitness Testing:    233.7 seconds, 49.8%
Report:              62.9 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 58618.13689999995
Test mean error for best: 29.30907
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2176.9265492000022
Median total errors in population: 961.3475999999998
Error averages by case: (52.46360560000011 10.002 115.72197370000019 3.465 139.0158505000008 12.655 132.57766779999986 4.318 63.07944759999998 11.042 51.68251949999986 9.195 53.858852100000234 8.812 61.746897599999954 3.45 79.71750160000093 11.034 54.42291179999972 10.701 67.63403479999984 12.096 106.29210299999981 3.479 94.12731860000163 10.525 66.87142870000005 3.418 64.29250960000049 11.41 97.21791939999868 9.258 88.63031850000014 3.412 116.81107410000133 9.665 49.21092420000028 9.369 59.08963949999963 10.746 49.18996209999977 7.512 62.89520019999994 3.597 93.13852940000092 9.788 85.99404749999933 11.217 60.522311800000026 10.556)
Error minima by case: (0.5679 8 31.1707 2 0.3386 2 60.4064 3 1.9038 9 0.0385 2 0.035 2 8.0 2 1.1547 2 0.1095 9 3.3751 11 13.1828 2 0.6711 2 8.0 2 0.3418 2 10.0453 2 4.5248 2 5.8936 8 0.09 7 0.2824 9 0.0398 6 11.0 2 31.1213 7 0.7967 10 0.3566 2)
Average genome size in population (length): 101.342
Average program size in population (points): 102.342
Average percent parens in population: 0.010
Minimum age in population: 184.2002813613447
Maximum age in population: 188.5645452775773
Average age in population: 186.5055744252866
Median age in population: 186.5432885766257
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.461
Error (vector) diversity:			 0.482
Behavioral diversity:				 0.482
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 219700638
--- Timings ---
Current time: 1529616318090 milliseconds
Total Time:         473.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.1 seconds, 36.7%
Fitness Testing:    236.1 seconds, 49.8%
Report:              63.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 58618.13689999995
Test mean error for best: 29.30907
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap float_sub -81.37761634098129 float_tan float_dup integer_dec float_yankdup integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2520.316855800001
Median total errors in population: 969.9472000000001
Error averages by case: (67.0681976000001 10.085 128.62684880000023 3.397 153.1876472999996 12.687 145.66441129999987 4.256 76.89134579999998 11.09 65.96341969999975 9.26 68.50042680000031 8.866 73.39708040000006 3.429 94.42012400000094 11.041 68.11102849999995 10.685 81.92989789999999 12.142 120.06502579999975 3.41 108.20712510000241 10.567 80.49036209999994 3.391 76.33827819999962 11.314 112.11651309999826 9.284 102.31580260000023 3.387 130.48582150000126 9.732 64.15322090000024 9.466 72.13656319999954 10.813 64.18779449999941 7.675 76.08405029999994 3.58 106.1512354000012 9.894 100.24676079999857 11.274 72.32787420000012 10.525)
Error minima by case: (0.3833 7 60.0 2 2.6614 2 64.6899 2 2.0962 9 0.0361 2 0.01 2 2.7618 2 0.5547 2 0.1095 9 0.6249 10 33.5806 2 2.6711 2 7.0 1 0.3418 2 10.0453 1 24.9226 2 10.1274 8 0.09 7 0.2824 9 0.1712 6 10.0 1 14.4896 7 1.7967 10 0.3566 2)
Average genome size in population (length): 102.625
Average program size in population (points): 103.625
Average percent parens in population: 0.010
Minimum age in population: 185.2002813613447
Maximum age in population: 189.875171332673
Average age in population: 187.7900101388115
Median age in population: 187.8396286773465
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.483
Error (vector) diversity:			 0.507
Behavioral diversity:				 0.508
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 222266394
--- Timings ---
Current time: 1529616322630 milliseconds
Total Time:         478.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.4 seconds, 36.7%
Fitness Testing:    238.6 seconds, 49.9%
Report:              64.3 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2434.170766900001
Median total errors in population: 969.6648
Error averages by case: (64.39585430000048 10.011 123.73190920000016 3.43 151.40528040000032 12.745 140.63233259999984 4.271 74.72275339999999 11.083 64.38468319999998 9.339 66.08471870000054 8.842 71.63493440000003 3.454 92.09824530000093 11.025 64.58230719999968 10.635 80.66942999999996 12.153 115.16242219999982 3.445 105.69315190000196 10.682 74.98936870000001 3.398 71.78841560000032 11.212 109.78687349999825 9.316 97.66485760000016 3.389 126.63070610000122 9.685 59.82484290000021 9.361 66.88620539999961 10.799 59.75120349999945 7.642 73.07170469999994 3.613 104.81884570000126 9.891 97.05961029999878 11.265 65.57711010000018 10.437)
Error minima by case: (0.3833 8 27.4783 2 0.3386 2 18.5117 2 2.0962 9 0.0361 2 0.01 2 8.0 2 0.1547 2 0.1095 9 3.3751 11 7.1341 2 4.3289 2 2.0459 1 0.3418 2 5.0453 2 1.5239 2 3.9709 8 0.09 7 0.2824 10 0.1712 6 11.0 2 37.8787 7 0.2033 9 0.3566 2)
Average genome size in population (length): 104.937
Average program size in population (points): 105.937
Average percent parens in population: 0.009
Minimum age in population: 186.6717549647676
Maximum age in population: 191.2953187156507
Average age in population: 189.0473807786404
Median age in population: 189.0484051673479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.47
Error (vector) diversity:			 0.501
Behavioral diversity:				 0.501
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 224890036
--- Timings ---
Current time: 1529616327224 milliseconds
Total Time:         482.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       176.7 seconds, 36.6%
Fitness Testing:    241.1 seconds, 49.9%
Report:              65.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 58700.26619999995
Test mean error for best: 29.35013
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -9.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -9.048738954  
Correct output: -10.0587306507 | Program output: -9.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -9.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -9.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -9.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dup float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [12.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 3.5909 9 1.01 7 8.0 2 30.7966 10 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 51.9965 8 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 53.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2330.060023
Median total errors in population: 986.06035
Error averages by case: (58.37029890000043 10.135 120.61811230000013 3.39 145.68517980000078 12.639 137.5861453999999 4.262 68.51405469999997 11.095 59.17424459999998 9.285 60.189461700000486 8.649 68.47285489999997 3.447 85.85706690000093 10.875 60.805391499999615 10.58 74.44091209999975 12.138 112.16050599999986 3.399 100.13664230000191 10.558 72.33009950000005 3.404 68.75562650000042 11.182 102.59695249999865 9.169 94.78180240000012 3.397 122.2364443000013 9.753 56.71263480000027 9.417 64.75580219999964 10.797 56.92035819999958 7.762 70.04863459999996 3.629 98.91117010000097 9.898 93.47107859999875 11.24 66.05454820000021 10.374)
Error minima by case: (0.3833 8 40.0 1 0.3386 2 19.0 2 2.9038 9 0.0361 2 0.01 2 7.7618 2 0.1547 2 0.1095 9 3.3751 11 0.051 2 8.3289 2 5.1392 1 0.3418 2 0.5059 2 3.8012 2 6.6171 9 0.0388 7 0.2824 8 0.0042 6 10.4317 2 10.2878 7 0.7967 10 0.3566 2)
Average genome size in population (length): 106.416
Average program size in population (points): 107.416
Average percent parens in population: 0.009
Minimum age in population: 187.7762118238526
Maximum age in population: 192.3959537738147
Average age in population: 190.3788448716156
Median age in population: 190.4408367015308
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.515
Error (vector) diversity:			 0.544
Behavioral diversity:				 0.545
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 227550486
--- Timings ---
Current time: 1529616331820 milliseconds
Total Time:         487.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.1 seconds, 36.5%
Fitness Testing:    243.6 seconds, 50.0%
Report:              65.8 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 58700.26619999995
Test mean error for best: 29.35013
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -9.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -9.048738954  
Correct output: -10.0587306507 | Program output: -9.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -9.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -9.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -9.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [12.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 3.5909 9 1.01 7 8.0 2 30.7966 10 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 51.9965 8 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 53.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2449.2739910000005
Median total errors in population: 974.74805
Error averages by case: (65.90911480000021 10.035 123.34110570000011 3.308 149.89042860000046 12.691 140.67985319999988 4.186 74.11891739999997 11.114 64.3920976 9.378 66.46538640000037 8.851 72.40521729999999 3.326 92.23023990000094 11.009 67.17916019999964 10.562 78.18094029999993 12.15 115.37354149999987 3.325 105.08583830000191 10.637 74.98254960000003 3.261 74.58577100000016 11.2 110.38052559999856 9.285 97.74871430000007 3.294 128.03398430000126 9.697 61.34263370000032 9.412 69.40881549999972 10.82 61.70633169999955 7.741 73.82771309999998 3.486 105.11634030000086 9.902 97.11777889999888 11.247 69.4419918000002 10.412)
Error minima by case: (0.3833 8 40.0 1 0.3386 2 19.0 2 3.0962 9 0.2286 2 0.01 2 8.0 2 0.8453 2 0.1095 9 0.3751 10 25.4018 2 2.6711 2 8.0 1 0.3418 2 10.0453 2 16.7438 2 6.3254 8 0.0124 7 0.2824 9 0.0409 6 11.0 2 20.8062 7 0.7967 10 0.3566 2)
Average genome size in population (length): 107.486
Average program size in population (points): 108.486
Average percent parens in population: 0.009
Minimum age in population: 189.266643484382
Maximum age in population: 193.8070311084047
Average age in population: 191.6918814957369
Median age in population: 191.7445788758463
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.481
Error (vector) diversity:			 0.508
Behavioral diversity:				 0.509
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 230237828
--- Timings ---
Current time: 1529616336329 milliseconds
Total Time:         492.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       179.4 seconds, 36.5%
Fitness Testing:    246.0 seconds, 50.0%
Report:              66.6 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2600.3377003999994
Median total errors in population: 1001.415
Error averages by case: (71.91829349999996 10.127 131.17020600000018 3.473 154.5300536999998 12.664 148.11037109999987 4.317 79.02322939999998 11.106 71.05141309999998 9.397 72.61124420000004 8.862 78.88455700000009 3.507 97.69460390000094 10.955 72.9802884000001 10.555 83.75527140000007 12.152 122.83417069999982 3.506 109.83751360000204 10.625 83.61357389999996 3.476 80.53256919999936 11.248 115.07661399999832 9.288 105.60442270000019 3.469 133.073783600001 9.783 67.58525250000025 9.504 73.2227950999997 10.85 67.91610269999941 7.884 79.89828399999996 3.656 110.50055900000123 10.015 101.45413449999874 11.293 75.28739320000014 10.459)
Error minima by case: (0.2812 8 40.0 1 0.3386 2 19.0 2 3.0962 9 0.2286 2 0.01 2 7.0 2 1.1547 2 0.1095 2 3.3751 10 35.949 2 1.3289 2 7.0 1 0.3418 2 8.2408 2 35.0 2 10.1274 8 0.09 7 0.2824 9 0.0389 6 1.4317 1 3.1213 7 0.7967 10 0.3566 2)
Average genome size in population (length): 108.416
Average program size in population (points): 109.416
Average percent parens in population: 0.009
Minimum age in population: 190.4390245681097
Maximum age in population: 195.0725655605205
Average age in population: 193.007114417673
Median age in population: 193.0475658265977
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.483
Error (vector) diversity:			 0.508
Behavioral diversity:				 0.508
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 232948462
--- Timings ---
Current time: 1529616340908 milliseconds
Total Time:         496.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.8 seconds, 36.4%
Fitness Testing:    248.6 seconds, 50.0%
Report:              67.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_max} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_max float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec float_dec float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dec float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2490.3072877000013
Median total errors in population: 974.992
Error averages by case: (65.78010230000042 10.077 123.90720020000015 3.421 153.36287840000028 12.655 140.5034985999999 4.282 77.71632579999998 11.116 64.79097510000011 9.465 66.67520070000035 8.865 73.04679980000003 3.419 92.70362840000098 11.008 69.27890429999978 10.49 81.6309289 12.14 115.56035179999986 3.429 109.49224960000186 10.59 75.80613360000001 3.408 78.60581209999987 11.211 110.9752898999983 9.248 98.01405980000015 3.394 128.58912430000132 9.747 61.51657020000029 9.449 73.56006779999953 10.84 62.01843809999954 7.92 74.34272979999997 3.583 105.42741800000114 9.917 102.3231675999989 11.266 73.29643260000012 10.443)
Error minima by case: (0.4808 8 40.0 1 0.6614 2 19.0 2 2.0962 9 0.2286 2 0.01 2 8.0 2 0.1896 2 0.1095 9 3.3751 11 6.8119 2 6.6711 2 6.0487 1 0.3418 2 10.0453 2 1.8462 2 40.8726 8 0.09 7 0.2824 10 0.153 6 11.0 2 2.2427 7 0.7967 10 0.3566 2)
Average genome size in population (length): 108.881
Average program size in population (points): 109.881
Average percent parens in population: 0.009
Minimum age in population: 192.0884483633954
Maximum age in population: 196.5896939652687
Average age in population: 194.2604301429185
Median age in population: 194.2831140252813
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.882
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.882
Total error diversity:				 0.478
Error (vector) diversity:			 0.512
Behavioral diversity:				 0.512
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 235670679
--- Timings ---
Current time: 1529616345394 milliseconds
Total Time:         501.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       182.1 seconds, 36.3%
Fitness Testing:    251.1 seconds, 50.1%
Report:              67.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times integer_stackdepth integer_min integer_min integer_stackdepth integer_min float_dec integer_yank float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_add float_dup_times integer_add integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2434.9486795
Median total errors in population: 987.0967999999999
Error averages by case: (63.505585700000566 10.051 123.09661550000018 3.349 152.5278362000004 12.744 140.35370009999986 4.202 75.69715759999998 11.11 62.74203730000013 9.432 64.27274610000063 8.851 70.58483540000003 3.43 90.22162410000097 11.041 65.5270413999995 10.436 79.93063819999983 12.174 115.11484759999985 3.363 107.845940000002 10.688 74.13242990000003 3.338 74.45056560000023 11.243 108.20172549999845 9.206 97.51033070000015 3.307 126.69894920000131 9.704 60.00789520000028 9.424 67.87500479999952 10.828 60.49498639999954 7.881 71.95009799999995 3.561 103.53573310000117 9.865 98.32036409999887 11.28 69.40399180000018 10.438)
Error minima by case: (0.4321 8 59.0 2 1.3386 2 56.9079 2 2.0962 9 0.2286 2 0.01 2 7.7618 2 4.1547 2 0.1095 9 3.3751 11 3.167 2 7.3289 2 1.9212 1 0.3418 2 6.9012 2 5.4911 2 15.9094 8 0.0388 7 0.2824 10 0.1571 6 10.4317 2 33.3867 7 1.7967 10 0.3566 2)
Average genome size in population (length): 110.058
Average program size in population (points): 111.058
Average percent parens in population: 0.009
Minimum age in population: 193.330627181019
Maximum age in population: 197.5923078940983
Average age in population: 195.5326573299709
Median age in population: 195.5672129628946
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.447
Error (vector) diversity:			 0.483
Behavioral diversity:				 0.483
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 238422447
--- Timings ---
Current time: 1529616349892 milliseconds
Total Time:         505.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.4 seconds, 36.3%
Fitness Testing:    253.6 seconds, 50.1%
Report:              68.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_min} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_min integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_min float_dec integer_yank float_dup_times float_yank integer_yank integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2653.5365852999985
Median total errors in population: 982.5657000000001
Error averages by case: (75.0832461999994 10.115 132.45098450000015 3.563 157.03474829999945 12.604 149.35836979999988 4.419 82.46587429999998 11.136 73.37232390000001 9.452 75.21238249999959 8.833 80.8582097000001 3.523 100.81758730000102 11.015 75.47585480000045 10.48 86.99410210000032 12.152 123.90115429999985 3.565 113.23160810000248 10.534 84.23455029999991 3.54 80.36119989999906 11.045 118.5244086999981 9.126 106.40053450000015 3.526 134.5829639000009 9.764 69.01449740000022 9.452 76.07523189999948 10.807 69.66060209999941 7.984 81.98760649999997 3.7 113.51783310000161 9.9 106.07491549999823 11.269 75.07279570000036 10.269)
Error minima by case: (0.4808 8 59.0 2 0.6614 2 63.0365 2 0.9038 9 0.2286 2 0.01 2 8.0 2 1.8453 2 0.1095 9 1.6249 9 9.2955 2 9.3289 2 4.2074 1 0.3418 2 2.0453 2 0.6375 2 8.8185 8 0.09 7 0.2824 9 0.0623 6 7.5683 2 5.1213 7 0.7967 9 0.3566 2)
Average genome size in population (length): 110.78
Average program size in population (points): 111.78
Average percent parens in population: 0.009
Minimum age in population: 194.3437467149612
Maximum age in population: 199.335300845739
Average age in population: 196.8769641153919
Median age in population: 196.9187465209103
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.442
Error (vector) diversity:			 0.467
Behavioral diversity:				 0.467
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 241192140
--- Timings ---
Current time: 1529616354499 milliseconds
Total Time:         510.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.8 seconds, 36.2%
Fitness Testing:    256.2 seconds, 50.2%
Report:              69.3 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 58618.41249999995
Test mean error for best: 29.30921
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -91} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_swap} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_pop} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -91 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min integer_mod integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_swap float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times integer_add integer_stackdepth integer_min float_dec integer_yank float_pop float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2254.2093379000003
Median total errors in population: 969.415
Error averages by case: (55.93306580000026 9.991 116.68050360000016 3.288 146.43500330000043 12.628 134.08984599999988 4.155 69.96123569999997 11.064 55.91790340000009 9.358 57.4339017000004 8.783 63.18683419999998 3.277 83.19397720000102 10.927 56.2286745999995 10.341 74.01629190000001 12.123 108.2049801999998 3.314 101.587746500002 10.553 65.49015350000006 3.241 68.74352710000024 10.874 100.79434269999855 9.001 89.45086060000013 3.27 116.78676080000132 9.643 49.73848460000033 9.362 64.28366569999959 10.763 50.384493599999715 7.891 64.41162279999993 3.41 96.83813000000104 9.833 93.15099099999865 11.242 62.797341400000526 10.137)
Error minima by case: (0.4808 8 59.0 2 0.6614 2 63.9988 2 2.0962 9 0.4027 2 0.01 2 4.5741 2 0.8453 2 0.1095 8 3.3751 9 10.2579 2 8.6711 2 5.1697 1 0.3418 2 0.906 2 1.5998 2 6.0602 8 0.09 7 0.2824 9 0.0623 6 10.0 1 9.1213 7 0.7967 10 0.3566 2)
Average genome size in population (length): 112.135
Average program size in population (points): 113.135
Average percent parens in population: 0.009
Minimum age in population: 195.3437467149612
Maximum age in population: 200.3990990353891
Average age in population: 198.2609580343327
Median age in population: 198.342112029679
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.453
Error (vector) diversity:			 0.479
Behavioral diversity:				 0.479
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 243995774
--- Timings ---
Current time: 1529616359201 milliseconds
Total Time:         514.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.1 seconds, 36.1%
Fitness Testing:    258.8 seconds, 50.3%
Report:              69.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction float_dup_times} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank integer_mod integer_min integer_min float_dec float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank float_dup_times in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2472.6808228
Median total errors in population: 1007.70955
Error averages by case: (69.72315939999999 10.084 124.40361650000017 3.421 151.49675830000058 12.703 141.83506119999987 4.291 73.96669019999999 11.081 67.44198529999998 9.393 70.65156060000015 8.867 74.41366980000001 3.487 96.51182520000106 11.002 68.46714939999961 10.431 78.66027139999998 12.173 116.03517619999985 3.494 105.62751100000163 10.65 77.89571649999998 3.445 71.04055120000008 10.943 114.80098509999831 9.084 99.39572700000016 3.447 128.25901390000135 9.707 62.142665800000294 9.459 65.99364129999972 10.8 62.676780399999615 7.89 75.78709679999997 3.669 106.95588790000134 9.951 93.37914609999908 11.28 64.22817630000061 10.139)
Error minima by case: (0.2882 8 5.9603 1 0.6614 2 18.5117 2 2.0962 9 0.3459 2 0.01 2 8.0 2 1.8453 2 0.1095 8 3.3751 10 14.0748 2 9.6711 2 8.0 1 0.3418 2 10.0453 2 5.4167 2 22.8353 9 0.09 7 0.2824 9 0.0623 6 11.0 2 1.8414 7 1.7967 10 0.3566 2)
Average genome size in population (length): 112.655
Average program size in population (points): 113.655
Average percent parens in population: 0.009
Minimum age in population: 197.2674161154262
Maximum age in population: 201.5162276177209
Average age in population: 199.5448936288748
Median age in population: 199.5636108733414
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.431
Error (vector) diversity:			 0.461
Behavioral diversity:				 0.461
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 246812233
--- Timings ---
Current time: 1529616363801 milliseconds
Total Time:         519.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       187.4 seconds, 36.1%
Fitness Testing:    261.4 seconds, 50.3%
Report:              70.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dec float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_sub float_dup_times float_yank float_yank integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2521.5066666
Median total errors in population: 968.6648
Error averages by case: (69.84969579999996 10.075 125.46418050000007 3.253 151.65459090000047 12.632 142.33751489999995 4.127 75.9083558 11.098 67.96839730000002 9.462 70.5622161000001 8.901 74.08900430000001 3.264 97.06930110000098 11.095 72.36870329999986 10.417 79.72161029999995 12.154 118.41664869999991 3.27 107.32574350000228 10.566 77.34353370000002 3.274 76.82922529999996 10.846 115.55271509999827 9.093 100.77634850000011 3.26 131.48055190000127 9.675 65.40246140000035 9.434 70.86015099999958 10.811 66.1362590999995 7.888 75.81955969999999 3.405 108.30281210000129 9.887 100.24877749999864 11.293 70.73230880000065 10.106)
Error minima by case: (0.1171 8 1.9603 2 0.3386 2 19.0 2 3.0962 10 0.314 2 0.01 2 6.2382 2 0.1896 2 0.1095 9 2.3751 8 36.949 2 8.6711 2 7.0 1 0.6582 2 3.0453 2 35.0 2 10.1274 8 0.0388 6 0.2824 9 0.1766 5 1.4317 2 9.744 7 0.2033 9 0.3566 2)
Average genome size in population (length): 112.886
Average program size in population (points): 113.886
Average percent parens in population: 0.009
Minimum age in population: 198.7667333112523
Maximum age in population: 203.0815354483803
Average age in population: 200.8489137775169
Median age in population: 200.8967425383757
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.421
Error (vector) diversity:			 0.445
Behavioral diversity:				 0.446
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 249634525
--- Timings ---
Current time: 1529616368547 milliseconds
Total Time:         524.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.8 seconds, 36.0%
Fitness Testing:    264.0 seconds, 50.4%
Report:              71.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_sub} {:instruction -81} {:instruction float_mult} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan float_sub -81 float_mult -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_dec integer_add float_dup_times integer_add integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2284.856160399999
Median total errors in population: 969.415
Error averages by case: (57.909973000000626 10.088 118.45526850000016 3.176 143.90200590000086 12.629 136.2337599999999 4.047 67.20526739999998 11.044 56.725670400000126 9.343 59.112031900000645 8.721 66.57328719999998 3.224 84.73966510000098 10.98 60.36273599999949 10.367 72.53177259999984 12.145 110.92641439999986 3.2 99.42323980000195 10.588 69.93367200000007 3.244 68.43932900000046 10.911 102.2252556999982 8.971 93.15219560000013 3.179 120.2885858000013 9.682 53.34033210000023 9.429 61.794715899999765 10.769 53.94463209999941 7.854 67.58852939999996 3.346 97.41299660000128 9.899 90.37915099999894 11.239 64.0546730000006 10.126)
Error minima by case: (0.5679 8 59.0 2 0.6614 2 64.6899 1 3.0962 9 0.2286 2 0.01 2 8.0 2 0.8453 2 0.1095 9 2.6249 10 35.949 2 8.6711 2 7.0 1 0.3418 2 10.0453 2 35.0 2 11.1274 8 0.09 7 0.2824 9 0.0346 6 11.0 2 9.2915 7 2.7967 10 0.3566 2)
Average genome size in population (length): 113.209
Average program size in population (points): 114.209
Average percent parens in population: 0.009
Minimum age in population: 199.7667333112523
Maximum age in population: 204.2201154767986
Average age in population: 202.1705119326519
Median age in population: 202.2098784488578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.421
Error (vector) diversity:			 0.454
Behavioral diversity:				 0.455
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 252464825
--- Timings ---
Current time: 1529616373335 milliseconds
Total Time:         529.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.1 seconds, 35.9%
Fitness Testing:    266.6 seconds, 50.4%
Report:              72.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 58452.42959999994
Test mean error for best: 29.22621
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -91} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -57} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_yankdup} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 integer_min float_stackdepth integer_min in2 in2 -91 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -57 float_rot -76 float_pop integer_sub float_rot float_yankdup -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mult float_stackdepth integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2373.7200977000007
Median total errors in population: 992.415
Error averages by case: (62.53365100000042 10.104 121.26212930000015 3.379 148.13148090000038 12.673 138.33533209999982 4.256 71.10733609999998 11.101 61.520690000000094 9.416 63.81768780000046 8.906 68.64106289999998 3.408 89.77074580000085 11.037 65.06549469999949 10.438 76.7965193000001 12.165 112.6159848999998 3.409 102.888007300002 10.615 71.69550800000005 3.341 70.56100620000034 10.924 107.92908799999852 9.084 95.1361440000002 3.339 124.50998070000121 9.754 57.91689850000024 9.488 64.70517439999965 10.795 58.50543699999966 7.953 69.81121659999995 3.556 101.91188290000105 9.966 93.42634889999873 11.257 64.60729040000061 10.154)
Error minima by case: (0.3833 8 59.0 2 0.3386 2 64.6899 2 2.0962 9 0.2286 2 0.01 2 4.5279 2 0.8453 2 0.1095 9 3.3751 11 35.949 2 9.3289 2 7.0 1 0.3418 2 0.6589 2 35.0 2 11.1274 9 0.09 7 0.2824 8 0.0253 6 8.1942 2 1.5437 7 0.7967 9 0.3566 2)
Average genome size in population (length): 113.075
Average program size in population (points): 114.075
Average percent parens in population: 0.009
Minimum age in population: 200.9370053238229
Maximum age in population: 205.7951358814903
Average age in population: 203.4172463741196
Median age in population: 203.4464073795105
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.419
Error (vector) diversity:			 0.442
Behavioral diversity:				 0.443
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 255291892
--- Timings ---
Current time: 1529616377983 milliseconds
Total Time:         533.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.4 seconds, 35.9%
Fitness Testing:    269.3 seconds, 50.5%
Report:              72.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_div} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank integer_rot integer_stackdepth integer_min integer_div integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_sub float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2450.711480499998
Median total errors in population: 968.6648
Error averages by case: (66.37966860000034 10.078 122.04051300000013 3.205 151.21324710000047 12.604 140.06962689999992 4.097 75.38822309999998 11.124 63.75836550000011 9.38 65.68990220000045 8.701 71.77727960000001 3.258 91.938575000001 11.077 68.89889599999977 10.394 79.37080009999983 12.148 114.75852969999987 3.24 106.60627460000202 10.509 75.01287180000001 3.211 73.52532220000026 10.78 111.40965839999822 8.95 97.5735763000001 3.208 126.23567360000129 9.641 60.22087990000031 9.426 70.68029419999947 10.8 60.87446369999955 7.841 73.86750289999996 3.389 104.16382360000122 9.752 100.97112629999866 11.27 70.2093862000006 9.994)
Error minima by case: (0.2882 8 40.0 1 0.6614 2 19.0 2 2.0962 9 0.4091 2 0.01 2 1.9513 2 0.8453 2 0.1095 9 3.3751 11 6.4018 2 4.3289 2 7.0 1 0.3418 2 10.0453 2 15.0599 2 10.1274 8 0.0388 7 0.2824 9 0.1766 6 0.5683 2 1.1213 7 0.7967 10 0.3566 2)
Average genome size in population (length): 113.055
Average program size in population (points): 114.055
Average percent parens in population: 0.009
Minimum age in population: 202.0286795871431
Maximum age in population: 206.7737819655471
Average age in population: 204.684991796379
Median age in population: 204.7396486007569
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.418
Error (vector) diversity:			 0.441
Behavioral diversity:				 0.441
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 258118450
--- Timings ---
Current time: 1529616382571 milliseconds
Total Time:         538.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       192.8 seconds, 35.8%
Fitness Testing:    271.9 seconds, 50.5%
Report:              73.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_max} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_max float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec float_dec float_dec integer_yank float_dup_times float_yank float_yank float_mult integer_min float_dec integer_yank float_dec float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2468.2737429999997
Median total errors in population: 968.6648
Error averages by case: (65.68842840000026 10.039 126.15754630000006 3.285 149.8403178000007 12.667 143.70480709999993 4.139 74.66692179999998 11.104 65.63297550000011 9.404 67.26630710000026 8.715 73.68107429999999 3.285 93.16276680000091 11.1 66.39249529999954 10.401 79.33500259999987 12.176 118.52293939999993 3.298 105.46973730000147 10.584 77.4854553 3.286 74.01435020000007 10.881 110.61735869999849 8.962 100.84308900000008 3.275 127.68102590000126 9.669 61.48464710000029 9.427 67.53772719999965 10.774 61.63220099999962 7.882 75.24012529999996 3.443 106.30271030000095 9.752 98.17479459999907 11.271 68.81993870000056 10.1)
Error minima by case: (0.5192 6 59.0 2 0.6614 2 65.6899 2 2.0962 9 0.4091 2 0.01 2 8.0 2 0.8453 2 0.1095 9 2.3751 10 36.949 2 1.3289 2 7.0 1 0.3418 2 10.0453 2 35.0 2 10.1274 9 0.0388 7 0.2824 9 0.1712 6 11.0 2 3.7488 7 1.7967 10 0.3566 2)
Average genome size in population (length): 112.965
Average program size in population (points): 113.965
Average percent parens in population: 0.009
Minimum age in population: 203.5602436870428
Maximum age in population: 208.2419495310965
Average age in population: 206.0007508844458
Median age in population: 206.0469112830426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.397
Error (vector) diversity:			 0.414
Behavioral diversity:				 0.415
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 260942675
--- Timings ---
Current time: 1529616387158 milliseconds
Total Time:         543.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.1 seconds, 35.7%
Fitness Testing:    274.4 seconds, 50.5%
Report:              74.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_mod float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2570.777213299998
Median total errors in population: 966.4472000000001
Error averages by case: (68.81018030000004 10.077 127.40158120000014 3.427 156.85182039999958 12.725 144.73612309999984 4.295 81.58239119999999 11.114 69.02280520000014 9.417 70.62165450000016 8.775 74.2802589 3.395 96.56696650000103 11.061 71.55591060000006 10.418 86.25412900000009 12.151 118.83224499999989 3.446 113.02796930000243 10.645 77.04463290000001 3.425 82.87346239999923 10.955 113.71819349999821 8.995 101.18010200000013 3.426 130.29171550000126 9.686 64.84337380000025 9.446 77.08135039999961 10.805 65.52423609999933 7.85 76.49310899999996 3.569 108.90341060000141 9.818 106.78885209999837 11.282 76.14773980000062 10.14)
Error minima by case: (0.2812 8 59.0 2 0.3386 2 63.6899 2 0.0962 10 0.3604 2 0.01 2 8.0 2 4.1547 2 0.1095 9 4.3751 11 11.934 2 7.3289 2 6.8458 1 0.3418 2 10.0453 2 3.276 2 1.4158 9 0.0388 7 0.2824 10 0.0654 6 11.0 2 14.3459 7 0.7967 10 0.3566 2)
Average genome size in population (length): 112.836
Average program size in population (points): 113.836
Average percent parens in population: 0.009
Minimum age in population: 204.5602436870428
Maximum age in population: 210.2419495310965
Average age in population: 207.3315367905981
Median age in population: 207.3873086346927
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.412
Error (vector) diversity:			 0.437
Behavioral diversity:				 0.437
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 263763717
--- Timings ---
Current time: 1529616391789 milliseconds
Total Time:         547.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       195.5 seconds, 35.7%
Fitness Testing:    277.0 seconds, 50.6%
Report:              75.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -49} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_frominteger})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -49 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float float_frominteger)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2583.4808218
Median total errors in population: 1002.915
Error averages by case: (69.28271329999995 10.073 127.53840310000014 3.442 157.29002689999902 12.619 144.89183789999987 4.29 82.34183529999997 11.119 69.31653670000014 9.368 71.15395909999995 8.791 76.2120880000001 3.45 97.03511760000099 11.027 71.3212612000003 10.429 87.52856320000036 12.186 119.36216899999982 3.455 112.7153703000025 10.614 79.95583959999993 3.425 83.07181499999892 10.821 114.52697379999809 8.993 101.84256880000018 3.395 130.69219150000131 9.697 64.69226870000027 9.431 76.46316919999956 10.836 65.31325289999924 7.922 77.59663189999996 3.587 109.30684700000164 9.83 105.32739209999824 11.288 78.58798970000065 10.026)
Error minima by case: (0.3833 8 59.0 2 0.3386 2 80.0 2 2.0962 9 0.4091 2 0.01 2 8.0 2 0.8453 2 0.1095 9 3.3751 9 48.949 2 6.6711 2 7.0 1 8.3418 2 2.0453 2 35.0 2 32.3894 8 0.0388 6 0.2824 9 0.1217 6 11.0 2 3.3955 7 0.2033 9 0.3566 2)
Average genome size in population (length): 113.374
Average program size in population (points): 114.374
Average percent parens in population: 0.009
Minimum age in population: 206.1601998963628
Maximum age in population: 210.900188100973
Average age in population: 208.6919426272734
Median age in population: 208.7204886076521
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.421
Error (vector) diversity:			 0.44
Behavioral diversity:				 0.44
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 266598334
--- Timings ---
Current time: 1529616396456 milliseconds
Total Time:         552.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.8 seconds, 35.6%
Fitness Testing:    279.6 seconds, 50.6%
Report:              75.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 58526.35269999994
Test mean error for best: 29.26318
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -91} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_yankdup} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_cos} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 integer_min float_stackdepth integer_min in2 in2 -91 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_yankdup -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_shove float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_cos integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2462.0429125
Median total errors in population: 997.2642
Error averages by case: (67.92950730000045 10.07 123.95272650000014 3.337 149.89332260000018 12.55 140.9177361999999 4.201 73.05693009999999 11.069 65.75633170000006 9.427 68.3521680000006 8.824 71.25360039999998 3.346 94.564217900001 11.08 67.96183969999967 10.43 76.82509729999992 12.156 116.00014879999988 3.366 105.61817790000202 10.567 75.05214410000005 3.314 74.24956710000018 10.808 113.15432389999845 9.064 98.60434920000013 3.318 129.54857160000122 9.716 63.38826120000029 9.463 67.5839960999996 10.815 63.979238699999456 7.926 72.48535639999997 3.494 106.59986330000122 9.885 97.83993179999874 11.267 67.93250470000062 10.05)
Error minima by case: (0.153 8 26.9603 1 1.6614 2 19.0 2 1.0962 9 0.14 2 0.0066 2 8.0 2 3.1547 2 0.1095 9 1.6249 11 9.6384 2 3.6711 2 6.0487 1 0.3418 2 10.0453 2 7.2909 2 4.0002 7 0.1358 7 0.2824 9 0.1217 6 11.0 2 17.0058 7 0.2033 9 0.3566 2)
Average genome size in population (length): 113.857
Average program size in population (points): 114.857
Average percent parens in population: 0.009
Minimum age in population: 207.4439932162074
Maximum age in population: 212.0926834880369
Average age in population: 209.9577892849909
Median age in population: 209.9893627082949
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.451
Error (vector) diversity:			 0.475
Behavioral diversity:				 0.475
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 269444968
--- Timings ---
Current time: 1529616401044 milliseconds
Total Time:         556.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       198.2 seconds, 35.6%
Fitness Testing:    282.1 seconds, 50.7%
Report:              76.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_max} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_mod} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_max float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec float_dec float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dec float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_mod integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_rot integer_yank float_dup_times float_yank float_yank float_yank float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank float_dup_times integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2413.137125999999
Median total errors in population: 1001.5676000000001
Error averages by case: (62.83313930000025 10.028 121.65958820000007 3.256 150.62589260000016 12.651 139.44188469999995 4.113 73.84389989999997 11.09 62.28196640000004 9.338 64.4067607000004 8.796 69.9367373 3.264 89.99302290000081 10.994 64.70592139999954 10.381 79.53614030000013 12.161 114.00243999999994 3.276 105.39903070000182 10.635 72.40834340000002 3.21 76.15349979999982 10.862 107.7788225999986 9.026 96.21777200000007 3.224 124.16196860000119 9.676 58.094212200000264 9.432 70.05276909999978 10.824 58.79859779999965 7.878 71.49552779999996 3.388 102.25292780000115 9.928 96.73659289999878 11.275 71.5606676000006 10.053)
Error minima by case: (0.2882 8 1.9603 2 0.6614 2 45.3101 2 2.0962 9 0.4091 2 0.01 2 0.7618 2 0.8453 2 0.1095 9 2.3751 11 29.3402 2 1.6711 2 7.0 1 0.3418 2 7.0453 2 17.7091 2 10.1274 8 0.0388 7 0.2824 9 0.1601 6 11.0 2 18.73 7 1.7967 10 0.3566 2)
Average genome size in population (length): 113.822
Average program size in population (points): 114.822
Average percent parens in population: 0.009
Minimum age in population: 208.9234145630743
Maximum age in population: 213.4146119287208
Average age in population: 211.2742550178767
Median age in population: 211.3118424813844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.422
Error (vector) diversity:			 0.444
Behavioral diversity:				 0.445
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 272290643
--- Timings ---
Current time: 1529616405701 milliseconds
Total Time:         561.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.5 seconds, 35.5%
Fitness Testing:    284.7 seconds, 50.7%
Report:              77.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_sin} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_yank} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add float_sin integer_min float_dec integer_mod integer_stackdepth float_yank integer_add integer_mod integer_min integer_min integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add integer_sub integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank float_yank float_yank in1 float_max float_frominteger print_float)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2584.254484099999
Median total errors in population: 968.6648
Error averages by case: (69.69910059999974 10.044 127.52511180000012 3.365 158.40918089999968 12.581 144.56362889999988 4.236 82.47601089999999 11.109 69.3773506000001 9.485 71.3488149999997 8.836 75.93240510000004 3.313 97.517612100001 11.161 70.46497109999994 10.394 87.62156430000022 12.163 119.42026659999989 3.39 114.55003780000209 10.509 78.57835690000002 3.335 80.18508559999927 10.849 115.57501779999845 9.068 102.15125340000012 3.345 131.18318590000132 9.672 64.68734080000033 9.434 77.71945199999954 10.816 65.30492109999959 7.838 77.53536419999996 3.477 109.82361960000108 9.821 107.2588831999987 11.288 75.75694790000061 10.06)
Error minima by case: (0.5192 7 40.0 1 1.6614 2 19.0 2 0.0962 9 0.14 2 0.01 2 8.0 2 2.1547 2 0.1095 9 0.3751 10 1.5672 2 9.3289 2 6.6554 1 0.3418 2 5.0453 2 10.2253 2 10.1274 9 0.09 6 0.2824 9 0.0568 6 11.0 2 22.1213 7 0.7967 10 0.3566 2)
Average genome size in population (length): 113.56
Average program size in population (points): 114.56
Average percent parens in population: 0.009
Minimum age in population: 210.0283178468663
Maximum age in population: 214.5858229734036
Average age in population: 212.5582746125665
Median age in population: 212.6175842451094
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.421
Error (vector) diversity:			 0.449
Behavioral diversity:				 0.449
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 275129743
--- Timings ---
Current time: 1529616410408 milliseconds
Total Time:         566.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       200.8 seconds, 35.5%
Fitness Testing:    287.3 seconds, 50.7%
Report:              77.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank in1 float_max float_frominteger print_float)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2207.8941707999984
Median total errors in population: 961.4241000000001
Error averages by case: (53.0814023000002 10.035 112.71908490000011 3.188 143.2490240000005 12.669 130.6012540999999 4.059 67.51854969999998 11.095 52.401509900000036 9.294 54.50524880000039 8.723 59.64849139999997 3.143 80.93395560000091 10.915 56.85203519999952 10.364 71.83709519999994 12.164 104.8123421999999 3.208 99.38581580000175 10.609 62.78452330000005 3.164 69.68366870000007 10.877 99.06563589999881 8.935 86.57820080000009 3.158 116.72967760000124 9.648 50.99652830000031 9.395 63.666690499999646 10.746 51.71916959999976 7.861 61.13342899999996 3.28 92.55476520000089 9.843 93.05142089999883 11.225 64.7276519000006 10.059)
Error minima by case: (0.5679 8 29.9909 2 0.6614 2 35.2613 2 2.0962 10 0.2199 2 0.01 2 8.0 2 0.8453 2 0.1095 9 4.3751 10 42.4858 2 6.3289 2 7.0 1 9.3418 2 9.0453 2 33.8278 2 12.6145 8 0.0941 7 0.2824 10 0.0872 6 11.0 2 2.2427 7 0.2033 9 0.3566 2)
Average genome size in population (length): 114.265
Average program size in population (points): 115.265
Average percent parens in population: 0.009
Minimum age in population: 211.0283178468663
Maximum age in population: 216.0491741790558
Average age in population: 213.910225158624
Median age in population: 213.962649995312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.394
Error (vector) diversity:			 0.415
Behavioral diversity:				 0.415
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 277986543
--- Timings ---
Current time: 1529616415009 milliseconds
Total Time:         570.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.2 seconds, 35.4%
Fitness Testing:    289.8 seconds, 50.8%
Report:              78.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2734.6248412999994
Median total errors in population: 980.0663999999999
Error averages by case: (74.61317989999985 10.087 133.48085860000015 3.345 163.41671469999946 12.652 150.67466019999986 4.201 89.98735509999999 11.107 74.9890223000002 9.42 76.5824984999999 8.791 82.66935610000003 3.371 101.80963700000102 11.05 75.26053570000025 10.384 93.62651670000037 12.147 126.04419119999983 3.353 120.49151720000259 10.61 84.92680219999994 3.287 88.64041029999935 10.923 119.13113279999791 9.015 108.51839100000018 3.304 134.75636190000102 9.693 68.82763410000024 9.446 86.93411419999954 10.814 69.53672339999915 7.91 84.73054369999998 3.538 114.94046770000176 9.875 115.54750169999821 11.27 84.78771510000064 10.108)
Error minima by case: (0.5679 8 40.0 1 1.6614 2 19.0 2 3.0962 9 0.4091 2 0.01 2 7.7618 2 0.1896 2 0.1095 8 2.6249 11 37.136 2 6.3289 2 7.0 1 0.3418 2 0.4513 2 28.478 2 18.0596 9 0.1358 7 0.2824 8 0.1755 6 10.4317 2 10.9342 7 0.7967 10 0.3566 2)
Average genome size in population (length): 114.864
Average program size in population (points): 115.864
Average percent parens in population: 0.009
Minimum age in population: 212.638014309726
Maximum age in population: 217.5114967302287
Average age in population: 215.1121992706103
Median age in population: 215.1557671388012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.409
Error (vector) diversity:			 0.435
Behavioral diversity:				 0.436
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 280858194
--- Timings ---
Current time: 1529616419594 milliseconds
Total Time:         575.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       203.6 seconds, 35.4%
Fitness Testing:    292.4 seconds, 50.8%
Report:              79.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_dup_times float_mult integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_min float_dec float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank in1 float_max float_frominteger print_float)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2565.777550999999
Median total errors in population: 969.415
Error averages by case: (72.02910769999971 10.1 129.4332263000001 3.304 148.6419615000004 12.65 146.2033789999999 4.16 73.04893409999998 11.074 70.68374180000005 9.478 72.94950119999972 8.892 79.24227340000006 3.364 98.59436610000094 11.141 74.3034255000002 10.409 77.57077140000005 12.13 122.2111613999999 3.297 104.40789200000201 10.589 81.10550049999998 3.31 76.60851229999972 10.962 116.63507329999837 9.134 104.39162080000014 3.268 134.738689300001 9.719 68.93504870000031 9.483 72.15671359999969 10.799 69.49849429999959 7.943 80.66623379999997 3.504 110.74394030000128 9.943 99.46887939999891 11.251 71.49910330000066 10.106)
Error minima by case: (0.5679 8 40.0 1 0.6614 2 19.0 2 2.0962 10 0.4027 2 0.01 2 8.0 2 0.8453 2 0.1095 8 2.3751 10 18.0769 2 6.3289 2 7.0 1 0.3418 2 10.0453 2 26.735 2 61.9213 9 0.0917 7 0.2824 8 0.1766 6 11.0 2 35.8787 7 0.2033 9 0.3566 2)
Average genome size in population (length): 113.511
Average program size in population (points): 114.511
Average percent parens in population: 0.009
Minimum age in population: 214.3952218202686
Maximum age in population: 218.8011657382683
Average age in population: 216.4431377332133
Median age in population: 216.4692868971617
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.405
Error (vector) diversity:			 0.432
Behavioral diversity:				 0.432
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 283696128
--- Timings ---
Current time: 1529616424118 milliseconds
Total Time:         579.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       204.9 seconds, 35.3%
Fitness Testing:    295.0 seconds, 50.9%
Report:              80.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction float_sub} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_min} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_yank})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec integer_add float_dec float_dec float_dec integer_yank float_dup_times float_yank float_rot float_sub integer_min float_dec integer_yank float_dec float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_sub float_dup_times float_yank integer_min float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_yank)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2615.371928300001
Median total errors in population: 1006.6454500000001
Error averages by case: (70.40478230000001 10.098 128.0682698000001 3.404 161.03876079999938 12.617 144.8780924999999 4.263 85.16121089999997 11.146 68.73912320000005 9.436 70.9628317000001 8.929 76.74540720000003 3.356 96.95651450000089 11.036 72.11522230000007 10.474 91.1919926000001 12.196 120.22405329999987 3.443 116.56757370000216 10.595 79.57811289999998 3.401 84.59478029999934 10.798 115.76358429999833 9.098 102.66842900000015 3.393 130.59630160000123 9.762 65.55589830000024 9.474 80.8487991999996 10.846 66.19230859999945 8.023 78.23059269999997 3.508 108.12309270000128 9.981 108.80160589999846 11.291 80.76758800000056 10.029)
Error minima by case: (0.2882 8 54.8116 2 0.6614 2 49.5413 2 2.0962 9 0.0332 2 0.01 2 8.0 2 0.8453 2 0.1095 9 3.3751 11 4.1997 2 6.3289 2 1.2685 1 0.3418 2 1.0453 2 12.8577 2 11.1274 9 0.09 7 0.2824 9 0.1766 6 11.0 2 13.926 7 0.2033 9 0.3566 2)
Average genome size in population (length): 113.462
Average program size in population (points): 114.462
Average percent parens in population: 0.009
Minimum age in population: 215.7310964371168
Maximum age in population: 219.8449765254258
Average age in population: 217.8128731418568
Median age in population: 217.8518499863359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.432
Error (vector) diversity:			 0.462
Behavioral diversity:				 0.463
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 286532820
--- Timings ---
Current time: 1529616428703 milliseconds
Total Time:         584.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       206.2 seconds, 35.3%
Fitness Testing:    297.5 seconds, 50.9%
Report:              80.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 58595.710399999945
Test mean error for best: 29.29786
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_pop} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_inc} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_max} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_rot} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_pop integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_inc float_dup_times -59 float_mod float_max integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_rot float_yank float_dup_times integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2371.473602000001
Median total errors in population: 970.915
Error averages by case: (63.27905940000037 10.037 119.11714560000013 3.167 147.2669701000007 12.6 138.2605020999999 4.057 70.62900749999997 11.067 63.30134620000008 9.394 64.52327790000051 8.89 67.28457829999999 3.148 91.14900270000099 11.045 65.09272699999948 10.417 76.49149239999977 12.142 112.17047809999988 3.184 101.89144530000145 10.596 69.25257830000004 3.137 70.85486020000035 10.799 109.81974239999874 9.052 94.44394190000011 3.124 123.74179350000131 9.658 57.382071000000366 9.414 64.61045669999976 10.811 57.996939199999865 7.881 70.15165739999996 3.274 103.71881140000079 9.88 94.34618399999907 11.256 66.61053340000063 10.057)
Error minima by case: (0.3833 7 40.0 1 0.3386 2 19.0 2 2.0962 9 0.0385 2 0.01 2 8.0 2 0.1919 2 0.1095 9 3.6249 10 36.949 2 10.3289 2 7.0 1 0.3418 2 10.0453 2 35.0 2 10.1274 8 0.0388 6 0.2824 9 0.1712 6 11.0 2 18.8787 7 0.7967 10 0.3566 2)
Average genome size in population (length): 113.645
Average program size in population (points): 114.645
Average percent parens in population: 0.009
Minimum age in population: 217.0555812494929
Maximum age in population: 220.9239544316193
Average age in population: 219.1084597676561
Median age in population: 219.1366630690205
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.42
Error (vector) diversity:			 0.44
Behavioral diversity:				 0.442
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 289374171
--- Timings ---
Current time: 1529616433544 milliseconds
Total Time:         589.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       207.6 seconds, 35.2%
Fitness Testing:    300.2 seconds, 51.0%
Report:              81.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction integer_min} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction 23} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_min integer_min float_dec float_dec integer_add float_dec float_dec float_dec integer_yank float_dup_times float_yank float_yank float_mult integer_min integer_stackdepth integer_min float_dec integer_yank integer_shove float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times 23 float_yank integer_stackdepth integer_min float_dec integer_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2679.1864558999987
Median total errors in population: 972.6993
Error averages by case: (73.82857249999988 10.042 130.5233210000001 3.254 162.27188629999978 12.708 148.03456939999992 4.15 87.09679409999998 11.126 75.04308450000009 9.326 76.70882949999985 8.793 79.54940640000002 3.22 102.95184600000105 10.993 75.08837040000013 10.437 92.07449609999995 12.205 123.2175754999999 3.308 117.69339530000212 10.668 81.43890819999999 3.23 84.03391019999984 10.906 120.46141739999858 9.002 105.5350905000001 3.223 135.13295490000107 9.706 70.53122010000035 9.433 76.44318079999947 10.825 71.29840779999955 7.929 81.49884599999997 3.341 113.69947540000115 9.915 108.37044699999862 11.288 77.51745060000066 10.115)
Error minima by case: (0.2281 6 59.0 2 1.3386 2 57.4585 2 0.9038 9 0.2286 2 0.01 2 8.0 2 0.8453 2 0.1095 9 2.3751 10 3.7175 2 4.6711 2 1.3707 1 0.3418 2 9.9547 2 4.9405 2 11.1274 9 0.0388 6 0.2824 9 0.0556 6 1.4317 2 3.1213 7 0.7967 10 0.3566 2)
Average genome size in population (length): 113.693
Average program size in population (points): 114.693
Average percent parens in population: 0.009
Minimum age in population: 218.1145040312107
Maximum age in population: 222.0732281948178
Average age in population: 220.3342831387315
Median age in population: 220.3597033174828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.42
Error (vector) diversity:			 0.446
Behavioral diversity:				 0.446
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 292216596
--- Timings ---
Current time: 1529616438269 milliseconds
Total Time:         594.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       208.9 seconds, 35.2%
Fitness Testing:    302.9 seconds, 51.0%
Report:              82.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec float_dec float_dec float_dup float_dec integer_min float_dec integer_yank float_dup_times integer_rot float_dup_times float_yank float_dup_times float_mult integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_min float_dec float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank in1 float_max float_frominteger print_float)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2733.6343041000014
Median total errors in population: 992.415
Error averages by case: (73.67795839999985 10.052 134.17968420000008 3.495 165.55919999999975 12.69 150.4383097999999 4.365 90.74786629999998 11.163 73.09073369999996 9.396 75.5138431 8.869 82.42295830000005 3.418 101.68386590000087 11.06 75.33565719999997 10.455 96.1229847000001 12.219 125.94099669999989 3.546 121.35019890000211 10.692 85.85356850000001 3.468 89.8863115999997 10.85 119.62500299999843 9.074 108.27486600000009 3.458 135.79193440000094 9.719 70.2760848000003 9.444 82.80913459999955 10.903 70.89823449999965 7.917 83.93923579999996 3.585 112.46111910000089 9.93 112.50246819999865 11.329 84.10908640000058 10.046)
Error minima by case: (0.5679 8 59.0 2 0.3386 2 64.6899 2 3.0962 9 0.14 2 0.01 2 8.0 2 1.8453 2 0.1095 8 3.3751 11 35.949 2 3.3289 2 7.0 1 1.3418 2 4.0453 2 34.2189 2 11.1274 9 0.0388 7 0.2824 10 0.0623 6 11.0 2 5.1933 7 0.2033 9 0.3566 2)
Average genome size in population (length): 113.24
Average program size in population (points): 114.24
Average percent parens in population: 0.009
Minimum age in population: 219.4478501818519
Maximum age in population: 223.361562763504
Average age in population: 221.6421078501607
Median age in population: 221.7031892430203
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.932
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.932
Total error diversity:				 0.405
Error (vector) diversity:			 0.425
Behavioral diversity:				 0.426
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 295047796
--- Timings ---
Current time: 1529616443057 milliseconds
Total Time:         598.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       210.2 seconds, 35.1%
Fitness Testing:    305.6 seconds, 51.0%
Report:              82.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 58616.41249999995
Test mean error for best: 29.30821
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_rot} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction 1.6173652934160714})
Best program: (float_sub float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_rot integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec float_rot integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times integer_yank float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float 1.6173652934160714)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2582.1333818000007
Median total errors in population: 971.915
Error averages by case: (70.39532559999999 10.061 130.85993330000022 3.348 153.7751527000001 12.648 147.69307299999988 4.203 78.30788499999998 11.084 69.22433050000011 9.418 71.53512900000011 8.809 78.89310140000003 3.386 97.635567200001 11.084 71.99327049999995 10.399 84.15027620000008 12.15 123.1411244999998 3.377 109.27695290000231 10.619 82.1354812 3.342 79.20317659999955 10.887 115.17627589999833 8.979 105.65905900000017 3.32 131.7625722000011 9.666 66.10476390000031 9.43 72.47712799999962 10.779 66.82511999999949 7.881 80.53390439999995 3.528 109.61575490000122 9.799 102.14177729999844 11.259 74.10724660000065 10.054)
Error minima by case: (0.2882 8 9.9603 2 0.3386 2 16.3101 2 3.0962 9 0.2286 2 0.01 2 8.0 2 4.8453 2 0.1095 9 3.3751 10 35.949 2 6.6711 2 7.0 1 0.3418 2 1.0453 2 33.7091 2 10.1274 9 0.0115 7 0.2824 9 0.1766 6 8.9377 2 7.2481 7 0.7967 9 0.3566 2)
Average genome size in population (length): 113.041
Average program size in population (points): 114.041
Average percent parens in population: 0.009
Minimum age in population: 220.4478501818519
Maximum age in population: 224.9875961917289
Average age in population: 222.8889702174717
Median age in population: 222.9041904744717
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.41
Error (vector) diversity:			 0.432
Behavioral diversity:				 0.433
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 297873946
--- Timings ---
Current time: 1529616447658 milliseconds
Total Time:         603.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.6 seconds, 35.1%
Fitness Testing:    308.2 seconds, 51.1%
Report:              83.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_rot} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_mult} {:instruction integer_min} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_yank -81.37761634098129 float_tan -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_rot float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_add integer_mod integer_min float_dec integer_stackdepth float_dec integer_add integer_mod float_dec float_dec integer_add float_dec float_dec float_dec integer_yank float_dup_times float_yank float_yank float_mult integer_min integer_stackdepth integer_min float_dec integer_yank integer_shove float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times integer_mult float_yank float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2336.7288542
Median total errors in population: 968.6648
Error averages by case: (62.46516290000024 10.05 116.08943250000011 3.286 148.3957657000005 12.598 133.4104321999999 4.171 72.62348949999998 11.103 59.945417400000245 9.328 62.6585885000004 8.681 64.49903059999998 3.311 88.95745750000093 10.984 62.8308112999995 10.4 76.80560009999995 12.157 107.8260835999999 3.324 103.82866260000189 10.566 67.05005810000003 3.29 71.50380730000016 10.768 107.41534719999851 8.9 90.1813665000001 3.264 121.58564490000128 9.631 55.57616760000032 9.383 67.45898649999955 10.815 56.26509359999965 7.801 65.65607219999995 3.45 100.7570790000011 9.757 97.9439317999986 11.27 66.66736510000061 10.044)
Error minima by case: (0.2882 8 27.4783 1 1.6614 2 18.5117 2 3.0962 9 0.129 2 0.01 2 7.7618 2 3.1547 2 0.1095 9 3.3751 11 20.8519 2 8.6711 2 7.0 1 1.3418 2 3.0453 2 9.9373 2 10.1274 8 0.09 7 0.2824 9 0.1712 6 10.4317 2 8.2915 7 0.7967 10 0.3566 2)
Average genome size in population (length): 112.653
Average program size in population (points): 113.653
Average percent parens in population: 0.009
Minimum age in population: 221.5571240299313
Maximum age in population: 226.0389346732767
Average age in population: 224.1780220792771
Median age in population: 224.1870270208255
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.416
Error (vector) diversity:			 0.433
Behavioral diversity:				 0.433
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 300690540
--- Timings ---
Current time: 1529616452276 milliseconds
Total Time:         608.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       212.9 seconds, 35.0%
Fitness Testing:    310.8 seconds, 51.1%
Report:              84.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_min} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -51} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_swap} {:instruction float_cos} {:instruction float_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_min} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_min -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -51 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod float_dec integer_yank integer_mod integer_min integer_min float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_swap float_cos float_yank float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add integer_dup integer_rot float_dup_times float_yank float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_min float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2592.583394199998
Median total errors in population: 991.2159
Error averages by case: (71.85964900000006 10.066 128.55062510000016 3.527 156.99792100000022 12.774 145.54343809999983 4.374 80.63282039999999 11.106 70.15948349999991 9.424 72.72824490000008 8.824 76.12300770000004 3.484 98.92138730000099 11.114 72.28908209999993 10.464 84.97640200000015 12.184 119.96991989999984 3.549 112.7339520000019 10.744 79.75086749999996 3.475 80.84893349999969 10.994 117.16509819999837 9.023 102.8444046000002 3.514 132.85333460000132 9.712 66.8319510000003 9.447 74.60948849999951 10.817 67.40459729999942 7.895 77.62780179999997 3.667 110.4227975000013 9.836 104.60129879999876 11.28 74.69688790000065 10.146)
Error minima by case: (0.5679 8 30.8857 1 0.3386 2 19.0 2 2.0962 9 0.14 2 0.01 2 7.7618 2 0.1547 2 0.1095 9 3.3751 11 28.1257 2 4.3289 2 7.0 1 0.3418 2 10.0453 2 21.0107 2 10.1274 8 0.0713 7 0.2824 8 0.0623 6 10.4317 2 4.1523 7 0.2033 9 0.3566 2)
Average genome size in population (length): 112.919
Average program size in population (points): 113.919
Average percent parens in population: 0.009
Minimum age in population: 223.4865843891752
Maximum age in population: 227.4266861801351
Average age in population: 225.5499446586752
Median age in population: 225.6001024972705
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.403
Error (vector) diversity:			 0.421
Behavioral diversity:				 0.421
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 303513615
--- Timings ---
Current time: 1529616456939 milliseconds
Total Time:         612.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.2 seconds, 35.0%
Fitness Testing:    313.4 seconds, 51.1%
Report:              84.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_pop} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank float_dup_times float_dup_times float_pop float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_sub float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times integer_mult integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2641.3002917
Median total errors in population: 969.415
Error averages by case: (75.43598559999997 10.118 129.40011430000015 3.353 157.82662509999983 12.637 146.77989599999992 4.215 80.92129599999998 11.115 75.10730650000006 9.365 76.62195889999994 8.774 80.26598020000007 3.39 102.10714030000096 11.04 76.9129843000002 10.443 85.51440579999999 12.18 121.00813809999985 3.403 113.4232355000024 10.582 81.2305106 3.349 79.62813559999987 10.836 120.94093009999816 8.98 104.21079820000016 3.35 133.322795400001 9.733 68.38814170000029 9.472 76.99392219999942 10.843 69.05174569999949 7.953 81.53231299999997 3.533 114.90271300000137 9.913 105.33163899999865 11.27 74.59958060000062 9.995)
Error minima by case: (0.1423 6 4.2605 1 1.6614 2 9.5309 2 2.0962 9 0.2189 2 0.01 2 7.0 2 1.6856 2 0.1095 9 3.3751 11 36.949 2 6.3289 2 6.0487 2 0.3418 2 1.4236 1 31.9548 2 10.1274 8 0.0388 7 0.2824 8 0.0623 6 10.0 1 0.5133 7 0.2033 9 0.3566 2)
Average genome size in population (length): 113.394
Average program size in population (points): 114.394
Average percent parens in population: 0.009
Minimum age in population: 224.4865843891752
Maximum age in population: 229.0365965511802
Average age in population: 226.8803738842044
Median age in population: 226.8978257045441
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.409
Error (vector) diversity:			 0.425
Behavioral diversity:				 0.426
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 306348691
--- Timings ---
Current time: 1529616461621 milliseconds
Total Time:         617.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       215.6 seconds, 34.9%
Fitness Testing:    316.0 seconds, 51.2%
Report:              85.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -59} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_add} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_min} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -59 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times integer_fromfloat float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank integer_stackdepth integer_min float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_dup_times float_add float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank integer_min in1 float_max float_frominteger print_float)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2825.4129052999997
Median total errors in population: 997.4999
Error averages by case: (81.85158359999936 10.102 139.57116360000012 3.461 160.31452929999955 12.684 156.1013476999999 4.299 84.92153539999998 11.087 80.66220099999997 9.505 83.16502319999935 8.947 89.44127240000007 3.432 109.01699630000098 11.169 85.75352300000071 10.481 89.60667280000007 12.152 131.33305109999986 3.452 116.11318180000227 10.66 92.30339889999998 3.429 88.3905257999992 10.996 126.69554229999821 9.139 114.75774240000011 3.41 143.53271120000056 9.782 78.26706390000031 9.493 81.5563967999997 10.812 78.76238259999948 8.027 91.00482549999997 3.57 120.11429990000138 9.979 108.72254099999856 11.309 81.91539380000066 10.161)
Error minima by case: (0.4321 8 59.0 2 0.6614 2 19.0 2 3.0962 10 0.2286 2 0.01 2 7.0 2 0.1547 2 0.1095 8 4.3751 9 28.949 2 6.3289 2 7.0 1 0.3418 2 10.0453 2 35.0 2 10.1274 8 0.0901 7 0.2824 9 0.1397 6 0.5683 1 1.1213 7 0.2033 9 0.3566 2)
Average genome size in population (length): 112.735
Average program size in population (points): 113.735
Average percent parens in population: 0.009
Minimum age in population: 225.8190565855612
Maximum age in population: 230.1393732957583
Average age in population: 228.2198477260007
Median age in population: 228.2760493561156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.42
Error (vector) diversity:			 0.44
Behavioral diversity:				 0.44
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 309167275
--- Timings ---
Current time: 1529616466324 milliseconds
Total Time:         622.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       216.9 seconds, 34.9%
Fitness Testing:    318.6 seconds, 51.2%
Report:              86.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth float_dup_times float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec float_dec float_dec float_dec integer_add float_dec integer_min float_dec float_dup_times float_yank float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times integer_fromfloat float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank integer_stackdepth integer_min float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_min float_dup_times integer_add float_dup_times float_yank float_yank in1 float_max float_frominteger print_float)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2924.935572300001
Median total errors in population: 990.1256000000001
Error averages by case: (83.90928189999927 10.132 141.60171240000014 3.478 166.6811371999991 12.654 158.79858429999985 4.338 92.16967239999998 11.145 83.68688149999991 9.445 85.61657099999938 8.903 91.5832600000001 3.518 110.84870580000091 11.101 88.30397390000097 10.472 97.88389790000032 12.208 134.24979179999983 3.497 122.62895200000256 10.607 94.32803489999992 3.444 93.62807499999923 10.96 128.26568969999795 9.06 117.01039210000019 3.434 146.06056240000032 9.8 81.43955440000028 9.462 89.47510479999947 10.836 82.00394539999922 8.017 92.99335449999995 3.685 123.1098159000016 9.935 117.2973046999981 11.332 89.71731640000066 10.181)
Error minima by case: (0.4321 8 36.9603 2 0.3386 2 10.3101 2 3.0962 10 0.2286 2 0.01 2 7.7618 2 3.1547 2 0.1095 9 0.3751 11 7.8084 2 7.3289 2 2.7202 1 0.3418 2 9.3633 2 0.8496 2 10.1274 8 0.0388 7 0.2824 9 0.0236 6 10.4317 2 22.1731 7 0.2033 9 0.3566 2)
Average genome size in population (length): 112.138
Average program size in population (points): 113.138
Average percent parens in population: 0.009
Minimum age in population: 226.8190565855612
Maximum age in population: 231.6315234935412
Average age in population: 229.5359001355713
Median age in population: 229.5686717399657
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.427
Error (vector) diversity:			 0.446
Behavioral diversity:				 0.446
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 311970951
--- Timings ---
Current time: 1529616470903 milliseconds
Total Time:         626.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       218.2 seconds, 34.8%
Fitness Testing:    321.1 seconds, 51.2%
Report:              87.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_shove float_dec integer_yank float_dup_times float_shove float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_dup_times float_sub float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max integer_add float_dup_times integer_rot float_dup_times float_yank integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2496.489776299998
Median total errors in population: 968.6648
Error averages by case: (66.93241990000034 10.099 124.60105560000012 3.392 153.48379509999958 12.657 141.98818579999988 4.259 77.49394039999997 11.111 66.5440260000001 9.383 68.80757610000038 8.779 73.25533610000008 3.391 94.85632970000101 11.109 68.85878499999963 10.441 81.60452690000014 12.15 116.44500109999984 3.441 110.26825770000231 10.571 75.46789449999994 3.377 76.97318399999934 10.889 112.76120859999827 8.977 98.87209390000014 3.411 127.39252720000135 9.694 62.03869040000031 9.469 71.76578039999967 10.791 62.808083999999354 7.863 74.36984609999996 3.532 106.37423980000142 9.863 101.67985509999853 11.271 70.83013690000062 10.097)
Error minima by case: (0.2882 8 2.9603 1 0.3386 2 18.5117 2 1.9038 9 0.2804 2 0.01 2 7.0 2 0.1547 2 0.1095 8 2.3751 9 20.8519 2 2.3289 2 7.0 1 0.6582 2 3.0453 1 9.9373 2 2.6331 9 0.09 7 0.2824 9 0.1507 5 10.0 1 4.1488 7 1.2033 10 0.3566 2)
Average genome size in population (length): 112.077
Average program size in population (points): 113.077
Average percent parens in population: 0.009
Minimum age in population: 227.8190565855612
Maximum age in population: 232.8342751293541
Average age in population: 230.8200783001673
Median age in population: 230.8675983224597
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.399
Error (vector) diversity:			 0.418
Behavioral diversity:				 0.418
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 314773078
--- Timings ---
Current time: 1529616475659 milliseconds
Total Time:         631.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       219.5 seconds, 34.8%
Fitness Testing:    323.8 seconds, 51.3%
Report:              87.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 58615.41249999995
Test mean error for best: 29.30771
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_add} {:instruction float_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_yank -81.37761634098129 float_tan -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_add float_stackdepth integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_yank float_dup_times integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2512.4225561000007
Median total errors in population: 999.2120500000001
Error averages by case: (68.2846969000003 10.076 127.8975811000001 3.482 148.10931890000026 12.697 144.9347789999999 4.331 74.03179739999999 11.101 67.2317671000001 9.386 69.68083690000046 8.802 75.82284369999999 3.431 95.12620020000091 11.092 71.60808219999998 10.445 77.50259200000012 12.159 119.44082209999992 3.482 104.60028610000165 10.63 78.47199150000002 3.43 76.59361059999955 10.877 112.73713129999852 8.995 101.8805517000001 3.435 131.09987770000123 9.736 65.56899730000028 9.452 70.57874959999977 10.796 66.12774789999956 7.923 77.09275959999997 3.582 107.59240020000115 9.873 98.38560789999896 11.271 71.4495272000006 10.088)
Error minima by case: (0.5679 8 59.0 2 0.6614 2 63.9988 2 3.0962 9 0.314 2 0.01 2 8.0 2 0.8453 2 0.1095 9 2.3751 11 10.2579 2 4.8811 2 5.1697 1 0.3418 2 10.0453 2 1.5998 2 8.8185 8 0.09 7 0.2824 9 0.153 6 11.0 2 31.1213 7 0.2033 9 0.3566 2)
Average genome size in population (length): 111.853
Average program size in population (points): 112.853
Average percent parens in population: 0.009
Minimum age in population: 229.380219288073
Maximum age in population: 234.0592915838559
Average age in population: 232.1343836174895
Median age in population: 232.1568168417131
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.409
Error (vector) diversity:			 0.426
Behavioral diversity:				 0.427
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 317569550
--- Timings ---
Current time: 1529616480211 milliseconds
Total Time:         636.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       220.8 seconds, 34.7%
Fitness Testing:    326.3 seconds, 51.3%
Report:              88.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 58617.41249999995
Test mean error for best: 29.30871
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_dup} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction integer_min} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap integer_dup in2 integer_swap -50 in2 integer_swap float_stackdepth float_yankdup in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_max integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_yankdup float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec integer_min float_dec integer_yank float_dup_times float_yank integer_stackdepth integer_min float_dec float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth float_yankdup integer_min float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2641.5861632
Median total errors in population: 1001.415
Error averages by case: (72.42069699999995 10.091 132.74194360000018 3.404 157.54550619999978 12.642 149.79140249999992 4.255 80.05806479999998 11.097 71.95708890000006 9.458 74.21723160000002 8.888 81.49092620000009 3.44 100.107095600001 11.168 73.9587865000001 10.442 85.42734610000011 12.159 124.4026926999998 3.444 112.25551900000224 10.599 83.60569099999998 3.378 81.91891819999944 10.84 118.0011831999983 9.06 107.0083303000002 3.386 134.53480930000111 9.715 68.91090390000026 9.467 75.34571589999956 10.789 69.61977659999933 7.92 82.69451889999993 3.591 111.63587740000149 9.895 104.77682139999843 11.276 76.68331640000063 10.072)
Error minima by case: (0.3532 8 27.4783 2 1.6614 2 18.5117 2 2.0962 9 0.14 2 0.01 2 8.0 2 0.8453 2 0.1095 9 2.6249 10 20.8519 2 3.6711 2 6.0487 1 1.3418 2 0.9547 2 9.9373 2 10.1274 9 0.0388 6 0.2824 9 0.1766 6 11.0 2 4.501 7 0.7967 10 0.3566 2)
Average genome size in population (length): 111.782
Average program size in population (points): 112.782
Average percent parens in population: 0.009
Minimum age in population: 231.3936053917762
Maximum age in population: 235.5420972120186
Average age in population: 233.4246383149051
Median age in population: 233.4472052908695
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.436
Error (vector) diversity:			 0.454
Behavioral diversity:				 0.455
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 320364250
--- Timings ---
Current time: 1529616484784 milliseconds
Total Time:         640.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       222.2 seconds, 34.7%
Fitness Testing:    328.9 seconds, 51.3%
Report:              89.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 58618.41249999995
Test mean error for best: 29.30921
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -76.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -52.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -71.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -49.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -48} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_118} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_max} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_dec} {:instruction integer_min} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_yank} {:instruction float_max} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_max} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction float_pop} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_sub})
Best program: (float_sub -81.37761634098129 float_tan integer_swap -81 integer_add -48 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_118 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_max float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min integer_sub float_dec integer_min float_dec float_dec integer_min float_dec integer_min float_dec float_dup_times integer_dec integer_min float_dup_times float_yank float_yank integer_stackdepth integer_add float_yank float_max integer_yank float_dup_times float_yank float_yank integer_stackdepth float_div integer_add float_dup_times integer_rot integer_shove integer_max float_yank integer_stackdepth integer_min float_dec integer_yank integer_yank float_dup_times float_yank float_yank float_yank float_pop in1 float_max float_frominteger print_float integer_sub)
Errors: [9.5679 10 60.0 2 78.3386 13 81.0 3 10.0962 11 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 5.3751 12 56.0 2 40.6711 10 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 885.1616
Mean: 17.703232
Genome size: 112
Size: 113
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2938.761125199999
Median total errors in population: 990.7159
Error averages by case: (83.94348969999922 10.15 142.5663335000002 3.578 169.8541727999985 12.659 158.85451149999992 4.398 96.42228649999998 11.164 82.94925199999996 9.435 86.22367049999913 8.919 91.44987900000021 3.56 111.25941950000096 11.12 87.87903520000113 10.504 101.07513830000026 12.202 134.66866949999977 3.58 126.78132640000254 10.62 92.17752069999989 3.529 94.64536389999861 10.886 128.33610649999804 9.075 116.33997130000027 3.523 145.3506450000002 9.79 81.24518520000025 9.501 90.10827839999956 10.863 81.95564169999923 8.032 91.72663499999996 3.698 122.19784940000163 9.959 118.15388239999807 11.309 90.39886130000066 10.144)
Error minima by case: (0.5679 7 60.0 2 0.6614 2 64.6899 3 2.0962 10 0.14 2 0.01 2 8.0 2 0.8453 2 0.1095 9 2.6249 11 10.949 2 9.6711 2 4.1697 1 1.3418 2 11.0453 2 2.2909 2 8.1274 8 0.0388 7 0.2824 10 0.0907 6 11.0 2 8.4666 7 0.7967 10 0.3566 2)
Average genome size in population (length): 111.827
Average program size in population (points): 112.827
Average percent parens in population: 0.009
Minimum age in population: 232.4676050400552
Maximum age in population: 236.9837729997981
Average age in population: 234.7856807449112
Median age in population: 234.8095178681811
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.413
Error (vector) diversity:			 0.429
Behavioral diversity:				 0.43
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 323160000
--- Timings ---
Current time: 1529616489381 milliseconds
Total Time:         645.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       223.5 seconds, 34.6%
Fitness Testing:    331.5 seconds, 51.4%
Report:              90.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_dup_times float_sub float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max integer_add float_dup_times integer_rot float_dup_times float_yank integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2501.390754799998
Median total errors in population: 969.415
Error averages by case: (67.43818400000028 10.092 125.24225380000013 3.302 151.53237840000028 12.644 142.85935499999994 4.174 75.91114899999998 11.111 65.60145060000015 9.398 68.0938075000004 8.691 74.56123820000002 3.354 94.34798990000094 11.137 71.77500240000003 10.43 81.49429129999993 12.155 117.73649079999988 3.318 107.28948490000194 10.589 77.10021960000005 3.326 76.58975439999995 10.842 112.77215639999837 8.904 100.1531704000001 3.324 130.07145070000126 9.671 63.60037070000027 9.457 70.3572355999995 10.793 64.25251489999951 7.865 76.15567379999996 3.495 106.67249790000109 9.745 99.0987623999989 11.263 71.54987220000059 10.054)
Error minima by case: (0.3833 8 59.0 2 1.3386 2 64.6899 2 2.0962 10 0.0153 2 0.01 2 8.0 2 0.8453 2 0.1095 9 3.3751 10 22.0179 2 5.3289 2 7.0 1 1.3418 2 10.0453 2 13.3598 2 63.7193 8 0.0388 7 0.2824 9 0.1545 5 11.0 2 26.0524 7 0.7967 10 0.3566 2)
Average genome size in population (length): 112.206
Average program size in population (points): 113.206
Average percent parens in population: 0.009
Minimum age in population: 233.4676050400552
Maximum age in population: 238.1706388179467
Average age in population: 236.074664538706
Median age in population: 236.1185531965081
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.398
Error (vector) diversity:			 0.421
Behavioral diversity:				 0.422
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 325965275
--- Timings ---
Current time: 1529616494096 milliseconds
Total Time:         649.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       224.8 seconds, 34.6%
Fitness Testing:    334.1 seconds, 51.4%
Report:              90.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_dup_times float_sub float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max integer_add float_dup_times integer_rot float_dup_times float_yank integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2255.451442999999
Median total errors in population: 973.9039500000001
Error averages by case: (56.0787451000001 10.006 113.21443420000011 3.185 145.92922330000073 12.613 130.9059653999999 4.062 71.42813729999997 11.078 54.38559560000015 9.288 57.31356180000025 8.746 60.93454419999998 3.22 83.87008950000087 11.009 58.39159089999952 10.361 75.02355829999998 12.125 105.49894599999988 3.2 101.51662700000182 10.552 64.21472390000007 3.191 72.2273219000001 10.867 102.62067349999863 8.926 87.57936030000009 3.189 117.39223260000122 9.636 51.04708020000026 9.345 66.61638549999965 10.806 51.70675099999973 7.861 62.10359299999994 3.362 95.06740730000075 9.823 95.9382596999989 11.234 66.6566355000006 10.105)
Error minima by case: (0.2882 8 59.0 2 1.3386 2 65.6899 2 1.9038 9 0.2286 2 0.01 2 8.0 2 0.1547 2 0.1095 9 3.3751 11 36.949 2 7.3289 2 7.0 1 1.3418 2 11.0453 2 34.6684 2 10.1274 9 0.0388 7 0.2824 8 0.0504 6 1.5683 2 0.1213 7 0.2033 9 0.3566 2)
Average genome size in population (length): 111.799
Average program size in population (points): 112.799
Average percent parens in population: 0.009
Minimum age in population: 234.7537110332691
Maximum age in population: 239.54164576582
Average age in population: 237.4902118079175
Median age in population: 237.5392841625845
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.429
Error (vector) diversity:			 0.453
Behavioral diversity:				 0.453
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 328760485
--- Timings ---
Current time: 1529616498776 milliseconds
Total Time:         654.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       226.2 seconds, 34.6%
Fitness Testing:    336.7 seconds, 51.4%
Report:              91.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_tan} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_tan float_sub float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max integer_add float_dup_times integer_rot float_dup_times float_yank integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2642.1036446000003
Median total errors in population: 969.415
Error averages by case: (71.4094818 10.094 129.4639085000001 3.387 158.34165309999963 12.626 146.90863339999987 4.235 83.79238629999999 11.148 70.07526200000018 9.431 72.48030190000011 8.86 79.77736750000007 3.396 98.36707080000099 11.095 74.70361170000015 10.481 88.57940280000034 12.179 121.74406439999991 3.399 114.34001470000221 10.605 83.31590769999994 3.394 85.19722499999907 10.814 116.3131920999983 9.043 104.20456080000012 3.382 133.60301150000117 9.746 67.66923490000029 9.451 80.55181629999954 10.822 68.2090657999995 7.963 81.07988719999996 3.533 110.04974740000135 9.894 110.45877439999843 11.294 81.21906260000065 9.977)
Error minima by case: (0.2882 7 59.0 2 0.3386 2 65.6899 2 2.0962 10 0.2286 2 0.01 2 8.0 2 0.1547 2 0.1095 9 3.3751 8 20.9871 2 4.6711 2 7.0 1 0.3418 2 9.0453 2 12.3291 2 1.9107 8 0.0388 7 0.2824 8 0.0623 6 2.081 2 0.3914 7 0.2033 9 0.3566 2)
Average genome size in population (length): 111.466
Average program size in population (points): 112.466
Average percent parens in population: 0.009
Minimum age in population: 236.0969308537665
Maximum age in population: 241.1270792473057
Average age in population: 238.8038584931172
Median age in population: 238.848915820858
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.415
Error (vector) diversity:			 0.438
Behavioral diversity:				 0.438
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 331547360
--- Timings ---
Current time: 1529616503401 milliseconds
Total Time:         659.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.5 seconds, 34.5%
Fitness Testing:    339.3 seconds, 51.5%
Report:              92.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_tan} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_tan float_sub float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max integer_add float_dup_times integer_rot float_dup_times float_yank integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2754.5672460999986
Median total errors in population: 969.415
Error averages by case: (78.66815739999933 10.169 137.7913040000002 3.528 156.56230609999992 12.6 154.98629449999984 4.38 82.42251179999998 11.11 77.55717290000007 9.452 79.97923519999941 8.831 86.77908650000018 3.49 105.49622750000113 11.17 81.87647180000079 10.503 87.63155050000002 12.157 129.81586289999981 3.546 113.07510480000205 10.566 90.12964839999988 3.519 82.65101699999933 10.804 123.29698739999807 9.066 112.65095590000023 3.501 140.78712980000086 9.793 75.64198220000029 9.53 78.01823819999939 10.781 76.31213659999929 8.004 88.15969469999996 3.647 117.66946950000145 9.895 107.43546469999855 11.276 77.87523580000067 9.98)
Error minima by case: (0.5679 8 59.0 2 0.6614 2 65.6899 2 0.0962 9 0.4091 2 0.01 2 8.0 2 0.8453 2 0.1095 9 3.3751 11 36.949 2 9.3289 2 7.0 1 1.3418 2 1.0453 2 35.0 2 10.1274 8 0.0388 7 0.2824 9 0.0623 6 11.0 2 2.4106 7 0.2033 9 0.3566 2)
Average genome size in population (length): 111.367
Average program size in population (points): 112.367
Average percent parens in population: 0.009
Minimum age in population: 237.6094477617049
Maximum age in population: 242.3907015483031
Average age in population: 240.1823671523358
Median age in population: 240.2132103127915
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.413
Error (vector) diversity:			 0.439
Behavioral diversity:				 0.44
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 334331611
--- Timings ---
Current time: 1529616507975 milliseconds
Total Time:         663.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       228.8 seconds, 34.5%
Fitness Testing:    341.8 seconds, 51.5%
Report:              93.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_cos} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_add} {:instruction float_yank} {:instruction float_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_cos} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction float_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_dec integer_add float_dec integer_shove float_dec integer_yank float_dup_times float_cos float_dup_times float_yank integer_add float_yank float_yank float_dec integer_yank float_dup_times float_yank integer_min float_dec float_dec float_yank float_cos integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_swap float_add float_dup_times integer_rot integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min integer_yank float_dup_times integer_sub float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2680.7774726999987
Median total errors in population: 981.5657000000001
Error averages by case: (76.46896369999948 10.12 133.4019670000001 3.463 157.97027159999968 12.704 150.72574059999988 4.302 82.5236006 11.085 75.19871100000013 9.446 77.56513249999963 8.874 81.92046060000001 3.466 103.226636900001 11.112 78.6327802000005 10.475 87.31483260000006 12.16 125.43138219999987 3.483 113.34671010000206 10.691 83.88500629999996 3.392 79.39786219999968 10.931 121.30263949999811 9.063 107.95396960000011 3.425 137.3074104000005 9.78 71.89549850000029 9.475 74.32692649999952 10.81 72.64056949999946 7.963 83.45263669999997 3.612 115.25574190000145 9.897 104.22246789999846 11.293 74.26755410000064 10.12)
Error minima by case: (0.2882 9 59.0 2 0.6614 2 65.6899 2 2.0962 9 0.4091 2 0.01 2 7.7618 2 0.8453 2 0.1095 9 3.3751 11 36.949 2 6.3289 2 7.0 1 1.3418 2 0.1372 2 35.0 2 10.1274 9 0.09 7 0.2824 8 0.0623 6 10.4317 2 3.2427 7 0.2033 9 0.3566 2)
Average genome size in population (length): 111.309
Average program size in population (points): 112.309
Average percent parens in population: 0.009
Minimum age in population: 238.9786333724784
Maximum age in population: 243.6144887652245
Average age in population: 241.5743554327522
Median age in population: 241.5891424496483
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.437
Error (vector) diversity:			 0.458
Behavioral diversity:				 0.458
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 337114487
--- Timings ---
Current time: 1529616512612 milliseconds
Total Time:         668.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.1 seconds, 34.4%
Fitness Testing:    344.4 seconds, 51.5%
Report:              93.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_tan} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_tan float_sub float_yank integer_stackdepth integer_min float_dup_times integer_yank integer_mult integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max integer_add float_dup_times integer_rot float_dup_times float_yank integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2558.926555999999
Median total errors in population: 987.5058999999999
Error averages by case: (68.10629090000033 10.109 129.4455949000002 3.441 152.26765320000038 12.582 146.76982169999988 4.285 78.17537689999997 11.082 67.61457450000013 9.47 69.78099320000042 8.904 77.98105070000007 3.416 95.91004020000088 11.17 71.7122142999997 10.445 82.03511470000004 12.143 121.33530929999979 3.484 108.76603800000214 10.575 80.74811579999998 3.404 79.8295260999997 10.861 113.79714429999822 9.105 104.01634430000021 3.424 130.71949520000118 9.74 65.46785910000024 9.49 73.92601509999957 10.803 66.0937331999996 7.979 79.65445809999996 3.582 107.53683170000117 9.865 101.51867439999864 11.254 75.05128620000059 10.054)
Error minima by case: (0.2882 8 40.0 1 1.6614 2 19.0 2 3.0962 9 0.2163 2 0.01 2 8.0 2 3.1547 2 0.1095 9 3.3751 10 13.949 2 0.3289 2 7.0 1 0.3418 2 10.0453 2 5.2909 2 5.1274 9 0.09 7 0.2824 8 0.1766 6 11.0 2 0.8267 7 0.7967 10 0.3566 2)
Average genome size in population (length): 112.364
Average program size in population (points): 113.364
Average percent parens in population: 0.009
Minimum age in population: 240.2371264740963
Maximum age in population: 244.965722724702
Average age in population: 242.9447917689069
Median age in population: 243.0068555417437
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.437
Error (vector) diversity:			 0.465
Behavioral diversity:				 0.465
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 339923779
--- Timings ---
Current time: 1529616517284 milliseconds
Total Time:         673.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       231.4 seconds, 34.4%
Fitness Testing:    347.0 seconds, 51.6%
Report:              94.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_cos} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_add} {:instruction float_yank} {:instruction float_yank} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction float_cos} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction float_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_dec integer_add float_dec integer_shove float_dec integer_yank float_dup_times float_cos float_dup_times float_yank integer_add float_yank float_yank float_dec integer_yank float_dup_times float_yank integer_min float_dec float_dec float_yank float_cos integer_min float_dec integer_yank float_dup_times float_yank float_yank integer_stackdepth integer_swap float_add float_dup_times integer_rot integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min integer_yank float_dup_times integer_sub float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2776.9569995999987
Median total errors in population: 986.0058999999999
Error averages by case: (79.92656149999964 10.154 137.18051390000016 3.514 157.79474779999958 12.544 153.93836559999988 4.364 85.85528989999997 11.01 77.60589150000007 9.433 80.62453739999978 8.855 86.13581130000006 3.523 106.01688730000085 11.132 82.4096905000007 10.513 88.67215330000015 12.159 129.25962029999982 3.534 116.40644450000245 10.695 87.35976669999997 3.478 88.09115009999924 10.97 124.02419699999804 9.078 112.21599290000019 3.504 141.57429730000027 9.8 76.6477222000002 9.525 80.47613739999957 10.845 77.36548449999925 7.992 87.32371809999997 3.678 117.71988840000158 9.92 108.71738739999806 11.269 81.97674280000061 10.149)
Error minima by case: (0.2882 8 59.0 2 0.6614 2 69.253 2 1.0962 9 0.272 2 0.01 2 8.0 2 0.1547 2 0.1095 9 3.3751 11 2.1102 2 6.3289 2 2.978 1 0.3418 2 10.0453 2 6.5479 2 16.2902 9 0.0388 7 0.2824 9 0.0568 6 11.0 2 12.7037 7 0.2033 9 0.3566 2)
Average genome size in population (length): 114.391
Average program size in population (points): 115.391
Average percent parens in population: 0.009
Minimum age in population: 242.0818882466455
Maximum age in population: 246.6143413123684
Average age in population: 244.2773654841661
Median age in population: 244.2890668786722
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.456
Error (vector) diversity:			 0.487
Behavioral diversity:				 0.487
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 342783705
--- Timings ---
Current time: 1529616522026 milliseconds
Total Time:         677.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       232.8 seconds, 34.3%
Fitness Testing:    349.6 seconds, 51.6%
Report:              95.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_tan} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_tan float_sub float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max integer_add float_dup_times integer_rot float_dup_times float_yank integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2892.766013700001
Median total errors in population: 981.5657000000001
Error averages by case: (78.04127989999999 10.079 141.51779700000017 3.574 170.03802519999917 12.541 157.67703229999987 4.395 95.72345279999998 10.969 79.48076389999999 9.439 81.49644149999968 8.964 90.75059090000008 3.564 106.99847390000092 11.187 82.99411450000062 10.48 98.26525720000014 12.17 133.64300519999986 3.557 126.7527196000021 10.828 93.02275099999996 3.502 96.46405009999924 10.949 124.23201479999832 9.182 116.28251760000013 3.492 143.07645470000057 9.741 78.11230960000027 9.49 89.86196119999977 10.892 78.58012689999933 7.939 92.16992619999995 3.722 118.09719290000115 9.92 118.04473599999878 11.298 89.42801880000057 10.141)
Error minima by case: (0.2882 8 31.1707 2 0.3386 2 60.4064 2 2.0962 9 0.3702 2 0.01 2 7.0 2 0.8453 2 0.1095 9 2.3751 11 36.949 2 0.6711 2 6.0487 1 0.3418 2 7.9547 2 20.8609 2 10.1274 8 0.09 7 0.2824 9 0.0154 6 1.5683 1 0.1213 7 0.2033 9 0.3566 2)
Average genome size in population (length): 115.385
Average program size in population (points): 116.385
Average percent parens in population: 0.009
Minimum age in population: 243.4279387411502
Maximum age in population: 247.3558165052027
Average age in population: 245.6386816405293
Median age in population: 245.6989999974017
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.479
Error (vector) diversity:			 0.509
Behavioral diversity:				 0.51
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 345668648
--- Timings ---
Current time: 1529616526707 milliseconds
Total Time:         682.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       234.1 seconds, 34.3%
Fitness Testing:    352.3 seconds, 51.6%
Report:              96.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_yank float_sub integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_sub float_dup_times float_yank float_dup_times float_dup in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2537.6385883000007
Median total errors in population: 976.6099
Error averages by case: (66.8071529000002 10.02 124.83986470000013 3.385 157.97444659999962 12.423 142.21471729999993 4.239 82.76190939999998 10.869 64.99273040000007 9.366 67.77715160000027 8.794 72.70314930000006 3.427 94.2488628000009 11.134 68.56007960000001 10.425 87.53276419999996 12.141 116.55251169999984 3.392 114.4041344000023 10.822 75.32162389999998 3.351 83.6820967999993 10.91 111.52164059999832 8.999 98.90313830000017 3.343 127.26849760000125 9.638 60.31162630000027 9.409 79.99627379999959 10.862 60.88145279999946 7.859 73.92953539999996 3.58 106.77183650000123 9.777 107.67780879999845 11.256 80.47158260000059 10.111)
Error minima by case: (0.1171 8 59.0 2 0.6614 2 74.6899 2 1.0962 9 0.0385 2 0.01 2 8.0 2 2.1547 2 0.1095 9 2.3751 10 20.949 2 4.6711 2 7.0 1 1.3418 2 11.0453 2 12.2909 2 1.8726 8 0.09 6 0.2824 9 0.1766 6 11.0 2 3.8787 7 0.2033 9 0.3566 2)
Average genome size in population (length): 117.172
Average program size in population (points): 118.172
Average percent parens in population: 0.009
Minimum age in population: 244.8038164935802
Maximum age in population: 249.1984194084102
Average age in population: 246.9555785664084
Median age in population: 246.9892255780487
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.436
Error (vector) diversity:			 0.474
Behavioral diversity:				 0.475
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 348598285
--- Timings ---
Current time: 1529616531584 milliseconds
Total Time:         687.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       235.5 seconds, 34.3%
Fitness Testing:    355.1 seconds, 51.7%
Report:              96.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times integer_stackdepth float_div integer_add float_dup_times float_shove float_yank float_sub integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min integer_min integer_sub float_dup_times float_yank float_dup_times float_dup in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2353.7950753999994
Median total errors in population: 999.415
Error averages by case: (58.46429550000057 10.042 117.36124350000016 3.312 152.4971135999998 12.451 134.79059159999986 4.155 75.00943029999999 10.811 57.746522300000024 9.412 60.406330900000654 8.929 65.57997779999997 3.346 86.78694570000093 11.136 61.351206599999465 10.412 79.9312773 12.135 109.38719819999986 3.326 106.97431870000243 10.936 68.53159670000005 3.315 76.94018639999973 10.96 104.66870469999809 9.093 91.7495829000001 3.308 120.99923570000128 9.68 54.96867650000022 9.417 70.24304789999961 10.873 55.61036509999936 7.852 66.96300809999997 3.485 98.06559380000124 9.875 98.18868839999853 11.263 70.90193720000066 10.154)
Error minima by case: (0.2812 8 40.0 1 0.6614 2 19.0 2 2.0962 9 0.3702 2 0.01 2 7.7618 2 0.1547 2 0.1095 9 2.3751 11 36.949 2 6.3289 2 7.0 1 1.3418 2 2.9547 2 35.0 2 10.1274 8 0.09 7 0.2824 8 0.0623 6 10.4317 2 2.7381 7 0.2033 9 0.3566 2)
Average genome size in population (length): 120.029
Average program size in population (points): 121.029
Average percent parens in population: 0.008
Minimum age in population: 246.1672107077958
Maximum age in population: 250.3597232370072
Average age in population: 248.2843248483938
Median age in population: 248.2999317979004
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.457
Error (vector) diversity:			 0.482
Behavioral diversity:				 0.483
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 351599202
--- Timings ---
Current time: 1529616536366 milliseconds
Total Time:         692.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       236.8 seconds, 34.2%
Fitness Testing:    357.8 seconds, 51.7%
Report:              97.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_tan} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times float_div integer_add float_dup_times float_div integer_add float_dup_times float_shove float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_tan float_sub float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times integer_sub float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 131
Size: 132
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2470.651877400001
Median total errors in population: 1000.0399
Error averages by case: (65.13985010000026 10.009 121.89539550000012 3.33 155.98347139999944 12.262 138.64949859999993 4.198 76.81431489999999 10.756 63.7112078000001 9.374 66.83087950000004 8.8 70.11640790000006 3.353 93.20363070000094 11.128 69.07188869999996 10.43 82.89034389999998 12.164 114.34120369999987 3.318 110.87454330000222 10.891 73.18067479999999 3.302 79.54554169999938 10.877 111.17548579999854 8.958 96.40386360000014 3.298 126.58545510000121 9.679 60.444231600000265 9.425 72.59573679999973 10.834 61.089035799999586 7.876 72.29589809999996 3.503 104.34855790000101 9.816 101.28589889999878 11.29 73.2718613000006 10.036)
Error minima by case: (0.2812 8 29.0397 2 0.3386 2 34.3101 3 2.0962 9 0.2286 2 0.01 2 8.0 2 0.1547 2 0.1095 9 1.3751 11 5.6002 2 3.6711 2 0.512 2 6.6582 2 12.0453 2 3.0578 2 10.1274 8 0.09 7 0.2824 9 0.153 6 11.0 2 9.2915 7 0.7967 10 0.3566 2)
Average genome size in population (length): 121.437
Average program size in population (points): 122.437
Average percent parens in population: 0.008
Minimum age in population: 247.2782887206521
Maximum age in population: 251.4583393357056
Average age in population: 249.581259267087
Median age in population: 249.6653394029415
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.423
Error (vector) diversity:			 0.441
Behavioral diversity:				 0.441
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 354635269
--- Timings ---
Current time: 1529616541219 milliseconds
Total Time:         696.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       238.2 seconds, 34.2%
Fitness Testing:    360.6 seconds, 51.7%
Report:              98.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_shove} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_shove})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_dup_times float_sub float_yank integer_stackdepth integer_min float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max integer_add float_dup_times integer_rot float_dup_times integer_min integer_rot float_dup_times float_yank integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_shove in1 float_max float_frominteger print_float float_shove)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2900.416110600001
Median total errors in population: 999.415
Error averages by case: (83.26158759999971 10.093 139.86232400000017 3.479 170.1002329999991 12.413 157.21458489999983 4.328 93.32731969999998 10.799 82.54925979999996 9.492 85.0418411999997 8.979 90.18452420000006 3.448 110.955164100001 11.2 86.83786440000081 10.499 99.60672620000025 12.188 132.27049789999984 3.474 125.17730810000278 10.996 92.42205929999993 3.415 92.14010729999956 11.038 128.71865579999795 9.117 114.54316700000017 3.405 143.6281369000003 9.789 78.31031180000029 9.504 87.63400089999946 10.867 78.91188299999924 8.039 91.6171726 3.601 122.25203220000141 9.952 116.35893659999817 11.326 85.82341210000064 10.226)
Error minima by case: (0.1966 6 59.0 2 1.6614 2 62.7339 2 2.0962 9 0.3604 2 0.01 2 7.7618 2 2.1547 2 0.1095 9 2.3751 11 8.9929 2 6.3289 2 3.9047 1 0.3418 2 11.0453 2 0.3349 2 10.0835 8 0.09 7 0.2824 9 0.1373 6 10.4317 2 16.886 7 0.7967 10 0.3566 2)
Average genome size in population (length): 122.27
Average program size in population (points): 123.27
Average percent parens in population: 0.008
Minimum age in population: 248.5838144184999
Maximum age in population: 252.8860723717186
Average age in population: 250.8861718744624
Median age in population: 250.9424439458668
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.422
Error (vector) diversity:			 0.443
Behavioral diversity:				 0.443
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 357692195
--- Timings ---
Current time: 1529616546127 milliseconds
Total Time:         701.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       239.5 seconds, 34.1%
Fitness Testing:    363.4 seconds, 51.8%
Report:              98.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_min} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_tan} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction tagged_860} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_shove} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_shove})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times float_yank integer_min float_yank float_yank integer_stackdepth integer_min float_dec float_tan float_sub float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max integer_add integer_add float_dup_times integer_rot float_dup_times float_max tagged_860 integer_mult integer_rot float_dup_times float_yank integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_shove in1 float_max float_frominteger print_float float_shove)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 130
Size: 131
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2518.816231500001
Median total errors in population: 986.8064999999999
Error averages by case: (68.41881240000001 10.1 126.87600970000014 3.291 151.72032270000008 12.324 144.45306179999994 4.151 74.05240489999998 10.713 68.17761120000017 9.389 70.39627600000007 8.832 75.65787180000005 3.358 96.46983600000097 11.136 70.804471 10.441 79.5195914000001 12.148 119.46861669999986 3.303 106.60730980000208 10.969 78.68146389999998 3.329 75.55418669999966 10.967 113.88141739999816 8.964 101.9229216000002 3.327 131.02166790000126 9.674 64.94389540000024 9.473 69.44837529999948 10.806 65.59094559999939 7.889 77.26622649999995 3.513 108.36807730000127 9.834 99.42266059999871 11.273 70.75019790000064 10.138)
Error minima by case: (0.4321 8 53.8486 2 0.3386 2 48.5782 3 2.0962 9 0.0385 2 0.01 2 8.0 2 0.1547 2 0.1095 8 1.3751 10 5.1628 2 6.3289 2 7.0 1 7.3418 2 5.0453 2 13.8208 2 10.7051 8 0.09 7 0.2824 9 0.0053 6 11.0 2 15.8806 7 0.7967 10 0.3079 2)
Average genome size in population (length): 122.696
Average program size in population (points): 123.696
Average percent parens in population: 0.008
Minimum age in population: 249.6941452736673
Maximum age in population: 254.2358383795783
Average age in population: 252.1595462250411
Median age in population: 252.1961887459244
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.412
Error (vector) diversity:			 0.426
Behavioral diversity:				 0.426
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 360759737
--- Timings ---
Current time: 1529616551039 milliseconds
Total Time:         706.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       240.9 seconds, 34.1%
Fitness Testing:    366.2 seconds, 51.8%
Report:              99.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_shove} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_flush})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times integer_yank float_dup_times float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max integer_add integer_mult integer_mult integer_rot float_dup_times float_yank integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_shove in1 float_max float_frominteger print_float float_flush)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2658.5994555
Median total errors in population: 989.7156
Error averages by case: (75.34856309999991 10.139 131.28986610000013 3.553 157.5797211000002 12.277 148.38168789999986 4.425 82.07369009999998 10.761 73.22877410000014 9.475 76.20662060000004 8.871 79.21465110000001 3.492 102.05213860000093 11.181 77.58339510000009 10.476 86.36598419999989 12.183 122.86073529999986 3.575 113.77755460000195 10.904 82.05426770000001 3.481 83.65510039999977 10.842 120.47400339999837 9.029 105.47990430000013 3.52 134.05072400000114 9.76 69.03192780000026 9.475 78.64298879999943 10.84 69.67127409999934 7.99 80.22131609999997 3.664 113.084461100001 9.913 107.70536309999882 11.303 77.40674280000066 10.029)
Error minima by case: (0.2812 8 58.6758 2 0.3386 2 58.5353 2 3.0962 9 0.0385 2 0.9413 2 8.0 2 0.8453 2 0.1095 9 1.3751 11 4.7943 2 6.6711 2 6.0487 1 0.3418 2 8.6655 2 3.8637 2 1.7325 8 0.09 7 0.2824 10 0.0053 6 11.0 2 2.9193 7 0.2033 9 0.3566 2)
Average genome size in population (length): 122.586
Average program size in population (points): 123.586
Average percent parens in population: 0.008
Minimum age in population: 250.6941452736673
Maximum age in population: 255.3974486040167
Average age in population: 253.4504603498099
Median age in population: 253.483410553887
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.936
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.936
Total error diversity:				 0.411
Error (vector) diversity:			 0.422
Behavioral diversity:				 0.422
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 363824629
--- Timings ---
Current time: 1529616555862 milliseconds
Total Time:         711.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       242.2 seconds, 34.0%
Fitness Testing:    368.9 seconds, 51.8%
Report:             100.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_tan} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction integer_shove} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_tan integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_yank float_sub integer_stackdepth float_div integer_add float_dup_times integer_rot integer_shove float_yank float_yank integer_stackdepth integer_min integer_min integer_sub float_dup_times float_yank float_dup_times float_dup in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2610.8261006000002
Median total errors in population: 1026.1256
Error averages by case: (73.75457319999997 10.051 128.26482830000015 3.422 159.18315419999956 12.375 145.67201069999987 4.277 80.56927219999997 10.786 71.55434180000002 9.467 74.57081440000006 8.966 77.51326810000009 3.462 100.18624600000093 11.161 74.63139370000006 10.436 87.02894629999999 12.17 120.48318109999985 3.432 113.053316700002 10.997 79.47690439999998 3.357 81.05403959999964 10.914 118.90479329999829 9.104 102.89781160000015 3.373 132.35979090000103 9.682 66.28215040000022 9.426 75.38299839999965 10.886 66.86073169999948 7.941 78.70058269999996 3.625 111.70969390000113 9.901 104.5772971999988 11.305 75.53495980000059 10.103)
Error minima by case: (0.2812 8 40.0 1 1.6614 2 19.0 2 2.0962 9 0.14 2 0.01 2 8.0 2 0.1547 2 0.1095 9 1.3751 11 15.7696 2 4.3289 2 8.0 2 0.3418 2 2.8749 2 7.1116 2 0.4264 8 0.09 7 0.2824 10 0.0623 6 2.2704 2 3.96 7 0.2033 9 0.3566 2)
Average genome size in population (length): 122.106
Average program size in population (points): 123.106
Average percent parens in population: 0.008
Minimum age in population: 251.6941452736673
Maximum age in population: 256.9391255316127
Average age in population: 254.7406313080524
Median age in population: 254.7824745763503
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.945
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.945
Total error diversity:				 0.433
Error (vector) diversity:			 0.447
Behavioral diversity:				 0.447
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 366877589
--- Timings ---
Current time: 1529616560609 milliseconds
Total Time:         716.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       243.6 seconds, 34.0%
Fitness Testing:    371.7 seconds, 51.9%
Report:             101.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 58570.06309999994
Test mean error for best: 29.28503
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup_times} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -60} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan float_dup_times -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -60 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_yank float_sub integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_sub float_dup_times float_yank float_dup_times float_dup in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 105
Size: 106
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2874.2312025000015
Median total errors in population: 1011.3223
Error averages by case: (80.89041030000003 10.123 139.1185020000002 3.616 168.8903388999995 12.32 156.1023291999999 4.447 94.16751559999999 10.829 80.09901550000004 9.537 82.5421640000001 8.953 88.31115620000004 3.597 108.36208190000099 11.184 83.93177370000025 10.525 98.39189470000017 12.212 131.03764229999982 3.619 125.90334370000262 10.948 91.41628079999997 3.597 93.47404959999892 10.983 126.00522519999802 9.1 113.85218550000019 3.597 142.70456950000062 9.811 77.87575320000018 9.49 86.91028059999945 10.892 78.54827959999933 8.076 89.60142599999996 3.791 119.8241789000014 9.923 115.98657419999807 11.332 87.60123140000064 10.181)
Error minima by case: (0.2812 8 58.4193 2 0.3386 2 79.4193 2 0.9038 9 0.196 2 0.01 2 7.7618 2 2.1547 2 0.1095 9 2.3751 11 28.0687 2 4.3289 2 6.4193 1 0.3418 2 6.0453 2 19.4107 2 0.9923 7 0.0388 7 0.2824 10 0.1612 6 10.4317 2 9.2915 7 0.2033 9 0.3566 2)
Average genome size in population (length): 121.723
Average program size in population (points): 122.723
Average percent parens in population: 0.008
Minimum age in population: 253.7008465329472
Maximum age in population: 258.2558546199125
Average age in population: 256.0134181970595
Median age in population: 256.043216956038
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.443
Error (vector) diversity:			 0.462
Behavioral diversity:				 0.463
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 369920864
--- Timings ---
Current time: 1529616565351 milliseconds
Total Time:         721.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       244.9 seconds, 34.0%
Fitness Testing:    374.5 seconds, 51.9%
Report:             101.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_div} {:instruction -81} {:instruction integer_add} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction integer_sub} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_tan} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_div -81 integer_add integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_pop integer_add float_dup_times float_shove integer_sub float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_tan float_sub float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max integer_add float_yank integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2995.5636151999997
Median total errors in population: 966.415
Error averages by case: (86.84678299999905 10.168 143.7973211000002 3.631 171.36417879999877 12.373 160.7033455999999 4.487 98.18863169999997 10.811 84.99181699999993 9.549 87.73590309999919 8.961 93.35113010000013 3.571 113.55399220000093 11.248 90.01568930000111 10.55 100.92393510000021 12.153 136.0688941999998 3.634 129.11395200000257 10.969 96.0157970999999 3.564 97.62863559999869 10.97 131.34906869999813 9.101 119.02894010000026 3.574 148.19616289999976 9.793 83.52079880000032 9.534 92.99734379999968 10.865 84.24591479999921 8.016 94.74175559999998 3.734 124.7979003000015 9.921 121.39456489999829 11.302 92.38915940000064 10.123)
Error minima by case: (0.2882 8 9.9603 1 0.3386 2 16.3101 2 0.0962 9 0.0102 2 0.99 2 8.0 2 0.1547 2 1.1095 9 1.0233 9 17.0709 2 4.6711 2 7.0 1 0.3418 2 3.5564 2 8.4129 2 11.1274 8 0.093 7 0.2824 8 0.1712 6 11.0 2 13.1263 7 0.7967 9 0.3566 2)
Average genome size in population (length): 121.613
Average program size in population (points): 122.613
Average percent parens in population: 0.008
Minimum age in population: 254.7008465329472
Maximum age in population: 259.3900482144886
Average age in population: 257.2975247957852
Median age in population: 257.3267413904351
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.419
Error (vector) diversity:			 0.432
Behavioral diversity:				 0.433
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 372961273
--- Timings ---
Current time: 1529616570157 milliseconds
Total Time:         725.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       246.2 seconds, 33.9%
Fitness Testing:    377.2 seconds, 52.0%
Report:             102.3 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 58546.59729999995
Test mean error for best: 29.27330
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_yank float_sub integer_stackdepth float_div integer_add float_dup_times integer_shove float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_sub float_dup_times float_yank float_dup_times float_dup in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2629.3401744999996
Median total errors in population: 983.1602
Error averages by case: (71.68325519999978 10.042 129.13433220000013 3.398 161.05057959999988 12.313 146.2520499999999 4.273 82.34952649999998 10.773 71.62518480000013 9.409 74.46136109999993 8.834 76.45666480000001 3.38 100.80142320000093 11.126 74.04981689999985 10.431 88.03065239999991 12.175 121.58395419999988 3.375 116.765000800002 10.959 79.95424679999998 3.357 82.99945199999955 10.978 117.51230589999858 8.983 104.04455220000007 3.335 133.30735100000103 9.681 67.77216840000028 9.419 76.10525109999968 10.833 68.45813779999972 7.877 78.86527459999998 3.54 111.917228100001 9.787 107.19975449999873 11.321 77.20465040000063 10.157)
Error minima by case: (0.3892 8 40.0 1 0.6614 2 19.0 2 3.0962 9 0.14 2 0.99 2 5.6024 2 0.1547 2 0.1095 9 2.3751 11 4.687 2 11.3289 2 8.0 1 8.3418 2 5.0453 2 5.3568 2 5.0615 8 0.0949 6 0.2824 8 0.0623 6 10.4317 2 12.7571 7 0.2033 9 0.3566 2)
Average genome size in population (length): 120.111
Average program size in population (points): 121.111
Average percent parens in population: 0.008
Minimum age in population: 256.2019841103949
Maximum age in population: 260.5468623662004
Average age in population: 258.5583097031075
Median age in population: 258.5957995354188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.41
Error (vector) diversity:			 0.422
Behavioral diversity:				 0.423
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 375964254
--- Timings ---
Current time: 1529616574937 milliseconds
Total Time:         730.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       247.6 seconds, 33.9%
Fitness Testing:    380.0 seconds, 52.0%
Report:             103.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 58584.06309999994
Test mean error for best: 29.29203
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup_times} {:instruction -81} {:instruction float_min} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_div} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_mult} {:instruction float_shove} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_shove})
Best program: (float_tan -81.37761634098129 float_tan float_dup_times -81 float_min -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_mult float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times float_yank float_dup_times float_yank integer_stackdepth integer_min float_dec float_dup_times float_sub float_yank integer_stackdepth float_mult float_dup_times integer_yank float_dup_times float_dup_times float_yankdup integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max integer_add integer_mult integer_rot float_dup_times float_yank integer_sub integer_stackdepth integer_min float_dec integer_div float_dup_times float_yank integer_mult float_shove in1 float_max float_frominteger print_float float_shove)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2471.4546773999996
Median total errors in population: 978.1833
Error averages by case: (66.00660490000026 10.024 121.84377350000014 3.294 155.19932549999982 12.302 140.38543249999987 4.183 78.20862769999998 10.754 65.75661790000018 9.388 67.80646180000024 8.776 70.80759399999998 3.241 94.30772610000102 11.12 66.56707109999961 10.415 83.99152730000021 12.169 114.37652889999987 3.321 110.09350270000206 10.919 73.21530080000001 3.24 76.05581109999956 10.902 112.14413069999819 8.937 97.33605470000012 3.278 124.97626280000131 9.66 58.99958570000027 9.403 72.45254789999947 10.836 59.6077169999994 7.844 72.77485249999995 3.387 105.66194600000131 9.776 102.95460919999852 11.294 71.37506510000061 10.087)
Error minima by case: (0.0105 8 40.0 1 0.3386 2 19.0 2 3.0962 9 0.14 2 0.01 2 7.0 2 0.0942 2 0.1095 9 1.3751 11 3.5616 2 6.3289 2 7.0 1 0.3418 2 11.0453 2 12.2196 2 3.5574 8 0.09 7 0.2824 10 0.0053 6 10.0 1 6.048 7 0.7967 10 0.3566 2)
Average genome size in population (length): 120.275
Average program size in population (points): 121.275
Average percent parens in population: 0.008
Minimum age in population: 257.2557686351583
Maximum age in population: 261.5791880895388
Average age in population: 259.861200457449
Median age in population: 259.9142551839883
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.924
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.924
Total error diversity:				 0.426
Error (vector) diversity:			 0.438
Behavioral diversity:				 0.439
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 378971255
--- Timings ---
Current time: 1529616579763 milliseconds
Total Time:         735.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       248.9 seconds, 33.8%
Fitness Testing:    382.7 seconds, 52.0%
Report:             103.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_dup_times} {:instruction -81} {:instruction float_min} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction tagged_477} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction tagged_397} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_stackdepth} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_tan} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_shove} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_shove})
Best program: (float_tan -81.37761634098129 float_tan float_dup_times -81 float_min -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec tagged_477 float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times tagged_397 float_dup_times float_yank float_stackdepth integer_stackdepth integer_min float_dec float_tan float_sub float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_shove in1 float_max float_frominteger print_float float_shove)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 119
Size: 120
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2755.6798161000006
Median total errors in population: 1003.415
Error averages by case: (76.01094689999941 10.034 133.52082780000018 3.544 167.03494759999907 12.326 150.55024359999987 4.375 89.94399039999998 10.783 74.57131200000005 9.436 77.17704489999956 8.892 82.14650960000003 3.453 103.00205220000097 11.119 77.68731040000056 10.427 95.44868350000021 12.156 125.30840669999986 3.529 123.28300830000248 10.965 85.48275509999996 3.46 90.75800449999907 10.933 121.22720579999815 9.069 108.15083020000013 3.473 136.7237443000008 9.701 71.57099740000028 9.451 86.04367579999948 10.883 72.1847879999994 7.952 83.54224489999996 3.631 114.40071630000129 9.887 113.96259599999819 11.331 84.96697390000062 10.17)
Error minima by case: (0.2155 8 59.0 2 0.3386 2 65.6899 2 3.0962 7 0.0385 2 0.01 2 8.0 2 0.1896 2 0.1095 9 1.3751 10 32.5008 2 6.3289 2 7.0 1 0.3418 2 10.0453 2 23.8428 2 5.4244 8 0.09 7 0.2824 9 0.1766 5 11.0 2 15.5694 7 0.2033 9 0.3566 2)
Average genome size in population (length): 120.788
Average program size in population (points): 121.788
Average percent parens in population: 0.008
Minimum age in population: 258.9118958935821
Maximum age in population: 263.0890798248376
Average age in population: 261.1856823392187
Median age in population: 261.2125250187134
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.947
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.947
Total error diversity:				 0.435
Error (vector) diversity:			 0.448
Behavioral diversity:				 0.449
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 381991180
--- Timings ---
Current time: 1529616584601 milliseconds
Total Time:         740.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       250.2 seconds, 33.8%
Fitness Testing:    385.5 seconds, 52.1%
Report:             104.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_add} {:instruction float_yank} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_rot} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction -58} {:instruction float_tan} {:instruction float_sub} {:instruction float_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times integer_add float_yank float_shove float_dup_times float_yank integer_rot float_yank float_yank integer_stackdepth integer_min -58 float_tan float_sub float_yank integer_yank integer_min float_dup_times integer_min float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_dec integer_add float_dup_times integer_rot float_dup_times float_yank integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2759.3331827999996
Median total errors in population: 993.0162
Error averages by case: (75.69683050000019 10.083 135.1701865000002 3.55 164.65209479999922 12.387 151.97821319999989 4.393 88.81973009999997 10.806 74.7583719000002 9.502 77.49699960000005 8.987 82.15765720000005 3.434 102.70373130000101 11.216 77.86012570000024 10.454 94.2177959 12.172 126.82125929999982 3.557 119.43419320000257 10.976 86.59605409999998 3.481 90.72276309999941 10.949 122.30536129999781 9.18 109.6720532000002 3.503 137.86962290000073 9.744 72.28373940000019 9.461 84.91667329999957 10.876 72.93973319999915 7.946 83.58326659999996 3.595 114.5059604000017 9.917 114.44840489999795 11.325 86.04636120000063 10.182)
Error minima by case: (0.2812 9 47.9603 2 0.3386 2 21.6899 2 0.0962 9 0.4089 2 0.01 2 8.0 2 2.1547 2 0.1095 8 2.3751 9 0.4007 2 3.3289 2 5.4888 1 0.3418 2 11.0453 2 4.2909 2 10.1274 8 0.09 6 0.2824 8 0.0591 6 4.4541 2 4.9642 7 0.2033 9 0.3566 2)
Average genome size in population (length): 120.903
Average program size in population (points): 121.903
Average percent parens in population: 0.008
Minimum age in population: 259.9118958935821
Maximum age in population: 264.4428989347669
Average age in population: 262.5148695553647
Median age in population: 262.5568488427687
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.452
Error (vector) diversity:			 0.479
Behavioral diversity:				 0.479
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 385013998
--- Timings ---
Current time: 1529616589452 milliseconds
Total Time:         745.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       251.6 seconds, 33.8%
Fitness Testing:    388.2 seconds, 52.1%
Report:             105.2 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_tan} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction float_sub} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_dec integer_add float_dec integer_shove float_dec float_dup_times float_shove float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_tan float_sub float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth float_dup float_dup_times integer_rot float_dup_times float_max integer_add float_sub integer_sub integer_stackdepth integer_min float_dec integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2607.2052143
Median total errors in population: 999.415
Error averages by case: (68.52932510000029 10.043 126.62079950000012 3.458 163.17065129999955 12.332 144.03106229999986 4.307 87.34965929999998 10.815 66.62785330000008 9.493 69.33635990000045 8.935 74.8641417 3.392 95.52096420000098 11.151 72.21344299999986 10.463 91.77447000000019 12.175 118.55981619999984 3.435 119.76405010000278 10.938 77.79907100000003 3.408 87.2940692999992 10.856 114.6089722999981 9.136 100.65421220000015 3.368 130.0223346000012 9.727 63.763011400000224 9.44 82.66182009999952 10.907 64.33259839999943 8.011 76.12712429999998 3.555 106.98134070000144 9.881 112.40771199999796 11.325 81.59035210000062 10.049)
Error minima by case: (0.0877 8 58.0487 2 1.3386 2 64.6899 3 3.0962 9 0.14 2 0.01 2 7.7618 2 0.8453 2 0.1095 9 2.3751 11 35.949 2 2.3289 2 6.0487 1 0.3418 2 12.0453 2 34.0487 2 11.1274 8 0.09 7 0.2824 10 0.0053 6 10.4317 2 11.8062 7 0.7967 10 0.3566 2)
Average genome size in population (length): 121.464
Average program size in population (points): 122.464
Average percent parens in population: 0.008
Minimum age in population: 261.6917168388675
Maximum age in population: 265.7037483603481
Average age in population: 263.9400779245771
Median age in population: 263.9888159686538
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.934
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.934
Total error diversity:				 0.463
Error (vector) diversity:			 0.488
Behavioral diversity:				 0.489
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 388051033
--- Timings ---
Current time: 1529616594219 milliseconds
Total Time:         750.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       252.9 seconds, 33.7%
Fitness Testing:    390.9 seconds, 52.1%
Report:             106.0 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 58587.413499999944
Test mean error for best: 29.29371
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction float_yank} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_rot} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -58} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_sub} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_tan} {:instruction float_sub} {:instruction float_yank} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_shove} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_shove})
Best program: (print_float -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth float_yank in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_rot integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -58 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_sub float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times float_yank float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec float_tan float_sub float_yank integer_yank integer_min float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max float_dup_times float_yank float_dup_times float_dec integer_add float_dup_times integer_rot float_yank integer_sub integer_stackdepth float_dec integer_yank integer_stackdepth integer_rot integer_dup_times float_yank integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_shove in1 float_max float_frominteger print_float float_shove)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 133
Size: 134
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 2917.3403542000005
Median total errors in population: 1001.0399
Error averages by case: (84.9679850999996 10.112 140.19528800000023 3.631 170.781820499999 12.238 157.24475089999987 4.473 93.18743239999999 10.799 83.67413599999995 9.471 86.21127019999975 8.915 90.63259460000015 3.646 111.87840190000101 11.137 85.90158900000064 10.507 98.6663770000001 12.185 131.8542728999998 3.642 127.5692591000026 10.861 92.9217525999999 3.62 91.99134569999924 10.862 129.5843378999979 9.06 114.76214980000024 3.61 144.0443664000003 9.78 79.63618210000021 9.479 88.82685589999953 10.864 80.23650669999913 8.057 91.86618119999994 3.829 122.94111320000154 9.883 116.81303749999832 11.339 88.92034760000064 10.031)
Error minima by case: (0.2812 8 27.4783 1 0.3386 2 18.5117 2 1.0962 9 0.3604 2 0.01 2 7.7618 2 1.8453 2 0.1095 9 1.3751 11 1.243 2 8.3289 2 3.8452 1 1.3418 2 2.9547 2 0.3009 2 10.1175 8 0.09 7 0.2824 9 0.0485 5 10.4317 2 11.3953 7 1.7967 10 0.3566 2)
Average genome size in population (length): 120.614
Average program size in population (points): 121.614
Average percent parens in population: 0.008
Minimum age in population: 263.1268027600281
Maximum age in population: 267.2694275771009
Average age in population: 265.2921925447541
Median age in population: 265.3137148411336
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.455
Error (vector) diversity:			 0.466
Behavioral diversity:				 0.466
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 391066559
--- Timings ---
Current time: 1529616599161 milliseconds
Total Time:         754.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       254.3 seconds, 33.7%
Fitness Testing:    393.7 seconds, 52.2%
Report:             106.7 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_yank} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec float_swap integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_yank float_sub integer_add float_dup_times float_shove float_yank float_sub integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min integer_min integer_sub float_dup_times float_yank float_dup_times float_dup in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2714.5113259999994
Median total errors in population: 987.915
Error averages by case: (79.57782909999982 10.104 133.18798240000012 3.476 158.90036130000001 12.389 150.84635039999995 4.318 83.12040819999997 10.781 76.7976434 9.403 79.15573659999983 8.826 81.70345950000002 3.468 104.60392480000087 11.142 79.63068020000037 10.464 88.54589200000012 12.161 125.44390119999986 3.466 115.04121480000218 10.956 86.78723629999999 3.428 82.73883119999952 11.046 123.14789159999802 9.037 108.82047110000009 3.446 137.9692138000006 9.715 72.41251300000023 9.477 77.48085229999961 10.856 74.13477739999941 7.999 83.05049789999998 3.625 116.88281620000143 9.834 106.92946809999856 11.29 76.73237320000058 10.162)
Error minima by case: (0.4533 6 16.6732 2 0.3386 2 29.3168 2 2.0962 9 0.14 2 0.01 2 3.7618 2 1.1547 2 0.1095 9 1.3751 11 6.0268 2 7.3289 2 6.0487 1 1.3418 2 2.0453 2 0.8678 2 10.1274 8 0.09 7 0.2824 9 0.0623 6 11.0 2 9.1213 7 0.7967 10 0.3566 2)
Average genome size in population (length): 120.79
Average program size in population (points): 121.79
Average percent parens in population: 0.008
Minimum age in population: 264.5704699538243
Maximum age in population: 268.4232682141643
Average age in population: 266.5780610146408
Median age in population: 266.6171994023367
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.443
Error (vector) diversity:			 0.462
Behavioral diversity:				 0.462
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 394086553
--- Timings ---
Current time: 1529616603935 milliseconds
Total Time:         759.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       255.6 seconds, 33.6%
Fitness Testing:    396.5 seconds, 52.2%
Report:             107.5 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction float_tan} {:instruction float_sub} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dup} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction integer_add} {:instruction float_sub} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_dec integer_add float_dec integer_shove float_dec float_dup_times float_shove float_dup_times float_yank float_dup_times float_yank integer_fromfloat integer_stackdepth integer_min float_dec float_tan float_sub float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth float_dup float_dup_times integer_rot float_dup_times float_max integer_add float_sub integer_sub integer_stackdepth integer_min float_dec integer_yank float_dup_times float_yank float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 124
Size: 125
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2515.253128
Median total errors in population: 971.6293
Error averages by case: (68.60396150000022 10.051 126.8421391000002 3.33 153.44601949999966 12.364 143.28347189999988 4.212 76.66218089999998 10.754 67.30521660000002 9.455 69.83864740000007 8.818 73.54847220000003 3.376 96.4126679000009 11.098 69.15585630000002 10.429 82.58181180000005 12.155 118.83761659999983 3.354 109.14992530000212 10.949 77.93519929999997 3.318 75.95830919999946 11.023 114.79966099999831 8.999 101.18764170000016 3.282 129.9372143000013 9.705 63.68799590000027 9.422 69.97657759999971 10.832 64.4748270999994 7.946 75.07368129999995 3.534 107.34826520000134 9.787 99.88121649999863 11.288 69.68855190000063 10.155)
Error minima by case: (0.4242 8 60.0 2 0.3386 2 64.6899 2 1.0962 9 0.14 2 0.01 2 6.0 1 0.1547 2 0.1095 9 2.3751 11 25.9753 2 6.3289 2 8.0 1 1.3418 2 4.0453 1 17.3173 2 10.1274 8 0.0388 7 0.2824 8 0.0506 6 7.5683 1 0.1012 7 0.7967 10 0.3566 1)
Average genome size in population (length): 120.69
Average program size in population (points): 121.69
Average percent parens in population: 0.008
Minimum age in population: 265.6298520391251
Maximum age in population: 269.6903416699307
Average age in population: 267.8476438380555
Median age in population: 267.9125025442882
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.429
Error (vector) diversity:			 0.445
Behavioral diversity:				 0.446
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 397104170
--- Timings ---
Current time: 1529616608763 milliseconds
Total Time:         764.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       256.9 seconds, 33.6%
Fitness Testing:    399.3 seconds, 52.2%
Report:             108.2 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_swap} {:instruction -82} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_max} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_max} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_min} {:instruction integer_yank} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction float_shove} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction float_shove})
Best program: (float_tan -81.37761634098129 float_tan integer_swap integer_swap -82 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_max float_dec integer_mod integer_stackdepth float_dec float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times float_yank float_dup_times integer_min integer_mod integer_yank float_dup_times integer_mult integer_stackdepth integer_add float_dup_times integer_rot float_dup_times float_max float_dup_times integer_rot float_dup_times float_dup_times float_yank integer_stackdepth integer_min float_max integer_add integer_mult integer_rot float_dup_times float_yank integer_sub integer_stackdepth integer_min float_min integer_yank float_dup_times float_yank float_yank float_shove in1 float_max float_frominteger print_float float_shove)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2585.4939929999996
Median total errors in population: 976.1569000000001
Error averages by case: (71.69507019999996 10.065 126.71188360000012 3.452 156.17862429999965 12.266 143.05703319999986 4.274 81.27354479999997 10.768 67.7980249000001 9.39 71.30452880000009 8.816 77.01031470000007 3.469 96.89849620000098 11.1 73.92780500000003 10.479 85.34189440000007 12.144 118.8173175999999 3.425 112.65614560000208 10.875 79.70385649999993 3.406 82.04446399999951 10.903 115.87976929999823 9.023 101.32532990000011 3.382 131.73826280000117 9.698 66.17092520000031 9.466 79.13382909999952 10.845 66.76377449999944 7.95 77.14953679999999 3.606 107.96594090000121 9.833 107.46058889999856 11.287 77.48303180000065 10.082)
Error minima by case: (0.2812 8 40.0 1 0.3386 2 19.0 2 1.0962 9 0.14 2 0.3722 2 8.0 2 0.1547 2 0.1095 9 2.3751 10 26.263 2 7.3289 2 7.0 1 0.3418 2 11.0453 2 17.605 2 0.8133 8 0.0388 7 0.2824 10 0.0053 6 11.0 2 8.2915 7 2.2033 10 0.3566 2)
Average genome size in population (length): 120.695
Average program size in population (points): 121.695
Average percent parens in population: 0.008
Minimum age in population: 266.9025239134664
Maximum age in population: 271.1097930895531
Average age in population: 269.146693378465
Median age in population: 269.1787043456041
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.419
Error (vector) diversity:			 0.438
Behavioral diversity:				 0.438
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 400121923
--- Timings ---
Current time: 1529616613596 milliseconds
Total Time:         769.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       258.3 seconds, 33.6%
Fitness Testing:    402.1 seconds, 52.3%
Report:             108.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_mod} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction float_swap} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dup_times} {:instruction integer_sub} {:instruction float_yank} {:instruction float_yank} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_mod float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_dup_times float_shove float_dup_times float_yank integer_stackdepth integer_min float_dup_times integer_yank float_dup_times integer_mult integer_stackdepth integer_add float_swap integer_rot float_dup_times float_max float_dup_times integer_rot float_dup_times float_yank float_yank integer_stackdepth integer_min float_dec integer_yank float_dup_times integer_sub float_yank float_yank in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 115
Size: 116
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2643.6207477000003
Median total errors in population: 966.415
Error averages by case: (71.3579656000003 10.05 129.9473985000002 3.47 158.2545037999999 12.404 147.31635829999988 4.319 83.00733469999997 10.817 70.12632010000013 9.481 72.57077610000046 8.897 79.00616070000004 3.389 98.91790770000094 11.146 76.00739430000007 10.455 87.56585560000009 12.179 121.94947689999982 3.462 114.93181020000253 10.977 81.08888870000001 3.401 86.35886549999928 10.974 117.34184509999807 9.077 104.6259770000002 3.423 134.11433760000097 9.694 68.32849700000028 9.428 79.79098369999937 10.884 68.95176799999918 7.906 80.22031599999998 3.547 110.44821090000163 9.852 109.72516259999809 11.311 80.98963310000062 10.134)
Error minima by case: (0.2812 6 40.0 1 0.3386 2 19.0 2 3.0962 9 0.14 2 0.01 2 8.0 2 1.1547 2 0.1095 9 1.3751 9 11.0427 2 0.3289 2 8.0 1 1.3418 2 11.0453 2 5.0058 2 10.1274 8 0.1358 7 0.2824 9 0.0053 6 11.0 2 31.1213 7 0.7967 10 0.3566 2)
Average genome size in population (length): 119.859
Average program size in population (points): 120.859
Average percent parens in population: 0.008
Minimum age in population: 268.3801401425226
Maximum age in population: 272.4387639693844
Average age in population: 270.4464992379839
Median age in population: 270.4466737726669
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.929
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.929
Total error diversity:				 0.404
Error (vector) diversity:			 0.422
Behavioral diversity:				 0.422
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 403118591
--- Timings ---
Current time: 1529616618386 milliseconds
Total Time:         774.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       259.6 seconds, 33.5%
Fitness Testing:    404.8 seconds, 52.3%
Report:             109.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_add} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction float_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_sin} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan float_add -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min float_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_sub integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_sin float_yank integer_stackdepth integer_min integer_min integer_sub float_dup_times float_yank float_dup_times float_dup in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2789.932550400001
Median total errors in population: 1010.8223
Error averages by case: (78.2240845999996 10.048 134.70543380000018 3.549 166.59295129999904 12.366 151.57526099999987 4.385 90.39551559999998 10.829 77.70107549999996 9.519 80.51621059999958 8.988 83.98764130000008 3.487 106.77196080000088 11.149 80.44058760000061 10.46 95.47439430000027 12.195 126.68450589999982 3.542 122.80379490000253 10.946 86.17249659999995 3.505 89.89275859999907 10.946 123.98001659999817 9.17 108.49541570000018 3.497 138.58634160000082 9.734 73.30011800000027 9.463 86.0569846999996 10.87 73.96571629999934 7.971 85.28562579999996 3.673 117.12921900000153 9.972 114.11928829999817 11.319 85.37615200000064 10.116)
Error minima by case: (0.2812 8 40.0 1 0.3386 2 19.0 2 1.0962 9 0.2582 2 0.01 2 7.0 2 2.1547 2 0.1095 9 2.3751 11 36.949 2 10.3289 2 6.0487 2 0.3418 2 2.0453 1 34.0487 2 10.1274 8 0.09 7 0.2824 9 0.1063 6 10.0 1 19.8062 7 1.7967 10 0.3566 2)
Average genome size in population (length): 119.489
Average program size in population (points): 120.489
Average percent parens in population: 0.008
Minimum age in population: 269.4041592629495
Maximum age in population: 273.6978482689075
Average age in population: 271.8034880241701
Median age in population: 271.8308733801156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.431
Error (vector) diversity:			 0.45
Behavioral diversity:				 0.45
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 406105941
--- Timings ---
Current time: 1529616623062 milliseconds
Total Time:         778.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       261.0 seconds, 33.5%
Fitness Testing:    407.5 seconds, 52.3%
Report:             110.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 58581.06309999994
Test mean error for best: 29.29053
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction float_add} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_sin} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan float_add -81 integer_add -49 in2 float_cos float_yankdup integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod float_dec integer_mod integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_sub integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_sin float_yank integer_stackdepth integer_min integer_min integer_sub float_dup_times float_yank float_dup_times float_dup in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2753.3428007000007
Median total errors in population: 986.5058999999999
Error averages by case: (76.28203219999968 10.061 134.1571092000001 3.377 165.30463359999976 12.38 151.7273855999999 4.259 90.0391416 10.817 73.94584829999995 9.509 76.2963927999998 8.971 84.30779249999999 3.373 102.77691970000097 11.173 80.13170870000039 10.472 94.27457600000002 12.166 126.49430249999992 3.387 121.74481790000225 10.981 86.99788979999997 3.368 87.46639559999966 10.848 121.89790179999821 9.179 110.51331750000013 3.373 136.62574710000075 9.707 70.49966690000038 9.471 83.14044189999952 10.884 71.17606139999934 7.923 85.5660722 3.529 113.86445960000123 9.927 114.23462299999841 11.325 83.35856330000065 10.059)
Error minima by case: (0.2812 8 39.6452 2 0.6614 2 34.3748 3 2.0962 9 0.1592 2 0.01 2 7.7618 2 1.36 2 0.8905 9 2.3751 9 3.6591 2 4.6711 2 1.4291 2 8.3905 2 3.0453 2 4.9989 2 3.1274 8 0.09 7 0.2824 9 0.0053 6 10.4317 2 24.8201 7 0.7967 10 0.3566 2)
Average genome size in population (length): 119.513
Average program size in population (points): 120.513
Average percent parens in population: 0.008
Minimum age in population: 270.5885143973723
Maximum age in population: 274.945485336672
Average age in population: 273.0760933048677
Median age in population: 273.1264546829833
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.921
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.921
Total error diversity:				 0.429
Error (vector) diversity:			 0.453
Behavioral diversity:				 0.453
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 409093849
--- Timings ---
Current time: 1529616627764 milliseconds
Total Time:         783.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       262.3 seconds, 33.5%
Fitness Testing:    410.2 seconds, 52.3%
Report:             111.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 58561.45839999994
Test mean error for best: 29.28073
;;------------------------------
Outputs of best individual on training cases:
Correct output: 3.5191859256   | Program output: -6.048738954  
Correct output: 151.9603289886 | Program output: 91.9603289886 
Correct output: -154.3386139493 | Program output: -75.0         
Correct output: 146.6899406572 | Program output: 65.6899406572 
Correct output: -41.9038407726 | Program output: -51.0         
Correct output: -5.4578605766  | Program output: -6.048738954  
Correct output: -10.0587306507 | Program output: -6.048738954  
Correct output: 63.238225746   | Program output: 71.238225746  
Correct output: -39.8453270272 | Program output: -6.048738954  
Correct output: -11.1095283178 | Program output: 1.951261046   
Correct output: -65.6248753443 | Program output: -70.0         
Correct output: 92.9489754291  | Program output: 36.9489754291 
Correct output: -89.6711126902 | Program output: -48.0         
Correct output: 87.8607804274  | Program output: 79.8607804274 
Correct output: 11.3417885788  | Program output: 1.0           
Correct output: -61.0452729724 | Program output: -6.048738954  
Correct output: 84.2909392123  | Program output: 48.2909392123 
Correct output: 73.8725844146  | Program output: 1.951261046   
Correct output: 2.0900277855   | Program output: 1.951261046   
Correct output: -1.2824481557  | Program output: -1.0          
Correct output: 0.7518561607   | Program output: 1.951261046   
Correct output: 46.5683272221  | Program output: 57.5683272221 
Correct output: 44.8787195349  | Program output: -6.048738954  
Correct output: -55.2032724973 | Program output: -6.0          
Correct output: 1.6433897119   | Program output: 1.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_tan} {:instruction -81.37761634098129} {:instruction float_tan} {:instruction integer_swap} {:instruction -81} {:instruction integer_add} {:instruction -49} {:instruction in2} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_swap} {:instruction -81} {:instruction in2} {:instruction integer_swap} {:instruction -50} {:instruction in2} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction integer_min} {:instruction float_stackdepth} {:instruction integer_min} {:instruction in2} {:instruction in2} {:instruction -90} {:instruction float_inc} {:instruction integer_sub} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_mod} {:instruction integer_mod} {:instruction -58} {:instruction float_rot} {:instruction -76} {:instruction float_pop} {:instruction integer_sub} {:instruction float_rot} {:instruction float_dup_times} {:instruction -59} {:instruction float_tan} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_shove} {:instruction integer_swap} {:instruction float_max} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_swap} {:instruction float_max} {:instruction integer_dec} {:instruction tagged_44} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_add} {:instruction float_dec} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_rot} {:instruction float_dup_times} {:instruction float_sin} {:instruction float_yank} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction integer_min} {:instruction integer_sub} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup} {:instruction in1} {:instruction float_max} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup})
Best program: (float_tan -81.37761634098129 float_tan integer_swap -81 integer_add -49 in2 float_cos float_dup_items integer_swap -81 in2 integer_swap -50 in2 integer_swap float_stackdepth integer_min in2 integer_min float_stackdepth integer_min in2 in2 -90 float_inc integer_sub integer_add float_dup_times integer_shove integer_swap float_mod integer_mod -58 float_rot -76 float_pop integer_sub float_rot float_dup_times -59 float_tan float_rot integer_sub integer_shove integer_swap float_max float_yankdup float_dup_times integer_mod integer_min integer_swap float_max integer_dec tagged_44 integer_mod integer_stackdepth float_dec integer_add integer_mod float_dec integer_max integer_stackdepth float_dec integer_add integer_mod integer_min integer_min float_dec float_dec float_dec integer_add float_dec float_dec integer_shove float_dup_times float_yank integer_stackdepth float_div integer_add float_sub integer_stackdepth float_div integer_add float_dup_times integer_rot float_dup_times float_sin float_yank integer_stackdepth integer_min integer_min integer_sub float_dup_times float_yank float_dup_times float_dup in1 float_max float_frominteger print_float integer_dup)
Errors: [9.5679 10 60.0 2 79.3386 12 81.0 3 9.0962 10 0.5909 9 4.01 7 8.0 2 33.7966 11 13.0608 10 4.3751 12 56.0 2 41.6711 11 8.0 2 10.3418 11 54.9965 7 36.0 2 71.9213 9 0.1388 9 0.2824 10 1.1994 7 11.0 2 50.9275 8 49.2033 11 0.6434 10]
Total: 884.1616
Mean: 17.683231
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2545.4062853
Median total errors in population: 987.0058999999999
Error averages by case: (68.34570310000005 10.043 128.3524083000002 3.483 155.87699509999982 12.393 144.28345779999984 4.322 78.59000849999998 10.763 66.17034970000007 9.456 68.86649850000019 8.839 76.26819070000008 3.434 94.83096340000098 11.135 71.81703100000017 10.431 83.89372460000027 12.157 120.04582409999979 3.477 111.35590750000237 10.991 78.46380499999995 3.404 78.92641069999956 11.0 113.19637269999834 9.033 101.37450620000016 3.406 131.34682920000128 9.667 64.04235640000024 9.421 73.7804080999996 10.852 65.67911359999952 7.91 77.64777109999994 3.593 105.91171250000109 9.791 102.67171199999868 11.282 73.27122550000065 10.114)
Error minima by case: (0.3833 7 58.0487 2 0.3386 2 64.6899 2 0.0962 10 0.4091 2 0.01 2 6.7618 2 1.1547 2 0.8905 9 0.3751 11 22.949 2 1.6711 2 6.0487 1 0.3418 2 12.0453 1 14.2909 2 3.8726 8 0.0673 7 0.2824 10 0.0053 6 10.0 1 3.806 7 2.7967 10 0.3566 2)
Average genome size in population (length): 118.337
Average program size in population (points): 119.337
Average percent parens in population: 0.008
Minimum age in population: 271.5885143973723
Maximum age in population: 276.6068685567138
Average age in population: 274.4007112834108
Median age in population: 274.4620737106791
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.431
Error (vector) diversity:			 0.452
Behavioral diversity:				 0.453
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 412052640
--- Timings ---
Current time: 1529616632578 milliseconds
Total Time:         788.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       263.7 seconds, 33.4%
Fitness Testing:    413.0 seconds, 52.4%
Report:             111.6 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
