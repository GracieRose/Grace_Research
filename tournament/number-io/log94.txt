Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[25.298473664590773 92] 117.29847366459077]
Train Case:   1 | Input/Output: [[-35.88249365908176 -93] -128.88249365908177]
Train Case:   2 | Input/Output: [[-31.57731425869983 70] 38.42268574130017]
Train Case:   3 | Input/Output: [[63.215679882256836 -32] 31.215679882256836]
Train Case:   4 | Input/Output: [[-34.695560354205114 39] 4.304439645794886]
Train Case:   5 | Input/Output: [[-81.05250368934284 -30] -111.05250368934284]
Train Case:   6 | Input/Output: [[-55.86295529606109 -32] -87.86295529606109]
Train Case:   7 | Input/Output: [[38.98723075449425 -68] -29.01276924550575]
Train Case:   8 | Input/Output: [[83.79276233552972 -95] -11.207237664470284]
Train Case:   9 | Input/Output: [[-11.41763420206044 -10] -21.41763420206044]
Train Case:  10 | Input/Output: [[19.73349404004449 8] 27.73349404004449]
Train Case:  11 | Input/Output: [[-96.77243798145636 70] -26.772437981456363]
Train Case:  12 | Input/Output: [[18.367668835416495 -24] -5.632331164583505]
Train Case:  13 | Input/Output: [[-33.2141334467392 -79] -112.2141334467392]
Train Case:  14 | Input/Output: [[-55.700023775159636 81] 25.299976224840364]
Train Case:  15 | Input/Output: [[-88.16138499275065 27] -61.161384992750655]
Train Case:  16 | Input/Output: [[40.14258867481996 62] 102.14258867481996]
Train Case:  17 | Input/Output: [[-61.74351682248691 73] 11.25648317751309]
Train Case:  18 | Input/Output: [[54.473458411934445 -36] 18.473458411934445]
Train Case:  19 | Input/Output: [[-32.5397406729476 -37] -69.5397406729476]
Train Case:  20 | Input/Output: [[-31.280281275957236 62] 30.719718724042764]
Train Case:  21 | Input/Output: [[52.19515902653865 -16] 36.19515902653865]
Train Case:  22 | Input/Output: [[21.783748902901294 100] 121.7837489029013]
Train Case:  23 | Input/Output: [[-75.24019640861948 44] -31.240196408619482]
Train Case:  24 | Input/Output: [[-85.06544283546648 28] -57.065442835466484]
Test Case:   0 | Input/Output: [[2.232165071368385 -68] -65.76783492863161]
Test Case:   1 | Input/Output: [[-94.25086899013593 -83] -177.25086899013593]
Test Case:   2 | Input/Output: [[-83.95337483949514 7] -76.95337483949514]
Test Case:   3 | Input/Output: [[50.95156686716868 67] 117.95156686716868]
Test Case:   4 | Input/Output: [[-31.59908270166258 75] 43.40091729833742]
Test Case:   5 | Input/Output: [[-3.0630259417179246 -86] -89.06302594171792]
Test Case:   6 | Input/Output: [[17.23009993061136 -64] -46.76990006938864]
Test Case:   7 | Input/Output: [[32.163707236819874 42] 74.16370723681987]
Test Case:   8 | Input/Output: [[52.925527155984895 -12] 40.925527155984895]
Test Case:   9 | Input/Output: [[64.79655518328332 88] 152.79655518328332]
Test Case:  10 | Input/Output: [[50.38009956755192 94] 144.38009956755192]
Test Case:  11 | Input/Output: [[91.39902861365553 -60] 31.39902861365553]
Test Case:  12 | Input/Output: [[-17.735970325274323 -84] -101.73597032527432]
Test Case:  13 | Input/Output: [[87.47255280352994 16] 103.47255280352994]
Test Case:  14 | Input/Output: [[-14.978708497678198 -75] -89.9787084976782]
Test Case:  15 | Input/Output: [[33.98987517215269 56] 89.9898751721527]
Test Case:  16 | Input/Output: [[94.90587991308632 29] 123.90587991308632]
Test Case:  17 | Input/Output: [[93.8307527623368 45] 138.8307527623368]
Test Case:  18 | Input/Output: [[-98.60538559540204 84] -14.60538559540204]
Test Case:  19 | Input/Output: [[-23.760266707823746 -17] -40.760266707823746]
Test Case:  20 | Input/Output: [[96.15531540729347 41] 137.15531540729347]
Test Case:  21 | Input/Output: [[-59.765323818339986 26] -33.765323818339986]
Test Case:  22 | Input/Output: [[20.04558084919836 -39] -18.95441915080164]
Test Case:  23 | Input/Output: [[-73.75966409314071 -8] -81.75966409314071]
Test Case:  24 | Input/Output: [[-2.5971646249247016 -28] -30.5971646249247]
Test Case:  25 | Input/Output: [[73.47094862041317 -8] 65.47094862041317]
Test Case:  26 | Input/Output: [[53.505109782946704 88] 141.5051097829467]
Test Case:  27 | Input/Output: [[78.28628287810926 -56] 22.28628287810926]
Test Case:  28 | Input/Output: [[55.41274421504926 -28] 27.41274421504926]
Test Case:  29 | Input/Output: [[32.44592661547418 -2] 30.44592661547418]
Test Case:  30 | Input/Output: [[68.26479729130585 68] 136.26479729130585]
Test Case:  31 | Input/Output: [[62.79035214707466 76] 138.79035214707466]
Test Case:  32 | Input/Output: [[-85.02699454559439 92] 6.973005454405609]
Test Case:  33 | Input/Output: [[62.08968496282412 0] 62.08968496282412]
Test Case:  34 | Input/Output: [[34.79515887273911 -50] -15.204841127260892]
Test Case:  35 | Input/Output: [[1.238373701146699 -84] -82.7616262988533]
Test Case:  36 | Input/Output: [[-34.30868524219022 -20] -54.30868524219022]
Test Case:  37 | Input/Output: [[97.48936793479962 39] 136.48936793479962]
Test Case:  38 | Input/Output: [[-49.990868912180034 83] 33.009131087819966]
Test Case:  39 | Input/Output: [[2.792169479523494 -79] -76.2078305204765]
Test Case:  40 | Input/Output: [[50.83551154549838 -74] -23.164488454501623]
Test Case:  41 | Input/Output: [[21.939418515238884 54] 75.93941851523888]
Test Case:  42 | Input/Output: [[-19.580076377401625 -82] -101.58007637740162]
Test Case:  43 | Input/Output: [[58.78764868422044 3] 61.78764868422044]
Test Case:  44 | Input/Output: [[42.02339123320695 84] 126.02339123320695]
Test Case:  45 | Input/Output: [[67.01438280567041 10] 77.01438280567041]
Test Case:  46 | Input/Output: [[91.02937158463175 -17] 74.02937158463175]
Test Case:  47 | Input/Output: [[-95.01107850312422 -86] -181.01107850312422]
Test Case:  48 | Input/Output: [[-95.39711966355866 95] -0.39711966355865513]
Test Case:  49 | Input/Output: [[18.69550805146571 67] 85.69550805146571]
Test Case:  50 | Input/Output: [[71.85021001900671 -53] 18.85021001900671]
Test Case:  51 | Input/Output: [[26.780855014854282 6] 32.78085501485428]
Test Case:  52 | Input/Output: [[-29.808954853970434 -100] -129.80895485397042]
Test Case:  53 | Input/Output: [[-42.5028065019067 -45] -87.50280650190669]
Test Case:  54 | Input/Output: [[-99.23269751244699 9] -90.23269751244699]
Test Case:  55 | Input/Output: [[-97.18184514263986 -98] -195.18184514263987]
Test Case:  56 | Input/Output: [[-88.25232156984642 96] 7.747678430153584]
Test Case:  57 | Input/Output: [[39.714787720239855 -68] -28.285212279760145]
Test Case:  58 | Input/Output: [[-41.39582339592904 -94] -135.39582339592903]
Test Case:  59 | Input/Output: [[-2.5503872636235485 -54] -56.55038726362355]
Test Case:  60 | Input/Output: [[30.963311060008692 77] 107.96331106000869]
Test Case:  61 | Input/Output: [[52.654472190815795 -17] 35.654472190815795]
Test Case:  62 | Input/Output: [[40.55802722435433 13] 53.55802722435433]
Test Case:  63 | Input/Output: [[72.15874643110959 -37] 35.15874643110959]
Test Case:  64 | Input/Output: [[2.0066755450587976 66] 68.0066755450588]
Test Case:  65 | Input/Output: [[-33.81065001188139 -63] -96.81065001188139]
Test Case:  66 | Input/Output: [[54.81280587952645 35] 89.81280587952645]
Test Case:  67 | Input/Output: [[-28.91112936483617 -23] -51.91112936483617]
Test Case:  68 | Input/Output: [[-24.239859594618068 -3] -27.239859594618068]
Test Case:  69 | Input/Output: [[66.98236526016731 87] 153.9823652601673]
Test Case:  70 | Input/Output: [[31.249318136584378 39] 70.24931813658438]
Test Case:  71 | Input/Output: [[-41.46007765738051 -6] -47.46007765738051]
Test Case:  72 | Input/Output: [[-53.31979578307957 98] 44.68020421692043]
Test Case:  73 | Input/Output: [[-92.47258498413693 5] -87.47258498413693]
Test Case:  74 | Input/Output: [[-25.578427748900552 -56] -81.57842774890055]
Test Case:  75 | Input/Output: [[-41.663568986923806 -86] -127.6635689869238]
Test Case:  76 | Input/Output: [[91.29040947452108 66] 157.29040947452108]
Test Case:  77 | Input/Output: [[21.736172481342408 -7] 14.736172481342408]
Test Case:  78 | Input/Output: [[-29.01944752888761 -67] -96.01944752888761]
Test Case:  79 | Input/Output: [[-86.54836024012549 78] -8.54836024012549]
Test Case:  80 | Input/Output: [[-65.00083414660864 41] -24.00083414660864]
Test Case:  81 | Input/Output: [[26.220680211916488 22] 48.22068021191649]
Test Case:  82 | Input/Output: [[-93.7764161394474 40] -53.776416139447406]
Test Case:  83 | Input/Output: [[26.01467291514257 88] 114.01467291514257]
Test Case:  84 | Input/Output: [[-11.943112337394155 -90] -101.94311233739415]
Test Case:  85 | Input/Output: [[-97.18572622466328 30] -67.18572622466328]
Test Case:  86 | Input/Output: [[-36.70184084204313 -44] -80.70184084204314]
Test Case:  87 | Input/Output: [[-28.713135292385743 -46] -74.71313529238574]
Test Case:  88 | Input/Output: [[13.470961313987175 74] 87.47096131398717]
Test Case:  89 | Input/Output: [[46.36681116358909 -49] -2.633188836410909]
Test Case:  90 | Input/Output: [[96.94876753059523 -52] 44.948767530595234]
Test Case:  91 | Input/Output: [[87.21780307063125 -46] 41.21780307063125]
Test Case:  92 | Input/Output: [[-16.73417413725511 93] 76.26582586274489]
Test Case:  93 | Input/Output: [[-36.015425052824604 2] -34.015425052824604]
Test Case:  94 | Input/Output: [[92.62322516782774 -91] 1.6232251678277407]
Test Case:  95 | Input/Output: [[-17.69388123992981 4] -13.693881239929809]
Test Case:  96 | Input/Output: [[-17.9481920415777 -94] -111.9481920415777]
Test Case:  97 | Input/Output: [[61.85251854892485 48] 109.85251854892485]
Test Case:  98 | Input/Output: [[-22.775273515846067 78] 55.22472648415393]
Test Case:  99 | Input/Output: [[-48.12396571174358 -52] -100.12396571174358]
Test Case: 100 | Input/Output: [[-81.09837093920076 -83] -164.09837093920078]
Test Case: 101 | Input/Output: [[-29.964008512783423 -93] -122.96400851278342]
Test Case: 102 | Input/Output: [[36.864722725499576 38] 74.86472272549958]
Test Case: 103 | Input/Output: [[45.012285511685434 -15] 30.012285511685434]
Test Case: 104 | Input/Output: [[-9.053420377678222 39] 29.946579622321778]
Test Case: 105 | Input/Output: [[22.243397468746863 35] 57.24339746874686]
Test Case: 106 | Input/Output: [[11.461609116758126 -98] -86.53839088324187]
Test Case: 107 | Input/Output: [[27.579584004307705 -80] -52.420415995692295]
Test Case: 108 | Input/Output: [[69.46278247419386 -52] 17.462782474193858]
Test Case: 109 | Input/Output: [[-24.84875692987798 11] -13.848756929877979]
Test Case: 110 | Input/Output: [[-5.73474682779576 -49] -54.73474682779576]
Test Case: 111 | Input/Output: [[22.891810218166214 -17] 5.8918102181662135]
Test Case: 112 | Input/Output: [[22.198690144732808 2] 24.198690144732808]
Test Case: 113 | Input/Output: [[-31.485469815038456 -63] -94.48546981503846]
Test Case: 114 | Input/Output: [[-9.277012498143392 -83] -92.27701249814339]
Test Case: 115 | Input/Output: [[92.17955489541254 -45] 47.17955489541254]
Test Case: 116 | Input/Output: [[4.740677010421734 66] 70.74067701042173]
Test Case: 117 | Input/Output: [[68.64320932204271 67] 135.6432093220427]
Test Case: 118 | Input/Output: [[-93.98559707206164 -81] -174.98559707206164]
Test Case: 119 | Input/Output: [[61.930326887732406 -70] -8.069673112267594]
Test Case: 120 | Input/Output: [[-68.33732700361207 79] 10.662672996387926]
Test Case: 121 | Input/Output: [[28.294454320539728 27] 55.29445432053973]
Test Case: 122 | Input/Output: [[2.4909183197929394 67] 69.49091831979294]
Test Case: 123 | Input/Output: [[65.96369243365405 58] 123.96369243365405]
Test Case: 124 | Input/Output: [[-85.96586201559057 2] -83.96586201559057]
Test Case: 125 | Input/Output: [[7.614425782618156 -96] -88.38557421738184]
Test Case: 126 | Input/Output: [[75.76343999853256 84] 159.76343999853256]
Test Case: 127 | Input/Output: [[41.796716618466206 -87] -45.203283381533794]
Test Case: 128 | Input/Output: [[-89.66964251189307 75] -14.669642511893073]
Test Case: 129 | Input/Output: [[69.45935929509483 84] 153.45935929509483]
Test Case: 130 | Input/Output: [[-27.790816560515097 -35] -62.7908165605151]
Test Case: 131 | Input/Output: [[49.99706183053533 8] 57.99706183053533]
Test Case: 132 | Input/Output: [[26.802616238066165 51] 77.80261623806616]
Test Case: 133 | Input/Output: [[-87.17138081331393 54] -33.17138081331393]
Test Case: 134 | Input/Output: [[55.66193689041384 -66] -10.338063109586159]
Test Case: 135 | Input/Output: [[-73.58583191840356 -1] -74.58583191840356]
Test Case: 136 | Input/Output: [[69.81261257285999 -74] -4.18738742714001]
Test Case: 137 | Input/Output: [[28.458125412373903 31] 59.4581254123739]
Test Case: 138 | Input/Output: [[-87.89445075749775 -97] -184.89445075749774]
Test Case: 139 | Input/Output: [[-92.32347789638118 -30] -122.32347789638118]
Test Case: 140 | Input/Output: [[-38.579202682409864 85] 46.420797317590136]
Test Case: 141 | Input/Output: [[48.05709065164939 -1] 47.05709065164939]
Test Case: 142 | Input/Output: [[85.12402761335366 98] 183.12402761335366]
Test Case: 143 | Input/Output: [[85.16578345993221 -17] 68.16578345993221]
Test Case: 144 | Input/Output: [[1.6587493607812576 98] 99.65874936078126]
Test Case: 145 | Input/Output: [[-20.733300136447014 90] 69.26669986355299]
Test Case: 146 | Input/Output: [[-79.2662422209307 16] -63.26624222093071]
Test Case: 147 | Input/Output: [[81.55626314273297 -73] 8.556263142732973]
Test Case: 148 | Input/Output: [[-27.156631147306996 -40] -67.156631147307]
Test Case: 149 | Input/Output: [[30.714562722065864 10] 40.714562722065864]
Test Case: 150 | Input/Output: [[-19.872391995740088 -83] -102.87239199574009]
Test Case: 151 | Input/Output: [[67.09208216749943 -54] 13.092082167499427]
Test Case: 152 | Input/Output: [[-47.3669296474059 -81] -128.3669296474059]
Test Case: 153 | Input/Output: [[88.3955912638786 -87] 1.3955912638786003]
Test Case: 154 | Input/Output: [[-76.2201457196098 -25] -101.2201457196098]
Test Case: 155 | Input/Output: [[-75.4421580560057 -57] -132.4421580560057]
Test Case: 156 | Input/Output: [[-94.38415511735766 -46] -140.38415511735766]
Test Case: 157 | Input/Output: [[12.197113727710175 51] 63.197113727710175]
Test Case: 158 | Input/Output: [[-0.6920863162964537 80] 79.30791368370355]
Test Case: 159 | Input/Output: [[4.939040889445494 15] 19.939040889445494]
Test Case: 160 | Input/Output: [[-47.04376231253982 -13] -60.04376231253982]
Test Case: 161 | Input/Output: [[3.5869747640266496 81] 84.58697476402665]
Test Case: 162 | Input/Output: [[52.47078168656785 85] 137.47078168656785]
Test Case: 163 | Input/Output: [[55.279743692829015 39] 94.27974369282902]
Test Case: 164 | Input/Output: [[-50.88579094074783 -51] -101.88579094074782]
Test Case: 165 | Input/Output: [[-15.246681518067788 29] 13.753318481932212]
Test Case: 166 | Input/Output: [[-71.13441726448929 75] 3.8655827355107135]
Test Case: 167 | Input/Output: [[-94.10698795999461 -51] -145.10698795999463]
Test Case: 168 | Input/Output: [[83.33239331612023 53] 136.33239331612023]
Test Case: 169 | Input/Output: [[63.982980495292935 15] 78.98298049529294]
Test Case: 170 | Input/Output: [[95.79374381131655 -46] 49.793743811316546]
Test Case: 171 | Input/Output: [[-9.50684852265556 -90] -99.50684852265556]
Test Case: 172 | Input/Output: [[-69.90681813133865 37] -32.90681813133865]
Test Case: 173 | Input/Output: [[-16.225865898304235 -52] -68.22586589830424]
Test Case: 174 | Input/Output: [[14.390811095084473 -97] -82.60918890491553]
Test Case: 175 | Input/Output: [[-20.273734128509744 -10] -30.273734128509744]
Test Case: 176 | Input/Output: [[23.265269620365274 2] 25.265269620365274]
Test Case: 177 | Input/Output: [[41.439465728065414 -63] -21.560534271934586]
Test Case: 178 | Input/Output: [[51.01721088408519 15] 66.01721088408519]
Test Case: 179 | Input/Output: [[21.951773390781597 48] 69.9517733907816]
Test Case: 180 | Input/Output: [[65.3101851998756 -32] 33.310185199875605]
Test Case: 181 | Input/Output: [[9.932942634298797 -51] -41.0670573657012]
Test Case: 182 | Input/Output: [[-48.9289189130774 91] 42.0710810869226]
Test Case: 183 | Input/Output: [[78.77945767519506 35] 113.77945767519506]
Test Case: 184 | Input/Output: [[-46.72105691885782 -30] -76.72105691885781]
Test Case: 185 | Input/Output: [[-48.01661826086725 -20] -68.01661826086725]
Test Case: 186 | Input/Output: [[-62.9683484907484 86] 23.031651509251603]
Test Case: 187 | Input/Output: [[83.32961718165234 -37] 46.32961718165234]
Test Case: 188 | Input/Output: [[-29.72399462962987 -88] -117.72399462962987]
Test Case: 189 | Input/Output: [[-34.99202139884514 -3] -37.99202139884514]
Test Case: 190 | Input/Output: [[8.509677290546563 33] 41.50967729054656]
Test Case: 191 | Input/Output: [[51.670789780751335 -76] -24.329210219248665]
Test Case: 192 | Input/Output: [[-7.695931424311837 18] 10.304068575688163]
Test Case: 193 | Input/Output: [[-1.4711896548961931 -95] -96.4711896548962]
Test Case: 194 | Input/Output: [[31.664773537536945 33] 64.66477353753695]
Test Case: 195 | Input/Output: [[-4.414247507827767 -59] -63.41424750782777]
Test Case: 196 | Input/Output: [[-59.97556918916991 -23] -82.9755691891699]
Test Case: 197 | Input/Output: [[6.7570973706468465 79] 85.75709737064685]
Test Case: 198 | Input/Output: [[42.49849526948327 61] 103.49849526948327]
Test Case: 199 | Input/Output: [[-11.957056965791281 -36] -47.95705696579128]
Test Case: 200 | Input/Output: [[-86.60124335681705 6] -80.60124335681705]
Test Case: 201 | Input/Output: [[-30.279993455324885 8] -22.279993455324885]
Test Case: 202 | Input/Output: [[3.3845024195661324 20] 23.384502419566132]
Test Case: 203 | Input/Output: [[5.394189654644094 -91] -85.6058103453559]
Test Case: 204 | Input/Output: [[-9.463411037155026 90] 80.53658896284497]
Test Case: 205 | Input/Output: [[-76.35497297308407 -2] -78.35497297308407]
Test Case: 206 | Input/Output: [[58.688809179944 -34] 24.688809179944002]
Test Case: 207 | Input/Output: [[78.06227079972984 -39] 39.062270799729845]
Test Case: 208 | Input/Output: [[-33.56448186836607 44] 10.435518131633927]
Test Case: 209 | Input/Output: [[38.47929421993487 70] 108.47929421993487]
Test Case: 210 | Input/Output: [[66.23817639006577 -95] -28.761823609934225]
Test Case: 211 | Input/Output: [[17.217215368105144 80] 97.21721536810514]
Test Case: 212 | Input/Output: [[66.76922186640857 91] 157.76922186640857]
Test Case: 213 | Input/Output: [[-45.900293162008325 11] -34.900293162008325]
Test Case: 214 | Input/Output: [[82.94457476488151 30] 112.94457476488151]
Test Case: 215 | Input/Output: [[59.555419968609925 -34] 25.555419968609925]
Test Case: 216 | Input/Output: [[72.03970732809273 -3] 69.03970732809273]
Test Case: 217 | Input/Output: [[-58.644633131866584 -8] -66.64463313186658]
Test Case: 218 | Input/Output: [[-69.75213886240002 76] 6.247861137599983]
Test Case: 219 | Input/Output: [[-87.644231561123 -97] -184.64423156112298]
Test Case: 220 | Input/Output: [[22.18890079510855 -13] 9.188900795108552]
Test Case: 221 | Input/Output: [[34.676678996409635 28] 62.676678996409635]
Test Case: 222 | Input/Output: [[-79.28194830519925 4] -75.28194830519925]
Test Case: 223 | Input/Output: [[44.248946768105725 -63] -18.751053231894275]
Test Case: 224 | Input/Output: [[-42.70861920331828 -8] -50.70861920331828]
Test Case: 225 | Input/Output: [[-3.6450143729340994 -81] -84.6450143729341]
Test Case: 226 | Input/Output: [[-5.757582091232649 40] 34.24241790876735]
Test Case: 227 | Input/Output: [[45.37716426676033 46] 91.37716426676033]
Test Case: 228 | Input/Output: [[-43.17250878314154 66] 22.827491216858462]
Test Case: 229 | Input/Output: [[60.97901734621652 90] 150.97901734621652]
Test Case: 230 | Input/Output: [[-19.89889205638005 -52] -71.89889205638005]
Test Case: 231 | Input/Output: [[6.980931102543849 96] 102.98093110254385]
Test Case: 232 | Input/Output: [[1.7910657364667486 -70] -68.20893426353325]
Test Case: 233 | Input/Output: [[90.12694181659467 14] 104.12694181659467]
Test Case: 234 | Input/Output: [[64.8113139225407 -27] 37.811313922540705]
Test Case: 235 | Input/Output: [[46.25554450085215 -78] -31.744455499147847]
Test Case: 236 | Input/Output: [[-36.603950388082374 40] 3.3960496119176256]
Test Case: 237 | Input/Output: [[51.00719473569944 -97] -45.99280526430056]
Test Case: 238 | Input/Output: [[7.696478637595476 -72] -64.30352136240452]
Test Case: 239 | Input/Output: [[53.92548764040717 75] 128.92548764040717]
Test Case: 240 | Input/Output: [[-4.718932313028915 63] 58.281067686971085]
Test Case: 241 | Input/Output: [[-49.45056662112535 -43] -92.45056662112535]
Test Case: 242 | Input/Output: [[-4.409669516751904 -10] -14.409669516751904]
Test Case: 243 | Input/Output: [[-72.59455134369105 86] 13.405448656308948]
Test Case: 244 | Input/Output: [[-50.86614466236297 32] -18.86614466236297]
Test Case: 245 | Input/Output: [[-24.550875622924195 55] 30.449124377075805]
Test Case: 246 | Input/Output: [[99.70932993137879 -97] 2.7093299313787895]
Test Case: 247 | Input/Output: [[-62.27874125225632 23] -39.27874125225632]
Test Case: 248 | Input/Output: [[-7.72119660253405 71] 63.27880339746595]
Test Case: 249 | Input/Output: [[-33.93694254540421 -56] -89.93694254540421]
Test Case: 250 | Input/Output: [[-17.075242158207544 30] 12.924757841792456]
Test Case: 251 | Input/Output: [[53.02162060447563 -80] -26.97837939552437]
Test Case: 252 | Input/Output: [[-28.436558995938114 -81] -109.43655899593811]
Test Case: 253 | Input/Output: [[56.20595073588032 -42] 14.205950735880322]
Test Case: 254 | Input/Output: [[7.602950116233018 74] 81.60295011623302]
Test Case: 255 | Input/Output: [[46.56323496144981 41] 87.56323496144981]
Test Case: 256 | Input/Output: [[45.36069522147079 39] 84.36069522147079]
Test Case: 257 | Input/Output: [[54.9595055090748 4] 58.9595055090748]
Test Case: 258 | Input/Output: [[1.225271665406396 64] 65.2252716654064]
Test Case: 259 | Input/Output: [[-58.13612914854453 -22] -80.13612914854454]
Test Case: 260 | Input/Output: [[-50.33554229153785 73] 22.66445770846215]
Test Case: 261 | Input/Output: [[42.46234928801988 -64] -21.53765071198012]
Test Case: 262 | Input/Output: [[28.85451746108282 -73] -44.14548253891718]
Test Case: 263 | Input/Output: [[-30.574956682736428 31] 0.42504331726357236]
Test Case: 264 | Input/Output: [[-9.75348810535219 -72] -81.75348810535219]
Test Case: 265 | Input/Output: [[21.604977258903006 -1] 20.604977258903006]
Test Case: 266 | Input/Output: [[-9.685696503311675 49] 39.314303496688325]
Test Case: 267 | Input/Output: [[53.644217932404416 81] 134.64421793240442]
Test Case: 268 | Input/Output: [[-2.5767816820229115 13] 10.423218317977089]
Test Case: 269 | Input/Output: [[32.074269873103674 -85] -52.925730126896326]
Test Case: 270 | Input/Output: [[-87.80408161499349 31] -56.80408161499349]
Test Case: 271 | Input/Output: [[-84.5140728525333 -40] -124.5140728525333]
Test Case: 272 | Input/Output: [[-27.27338611514989 18] -9.27338611514989]
Test Case: 273 | Input/Output: [[40.0882566701971 32] 72.0882566701971]
Test Case: 274 | Input/Output: [[77.0707253350179 -22] 55.0707253350179]
Test Case: 275 | Input/Output: [[62.25693477687872 -21] 41.25693477687872]
Test Case: 276 | Input/Output: [[34.329340626603994 -14] 20.329340626603994]
Test Case: 277 | Input/Output: [[27.935825825264487 26] 53.93582582526449]
Test Case: 278 | Input/Output: [[40.4458613743366 70] 110.4458613743366]
Test Case: 279 | Input/Output: [[-14.323968995895214 -15] -29.323968995895214]
Test Case: 280 | Input/Output: [[-5.843980150223047 73] 67.15601984977695]
Test Case: 281 | Input/Output: [[80.4630702107047 -31] 49.4630702107047]
Test Case: 282 | Input/Output: [[85.95044681681239 46] 131.9504468168124]
Test Case: 283 | Input/Output: [[-78.63959897098539 96] 17.36040102901461]
Test Case: 284 | Input/Output: [[78.45002678839566 -29] 49.45002678839566]
Test Case: 285 | Input/Output: [[-1.1154077232208692 11] 9.88459227677913]
Test Case: 286 | Input/Output: [[98.07826165675527 -58] 40.078261656755274]
Test Case: 287 | Input/Output: [[-81.85552305514088 33] -48.85552305514088]
Test Case: 288 | Input/Output: [[34.025775238663556 -90] -55.974224761336444]
Test Case: 289 | Input/Output: [[79.6601164979918 -62] 17.660116497991794]
Test Case: 290 | Input/Output: [[-29.942304299914028 70] 40.05769570008597]
Test Case: 291 | Input/Output: [[55.64257175430038 -16] 39.64257175430038]
Test Case: 292 | Input/Output: [[-88.00614215182831 68] -20.006142151828314]
Test Case: 293 | Input/Output: [[-20.124034386163373 92] 71.87596561383663]
Test Case: 294 | Input/Output: [[36.76903266607238 -99] -62.23096733392762]
Test Case: 295 | Input/Output: [[32.059404259427964 -54] -21.940595740572036]
Test Case: 296 | Input/Output: [[-40.18744440393007 -61] -101.18744440393007]
Test Case: 297 | Input/Output: [[63.70193018329485 -87] -23.29806981670515]
Test Case: 298 | Input/Output: [[-17.8078043581894 19] 1.1921956418105992]
Test Case: 299 | Input/Output: [[48.32066300550605 24] 72.32066300550605]
Test Case: 300 | Input/Output: [[81.2354100196986 -65] 16.235410019698605]
Test Case: 301 | Input/Output: [[-39.81317248672802 90] 50.18682751327198]
Test Case: 302 | Input/Output: [[-56.27350163377156 -65] -121.27350163377156]
Test Case: 303 | Input/Output: [[47.43537069344629 -19] 28.435370693446288]
Test Case: 304 | Input/Output: [[-84.7992017438091 -23] -107.7992017438091]
Test Case: 305 | Input/Output: [[33.061449563488395 -51] -17.938550436511605]
Test Case: 306 | Input/Output: [[-53.11916993797314 -38] -91.11916993797314]
Test Case: 307 | Input/Output: [[9.315240886858618 -22] -12.684759113141382]
Test Case: 308 | Input/Output: [[-2.5457929254478273 -92] -94.54579292544783]
Test Case: 309 | Input/Output: [[2.392377552111128 5] 7.392377552111128]
Test Case: 310 | Input/Output: [[-6.189434972756828 89] 82.81056502724317]
Test Case: 311 | Input/Output: [[-73.03214884630755 81] 7.96785115369245]
Test Case: 312 | Input/Output: [[52.7045502740537 -3] 49.7045502740537]
Test Case: 313 | Input/Output: [[56.68095117101345 -37] 19.680951171013447]
Test Case: 314 | Input/Output: [[-9.567745797017466 -17] -26.567745797017466]
Test Case: 315 | Input/Output: [[-28.71174683356044 54] 25.28825316643956]
Test Case: 316 | Input/Output: [[-76.71481884852216 -10] -86.71481884852216]
Test Case: 317 | Input/Output: [[-56.155888162922516 82] 25.844111837077484]
Test Case: 318 | Input/Output: [[-58.344742748518264 49] -9.344742748518264]
Test Case: 319 | Input/Output: [[67.65646273218334 78] 145.65646273218334]
Test Case: 320 | Input/Output: [[22.642380113607757 29] 51.64238011360776]
Test Case: 321 | Input/Output: [[36.63843772901549 1] 37.63843772901549]
Test Case: 322 | Input/Output: [[46.947910765335735 88] 134.94791076533573]
Test Case: 323 | Input/Output: [[2.214049990754191 -50] -47.78595000924581]
Test Case: 324 | Input/Output: [[-95.56577643036887 -58] -153.56577643036889]
Test Case: 325 | Input/Output: [[-62.4094857667888 -78] -140.4094857667888]
Test Case: 326 | Input/Output: [[-3.70512955493723 6] 2.29487044506277]
Test Case: 327 | Input/Output: [[20.887885738612 -18] 2.887885738611999]
Test Case: 328 | Input/Output: [[-6.002897450945355 -58] -64.00289745094535]
Test Case: 329 | Input/Output: [[-87.77031999914165 -2] -89.77031999914165]
Test Case: 330 | Input/Output: [[92.00630519978012 55] 147.00630519978012]
Test Case: 331 | Input/Output: [[42.6401117913141 -95] -52.3598882086859]
Test Case: 332 | Input/Output: [[39.66938509385295 97] 136.66938509385295]
Test Case: 333 | Input/Output: [[20.22440971010215 -81] -60.77559028989785]
Test Case: 334 | Input/Output: [[-30.9034253081051 12] -18.9034253081051]
Test Case: 335 | Input/Output: [[60.32433763036718 -41] 19.324337630367182]
Test Case: 336 | Input/Output: [[-27.782141574684644 -94] -121.78214157468464]
Test Case: 337 | Input/Output: [[18.322377563004366 85] 103.32237756300437]
Test Case: 338 | Input/Output: [[94.24260276813484 25] 119.24260276813484]
Test Case: 339 | Input/Output: [[50.53553738788307 -44] 6.535537387883068]
Test Case: 340 | Input/Output: [[36.23775534516014 -65] -28.76224465483986]
Test Case: 341 | Input/Output: [[-17.52882253670623 -54] -71.52882253670623]
Test Case: 342 | Input/Output: [[51.67377140888331 -45] 6.6737714088833116]
Test Case: 343 | Input/Output: [[-57.9047974955319 91] 33.0952025044681]
Test Case: 344 | Input/Output: [[57.970887829583205 -51] 6.970887829583205]
Test Case: 345 | Input/Output: [[-69.3901446920421 -78] -147.3901446920421]
Test Case: 346 | Input/Output: [[-90.285939026628 -13] -103.285939026628]
Test Case: 347 | Input/Output: [[-78.72156028288002 44] -34.72156028288002]
Test Case: 348 | Input/Output: [[-39.5107744096471 -41] -80.5107744096471]
Test Case: 349 | Input/Output: [[22.234879981018565 -27] -4.765120018981435]
Test Case: 350 | Input/Output: [[38.77459503450751 4] 42.77459503450751]
Test Case: 351 | Input/Output: [[-0.03913420387135602 11] 10.960865796128644]
Test Case: 352 | Input/Output: [[-52.9136191943177 2] -50.9136191943177]
Test Case: 353 | Input/Output: [[-97.26968039450257 57] -40.26968039450257]
Test Case: 354 | Input/Output: [[24.1354355834915 -97] -72.8645644165085]
Test Case: 355 | Input/Output: [[-91.76916747203454 8] -83.76916747203454]
Test Case: 356 | Input/Output: [[31.29422454878707 31] 62.29422454878707]
Test Case: 357 | Input/Output: [[-48.88775974546164 27] -21.887759745461643]
Test Case: 358 | Input/Output: [[-29.366146782990185 -40] -69.36614678299019]
Test Case: 359 | Input/Output: [[75.25383248612934 -83] -7.74616751387066]
Test Case: 360 | Input/Output: [[48.659009228303205 60] 108.6590092283032]
Test Case: 361 | Input/Output: [[55.696133300004846 -88] -32.303866699995154]
Test Case: 362 | Input/Output: [[13.132234090013469 -98] -84.86776590998653]
Test Case: 363 | Input/Output: [[-52.08175890847044 44] -8.08175890847044]
Test Case: 364 | Input/Output: [[15.265853931291403 -94] -78.7341460687086]
Test Case: 365 | Input/Output: [[-39.68653492054843 -81] -120.68653492054844]
Test Case: 366 | Input/Output: [[-59.342892182440174 -11] -70.34289218244018]
Test Case: 367 | Input/Output: [[-54.771817851816195 6] -48.771817851816195]
Test Case: 368 | Input/Output: [[-33.88592655874922 96] 62.11407344125078]
Test Case: 369 | Input/Output: [[2.6765950461562937 -2] 0.6765950461562937]
Test Case: 370 | Input/Output: [[48.484964465763454 28] 76.48496446576345]
Test Case: 371 | Input/Output: [[99.44224586172712 -71] 28.442245861727116]
Test Case: 372 | Input/Output: [[-19.782268104027168 -30] -49.78226810402717]
Test Case: 373 | Input/Output: [[13.244126720454545 18] 31.244126720454545]
Test Case: 374 | Input/Output: [[-40.254988375297614 95] 54.745011624702386]
Test Case: 375 | Input/Output: [[-90.75483310844352 -29] -119.75483310844352]
Test Case: 376 | Input/Output: [[-91.38112570832047 -27] -118.38112570832047]
Test Case: 377 | Input/Output: [[50.08307206996301 84] 134.083072069963]
Test Case: 378 | Input/Output: [[-63.82744494099708 -50] -113.82744494099708]
Test Case: 379 | Input/Output: [[74.71270093734591 -90] -15.287299062654085]
Test Case: 380 | Input/Output: [[53.624066409527245 97] 150.62406640952725]
Test Case: 381 | Input/Output: [[-39.02680769211704 -99] -138.02680769211705]
Test Case: 382 | Input/Output: [[-91.22190682044133 46] -45.22190682044133]
Test Case: 383 | Input/Output: [[93.83092348344138 80] 173.83092348344138]
Test Case: 384 | Input/Output: [[22.528683427588717 92] 114.52868342758872]
Test Case: 385 | Input/Output: [[84.22312484548641 2] 86.22312484548641]
Test Case: 386 | Input/Output: [[98.94388671474573 73] 171.94388671474573]
Test Case: 387 | Input/Output: [[93.09218037165164 -52] 41.09218037165164]
Test Case: 388 | Input/Output: [[7.575521444676909 -88] -80.42447855532309]
Test Case: 389 | Input/Output: [[58.199542748249 92] 150.199542748249]
Test Case: 390 | Input/Output: [[-47.54580062095957 -76] -123.54580062095957]
Test Case: 391 | Input/Output: [[-74.35335148334588 30] -44.353351483345875]
Test Case: 392 | Input/Output: [[83.4848061944302 91] 174.4848061944302]
Test Case: 393 | Input/Output: [[64.13653084350827 -82] -17.863469156491732]
Test Case: 394 | Input/Output: [[-23.10340792778814 24] 0.8965920722118597]
Test Case: 395 | Input/Output: [[-80.21732663143354 53] -27.217326631433536]
Test Case: 396 | Input/Output: [[-11.73372172146317 -28] -39.73372172146317]
Test Case: 397 | Input/Output: [[92.46297352831837 -32] 60.46297352831837]
Test Case: 398 | Input/Output: [[46.77105748853535 -3] 43.77105748853535]
Test Case: 399 | Input/Output: [[-14.810029073886284 -15] -29.810029073886284]
Test Case: 400 | Input/Output: [[-91.88503971944353 -26] -117.88503971944353]
Test Case: 401 | Input/Output: [[38.610696648483355 32] 70.61069664848335]
Test Case: 402 | Input/Output: [[-48.40395454062985 21] -27.403954540629847]
Test Case: 403 | Input/Output: [[-39.371815237827605 -85] -124.3718152378276]
Test Case: 404 | Input/Output: [[86.17381664383132 61] 147.17381664383132]
Test Case: 405 | Input/Output: [[92.68213135296847 -36] 56.68213135296847]
Test Case: 406 | Input/Output: [[-6.764551295098727 38] 31.235448704901273]
Test Case: 407 | Input/Output: [[-58.15675155649556 -9] -67.15675155649555]
Test Case: 408 | Input/Output: [[30.54089791393463 77] 107.54089791393463]
Test Case: 409 | Input/Output: [[1.5504462095056795 94] 95.55044620950568]
Test Case: 410 | Input/Output: [[34.249474427308996 99] 133.249474427309]
Test Case: 411 | Input/Output: [[-27.55304525394193 33] 5.4469547460580685]
Test Case: 412 | Input/Output: [[3.0151693352916027 -10] -6.984830664708397]
Test Case: 413 | Input/Output: [[-71.16787360909207 -100] -171.16787360909206]
Test Case: 414 | Input/Output: [[-73.0791165407035 45] -28.079116540703495]
Test Case: 415 | Input/Output: [[22.147285479416084 -53] -30.852714520583916]
Test Case: 416 | Input/Output: [[71.11377973375119 38] 109.11377973375119]
Test Case: 417 | Input/Output: [[-8.315692567646153 -86] -94.31569256764615]
Test Case: 418 | Input/Output: [[-30.39497382189009 26] -4.3949738218900904]
Test Case: 419 | Input/Output: [[9.202646748767634 74] 83.20264674876763]
Test Case: 420 | Input/Output: [[-30.538611709440545 -56] -86.53861170944054]
Test Case: 421 | Input/Output: [[-71.14508679226341 -32] -103.14508679226341]
Test Case: 422 | Input/Output: [[-40.65565853798685 69] 28.344341462013148]
Test Case: 423 | Input/Output: [[97.90983774544395 37] 134.90983774544395]
Test Case: 424 | Input/Output: [[94.190809326806 94] 188.190809326806]
Test Case: 425 | Input/Output: [[19.442968773157205 80] 99.4429687731572]
Test Case: 426 | Input/Output: [[47.73635389343926 -46] 1.736353893439258]
Test Case: 427 | Input/Output: [[39.481016873971214 79] 118.48101687397121]
Test Case: 428 | Input/Output: [[74.63869494322185 75] 149.63869494322185]
Test Case: 429 | Input/Output: [[-29.554116665383148 -46] -75.55411666538315]
Test Case: 430 | Input/Output: [[-84.48180444875109 97] 12.518195551248908]
Test Case: 431 | Input/Output: [[15.076175796681213 5] 20.076175796681213]
Test Case: 432 | Input/Output: [[91.44186383686159 -49] 42.441863836861586]
Test Case: 433 | Input/Output: [[77.01772178920274 39] 116.01772178920274]
Test Case: 434 | Input/Output: [[0.4714308884931029 64] 64.4714308884931]
Test Case: 435 | Input/Output: [[54.90908232592511 42] 96.90908232592511]
Test Case: 436 | Input/Output: [[63.9636117978921 -39] 24.9636117978921]
Test Case: 437 | Input/Output: [[21.862654969379065 29] 50.862654969379065]
Test Case: 438 | Input/Output: [[-44.8726262928286 -93] -137.8726262928286]
Test Case: 439 | Input/Output: [[27.279792375384872 -15] 12.279792375384872]
Test Case: 440 | Input/Output: [[-19.92283058328512 -24] -43.92283058328512]
Test Case: 441 | Input/Output: [[19.825838144911543 71] 90.82583814491154]
Test Case: 442 | Input/Output: [[-29.699555201873224 -25] -54.699555201873224]
Test Case: 443 | Input/Output: [[-83.43026138196603 50] -33.430261381966034]
Test Case: 444 | Input/Output: [[6.535770986130075 91] 97.53577098613007]
Test Case: 445 | Input/Output: [[-48.30822025083583 -27] -75.30822025083583]
Test Case: 446 | Input/Output: [[19.64886082791581 -21] -1.3511391720841885]
Test Case: 447 | Input/Output: [[-42.450841789573815 -52] -94.45084178957381]
Test Case: 448 | Input/Output: [[-60.05108171686233 -67] -127.05108171686233]
Test Case: 449 | Input/Output: [[-6.050049962569176 -30] -36.050049962569176]
Test Case: 450 | Input/Output: [[-53.08206560955915 -53] -106.08206560955915]
Test Case: 451 | Input/Output: [[-33.51964798809952 83] 49.48035201190048]
Test Case: 452 | Input/Output: [[-38.709407944565456 64] 25.290592055434544]
Test Case: 453 | Input/Output: [[-87.87142282217468 -20] -107.87142282217468]
Test Case: 454 | Input/Output: [[27.639930853587245 2] 29.639930853587245]
Test Case: 455 | Input/Output: [[-32.695721313881236 -43] -75.69572131388124]
Test Case: 456 | Input/Output: [[9.540501156676328 -79] -69.45949884332367]
Test Case: 457 | Input/Output: [[21.844136379127193 80] 101.84413637912719]
Test Case: 458 | Input/Output: [[31.778038893907564 -53] -21.221961106092436]
Test Case: 459 | Input/Output: [[-36.93070749237932 -13] -49.93070749237932]
Test Case: 460 | Input/Output: [[58.9376009236876 40] 98.9376009236876]
Test Case: 461 | Input/Output: [[-4.757830859224683 -13] -17.757830859224683]
Test Case: 462 | Input/Output: [[-71.45374390642203 -89] -160.45374390642203]
Test Case: 463 | Input/Output: [[-94.13978168801181 9] -85.13978168801181]
Test Case: 464 | Input/Output: [[-64.15606142941417 -6] -70.15606142941417]
Test Case: 465 | Input/Output: [[-61.447391253017926 80] 18.552608746982074]
Test Case: 466 | Input/Output: [[-36.127335821131744 58] 21.872664178868256]
Test Case: 467 | Input/Output: [[-6.939110799832136 27] 20.060889200167864]
Test Case: 468 | Input/Output: [[-80.96534656766235 -50] -130.96534656766235]
Test Case: 469 | Input/Output: [[-12.612286112364359 -92] -104.61228611236436]
Test Case: 470 | Input/Output: [[56.69731846009515 -17] 39.69731846009515]
Test Case: 471 | Input/Output: [[-51.134609261168066 -95] -146.13460926116807]
Test Case: 472 | Input/Output: [[55.99958666087829 44] 99.9995866608783]
Test Case: 473 | Input/Output: [[92.00563306394099 -93] -0.9943669360590093]
Test Case: 474 | Input/Output: [[-0.05937439942303513 92] 91.94062560057696]
Test Case: 475 | Input/Output: [[31.314558803150618 -64] -32.68544119684938]
Test Case: 476 | Input/Output: [[96.03125228645769 -54] 42.031252286457686]
Test Case: 477 | Input/Output: [[28.556464190205332 65] 93.55646419020533]
Test Case: 478 | Input/Output: [[94.37739435308828 -12] 82.37739435308828]
Test Case: 479 | Input/Output: [[47.25617565181952 -66] -18.743824348180482]
Test Case: 480 | Input/Output: [[4.118013100490998 -6] -1.8819868995090019]
Test Case: 481 | Input/Output: [[-81.27248153467207 30] -51.27248153467207]
Test Case: 482 | Input/Output: [[5.735809721951242 -84] -78.26419027804876]
Test Case: 483 | Input/Output: [[-24.544543716735816 -56] -80.54454371673582]
Test Case: 484 | Input/Output: [[-13.185011234579093 -100] -113.1850112345791]
Test Case: 485 | Input/Output: [[65.57361607265844 64] 129.57361607265844]
Test Case: 486 | Input/Output: [[71.36734609322829 -25] 46.36734609322829]
Test Case: 487 | Input/Output: [[63.90679803229688 80] 143.90679803229688]
Test Case: 488 | Input/Output: [[82.9060472016854 -51] 31.906047201685396]
Test Case: 489 | Input/Output: [[-31.9593030246412 2] -29.9593030246412]
Test Case: 490 | Input/Output: [[-81.9410259256306 -33] -114.9410259256306]
Test Case: 491 | Input/Output: [[-13.362032754576944 27] 13.637967245423056]
Test Case: 492 | Input/Output: [[-44.00481744915994 89] 44.99518255084006]
Test Case: 493 | Input/Output: [[-52.80503917781869 31] -21.805039177818692]
Test Case: 494 | Input/Output: [[-17.935961261628577 -95] -112.93596126162858]
Test Case: 495 | Input/Output: [[88.92676402984142 35] 123.92676402984142]
Test Case: 496 | Input/Output: [[33.07170141776842 68] 101.07170141776842]
Test Case: 497 | Input/Output: [[-8.434550262416323 -86] -94.43455026241632]
Test Case: 498 | Input/Output: [[-88.43973747234473 73] -15.439737472344731]
Test Case: 499 | Input/Output: [[-46.600122978520254 43] -3.600122978520254]
Test Case: 500 | Input/Output: [[52.12226219341588 99] 151.12226219341588]
Test Case: 501 | Input/Output: [[-76.01078322483377 -82] -158.01078322483377]
Test Case: 502 | Input/Output: [[-11.002012290731173 35] 23.997987709268827]
Test Case: 503 | Input/Output: [[-18.446004340087185 -53] -71.44600434008719]
Test Case: 504 | Input/Output: [[80.37339722152964 -85] -4.626602778470357]
Test Case: 505 | Input/Output: [[-56.860436650138 68] 11.139563349862001]
Test Case: 506 | Input/Output: [[-15.727700106123208 -74] -89.72770010612321]
Test Case: 507 | Input/Output: [[-55.729435393328195 -83] -138.7294353933282]
Test Case: 508 | Input/Output: [[-60.42096251249376 -78] -138.42096251249376]
Test Case: 509 | Input/Output: [[-52.99862982518155 -44] -96.99862982518155]
Test Case: 510 | Input/Output: [[-8.252867166048944 -74] -82.25286716604894]
Test Case: 511 | Input/Output: [[-67.41101701626093 5] -62.41101701626093]
Test Case: 512 | Input/Output: [[59.176330160726195 -94] -34.823669839273805]
Test Case: 513 | Input/Output: [[6.363527582073374 31] 37.363527582073374]
Test Case: 514 | Input/Output: [[11.366859604662082 -94] -82.63314039533792]
Test Case: 515 | Input/Output: [[0.12280526076308718 -5] -4.877194739236913]
Test Case: 516 | Input/Output: [[-7.292161469984563 -54] -61.29216146998456]
Test Case: 517 | Input/Output: [[-2.429600401220469 -41] -43.42960040122047]
Test Case: 518 | Input/Output: [[21.869395058625088 54] 75.86939505862509]
Test Case: 519 | Input/Output: [[93.0232098312998 86] 179.0232098312998]
Test Case: 520 | Input/Output: [[74.25727327423769 75] 149.2572732742377]
Test Case: 521 | Input/Output: [[27.209152156915522 97] 124.20915215691552]
Test Case: 522 | Input/Output: [[46.20333397640766 -81] -34.79666602359234]
Test Case: 523 | Input/Output: [[-46.48361069682472 25] -21.48361069682472]
Test Case: 524 | Input/Output: [[-47.479919888223975 24] -23.479919888223975]
Test Case: 525 | Input/Output: [[60.1191770936143 -19] 41.1191770936143]
Test Case: 526 | Input/Output: [[-84.36457415511329 45] -39.36457415511329]
Test Case: 527 | Input/Output: [[17.376774500695078 27] 44.37677450069508]
Test Case: 528 | Input/Output: [[-89.21735585002502 39] -50.217355850025015]
Test Case: 529 | Input/Output: [[47.1529706798066 12] 59.1529706798066]
Test Case: 530 | Input/Output: [[-16.85738247486222 21] 4.14261752513778]
Test Case: 531 | Input/Output: [[95.23776594960046 56] 151.23776594960046]
Test Case: 532 | Input/Output: [[-78.97846995229295 43] -35.978469952292954]
Test Case: 533 | Input/Output: [[86.50007666314409 74] 160.50007666314409]
Test Case: 534 | Input/Output: [[-42.389929665258386 89] 46.610070334741614]
Test Case: 535 | Input/Output: [[68.3113121116049 -53] 15.311312111604906]
Test Case: 536 | Input/Output: [[-45.828231279159404 -95] -140.8282312791594]
Test Case: 537 | Input/Output: [[-93.78805273441229 -22] -115.78805273441229]
Test Case: 538 | Input/Output: [[17.09917495592954 -64] -46.90082504407046]
Test Case: 539 | Input/Output: [[-75.36717934173987 -3] -78.36717934173987]
Test Case: 540 | Input/Output: [[-39.703976364979646 -27] -66.70397636497964]
Test Case: 541 | Input/Output: [[72.57898223484494 8] 80.57898223484494]
Test Case: 542 | Input/Output: [[8.826702256746842 92] 100.82670225674684]
Test Case: 543 | Input/Output: [[73.86762411337452 -77] -3.132375886625482]
Test Case: 544 | Input/Output: [[26.64662125525801 -74] -47.35337874474199]
Test Case: 545 | Input/Output: [[-42.6358097885541 43] 0.36419021144590147]
Test Case: 546 | Input/Output: [[-34.18159623214096 37] 2.8184037678590386]
Test Case: 547 | Input/Output: [[9.740265947544358 -14] -4.2597340524556415]
Test Case: 548 | Input/Output: [[66.21288139430163 12] 78.21288139430163]
Test Case: 549 | Input/Output: [[-45.12679006890574 -65] -110.12679006890573]
Test Case: 550 | Input/Output: [[-68.09462803010615 -32] -100.09462803010615]
Test Case: 551 | Input/Output: [[-92.72853710586534 70] -22.728537105865342]
Test Case: 552 | Input/Output: [[9.357958565737562 -99] -89.64204143426244]
Test Case: 553 | Input/Output: [[-67.91738182668612 -66] -133.91738182668612]
Test Case: 554 | Input/Output: [[-90.81586301769687 -86] -176.81586301769687]
Test Case: 555 | Input/Output: [[-9.843602981141132 -24] -33.84360298114113]
Test Case: 556 | Input/Output: [[-54.767487817821326 -79] -133.76748781782132]
Test Case: 557 | Input/Output: [[-17.448288368984706 90] 72.5517116310153]
Test Case: 558 | Input/Output: [[84.66780523733172 77] 161.66780523733172]
Test Case: 559 | Input/Output: [[-4.2894144085044985 11] 6.7105855914955015]
Test Case: 560 | Input/Output: [[-24.77147637262658 -28] -52.77147637262658]
Test Case: 561 | Input/Output: [[-92.45091426374354 -96] -188.45091426374353]
Test Case: 562 | Input/Output: [[-91.4995915682425 -100] -191.4995915682425]
Test Case: 563 | Input/Output: [[82.0927282678943 33] 115.0927282678943]
Test Case: 564 | Input/Output: [[-5.805855361320852 3] -2.8058553613208517]
Test Case: 565 | Input/Output: [[54.184149161662305 -93] -38.815850838337695]
Test Case: 566 | Input/Output: [[-25.886988171693943 22] -3.886988171693943]
Test Case: 567 | Input/Output: [[-91.03586866490043 70] -21.035868664900434]
Test Case: 568 | Input/Output: [[-20.367396794427123 39] 18.632603205572877]
Test Case: 569 | Input/Output: [[57.7009405919527 89] 146.7009405919527]
Test Case: 570 | Input/Output: [[60.919431382021116 -24] 36.919431382021116]
Test Case: 571 | Input/Output: [[-95.42234810833801 -52] -147.422348108338]
Test Case: 572 | Input/Output: [[-37.211348952027336 86] 48.788651047972664]
Test Case: 573 | Input/Output: [[-12.065886482383135 -35] -47.065886482383135]
Test Case: 574 | Input/Output: [[49.05330494020987 53] 102.05330494020987]
Test Case: 575 | Input/Output: [[-35.4064553257368 30] -5.4064553257368]
Test Case: 576 | Input/Output: [[-77.82079633551322 2] -75.82079633551322]
Test Case: 577 | Input/Output: [[-74.86972863074443 -26] -100.86972863074443]
Test Case: 578 | Input/Output: [[-12.465885919044524 -58] -70.46588591904452]
Test Case: 579 | Input/Output: [[60.977046901188174 -74] -13.022953098811826]
Test Case: 580 | Input/Output: [[8.451617611882128 6] 14.451617611882128]
Test Case: 581 | Input/Output: [[-43.06862668306535 -40] -83.06862668306535]
Test Case: 582 | Input/Output: [[99.98317985675965 25] 124.98317985675965]
Test Case: 583 | Input/Output: [[-9.53622287996781 98] 88.46377712003219]
Test Case: 584 | Input/Output: [[32.19594086074002 37] 69.19594086074002]
Test Case: 585 | Input/Output: [[-72.1789487679638 57] -15.178948767963803]
Test Case: 586 | Input/Output: [[7.259579358341057 -27] -19.740420641658943]
Test Case: 587 | Input/Output: [[48.28554491730776 -64] -15.71445508269224]
Test Case: 588 | Input/Output: [[17.28989940086123 -66] -48.71010059913877]
Test Case: 589 | Input/Output: [[-37.06665523889898 -2] -39.06665523889898]
Test Case: 590 | Input/Output: [[69.23108487273365 -61] 8.231084872733646]
Test Case: 591 | Input/Output: [[35.04408079868523 85] 120.04408079868523]
Test Case: 592 | Input/Output: [[-84.89683816053193 -5] -89.89683816053193]
Test Case: 593 | Input/Output: [[88.43783729179165 -19] 69.43783729179165]
Test Case: 594 | Input/Output: [[67.51416145852275 -70] -2.48583854147725]
Test Case: 595 | Input/Output: [[-6.598247300128904 -18] -24.598247300128904]
Test Case: 596 | Input/Output: [[-1.4421636236914281 88] 86.55783637630857]
Test Case: 597 | Input/Output: [[-88.16243747126138 50] -38.162437471261384]
Test Case: 598 | Input/Output: [[-3.539643514498067 87] 83.46035648550193]
Test Case: 599 | Input/Output: [[-16.157943117863056 -10] -26.157943117863056]
Test Case: 600 | Input/Output: [[18.168478851658804 -85] -66.8315211483412]
Test Case: 601 | Input/Output: [[22.69854747559073 70] 92.69854747559073]
Test Case: 602 | Input/Output: [[-96.58087113003648 58] -38.580871130036485]
Test Case: 603 | Input/Output: [[-21.376766815763034 -79] -100.37676681576303]
Test Case: 604 | Input/Output: [[-71.87789827690052 -59] -130.8778982769005]
Test Case: 605 | Input/Output: [[49.7099951132472 -71] -21.290004886752797]
Test Case: 606 | Input/Output: [[-9.32560729069958 58] 48.67439270930042]
Test Case: 607 | Input/Output: [[7.232359682692092 88] 95.23235968269209]
Test Case: 608 | Input/Output: [[42.85422164162463 98] 140.85422164162463]
Test Case: 609 | Input/Output: [[56.03383151100877 19] 75.03383151100877]
Test Case: 610 | Input/Output: [[27.567939797848837 98] 125.56793979784884]
Test Case: 611 | Input/Output: [[43.353527806144285 -19] 24.353527806144285]
Test Case: 612 | Input/Output: [[73.71975022492603 20] 93.71975022492603]
Test Case: 613 | Input/Output: [[2.9487835621624185 96] 98.94878356216242]
Test Case: 614 | Input/Output: [[1.180775938180247 57] 58.18077593818025]
Test Case: 615 | Input/Output: [[11.578179375976006 -77] -65.421820624024]
Test Case: 616 | Input/Output: [[63.41035788646022 73] 136.41035788646022]
Test Case: 617 | Input/Output: [[-37.65589709237291 78] 40.34410290762709]
Test Case: 618 | Input/Output: [[66.07456644985754 -55] 11.074566449857542]
Test Case: 619 | Input/Output: [[82.85627019341308 -29] 53.85627019341308]
Test Case: 620 | Input/Output: [[-1.9740411818244752 -11] -12.974041181824475]
Test Case: 621 | Input/Output: [[-52.94365679199691 -59] -111.94365679199691]
Test Case: 622 | Input/Output: [[-93.28889047083042 83] -10.288890470830424]
Test Case: 623 | Input/Output: [[-72.09570813368707 -54] -126.09570813368707]
Test Case: 624 | Input/Output: [[-23.730557603906547 100] 76.26944239609345]
Test Case: 625 | Input/Output: [[-84.33392532599713 47] -37.33392532599713]
Test Case: 626 | Input/Output: [[-7.835522147505941 73] 65.16447785249406]
Test Case: 627 | Input/Output: [[-49.23866658208389 31] -18.238666582083887]
Test Case: 628 | Input/Output: [[-35.94376560575283 -47] -82.94376560575283]
Test Case: 629 | Input/Output: [[88.49743785533803 13] 101.49743785533803]
Test Case: 630 | Input/Output: [[58.47829302959431 -24] 34.47829302959431]
Test Case: 631 | Input/Output: [[10.754848680842244 -97] -86.24515131915776]
Test Case: 632 | Input/Output: [[-39.51250600713754 46] 6.487493992862461]
Test Case: 633 | Input/Output: [[-34.01924321370389 73] 38.98075678629611]
Test Case: 634 | Input/Output: [[-79.80539508804587 -33] -112.80539508804587]
Test Case: 635 | Input/Output: [[62.8897857797773 -85] -22.1102142202227]
Test Case: 636 | Input/Output: [[22.31645952724503 -95] -72.68354047275497]
Test Case: 637 | Input/Output: [[-55.814537152550514 -89] -144.8145371525505]
Test Case: 638 | Input/Output: [[7.154679586803553 -19] -11.845320413196447]
Test Case: 639 | Input/Output: [[-90.84094646791169 84] -6.840946467911692]
Test Case: 640 | Input/Output: [[-69.84376093364368 21] -48.84376093364368]
Test Case: 641 | Input/Output: [[2.203049735259782 25] 27.203049735259782]
Test Case: 642 | Input/Output: [[57.47909122615974 -14] 43.47909122615974]
Test Case: 643 | Input/Output: [[19.37597409796807 85] 104.37597409796807]
Test Case: 644 | Input/Output: [[17.530779356625885 -9] 8.530779356625885]
Test Case: 645 | Input/Output: [[17.746234503890363 27] 44.74623450389036]
Test Case: 646 | Input/Output: [[-59.14619090362161 48] -11.146190903621608]
Test Case: 647 | Input/Output: [[-46.456808410139395 -44] -90.45680841013939]
Test Case: 648 | Input/Output: [[-34.32943445305885 -95] -129.32943445305887]
Test Case: 649 | Input/Output: [[-37.96273577376188 2] -35.96273577376188]
Test Case: 650 | Input/Output: [[84.01815300183276 81] 165.01815300183276]
Test Case: 651 | Input/Output: [[-3.357243453551945 -26] -29.357243453551945]
Test Case: 652 | Input/Output: [[95.23529933124584 -63] 32.23529933124584]
Test Case: 653 | Input/Output: [[37.180566253757576 80] 117.18056625375758]
Test Case: 654 | Input/Output: [[-56.26012552104955 -33] -89.26012552104956]
Test Case: 655 | Input/Output: [[-39.39432210850631 57] 17.60567789149369]
Test Case: 656 | Input/Output: [[53.46781100551556 12] 65.46781100551556]
Test Case: 657 | Input/Output: [[55.21259545806217 98] 153.21259545806217]
Test Case: 658 | Input/Output: [[-96.86891333721668 26] -70.86891333721668]
Test Case: 659 | Input/Output: [[70.04501757661404 85] 155.04501757661404]
Test Case: 660 | Input/Output: [[-62.21469722583856 5] -57.21469722583856]
Test Case: 661 | Input/Output: [[-97.99938683932514 45] -52.99938683932514]
Test Case: 662 | Input/Output: [[42.773330376451156 -32] 10.773330376451156]
Test Case: 663 | Input/Output: [[-43.69885236054731 61] 17.301147639452687]
Test Case: 664 | Input/Output: [[-63.10119039672919 -58] -121.10119039672918]
Test Case: 665 | Input/Output: [[-8.164486290624723 -18] -26.164486290624723]
Test Case: 666 | Input/Output: [[-33.98253655864313 -60] -93.98253655864313]
Test Case: 667 | Input/Output: [[16.88856974992933 -70] -53.11143025007067]
Test Case: 668 | Input/Output: [[-47.30124686596202 85] 37.69875313403798]
Test Case: 669 | Input/Output: [[80.77134554075053 -91] -10.22865445924947]
Test Case: 670 | Input/Output: [[38.468500623149566 97] 135.46850062314957]
Test Case: 671 | Input/Output: [[-34.59688721314775 61] 26.403112786852247]
Test Case: 672 | Input/Output: [[-16.391560315286455 7] -9.391560315286455]
Test Case: 673 | Input/Output: [[18.21199466865515 85] 103.21199466865515]
Test Case: 674 | Input/Output: [[-75.05449280036169 -2] -77.05449280036169]
Test Case: 675 | Input/Output: [[78.09981541223007 -49] 29.099815412230072]
Test Case: 676 | Input/Output: [[38.62774435779971 82] 120.62774435779971]
Test Case: 677 | Input/Output: [[78.95787718546993 -32] 46.957877185469926]
Test Case: 678 | Input/Output: [[41.50681809572876 -44] -2.493181904271239]
Test Case: 679 | Input/Output: [[-50.98812550488021 -11] -61.98812550488021]
Test Case: 680 | Input/Output: [[-95.84845006507012 62] -33.848450065070125]
Test Case: 681 | Input/Output: [[-62.856357483511324 -49] -111.85635748351132]
Test Case: 682 | Input/Output: [[-75.70198558335828 -73] -148.7019855833583]
Test Case: 683 | Input/Output: [[16.951926180052496 -83] -66.0480738199475]
Test Case: 684 | Input/Output: [[69.8695571240786 32] 101.8695571240786]
Test Case: 685 | Input/Output: [[-73.14489368708432 -81] -154.14489368708433]
Test Case: 686 | Input/Output: [[67.553562329883 65] 132.553562329883]
Test Case: 687 | Input/Output: [[73.75533031608305 -26] 47.75533031608305]
Test Case: 688 | Input/Output: [[-62.41744601711976 -69] -131.41744601711974]
Test Case: 689 | Input/Output: [[-66.47844219561219 -86] -152.4784421956122]
Test Case: 690 | Input/Output: [[-43.929074410413584 27] -16.929074410413584]
Test Case: 691 | Input/Output: [[-21.070981283631895 -52] -73.0709812836319]
Test Case: 692 | Input/Output: [[83.36286336976204 8] 91.36286336976204]
Test Case: 693 | Input/Output: [[38.164918891803694 75] 113.1649188918037]
Test Case: 694 | Input/Output: [[-55.98849027346154 8] -47.98849027346154]
Test Case: 695 | Input/Output: [[-11.713925028864324 -16] -27.713925028864324]
Test Case: 696 | Input/Output: [[-77.78153213237448 67] -10.78153213237448]
Test Case: 697 | Input/Output: [[-43.050716715656634 -37] -80.05071671565663]
Test Case: 698 | Input/Output: [[99.06496431996212 -58] 41.064964319962115]
Test Case: 699 | Input/Output: [[61.82508563337831 77] 138.8250856333783]
Test Case: 700 | Input/Output: [[-63.42468547689102 41] -22.42468547689102]
Test Case: 701 | Input/Output: [[20.408362127451298 -13] 7.408362127451298]
Test Case: 702 | Input/Output: [[-67.7247659322193 -39] -106.7247659322193]
Test Case: 703 | Input/Output: [[94.16099785463791 -30] 64.16099785463791]
Test Case: 704 | Input/Output: [[-72.09466420878248 43] -29.094664208782476]
Test Case: 705 | Input/Output: [[-9.200151897568972 -30] -39.20015189756897]
Test Case: 706 | Input/Output: [[51.9589763882926 61] 112.9589763882926]
Test Case: 707 | Input/Output: [[25.52516856754194 -96] -70.47483143245806]
Test Case: 708 | Input/Output: [[-92.4539606198414 92] -0.45396061984139635]
Test Case: 709 | Input/Output: [[24.07442099090686 -37] -12.925579009093141]
Test Case: 710 | Input/Output: [[19.56347844149957 -36] -16.43652155850043]
Test Case: 711 | Input/Output: [[48.80691947554857 -66] -17.19308052445143]
Test Case: 712 | Input/Output: [[48.01894479479722 -53] -4.981055205202779]
Test Case: 713 | Input/Output: [[1.3986179972243633 80] 81.39861799722436]
Test Case: 714 | Input/Output: [[-7.598570512193021 75] 67.40142948780698]
Test Case: 715 | Input/Output: [[27.42996182631414 -74] -46.57003817368586]
Test Case: 716 | Input/Output: [[82.99806479335362 -14] 68.99806479335362]
Test Case: 717 | Input/Output: [[-53.37337817550121 6] -47.37337817550121]
Test Case: 718 | Input/Output: [[42.653860602586434 -96] -53.346139397413566]
Test Case: 719 | Input/Output: [[17.10539903992718 29] 46.10539903992718]
Test Case: 720 | Input/Output: [[33.83386658487609 100] 133.8338665848761]
Test Case: 721 | Input/Output: [[13.849537339075852 60] 73.84953733907585]
Test Case: 722 | Input/Output: [[-17.251914411526542 -72] -89.25191441152654]
Test Case: 723 | Input/Output: [[-74.53413019192747 -37] -111.53413019192747]
Test Case: 724 | Input/Output: [[-98.37583373565475 -25] -123.37583373565475]
Test Case: 725 | Input/Output: [[80.90640089121888 89] 169.90640089121888]
Test Case: 726 | Input/Output: [[27.717432713402587 10] 37.71743271340259]
Test Case: 727 | Input/Output: [[59.41544977238556 -16] 43.41544977238556]
Test Case: 728 | Input/Output: [[-3.500064646903226 94] 90.49993535309677]
Test Case: 729 | Input/Output: [[62.88245962596281 -28] 34.88245962596281]
Test Case: 730 | Input/Output: [[-97.49752472493087 -61] -158.49752472493088]
Test Case: 731 | Input/Output: [[50.828741759231974 79] 129.82874175923197]
Test Case: 732 | Input/Output: [[34.759675042963835 -36] -1.2403249570361652]
Test Case: 733 | Input/Output: [[-18.661031458006377 1] -17.661031458006377]
Test Case: 734 | Input/Output: [[-88.7569608414579 88] -0.7569608414578965]
Test Case: 735 | Input/Output: [[72.33522996087555 -9] 63.33522996087555]
Test Case: 736 | Input/Output: [[-60.551766933639264 58] -2.5517669336392643]
Test Case: 737 | Input/Output: [[52.65357165695309 -96] -43.34642834304691]
Test Case: 738 | Input/Output: [[-68.93229574103677 2] -66.93229574103677]
Test Case: 739 | Input/Output: [[-98.72565406756999 -56] -154.72565406757]
Test Case: 740 | Input/Output: [[94.60001951960086 64] 158.60001951960086]
Test Case: 741 | Input/Output: [[-14.834904583917208 29] 14.165095416082792]
Test Case: 742 | Input/Output: [[-13.577843941502138 16] 2.422156058497862]
Test Case: 743 | Input/Output: [[-38.55631887847994 39] 0.4436811215200578]
Test Case: 744 | Input/Output: [[11.267318498393635 -55] -43.732681501606365]
Test Case: 745 | Input/Output: [[55.25921555986133 -57] -1.7407844401386683]
Test Case: 746 | Input/Output: [[-17.07712723902901 -21] -38.07712723902901]
Test Case: 747 | Input/Output: [[82.55707737893508 4] 86.55707737893508]
Test Case: 748 | Input/Output: [[-55.993753927732584 63] 7.006246072267416]
Test Case: 749 | Input/Output: [[-72.66722129388026 36] -36.66722129388026]
Test Case: 750 | Input/Output: [[9.451892090156207 46] 55.45189209015621]
Test Case: 751 | Input/Output: [[-26.041596210275728 -47] -73.04159621027573]
Test Case: 752 | Input/Output: [[52.32481287947442 96] 148.32481287947442]
Test Case: 753 | Input/Output: [[-6.465398975437935 56] 49.534601024562065]
Test Case: 754 | Input/Output: [[-15.619478691225169 21] 5.380521308774831]
Test Case: 755 | Input/Output: [[71.85009322269678 97] 168.85009322269678]
Test Case: 756 | Input/Output: [[-76.46928746840393 -45] -121.46928746840393]
Test Case: 757 | Input/Output: [[99.49752525260061 75] 174.4975252526006]
Test Case: 758 | Input/Output: [[3.9809078182522484 8] 11.980907818252248]
Test Case: 759 | Input/Output: [[89.54903976991909 -55] 34.54903976991909]
Test Case: 760 | Input/Output: [[7.732596972752589 -39] -31.26740302724741]
Test Case: 761 | Input/Output: [[-57.42410726885978 -65] -122.42410726885979]
Test Case: 762 | Input/Output: [[90.02221384843679 65] 155.0222138484368]
Test Case: 763 | Input/Output: [[61.80704137309186 95] 156.80704137309186]
Test Case: 764 | Input/Output: [[-91.30938391676116 -53] -144.30938391676116]
Test Case: 765 | Input/Output: [[88.87324588040764 -65] 23.873245880407637]
Test Case: 766 | Input/Output: [[34.6450827307759 -51] -16.354917269224103]
Test Case: 767 | Input/Output: [[-10.272793909614421 74] 63.72720609038558]
Test Case: 768 | Input/Output: [[85.82221462547662 34] 119.82221462547662]
Test Case: 769 | Input/Output: [[-72.96386264369849 41] -31.96386264369849]
Test Case: 770 | Input/Output: [[17.82812236319826 -41] -23.17187763680174]
Test Case: 771 | Input/Output: [[-38.514415686035534 -17] -55.514415686035534]
Test Case: 772 | Input/Output: [[41.2113109678086 -20] 21.2113109678086]
Test Case: 773 | Input/Output: [[88.89035009945104 -69] 19.89035009945104]
Test Case: 774 | Input/Output: [[-34.79818557995395 -91] -125.79818557995395]
Test Case: 775 | Input/Output: [[37.55307074329474 -51] -13.44692925670526]
Test Case: 776 | Input/Output: [[-49.62560354676144 -50] -99.62560354676144]
Test Case: 777 | Input/Output: [[-58.62975134433193 97] 38.37024865566807]
Test Case: 778 | Input/Output: [[-45.95799912118348 -81] -126.95799912118348]
Test Case: 779 | Input/Output: [[34.23661774196697 -59] -24.763382258033033]
Test Case: 780 | Input/Output: [[-13.700811919462225 92] 78.29918808053777]
Test Case: 781 | Input/Output: [[-28.317556677650742 -56] -84.31755667765074]
Test Case: 782 | Input/Output: [[-94.2510279613361 2] -92.2510279613361]
Test Case: 783 | Input/Output: [[80.86497704993633 10] 90.86497704993633]
Test Case: 784 | Input/Output: [[2.2102605579141397 -60] -57.78973944208586]
Test Case: 785 | Input/Output: [[22.349870493313915 0] 22.349870493313915]
Test Case: 786 | Input/Output: [[69.31405520035193 28] 97.31405520035193]
Test Case: 787 | Input/Output: [[35.38905279781636 -82] -46.61094720218364]
Test Case: 788 | Input/Output: [[-29.293128712537737 -10] -39.29312871253774]
Test Case: 789 | Input/Output: [[53.62502835948456 9] 62.62502835948456]
Test Case: 790 | Input/Output: [[-1.8479308395630767 90] 88.15206916043692]
Test Case: 791 | Input/Output: [[-67.55346270940225 -85] -152.55346270940225]
Test Case: 792 | Input/Output: [[35.417025136582 -64] -28.582974863418002]
Test Case: 793 | Input/Output: [[-63.52813963816759 14] -49.52813963816759]
Test Case: 794 | Input/Output: [[-24.018148532938156 -50] -74.01814853293816]
Test Case: 795 | Input/Output: [[-87.98955082375102 -18] -105.98955082375102]
Test Case: 796 | Input/Output: [[-70.25447019706503 52] -18.254470197065032]
Test Case: 797 | Input/Output: [[-82.27594612288738 68] -14.275946122887376]
Test Case: 798 | Input/Output: [[-48.91370507577963 -81] -129.91370507577963]
Test Case: 799 | Input/Output: [[-28.6640158495415 99] 70.3359841504585]
Test Case: 800 | Input/Output: [[1.645550216301217 84] 85.64555021630122]
Test Case: 801 | Input/Output: [[53.439999371552375 72] 125.43999937155237]
Test Case: 802 | Input/Output: [[51.012401294384716 -11] 40.012401294384716]
Test Case: 803 | Input/Output: [[39.04895598322099 8] 47.04895598322099]
Test Case: 804 | Input/Output: [[41.28395616514368 -21] 20.283956165143678]
Test Case: 805 | Input/Output: [[56.40588512809464 16] 72.40588512809464]
Test Case: 806 | Input/Output: [[94.70367948540937 7] 101.70367948540937]
Test Case: 807 | Input/Output: [[-65.64188751382338 12] -53.64188751382338]
Test Case: 808 | Input/Output: [[6.704106156839188 61] 67.70410615683919]
Test Case: 809 | Input/Output: [[-20.63143514925669 96] 75.36856485074331]
Test Case: 810 | Input/Output: [[-53.13534218279281 76] 22.86465781720719]
Test Case: 811 | Input/Output: [[70.0707414797387 -3] 67.0707414797387]
Test Case: 812 | Input/Output: [[16.111873202769218 -76] -59.88812679723078]
Test Case: 813 | Input/Output: [[-95.40269066554224 -30] -125.40269066554224]
Test Case: 814 | Input/Output: [[29.013945658568645 46] 75.01394565856864]
Test Case: 815 | Input/Output: [[-47.46358975880496 -89] -136.46358975880497]
Test Case: 816 | Input/Output: [[-1.3614677764480376 -9] -10.361467776448038]
Test Case: 817 | Input/Output: [[-37.62786798524673 -3] -40.62786798524673]
Test Case: 818 | Input/Output: [[29.186144933658824 -10] 19.186144933658824]
Test Case: 819 | Input/Output: [[-23.388891855311385 52] 28.611108144688615]
Test Case: 820 | Input/Output: [[27.77076922489539 -20] 7.770769224895389]
Test Case: 821 | Input/Output: [[-40.52755014033569 0] -40.52755014033569]
Test Case: 822 | Input/Output: [[-1.3536195517319811 34] 32.64638044826802]
Test Case: 823 | Input/Output: [[-64.04518655938739 98] 33.95481344061261]
Test Case: 824 | Input/Output: [[70.47458441401102 73] 143.47458441401102]
Test Case: 825 | Input/Output: [[27.621300402427366 100] 127.62130040242737]
Test Case: 826 | Input/Output: [[52.63470266061094 82] 134.63470266061094]
Test Case: 827 | Input/Output: [[62.59756436827445 3] 65.59756436827445]
Test Case: 828 | Input/Output: [[-64.47396178971675 60] -4.473961789716753]
Test Case: 829 | Input/Output: [[-56.29062002102208 -29] -85.29062002102208]
Test Case: 830 | Input/Output: [[-90.54828715202976 42] -48.54828715202976]
Test Case: 831 | Input/Output: [[-93.32884871777571 -27] -120.32884871777571]
Test Case: 832 | Input/Output: [[91.43289033558636 -74] 17.432890335586364]
Test Case: 833 | Input/Output: [[70.70283375425001 44] 114.70283375425001]
Test Case: 834 | Input/Output: [[19.27164780588184 -91] -71.72835219411816]
Test Case: 835 | Input/Output: [[-34.17554887926909 -67] -101.17554887926909]
Test Case: 836 | Input/Output: [[22.877811269633156 -41] -18.122188730366844]
Test Case: 837 | Input/Output: [[61.2555339501192 -56] 5.255533950119201]
Test Case: 838 | Input/Output: [[-23.44121342813881 -24] -47.44121342813881]
Test Case: 839 | Input/Output: [[8.686227418888961 -91] -82.31377258111104]
Test Case: 840 | Input/Output: [[32.86165944049819 -63] -30.138340559501813]
Test Case: 841 | Input/Output: [[31.18201608377231 32] 63.18201608377231]
Test Case: 842 | Input/Output: [[-87.53350131328989 -13] -100.53350131328989]
Test Case: 843 | Input/Output: [[-56.55658869481308 -80] -136.5565886948131]
Test Case: 844 | Input/Output: [[4.406152037311827 69] 73.40615203731183]
Test Case: 845 | Input/Output: [[-17.339669204513555 -54] -71.33966920451356]
Test Case: 846 | Input/Output: [[-38.30244212366085 8] -30.302442123660853]
Test Case: 847 | Input/Output: [[44.91158342001472 88] 132.91158342001472]
Test Case: 848 | Input/Output: [[-18.26296403986676 -58] -76.26296403986676]
Test Case: 849 | Input/Output: [[70.92956847162856 -68] 2.9295684716285564]
Test Case: 850 | Input/Output: [[-47.3024508917059 -79] -126.3024508917059]
Test Case: 851 | Input/Output: [[27.0128402520575 69] 96.0128402520575]
Test Case: 852 | Input/Output: [[-28.04105287075926 -72] -100.04105287075926]
Test Case: 853 | Input/Output: [[-77.85627311399001 -77] -154.85627311399003]
Test Case: 854 | Input/Output: [[-27.578452871732154 -96] -123.57845287173215]
Test Case: 855 | Input/Output: [[-67.46917476490017 -2] -69.46917476490017]
Test Case: 856 | Input/Output: [[-12.89010819721419 -64] -76.89010819721419]
Test Case: 857 | Input/Output: [[53.98150566715967 6] 59.98150566715967]
Test Case: 858 | Input/Output: [[-74.40795827571465 -39] -113.40795827571465]
Test Case: 859 | Input/Output: [[-12.391247046741015 10] -2.3912470467410145]
Test Case: 860 | Input/Output: [[99.97229004981324 60] 159.97229004981324]
Test Case: 861 | Input/Output: [[-74.08870623244106 80] 5.911293767558945]
Test Case: 862 | Input/Output: [[-98.00379204249214 -53] -151.00379204249214]
Test Case: 863 | Input/Output: [[-72.21937709386366 0] -72.21937709386366]
Test Case: 864 | Input/Output: [[30.08408556981354 -6] 24.08408556981354]
Test Case: 865 | Input/Output: [[12.346307379825632 13] 25.34630737982563]
Test Case: 866 | Input/Output: [[-99.19729908522754 -39] -138.19729908522754]
Test Case: 867 | Input/Output: [[0.994472609303827 43] 43.99447260930383]
Test Case: 868 | Input/Output: [[-57.63547349920124 99] 41.36452650079876]
Test Case: 869 | Input/Output: [[-86.38597378372933 31] -55.38597378372933]
Test Case: 870 | Input/Output: [[-20.493570001311582 -70] -90.49357000131158]
Test Case: 871 | Input/Output: [[-49.74663836119304 -27] -76.74663836119305]
Test Case: 872 | Input/Output: [[-14.148147736628673 -37] -51.14814773662867]
Test Case: 873 | Input/Output: [[-10.874557959797087 -92] -102.87455795979709]
Test Case: 874 | Input/Output: [[70.81598695752143 -55] 15.815986957521432]
Test Case: 875 | Input/Output: [[-92.6429152905768 62] -30.642915290576795]
Test Case: 876 | Input/Output: [[-18.15370308151398 -64] -82.15370308151398]
Test Case: 877 | Input/Output: [[-60.91840282102847 -20] -80.91840282102848]
Test Case: 878 | Input/Output: [[-31.45143639547119 17] -14.451436395471191]
Test Case: 879 | Input/Output: [[28.981769190957948 -4] 24.981769190957948]
Test Case: 880 | Input/Output: [[-68.62490377907147 5] -63.624903779071474]
Test Case: 881 | Input/Output: [[-7.565734701969063 71] 63.43426529803094]
Test Case: 882 | Input/Output: [[46.63540060578603 -63] -16.36459939421397]
Test Case: 883 | Input/Output: [[-39.7841315551424 32] -7.784131555142402]
Test Case: 884 | Input/Output: [[-98.66746953815742 -79] -177.66746953815743]
Test Case: 885 | Input/Output: [[48.953318265004896 -6] 42.953318265004896]
Test Case: 886 | Input/Output: [[-23.611380157565492 -22] -45.61138015756549]
Test Case: 887 | Input/Output: [[-87.64104275480926 59] -28.641042754809263]
Test Case: 888 | Input/Output: [[43.78092867945216 74] 117.78092867945216]
Test Case: 889 | Input/Output: [[-35.938169778481964 -71] -106.93816977848196]
Test Case: 890 | Input/Output: [[83.53163476392288 -47] 36.53163476392288]
Test Case: 891 | Input/Output: [[7.322915916309938 38] 45.32291591630994]
Test Case: 892 | Input/Output: [[-74.09558710277078 -63] -137.09558710277076]
Test Case: 893 | Input/Output: [[6.328652415295679 46] 52.32865241529568]
Test Case: 894 | Input/Output: [[-14.895163151992975 -58] -72.89516315199297]
Test Case: 895 | Input/Output: [[-10.65655258227413 -22] -32.65655258227413]
Test Case: 896 | Input/Output: [[-24.381251462444766 -61] -85.38125146244477]
Test Case: 897 | Input/Output: [[81.13133453325801 76] 157.131334533258]
Test Case: 898 | Input/Output: [[-53.09693784539924 25] -28.09693784539924]
Test Case: 899 | Input/Output: [[-43.68077624120721 16] -27.680776241207212]
Test Case: 900 | Input/Output: [[-43.29547733920167 -36] -79.29547733920167]
Test Case: 901 | Input/Output: [[76.15356451724145 49] 125.15356451724145]
Test Case: 902 | Input/Output: [[69.17839852033953 11] 80.17839852033953]
Test Case: 903 | Input/Output: [[85.67384135114509 30] 115.67384135114509]
Test Case: 904 | Input/Output: [[-11.968715822656534 57] 45.031284177343466]
Test Case: 905 | Input/Output: [[4.211102674492167 -40] -35.78889732550783]
Test Case: 906 | Input/Output: [[-23.16429733611089 -18] -41.16429733611089]
Test Case: 907 | Input/Output: [[-37.32680589184027 32] -5.326805891840273]
Test Case: 908 | Input/Output: [[82.15694046242092 66] 148.15694046242092]
Test Case: 909 | Input/Output: [[-74.52744647591527 34] -40.52744647591527]
Test Case: 910 | Input/Output: [[-81.53754406095246 96] 14.462455939047544]
Test Case: 911 | Input/Output: [[-86.21129174737798 -100] -186.21129174737797]
Test Case: 912 | Input/Output: [[-56.45751568869171 97] 40.54248431130829]
Test Case: 913 | Input/Output: [[60.712166927290525 -28] 32.712166927290525]
Test Case: 914 | Input/Output: [[40.713232397706406 92] 132.7132323977064]
Test Case: 915 | Input/Output: [[48.91234970950279 96] 144.9123497095028]
Test Case: 916 | Input/Output: [[-97.69016401040092 23] -74.69016401040092]
Test Case: 917 | Input/Output: [[24.084645425477504 -99] -74.9153545745225]
Test Case: 918 | Input/Output: [[-75.20013489917929 -49] -124.20013489917929]
Test Case: 919 | Input/Output: [[55.32903803771114 97] 152.32903803771114]
Test Case: 920 | Input/Output: [[8.196745928739219 32] 40.19674592873922]
Test Case: 921 | Input/Output: [[42.41531703167604 -90] -47.58468296832396]
Test Case: 922 | Input/Output: [[39.8112728669 -83] -43.1887271331]
Test Case: 923 | Input/Output: [[-78.56550105166751 91] 12.43449894833249]
Test Case: 924 | Input/Output: [[-81.26355525564131 -91] -172.2635552556413]
Test Case: 925 | Input/Output: [[72.10178050553534 50] 122.10178050553534]
Test Case: 926 | Input/Output: [[75.81579953300837 -62] 13.815799533008374]
Test Case: 927 | Input/Output: [[-21.076817482539596 -75] -96.0768174825396]
Test Case: 928 | Input/Output: [[17.955395981876833 13] 30.955395981876833]
Test Case: 929 | Input/Output: [[-75.56572722485899 -70] -145.565727224859]
Test Case: 930 | Input/Output: [[48.68176031688256 57] 105.68176031688256]
Test Case: 931 | Input/Output: [[-39.26271157264847 34] -5.26271157264847]
Test Case: 932 | Input/Output: [[37.070507485841716 -96] -58.929492514158284]
Test Case: 933 | Input/Output: [[-17.4974592881221 72] 54.5025407118779]
Test Case: 934 | Input/Output: [[56.38914120386755 93] 149.38914120386755]
Test Case: 935 | Input/Output: [[80.0750978899487 73] 153.0750978899487]
Test Case: 936 | Input/Output: [[18.447728900112054 -39] -20.552271099887946]
Test Case: 937 | Input/Output: [[51.73614629999594 8] 59.73614629999594]
Test Case: 938 | Input/Output: [[62.894792409560296 23] 85.8947924095603]
Test Case: 939 | Input/Output: [[61.64602249714966 -49] 12.646022497149659]
Test Case: 940 | Input/Output: [[3.8491001790551564 38] 41.849100179055156]
Test Case: 941 | Input/Output: [[18.20356020483524 -9] 9.203560204835242]
Test Case: 942 | Input/Output: [[-27.26649165780826 -27] -54.26649165780826]
Test Case: 943 | Input/Output: [[-97.50058432136998 -72] -169.50058432136998]
Test Case: 944 | Input/Output: [[75.5062118438104 34] 109.5062118438104]
Test Case: 945 | Input/Output: [[-75.98051205804923 -56] -131.98051205804921]
Test Case: 946 | Input/Output: [[64.24243201939328 2] 66.24243201939328]
Test Case: 947 | Input/Output: [[78.09534584350291 13] 91.09534584350291]
Test Case: 948 | Input/Output: [[71.4222852882412 15] 86.4222852882412]
Test Case: 949 | Input/Output: [[55.61920110100681 13] 68.61920110100681]
Test Case: 950 | Input/Output: [[-87.15347905689734 -20] -107.15347905689734]
Test Case: 951 | Input/Output: [[80.16439008884888 -96] -15.835609911151124]
Test Case: 952 | Input/Output: [[-84.23370813416808 66] -18.233708134168083]
Test Case: 953 | Input/Output: [[-63.90818246497423 21] -42.90818246497423]
Test Case: 954 | Input/Output: [[-64.61976026133651 35] -29.61976026133651]
Test Case: 955 | Input/Output: [[65.71228010404786 35] 100.71228010404786]
Test Case: 956 | Input/Output: [[-17.1570312527614 -14] -31.1570312527614]
Test Case: 957 | Input/Output: [[23.176661671843576 -60] -36.823338328156424]
Test Case: 958 | Input/Output: [[-5.344365745940436 7] 1.6556342540595637]
Test Case: 959 | Input/Output: [[-90.34355557676592 -98] -188.34355557676594]
Test Case: 960 | Input/Output: [[86.54010724973986 51] 137.54010724973986]
Test Case: 961 | Input/Output: [[26.9564523820153 4] 30.9564523820153]
Test Case: 962 | Input/Output: [[-8.807642051136668 -34] -42.80764205113667]
Test Case: 963 | Input/Output: [[29.560981912999495 -59] -29.439018087000505]
Test Case: 964 | Input/Output: [[-27.65131371160436 57] 29.34868628839564]
Test Case: 965 | Input/Output: [[49.01258956304338 -37] 12.012589563043377]
Test Case: 966 | Input/Output: [[69.91234587049752 85] 154.91234587049752]
Test Case: 967 | Input/Output: [[-97.81318628519327 -66] -163.81318628519327]
Test Case: 968 | Input/Output: [[67.29232958611354 49] 116.29232958611354]
Test Case: 969 | Input/Output: [[-71.58292539071846 26] -45.58292539071846]
Test Case: 970 | Input/Output: [[95.37003908100601 98] 193.370039081006]
Test Case: 971 | Input/Output: [[31.270478342194764 44] 75.27047834219476]
Test Case: 972 | Input/Output: [[-90.32921117503598 44] -46.32921117503598]
Test Case: 973 | Input/Output: [[55.22157233159476 98] 153.22157233159476]
Test Case: 974 | Input/Output: [[-41.95778053580448 49] 7.042219464195519]
Test Case: 975 | Input/Output: [[-9.1962196350226 79] 69.8037803649774]
Test Case: 976 | Input/Output: [[-43.241163955478676 7] -36.241163955478676]
Test Case: 977 | Input/Output: [[73.6135666466082 53] 126.6135666466082]
Test Case: 978 | Input/Output: [[90.16829731434771 53] 143.1682973143477]
Test Case: 979 | Input/Output: [[-29.321975049084585 -95] -124.32197504908459]
Test Case: 980 | Input/Output: [[-49.54785069909913 -18] -67.54785069909913]
Test Case: 981 | Input/Output: [[78.36081427120399 59] 137.360814271204]
Test Case: 982 | Input/Output: [[84.30007386470825 -91] -6.699926135291747]
Test Case: 983 | Input/Output: [[-70.25273309314737 34] -36.25273309314737]
Test Case: 984 | Input/Output: [[-48.374609515611965 -83] -131.37460951561195]
Test Case: 985 | Input/Output: [[14.288288374973732 26] 40.28828837497373]
Test Case: 986 | Input/Output: [[11.411507556941018 -15] -3.588492443058982]
Test Case: 987 | Input/Output: [[20.48819562091768 -48] -27.51180437908232]
Test Case: 988 | Input/Output: [[89.48589931800663 -1] 88.48589931800663]
Test Case: 989 | Input/Output: [[5.112153836841117 29] 34.11215383684112]
Test Case: 990 | Input/Output: [[-56.78093533556186 -32] -88.78093533556185]
Test Case: 991 | Input/Output: [[58.937454664853306 -88] -29.062545335146694]
Test Case: 992 | Input/Output: [[-16.386248131004578 -59] -75.38624813100458]
Test Case: 993 | Input/Output: [[27.974423228520322 64] 91.97442322852032]
Test Case: 994 | Input/Output: [[-46.68149567046625 4] -42.68149567046625]
Test Case: 995 | Input/Output: [[43.25113669665075 -48] -4.748863303349253]
Test Case: 996 | Input/Output: [[-36.31674762272841 60] 23.683252377271593]
Test Case: 997 | Input/Output: [[-12.545325148683787 -46] -58.54532514868379]
Test Case: 998 | Input/Output: [[-75.2746606504828 -94] -169.27466065048282]
Test Case: 999 | Input/Output: [[4.811888243208202 84] 88.8118882432082]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -90 -12 86 -55 85 83 95 -17 66 53 -68 -86 -101 54 43 -97
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_pop} {:instruction float_mod} {:instruction in2} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_sin} {:instruction in1} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_sub} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_flush} {:instruction -95.45015041057128} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction integer_sub} {:instruction float_pop} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction float_sin} {:instruction integer_max} {:instruction -77} {:instruction print_float} {:instruction float_mult} {:instruction float_yankdup} {:instruction float_mult} {:instruction integer_add} {:instruction float_div} {:instruction float_min} {:instruction in2} {:instruction integer_min} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_dec} {:instruction float_mult} {:instruction integer_dup_times})
Best program: (integer_flush integer_pop float_mod in2 integer_yank integer_flush integer_dup_times float_dec float_sin in1 float_mod integer_yankdup print_float float_shove integer_yankdup integer_max integer_yankdup float_sub float_max integer_fromfloat integer_dup float_flush -95.45015041057128 float_flush integer_stackdepth in2 float_max float_rot integer_sub float_pop float_swap integer_stackdepth integer_dup float_sin integer_max -77 print_float float_mult float_yankdup float_mult integer_add float_div float_min in2 integer_min integer_dec float_frominteger integer_dec float_mult integer_dup_times)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 18248.6958772
Median total errors in population: 25339.0
Error averages by case: (729.0947657 13.482 735.7660151999985 14.212 713.5029427 13.287 711.7484902999983 12.637 707.2210772000004 12.363 729.5517809999989 14.14 724.1866657000016 13.423 713.5260106000014 13.748 713.7073600999992 13.774 706.2972998000002 13.183 702.988283599998 11.051 715.0625562000013 13.351 705.5182905000008 13.119 731.1884032999985 14.343 713.1675947000006 13.42 718.5056458999987 13.444 724.5534618000023 13.349 711.083743500001 13.189 709.3096168999997 12.663 719.3540231999996 13.266 712.2133896000008 12.232 708.824821899999 12.54 731.2914106000032 13.212 713.5118606 13.254 717.4943665999999 13.344)
Error minima by case: (19.0572 3 15.8414 3 3.4227 7 0.8529 2 1.3044 8 12.0525 2 0.5494 2 0.0128 8 3.113 8 6.531 1 1.2665 2 1.1762 1 1.6323 8 13.2141 3 0.3 8 2.1614 2 3.9013 2 0.226 8 1.4862 2 2.4603 2 0.3569 8 1.1952 2 20.7837 1 0.0545 2 0.4674 2)
Average genome size in population (length): 49.565
Average program size in population (points): 50.565
Average percent parens in population: 0.043
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.307
Error (vector) diversity:			 0.338
Behavioral diversity:				 0.355
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1242860
--- Timings ---
Current time: 1529616000133 milliseconds
Total Time:           4.0 seconds
Initialization:       0.1 seconds,  2.8%
Reproduction:         0.6 seconds, 14.6%
Fitness Testing:      3.3 seconds, 82.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -94.4667813498151} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_add} {:instruction integer_min} {:instruction print_integer} {:instruction integer_add} {:instruction integer_swap} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction in2} {:instruction integer_dup} {:instruction float_inc} {:instruction float_max} {:instruction integer_dec} {:instruction in1} {:instruction integer_mult} {:instruction float_swap} {:instruction float_flush} {:instruction integer_div} {:instruction integer_yank} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_shove} {:instruction float_flush} {:instruction integer_yankdup} {:instruction in1} {:instruction float_shove} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction print_float} {:instruction 62.755239964281316} {:instruction float_yank} {:instruction integer_dup_items} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_yank} {:instruction in1} {:instruction float_yank} {:instruction integer_swap} {:instruction integer_max} {:instruction float_tan} {:instruction tag_integer_556} {:instruction integer_flush} {:instruction -36} {:instruction integer_fromfloat} {:instruction float_flush} {:instruction 99.4169116268346} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_max} {:instruction integer_div} {:instruction integer_yank} {:instruction float_yank})
Best program: (-94.4667813498151 float_dup_times integer_stackdepth integer_sub integer_dup_items integer_add integer_min print_integer integer_add integer_swap float_yank integer_dup_times integer_stackdepth float_rot in2 integer_dup float_inc float_max integer_dec in1 integer_mult float_swap float_flush integer_div integer_yank float_frominteger integer_stackdepth in1 float_shove float_flush integer_yankdup in1 float_shove float_stackdepth integer_rot integer_dup_items integer_flush print_float 62.755239964281316 float_yank integer_dup_items integer_rot float_yankdup float_yank in1 float_yank integer_swap integer_max float_tan tag_integer_556 integer_flush -36 integer_fromfloat float_flush 99.4169116268346 float_dup_items float_sub float_yankdup integer_dup_items integer_max integer_div integer_yank float_yank)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 6587.5769353999885
Median total errors in population: 1637.9070999999997
Error averages by case: (279.90716580000037 11.41 300.81977210000207 11.87 244.7968896999995 12.356 241.8384395000001 10.587 224.5986454999996 11.374 285.2220896999985 11.661 270.98680080000196 11.186 246.45798049999974 12.422 250.6631291000004 12.448 228.27043799999805 10.641 215.0709235000008 9.317 248.74754039999866 11.008 224.5123104999998 11.99 290.55290470000097 12.129 243.66239249999902 12.58 253.43762520000163 11.21 267.88620759999907 11.04 237.2269025999993 12.163 237.63355309999844 10.582 261.8357392999986 10.819 238.98174109999866 11.05 235.47024219999798 10.319 284.3159069000011 10.728 241.62960159999994 10.855 250.34399349999916 10.963)
Error minima by case: (19.3065 3 15.8414 3 0.1194 7 0.7843 2 1.3044 8 12.0525 2 0.5494 2 0.0128 8 3.113 8 6.531 1 1.2665 2 1.1762 1 1.6323 8 13.2141 3 0.3 8 2.1614 2 4.1506 2 0.226 8 1.4862 2 3.5397 2 0.3569 8 1.1952 2 20.7837 1 0.0545 2 0.9346 2)
Average genome size in population (length): 57.778
Average program size in population (points): 58.778
Average percent parens in population: 0.024
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.485
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.282
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.328
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2690935
--- Timings ---
Current time: 1529616004428 milliseconds
Total Time:           8.5 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         2.8 seconds, 32.7%
Fitness Testing:      5.0 seconds, 58.9%
Report:               0.6 seconds,  7.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_add} {:instruction in1} {:instruction print_float} {:instruction float_sub} {:instruction integer_div} {:instruction -26.898215538369} {:instruction integer_dup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_yank} {:instruction -74.24324421711638} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_sub} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_yank} {:instruction float_pop} {:instruction float_sub} {:instruction integer_flush} {:instruction -83} {:instruction float_mult} {:instruction integer_rot} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_dup} {:instruction integer_dup} {:instruction float_tan} {:instruction float_mod} {:instruction integer_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_max} {:instruction integer_add} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_flush} {:instruction float_mod} {:instruction integer_mult} {:instruction 94.45250336943232} {:instruction float_dup_times} {:instruction print_integer} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_sub} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_mod} {:instruction integer_swap} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dup_items})
Best program: (integer_flush integer_add in1 print_float float_sub integer_div -26.898215538369 integer_dup integer_div float_flush integer_sub print_integer integer_yank -74.24324421711638 integer_shove integer_inc float_sub float_dup_items print_integer integer_yank float_pop float_sub integer_flush -83 float_mult integer_rot float_dec float_yankdup integer_dec float_dup integer_dup float_tan float_mod integer_dec float_div float_rot integer_swap float_dup integer_max integer_add float_dup_items float_rot integer_flush float_mod integer_mult 94.45250336943232 float_dup_times print_integer integer_rot float_frominteger integer_swap integer_yankdup integer_yank integer_rot integer_sub float_sub integer_mult integer_rot float_yankdup float_mod integer_swap integer_div float_dup_items float_dup_items)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 4927.793826000005
Median total errors in population: 1476.0
Error averages by case: (212.0226966000006 7.56 220.0185951000009 7.726 194.40053810000046 12.554 176.9947834000001 6.693 173.08655670000056 11.478 189.35176119999966 7.326 183.64993900000056 6.952 193.74814150000032 11.906 215.52013289999954 12.006 155.9881214999994 6.242 150.01482250000038 6.13 204.41798749999924 6.512 161.99592290000024 11.569 209.62858880000076 7.97 203.70147240000037 12.629 181.22230180000048 7.091 194.90554489999974 7.012 198.5791973000005 11.976 176.52770179999916 6.704 180.56149509999923 6.703 188.7883190000005 10.885 166.27254289999937 6.535 217.57665419999987 6.245 185.8410372 6.88 180.80797169999983 6.887)
Error minima by case: (8.0 3 34.8825 3 2.3762 9 3.2157 2 2.5773 7 26.91 2 3.863 2 14.6926 8 3.113 9 7.0974 1 0.2665 2 2.077 1 1.6323 8 28.2141 3 2.7 9 22.8386 2 33.6987 2 8.7435 8 1.1301 2 14.4603 2 2.7197 8 0.1487 2 0.0 1 11.7557 2 25.815 2)
Average genome size in population (length): 51.92
Average program size in population (points): 52.92
Average percent parens in population: 0.024
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9735
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.134
Error (vector) diversity:			 0.143
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3991210
--- Timings ---
Current time: 1529616008145 milliseconds
Total Time:          12.1 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.4 seconds, 36.3%
Fitness Testing:      6.5 seconds, 53.9%
Report:               1.1 seconds,  8.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_min} {:instruction float_min} {:instruction integer_dup} {:instruction float_frominteger} {:instruction 18} {:instruction float_mod} {:instruction float_flush} {:instruction print_float} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_yank} {:instruction -58.98826997879267} {:instruction float_max} {:instruction float_mod} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction 74} {:instruction float_flush} {:instruction 12.817229718787644} {:instruction in1} {:instruction integer_mult} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_sin} {:instruction in1} {:instruction print_float} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction in1} {:instruction tagged_343} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_dup} {:instruction tag_integer_849} {:instruction float_add})
Best program: (integer_div float_min float_min integer_dup float_frominteger 18 float_mod float_flush print_float float_dup_times float_inc float_dup_items integer_yank -58.98826997879267 float_max float_mod integer_dec float_stackdepth 74 float_flush 12.817229718787644 in1 integer_mult integer_pop float_yankdup float_sin in1 print_float float_frominteger integer_flush integer_yank in1 tagged_343 integer_inc integer_swap float_dup tag_integer_849 float_add)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 3581.9321754
Median total errors in population: 1431.0
Error averages by case: (173.99496 4.119 174.8309257 4.212 153.52391599999999 12.376 118.2128024 3.142 125.31109629999997 11.378 117.82272870000001 3.297 119.4650128 3.246 150.6260928 11.452 174.92670950000002 11.489 99.2060355 2.331 97.30241990000002 2.999 153.41836550000002 2.318 110.79412909999999 11.408 162.07993079999997 4.189 163.3655354 12.384 114.76467889999999 3.218 146.8153158 3.209 156.045868 11.456 121.72211370000001 3.171 123.850254 3.226 146.24655829999998 10.402 103.8096903 3.167 181.24809209999998 2.264 129.9631273 3.244 115.64081660000001 3.248)
Error minima by case: (91.0 3 69.8942 3 25.6055 9 18.3985 2 3.3044 8 29.0 2 28.8747 2 2.1146 10 9.5411 8 5.4806 1 7.0 2 25.9568 1 5.1093 8 53.2259 3 12.4827 7 2.1731 2 61.0 2 1.5607 10 5.6562 2 10.5515 2 17.9025 8 15.0 2 99.0 1 27.7481 2 1.9228 2)
Average genome size in population (length): 43.261
Average program size in population (points): 44.261
Average percent parens in population: 0.028
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.45175
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 67
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.029
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5073635
--- Timings ---
Current time: 1529616012283 milliseconds
Total Time:          16.5 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.7 seconds, 40.5%
Fitness Testing:      8.1 seconds, 49.0%
Report:               1.6 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_add} {:instruction integer_pop} {:instruction integer_swap} {:instruction in1} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dec} {:instruction integer_div} {:instruction float_cos} {:instruction tag_float_84} {:instruction float_yankdup} {:instruction integer_flush} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_sub} {:instruction float_yank} {:instruction integer_flush} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_tan} {:instruction float_flush} {:instruction float_shove} {:instruction integer_dup_items} {:instruction float_mod} {:instruction integer_dec} {:instruction -70.11502711532553} {:instruction float_dec} {:instruction integer_max} {:instruction tag_integer_387} {:instruction integer_div} {:instruction float_sin} {:instruction integer_dup_items} {:instruction tag_integer_286} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction float_sub} {:instruction in1} {:instruction integer_flush} {:instruction float_pop} {:instruction float_mod})
Best program: (integer_div float_add integer_pop integer_swap in1 integer_dup_times print_float float_add integer_mod integer_dec integer_div float_cos tag_float_84 float_yankdup integer_flush integer_mod integer_inc float_sub float_yank integer_flush float_stackdepth integer_mult float_tan float_flush float_shove integer_dup_items float_mod integer_dec -70.11502711532553 float_dec integer_max tag_integer_387 integer_div float_sin integer_dup_items tag_integer_286 float_yankdup float_stackdepth integer_shove float_sub in1 integer_flush float_pop float_mod)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3578.2184616
Median total errors in population: 1431.0
Error averages by case: (173.07598890000003 4.048 174.7189998 4.125 153.649104 12.386 118.2980153 3.061 125.52300429999998 11.394 117.6191814 3.189 119.3133694 3.154 150.78149150000004 11.488 175.1307602 11.489 99.2916465 2.212 96.2749913 2.928 153.5507653 2.21 110.94690439999998 11.442 162.005235 4.096 163.59410409999998 12.438 114.7470176 3.127 145.8499485 3.109 156.31106389999997 11.446 121.86717209999998 3.081 123.8011812 3.129 146.4169771 10.451 103.8608588 3.092 180.33968149999998 2.163 130.0683318 3.156 115.61366770000001 3.155)
Error minima by case: (53.452 3 51.8825 3 25.4238 9 30.2157 2 3.3044 9 30.0 2 10.863 2 29.9731 10 9.5411 9 10.0 1 8.0 2 26.1939 1 5.1093 8 35.2141 3 24.1648 10 14.0819 2 38.2962 2 9.3471 8 16.662 2 5.7035 2 29.7197 8 16.0 2 57.9373 1 31.3996 2 18.1778 2)
Average genome size in population (length): 41.486
Average program size in population (points): 42.486
Average percent parens in population: 0.029
Minimum age in population: 4.0
Maximum age in population: 7.875
Average age in population: 5.9345
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 75
Genome diversity (% unique Plush genomes):	 0.648
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 75
Syntactic diversity (% unique Push programs):	 0.648
Total error diversity:				 0.026
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6111610
--- Timings ---
Current time: 1529616015796 milliseconds
Total Time:          19.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.1 seconds, 40.8%
Fitness Testing:      9.7 seconds, 48.8%
Report:               1.9 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction in1} {:instruction tag_float_637} {:instruction integer_mult} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_yank} {:instruction float_yankdup} {:instruction in1} {:instruction integer_inc} {:instruction float_min} {:instruction print_float} {:instruction float_pop} {:instruction float_inc} {:instruction integer_min} {:instruction integer_dec} {:instruction integer_max} {:instruction float_add} {:instruction integer_div} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction float_mod} {:instruction float_yankdup} {:instruction integer_div} {:instruction float_sub} {:instruction float_max} {:instruction float_tan} {:instruction -50} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_inc} {:instruction integer_sub} {:instruction float_mod} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_swap} {:instruction integer_pop} {:instruction integer_yank} {:instruction in1} {:instruction float_shove} {:instruction float_sub} {:instruction float_mult} {:instruction float_sub} {:instruction float_max} {:instruction float_yankdup} {:instruction integer_shove} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction integer_stackdepth})
Best program: (float_sin in1 tag_float_637 integer_mult float_sin integer_dup_items float_yank float_yankdup in1 integer_inc float_min print_float float_pop float_inc integer_min integer_dec integer_max float_add integer_div float_yankdup -8.798867445748158 float_mod float_yankdup integer_div float_sub float_max float_tan -50 integer_pop integer_dup integer_max integer_flush integer_add integer_dup_times integer_dup integer_mod integer_sub integer_fromfloat float_sub float_inc integer_sub float_mod float_stackdepth integer_swap float_swap integer_pop integer_yank in1 float_shove float_sub float_mult float_sub float_max float_yankdup integer_shove float_dup_items integer_stackdepth integer_dup integer_stackdepth)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3770.3054287
Median total errors in population: 1431.0
Error averages by case: (180.21932069999997 4.153 181.96417810000005 4.242 161.0655029 12.392 126.06128400000001 3.167 133.18033559999998 11.409 125.5087596 3.323 127.1169624 3.283 158.28513560000002 11.513 182.52459410000003 11.529 107.2349412 2.355 104.493163 3.006 161.00442679999998 2.355 118.7773813 11.463 169.302587 4.223 170.8985847 12.456 122.58801910000001 3.252 153.25399169999997 3.225 163.7037554 11.479 129.5786928 3.192 131.50833589999996 3.256 153.8733396 10.47 111.72393299999999 3.198 187.4271031 2.286 137.7390269 3.292 123.46907420000002 3.284)
Error minima by case: (25.2985 3 34.4157 3 25.4238 10 18.3985 2 5.0636 10 16.5857 2 6.6038 2 29.7663 10 11.2375 10 9.363 1 7.0 1 3.1252 1 6.1276 9 17.7474 2 12.4827 10 2.1731 2 38.2962 2 1.5607 8 5.6562 2 10.5515 2 17.9025 8 15.363 2 21.7837 1 22.8748 2 1.9228 2)
Average genome size in population (length): 39.589
Average program size in population (points): 40.589
Average percent parens in population: 0.030
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.401875
Median age in population: 7.40625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.685
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.685
Total error diversity:				 0.023
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7101985
--- Timings ---
Current time: 1529616019736 milliseconds
Total Time:          23.7 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.8 seconds, 41.1%
Fitness Testing:     11.5 seconds, 48.3%
Report:               2.4 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_add} {:instruction in1} {:instruction print_float} {:instruction float_sub} {:instruction integer_div} {:instruction -26.898215538369} {:instruction integer_dup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_sub} {:instruction float_add} {:instruction integer_yank} {:instruction -74.24324421711638} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_sub} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_yank} {:instruction float_pop} {:instruction float_sub})
Best program: (integer_flush integer_add in1 print_float float_sub integer_div -26.898215538369 integer_dup integer_div float_flush integer_sub float_add integer_yank -74.24324421711638 integer_shove integer_inc float_sub float_dup_items print_integer integer_yank float_pop float_sub)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 22
Size: 23
Percent parens: 0.043
--- Population Statistics ---
Average total errors in population: 3190.4477911
Median total errors in population: 1431.0
Error averages by case: (158.40679660000004 3.891 160.51947430000004 3.965 138.45808419999997 12.291 102.7004886 2.898 109.79008789999999 11.3 102.57038830000002 3.021 104.2042985 2.997 135.80180550000003 11.387 160.47327150000004 11.392 82.57139649999999 2.042 79.3304404 2.777 138.3573722 2.047 94.7832631 11.348 147.5268817 3.944 148.42977610000003 12.339 99.09618819999999 2.972 130.72030770000003 2.935 140.9684856 11.352 106.28418649999995 2.915 108.62985859999998 2.971 131.0548197 10.35 87.2765068 2.922 165.79591440000002 2.0 114.620689 2.995 100.02500920000003 3.001)
Error minima by case: (28.1536 3 93.0 3 6.1536 8 18.3985 2 3.1383 8 30.0 2 32.0 2 27.8664 10 11.177 8 10.0 1 8.0 2 5.1137 1 5.1689 9 79.0 3 12.4827 7 27.0 2 1.8464 2 1.5607 8 5.6562 2 37.0 2 1.8464 8 15.0171 2 36.1536 1 19.8464 2 28.0 2)
Average genome size in population (length): 37.671
Average program size in population (points): 38.671
Average percent parens in population: 0.032
Minimum age in population: 6.375
Maximum age in population: 11.125
Average age in population: 8.879625
Median age in population: 8.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 47
Genome diversity (% unique Plush genomes):	 0.682
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 47
Syntactic diversity (% unique Push programs):	 0.682
Total error diversity:				 0.025
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 8044585
--- Timings ---
Current time: 1529616022991 milliseconds
Total Time:          27.2 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.3 seconds, 41.4%
Fitness Testing:     12.9 seconds, 47.5%
Report:               2.9 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction float_sin} {:instruction integer_dup} {:instruction float_frominteger} {:instruction 18} {:instruction float_mod} {:instruction float_flush} {:instruction print_float} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_yank} {:instruction -58.98826997879267} {:instruction float_max} {:instruction float_mod} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction 74} {:instruction float_flush} {:instruction 12.817229718787644} {:instruction in1} {:instruction integer_mult} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_sin} {:instruction in1} {:instruction print_float} {:instruction print_integer} {:instruction integer_flush} {:instruction integer_yank} {:instruction in1} {:instruction tagged_343} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_dup} {:instruction tag_integer_849} {:instruction float_add} {:instruction tagged_332} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction tagged_165} {:instruction float_inc})
Best program: (integer_yank float_sin integer_dup float_frominteger 18 float_mod float_flush print_float float_dup_times float_inc float_dup_items integer_yank -58.98826997879267 float_max float_mod integer_dec float_stackdepth 74 float_flush 12.817229718787644 in1 integer_mult integer_dec float_yankdup float_sin in1 print_float print_integer integer_flush integer_yank in1 tagged_343 integer_inc integer_swap float_dup tag_integer_849 float_add tagged_332 integer_dup_items integer_stackdepth tagged_165 float_inc)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3371.5953004000003
Median total errors in population: 1431.0
Error averages by case: (165.7607293 3.932 166.48879599999998 3.987 145.34809259999997 12.274 110.5600419 2.938 116.94772649999999 11.285 108.8072671 3.055 110.55777010000001 3.013 143.36435340000003 11.384 167.9795283 11.392 90.3590604 2.077 88.4059216 2.801 145.3131836 2.077 103.16099799999999 11.336 153.64693979999998 3.976 155.38608069999998 12.318 105.92874520000001 2.996 138.3040985 2.995 148.0994982 11.342 114.18143900000001 2.954 115.0955819 2.996 138.01253000000003 10.338 95.9711624 2.96 173.1168542 2.052 121.47958390000001 3.016 106.8103178 3.015)
Error minima by case: (50.4236 3 34.4157 3 28.4521 10 30.2331 2 38.0 10 16.5857 2 6.6038 2 29.2969 10 11.2375 10 9.0 1 7.0 1 32.2158 1 5.1689 9 17.7474 2 25.4508 10 2.1731 2 35.2678 2 55.6183 10 19.3489 2 10.5515 2 31.4804 9 15.0 2 54.9089 1 27.7481 2 1.9228 2)
Average genome size in population (length): 36.561
Average program size in population (points): 37.561
Average percent parens in population: 0.033
Minimum age in population: 8.125
Maximum age in population: 12.25
Average age in population: 10.346640625
Median age in population: 10.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.019
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 8959435
--- Timings ---
Current time: 1529616026338 milliseconds
Total Time:          30.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.9 seconds, 42.1%
Fitness Testing:     14.3 seconds, 47.0%
Report:               3.2 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_tan} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_dec} {:instruction float_yank} {:instruction float_max} {:instruction float_sin} {:instruction print_integer} {:instruction in2} {:instruction integer_dup_items} {:instruction in1} {:instruction float_add} {:instruction print_float} {:instruction integer_mult} {:instruction float_div} {:instruction float_div} {:instruction -95.45015041057128} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_max} {:instruction float_rot} {:instruction integer_sub} {:instruction float_pop} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction float_sin} {:instruction integer_div} {:instruction -77} {:instruction print_float} {:instruction float_dup_times})
Best program: (float_inc float_tan integer_shove float_inc integer_yank float_sub integer_dec float_yank float_max float_sin print_integer in2 integer_dup_items in1 float_add print_float integer_mult float_div float_div -95.45015041057128 float_flush integer_stackdepth in2 float_max float_rot integer_sub float_pop float_swap integer_stackdepth integer_dup float_sin integer_div -77 print_float float_dup_times)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 3085.850516
Median total errors in population: 1431.0
Error averages by case: (154.8681019 3.852 155.5467492 3.913 134.067705 12.268 99.03543690000002 2.874 105.286212 11.293 97.4954552 2.969 99.11493440000001 2.94 132.0473712 11.353 156.9552333 11.364 78.44165120000001 2.005 76.4281153 2.76 134.0825783 2.002 91.37488240000002 11.314 142.58230460000001 3.916 144.15017539999997 12.314 94.47120560000002 2.936 127.1363952 2.906 136.79634079999997 11.333 102.6355425 2.883 103.56197840000002 2.93 126.62870769999999 10.338 84.3018512 2.891 162.3292467 1.956 109.99587119999998 2.947 95.30947040000001 2.95)
Error minima by case: (25.2985 3 33.4157 3 31.5773 8 30.285 2 3.3139 9 15.5857 2 7.6038 2 28.0276 8 9.5411 9 1.4176 1 7.0486 2 25.7873 1 4.6472 8 16.7474 3 24.1648 10 2.1731 2 21.8574 2 9.3471 9 16.662 2 4.4603 2 29.7288 8 15.1585 2 21.7837 1 27.7481 2 1.9228 2)
Average genome size in population (length): 35.941
Average program size in population (points): 36.941
Average percent parens in population: 0.033
Minimum age in population: 9.15625
Maximum age in population: 13.890625
Average age in population: 11.814546875
Median age in population: 11.83203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.026
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 9859185
--- Timings ---
Current time: 1529616029734 milliseconds
Total Time:          33.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.5 seconds, 42.8%
Fitness Testing:     15.7 seconds, 46.4%
Report:               3.5 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_flush} {:instruction integer_sub} {:instruction float_cos} {:instruction integer_min} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction tagged_307} {:instruction float_inc} {:instruction float_dec} {:instruction integer_div} {:instruction integer_max} {:instruction float_add} {:instruction integer_div} {:instruction print_float} {:instruction integer_add} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_sub} {:instruction float_mod} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction 74} {:instruction float_flush} {:instruction 12.817229718787644} {:instruction in1} {:instruction integer_mult} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_sin} {:instruction in1} {:instruction print_float} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction float_yankdup} {:instruction tagged_343} {:instruction integer_inc} {:instruction integer_swap} {:instruction float_dup} {:instruction tag_integer_849} {:instruction float_add} {:instruction tagged_332} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction tagged_165} {:instruction float_inc})
Best program: (integer_dec float_flush integer_sub float_cos integer_min float_dec integer_flush print_float tagged_307 float_inc float_dec integer_div integer_max float_add integer_div print_float integer_add integer_swap integer_flush integer_add integer_sub integer_sub float_mod integer_dec float_stackdepth 74 float_flush 12.817229718787644 in1 integer_mult integer_pop float_yankdup float_sin in1 print_float float_frominteger integer_flush integer_yank float_yankdup tagged_343 integer_inc integer_swap float_dup tag_integer_849 float_add tagged_332 integer_dup_items integer_stackdepth tagged_165 float_inc)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3825.6189726
Median total errors in population: 1431.0
Error averages by case: (183.0397651 4.172 183.70603169999998 4.26 163.01296469999997 12.335 128.9375676 3.176 135.10091610000003 11.351 127.18645649999999 3.333 128.8857766 3.281 161.0707398 11.471 185.26208899999997 11.491 109.1027066 2.352 107.10838270000002 3.012 162.8600849 2.369 121.6439946 11.408 171.09117139999995 4.245 172.8146833 12.379 124.33669639999998 3.269 156.09905709999998 3.25 165.59032329999997 11.423 132.46905900000002 3.197 133.3119063 3.265 155.81351199999997 10.42 114.6232109 3.189 190.2266794 2.313 139.563704 3.287 125.2264936 3.287)
Error minima by case: (91.472 3 47.8825 3 37.7542 9 30.8412 2 4.1668 10 30.0 2 6.863 2 28.3554 10 10.2077 10 10.0 1 7.2268 2 26.1939 1 5.1689 9 31.2141 3 24.5496 9 2.1731 2 61.3572 2 10.3706 9 17.9979 2 10.5515 2 30.2982 10 16.0 2 99.472 1 27.7481 2 1.9228 2)
Average genome size in population (length): 35.748
Average program size in population (points): 36.748
Average percent parens in population: 0.034
Minimum age in population: 10.1875
Maximum age in population: 15.20703125
Average age in population: 13.34903125
Median age in population: 13.408203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.022
Error (vector) diversity:			 0.023
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 10754335
--- Timings ---
Current time: 1529616033034 milliseconds
Total Time:          37.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.9 seconds, 42.9%
Fitness Testing:     17.2 seconds, 46.3%
Report:               3.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction float_sin} {:instruction integer_dup} {:instruction float_dup_times} {:instruction 18} {:instruction float_mod} {:instruction float_flush} {:instruction print_float} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_yank} {:instruction -58.98826997879267} {:instruction float_max} {:instruction float_mod} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction 74} {:instruction float_flush} {:instruction 12.817229718787644} {:instruction in1} {:instruction integer_mult} {:instruction integer_pop} {:instruction float_sub} {:instruction float_sin} {:instruction in1} {:instruction print_float} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction in1} {:instruction tagged_343} {:instruction float_stackdepth} {:instruction integer_swap} {:instruction float_dup} {:instruction tag_integer_849} {:instruction float_add} {:instruction tagged_332} {:instruction integer_fromfloat} {:instruction in2} {:instruction float_dec} {:instruction float_shove} {:instruction float_dup_times} {:instruction integer_max} {:instruction integer_max} {:instruction float_dup} {:instruction tag_integer_849} {:instruction float_add} {:instruction tagged_332} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction tagged_165} {:instruction float_inc})
Best program: (integer_yank float_sin integer_dup float_dup_times 18 float_mod float_flush print_float float_dup_times float_inc float_dup_items integer_yank -58.98826997879267 float_max float_mod integer_dec float_stackdepth 74 float_flush 12.817229718787644 in1 integer_mult integer_pop float_sub float_sin in1 print_float float_frominteger integer_flush integer_yank in1 tagged_343 float_stackdepth integer_swap float_dup tag_integer_849 float_add tagged_332 integer_fromfloat in2 float_dec float_shove float_dup_times integer_max integer_max float_dup tag_integer_849 float_add tagged_332 integer_dup_items integer_stackdepth tagged_165 float_inc)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3458.7484194
Median total errors in population: 1431.0
Error averages by case: (168.58522109999998 3.982 170.2094326 4.07 148.96463679999997 12.296 113.5251927 2.99 120.6775992 11.306 112.7994878 3.132 114.4916229 3.1 146.24511900000002 11.41 170.87423859999998 11.421 94.30782760000001 2.16 91.3469997 2.845 148.92918229999998 2.158 106.13078020000002 11.364 157.3790823 4.039 158.97323179999998 12.348 109.8928888 3.072 141.1908066 3.043 151.6450212 11.371 117.12238769999998 3.009 118.99426999999999 3.075 141.6621207 10.371 98.996982 3.014 175.88126859999997 2.109 125.2605609 3.097 110.78745829999998 3.093)
Error minima by case: (64.0753 3 34.4157 3 14.8005 7 1.5609 2 3.7765 9 16.5857 2 6.6038 2 28.716 9 10.2118 10 10.0 1 8.0 2 26.7683 1 5.1328 10 17.7474 3 24.3933 9 27.0 2 48.9194 2 10.3132 11 6.3031 2 24.927 2 22.5034 8 16.0 2 68.5606 1 9.7038 2 28.0 2)
Average genome size in population (length): 34.116
Average program size in population (points): 35.116
Average percent parens in population: 0.035
Minimum age in population: 11.8125
Maximum age in population: 16.73828125
Average age in population: 14.838837890625
Median age in population: 14.8466796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.017
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 11609035
--- Timings ---
Current time: 1529616036296 milliseconds
Total Time:          40.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.4 seconds, 43.1%
Fitness Testing:     18.6 seconds, 46.1%
Report:               4.3 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction integer_pop} {:instruction integer_dup} {:instruction print_integer} {:instruction 18} {:instruction integer_flush} {:instruction integer_add} {:instruction in1} {:instruction print_float} {:instruction float_div} {:instruction integer_div} {:instruction -26.898215538369} {:instruction integer_dup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_dec} {:instruction float_add} {:instruction integer_yank} {:instruction -74.24324421711638} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_sub} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_min} {:instruction float_pop} {:instruction float_sub} {:instruction integer_flush} {:instruction -83} {:instruction float_mult} {:instruction integer_rot} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_dec} {:instruction float_dup} {:instruction integer_dup} {:instruction float_tan} {:instruction float_mod} {:instruction integer_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_max} {:instruction float_dup} {:instruction tag_integer_849} {:instruction float_add} {:instruction tagged_332} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction tagged_165} {:instruction float_inc})
Best program: (integer_yank integer_pop integer_dup print_integer 18 integer_flush integer_add in1 print_float float_div integer_div -26.898215538369 integer_dup integer_div float_flush integer_dec float_add integer_yank -74.24324421711638 integer_shove integer_inc float_sub float_dup_items print_integer integer_min float_pop float_sub integer_flush -83 float_mult integer_rot float_dec float_yankdup integer_dec float_dup integer_dup float_tan float_mod integer_dec float_div float_rot integer_swap float_dup integer_max float_dup tag_integer_849 float_add tagged_332 integer_dup_items integer_stackdepth tagged_165 float_inc)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3503.4399544999997
Median total errors in population: 1431.0
Error averages by case: (171.13980199999997 3.994 171.12975400000002 4.059 150.82633999999996 12.312 115.3293518 2.993 122.6105348 11.329 113.80906559999998 3.131 115.5111816 3.086 148.0110699 11.425 172.4567279 11.429 95.2950741 2.154 94.4837524 2.863 150.83191490000002 2.167 107.97809459999999 11.368 158.353303 4.044 160.77362040000003 12.36 111.84871040000002 3.08 143.86304450000003 3.059 153.5290558 11.388 118.9324309 3.007 119.99106749999999 3.064 143.5387747 10.379 100.8225086 3.009 178.44703509999997 2.116 127.1947856 3.103 112.7129544 3.101)
Error minima by case: (50.4236 3 44.8825 3 28.4521 10 30.2884 2 5.2949 10 27.0525 2 3.863 2 27.7396 10 10.6926 10 9.0 1 7.0 1 25.7724 1 0.6346 9 28.2141 2 24.639 10 22.8386 2 35.2678 2 10.7925 10 17.5796 2 14.4603 2 29.7289 9 15.0 2 54.9089 1 30.2402 2 26.9346 2)
Average genome size in population (length): 34.276
Average program size in population (points): 35.276
Average percent parens in population: 0.035
Minimum age in population: 13.8125
Maximum age in population: 18.107421875
Average age in population: 16.3873740234375
Median age in population: 16.39111328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.729
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.729
Total error diversity:				 0.024
Error (vector) diversity:			 0.025
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 12467685
--- Timings ---
Current time: 1529616039789 milliseconds
Total Time:          43.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.0 seconds, 43.3%
Fitness Testing:     20.0 seconds, 45.7%
Report:               4.7 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_pop} {:instruction float_mod} {:instruction in2} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_sin} {:instruction in1} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_sub} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_flush} {:instruction -95.45015041057128} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction in2} {:instruction float_max} {:instruction float_rot})
Best program: (integer_flush integer_pop float_mod in2 integer_yank integer_flush integer_dup_times float_dec float_sin in1 float_mod integer_yankdup print_float float_shove integer_yankdup integer_max integer_yankdup float_sub float_max integer_fromfloat integer_dup float_flush -95.45015041057128 float_flush integer_stackdepth in2 float_max float_rot)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 3400.4015100999995
Median total errors in population: 1431.0
Error averages by case: (166.45746979999998 4.005 167.82705690000006 4.071 146.97821109999998 12.292 110.4059674 3.002 118.75214589999999 11.312 110.30921750000002 3.149 111.96897549999998 3.099 143.38243190000003 11.401 167.83600019999997 11.417 91.49604420000001 2.172 89.36516339999999 2.876 147.1372904 2.178 103.12039100000001 11.349 154.9513713 4.048 156.9730306 12.341 108.246156 3.097 139.03658189999996 3.067 149.68193770000005 11.373 114.0224704 3.019 116.39143589999999 3.084 139.6897402 10.366 95.86088820000002 3.019 173.77503289999999 2.128 123.50649530000001 3.12 109.12900450000001 3.116)
Error minima by case: (39.2406 3 66.1018 3 25.6055 9 5.1018 2 4.0562 8 3.1018 2 5.1018 2 20.2139 9 2.4084 8 9.9929 1 7.0 1 17.9736 1 2.8982 9 52.1018 2 12.4827 7 26.0 2 24.0847 2 1.5607 10 5.6562 2 10.1018 2 17.9025 9 10.8982 2 43.7259 1 22.4413 2 27.0 2)
Average genome size in population (length): 32.699
Average program size in population (points): 33.699
Average percent parens in population: 0.037
Minimum age in population: 14.8125
Maximum age in population: 19.59912109375
Average age in population: 17.87455615234375
Median age in population: 17.926513671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.024
Error (vector) diversity:			 0.027
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 13286810
--- Timings ---
Current time: 1529616042984 milliseconds
Total Time:          47.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.5 seconds, 43.4%
Fitness Testing:     21.4 seconds, 45.4%
Report:               5.2 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_add} {:instruction integer_pop} {:instruction integer_swap} {:instruction in1} {:instruction integer_dup_times} {:instruction print_float} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_dec} {:instruction integer_div} {:instruction float_cos} {:instruction tag_float_65} {:instruction float_yankdup} {:instruction float_yank})
Best program: (integer_dup_times float_add integer_pop integer_swap in1 integer_dup_times print_float integer_shove integer_mod integer_dec integer_div float_cos tag_float_65 float_yankdup float_yank)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 15
Size: 16
Percent parens: 0.063
--- Population Statistics ---
Average total errors in population: 3276.215661
Median total errors in population: 1431.0
Error averages by case: (162.0916586 3.931 162.87368890000002 3.995 141.5055757 12.355 106.64893640000001 2.932 112.91004990000002 11.371 105.05719400000001 3.046 106.7545072 3.029 139.53606130000003 11.451 164.24120000000002 11.456 86.33783399999999 2.076 84.60192580000002 2.809 141.45483990000002 2.075 99.11160799999999 11.401 149.94295659999997 3.959 151.5476815 12.424 102.11961439999999 2.995 134.53337050000002 2.974 144.1469679 11.415 110.23211239999999 2.954 111.2560223 2.993 134.1297199 10.411 92.01031920000001 2.958 169.44286549999998 2.032 117.60717229999997 3.028 103.02277880000001 3.029)
Error minima by case: (25.2985 3 35.8825 3 31.5773 9 30.7013 2 4.1668 10 21.0525 2 2.137 2 29.5271 10 11.7216 10 9.0 1 7.0 1 25.7725 1 5.1689 9 22.2141 2 24.5496 11 26.0 2 40.1426 2 10.3706 9 17.9591 2 20.4603 2 30.5845 8 15.0 2 21.7837 1 30.4938 2 27.0 2)
Average genome size in population (length): 32.244
Average program size in population (points): 33.244
Average percent parens in population: 0.037
Minimum age in population: 17.04345703125
Maximum age in population: 21.13623046875
Average age in population: 19.38012451171875
Median age in population: 19.418212890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.695
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.695
Total error diversity:				 0.02
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 14094510
--- Timings ---
Current time: 1529616046187 milliseconds
Total Time:          50.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.0 seconds, 43.7%
Fitness Testing:     22.8 seconds, 45.2%
Report:               5.5 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_pop} {:instruction float_mod} {:instruction in2} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_sin} {:instruction in1} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_yankdup} {:instruction float_sub} {:instruction integer_dec} {:instruction float_sub} {:instruction integer_sub} {:instruction float_pop} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction float_sin} {:instruction integer_max} {:instruction -77} {:instruction print_float} {:instruction float_dup} {:instruction integer_dup} {:instruction float_tan} {:instruction float_mod} {:instruction integer_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_max} {:instruction float_mod})
Best program: (integer_flush integer_pop float_mod in2 integer_yank integer_flush integer_dup_times float_dec float_sin in1 float_mod integer_yankdup print_float float_shove integer_yankdup integer_max integer_yankdup float_sub integer_dec float_sub integer_sub float_pop float_swap integer_stackdepth integer_dup float_sin integer_max -77 print_float float_dup integer_dup float_tan float_mod integer_dec float_div float_rot integer_swap float_dup integer_max integer_dup_items float_dup_items float_rot integer_max float_mod)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3465.4022647
Median total errors in population: 1431.0
Error averages by case: (169.30314549999997 3.98 170.2048174 4.033 148.95401309999997 12.317 114.27394209999999 2.986 120.58031739999998 11.327 112.69530400000001 3.098 114.4500252 3.06 147.0288131 11.427 171.51018160000004 11.437 94.1859003 2.123 92.4146992 2.846 148.91861509999995 2.124 106.86922990000002 11.381 157.38517620000002 4.014 158.94509040000003 12.359 109.8067237 3.038 141.92769719999998 3.041 151.60814709999997 11.381 117.8535047 2.998 118.9533391 3.038 141.63437969999998 10.379 99.73569470000001 3.007 176.60743660000003 2.105 125.22264609999999 3.061 110.70742529999998 3.066)
Error minima by case: (91.0 3 92.0 3 38.1744 10 29.8035 2 4.0435 9 29.0 2 31.0 2 29.0133 10 11.7352 10 9.0 1 7.0 1 25.8023 1 5.1689 9 78.0 2 23.4062 7 26.0 2 61.0 2 10.3717 9 17.5087 2 36.0 2 30.1793 9 15.0 2 99.0 1 31.2277 2 27.0 2)
Average genome size in population (length): 31.371
Average program size in population (points): 32.371
Average percent parens in population: 0.038
Minimum age in population: 18.66015625
Maximum age in population: 22.628662109375
Average age in population: 20.85231982421875
Median age in population: 20.90484619140625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.021
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.021
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 14879910
--- Timings ---
Current time: 1529616049443 milliseconds
Total Time:          53.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.6 seconds, 44.0%
Fitness Testing:     24.2 seconds, 45.1%
Report:               5.7 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_shove} {:instruction integer_swap} {:instruction integer_inc} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_tan} {:instruction float_max} {:instruction float_mult} {:instruction integer_div} {:instruction float_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction float_dup} {:instruction tagged_208} {:instruction float_div} {:instruction float_frominteger} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_dup} {:instruction float_tan} {:instruction float_mod} {:instruction integer_dec} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_swap} {:instruction integer_max} {:instruction integer_max} {:instruction integer_add} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_flush} {:instruction float_mod} {:instruction integer_mult})
Best program: (float_min float_shove integer_swap integer_inc integer_mult float_yank integer_dup_items print_float float_tan float_max float_mult integer_div float_mod float_rot integer_stackdepth in1 integer_inc integer_pop integer_shove print_float integer_div float_dup tagged_208 float_div float_frominteger in1 integer_stackdepth float_min integer_dup float_tan float_mod integer_dec integer_dup float_rot integer_swap integer_max integer_max integer_add float_dup_items float_rot integer_flush float_mod integer_mult)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3264.3221225
Median total errors in population: 1431.0
Error averages by case: (161.3086569 3.897 162.91163459999999 3.947 140.65104359999998 12.296 106.6986923 2.906 112.1059737 11.301 104.942933 3.009 106.6924939 2.979 139.53800420000002 11.394 164.20289519999997 11.395 86.4125042 2.045 83.72466920000001 2.776 140.58230529999997 2.031 99.24126799999999 11.346 150.01023130000002 3.925 150.7754644 12.344 101.1044234 2.951 133.70601930000004 2.952 143.3872419 11.35 110.3016482 2.931 111.28185240000002 2.954 133.3069191 10.356 92.0870062 2.929 168.672417 2.012 116.70595390000001 2.978 101.98587129999999 2.98)
Error minima by case: (50.4236 3 38.8825 3 28.1744 10 20.9674 2 5.9438 9 21.0525 2 2.137 2 2.1146 10 11.9634 7 5.4806 1 8.0 2 26.1939 1 5.1689 9 22.2141 3 15.0517 7 2.1731 2 35.2678 2 1.0082 9 8.2252 2 10.5515 2 20.4715 10 16.0 2 54.9089 1 27.7481 2 1.9228 2)
Average genome size in population (length): 30.728
Average program size in population (points): 31.728
Average percent parens in population: 0.039
Minimum age in population: 19.666015625
Maximum age in population: 24.24951171875
Average age in population: 22.32122375488281
Median age in population: 22.37051391601562
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.017
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 15649185
--- Timings ---
Current time: 1529616052567 milliseconds
Total Time:          56.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.0 seconds, 44.0%
Fitness Testing:     25.6 seconds, 45.0%
Report:               6.1 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_pop} {:instruction integer_mult} {:instruction in1} {:instruction float_inc} {:instruction float_dec} {:instruction print_float} {:instruction tagged_567} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_add})
Best program: (integer_dup_times integer_pop integer_mult integer_pop integer_mult in1 float_inc float_dec print_float tagged_567 integer_yankdup print_float integer_add)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 13
Size: 14
Percent parens: 0.071
--- Population Statistics ---
Average total errors in population: 3270.6790286
Median total errors in population: 1431.0
Error averages by case: (161.5166172 3.878 162.8757922 3.941 141.5396089 12.277 106.5586068 2.886 112.96389159999998 11.299 104.7708174 2.996 106.5917626 2.965 139.66110550000002 11.381 164.5213732 11.394 85.3883176 2.026 83.8106256 2.758 141.56935090000002 2.017 98.4694141 11.337 149.94529129999998 3.918 151.7070488 12.327 101.95735690000001 2.942 134.33215769999998 2.932 144.3165988 11.343 110.2158723 2.906 111.1788344 2.941 134.1440504 10.341 91.83312760000001 2.902 168.7234987 1.978 117.6010828 2.962 102.87482530000001 2.965)
Error minima by case: (91.835 3 92.0 3 38.5834 10 30.8412 2 4.1668 10 29.0 2 31.0 2 3.2118 9 12.0647 10 4.3833 1 7.2268 2 26.1939 1 5.1689 9 78.0 3 24.5496 10 27.0 2 61.3572 2 10.3706 11 19.3489 2 36.0 2 30.5845 10 15.0 2 99.7941 1 31.3976 2 27.7599 2)
Average genome size in population (length): 29.268
Average program size in population (points): 30.268
Average percent parens in population: 0.040
Minimum age in population: 20.666015625
Maximum age in population: 25.85302734375
Average age in population: 23.76473718261719
Median age in population: 23.81626892089844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.016
Error (vector) diversity:			 0.016
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 16381710
--- Timings ---
Current time: 1529616055597 milliseconds
Total Time:          59.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.4 seconds, 44.1%
Fitness Testing:     26.9 seconds, 45.0%
Report:               6.4 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_shove} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_tan} {:instruction in1} {:instruction float_sub} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dec} {:instruction integer_div} {:instruction integer_flush} {:instruction integer_mod} {:instruction integer_inc} {:instruction float_sub} {:instruction float_yank} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction integer_add} {:instruction 82} {:instruction float_sin} {:instruction integer_max} {:instruction -77} {:instruction print_float} {:instruction float_rot} {:instruction integer_dup} {:instruction float_tan} {:instruction float_mod} {:instruction integer_dec} {:instruction float_div} {:instruction float_rot} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction float_mod})
Best program: (float_min float_shove float_yankdup integer_swap float_tan in1 float_sub print_float float_add integer_mod integer_dec integer_div integer_flush integer_mod integer_inc float_sub float_yank float_dup_items integer_sub integer_add float_frominteger integer_yankdup integer_add 82 float_sin integer_max -77 print_float float_rot integer_dup float_tan float_mod integer_dec float_div float_rot integer_swap float_dup integer_max integer_dup_items float_dup_items integer_stackdepth integer_flush float_mod)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3347.6832696
Median total errors in population: 1431.0
Error averages by case: (164.73906249999996 3.929 165.67537040000002 4.004 144.341665 12.295 109.5488602 2.946 115.87683180000002 11.306 107.9303405 3.05 109.6917364 3.022 142.42661320000002 11.401 167.0955907 11.409 89.3496544 2.083 87.55658770000001 2.81 144.35632370000002 2.073 102.1141573 11.348 152.7921403 3.984 154.38959729999996 12.339 105.0284906 2.994 137.21137190000002 2.986 147.03599459999998 11.359 113.16039109999998 2.961 114.19091329999999 3.011 136.99766729999996 10.361 94.92765460000001 2.96 172.0813251 2.043 120.527727 3.014 105.93320270000001 3.016)
Error minima by case: (31.5403 3 35.8825 3 38.1744 10 30.8412 2 4.0562 8 29.0 2 28.8747 2 29.9731 10 12.0647 10 9.0 1 7.0 1 26.1939 1 5.1689 9 33.2141 2 24.5496 7 26.0 2 16.3844 2 10.3706 10 19.3489 2 10.5515 2 30.4715 9 15.0 2 36.0256 1 31.3976 2 27.0 2)
Average genome size in population (length): 28.624
Average program size in population (points): 29.624
Average percent parens in population: 0.041
Minimum age in population: 22.63180541992188
Maximum age in population: 27.47789001464844
Average age in population: 25.28721051025391
Median age in population: 25.32082366943359
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.02
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 17097935
--- Timings ---
Current time: 1529616059035 milliseconds
Total Time:          63.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.0 seconds, 44.4%
Fitness Testing:     28.3 seconds, 44.9%
Report:               6.7 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dec} {:instruction integer_inc} {:instruction float_max} {:instruction float_sin} {:instruction print_integer} {:instruction in2} {:instruction integer_dup_items} {:instruction in1} {:instruction float_add} {:instruction 74} {:instruction float_flush} {:instruction 12.817229718787644} {:instruction in1} {:instruction integer_mult} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_sin} {:instruction in1} {:instruction print_float} {:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_yank} {:instruction in1} {:instruction tagged_343} {:instruction integer_inc} {:instruction tagged_332} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction tagged_165} {:instruction float_inc})
Best program: (float_sub integer_dec integer_inc float_max float_sin print_integer in2 integer_dup_items in1 float_add 74 float_flush 12.817229718787644 in1 integer_mult integer_pop float_yankdup float_sin in1 print_float float_frominteger integer_flush integer_yank in1 tagged_343 integer_inc tagged_332 integer_dup_items integer_stackdepth tagged_165 float_inc)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 3681.7351717999995
Median total errors in population: 1431.0
Error averages by case: (177.39344260000001 4.061 178.33476629999996 4.15 157.3480212 12.305 123.1097633 3.077 129.27278640000003 11.32 121.47497689999999 3.214 123.15312019999998 3.178 155.5424554 11.446 179.99352829999998 11.448 103.0883021 2.242 101.1161946 2.918 157.48827989999998 2.245 115.73435210000001 11.385 165.6205226 4.125 167.3201777 12.359 118.77989600000001 3.151 150.2039947 3.137 160.06848160000004 11.38 126.64790229999997 3.091 127.5939804 3.149 150.13159620000002 10.385 108.653183 3.094 184.6130071 2.199 133.98116860000002 3.174 119.65927230000003 3.179)
Error minima by case: (66.7015 3 57.1175 3 25.6055 9 18.3985 2 4.3044 9 30.0 2 23.863 2 23.2526 9 5.4471 10 1.4176 1 7.0 1 21.0123 1 0.1278 9 45.7859 2 12.4827 7 26.0 2 21.8574 2 1.5607 9 5.6562 2 4.4603 2 17.9025 8 13.3342 2 78.2163 1 25.48 2 27.0 2)
Average genome size in population (length): 27.9
Average program size in population (points): 28.9
Average percent parens in population: 0.041
Minimum age in population: 23.63180541992188
Maximum age in population: 28.67670440673828
Average age in population: 26.82258992004395
Median age in population: 26.87740707397461
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.694
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.694
Total error diversity:				 0.022
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 17796210
--- Timings ---
Current time: 1529616062207 milliseconds
Total Time:          66.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.5 seconds, 44.5%
Fitness Testing:     29.7 seconds, 44.7%
Report:               7.1 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_pop} {:instruction float_mod} {:instruction in2} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_dec} {:instruction float_sin} {:instruction in1} {:instruction float_mod} {:instruction integer_dec} {:instruction print_float} {:instruction float_shove} {:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_yankdup} {:instruction float_sub} {:instruction float_max})
Best program: (integer_flush integer_pop float_mod in2 integer_yank integer_flush integer_dup_times float_dec float_sin in1 float_mod integer_dec print_float float_shove integer_yankdup float_pop integer_yankdup float_sub float_max)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 3308.5344866000005
Median total errors in population: 1431.0
Error averages by case: (162.847432 3.87 164.65588250000002 3.941 142.5374227 12.227 108.47262549999999 2.881 113.95530439999999 11.234 106.6320525 3.005 108.474863 2.96 141.5909859 11.335 166.41327189999998 11.342 88.2124176 2.022 85.39369380000001 2.735 142.5372276 2.024 101.08680119999998 11.282 151.7612141 3.926 152.67929999999998 12.258 102.8918386 2.945 135.20164240000003 2.938 145.30325650000003 11.291 112.1408754 2.889 113.0795397 2.946 135.16171970000002 10.284 93.7570637 2.893 170.2203615 1.999 118.5657598 2.962 103.8139346 2.959)
Error minima by case: (91.0 3 93.0 3 69.0 12 30.8412 2 38.0 10 30.0 2 32.0 2 29.9731 10 12.0647 10 10.0 1 7.0 1 69.0 1 5.1689 9 79.0 2 80.0 12 26.0 2 61.0 2 72.0 11 19.3489 2 37.0 2 61.0 9 15.8048 2 99.0 1 43.0 2 27.0 2)
Average genome size in population (length): 27.751
Average program size in population (points): 28.751
Average percent parens in population: 0.041
Minimum age in population: 25.7655029296875
Maximum age in population: 30.05204010009766
Average age in population: 28.31872969818115
Median age in population: 28.36627960205078
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.665
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.665
Total error diversity:				 0.014
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 18490885
--- Timings ---
Current time: 1529616065169 milliseconds
Total Time:          69.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.9 seconds, 44.5%
Fitness Testing:     31.0 seconds, 44.6%
Report:               7.4 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction in1} {:instruction tag_float_637} {:instruction integer_mult} {:instruction float_sin} {:instruction integer_flush} {:instruction integer_add} {:instruction in1} {:instruction print_float} {:instruction float_yank} {:instruction integer_div} {:instruction -26.898215538369} {:instruction integer_dup} {:instruction integer_div} {:instruction float_flush} {:instruction integer_sub} {:instruction print_integer} {:instruction integer_yank} {:instruction -74.24324421711638} {:instruction integer_shove} {:instruction integer_inc} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction print_integer} {:instruction float_pop} {:instruction float_sub} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_max} {:instruction tag_float_516} {:instruction float_div} {:instruction integer_flush} {:instruction float_mult} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_sin})
Best program: (float_sin in1 tag_float_637 integer_mult float_sin integer_flush integer_add in1 print_float float_yank integer_div -26.898215538369 integer_dup integer_div float_flush integer_sub print_integer integer_yank -74.24324421711638 integer_shove integer_inc integer_dup_items float_dup_items print_integer float_pop float_sub float_max integer_fromfloat integer_dup integer_max tag_float_516 float_div integer_flush float_mult float_add integer_dup_times float_swap float_sin)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 3036.3359052
Median total errors in population: 1431.0
Error averages by case: (152.8963669 3.801 153.9465173 3.862 132.11462459999998 12.233 96.930928 2.805 103.27722349999999 11.232 95.4346734 2.915 97.1727819 2.879 130.2389409 11.325 155.2924145 11.329 76.4604878 1.942 74.64699470000001 2.682 132.228212 1.937 89.39580860000001 11.287 140.85494949999998 3.848 142.3383787 12.277 92.4896245 2.863 125.0028918 2.858 134.891758 11.291 100.57522010000001 2.818 101.733693 2.863 124.7064929 10.284 82.10264699999999 2.819 160.3083224 1.901 108.09890390000001 2.878 93.39104929999999 2.877)
Error minima by case: (25.2985 3 35.8825 3 28.4521 9 30.2884 2 4.3044 8 29.0 2 31.0 2 15.2932 10 10.6926 10 9.0 1 7.0 1 25.9568 1 5.6323 11 33.2141 2 24.639 11 26.0 2 35.2678 2 10.7925 10 16.662 2 25.2338 2 29.7289 9 13.3342 2 21.7837 1 31.2402 2 27.0 2)
Average genome size in population (length): 26.961
Average program size in population (points): 27.961
Average percent parens in population: 0.042
Minimum age in population: 27.42471313476562
Maximum age in population: 31.81546592712402
Average age in population: 29.86425993728638
Median age in population: 29.91427230834961
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.654
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.654
Total error diversity:				 0.017
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 19166110
--- Timings ---
Current time: 1529616068522 milliseconds
Total Time:          72.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        32.4 seconds, 44.7%
Fitness Testing:     32.4 seconds, 44.6%
Report:               7.7 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_tan} {:instruction in1} {:instruction float_inc} {:instruction float_dec} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_add})
Best program: (float_inc float_tan in1 float_inc float_dec integer_max integer_dup_items integer_yankdup print_float integer_add)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 10
Size: 11
Percent parens: 0.091
--- Population Statistics ---
Average total errors in population: 3276.2776274
Median total errors in population: 1431.0
Error averages by case: (161.2742309 3.911 163.9368882 3.989 140.5176949 12.275 107.63096089999999 2.922 112.0146165 11.289 106.2461675 3.054 107.90203720000001 3.017 140.4753413 11.385 165.0374234 11.381 87.46028410000001 2.076 83.6896506 2.789 140.4678691 2.067 100.21781829999999 11.333 151.06980560000002 3.97 150.54314560000003 12.317 101.2569584 2.987 133.7104105 2.964 143.21170990000002 11.337 111.23609569999999 2.941 112.38945419999999 2.995 133.1740183 10.338 93.05545890000002 2.945 168.65858749999998 2.027 116.67168549999998 3.018 102.0893144 3.013)
Error minima by case: (50.4236 3 34.4157 3 17.3292 10 10.1221 2 2.6547 10 16.5857 2 6.6038 2 29.2969 10 11.9101 8 10.0 1 6.64 2 26.0095 1 5.1689 9 17.7474 3 4.2064 8 2.1731 2 35.2678 2 9.6068 10 2.6201 2 10.5515 2 9.6262 8 15.1016 2 54.9089 1 27.7481 2 1.9228 2)
Average genome size in population (length): 26.675
Average program size in population (points): 27.675
Average percent parens in population: 0.043
Minimum age in population: 28.4290771484375
Maximum age in population: 33.15308666229248
Average age in population: 31.31539949226379
Median age in population: 31.35323810577393
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.02
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 19834035
--- Timings ---
Current time: 1529616071543 milliseconds
Total Time:          75.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.9 seconds, 44.7%
Fitness Testing:     33.8 seconds, 44.5%
Report:               8.1 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction -94.4667813498151} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_dup_items} {:instruction integer_add} {:instruction integer_div} {:instruction float_add} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_sin} {:instruction integer_dup} {:instruction float_frominteger} {:instruction 18} {:instruction float_mod} {:instruction float_flush} {:instruction print_float} {:instruction float_dup_times} {:instruction float_inc} {:instruction float_dup_items} {:instruction integer_yank} {:instruction -57.99959566669062} {:instruction in1} {:instruction print_float} {:instruction float_pop} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_dec})
Best program: (-94.4667813498151 float_dup_times integer_stackdepth integer_sub integer_dup_items integer_add integer_div float_add integer_pop integer_yank float_sin integer_dup float_frominteger 18 float_mod float_flush print_float float_dup_times float_inc float_dup_items integer_yank -57.99959566669062 in1 print_float float_pop float_inc float_yankdup integer_dec)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 2893.2618586999997
Median total errors in population: 1431.0
Error averages by case: (147.71712580000002 3.757 148.3861434 3.807 126.69357109999999 12.226 91.19651420000001 2.763 97.567042 11.23 89.5051739 2.854 91.2453752 2.822 124.625093 11.306 149.72463190000002 11.317 70.5302669 1.872 68.59142619999999 2.654 126.51928640000001 1.872 83.5373376 11.274 135.2294606 3.796 136.87540779999998 12.262 86.47040059999999 2.808 119.65378600000001 2.799 129.32632980000002 11.284 94.82939119999999 2.78 95.83152580000001 2.811 119.18259479999999 10.276 76.3252993 2.776 155.2068683 1.84 102.2670215 2.822 87.3917854 2.825)
Error minima by case: (91.0809 3 34.4157 3 38.4227 9 30.8118 2 4.3044 9 16.5857 2 6.6038 2 29.0128 8 9.5411 9 10.0 1 7.0486 2 26.7724 1 5.1093 8 17.7474 3 24.1648 10 2.1731 2 61.3572 2 9.3471 10 16.662 2 10.5515 2 30.5832 8 16.0 2 99.7941 1 27.7481 2 1.9228 2)
Average genome size in population (length): 26.163
Average program size in population (points): 27.163
Average percent parens in population: 0.044
Minimum age in population: 29.4290771484375
Maximum age in population: 34.64790868759155
Average age in population: 32.82179895353317
Median age in population: 32.85849356651306
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.019
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.019
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 20489160
--- Timings ---
Current time: 1529616074662 milliseconds
Total Time:          78.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.4 seconds, 44.8%
Fitness Testing:     35.1 seconds, 44.5%
Report:               8.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction integer_pop} {:instruction in2} {:instruction 18} {:instruction in1} {:instruction print_float} {:instruction integer_yankdup} {:instruction integer_max} {:instruction float_flush} {:instruction integer_flush} {:instruction float_stackdepth} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_mod} {:instruction 50} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_flush} {:instruction float_shove} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction integer_yankdup})
Best program: (float_rot integer_pop in2 18 in1 print_float integer_yankdup integer_max float_flush integer_flush float_stackdepth integer_yank integer_mod integer_inc integer_dup float_mod 50 float_stackdepth integer_mult float_frominteger float_flush float_shove integer_dup_items integer_inc integer_yankdup)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2795.8484737
Median total errors in population: 1431.0
Error averages by case: (143.7307015 3.655 144.6631175 3.712 123.0415773 12.171 87.2392157 2.66 93.81169560000001 11.178 85.3110525 2.757 87.167863 2.723 121.1629872 11.261 146.6687928 11.265 66.4214176 1.769 64.5477335 2.559 123.1067724 1.772 79.6503677 11.222 131.4637859 3.701 133.4387 12.201 82.5491614 2.713 115.4258574 2.705 125.90074349999999 11.221 91.0024735 2.667 91.8584603 2.711 115.4972803 10.223 72.14019520000001 2.67 151.2782163 1.748 98.5672402 2.725 83.4890654 2.725)
Error minima by case: (66.7015 3 57.1175 3 69.0 10 31.0 2 38.0 11 29.0 2 23.863 2 67.0 10 94.0 11 1.4176 1 7.0 1 69.0 1 23.0 9 45.7859 2 80.0 11 26.0 2 21.8574 2 72.0 9 35.0 2 4.4603 2 61.0 9 15.0 2 78.2163 1 43.0 2 27.0 2)
Average genome size in population (length): 25.661
Average program size in population (points): 26.661
Average percent parens in population: 0.045
Minimum age in population: 32.02947807312012
Maximum age in population: 36.19208073616028
Average age in population: 34.33045536828041
Median age in population: 34.40812635421753
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.652
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.652
Total error diversity:				 0.012
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 21131160
--- Timings ---
Current time: 1529616077868 milliseconds
Total Time:          82.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.8 seconds, 44.9%
Fitness Testing:     36.5 seconds, 44.5%
Report:               8.6 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_add} {:instruction integer_pop} {:instruction integer_swap} {:instruction in1} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_add} {:instruction integer_mod} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_div} {:instruction float_max} {:instruction float_sub} {:instruction float_pop} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_yank} {:instruction -75.73854567371656} {:instruction integer_shove} {:instruction integer_inc} {:instruction float_sub} {:instruction float_dup_items} {:instruction print_integer} {:instruction integer_yank} {:instruction float_pop} {:instruction float_sub} {:instruction integer_flush} {:instruction integer_dup} {:instruction float_mult} {:instruction integer_rot} {:instruction float_inc} {:instruction float_mult} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_sin})
Best program: (integer_div float_add integer_pop integer_swap in1 integer_dup_times print_float float_add integer_mod integer_dec integer_dup_times float_div float_max float_sub float_pop integer_shove integer_mult integer_yank -75.73854567371656 integer_shove integer_inc float_sub float_dup_items print_integer integer_yank float_pop float_sub integer_flush integer_dup float_mult integer_rot float_inc float_mult float_shove integer_dup_times float_swap float_sin)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2989.2974942999995
Median total errors in population: 1431.0
Error averages by case: (151.22838959999999 3.798 152.08170610000005 3.864 130.2546018 12.213 94.97366369999997 2.808 101.3719126 11.216 93.70109500000001 2.922 95.36573419999998 2.879 128.19511390000002 11.302 153.1630964 11.309 74.4511348 1.943 72.65248409999998 2.685 130.3852787 1.95 87.36576849999997 11.254 139.106989 3.852 140.40595880000004 12.233 90.62554329999999 2.877 123.34327990000003 2.855 133.1023909 11.274 98.63362449999998 2.817 99.8739458 2.865 122.7785221 10.259 80.1996658 2.815 158.7274325 1.912 106.17953210000002 2.88 91.46363020000001 2.885)
Error minima by case: (91.0 3 34.0117 3 6.3174 10 26.9883 2 4.0562 8 28.9883 2 26.9883 2 9.0117 8 11.2072 10 9.0 1 7.0 1 25.7735 1 5.1689 9 20.0117 2 25.0517 7 26.0 2 61.0 2 11.0082 9 18.4735 2 21.9883 2 1.0885 9 15.0 2 99.0 1 30.4942 2 27.0 2)
Average genome size in population (length): 25.524
Average program size in population (points): 26.524
Average percent parens in population: 0.045
Minimum age in population: 33.2645902633667
Maximum age in population: 37.85577440261841
Average age in population: 35.82283980166912
Median age in population: 35.87802469730377
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.02
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 21769835
--- Timings ---
Current time: 1529616080980 milliseconds
Total Time:          85.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.2 seconds, 44.9%
Fitness Testing:     37.9 seconds, 44.5%
Report:               8.9 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup_times} {:instruction in1} {:instruction integer_pop} {:instruction integer_shove} {:instruction print_float} {:instruction integer_div} {:instruction integer_rot} {:instruction tagged_208} {:instruction float_div} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction float_tan})
Best program: (integer_div float_add integer_pop float_dup_times in1 integer_pop integer_shove print_float integer_div integer_rot tagged_208 float_div float_frominteger float_yankdup integer_stackdepth float_sub float_max float_tan)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 18
Size: 19
Percent parens: 0.053
--- Population Statistics ---
Average total errors in population: 3094.4641974
Median total errors in population: 1431.0
Error averages by case: (154.71446989999998 3.817 156.57399930000003 3.886 134.043359 12.245 99.75426390000001 2.82 105.2293903 11.252 98.243549 2.935 100.03357120000001 2.906 133.06261840000002 11.352 157.9556331 11.35 79.33064909999999 1.959 76.48948639999999 2.695 134.047013 1.958 92.27538709999999 11.298 143.6076232 3.87 144.13808980000002 12.279 94.2449569 2.886 126.90143229999998 2.864 136.83858140000004 11.301 103.4382996 2.836 104.54254819999998 2.884 126.59682790000001 10.294 84.9503847 2.836 162.2026864 1.922 109.8972169 2.902 95.1001604 2.905)
Error minima by case: (92.0 3 93.0 3 38.4227 10 28.9883 2 4.3044 10 30.0 2 32.0 2 29.0128 11 11.2072 10 10.0 1 8.0 2 26.7724 1 5.6323 9 79.0 3 25.3 8 0.1731 2 62.0 2 11.2565 11 18.4735 2 37.0 2 30.7197 9 7.2069 2 100.0 1 29.7481 2 3.9228 2)
Average genome size in population (length): 25.102
Average program size in population (points): 26.102
Average percent parens in population: 0.046
Minimum age in population: 34.2645902633667
Maximum age in population: 39.06165599822998
Average age in population: 37.2697417986393
Median age in population: 37.31637081503868
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.639
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.639
Total error diversity:				 0.012
Error (vector) diversity:			 0.012
Behavioral diversity:				 0.012
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 22397810
--- Timings ---
Current time: 1529616084031 milliseconds
Total Time:          88.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.7 seconds, 45.0%
Fitness Testing:     39.2 seconds, 44.4%
Report:               9.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_add} {:instruction integer_pop} {:instruction integer_swap} {:instruction in1} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction in1} {:instruction integer_inc} {:instruction float_min} {:instruction print_float} {:instruction float_pop} {:instruction float_dup_items} {:instruction integer_min} {:instruction integer_dec} {:instruction integer_max} {:instruction float_add} {:instruction integer_dup} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction float_mod} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_tan} {:instruction float_flush} {:instruction float_shove})
Best program: (integer_div float_add integer_pop integer_swap in1 integer_dup_times float_yankdup in1 integer_inc float_min print_float float_pop float_dup_items integer_min integer_dec integer_max float_add integer_dup float_yankdup -8.798867445748158 float_mod integer_pop integer_stackdepth float_stackdepth integer_mult float_tan float_flush float_shove)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 2938.4355921
Median total errors in population: 1431.0
Error averages by case: (149.2542654 3.707 150.1728968 3.76 128.5585855 12.236 92.9816617 2.711 99.50844339999999 11.235 91.1917799 2.802 93.0406811 2.78 126.6422877 11.317 151.84650449999998 11.318 72.3836446 1.82 70.3255491 2.611 128.5474817 1.821 85.45029459999999 11.284 137.0605354 3.743 138.8401648 12.277 88.332962 2.761 121.17452490000001 2.753 131.33734710000002 11.283 96.6959033 2.73 97.6994535 2.763 121.06258319999999 10.282 78.0342507 2.73 156.7435735 1.789 104.2153996 2.778 89.2648181 2.779)
Error minima by case: (92.0 3 93.0 3 38.5855 9 30.8118 2 4.4434 9 30.0 2 32.0 2 29.8321 10 9.5411 9 10.0 1 8.0 2 27.4817 1 5.1093 8 79.0 3 24.1648 11 27.0 2 62.0 2 9.3471 10 16.662 2 37.0 2 30.5832 8 16.0 2 100.0 1 31.3996 2 28.0 2)
Average genome size in population (length): 24.858
Average program size in population (points): 25.858
Average percent parens in population: 0.046
Minimum age in population: 36.00396168231964
Maximum age in population: 40.64681640267372
Average age in population: 38.74237216097116
Median age in population: 38.80004557967186
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.011
Error (vector) diversity:			 0.011
Behavioral diversity:				 0.011
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 23019585
--- Timings ---
Current time: 1529616087214 milliseconds
Total Time:          91.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.1 seconds, 45.0%
Fitness Testing:     40.6 seconds, 44.5%
Report:               9.5 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 55775.0
Test mean error for best: 27.88750
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 63.2156798823 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 83.7927623355 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 54.4734584119 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 52.1951590265 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_flush} {:instruction integer_sub} {:instruction -6} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_flush} {:instruction print_float} {:instruction tagged_307} {:instruction integer_pop} {:instruction float_dec} {:instruction integer_div} {:instruction integer_max} {:instruction float_add} {:instruction integer_div} {:instruction print_float} {:instruction integer_add} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_frominteger} {:instruction float_flush} {:instruction integer_div} {:instruction float_cos} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_sub} {:instruction -74.71165017229926} {:instruction float_dup_times} {:instruction float_mod} {:instruction in1} {:instruction -90} {:instruction integer_mod} {:instruction print_float} {:instruction integer_swap} {:instruction integer_inc} {:instruction integer_dup} {:instruction float_sin})
Best program: (integer_dec float_flush integer_sub -6 float_yankdup float_dec integer_flush print_float tagged_307 integer_pop float_dec integer_div integer_max float_add integer_div print_float integer_add float_stackdepth integer_mult float_frominteger float_flush integer_div float_cos integer_flush integer_add integer_sub integer_sub -74.71165017229926 float_dup_times float_mod in1 -90 integer_mod print_float integer_swap integer_inc integer_dup float_sin)
Errors: [92.0 3 93.0 3 70.0 12 32.0 2 39.0 11 30.0 2 32.0 2 68.0 11 95.0 11 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 36.0 2 37.0 2 62.0 10 16.0 2 100.0 1 44.0 2 28.0 2]
Total: 1431.0
Mean: 28.62
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 3096.5381574
Median total errors in population: 1431.0
Error averages by case: (154.7528627 3.787 156.595178 3.85 135.00627500000002 12.229 98.78534540000001 2.795 106.1663445 11.233 98.1450102 2.904 99.92934020000001 2.871 132.15815590000003 11.319 157.10908650000002 11.32 79.33644799999999 1.924 76.52494039999999 2.676 134.97161200000002 1.925 91.26820450000001 11.273 143.5720141 3.828 145.16170209999999 12.268 95.21342039999999 2.85 126.88240790000002 2.842 137.70248439999997 11.287 102.4447845 2.804 104.50370860000001 2.854 127.56638129999999 10.28 83.9747223 2.808 162.18785630000002 1.897 110.8841836 2.871 96.12868859999999 2.872)
Error minima by case: (92.0 3 92.0 3 38.1061 9 29.8512 2 3.7343 9 29.0 2 31.0 2 29.9731 10 9.5411 9 9.0 1 8.0 2 26.1939 1 5.1093 8 78.0 3 24.1648 11 27.0 2 62.0 2 9.3471 10 16.662 2 36.0 2 30.2136 8 15.0 2 100.0 1 31.3976 2 28.0 2)
Average genome size in population (length): 24.432
Average program size in population (points): 25.432
Average percent parens in population: 0.046
Minimum age in population: 37.39880681037903
Maximum age in population: 42.04775667190552
Average age in population: 40.21618987210095
Median age in population: 40.28038362413645
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.019
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 23630610
--- Timings ---
Current time: 1529616090596 milliseconds
Total Time:          94.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.7 seconds, 45.1%
Fitness Testing:     42.0 seconds, 44.4%
Report:               9.9 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 58568.99000000003
Test mean error for best: 29.28450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 48.0273902213 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 48.0273902213 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 48.0273902213 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 48.0273902213 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_inc} {:instruction float_min} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 integer_yank integer_yankdup float_swap integer_inc float_min integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max float_tan)
Errors: [92.0 3 93.0 3 70.0 12 16.8117 10 39.0 11 30.0 2 32.0 2 68.0 11 59.2346 12 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 29.5539 9 37.0 2 62.0 10 11.8322 10 100.0 1 44.0 2 28.0 2]
Total: 1393.4324
Mean: 27.868649
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2747.5289741
Median total errors in population: 1431.0
Error averages by case: (141.995485 3.648 143.01310279999998 3.706 121.00478179999999 12.141 85.2033281 2.661 91.7592495 11.143 83.69424440000002 2.76 85.48354989999999 2.717 119.1255745 11.233 144.4253025 11.234 64.5047229 1.769 62.597909 2.545 121.0367063 1.773 77.6443235 11.188 129.8053201 3.698 131.3019394 12.16 80.6688909 2.712 113.7297017 2.7 123.7928184 11.193 88.94251589999999 2.669 90.11283839999999 2.708 113.4455135 10.185 70.17909900000002 2.666 149.5669729 1.745 96.54604490000001 2.716 81.56203880000001 2.717)
Error minima by case: (91.0 3 92.0 3 20.4227 10 13.2157 2 4.3044 10 29.0 2 31.0 2 29.2917 10 10.6926 10 9.0 1 7.0 1 25.9568 1 6.5185 9 78.0 2 7.3 10 26.0 2 61.0 2 6.7435 11 0.4735 2 36.0 2 12.7197 9 11.8322 2 99.0 1 30.4942 2 27.0 2)
Average genome size in population (length): 23.902
Average program size in population (points): 24.902
Average percent parens in population: 0.047
Minimum age in population: 39.01784235239029
Maximum age in population: 43.73202992230654
Average age in population: 41.70751429679245
Median age in population: 41.76443360000849
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.013
Error (vector) diversity:			 0.013
Behavioral diversity:				 0.014
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 24228485
--- Timings ---
Current time: 1529616093763 milliseconds
Total Time:          98.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.1 seconds, 45.0%
Fitness Testing:     43.5 seconds, 44.4%
Report:              10.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 58568.99000000003
Test mean error for best: 29.28450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 48.0273902213 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 48.0273902213 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 48.0273902213 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 48.0273902213 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_inc} {:instruction float_min} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 integer_yank integer_yankdup float_swap integer_inc float_min integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max float_tan)
Errors: [92.0 3 93.0 3 70.0 12 16.8117 10 39.0 11 30.0 2 32.0 2 68.0 11 59.2346 12 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 29.5539 9 37.0 2 62.0 10 11.8322 10 100.0 1 44.0 2 28.0 2]
Total: 1393.4324
Mean: 27.868649
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 3010.2535045
Median total errors in population: 1431.0
Error averages by case: (151.040707 3.767 152.86371300000002 3.834 131.3456635 12.188 95.84756479999999 2.828 102.4210935 11.2 94.20611059999999 2.886 95.99473119999999 2.849 129.4817001 11.298 154.3999371 11.308 75.3481226 1.901 73.4915902 2.654 131.42788319999997 1.903 88.4180175 11.244 139.82622460000002 3.819 141.59256520000002 12.223 91.36955720000002 2.836 123.943347 2.826 134.1751166 11.25 99.6224448 2.83 100.5907009 2.832 123.8732087 10.249 81.00700739999999 2.841 159.41685359999997 1.881 107.1409726 2.847 92.2616716 2.853)
Error minima by case: (65.7015 3 58.1175 3 38.5834 10 16.8117 2 4.1668 10 30.0 2 22.863 2 29.2969 10 12.0647 10 0.4176 1 6.7806 1 26.1939 1 5.1689 9 46.7859 2 24.5496 11 26.0 2 20.8574 2 10.3706 9 19.3489 2 5.4603 2 30.5845 9 11.8322 2 77.2163 1 30.4942 2 27.0 2)
Average genome size in population (length): 23.452
Average program size in population (points): 24.452
Average percent parens in population: 0.048
Minimum age in population: 40.14724886417389
Maximum age in population: 45.12977470457554
Average age in population: 43.1946898586601
Median age in population: 43.22045845724642
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.63
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.63
Total error diversity:				 0.014
Error (vector) diversity:			 0.014
Behavioral diversity:				 0.015
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 24815185
--- Timings ---
Current time: 1529616096974 milliseconds
Total Time:         101.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.6 seconds, 45.1%
Fitness Testing:     44.9 seconds, 44.4%
Report:              10.6 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 58568.99000000003
Test mean error for best: 29.28450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 48.0273902213 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 48.0273902213 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 48.0273902213 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 48.0273902213 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_inc} {:instruction float_min} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 integer_yank integer_yankdup float_swap integer_inc float_min integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max float_tan)
Errors: [92.0 3 93.0 3 70.0 12 16.8117 10 39.0 11 30.0 2 32.0 2 68.0 11 59.2346 12 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 29.5539 9 37.0 2 62.0 10 11.8322 10 100.0 1 44.0 2 28.0 2]
Total: 1393.4324
Mean: 27.868649
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2866.6207628
Median total errors in population: 1431.0
Error averages by case: (146.74718919999998 3.724 147.59078970000002 3.793 125.61944170000001 12.179 89.38089910000001 3.129 96.49564380000001 11.193 88.72891629999998 2.851 90.43270069999998 2.81 123.6490381 11.272 146.95002029999995 11.325 69.5283158 1.864 67.7552736 2.613 125.43852810000001 1.865 82.5157761 11.229 134.4524482 3.772 135.7881146 12.217 85.61436679999998 2.796 118.68434150000002 2.774 128.2251589 11.239 93.48279889999995 3.088 94.9977008 2.795 118.13190230000001 10.232 75.05430409999994 3.138 154.2615657 1.832 101.25836280000001 2.811 86.4871657 2.809)
Error minima by case: (92.0 3 41.8825 3 37.4357 9 16.8117 2 4.1668 9 24.0525 2 0.863 2 29.0128 10 9.5411 9 9.0 1 8.0 2 21.9726 1 5.1093 8 25.2141 3 24.1648 10 21.0274 2 62.0 2 9.3471 10 16.662 2 17.4603 2 29.7289 8 11.8322 2 100.0 1 4.0274 2 20.0274 2)
Average genome size in population (length): 23.104
Average program size in population (points): 24.104
Average percent parens in population: 0.048
Minimum age in population: 41.14724886417389
Maximum age in population: 46.85938465408981
Average age in population: 44.69490886530466
Median age in population: 44.75260790809989
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.607
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.607
Total error diversity:				 0.017
Error (vector) diversity:			 0.017
Behavioral diversity:				 0.017
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 25393185
--- Timings ---
Current time: 1529616099906 milliseconds
Total Time:         104.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.0 seconds, 45.1%
Fitness Testing:     46.2 seconds, 44.4%
Report:              10.8 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 58568.99000000003
Test mean error for best: 29.28450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: -31.5773142587
Correct output: 31.2156798823  | Program output: 48.0273902213 
Correct output: 4.3044396458   | Program output: -34.6955603542
Correct output: -111.0525036893 | Program output: -81.0525036893
Correct output: -87.8629552961 | Program output: -55.8629552961
Correct output: -29.0127692455 | Program output: 38.9872307545 
Correct output: -11.2072376645 | Program output: 48.0273902213 
Correct output: -21.4176342021 | Program output: -11.4176342021
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: -96.7724379815
Correct output: -5.6323311646  | Program output: 18.3676688354 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: -55.7000237752
Correct output: -61.1613849928 | Program output: -88.1613849928
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: -61.7435168225
Correct output: 18.4734584119  | Program output: 48.0273902213 
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: -31.280281276 
Correct output: 36.1951590265  | Program output: 48.0273902213 
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: -75.2401964086
Correct output: -57.0654428355 | Program output: -85.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_inc} {:instruction float_min} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 integer_yank integer_yankdup float_swap integer_inc float_min integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max float_tan)
Errors: [92.0 3 93.0 3 70.0 12 16.8117 10 39.0 11 30.0 2 32.0 2 68.0 11 59.2346 12 10.0 1 8.0 2 70.0 1 24.0 11 79.0 3 81.0 12 27.0 2 62.0 2 73.0 11 29.5539 9 37.0 2 62.0 10 11.8322 10 100.0 1 44.0 2 28.0 2]
Total: 1393.4324
Mean: 27.868649
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2779.558843599999
Median total errors in population: 1431.0
Error averages by case: (142.9905382 3.758 145.1529489 3.812 122.64326639999999 12.149 82.37534299999987 4.777 93.64050209999998 11.171 86.334854 2.871 87.9602277 2.824 119.8092256 11.244 135.82205509999972 11.504 66.2694645 1.89 63.71229059999999 2.665 122.7378085 1.881 78.51662139999999 11.21 131.9768963 3.798 132.8636737 12.186 83.00569920000001 2.82 114.93575680000002 2.818 125.42221370000001 11.224 88.1827166999998 4.535 92.3828155 2.828 115.16119610000001 10.215 70.31094749999977 4.792 150.51131129999996 1.875 98.49237390000002 2.829 83.83709690000002 2.835)
Error minima by case: (43.9726 3 44.9726 3 9.6047 8 7.8699 2 3.3044 9 18.0274 2 16.0274 2 19.9726 9 10.4217 8 9.0 1 0.5604 2 1.3732 1 5.1093 8 30.9726 3 15.0548 9 21.0274 2 13.9726 2 9.3471 8 4.8724 2 11.0274 2 13.9726 8 10.8322 2 51.9726 1 4.0274 2 20.0274 2)
Average genome size in population (length): 23.153
Average program size in population (points): 24.153
Average percent parens in population: 0.046
Minimum age in population: 43.60766389593482
Maximum age in population: 48.3109356444329
Average age in population: 46.19314616882335
Median age in population: 46.27570464275777
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 166
Genome diversity (% unique Plush genomes):	 0.596
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 166
Syntactic diversity (% unique Push programs):	 0.596
Total error diversity:				 0.03
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.031
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 25972235
--- Timings ---
Current time: 1529616103066 milliseconds
Total Time:         107.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.6 seconds, 45.2%
Fitness Testing:     47.5 seconds, 44.3%
Report:              11.1 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 58608.77820000003
Test mean error for best: 29.30439
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 26.2984736646 
Correct output: -128.8824936591 | Program output: -34.8824936591
Correct output: 38.4226857413  | Program output: -30.5773142587
Correct output: 31.2156798823  | Program output: 48.0273902213 
Correct output: 4.3044396458   | Program output: -33.6955603542
Correct output: -111.0525036893 | Program output: -80.0525036893
Correct output: -87.8629552961 | Program output: -54.8629552961
Correct output: -29.0127692455 | Program output: 39.9872307545 
Correct output: -11.2072376645 | Program output: 48.0273902213 
Correct output: -21.4176342021 | Program output: -10.4176342021
Correct output: 27.73349404    | Program output: 20.73349404   
Correct output: -26.7724379815 | Program output: -95.7724379815
Correct output: -5.6323311646  | Program output: 19.3676688354 
Correct output: -112.2141334467 | Program output: -32.2141334467
Correct output: 25.2999762248  | Program output: -54.7000237752
Correct output: -61.1613849928 | Program output: -87.1613849928
Correct output: 102.1425886748 | Program output: 41.1425886748 
Correct output: 11.2564831775  | Program output: -60.7435168225
Correct output: 18.4734584119  | Program output: 48.0273902213 
Correct output: -69.5397406729 | Program output: -31.5397406729
Correct output: 30.719718724   | Program output: -30.280281276 
Correct output: 36.1951590265  | Program output: 48.0273902213 
Correct output: 121.7837489029 | Program output: 22.7837489029 
Correct output: -31.2401964086 | Program output: -74.2401964086
Correct output: -57.0654428355 | Program output: -84.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_inc} {:instruction float_min} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 float_inc integer_yankdup float_swap integer_inc float_min integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max float_tan)
Errors: [91.0 3 94.0 3 69.0 12 16.8117 10 38.0 11 31.0 3 33.0 2 69.0 10 59.2346 12 11.0 2 7.0 1 69.0 2 25.0 11 80.0 2 80.0 12 26.0 2 61.0 3 72.0 12 29.5539 9 38.0 2 61.0 9 11.8322 10 99.0 2 43.0 2 27.0 2]
Total: 1390.4324
Mean: 27.808647
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2438.985583100018
Median total errors in population: 1393.4324
Error averages by case: (130.89570120000002 3.677 133.60740720000004 3.749 108.66921519999995 12.04 61.225601699999125 9.033 79.8501933 11.089 74.64826259999998 2.828 76.03332679999998 2.767 107.89656480000001 11.135 104.47685749999957 11.981 53.15037619999999 1.841 50.81894749999999 2.603 109.47313149999998 1.83 66.09632269999999 11.144 120.16210029999999 3.783 118.7615286 12.071 70.30576570000001 2.791 102.54148180000003 2.748 111.4000392 11.161 72.01626199999943 8.245 79.95670759999997 2.798 101.1874343 10.143 55.0615218999992 9.044 138.4788748 1.778 85.2837734 2.779 71.13818529999999 2.792)
Error minima by case: (69.2711 3 92.0 3 9.6047 8 10.4014 2 4.1668 9 29.0 2 31.0 2 29.0128 9 11.2072 10 9.0 1 6.9192 1 21.9726 1 5.1689 9 78.0 2 4.4857 9 21.0274 2 54.1152 2 6.7435 11 0.4735 2 36.0 2 9.9054 8 10.8322 2 73.7564 1 4.0274 2 20.0274 2)
Average genome size in population (length): 24.454
Average program size in population (points): 25.454
Average percent parens in population: 0.041
Minimum age in population: 45.39536182861775
Maximum age in population: 49.74141301913187
Average age in population: 47.75560599936498
Median age in population: 47.80486938357353
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 412
Genome diversity (% unique Plush genomes):	 0.41
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 412
Syntactic diversity (% unique Push programs):	 0.41
Total error diversity:				 0.034
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 26583585
--- Timings ---
Current time: 1529616106306 milliseconds
Total Time:         110.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.2 seconds, 45.4%
Fitness Testing:     48.9 seconds, 44.2%
Report:              11.4 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 70695.52609999993
Test mean error for best: 35.34776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 12.0273902213 
Correct output: -128.8824936591 | Program output: -23.7375970969
Correct output: 38.4226857413  | Program output: -15.1272382961
Correct output: 31.2156798823  | Program output: 12.0273902213 
Correct output: 4.3044396458   | Program output: -21.3637304871
Correct output: -111.0525036893 | Program output: -33.025113468 
Correct output: -87.8629552961 | Program output: -7.8355650748 
Correct output: -29.0127692455 | Program output: 12.0273902213 
Correct output: -11.2072376645 | Program output: 12.0273902213 
Correct output: -21.4176342021 | Program output: -9.060780789  
Correct output: 27.73349404    | Program output: 12.0273902213 
Correct output: -26.7724379815 | Program output: -48.7450477601
Correct output: -5.6323311646  | Program output: 12.0273902213 
Correct output: -112.2141334467 | Program output: -18.4008766722
Correct output: 25.2999762248  | Program output: -7.6726335539 
Correct output: -61.1613849928 | Program output: -40.1339947714
Correct output: 102.1425886748 | Program output: 12.0273902213 
Correct output: 11.2564831775  | Program output: -13.7161266012
Correct output: 18.4734584119  | Program output: 12.0273902213 
Correct output: -69.5397406729 | Program output: -17.0520911246
Correct output: 30.719718724   | Program output: -14.5331723306
Correct output: 36.1951590265  | Program output: 12.0273902213 
Correct output: 121.7837489029 | Program output: 12.0273902213 
Correct output: -31.2401964086 | Program output: -27.2128061873
Correct output: -57.0654428355 | Program output: -37.0380526142
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_swap} {:instruction integer_inc} {:instruction float_min} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 float_frominteger integer_max float_swap integer_inc float_min integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max float_tan)
Errors: [105.2711 12 105.1449 11 53.5499 10 19.1883 9 25.6682 11 78.0274 9 80.0274 9 41.0402 8 23.2346 11 12.3569 11 15.7061 10 21.9726 9 17.6597 11 93.8133 11 32.9726 12 21.0274 10 90.1152 11 24.9726 11 6.4461 9 52.4876 12 45.2529 12 24.1678 10 109.7564 9 4.0274 10 20.0274 9]
Total: 1380.9139999999995
Mean: 27.61828
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2274.5821586000234
Median total errors in population: 1393.4324
Error averages by case: (124.88118910000001 3.849 127.98142030000001 3.861 101.57785459999997 11.974 52.792296999999046 10.054 72.95125970000002 11.041 69.33886989999996 2.936 70.38029389999996 2.865 100.65249290000001 11.089 92.73066499999992 12.064 47.08687159999999 1.953 44.48511110000001 2.732 102.32005110000001 1.946 59.33565609999997 11.112 114.49213639999999 3.891 111.53127040000004 12.032 64.1546205 2.903 96.79512480000004 2.938 104.15090710000003 11.145 64.32310929999939 9.135 73.98096630000003 2.913 94.19656490000003 10.133 48.19248349999956 10.064 132.57610329999997 1.976 78.4569449 2.883 64.84889489999998 2.88)
Error minima by case: (43.9726 3 70.8325 3 9.6047 8 12.2157 2 4.3044 9 29.0 2 29.8129 2 20.2139 7 0.7846 8 9.0 1 0.5604 1 17.9736 1 3.1665 8 54.1641 2 6.3 9 3.1113 2 13.9726 2 7.7435 9 0.5265 2 11.4897 2 11.7197 8 10.4359 2 51.9726 1 4.0274 2 0.9846 2)
Average genome size in population (length): 24.855
Average program size in population (points): 25.855
Average percent parens in population: 0.039
Minimum age in population: 46.94812081754208
Maximum age in population: 50.94706923840567
Average age in population: 49.24768707814463
Median age in population: 49.28753435669933
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 379
Genome diversity (% unique Plush genomes):	 0.403
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 379
Syntactic diversity (% unique Push programs):	 0.403
Total error diversity:				 0.036
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 27204960
--- Timings ---
Current time: 1529616109373 milliseconds
Total Time:         113.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.6 seconds, 45.5%
Fitness Testing:     50.2 seconds, 44.2%
Report:              11.6 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 70695.52609999993
Test mean error for best: 35.34776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 12.0273902213 
Correct output: -128.8824936591 | Program output: -23.7375970969
Correct output: 38.4226857413  | Program output: -15.1272382961
Correct output: 31.2156798823  | Program output: 12.0273902213 
Correct output: 4.3044396458   | Program output: -21.3637304871
Correct output: -111.0525036893 | Program output: -33.025113468 
Correct output: -87.8629552961 | Program output: -7.8355650748 
Correct output: -29.0127692455 | Program output: 12.0273902213 
Correct output: -11.2072376645 | Program output: 12.0273902213 
Correct output: -21.4176342021 | Program output: -9.060780789  
Correct output: 27.73349404    | Program output: 12.0273902213 
Correct output: -26.7724379815 | Program output: -48.7450477601
Correct output: -5.6323311646  | Program output: 12.0273902213 
Correct output: -112.2141334467 | Program output: -18.4008766722
Correct output: 25.2999762248  | Program output: -7.6726335539 
Correct output: -61.1613849928 | Program output: -40.1339947714
Correct output: 102.1425886748 | Program output: 12.0273902213 
Correct output: 11.2564831775  | Program output: -13.7161266012
Correct output: 18.4734584119  | Program output: 12.0273902213 
Correct output: -69.5397406729 | Program output: -17.0520911246
Correct output: 30.719718724   | Program output: -14.5331723306
Correct output: 36.1951590265  | Program output: 12.0273902213 
Correct output: 121.7837489029 | Program output: 12.0273902213 
Correct output: -31.2401964086 | Program output: -27.2128061873
Correct output: -57.0654428355 | Program output: -37.0380526142
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_inc} {:instruction float_min} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction -96.04868215973347} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction integer_dup})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_yankdup float_swap integer_inc float_min integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan -96.04868215973347 float_flush integer_stackdepth integer_dup)
Errors: [105.2711 12 105.1449 11 53.5499 10 19.1883 9 25.6682 11 78.0274 9 80.0274 9 41.0402 8 23.2346 11 12.3569 11 15.7061 10 21.9726 9 17.6597 11 93.8133 11 32.9726 12 21.0274 10 90.1152 11 24.9726 11 6.4461 9 52.4876 12 45.2529 12 24.1678 10 109.7564 9 4.0274 10 20.0274 9]
Total: 1380.9139999999995
Mean: 27.61828
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2107.1360275000234
Median total errors in population: 1393.4324
Error averages by case: (118.62019279999997 3.854 121.93968339999999 3.909 94.45241039999999 11.896 45.78183889999913 10.029 66.059538 11.017 63.33471079999997 2.991 64.51785139999994 2.899 93.75623780000004 10.984 85.61270790000025 12.048 39.97544039999998 2.061 37.5723541 2.724 94.99085349999997 2.007 52.43954079999999 11.073 108.6087924 3.893 104.3154777 11.975 57.58220790000001 2.928 90.61367280000006 2.955 97.02607450000004 11.143 57.251136999999346 9.153 67.81210500000003 2.992 87.2581253 10.112 41.32155479999969 10.052 126.32968179999996 2.009 71.3618922 2.94 58.024945899999956 2.933)
Error minima by case: (69.2711 3 77.9881 3 8.9939 8 15.0274 2 3.0352 9 29.0 2 31.0 2 21.8816 8 7.1695 8 9.0 1 7.0 1 21.9726 1 0.8599 8 61.3198 2 15.0548 9 10.267 2 54.1152 2 9.3471 9 6.4461 2 18.6454 2 12.9726 8 10.8322 2 73.7564 1 3.4166 2 6.1711 2)
Average genome size in population (length): 25.016
Average program size in population (points): 26.016
Average percent parens in population: 0.039
Minimum age in population: 48.12962542567402
Maximum age in population: 52.58276685338933
Average age in population: 50.72742934954178
Median age in population: 50.75373723206576
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 284
Genome diversity (% unique Plush genomes):	 0.45
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 284
Syntactic diversity (% unique Push programs):	 0.45
Total error diversity:				 0.043
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 27830360
--- Timings ---
Current time: 1529616112686 milliseconds
Total Time:         116.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.2 seconds, 45.5%
Fitness Testing:     51.7 seconds, 44.2%
Report:              12.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 70695.52609999993
Test mean error for best: 35.34776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 12.0273902213 
Correct output: -128.8824936591 | Program output: -23.7375970969
Correct output: 38.4226857413  | Program output: -15.1272382961
Correct output: 31.2156798823  | Program output: 12.0273902213 
Correct output: 4.3044396458   | Program output: -21.3637304871
Correct output: -111.0525036893 | Program output: -33.025113468 
Correct output: -87.8629552961 | Program output: -7.8355650748 
Correct output: -29.0127692455 | Program output: 12.0273902213 
Correct output: -11.2072376645 | Program output: 12.0273902213 
Correct output: -21.4176342021 | Program output: -9.060780789  
Correct output: 27.73349404    | Program output: 12.0273902213 
Correct output: -26.7724379815 | Program output: -48.7450477601
Correct output: -5.6323311646  | Program output: 12.0273902213 
Correct output: -112.2141334467 | Program output: -18.4008766722
Correct output: 25.2999762248  | Program output: -7.6726335539 
Correct output: -61.1613849928 | Program output: -40.1339947714
Correct output: 102.1425886748 | Program output: 12.0273902213 
Correct output: 11.2564831775  | Program output: -13.7161266012
Correct output: 18.4734584119  | Program output: 12.0273902213 
Correct output: -69.5397406729 | Program output: -17.0520911246
Correct output: 30.719718724   | Program output: -14.5331723306
Correct output: 36.1951590265  | Program output: 12.0273902213 
Correct output: 121.7837489029 | Program output: 12.0273902213 
Correct output: -31.2401964086 | Program output: -27.2128061873
Correct output: -57.0654428355 | Program output: -37.0380526142
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_swap} {:instruction integer_inc} {:instruction float_min} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 float_frominteger integer_max float_swap integer_inc float_min integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max float_tan)
Errors: [105.2711 12 105.1449 11 53.5499 10 19.1883 9 25.6682 11 78.0274 9 80.0274 9 41.0402 8 23.2346 11 12.3569 11 15.7061 10 21.9726 9 17.6597 11 93.8133 11 32.9726 12 21.0274 10 90.1152 11 24.9726 11 6.4461 9 52.4876 12 45.2529 12 24.1678 10 109.7564 9 4.0274 10 20.0274 9]
Total: 1380.9139999999995
Mean: 27.61828
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2502.2840398000267
Median total errors in population: 1393.4324
Error averages by case: (134.68627060000006 4.36 137.13236940000002 4.394 110.16031099999991 11.913 62.49361979999954 10.098 81.28228469999999 11.076 80.6577746 3.568 82.01238979999998 3.343 108.55020240000009 10.843 99.89632599999985 12.208 56.78781999999995 2.772 54.55853760000004 3.03 108.44239769999993 2.641 68.5568327999999 11.128 124.08524229999989 4.244 118.23206759999991 12.056 71.85955929999996 3.418 107.51514680000011 3.585 110.71854049999992 11.31 71.75319689999951 9.4 84.0365961999999 3.547 102.71736120000014 10.104 57.78329679999944 10.156 142.15685789999998 2.609 85.17920180000003 3.401 72.47683609999999 3.349)
Error minima by case: (42.9726 3 93.0 3 9.6047 8 13.2157 2 4.3044 9 30.0 2 32.0 2 28.2273 8 10.4217 8 10.0 1 7.0 1 20.9726 1 4.8468 8 79.0 2 13.8332 9 14.2781 2 12.9726 2 9.3471 8 0.4735 2 37.0 2 12.9726 8 8.8659 2 50.9726 1 3.4166 2 15.2781 2)
Average genome size in population (length): 24.928
Average program size in population (points): 25.928
Average percent parens in population: 0.039
Minimum age in population: 49.22313878498971
Maximum age in population: 54.19972553988919
Average age in population: 52.19237385090609
Median age in population: 52.26114178035641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 144
Genome diversity (% unique Plush genomes):	 0.462
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 144
Syntactic diversity (% unique Push programs):	 0.462
Total error diversity:				 0.051
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 28453560
--- Timings ---
Current time: 1529616115702 milliseconds
Total Time:         119.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.6 seconds, 45.5%
Fitness Testing:     53.0 seconds, 44.2%
Report:              12.2 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 64971.03189999998
Test mean error for best: 32.48552
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 18.0          
Correct output: -128.8824936591 | Program output: -17.8824936591
Correct output: 38.4226857413  | Program output: -13.5773142587
Correct output: 31.2156798823  | Program output: 18.0          
Correct output: 4.3044396458   | Program output: -16.6955603542
Correct output: -111.0525036893 | Program output: -63.0525036893
Correct output: -87.8629552961 | Program output: -37.8629552961
Correct output: -29.0127692455 | Program output: 18.0          
Correct output: -11.2072376645 | Program output: 18.0          
Correct output: -21.4176342021 | Program output: -4.8352684041 
Correct output: 27.73349404    | Program output: 18.0          
Correct output: -26.7724379815 | Program output: -78.7724379815
Correct output: -5.6323311646  | Program output: 18.0          
Correct output: -112.2141334467 | Program output: -15.2141334467
Correct output: 25.2999762248  | Program output: -37.7000237752
Correct output: -61.1613849928 | Program output: -70.1613849928
Correct output: 102.1425886748 | Program output: 18.0          
Correct output: 11.2564831775  | Program output: -43.7435168225
Correct output: 18.4734584119  | Program output: 18.0          
Correct output: -69.5397406729 | Program output: -14.5397406729
Correct output: 30.719718724   | Program output: -13.280281276 
Correct output: 36.1951590265  | Program output: 18.0          
Correct output: 121.7837489029 | Program output: 18.0          
Correct output: -31.2401964086 | Program output: -57.2401964086
Correct output: -57.0654428355 | Program output: -67.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_inc} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_yankdup float_swap integer_inc integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max float_tan)
Errors: [99.2985 12 111.0 2 52.0 13 13.2157 11 21.0 12 48.0 3 50.0 1 47.0128 12 29.2072 11 16.5824 9 9.7335 9 52.0 2 23.6323 12 97.0 2 63.0 13 9.0 2 84.1426 12 55.0 12 0.4735 10 55.0 2 44.0 11 18.1952 11 103.7837 11 26.0 2 10.0 1]
Total: 1336.2774000000004
Mean: 26.725548
Genome size: 28
Size: 29
Percent parens: 0.034
--- Population Statistics ---
Average total errors in population: 2290.5127558000077
Median total errors in population: 1390.4324
Error averages by case: (129.16783729999966 6.355 132.62389279999985 6.064 97.59984749999973 11.43 54.13917420000004 9.765 69.63653560000002 11.035 83.91475720000028 5.266 84.99620620000029 4.79 94.22493790000051 9.857 82.7714463000005 11.903 49.1075182999998 5.171 47.044084100000205 4.524 89.48681189999957 4.577 58.844799199999535 11.118 119.84928849999946 5.652 98.78108599999956 12.017 62.83810649999981 5.088 105.3589165000001 5.879 91.3894754999996 11.545 58.17402899999967 9.279 79.57195139999969 5.646 90.04726410000055 10.258 52.491702000000004 10.044 135.8034157999997 4.643 67.85114819999983 5.069 63.03152379999979 4.792)
Error minima by case: (51.2711 2 93.0 2 9.6047 2 13.2157 2 3.0 1 30.0 2 32.0 1 2.8475 8 10.4217 8 10.0 1 0.4396 1 5.1137 1 4.8468 9 79.0 2 7.3 2 9.0 2 36.1152 2 1.0 1 0.4735 2 37.0 1 12.7197 2 8.8659 1 55.7564 1 0.6201 2 10.0 1)
Average genome size in population (length): 24.922
Average program size in population (points): 25.922
Average percent parens in population: 0.039
Minimum age in population: 51.72998044081032
Maximum age in population: 55.60009595693555
Average age in population: 53.59470460462314
Median age in population: 53.5790372392803
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 195
Genome diversity (% unique Plush genomes):	 0.366
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 195
Syntactic diversity (% unique Push programs):	 0.366
Total error diversity:				 0.055
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 29076610
--- Timings ---
Current time: 1529616118945 milliseconds
Total Time:         123.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.2 seconds, 45.7%
Fitness Testing:     54.3 seconds, 44.1%
Report:              12.5 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 64971.03189999998
Test mean error for best: 32.48552
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 18.0          
Correct output: -128.8824936591 | Program output: -17.8824936591
Correct output: 38.4226857413  | Program output: -13.5773142587
Correct output: 31.2156798823  | Program output: 18.0          
Correct output: 4.3044396458   | Program output: -16.6955603542
Correct output: -111.0525036893 | Program output: -63.0525036893
Correct output: -87.8629552961 | Program output: -37.8629552961
Correct output: -29.0127692455 | Program output: 18.0          
Correct output: -11.2072376645 | Program output: 18.0          
Correct output: -21.4176342021 | Program output: -4.8352684041 
Correct output: 27.73349404    | Program output: 18.0          
Correct output: -26.7724379815 | Program output: -78.7724379815
Correct output: -5.6323311646  | Program output: 18.0          
Correct output: -112.2141334467 | Program output: -15.2141334467
Correct output: 25.2999762248  | Program output: -37.7000237752
Correct output: -61.1613849928 | Program output: -70.1613849928
Correct output: 102.1425886748 | Program output: 18.0          
Correct output: 11.2564831775  | Program output: -43.7435168225
Correct output: 18.4734584119  | Program output: 18.0          
Correct output: -69.5397406729 | Program output: -14.5397406729
Correct output: 30.719718724   | Program output: -13.280281276 
Correct output: 36.1951590265  | Program output: 18.0          
Correct output: 121.7837489029 | Program output: 18.0          
Correct output: -31.2401964086 | Program output: -57.2401964086
Correct output: -57.0654428355 | Program output: -67.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_swap} {:instruction integer_inc} {:instruction integer_shove} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 float_frominteger integer_max float_swap integer_inc integer_shove integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max float_tan)
Errors: [99.2985 12 111.0 2 52.0 13 13.2157 11 21.0 12 48.0 3 50.0 1 47.0128 12 29.2072 11 16.5824 9 9.7335 9 52.0 2 23.6323 12 97.0 2 63.0 13 9.0 2 84.1426 12 55.0 12 0.4735 10 55.0 2 44.0 11 18.1952 11 103.7837 11 26.0 2 10.0 1]
Total: 1336.2774000000004
Mean: 26.725548
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2398.8091486000026
Median total errors in population: 1380.9139999999995
Error averages by case: (140.98278159999984 11.117 142.8695341000005 10.038 94.03152289999922 10.473 60.08352770000083 9.365 67.53230670000002 11.045 112.07044660000179 8.481 113.1964638000018 8.275 84.35377210000141 8.8 68.517784800001 11.209 54.67198289999942 10.059 56.257591700000916 9.119 70.08475040000016 8.253 60.00254409999878 11.149 131.54155169999837 10.004 79.43379129999934 12.003 64.2531968999995 9.067 125.1405860000003 10.335 71.92708310000006 11.198 50.730058800000435 9.215 91.85416669999853 10.633 86.36492830000125 11.611 63.64185680000087 10.125 145.76374250000003 8.653 52.495906999999534 9.084 63.433270099999476 8.263)
Error minima by case: (68.2711 2 35.8825 1 6.6384 2 13.2157 2 3.0 1 30.0 2 32.0 1 22.8 8 4.9944 9 10.0 1 7.0 1 20.5596 1 0.5805 10 33.2141 2 7.3 2 9.0 1 53.1152 2 0.7709 1 0.4735 2 32.5397 2 12.7197 2 8.8659 1 72.7564 1 3.0274 2 10.0 1)
Average genome size in population (length): 25.407
Average program size in population (points): 26.407
Average percent parens in population: 0.038
Minimum age in population: 52.88260989682749
Maximum age in population: 57.12325058590795
Average age in population: 55.10257992445957
Median age in population: 55.14384439828427
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 248
Genome diversity (% unique Plush genomes):	 0.395
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 248
Syntactic diversity (% unique Push programs):	 0.395
Total error diversity:				 0.052
Error (vector) diversity:			 0.052
Behavioral diversity:				 0.052
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 29711785
--- Timings ---
Current time: 1529616122019 milliseconds
Total Time:         126.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.8 seconds, 45.8%
Fitness Testing:     55.6 seconds, 44.0%
Report:              12.8 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 65066.52359999999
Test mean error for best: 32.53326
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 18.0          
Correct output: -128.8824936591 | Program output: -16.8824936591
Correct output: 38.4226857413  | Program output: -12.5773142587
Correct output: 31.2156798823  | Program output: 18.0          
Correct output: 4.3044396458   | Program output: -15.6955603542
Correct output: -111.0525036893 | Program output: -62.0525036893
Correct output: -87.8629552961 | Program output: -36.8629552961
Correct output: -29.0127692455 | Program output: 18.0          
Correct output: -11.2072376645 | Program output: 18.0          
Correct output: -21.4176342021 | Program output: -2.8352684041 
Correct output: 27.73349404    | Program output: 18.0          
Correct output: -26.7724379815 | Program output: -77.7724379815
Correct output: -5.6323311646  | Program output: 18.0          
Correct output: -112.2141334467 | Program output: -14.2141334467
Correct output: 25.2999762248  | Program output: -36.7000237752
Correct output: -61.1613849928 | Program output: -69.1613849928
Correct output: 102.1425886748 | Program output: 18.0          
Correct output: 11.2564831775  | Program output: -42.7435168225
Correct output: 18.4734584119  | Program output: 18.0          
Correct output: -69.5397406729 | Program output: -13.5397406729
Correct output: 30.719718724   | Program output: -12.280281276 
Correct output: 36.1951590265  | Program output: 18.0          
Correct output: 121.7837489029 | Program output: 18.0          
Correct output: -31.2401964086 | Program output: -56.2401964086
Correct output: -57.0654428355 | Program output: -66.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_swap} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 float_frominteger integer_max float_swap integer_inc float_inc integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max float_tan)
Errors: [99.2985 12 112.0 2 51.0 13 13.2157 11 20.0 12 49.0 3 51.0 2 47.0128 12 29.2072 11 18.5824 8 9.7335 9 51.0 2 23.6323 12 98.0 2 62.0 13 8.0 1 84.1426 12 54.0 11 0.4735 10 56.0 2 43.0 11 18.1952 11 103.7837 11 25.0 2 9.0 2]
Total: 1333.2774000000004
Mean: 26.665548
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 2370.457662400008
Median total errors in population: 1380.9139999999995
Error averages by case: (140.1628852000002 11.666 144.1593858000005 9.18 91.63347259999937 10.886 58.43176570000083 9.58 64.8707987 11.202 110.16563650000148 7.98 111.14675570000142 7.502 82.44048700000073 9.465 66.28437660000071 11.067 54.72072619999949 10.39 54.93932360000095 9.617 70.78192400000009 7.653 59.46096789999864 11.339 132.47258289999866 9.24 79.87251409999955 12.086 61.317574899999585 8.287 125.28347420000067 11.037 72.39493880000002 11.318 47.14088790000038 9.359 92.64283779999874 9.725 83.92368360000094 11.64 62.641490600000914 10.208 144.6183885999999 9.495 52.46997049999963 8.371 60.7258129999996 7.462)
Error minima by case: (51.2711 2 93.0 1 8.0548 2 1.1883 2 3.0 1 30.0 2 32.0 1 28.2273 8 10.2305 9 10.0 1 2.2939 1 8.7724 1 4.8468 9 79.0 2 2.9452 2 8.0 1 36.1152 2 1.0 1 0.4735 2 37.0 2 12.7197 2 2.0 1 55.7564 1 1.7902 2 9.0 1)
Average genome size in population (length): 25.621
Average program size in population (points): 26.621
Average percent parens in population: 0.038
Minimum age in population: 54.10501837625634
Maximum age in population: 58.46873397802847
Average age in population: 56.59742218551812
Median age in population: 56.63905926611915
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 193
Genome diversity (% unique Plush genomes):	 0.43
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 193
Syntactic diversity (% unique Push programs):	 0.43
Total error diversity:				 0.064
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.064
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 30352310
--- Timings ---
Current time: 1529616125116 milliseconds
Total Time:         129.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.2 seconds, 45.8%
Fitness Testing:     56.9 seconds, 44.0%
Report:              13.0 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 64909.79269999997
Test mean error for best: 32.45490
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 19.0          
Correct output: -128.8824936591 | Program output: -16.8824936591
Correct output: 38.4226857413  | Program output: -12.5773142587
Correct output: 31.2156798823  | Program output: 19.0          
Correct output: 4.3044396458   | Program output: -15.6955603542
Correct output: -111.0525036893 | Program output: -62.0525036893
Correct output: -87.8629552961 | Program output: -36.8629552961
Correct output: -29.0127692455 | Program output: 19.0          
Correct output: -11.2072376645 | Program output: 19.0          
Correct output: -21.4176342021 | Program output: -3.8352684041 
Correct output: 27.73349404    | Program output: 19.0          
Correct output: -26.7724379815 | Program output: -77.7724379815
Correct output: -5.6323311646  | Program output: 0.6323311646  
Correct output: -112.2141334467 | Program output: -14.2141334467
Correct output: 25.2999762248  | Program output: -36.7000237752
Correct output: -61.1613849928 | Program output: -69.1613849928
Correct output: 102.1425886748 | Program output: 19.0          
Correct output: 11.2564831775  | Program output: -42.7435168225
Correct output: 18.4734584119  | Program output: 19.0          
Correct output: -69.5397406729 | Program output: -13.5397406729
Correct output: 30.719718724   | Program output: -12.280281276 
Correct output: 36.1951590265  | Program output: 19.0          
Correct output: 121.7837489029 | Program output: 19.0          
Correct output: -31.2401964086 | Program output: -56.2401964086
Correct output: -57.0654428355 | Program output: -66.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 19} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_dup 48.02739022130916 19 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_yankdup float_swap integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max float_tan)
Errors: [98.2985 12 112.0 2 51.0 13 12.2157 11 20.0 12 49.0 3 51.0 2 48.0128 11 30.2072 11 17.5824 9 8.7335 9 51.0 2 6.2647 2 98.0 2 62.0 13 8.0 1 83.1426 12 54.0 11 0.5265 11 56.0 2 43.0 11 17.1952 10 102.7837 11 25.0 2 9.0 2]
Total: 1300.9628000000002
Mean: 26.019257
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2638.279830400017
Median total errors in population: 1336.2774000000004
Error averages by case: (148.25102520000158 11.554 158.23298040000034 5.088 101.48341429999977 12.346 67.39089100000048 10.59 73.67929589999993 11.723 108.54690110000018 5.398 109.29016960000014 3.933 96.54105539999884 11.472 80.3983231 11.022 69.07320019999959 9.743 64.01459150000106 9.161 96.0482135999999 4.543 73.94158999999877 11.815 145.43685359999992 5.189 104.37216439999985 12.484 67.72622259999999 4.62 133.63100920000218 11.488 97.1073355999999 11.834 56.09769590000007 9.898 105.79192069999957 5.178 94.01291870000027 11.164 71.75459950000082 10.722 152.69127309999996 10.439 74.62565100000005 4.794 68.0535348 3.889)
Error minima by case: (69.2711 2 93.0 1 3.9726 2 12.2157 2 1.0 1 30.0 2 32.0 1 1.7005 8 6.5581 9 5.8947 1 7.0 1 3.9726 1 5.3269 2 79.0 2 7.3 2 8.0 1 54.1152 2 1.0 1 0.4735 1 37.0 2 4.0274 2 10.9084 1 73.7564 1 2.8842 2 9.0 1)
Average genome size in population (length): 25.767
Average program size in population (points): 26.767
Average percent parens in population: 0.038
Minimum age in population: 55.80257891285873
Maximum age in population: 59.76582670121206
Average age in population: 58.03373904615499
Median age in population: 58.0869015415974
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 98
Genome diversity (% unique Plush genomes):	 0.411
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.411
Total error diversity:				 0.062
Error (vector) diversity:			 0.062
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 30996485
--- Timings ---
Current time: 1529616128088 milliseconds
Total Time:         132.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.8 seconds, 45.9%
Fitness Testing:     58.0 seconds, 43.9%
Report:              13.4 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 64909.79269999997
Test mean error for best: 32.45490
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 19.0          
Correct output: -128.8824936591 | Program output: -16.8824936591
Correct output: 38.4226857413  | Program output: -12.5773142587
Correct output: 31.2156798823  | Program output: 19.0          
Correct output: 4.3044396458   | Program output: -15.6955603542
Correct output: -111.0525036893 | Program output: -62.0525036893
Correct output: -87.8629552961 | Program output: -36.8629552961
Correct output: -29.0127692455 | Program output: 19.0          
Correct output: -11.2072376645 | Program output: 19.0          
Correct output: -21.4176342021 | Program output: -3.8352684041 
Correct output: 27.73349404    | Program output: 19.0          
Correct output: -26.7724379815 | Program output: -77.7724379815
Correct output: -5.6323311646  | Program output: 0.6323311646  
Correct output: -112.2141334467 | Program output: -14.2141334467
Correct output: 25.2999762248  | Program output: -36.7000237752
Correct output: -61.1613849928 | Program output: -69.1613849928
Correct output: 102.1425886748 | Program output: 19.0          
Correct output: 11.2564831775  | Program output: -42.7435168225
Correct output: 18.4734584119  | Program output: 19.0          
Correct output: -69.5397406729 | Program output: -13.5397406729
Correct output: 30.719718724   | Program output: -12.280281276 
Correct output: 36.1951590265  | Program output: 19.0          
Correct output: 121.7837489029 | Program output: 19.0          
Correct output: -31.2401964086 | Program output: -56.2401964086
Correct output: -57.0654428355 | Program output: -66.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 19} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_dup 48.02739022130916 19 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_yankdup float_swap integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max float_tan)
Errors: [98.2985 12 112.0 2 51.0 13 12.2157 11 20.0 12 49.0 3 51.0 2 48.0128 11 30.2072 11 17.5824 9 8.7335 9 51.0 2 6.2647 2 98.0 2 62.0 13 8.0 1 83.1426 12 54.0 11 0.5265 11 56.0 2 43.0 11 17.1952 10 102.7837 11 25.0 2 9.0 2]
Total: 1300.9628000000002
Mean: 26.019257
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2772.676747300014
Median total errors in population: 1336.2774000000004
Error averages by case: (152.56442040000167 11.65 165.21628310000003 3.491 106.45021229999998 12.756 72.21970560000045 10.798 78.387609 11.859 109.37846399999998 4.352 109.7447012 2.613 103.2165062999983 11.96 87.1927490000002 11.139 76.01204999999952 9.428 68.82481940000068 8.879 107.22342259999999 3.369 80.63021699999905 11.915 151.91498180000002 3.515 115.17838829999998 12.84 71.2183278 3.342 138.16626010000186 11.639 107.94971449999997 11.895 60.08473010000004 9.898 112.3843063 3.424 99.07436330000003 10.947 75.67483800000056 10.792 156.98930229999996 10.718 85.0485964 3.421 72.67077849999997 2.621)
Error minima by case: (69.2711 2 93.0 1 3.9726 2 1.9726 2 0.3637 1 30.0 2 32.0 1 14.0785 8 1.4338 9 8.7766 1 7.0 1 2.9726 1 5.4607 2 79.0 2 7.3 2 8.0 1 54.1152 2 0.7709 1 0.4735 2 37.0 2 4.0274 2 11.8322 1 73.7564 1 4.0274 2 9.0 1)
Average genome size in population (length): 26.043
Average program size in population (points): 27.043
Average percent parens in population: 0.038
Minimum age in population: 56.90726174174779
Maximum age in population: 61.37223702159281
Average age in population: 59.51700572164951
Median age in population: 59.53419338344338
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 107
Genome diversity (% unique Plush genomes):	 0.438
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 107
Syntactic diversity (% unique Push programs):	 0.438
Total error diversity:				 0.059
Error (vector) diversity:			 0.06
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 31647560
--- Timings ---
Current time: 1529616130939 milliseconds
Total Time:         135.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.3 seconds, 46.1%
Fitness Testing:     59.1 seconds, 43.7%
Report:              13.7 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 64909.79269999997
Test mean error for best: 32.45490
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 19.0          
Correct output: -128.8824936591 | Program output: -16.8824936591
Correct output: 38.4226857413  | Program output: -12.5773142587
Correct output: 31.2156798823  | Program output: 19.0          
Correct output: 4.3044396458   | Program output: -15.6955603542
Correct output: -111.0525036893 | Program output: -62.0525036893
Correct output: -87.8629552961 | Program output: -36.8629552961
Correct output: -29.0127692455 | Program output: 19.0          
Correct output: -11.2072376645 | Program output: 19.0          
Correct output: -21.4176342021 | Program output: -3.8352684041 
Correct output: 27.73349404    | Program output: 19.0          
Correct output: -26.7724379815 | Program output: -77.7724379815
Correct output: -5.6323311646  | Program output: 0.6323311646  
Correct output: -112.2141334467 | Program output: -14.2141334467
Correct output: 25.2999762248  | Program output: -36.7000237752
Correct output: -61.1613849928 | Program output: -69.1613849928
Correct output: 102.1425886748 | Program output: 19.0          
Correct output: 11.2564831775  | Program output: -42.7435168225
Correct output: 18.4734584119  | Program output: 19.0          
Correct output: -69.5397406729 | Program output: -13.5397406729
Correct output: 30.719718724   | Program output: -12.280281276 
Correct output: 36.1951590265  | Program output: 19.0          
Correct output: 121.7837489029 | Program output: 19.0          
Correct output: -31.2401964086 | Program output: -56.2401964086
Correct output: -57.0654428355 | Program output: -66.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_fromfloat} {:instruction 48.02739022130916} {:instruction 19} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_fromfloat 48.02739022130916 19 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_yankdup float_swap integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max float_tan)
Errors: [98.2985 12 112.0 2 51.0 13 12.2157 11 20.0 12 49.0 3 51.0 2 48.0128 11 30.2072 11 17.5824 9 8.7335 9 51.0 2 6.2647 2 98.0 2 62.0 13 8.0 1 83.1426 12 54.0 11 0.5265 11 56.0 2 43.0 11 17.1952 10 102.7837 11 25.0 2 9.0 2]
Total: 1300.9628000000002
Mean: 26.019257
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2500.5134718000145
Median total errors in population: 1336.2774000000004
Error averages by case: (141.96901190000176 11.668 155.12888470000007 3.323 95.07673999999994 12.772 60.83035190000046 10.842 66.99401359999999 11.878 99.22167560000001 4.191 99.86145790000002 2.653 92.64958809999827 11.879 76.20939929999999 11.099 64.0595283999995 9.258 57.5776099000006 8.882 96.83567489999997 3.209 68.99298389999889 11.394 141.55584240000002 3.371 104.71993829999997 12.853 60.7441027 2.972 127.45940840000256 11.664 97.49001519999996 11.707 49.486268200000026 9.94 101.58020780000001 3.293 87.61724190000001 10.959 65.32285510000057 10.796 146.4602921 10.726 73.98094499999999 3.278 61.416434599999974 2.666)
Error minima by case: (69.2711 2 93.0 1 3.9726 2 1.9726 2 1.0 1 30.0 2 32.0 1 27.8755 8 10.0699 9 10.0 1 0.5604 1 2.9726 1 4.495 2 79.0 2 7.3 2 3.0274 1 54.1152 2 0.0 0 0.4735 1 37.0 2 4.0274 2 11.8322 1 73.7564 1 4.0274 1 2.0274 1)
Average genome size in population (length): 25.928
Average program size in population (points): 26.928
Average percent parens in population: 0.038
Minimum age in population: 57.90726174174779
Maximum age in population: 62.87789760666965
Average age in population: 61.02528997118778
Median age in population: 61.08287902959182
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 121
Genome diversity (% unique Plush genomes):	 0.463
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 121
Syntactic diversity (% unique Push programs):	 0.463
Total error diversity:				 0.056
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.058
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 32295760
--- Timings ---
Current time: 1529616133672 milliseconds
Total Time:         137.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.6 seconds, 46.1%
Fitness Testing:     60.2 seconds, 43.6%
Report:              14.0 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 64909.79269999997
Test mean error for best: 32.45490
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 19.0          
Correct output: -128.8824936591 | Program output: -16.8824936591
Correct output: 38.4226857413  | Program output: -12.5773142587
Correct output: 31.2156798823  | Program output: 19.0          
Correct output: 4.3044396458   | Program output: -15.6955603542
Correct output: -111.0525036893 | Program output: -62.0525036893
Correct output: -87.8629552961 | Program output: -36.8629552961
Correct output: -29.0127692455 | Program output: 19.0          
Correct output: -11.2072376645 | Program output: 19.0          
Correct output: -21.4176342021 | Program output: -3.8352684041 
Correct output: 27.73349404    | Program output: 19.0          
Correct output: -26.7724379815 | Program output: -77.7724379815
Correct output: -5.6323311646  | Program output: 0.6323311646  
Correct output: -112.2141334467 | Program output: -14.2141334467
Correct output: 25.2999762248  | Program output: -36.7000237752
Correct output: -61.1613849928 | Program output: -69.1613849928
Correct output: 102.1425886748 | Program output: 19.0          
Correct output: 11.2564831775  | Program output: -42.7435168225
Correct output: 18.4734584119  | Program output: 19.0          
Correct output: -69.5397406729 | Program output: -13.5397406729
Correct output: 30.719718724   | Program output: -12.280281276 
Correct output: 36.1951590265  | Program output: 19.0          
Correct output: 121.7837489029 | Program output: 19.0          
Correct output: -31.2401964086 | Program output: -56.2401964086
Correct output: -57.0654428355 | Program output: -66.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_swap} {:instruction integer_inc} {:instruction float_yank} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin float_sin integer_dup 48.02739022130916 18 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank float_inc float_swap integer_inc float_yank integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max float_tan)
Errors: [98.2985 12 112.0 2 51.0 13 12.2157 11 20.0 12 49.0 3 51.0 2 48.0128 11 30.2072 11 17.5824 9 8.7335 9 51.0 2 6.2647 2 98.0 2 62.0 13 8.0 1 83.1426 12 54.0 11 0.5265 11 56.0 2 43.0 11 17.1952 10 102.7837 11 25.0 2 9.0 2]
Total: 1300.9628000000002
Mean: 26.019257
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2905.8967185000133
Median total errors in population: 1333.2774000000004
Error averages by case: (156.7966334000019 11.639 170.98707000000016 3.44 112.48959089999992 12.773 76.9861499000005 10.75 84.27890079999996 11.856 115.80069560000007 4.351 116.0994373 3.361 108.48470119999796 11.737 92.9121228 11.167 82.23224419999943 9.007 73.60355510000079 8.844 113.20634499999993 3.373 81.04397519999898 9.229 157.74234310000003 3.562 121.79357689999996 12.815 77.67982450000001 2.647 142.24273280000205 11.6 114.49886689999995 11.281 65.9225091 10.043 118.54864339999999 3.453 105.07052730000007 10.967 81.11440590000092 10.565 161.24909670000002 10.679 90.76319200000002 3.439 78.41157849999999 3.36)
Error minima by case: (68.2711 2 92.0 1 5.9726 1 11.2157 1 0.0 0 29.0 2 31.0 1 29.0128 8 10.9775 9 9.0 1 7.0 1 2.9726 1 5.5577 2 78.0 2 6.3 1 7.0 1 53.1152 2 0.0 0 0.4735 1 36.0 2 1.6765 1 1.0 1 72.7564 1 3.0274 2 8.0 1)
Average genome size in population (length): 26.864
Average program size in population (points): 27.864
Average percent parens in population: 0.037
Minimum age in population: 58.90726174174779
Maximum age in population: 64.45062053408401
Average age in population: 62.51569679291369
Median age in population: 62.55486516597966
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 209
Genome diversity (% unique Plush genomes):	 0.439
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 209
Syntactic diversity (% unique Push programs):	 0.439
Total error diversity:				 0.071
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 32967360
--- Timings ---
Current time: 1529616136736 milliseconds
Total Time:         140.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.2 seconds, 46.3%
Fitness Testing:     61.3 seconds, 43.5%
Report:              14.2 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 64909.79269999997
Test mean error for best: 32.45490
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 19.0          
Correct output: -128.8824936591 | Program output: -16.8824936591
Correct output: 38.4226857413  | Program output: -12.5773142587
Correct output: 31.2156798823  | Program output: 19.0          
Correct output: 4.3044396458   | Program output: -15.6955603542
Correct output: -111.0525036893 | Program output: -62.0525036893
Correct output: -87.8629552961 | Program output: -36.8629552961
Correct output: -29.0127692455 | Program output: 19.0          
Correct output: -11.2072376645 | Program output: 19.0          
Correct output: -21.4176342021 | Program output: -3.8352684041 
Correct output: 27.73349404    | Program output: 19.0          
Correct output: -26.7724379815 | Program output: -77.7724379815
Correct output: -5.6323311646  | Program output: 0.6323311646  
Correct output: -112.2141334467 | Program output: -14.2141334467
Correct output: 25.2999762248  | Program output: -36.7000237752
Correct output: -61.1613849928 | Program output: -69.1613849928
Correct output: 102.1425886748 | Program output: 19.0          
Correct output: 11.2564831775  | Program output: -42.7435168225
Correct output: 18.4734584119  | Program output: 19.0          
Correct output: -69.5397406729 | Program output: -13.5397406729
Correct output: 30.719718724   | Program output: -12.280281276 
Correct output: 36.1951590265  | Program output: 19.0          
Correct output: 121.7837489029 | Program output: 19.0          
Correct output: -31.2401964086 | Program output: -56.2401964086
Correct output: -57.0654428355 | Program output: -66.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dup} {:instruction float_max} {:instruction 19} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction float_max} {:instruction float_sub} {:instruction float_max} {:instruction integer_div})
Best program: (integer_dec integer_dup float_max 19 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_yankdup float_swap integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times integer_stackdepth float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max -8.798867445748158 integer_yank float_yankdup float_max float_sub float_max integer_div)
Errors: [98.2985 12 112.0 2 51.0 13 12.2157 11 20.0 12 49.0 3 51.0 2 48.0128 11 30.2072 11 17.5824 9 8.7335 9 51.0 2 6.2647 2 98.0 2 62.0 13 8.0 1 83.1426 12 54.0 11 0.5265 11 56.0 2 43.0 11 17.1952 10 102.7837 11 25.0 2 9.0 2]
Total: 1300.9628000000002
Mean: 26.019257
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2882.780427899994
Median total errors in population: 1300.9628000000002
Error averages by case: (155.3978707000021 11.551 171.23349210000012 3.546 111.39310009999991 12.751 75.63119720000049 10.762 83.70590170000003 11.846 117.2971667 4.464 117.18539049999995 3.597 108.1049296999982 11.284 92.4568036000002 11.184 81.6315529999995 9.452 72.28297840000099 8.783 113.6961201 3.512 71.94971129999965 4.502 157.96342160000003 3.713 120.97534630000001 12.812 78.28680139999997 2.714 140.69977370000214 11.487 113.76051389999999 11.226 64.24130269999998 10.525 118.79571310000006 3.597 104.03781020000001 10.927 79.05391520000093 10.121 159.82818339999997 10.58 91.34809100000001 3.566 79.7003403 3.621)
Error minima by case: (67.2711 2 92.0 1 1.9726 2 1.2595 1 0.0 0 29.0 2 31.0 1 27.5284 8 10.0699 9 9.0 1 2.2227 1 2.9726 1 4.495 2 78.0 1 4.6563 1 5.0 1 52.1152 2 0.7709 1 0.4735 1 36.0 2 0.7635 2 6.2389 1 71.7564 1 4.0274 2 6.0 1)
Average genome size in population (length): 30.052
Average program size in population (points): 31.052
Average percent parens in population: 0.033
Minimum age in population: 61.52631098074016
Maximum age in population: 65.60297069752824
Average age in population: 63.89600536881758
Median age in population: 63.94307525344254
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 98
Genome diversity (% unique Plush genomes):	 0.44
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 98
Syntactic diversity (% unique Push programs):	 0.44
Total error diversity:				 0.073
Error (vector) diversity:			 0.074
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 33718660
--- Timings ---
Current time: 1529616139827 milliseconds
Total Time:         144.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.8 seconds, 46.4%
Fitness Testing:     62.5 seconds, 43.4%
Report:              14.6 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 64909.79269999997
Test mean error for best: 32.45490
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 19.0          
Correct output: -128.8824936591 | Program output: -16.8824936591
Correct output: 38.4226857413  | Program output: -12.5773142587
Correct output: 31.2156798823  | Program output: 19.0          
Correct output: 4.3044396458   | Program output: -15.6955603542
Correct output: -111.0525036893 | Program output: -62.0525036893
Correct output: -87.8629552961 | Program output: -36.8629552961
Correct output: -29.0127692455 | Program output: 19.0          
Correct output: -11.2072376645 | Program output: 19.0          
Correct output: -21.4176342021 | Program output: -3.8352684041 
Correct output: 27.73349404    | Program output: 19.0          
Correct output: -26.7724379815 | Program output: -77.7724379815
Correct output: -5.6323311646  | Program output: 0.6323311646  
Correct output: -112.2141334467 | Program output: -14.2141334467
Correct output: 25.2999762248  | Program output: -36.7000237752
Correct output: -61.1613849928 | Program output: -69.1613849928
Correct output: 102.1425886748 | Program output: 19.0          
Correct output: 11.2564831775  | Program output: -42.7435168225
Correct output: 18.4734584119  | Program output: 19.0          
Correct output: -69.5397406729 | Program output: -13.5397406729
Correct output: 30.719718724   | Program output: -12.280281276 
Correct output: 36.1951590265  | Program output: 19.0          
Correct output: 121.7837489029 | Program output: 19.0          
Correct output: -31.2401964086 | Program output: -56.2401964086
Correct output: -57.0654428355 | Program output: -66.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 19} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction float_tan})
Best program: (float_sin integer_dup 48.02739022130916 19 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_yankdup float_swap integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times integer_stackdepth integer_flush -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max -8.798867445748158 integer_yank integer_yank float_yankdup integer_stackdepth float_sub float_max float_tan)
Errors: [98.2985 12 112.0 2 51.0 13 12.2157 11 20.0 12 49.0 3 51.0 2 48.0128 11 30.2072 11 17.5824 9 8.7335 9 51.0 2 6.2647 2 98.0 2 62.0 13 8.0 1 83.1426 12 54.0 11 0.5265 11 56.0 2 43.0 11 17.1952 10 102.7837 11 25.0 2 9.0 2]
Total: 1300.9628000000002
Mean: 26.019257
Genome size: 34
Size: 35
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2380.3921759999907
Median total errors in population: 1300.9628000000002
Error averages by case: (137.17588320000146 11.632 152.97965950000008 3.495 90.24842519999991 12.636 55.57350910000045 10.843 62.29476299999999 11.736 97.7439045 4.315 97.56117399999997 3.455 89.14875369999842 11.076 72.84603749999971 11.155 62.12402519999948 9.454 52.30955060000024 8.813 92.31331670000002 3.376 50.73664319999976 3.454 139.39716550000006 3.565 99.52351709999999 12.709 57.572357399999966 2.563 122.27356910000219 11.584 92.22174419999997 10.98 44.915166899999946 10.783 99.31582300000002 3.461 82.80980250000002 10.829 60.04901320000036 9.981 141.74000229999996 10.658 69.7895559 3.428 58.25081349999996 3.497)
Error minima by case: (68.2711 2 93.0 1 1.9726 2 11.2157 2 0.0 0 30.0 2 32.0 1 6.5979 8 11.0224 9 10.0 1 7.0 1 2.9726 1 5.4475 2 79.0 2 6.3 1 7.0 1 53.1152 2 0.0 0 0.4735 1 37.0 2 5.0274 2 9.1665 1 72.7564 1 4.0274 2 8.0 1)
Average genome size in population (length): 30.59
Average program size in population (points): 31.59
Average percent parens in population: 0.032
Minimum age in population: 63.01249278897535
Maximum age in population: 67.31276610214286
Average age in population: 65.32921554371868
Median age in population: 65.33113713488507
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 111
Genome diversity (% unique Plush genomes):	 0.47
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 111
Syntactic diversity (% unique Push programs):	 0.47
Total error diversity:				 0.055
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 34483410
--- Timings ---
Current time: 1529616142704 milliseconds
Total Time:         146.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.2 seconds, 46.5%
Fitness Testing:     63.7 seconds, 43.4%
Report:              14.8 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 64909.79269999997
Test mean error for best: 32.45490
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 19.0          
Correct output: -128.8824936591 | Program output: -16.8824936591
Correct output: 38.4226857413  | Program output: -12.5773142587
Correct output: 31.2156798823  | Program output: 19.0          
Correct output: 4.3044396458   | Program output: -15.6955603542
Correct output: -111.0525036893 | Program output: -62.0525036893
Correct output: -87.8629552961 | Program output: -36.8629552961
Correct output: -29.0127692455 | Program output: 19.0          
Correct output: -11.2072376645 | Program output: 19.0          
Correct output: -21.4176342021 | Program output: -3.8352684041 
Correct output: 27.73349404    | Program output: 19.0          
Correct output: -26.7724379815 | Program output: -77.7724379815
Correct output: -5.6323311646  | Program output: 0.6323311646  
Correct output: -112.2141334467 | Program output: -14.2141334467
Correct output: 25.2999762248  | Program output: -36.7000237752
Correct output: -61.1613849928 | Program output: -69.1613849928
Correct output: 102.1425886748 | Program output: 19.0          
Correct output: 11.2564831775  | Program output: -42.7435168225
Correct output: 18.4734584119  | Program output: 19.0          
Correct output: -69.5397406729 | Program output: -13.5397406729
Correct output: 30.719718724   | Program output: -12.280281276 
Correct output: 36.1951590265  | Program output: 19.0          
Correct output: 121.7837489029 | Program output: 19.0          
Correct output: -31.2401964086 | Program output: -56.2401964086
Correct output: -57.0654428355 | Program output: -66.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 19} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max})
Best program: (float_sin integer_dup 48.02739022130916 19 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_yankdup float_swap integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_div integer_stackdepth float_sin float_max -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max)
Errors: [98.2985 12 112.0 2 51.0 13 12.2157 11 20.0 12 49.0 3 51.0 2 48.0128 11 30.2072 11 17.5824 9 8.7335 9 51.0 2 6.2647 2 98.0 2 62.0 13 8.0 1 83.1426 12 54.0 11 0.5265 11 56.0 2 43.0 11 17.1952 10 102.7837 11 25.0 2 9.0 2]
Total: 1300.9628000000002
Mean: 26.019257
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 2395.8943230999907
Median total errors in population: 1300.9628000000002
Error averages by case: (138.14374190000157 11.643 153.3504325000001 3.405 91.75006669999993 12.654 56.62905220000047 10.737 63.33218049999999 11.756 97.57384750000003 4.248 97.3461152 3.353 89.7974659999982 11.043 73.74527459999953 11.11 62.374004099999475 9.478 53.464078400000524 8.845 93.17302169999996 3.254 51.78420429999978 3.43 139.86708789999997 3.474 101.113849 12.722 56.911475099999976 2.417 123.5315354000026 11.589 93.47908460000001 10.966 45.016086299999934 10.675 99.77841410000002 3.361 84.24170780000003 10.851 60.036325600000445 9.869 142.730403 10.679 70.16906599999997 3.311 58.35580269999996 3.33)
Error minima by case: (31.4131 2 93.0 2 2.9726 2 0.0 0 0.0 0 30.0 2 32.0 1 29.0128 2 9.5411 9 8.8951 1 7.0 1 0.0 0 5.1093 2 79.0 2 3.9452 1 0.0 0 16.2572 2 0.0 0 0.0 0 37.0 2 5.0274 2 0.0 0 35.8983 1 0.0 0 0.0 0)
Average genome size in population (length): 30.425
Average program size in population (points): 31.425
Average percent parens in population: 0.033
Minimum age in population: 64.25227565247565
Maximum age in population: 68.6061569249124
Average age in population: 66.79646882347414
Median age in population: 66.88403796979657
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 86
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 86
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.054
Error (vector) diversity:			 0.056
Behavioral diversity:				 0.056
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 35244035
--- Timings ---
Current time: 1529616145731 milliseconds
Total Time:         150.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.8 seconds, 46.6%
Fitness Testing:     64.8 seconds, 43.2%
Report:              15.2 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 63514.59889999986
Test mean error for best: 31.75730
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -16.8824936591
Correct output: 38.4226857413  | Program output: 16.4500759626 
Correct output: 31.2156798823  | Program output: 19.0          
Correct output: 4.3044396458   | Program output: 13.3318298671 
Correct output: -111.0525036893 | Program output: -62.0525036893
Correct output: -87.8629552961 | Program output: -36.8629552961
Correct output: -29.0127692455 | Program output: 19.0          
Correct output: -11.2072376645 | Program output: 19.0          
Correct output: -21.4176342021 | Program output: -3.8352684041 
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: 47.3097326825 
Correct output: -5.6323311646  | Program output: 0.6323311646  
Correct output: -112.2141334467 | Program output: -14.2141334467
Correct output: 25.2999762248  | Program output: 40.3547566675 
Correct output: -61.1613849928 | Program output: 7.8933954499  
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: 34.3112636201 
Correct output: 18.4734584119  | Program output: 19.0          
Correct output: -69.5397406729 | Program output: -13.5397406729
Correct output: 30.719718724   | Program output: 16.7471089454 
Correct output: 36.1951590265  | Program output: 19.0          
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: 20.814584034  
Correct output: -57.0654428355 | Program output: 10.9893376072 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_swap} {:instruction in2} {:instruction float_yank} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_mod} {:instruction -96.04868215973347} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank float_inc float_swap in2 float_yank integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_mod -96.04868215973347 float_flush integer_stackdepth integer_dup_times integer_stackdepth float_yankdup -8.798867445748158 integer_yank)
Errors: [92.0 3 112.0 2 21.9726 10 12.2157 11 9.0274 10 49.0 3 51.0 2 48.0128 11 30.2072 11 17.5824 9 8.0 2 74.0822 10 6.2647 2 98.0 2 15.0548 11 69.0548 11 62.0 2 23.0548 11 0.5265 11 56.0 2 13.9726 8 17.1952 10 100.0 1 52.0548 11 68.0548 13]
Total: 1285.3332999999998
Mean: 25.706667
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2226.390392799994
Median total errors in population: 1300.9628000000002
Error averages by case: (131.93207530000137 11.623 146.70149050000003 3.152 84.88321829999997 12.667 50.506520300000446 10.776 56.341109899999985 11.746 90.30894369999997 4.023 90.47735359999997 3.124 83.80151939999855 11.042 67.56775529999909 11.09 54.69189419999951 9.327 46.42849950000008 8.777 87.06527480000001 3.048 43.741363899999804 3.15 133.0168882 3.209 95.0235011 12.724 49.5834068 2.195 117.50482180000215 11.582 87.44853699999999 10.936 38.69558119999994 10.717 92.63991830000005 3.117 77.31867489999995 10.82 54.08697860000023 9.895 136.41144019999996 10.64 63.52526199999998 3.098 51.06936399999998 3.141)
Error minima by case: (68.2711 2 93.0 2 1.5729 1 2.9726 1 0.0 0 30.0 2 32.0 1 1.0008 2 2.5054 9 2.9851 1 0.5604 1 1.2395 1 4.9588 2 79.0 2 3.9452 1 7.0 1 53.1152 2 1.0 1 0.4735 1 37.0 2 5.0274 2 0.6547 1 72.7564 1 3.2282 2 8.0 1)
Average genome size in population (length): 30.354
Average program size in population (points): 31.354
Average percent parens in population: 0.033
Minimum age in population: 65.7721912478305
Maximum age in population: 70.41743105062028
Average age in population: 68.24465234922307
Median age in population: 68.27601376663914
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.547
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.547
Total error diversity:				 0.049
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 36002885
--- Timings ---
Current time: 1529616148647 milliseconds
Total Time:         152.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.3 seconds, 46.7%
Fitness Testing:     66.0 seconds, 43.2%
Report:              15.4 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 63514.59889999986
Test mean error for best: 31.75730
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -16.8824936591
Correct output: 38.4226857413  | Program output: 16.4500759626 
Correct output: 31.2156798823  | Program output: 19.0          
Correct output: 4.3044396458   | Program output: 13.3318298671 
Correct output: -111.0525036893 | Program output: -62.0525036893
Correct output: -87.8629552961 | Program output: -36.8629552961
Correct output: -29.0127692455 | Program output: 19.0          
Correct output: -11.2072376645 | Program output: 19.0          
Correct output: -21.4176342021 | Program output: -3.8352684041 
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: 47.3097326825 
Correct output: -5.6323311646  | Program output: 0.6323311646  
Correct output: -112.2141334467 | Program output: -14.2141334467
Correct output: 25.2999762248  | Program output: 40.3547566675 
Correct output: -61.1613849928 | Program output: 7.8933954499  
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: 34.3112636201 
Correct output: 18.4734584119  | Program output: 19.0          
Correct output: -69.5397406729 | Program output: -13.5397406729
Correct output: 30.719718724   | Program output: 16.7471089454 
Correct output: 36.1951590265  | Program output: 19.0          
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: 20.814584034  
Correct output: -57.0654428355 | Program output: 10.9893376072 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_swap} {:instruction in2} {:instruction float_yank} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_mod} {:instruction -96.04868215973347} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank float_inc float_swap in2 float_yank integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_mod -96.04868215973347 float_flush integer_stackdepth integer_dup_times integer_stackdepth float_yankdup -8.798867445748158 integer_yank)
Errors: [92.0 3 112.0 2 21.9726 10 12.2157 11 9.0274 10 49.0 3 51.0 2 48.0128 11 30.2072 11 17.5824 9 8.0 2 74.0822 10 6.2647 2 98.0 2 15.0548 11 69.0548 11 62.0 2 23.0548 11 0.5265 11 56.0 2 13.9726 8 17.1952 10 100.0 1 52.0548 11 68.0548 13]
Total: 1285.3332999999998
Mean: 25.706667
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2477.5553522999912
Median total errors in population: 1300.9628000000002
Error averages by case: (141.55877520000138 11.491 156.4404187000001 3.433 94.26872909999994 12.681 60.57055720000044 10.769 66.38568339999998 11.775 100.8889532 4.296 100.88091659999996 3.413 93.53028659999849 11.041 77.36045909999963 11.101 65.63549969999954 9.464 57.19559300000027 8.726 96.7325723 3.388 54.58425709999977 3.424 142.92084480000003 3.513 103.45561770000002 12.767 60.11724949999999 2.538 126.91376940000198 11.454 96.21452790000001 11.022 48.132748699999944 10.709 102.91426990000002 3.385 86.80802929999996 10.861 63.29345630000016 9.908 146.1197766 10.502 73.8224867 3.414 62.260874299999976 3.474)
Error minima by case: (50.2711 2 93.0 2 2.9726 2 2.9726 2 0.3637 1 30.0 2 32.0 1 8.1583 3 5.5581 3 0.5631 1 7.0 1 2.9726 1 5.1093 2 79.0 2 2.1073 2 7.0 1 35.1152 2 1.0 1 0.4735 1 37.0 2 5.0274 2 10.0508 1 54.7564 1 2.246 2 8.0 1)
Average genome size in population (length): 30.222
Average program size in population (points): 31.222
Average percent parens in population: 0.033
Minimum age in population: 66.8571150872516
Maximum age in population: 71.69610473275871
Average age in population: 69.69914877083511
Median age in population: 69.69008994651625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 53
Genome diversity (% unique Plush genomes):	 0.602
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 53
Syntactic diversity (% unique Push programs):	 0.602
Total error diversity:				 0.053
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 36758435
--- Timings ---
Current time: 1529616151796 milliseconds
Total Time:         155.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.9 seconds, 46.7%
Fitness Testing:     67.2 seconds, 43.1%
Report:              15.7 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 59835.79389999987
Test mean error for best: 29.91790
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -32.8824936591
Correct output: 38.4226857413  | Program output: 16.4500759626 
Correct output: 31.2156798823  | Program output: 3.0           
Correct output: 4.3044396458   | Program output: 13.3318298671 
Correct output: -111.0525036893 | Program output: -78.0525036893
Correct output: -87.8629552961 | Program output: -52.8629552961
Correct output: -29.0127692455 | Program output: 3.0           
Correct output: -11.2072376645 | Program output: 3.0           
Correct output: -21.4176342021 | Program output: -8.4176342021 
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: 47.3097326825 
Correct output: -5.6323311646  | Program output: 3.0           
Correct output: -112.2141334467 | Program output: -30.2141334467
Correct output: 25.2999762248  | Program output: 40.3547566675 
Correct output: -61.1613849928 | Program output: 7.8933954499  
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: 34.3112636201 
Correct output: 18.4734584119  | Program output: 3.0           
Correct output: -69.5397406729 | Program output: -29.5397406729
Correct output: 30.719718724   | Program output: 16.7471089454 
Correct output: 36.1951590265  | Program output: 3.0           
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: 20.814584034  
Correct output: -57.0654428355 | Program output: 10.9893376072 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_swap} {:instruction in2} {:instruction float_yank} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_mod} {:instruction -96.04868215973347} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 integer_yank float_stackdepth float_frominteger integer_inc integer_yank float_inc float_swap in2 float_yank integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_mod -96.04868215973347 float_flush integer_stackdepth integer_dup_times integer_stackdepth float_yankdup -8.798867445748158 integer_yank)
Errors: [92.0 3 96.0 2 21.9726 10 28.2157 11 9.0274 10 33.0 3 35.0 2 32.0128 12 14.2072 12 13.0 2 8.0 2 74.0822 10 8.6323 12 82.0 3 15.0548 11 69.0548 11 62.0 2 23.0548 11 15.4735 12 40.0 1 13.9726 8 33.1952 10 100.0 1 52.0548 11 68.0548 13]
Total: 1224.0654999999997
Mean: 24.48131
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2381.4691649999936
Median total errors in population: 1300.9628000000002
Error averages by case: (137.81152390000145 11.339 152.7169696000001 3.262 90.07863299999988 12.617 56.47036380000046 10.831 62.455746799999964 11.745 95.77941840000001 4.113 96.17006819999996 3.223 89.8313652999984 11.064 73.52944269999966 11.138 62.13669489999948 9.387 53.12286050000026 8.6 92.87829520000005 3.493 51.28107069999978 3.312 139.2300179 3.315 98.67990719999999 12.729 58.01026309999995 2.74 122.5864646000021 11.262 91.98820669999995 11.056 44.886694799999944 10.786 99.07011929999999 3.23 82.60797119999994 10.799 60.09107880000032 9.96 142.49278929999994 10.319 70.54496409999994 3.591 59.39723499999994 3.71)
Error minima by case: (69.2711 2 93.0 2 2.9726 2 2.1883 2 1.0 1 30.0 2 32.0 1 17.0785 7 5.5581 9 10.0 1 1.2939 1 2.9726 1 5.2647 2 79.0 2 5.3 2 7.0 1 54.1152 2 1.0 1 0.4735 1 37.0 1 5.0274 2 7.1678 1 73.7564 1 4.0274 2 8.0 1)
Average genome size in population (length): 30.109
Average program size in population (points): 31.109
Average percent parens in population: 0.033
Minimum age in population: 68.53219966419942
Maximum age in population: 72.9649269817242
Average age in population: 71.11278884139838
Median age in population: 71.16843338053847
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.611
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.611
Total error diversity:				 0.054
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 37511160
--- Timings ---
Current time: 1529616154864 milliseconds
Total Time:         159.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.4 seconds, 46.7%
Fitness Testing:     68.5 seconds, 43.1%
Report:              16.1 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 59835.79389999987
Test mean error for best: 29.91790
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -32.8824936591
Correct output: 38.4226857413  | Program output: 16.4500759626 
Correct output: 31.2156798823  | Program output: 3.0           
Correct output: 4.3044396458   | Program output: 13.3318298671 
Correct output: -111.0525036893 | Program output: -78.0525036893
Correct output: -87.8629552961 | Program output: -52.8629552961
Correct output: -29.0127692455 | Program output: 3.0           
Correct output: -11.2072376645 | Program output: 3.0           
Correct output: -21.4176342021 | Program output: -8.4176342021 
Correct output: 27.73349404    | Program output: 19.73349404   
Correct output: -26.7724379815 | Program output: 47.3097326825 
Correct output: -5.6323311646  | Program output: 3.0           
Correct output: -112.2141334467 | Program output: -30.2141334467
Correct output: 25.2999762248  | Program output: 40.3547566675 
Correct output: -61.1613849928 | Program output: 7.8933954499  
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: 34.3112636201 
Correct output: 18.4734584119  | Program output: 3.0           
Correct output: -69.5397406729 | Program output: -29.5397406729
Correct output: 30.719718724   | Program output: 16.7471089454 
Correct output: 36.1951590265  | Program output: 3.0           
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: 20.814584034  
Correct output: -57.0654428355 | Program output: 10.9893376072 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_dup} {:instruction 48.02739022130916} {:instruction 18} {:instruction in1} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_swap} {:instruction in2} {:instruction float_yank} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_mod} {:instruction -96.04868215973347} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank})
Best program: (float_sin integer_dup 48.02739022130916 18 in1 integer_yank float_stackdepth float_frominteger integer_inc integer_yank float_inc float_swap in2 float_yank integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_mod -96.04868215973347 float_flush integer_stackdepth integer_dup_times integer_stackdepth float_yankdup -8.798867445748158 integer_yank)
Errors: [92.0 3 96.0 2 21.9726 10 28.2157 11 9.0274 10 33.0 3 35.0 2 32.0128 12 14.2072 12 13.0 2 8.0 2 74.0822 10 8.6323 12 82.0 3 15.0548 11 69.0548 11 62.0 2 23.0548 11 15.4735 12 40.0 1 13.9726 8 33.1952 10 100.0 1 52.0548 11 68.0548 13]
Total: 1224.0654999999997
Mean: 24.48131
Genome size: 29
Size: 30
Percent parens: 0.033
--- Population Statistics ---
Average total errors in population: 2389.1265746999916
Median total errors in population: 1300.9628000000002
Error averages by case: (137.0467605000013 9.912 152.62127390000003 3.261 86.16044849999983 12.14 56.64124720000043 10.806 61.20795299999991 11.408 95.84489180000003 4.116 96.01109129999999 3.219 89.83651199999846 11.066 73.44595409999938 11.118 62.187357399999506 9.347 53.173747300000336 7.479 97.7631488000001 4.759 51.342768199999774 3.366 139.1227598 3.307 92.08198509999984 12.392 69.3699115999999 4.31 119.46627860000196 9.668 87.71861679999981 11.022 45.79815999999994 10.761 98.97378690000002 3.19 78.66530139999993 10.318 61.10393830000056 9.92 142.1885052 8.754 75.61020369999987 5.004 69.67597329999988 5.425)
Error minima by case: (68.2711 2 54.2935 1 2.9726 1 2.1883 1 0.0 0 30.0 2 13.2739 1 28.3393 7 9.5473 9 10.0 1 8.0 2 1.5373 1 4.9588 2 37.6251 1 6.3 1 6.0 1 53.1152 2 1.0 1 0.4735 1 5.0493 1 5.0274 2 1.0 1 72.7564 1 4.0274 2 7.0 1)
Average genome size in population (length): 30.068
Average program size in population (points): 31.068
Average percent parens in population: 0.033
Minimum age in population: 69.53219966419942
Maximum age in population: 74.68827313428707
Average age in population: 72.44414792459067
Median age in population: 72.52511984183454
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 90
Genome diversity (% unique Plush genomes):	 0.612
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.612
Total error diversity:				 0.072
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 38262860
--- Timings ---
Current time: 1529616157690 milliseconds
Total Time:         161.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.8 seconds, 46.8%
Fitness Testing:     69.7 seconds, 43.0%
Report:              16.4 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 55956.1866
Test mean error for best: 27.97809
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: 38.4226857413 
Correct output: 31.2156798823  | Program output: -0.7843201177 
Correct output: 4.3044396458   | Program output: 4.3044396458  
Correct output: -111.0525036893 | Program output: -21.0525036893
Correct output: -87.8629552961 | Program output: -23.8629552961
Correct output: -29.0127692455 | Program output: -29.0127692455
Correct output: -11.2072376645 | Program output: -11.2072376645
Correct output: -21.4176342021 | Program output: -1.4176342021 
Correct output: 27.73349404    | Program output: 3.73349404    
Correct output: -26.7724379815 | Program output: 43.2275620185 
Correct output: -5.6323311646  | Program output: -5.6323311646 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: 25.2999762248 
Correct output: -61.1613849928 | Program output: 19.8386150072 
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: 11.2564831775 
Correct output: 18.4734584119  | Program output: -17.5265415881
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: 30.719718724  
Correct output: 36.1951590265  | Program output: -11.8048409735
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: 12.7598035914 
Correct output: -57.0654428355 | Program output: 26.9345571645 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction in2} {:instruction 48.02739022130916} {:instruction 19} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_pop} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction -60})
Best program: (integer_mod in2 48.02739022130916 19 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_pop integer_yank integer_yankdup float_swap integer_yankdup float_swap integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max -60)
Errors: [92.0 3 93.0 3 0.0 0 32.0 12 0.0 0 90.0 2 64.0 2 0.0 0 0.0 0 20.0 1 24.0 2 70.0 11 0.0 0 79.0 3 0.0 0 81.0 12 62.0 2 0.0 0 36.0 10 37.0 2 0.0 0 48.0 12 100.0 1 44.0 13 84.0 12]
Total: 1159.0
Mean: 23.18
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2173.0520585000118
Median total errors in population: 1285.3332999999998
Error averages by case: (125.90023680000031 5.795 144.89215580000013 3.393 63.54200690000037 10.553 48.384789200000434 10.708 47.20535859999969 10.334 88.98996419999999 4.208 88.99111399999995 3.335 80.71089089999847 11.048 64.42722269999904 11.137 53.70073339999955 9.109 44.21461130000001 4.273 99.53192120000053 8.638 42.86789569999977 3.861 131.25981029999997 3.488 60.554241799999645 11.286 90.2372814999995 9.12 101.71795730000042 5.117 63.5087689999996 10.869 37.67680839999994 10.684 90.7872741 3.283 56.07916220000034 8.834 52.813565100000254 9.84 132.89471419999995 4.191 79.58941199999944 9.314 89.48516189999945 10.671)
Error minima by case: (43.9726 2 93.0 2 0.0 0 11.2157 2 0.0 0 30.0 2 32.0 1 0.0 0 0.0 0 10.0 1 7.7335 2 19.9726 1 0.0 0 79.0 2 0.0 0 8.0 1 13.9726 2 0.0 0 0.4735 1 37.0 1 0.0 0 10.8048 1 51.9726 1 3.0 2 9.0 1)
Average genome size in population (length): 29.634
Average program size in population (points): 30.634
Average percent parens in population: 0.033
Minimum age in population: 71.10664399989918
Maximum age in population: 75.76330540954781
Average age in population: 73.71391751348462
Median age in population: 73.74629588612542
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 238
Genome diversity (% unique Plush genomes):	 0.48
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 238
Syntactic diversity (% unique Push programs):	 0.48
Total error diversity:				 0.08
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 39003710
--- Timings ---
Current time: 1529616160763 milliseconds
Total Time:         164.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.2 seconds, 46.8%
Fitness Testing:     70.9 seconds, 43.0%
Report:              16.6 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 55956.1866
Test mean error for best: 27.97809
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: 38.4226857413 
Correct output: 31.2156798823  | Program output: -0.7843201177 
Correct output: 4.3044396458   | Program output: 4.3044396458  
Correct output: -111.0525036893 | Program output: -21.0525036893
Correct output: -87.8629552961 | Program output: -23.8629552961
Correct output: -29.0127692455 | Program output: -29.0127692455
Correct output: -11.2072376645 | Program output: -11.2072376645
Correct output: -21.4176342021 | Program output: -1.4176342021 
Correct output: 27.73349404    | Program output: 3.73349404    
Correct output: -26.7724379815 | Program output: 43.2275620185 
Correct output: -5.6323311646  | Program output: -5.6323311646 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: 25.2999762248 
Correct output: -61.1613849928 | Program output: 19.8386150072 
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: 11.2564831775 
Correct output: 18.4734584119  | Program output: -17.5265415881
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: 30.719718724  
Correct output: 36.1951590265  | Program output: -11.8048409735
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: 12.7598035914 
Correct output: -57.0654428355 | Program output: 26.9345571645 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction in2} {:instruction 48.02739022130916} {:instruction 19} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_pop} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction -60})
Best program: (integer_mod in2 48.02739022130916 19 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_pop integer_yank integer_yankdup float_swap integer_yankdup float_swap integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max -60)
Errors: [92.0 3 93.0 3 0.0 0 32.0 12 0.0 0 90.0 2 64.0 2 0.0 0 0.0 0 20.0 1 24.0 2 70.0 11 0.0 0 79.0 3 0.0 0 81.0 12 62.0 2 0.0 0 36.0 10 37.0 2 0.0 0 48.0 12 100.0 1 44.0 13 84.0 12]
Total: 1159.0
Mean: 23.18
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2268.083148000024
Median total errors in population: 1285.3332999999998
Error averages by case: (129.19870680000002 4.108 146.05865010000005 3.354 62.17216470000056 9.957 56.349288400000454 10.794 49.477125599999496 9.943 90.45902000000002 4.133 90.27768999999999 3.255 82.2302947999983 11.113 66.43668379999887 11.183 57.4294919999996 7.821 49.358405700000006 3.003 107.56394440000088 10.12 47.797095399999705 5.312 132.4626365 3.55 55.766192899999595 10.856 105.75289569999912 11.03 102.17920800000009 3.238 61.75761719999943 10.829 45.63212989999997 10.915 92.2326937 3.052 54.84235770000051 8.247 60.75066980000048 9.941 136.85967549999998 2.313 88.63037549999919 10.993 104.60813389999909 12.74)
Error minima by case: (43.9726 2 77.2387 2 0.0 0 11.2157 2 0.0 0 30.0 2 32.0 1 0.0 0 0.0 0 10.0 1 0.5604 1 12.4085 1 0.0 0 60.5703 2 0.0 0 8.0 1 13.9726 2 0.0 0 0.4735 1 17.8959 1 0.0 0 10.1665 1 51.9726 1 4.0274 2 9.0 2)
Average genome size in population (length): 29.212
Average program size in population (points): 30.212
Average percent parens in population: 0.034
Minimum age in population: 72.10664399989918
Maximum age in population: 77.10433389343687
Average age in population: 74.99751176151965
Median age in population: 75.0116736483978
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 211
Genome diversity (% unique Plush genomes):	 0.414
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 211
Syntactic diversity (% unique Push programs):	 0.414
Total error diversity:				 0.089
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 39734010
--- Timings ---
Current time: 1529616163859 milliseconds
Total Time:         168.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.7 seconds, 46.8%
Fitness Testing:     72.2 seconds, 42.9%
Report:              17.0 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 55956.1866
Test mean error for best: 27.97809
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 25.2984736646 
Correct output: -128.8824936591 | Program output: -35.8824936591
Correct output: 38.4226857413  | Program output: 38.4226857413 
Correct output: 31.2156798823  | Program output: -0.7843201177 
Correct output: 4.3044396458   | Program output: 4.3044396458  
Correct output: -111.0525036893 | Program output: -21.0525036893
Correct output: -87.8629552961 | Program output: -23.8629552961
Correct output: -29.0127692455 | Program output: -29.0127692455
Correct output: -11.2072376645 | Program output: -11.2072376645
Correct output: -21.4176342021 | Program output: -1.4176342021 
Correct output: 27.73349404    | Program output: 3.73349404    
Correct output: -26.7724379815 | Program output: 43.2275620185 
Correct output: -5.6323311646  | Program output: -5.6323311646 
Correct output: -112.2141334467 | Program output: -33.2141334467
Correct output: 25.2999762248  | Program output: 25.2999762248 
Correct output: -61.1613849928 | Program output: 19.8386150072 
Correct output: 102.1425886748 | Program output: 40.1425886748 
Correct output: 11.2564831775  | Program output: 11.2564831775 
Correct output: 18.4734584119  | Program output: -17.5265415881
Correct output: -69.5397406729 | Program output: -32.5397406729
Correct output: 30.719718724   | Program output: 30.719718724  
Correct output: 36.1951590265  | Program output: -11.8048409735
Correct output: 121.7837489029 | Program output: 21.7837489029 
Correct output: -31.2401964086 | Program output: 12.7598035914 
Correct output: -57.0654428355 | Program output: 26.9345571645 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction in2} {:instruction 48.02739022130916} {:instruction 19} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_pop} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_add} {:instruction integer_shove} {:instruction float_mod} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction float_max} {:instruction -60})
Best program: (integer_mod in2 48.02739022130916 19 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_pop integer_yank integer_yankdup float_swap integer_yankdup float_swap integer_add integer_shove float_mod integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sub float_max -60)
Errors: [92.0 3 93.0 3 0.0 0 32.0 12 0.0 0 90.0 2 64.0 2 0.0 0 0.0 0 20.0 1 24.0 2 70.0 11 0.0 0 79.0 3 0.0 0 81.0 12 62.0 2 0.0 0 36.0 10 37.0 2 0.0 0 48.0 12 100.0 1 44.0 13 84.0 12]
Total: 1159.0
Mean: 23.18
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2213.904017400015
Median total errors in population: 1224.0654999999997
Error averages by case: (128.9871165000001 4.253 136.91760300000016 3.613 61.33788850000049 9.307 62.59354100000046 10.913 48.5794336999997 9.293 85.25124350000002 4.212 83.29144599999995 3.388 70.75653609999884 10.768 56.073393499999355 10.847 54.63735219999991 4.46 50.150652300000004 3.203 105.62654190000066 10.222 46.35046159999958 9.295 123.41088719999998 4.098 54.99176909999973 10.133 105.19090119999937 11.166 102.2297986000001 3.411 59.9964707999997 10.138 52.384476900000024 11.258 83.09143919999997 2.847 54.459926300000376 7.774 67.83591130000039 10.157 136.61391490000003 2.503 87.23858729999948 11.129 104.85772479999933 12.661)
Error minima by case: (24.2985 2 36.8825 2 0.0 0 0.0 0 0.0 0 30.0 2 31.6985 1 0.0 0 0.0 0 0.9392 1 7.0 1 0.0 0 0.0 0 34.2141 2 0.0 0 0.0 0 39.1426 2 0.0 0 0.0 0 19.9479 1 0.0 0 0.0 0 20.7837 1 0.0 0 0.0 0)
Average genome size in population (length): 29.477
Average program size in population (points): 30.477
Average percent parens in population: 0.033
Minimum age in population: 73.10664399989918
Maximum age in population: 78.65366147459432
Average age in population: 76.29017457618546
Median age in population: 76.311039813761
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 286
Genome diversity (% unique Plush genomes):	 0.449
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 286
Syntactic diversity (% unique Push programs):	 0.449
Total error diversity:				 0.105
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 40470935
--- Timings ---
Current time: 1529616166884 milliseconds
Total Time:         171.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.2 seconds, 46.9%
Fitness Testing:     73.4 seconds, 42.9%
Report:              17.4 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 2151.0
Test mean error for best: 1.07550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 118.2984736646
Correct output: -128.8824936591 | Program output: -127.8824936591
Correct output: 38.4226857413  | Program output: 39.4226857413 
Correct output: 31.2156798823  | Program output: 32.2156798823 
Correct output: 4.3044396458   | Program output: 5.3044396458  
Correct output: -111.0525036893 | Program output: -110.0525036893
Correct output: -87.8629552961 | Program output: -86.8629552961
Correct output: -29.0127692455 | Program output: -28.0127692455
Correct output: -11.2072376645 | Program output: -10.2072376645
Correct output: -21.4176342021 | Program output: -20.4176342021
Correct output: 27.73349404    | Program output: 28.73349404   
Correct output: -26.7724379815 | Program output: -25.7724379815
Correct output: -5.6323311646  | Program output: -4.6323311646 
Correct output: -112.2141334467 | Program output: -111.2141334467
Correct output: 25.2999762248  | Program output: 26.2999762248 
Correct output: -61.1613849928 | Program output: -60.1613849928
Correct output: 102.1425886748 | Program output: 103.1425886748
Correct output: 11.2564831775  | Program output: 12.2564831775 
Correct output: 18.4734584119  | Program output: 19.4734584119 
Correct output: -69.5397406729 | Program output: -68.5397406729
Correct output: 30.719718724   | Program output: 31.719718724  
Correct output: 36.1951590265  | Program output: 37.1951590265 
Correct output: 121.7837489029 | Program output: 122.7837489029
Correct output: -31.2401964086 | Program output: -30.2401964086
Correct output: -57.0654428355 | Program output: -56.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction in2} {:instruction 48.02739022130916} {:instruction 19} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_pop} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_add} {:instruction float_inc} {:instruction float_add} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank})
Best program: (integer_mod in2 48.02739022130916 19 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_pop integer_yank integer_yankdup float_swap integer_yankdup float_swap integer_add float_inc float_add integer_yankdup print_float integer_dup_times float_tan float_yankdup integer_stackdepth integer_dup_times integer_stackdepth float_yankdup -8.798867445748158 integer_yank)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 50.0
Mean: 1.0
Genome size: 30
Size: 31
Percent parens: 0.032
--- Population Statistics ---
Average total errors in population: 2384.383816300008
Median total errors in population: 1224.0654999999997
Error averages by case: (136.45119700000004 4.352 141.0354393000002 4.239 63.43569870000026 6.461 75.84009300000032 11.177 53.52222419999982 6.345 106.85207760000013 4.247 97.09986599999999 3.69 67.77498999999936 7.801 59.3885458999996 7.988 64.3338172 3.299 61.743621600000054 3.192 109.70767730000031 10.589 53.52138289999965 7.926 127.91574889999991 4.511 58.804774699999854 6.974 114.42464749999952 11.401 110.51046340000015 3.548 60.9649779999998 6.948 69.59504119999978 10.843 88.47563889999994 3.322 58.765500600000195 5.543 82.93991660000043 10.658 143.94376829999996 2.701 91.0102308999997 11.766 114.51847659999966 12.287)
Error minima by case: (1.0 1 1.0 1 0.0 0 0.0 0 0.0 0 1.0 1 1.0 1 0.0 0 0.0 0 1.0 1 1.0 1 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0 1.0 1 0.0 0 0.0 0)
Average genome size in population (length): 32.179
Average program size in population (points): 33.179
Average percent parens in population: 0.031
Minimum age in population: 75.10664399989918
Maximum age in population: 79.96440239549618
Average age in population: 78.1224380916892
Median age in population: 78.19396615446786
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 155
Genome diversity (% unique Plush genomes):	 0.469
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 155
Syntactic diversity (% unique Push programs):	 0.469
Total error diversity:				 0.111
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 41275410
--- Timings ---
Current time: 1529616169972 milliseconds
Total Time:         174.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        81.7 seconds, 46.9%
Fitness Testing:     74.6 seconds, 42.8%
Report:              17.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 117.2984736646
Correct output: -128.8824936591 | Program output: -128.8824936591
Correct output: 38.4226857413  | Program output: 38.4226857413 
Correct output: 31.2156798823  | Program output: 31.2156798823 
Correct output: 4.3044396458   | Program output: 4.3044396458  
Correct output: -111.0525036893 | Program output: -111.0525036893
Correct output: -87.8629552961 | Program output: -87.8629552961
Correct output: -29.0127692455 | Program output: -29.0127692455
Correct output: -11.2072376645 | Program output: -11.2072376645
Correct output: -21.4176342021 | Program output: -21.4176342021
Correct output: 27.73349404    | Program output: 27.73349404   
Correct output: -26.7724379815 | Program output: -26.7724379815
Correct output: -5.6323311646  | Program output: -5.6323311646 
Correct output: -112.2141334467 | Program output: -112.2141334467
Correct output: 25.2999762248  | Program output: 25.2999762248 
Correct output: -61.1613849928 | Program output: -61.1613849928
Correct output: 102.1425886748 | Program output: 102.1425886748
Correct output: 11.2564831775  | Program output: 11.2564831775 
Correct output: 18.4734584119  | Program output: 18.4734584119 
Correct output: -69.5397406729 | Program output: -69.5397406729
Correct output: 30.719718724   | Program output: 30.719718724  
Correct output: 36.1951590265  | Program output: 36.1951590265 
Correct output: 121.7837489029 | Program output: 121.7837489029
Correct output: -31.2401964086 | Program output: -31.2401964086
Correct output: -57.0654428355 | Program output: -57.0654428355
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction in2} {:instruction 48.02739022130916} {:instruction 19} {:instruction in1} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_yank} {:instruction integer_pop} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_add} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_yankdup} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_max} {:instruction -8.798867445748158} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_tan} {:instruction float_max} {:instruction -60})
Best program: (integer_mod in2 48.02739022130916 19 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_pop integer_yank integer_yankdup float_swap integer_yankdup float_swap integer_add integer_shove float_add integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_tan float_max -60)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2310.5395150999993
Median total errors in population: 1159.0
Error averages by case: (132.024543 4.403 135.03433760000019 4.503 53.194916200000044 2.245 76.82060180000005 11.495 50.08131219999997 2.182 128.1142961000002 3.667 105.85399050000002 3.58 53.02066860000001 2.468 54.36543880000002 2.584 63.021859099999986 2.799 64.89641610000001 3.187 109.88548709999999 10.794 48.015649700000026 2.471 122.16916429999992 4.517 52.29179670000001 2.367 119.15970320000007 11.654 105.6133664000001 3.576 52.29506799999999 2.329 78.67614569999992 9.925 83.35649170000002 3.613 51.69843069999995 2.182 88.23175690000006 11.45 139.63325020000002 2.644 87.43862360000001 12.463 120.85720090000011 11.691)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 35.931
Average program size in population (points): 36.931
Average percent parens in population: 0.027
Minimum age in population: 77.47662946183046
Maximum age in population: 81.57070837010048
Average age in population: 79.85448517497369
Median age in population: 79.89309527898581
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 171
Genome diversity (% unique Plush genomes):	 0.506
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 171
Syntactic diversity (% unique Push programs):	 0.506
Total error diversity:				 0.076
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 42173685
--- Timings ---
Current time: 1529616173245 milliseconds
Total Time:         177.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.2 seconds, 46.9%
Fitness Testing:     76.0 seconds, 42.9%
Report:              18.0 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 54
Successful program: (integer_mod in2 48.02739022130916 19 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_pop integer_yank integer_yankdup float_swap integer_yankdup float_swap integer_add integer_shove float_add integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_tan float_max -60)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 38


Auto-simplifying with starting size: 38
step: 0
program: (integer_mod in2 48.02739022130916 19 in1 integer_yank integer_yankdup float_frominteger integer_inc integer_yank integer_pop integer_yank integer_yankdup float_swap integer_yankdup float_swap integer_add integer_shove float_add integer_yankdup print_float integer_dup_times float_tan float_yankdup -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_sin float_max -8.798867445748158 integer_yank float_yankdup integer_stackdepth float_tan float_max -60)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 38

step: 500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 117.2984736646 | Program output: 117.2984736646
Correct output: -128.8824936591 | Program output: -128.8824936591
Correct output: 38.4226857413  | Program output: 38.4226857413 
Correct output: 31.2156798823  | Program output: 31.2156798823 
Correct output: 4.3044396458   | Program output: 4.3044396458  
Correct output: -111.0525036893 | Program output: -111.0525036893
Correct output: -87.8629552961 | Program output: -87.8629552961
Correct output: -29.0127692455 | Program output: -29.0127692455
Correct output: -11.2072376645 | Program output: -11.2072376645
Correct output: -21.4176342021 | Program output: -21.4176342021
Correct output: 27.73349404    | Program output: 27.73349404   
Correct output: -26.7724379815 | Program output: -26.7724379815
Correct output: -5.6323311646  | Program output: -5.6323311646 
Correct output: -112.2141334467 | Program output: -112.2141334467
Correct output: 25.2999762248  | Program output: 25.2999762248 
Correct output: -61.1613849928 | Program output: -61.1613849928
Correct output: 102.1425886748 | Program output: 102.1425886748
Correct output: 11.2564831775  | Program output: 11.2564831775 
Correct output: 18.4734584119  | Program output: 18.4734584119 
Correct output: -69.5397406729 | Program output: -69.5397406729
Correct output: 30.719718724   | Program output: 30.719718724  
Correct output: 36.1951590265  | Program output: 36.1951590265 
Correct output: 121.7837489029 | Program output: 121.7837489029
Correct output: -31.2401964086 | Program output: -31.2401964086
Correct output: -57.0654428355 | Program output: -57.0654428355
;;******************************
