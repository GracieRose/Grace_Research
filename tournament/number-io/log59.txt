Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-78.16673471588089 2] -76.16673471588089]
Train Case:   1 | Input/Output: [[-39.47297864449124 -13] -52.47297864449124]
Train Case:   2 | Input/Output: [[-29.726202497325588 35] 5.273797502674412]
Train Case:   3 | Input/Output: [[-68.00550341420953 97] 28.994496585790472]
Train Case:   4 | Input/Output: [[57.39619344857755 -44] 13.396193448577549]
Train Case:   5 | Input/Output: [[91.9676470573304 -72] 19.967647057330396]
Train Case:   6 | Input/Output: [[37.39872929043372 -4] 33.39872929043372]
Train Case:   7 | Input/Output: [[-81.53869571969123 70] -11.538695719691233]
Train Case:   8 | Input/Output: [[-84.29216208521242 13] -71.29216208521242]
Train Case:   9 | Input/Output: [[-63.981166095266715 -17] -80.98116609526672]
Train Case:  10 | Input/Output: [[10.733629747720343 -79] -68.26637025227966]
Train Case:  11 | Input/Output: [[-95.99553869976634 -8] -103.99553869976634]
Train Case:  12 | Input/Output: [[28.667128703929734 -90] -61.332871296070266]
Train Case:  13 | Input/Output: [[-73.0267384409089 -72] -145.0267384409089]
Train Case:  14 | Input/Output: [[31.356138283187676 -87] -55.643861716812324]
Train Case:  15 | Input/Output: [[-26.097759293109576 1] -25.097759293109576]
Train Case:  16 | Input/Output: [[26.934806099427405 75] 101.9348060994274]
Train Case:  17 | Input/Output: [[-6.793759720053515 73] 66.20624027994648]
Train Case:  18 | Input/Output: [[71.84383214610614 57] 128.84383214610614]
Train Case:  19 | Input/Output: [[-11.435662183552054 55] 43.564337816447946]
Train Case:  20 | Input/Output: [[28.542210569342274 28] 56.542210569342274]
Train Case:  21 | Input/Output: [[-95.17023429899791 -46] -141.1702342989979]
Train Case:  22 | Input/Output: [[-37.80865991948919 -75] -112.80865991948919]
Train Case:  23 | Input/Output: [[85.70088348425642 95] 180.70088348425642]
Train Case:  24 | Input/Output: [[-97.42319513040363 57] -40.42319513040363]
Test Case:   0 | Input/Output: [[1.1957984818252783 20] 21.19579848182528]
Test Case:   1 | Input/Output: [[-96.28952137700838 93] -3.289521377008384]
Test Case:   2 | Input/Output: [[23.236025055468176 -60] -36.763974944531824]
Test Case:   3 | Input/Output: [[54.86191229374029 65] 119.86191229374029]
Test Case:   4 | Input/Output: [[-32.717766386589716 33] 0.2822336134102841]
Test Case:   5 | Input/Output: [[-82.56952683447241 -44] -126.56952683447241]
Test Case:   6 | Input/Output: [[78.2525595725638 -6] 72.2525595725638]
Test Case:   7 | Input/Output: [[42.16727713051455 29] 71.16727713051455]
Test Case:   8 | Input/Output: [[-21.59306333939928 -45] -66.59306333939928]
Test Case:   9 | Input/Output: [[25.172825024308793 16] 41.17282502430879]
Test Case:  10 | Input/Output: [[47.34609532407015 98] 145.34609532407015]
Test Case:  11 | Input/Output: [[90.43375670927978 -49] 41.43375670927978]
Test Case:  12 | Input/Output: [[-15.09534625780266 62] 46.90465374219734]
Test Case:  13 | Input/Output: [[68.29804084263517 -59] 9.298040842635174]
Test Case:  14 | Input/Output: [[79.25535055751541 -87] -7.744649442484587]
Test Case:  15 | Input/Output: [[99.57586890301175 -50] 49.57586890301175]
Test Case:  16 | Input/Output: [[-37.48911356877724 97] 59.51088643122276]
Test Case:  17 | Input/Output: [[74.88633393248344 68] 142.88633393248344]
Test Case:  18 | Input/Output: [[61.24414821958101 76] 137.244148219581]
Test Case:  19 | Input/Output: [[42.37373821140952 4] 46.37373821140952]
Test Case:  20 | Input/Output: [[45.7862211228115 -19] 26.786221122811497]
Test Case:  21 | Input/Output: [[62.65801476091045 -76] -13.341985239089553]
Test Case:  22 | Input/Output: [[-46.101353514957985 -47] -93.10135351495799]
Test Case:  23 | Input/Output: [[-76.26896674885481 -43] -119.26896674885481]
Test Case:  24 | Input/Output: [[-69.45342341708209 10] -59.45342341708209]
Test Case:  25 | Input/Output: [[9.670873667837583 15] 24.670873667837583]
Test Case:  26 | Input/Output: [[77.38779644734717 70] 147.38779644734717]
Test Case:  27 | Input/Output: [[14.313138318424578 -81] -66.68686168157542]
Test Case:  28 | Input/Output: [[35.01706677296181 -75] -39.98293322703819]
Test Case:  29 | Input/Output: [[59.471033125079146 -11] 48.471033125079146]
Test Case:  30 | Input/Output: [[-72.4667854637681 10] -62.466785463768105]
Test Case:  31 | Input/Output: [[17.35063730087525 -58] -40.64936269912475]
Test Case:  32 | Input/Output: [[-24.26789575734813 -98] -122.26789575734813]
Test Case:  33 | Input/Output: [[-10.716586615941878 77] 66.28341338405812]
Test Case:  34 | Input/Output: [[-33.31793882913921 -95] -128.31793882913922]
Test Case:  35 | Input/Output: [[24.574106910154313 -58] -33.42589308984569]
Test Case:  36 | Input/Output: [[70.67053818198508 -54] 16.67053818198508]
Test Case:  37 | Input/Output: [[-66.33894394443571 70] 3.6610560555642877]
Test Case:  38 | Input/Output: [[-1.5720333256381167 14] 12.427966674361883]
Test Case:  39 | Input/Output: [[76.93336556169191 33] 109.93336556169191]
Test Case:  40 | Input/Output: [[87.37776730429408 -41] 46.37776730429408]
Test Case:  41 | Input/Output: [[10.341608868652983 -51] -40.65839113134702]
Test Case:  42 | Input/Output: [[0.3187923385638385 36] 36.31879233856384]
Test Case:  43 | Input/Output: [[-98.17790095705554 91] -7.177900957055542]
Test Case:  44 | Input/Output: [[-62.552712310298155 -32] -94.55271231029815]
Test Case:  45 | Input/Output: [[67.48822906715657 -54] 13.488229067156567]
Test Case:  46 | Input/Output: [[43.13057887081078 91] 134.13057887081078]
Test Case:  47 | Input/Output: [[-26.352068945827824 37] 10.647931054172176]
Test Case:  48 | Input/Output: [[-67.62498151455702 -38] -105.62498151455702]
Test Case:  49 | Input/Output: [[-20.3720835702006 -68] -88.3720835702006]
Test Case:  50 | Input/Output: [[65.59854074038199 -35] 30.598540740381992]
Test Case:  51 | Input/Output: [[91.66614645414734 40] 131.66614645414734]
Test Case:  52 | Input/Output: [[-21.471892271974696 -36] -57.471892271974696]
Test Case:  53 | Input/Output: [[-91.55250835901279 13] -78.55250835901279]
Test Case:  54 | Input/Output: [[38.602359964665 38] 76.602359964665]
Test Case:  55 | Input/Output: [[86.60622135742005 24] 110.60622135742005]
Test Case:  56 | Input/Output: [[-72.30820857589487 -87] -159.30820857589487]
Test Case:  57 | Input/Output: [[16.42476427938358 -100] -83.57523572061642]
Test Case:  58 | Input/Output: [[17.105817417507367 -23] -5.894182582492633]
Test Case:  59 | Input/Output: [[-17.960554030000992 60] 42.03944596999901]
Test Case:  60 | Input/Output: [[-81.66804172777151 83] 1.3319582722284906]
Test Case:  61 | Input/Output: [[-23.33485341057633 -76] -99.33485341057633]
Test Case:  62 | Input/Output: [[71.18741958069381 -28] 43.18741958069381]
Test Case:  63 | Input/Output: [[-6.173831009328154 38] 31.826168990671846]
Test Case:  64 | Input/Output: [[-79.80967320973363 90] 10.190326790266369]
Test Case:  65 | Input/Output: [[9.864510783870713 63] 72.86451078387071]
Test Case:  66 | Input/Output: [[73.74162987902633 -10] 63.741629879026334]
Test Case:  67 | Input/Output: [[66.27713860619653 -71] -4.72286139380347]
Test Case:  68 | Input/Output: [[64.8380960944215 -28] 36.8380960944215]
Test Case:  69 | Input/Output: [[65.3879020409864 -21] 44.387902040986404]
Test Case:  70 | Input/Output: [[-27.88618070149886 82] 54.11381929850114]
Test Case:  71 | Input/Output: [[23.792761046424516 80] 103.79276104642452]
Test Case:  72 | Input/Output: [[2.6665970088356516 88] 90.66659700883565]
Test Case:  73 | Input/Output: [[35.98005338097349 13] 48.98005338097349]
Test Case:  74 | Input/Output: [[-84.93492657949567 18] -66.93492657949567]
Test Case:  75 | Input/Output: [[-25.940562506061383 -100] -125.94056250606138]
Test Case:  76 | Input/Output: [[-3.8188013193322377 -46] -49.81880131933224]
Test Case:  77 | Input/Output: [[-17.99480214789446 -76] -93.99480214789446]
Test Case:  78 | Input/Output: [[28.596966555364276 7] 35.596966555364276]
Test Case:  79 | Input/Output: [[24.283625807955417 91] 115.28362580795542]
Test Case:  80 | Input/Output: [[-74.93308680145398 -32] -106.93308680145398]
Test Case:  81 | Input/Output: [[-44.55452153809845 -84] -128.55452153809844]
Test Case:  82 | Input/Output: [[-51.55093524319143 80] 28.449064756808568]
Test Case:  83 | Input/Output: [[34.3178405406546 -24] 10.3178405406546]
Test Case:  84 | Input/Output: [[67.4699483306753 -67] 0.46994833067529385]
Test Case:  85 | Input/Output: [[-16.00016581242876 5] -11.000165812428762]
Test Case:  86 | Input/Output: [[-81.04642161941612 -61] -142.04642161941612]
Test Case:  87 | Input/Output: [[19.131836311232476 19] 38.131836311232476]
Test Case:  88 | Input/Output: [[41.629624688115825 82] 123.62962468811583]
Test Case:  89 | Input/Output: [[-2.316364928790705 -11] -13.316364928790705]
Test Case:  90 | Input/Output: [[-70.06188799654882 33] -37.06188799654882]
Test Case:  91 | Input/Output: [[-48.45032203859976 55] 6.549677961400242]
Test Case:  92 | Input/Output: [[-32.4423173425302 -51] -83.4423173425302]
Test Case:  93 | Input/Output: [[-3.1309085759399125 11] 7.8690914240600875]
Test Case:  94 | Input/Output: [[-75.25728924119207 -56] -131.25728924119207]
Test Case:  95 | Input/Output: [[-56.28761896282448 -21] -77.28761896282448]
Test Case:  96 | Input/Output: [[-67.84476605658993 -63] -130.84476605658995]
Test Case:  97 | Input/Output: [[-92.075702461063 42] -50.075702461063]
Test Case:  98 | Input/Output: [[-14.138147238910733 -35] -49.13814723891073]
Test Case:  99 | Input/Output: [[-68.69979915117739 -100] -168.6997991511774]
Test Case: 100 | Input/Output: [[-75.4017140939377 56] -19.4017140939377]
Test Case: 101 | Input/Output: [[35.61855360467817 -61] -25.38144639532183]
Test Case: 102 | Input/Output: [[-55.68926637375387 -95] -150.68926637375387]
Test Case: 103 | Input/Output: [[-94.48064341379711 45] -49.48064341379711]
Test Case: 104 | Input/Output: [[74.6348788975624 -64] 10.634878897562402]
Test Case: 105 | Input/Output: [[19.251934757839066 85] 104.25193475783907]
Test Case: 106 | Input/Output: [[-2.850218746021625 -47] -49.850218746021625]
Test Case: 107 | Input/Output: [[44.743397312347724 -56] -11.256602687652276]
Test Case: 108 | Input/Output: [[81.22382414392729 71] 152.2238241439273]
Test Case: 109 | Input/Output: [[92.16246645935792 -47] 45.162466459357915]
Test Case: 110 | Input/Output: [[0.15731655479991957 0] 0.15731655479991957]
Test Case: 111 | Input/Output: [[-2.6724203453037205 -64] -66.67242034530372]
Test Case: 112 | Input/Output: [[55.06966773393651 -94] -38.93033226606349]
Test Case: 113 | Input/Output: [[37.714976434440615 -1] 36.714976434440615]
Test Case: 114 | Input/Output: [[-53.964265677378535 -5] -58.964265677378535]
Test Case: 115 | Input/Output: [[-80.51450563706742 -90] -170.51450563706743]
Test Case: 116 | Input/Output: [[-79.64776247221943 90] 10.352237527780574]
Test Case: 117 | Input/Output: [[-39.4458548670787 44] 4.554145132921299]
Test Case: 118 | Input/Output: [[85.10275999890428 -41] 44.102759998904276]
Test Case: 119 | Input/Output: [[28.186319384256677 -1] 27.186319384256677]
Test Case: 120 | Input/Output: [[48.18935315014494 -31] 17.18935315014494]
Test Case: 121 | Input/Output: [[99.83489232666847 63] 162.83489232666847]
Test Case: 122 | Input/Output: [[-97.71580929732345 -21] -118.71580929732345]
Test Case: 123 | Input/Output: [[20.50751382075356 -28] -7.492486179246441]
Test Case: 124 | Input/Output: [[72.09947831549906 -2] 70.09947831549906]
Test Case: 125 | Input/Output: [[98.83830312319171 95] 193.8383031231917]
Test Case: 126 | Input/Output: [[-32.8876651673701 26] -6.887665167370102]
Test Case: 127 | Input/Output: [[-10.809489935975392 38] 27.190510064024608]
Test Case: 128 | Input/Output: [[-90.44457463326376 47] -43.444574633263755]
Test Case: 129 | Input/Output: [[-57.738264712525186 -95] -152.7382647125252]
Test Case: 130 | Input/Output: [[-85.0919716292856 -15] -100.0919716292856]
Test Case: 131 | Input/Output: [[-52.15041232552835 -41] -93.15041232552835]
Test Case: 132 | Input/Output: [[15.890442398074953 -40] -24.109557601925047]
Test Case: 133 | Input/Output: [[54.31028327648505 -30] 24.310283276485052]
Test Case: 134 | Input/Output: [[85.54587630516602 -85] 0.5458763051660185]
Test Case: 135 | Input/Output: [[-24.968792105328518 33] 8.031207894671482]
Test Case: 136 | Input/Output: [[-28.61518321229812 70] 41.38481678770188]
Test Case: 137 | Input/Output: [[33.16204366606098 -47] -13.837956333939019]
Test Case: 138 | Input/Output: [[-29.707786656843055 97] 67.29221334315694]
Test Case: 139 | Input/Output: [[74.19450171085259 52] 126.19450171085259]
Test Case: 140 | Input/Output: [[-4.549022010235944 32] 27.450977989764056]
Test Case: 141 | Input/Output: [[-85.5093266404405 40] -45.509326640440506]
Test Case: 142 | Input/Output: [[79.45293160444774 -36] 43.45293160444774]
Test Case: 143 | Input/Output: [[-33.58930551978018 89] 55.41069448021982]
Test Case: 144 | Input/Output: [[-27.49834991149052 -10] -37.49834991149052]
Test Case: 145 | Input/Output: [[-53.60926451019563 -2] -55.60926451019563]
Test Case: 146 | Input/Output: [[0.2594847160021061 20] 20.259484716002106]
Test Case: 147 | Input/Output: [[14.724424093315164 -71] -56.275575906684836]
Test Case: 148 | Input/Output: [[32.85500234408519 -17] 15.855002344085193]
Test Case: 149 | Input/Output: [[-47.19297610872879 -24] -71.1929761087288]
Test Case: 150 | Input/Output: [[-20.201104403555163 54] 33.79889559644484]
Test Case: 151 | Input/Output: [[-5.857737909732094 -39] -44.857737909732094]
Test Case: 152 | Input/Output: [[-60.33277077355692 -74] -134.33277077355692]
Test Case: 153 | Input/Output: [[-74.05141276247895 -22] -96.05141276247895]
Test Case: 154 | Input/Output: [[97.68072096221877 38] 135.68072096221877]
Test Case: 155 | Input/Output: [[-97.59474006904807 55] -42.59474006904807]
Test Case: 156 | Input/Output: [[-23.40527363507931 4] -19.40527363507931]
Test Case: 157 | Input/Output: [[-50.58277267217519 -74] -124.5827726721752]
Test Case: 158 | Input/Output: [[-77.7686712456512 57] -20.768671245651205]
Test Case: 159 | Input/Output: [[15.54752530887859 -4] 11.54752530887859]
Test Case: 160 | Input/Output: [[-21.311233504671407 -34] -55.31123350467141]
Test Case: 161 | Input/Output: [[72.19696909788829 6] 78.19696909788829]
Test Case: 162 | Input/Output: [[-97.86852446544138 -33] -130.8685244654414]
Test Case: 163 | Input/Output: [[75.3005532677872 -19] 56.300553267787194]
Test Case: 164 | Input/Output: [[-2.3558986836869735 -25] -27.355898683686974]
Test Case: 165 | Input/Output: [[-39.0398260040975 38] -1.039826004097499]
Test Case: 166 | Input/Output: [[43.26066977678167 58] 101.26066977678167]
Test Case: 167 | Input/Output: [[46.03269068179716 -98] -51.96730931820284]
Test Case: 168 | Input/Output: [[6.159324824660416 -18] -11.840675175339584]
Test Case: 169 | Input/Output: [[-4.8891889693656765 -1] -5.8891889693656765]
Test Case: 170 | Input/Output: [[19.500370882972646 -8] 11.500370882972646]
Test Case: 171 | Input/Output: [[-12.868928461898093 -48] -60.86892846189809]
Test Case: 172 | Input/Output: [[-52.869048491423065 74] 21.130951508576935]
Test Case: 173 | Input/Output: [[33.95604626890406 16] 49.95604626890406]
Test Case: 174 | Input/Output: [[-5.306360623766267 21] 15.693639376233733]
Test Case: 175 | Input/Output: [[-93.75185339841721 -88] -181.7518533984172]
Test Case: 176 | Input/Output: [[-28.637120318543637 -86] -114.63712031854364]
Test Case: 177 | Input/Output: [[-24.010206370983894 -47] -71.0102063709839]
Test Case: 178 | Input/Output: [[-54.923032099730904 74] 19.076967900269096]
Test Case: 179 | Input/Output: [[-49.76011904243735 67] 17.239880957562647]
Test Case: 180 | Input/Output: [[77.54361255029752 68] 145.54361255029752]
Test Case: 181 | Input/Output: [[14.645324262109057 60] 74.64532426210906]
Test Case: 182 | Input/Output: [[14.270504497960431 21] 35.27050449796043]
Test Case: 183 | Input/Output: [[9.558291891991004 -18] -8.441708108008996]
Test Case: 184 | Input/Output: [[-79.48642595190829 66] -13.486425951908288]
Test Case: 185 | Input/Output: [[49.005760581449124 -88] -38.994239418550876]
Test Case: 186 | Input/Output: [[-50.473571678102935 54] 3.5264283218970647]
Test Case: 187 | Input/Output: [[-48.56281109474263 7] -41.56281109474263]
Test Case: 188 | Input/Output: [[-54.211233672251716 -62] -116.21123367225172]
Test Case: 189 | Input/Output: [[-89.94678623402224 -67] -156.94678623402223]
Test Case: 190 | Input/Output: [[-1.3415873180796325 85] 83.65841268192037]
Test Case: 191 | Input/Output: [[-92.52962868410441 83] -9.52962868410441]
Test Case: 192 | Input/Output: [[73.24085934528156 65] 138.24085934528156]
Test Case: 193 | Input/Output: [[-11.380054365798102 -100] -111.3800543657981]
Test Case: 194 | Input/Output: [[41.794648515365964 -70] -28.205351484634036]
Test Case: 195 | Input/Output: [[-6.260064816297458 -1] -7.260064816297458]
Test Case: 196 | Input/Output: [[-4.865182600971707 -5] -9.865182600971707]
Test Case: 197 | Input/Output: [[96.7161760401157 -46] 50.7161760401157]
Test Case: 198 | Input/Output: [[-22.26628230038594 -33] -55.26628230038594]
Test Case: 199 | Input/Output: [[-5.542994588163168 -39] -44.54299458816317]
Test Case: 200 | Input/Output: [[37.12014083382914 -96] -58.87985916617086]
Test Case: 201 | Input/Output: [[-90.47804826168628 38] -52.47804826168628]
Test Case: 202 | Input/Output: [[56.09226572293545 24] 80.09226572293545]
Test Case: 203 | Input/Output: [[-7.491809337267256 -56] -63.491809337267256]
Test Case: 204 | Input/Output: [[-37.228148524945624 -94] -131.22814852494562]
Test Case: 205 | Input/Output: [[-45.87695985310016 -72] -117.87695985310016]
Test Case: 206 | Input/Output: [[-24.411211894759717 4] -20.411211894759717]
Test Case: 207 | Input/Output: [[36.512383010337714 -53] -16.487616989662286]
Test Case: 208 | Input/Output: [[17.17737968177346 -68] -50.82262031822654]
Test Case: 209 | Input/Output: [[50.457003059972635 58] 108.45700305997264]
Test Case: 210 | Input/Output: [[41.57332113354633 -28] 13.57332113354633]
Test Case: 211 | Input/Output: [[6.1550458865519175 67] 73.15504588655192]
Test Case: 212 | Input/Output: [[-33.29993257783718 -12] -45.29993257783718]
Test Case: 213 | Input/Output: [[-44.12474006770197 59] 14.875259932298029]
Test Case: 214 | Input/Output: [[47.82806883794976 99] 146.82806883794976]
Test Case: 215 | Input/Output: [[52.551018064360875 -86] -33.448981935639125]
Test Case: 216 | Input/Output: [[96.40505620107032 -60] 36.40505620107032]
Test Case: 217 | Input/Output: [[1.402662659061832 93] 94.40266265906183]
Test Case: 218 | Input/Output: [[-2.2492277240059053 60] 57.750772275994095]
Test Case: 219 | Input/Output: [[51.55485214115589 19] 70.55485214115589]
Test Case: 220 | Input/Output: [[-22.12125632496334 -65] -87.12125632496334]
Test Case: 221 | Input/Output: [[-35.961646739862374 -8] -43.961646739862374]
Test Case: 222 | Input/Output: [[10.215475640051878 62] 72.21547564005188]
Test Case: 223 | Input/Output: [[-21.756513899660447 85] 63.24348610033955]
Test Case: 224 | Input/Output: [[-81.04206284420039 98] 16.957937155799613]
Test Case: 225 | Input/Output: [[-74.72299815972904 57] -17.722998159729045]
Test Case: 226 | Input/Output: [[49.224254378635806 -30] 19.224254378635806]
Test Case: 227 | Input/Output: [[-58.22100796589258 31] -27.221007965892582]
Test Case: 228 | Input/Output: [[-46.879277729442336 32] -14.879277729442336]
Test Case: 229 | Input/Output: [[-67.01322925408601 88] 20.986770745913987]
Test Case: 230 | Input/Output: [[-62.88388922142476 -28] -90.88388922142477]
Test Case: 231 | Input/Output: [[31.156093134494256 93] 124.15609313449426]
Test Case: 232 | Input/Output: [[88.88463671234052 62] 150.88463671234052]
Test Case: 233 | Input/Output: [[63.338862853575165 -45] 18.338862853575165]
Test Case: 234 | Input/Output: [[-69.72431939585286 -67] -136.72431939585286]
Test Case: 235 | Input/Output: [[92.86551603713676 -31] 61.86551603713676]
Test Case: 236 | Input/Output: [[98.51514304341512 72] 170.51514304341512]
Test Case: 237 | Input/Output: [[-5.472057441765884 -13] -18.472057441765884]
Test Case: 238 | Input/Output: [[-84.47823706181686 16] -68.47823706181686]
Test Case: 239 | Input/Output: [[-24.104423721434017 28] 3.895576278565983]
Test Case: 240 | Input/Output: [[-86.27371707206568 64] -22.27371707206568]
Test Case: 241 | Input/Output: [[7.553746699960627 55] 62.55374669996063]
Test Case: 242 | Input/Output: [[78.38620443815412 83] 161.38620443815412]
Test Case: 243 | Input/Output: [[53.16605159766749 -97] -43.83394840233251]
Test Case: 244 | Input/Output: [[62.44614795182008 100] 162.44614795182008]
Test Case: 245 | Input/Output: [[27.84398048617993 -66] -38.15601951382007]
Test Case: 246 | Input/Output: [[-74.02705357246965 -80] -154.02705357246964]
Test Case: 247 | Input/Output: [[-44.19244355832501 -31] -75.19244355832501]
Test Case: 248 | Input/Output: [[-87.24581756092908 87] -0.24581756092908336]
Test Case: 249 | Input/Output: [[53.63007634624125 80] 133.63007634624125]
Test Case: 250 | Input/Output: [[-45.80390490297566 62] 16.19609509702434]
Test Case: 251 | Input/Output: [[-72.13399956752582 -2] -74.13399956752582]
Test Case: 252 | Input/Output: [[18.875230761291874 31] 49.875230761291874]
Test Case: 253 | Input/Output: [[95.98745216028647 -89] 6.987452160286466]
Test Case: 254 | Input/Output: [[-64.26832812511478 42] -22.268328125114778]
Test Case: 255 | Input/Output: [[-74.28087809446131 24] -50.280878094461315]
Test Case: 256 | Input/Output: [[52.79798831472283 -58] -5.202011685277171]
Test Case: 257 | Input/Output: [[70.77092051053364 -24] 46.77092051053364]
Test Case: 258 | Input/Output: [[94.00925690868272 48] 142.00925690868272]
Test Case: 259 | Input/Output: [[-9.218101522282112 -41] -50.21810152228211]
Test Case: 260 | Input/Output: [[-12.66303447139694 40] 27.33696552860306]
Test Case: 261 | Input/Output: [[16.41041055026517 -36] -19.58958944973483]
Test Case: 262 | Input/Output: [[-22.439460987746585 18] -4.439460987746585]
Test Case: 263 | Input/Output: [[26.788311777857317 -15] 11.788311777857317]
Test Case: 264 | Input/Output: [[-14.560179243756252 17] 2.4398207562437477]
Test Case: 265 | Input/Output: [[67.64193520589282 51] 118.64193520589282]
Test Case: 266 | Input/Output: [[51.83679640843437 80] 131.83679640843437]
Test Case: 267 | Input/Output: [[-49.358127555480195 -60] -109.3581275554802]
Test Case: 268 | Input/Output: [[-80.46194552201153 66] -14.461945522011533]
Test Case: 269 | Input/Output: [[79.25403771838228 61] 140.25403771838228]
Test Case: 270 | Input/Output: [[0.628249036820435 42] 42.628249036820435]
Test Case: 271 | Input/Output: [[-90.31733924893778 -4] -94.31733924893778]
Test Case: 272 | Input/Output: [[-22.696656387877653 21] -1.6966563878776526]
Test Case: 273 | Input/Output: [[5.826466951528886 40] 45.826466951528886]
Test Case: 274 | Input/Output: [[86.08350521885691 -11] 75.08350521885691]
Test Case: 275 | Input/Output: [[76.06756341521134 97] 173.06756341521134]
Test Case: 276 | Input/Output: [[85.38767793466263 -21] 64.38767793466263]
Test Case: 277 | Input/Output: [[46.20169177369942 -18] 28.201691773699423]
Test Case: 278 | Input/Output: [[-0.980027501427088 -35] -35.98002750142709]
Test Case: 279 | Input/Output: [[-71.65378971910998 -19] -90.65378971910998]
Test Case: 280 | Input/Output: [[-40.84444123900282 26] -14.844441239002819]
Test Case: 281 | Input/Output: [[44.627067388158736 -28] 16.627067388158736]
Test Case: 282 | Input/Output: [[-8.667272696852763 94] 85.33272730314724]
Test Case: 283 | Input/Output: [[-53.162118340027 -58] -111.162118340027]
Test Case: 284 | Input/Output: [[-26.25161840067669 78] 51.74838159932331]
Test Case: 285 | Input/Output: [[-43.08160665350602 -17] -60.08160665350602]
Test Case: 286 | Input/Output: [[-18.94864151676721 62] 43.05135848323279]
Test Case: 287 | Input/Output: [[-16.755504037739954 -21] -37.755504037739954]
Test Case: 288 | Input/Output: [[-57.1698626717702 -54] -111.1698626717702]
Test Case: 289 | Input/Output: [[-24.464740072297772 86] 61.53525992770223]
Test Case: 290 | Input/Output: [[63.58905290429618 45] 108.58905290429618]
Test Case: 291 | Input/Output: [[-69.73062367715634 -46] -115.73062367715634]
Test Case: 292 | Input/Output: [[-50.60506341633635 -94] -144.60506341633635]
Test Case: 293 | Input/Output: [[-93.70510034741272 26] -67.70510034741272]
Test Case: 294 | Input/Output: [[-33.181748807814586 46] 12.818251192185414]
Test Case: 295 | Input/Output: [[-97.73712221634095 -45] -142.73712221634094]
Test Case: 296 | Input/Output: [[62.55228028084122 -1] 61.55228028084122]
Test Case: 297 | Input/Output: [[92.70334678459221 -80] 12.703346784592213]
Test Case: 298 | Input/Output: [[-7.086253803856792 84] 76.91374619614321]
Test Case: 299 | Input/Output: [[7.461909234277144 -100] -92.53809076572286]
Test Case: 300 | Input/Output: [[-73.80670842674759 64] -9.80670842674759]
Test Case: 301 | Input/Output: [[84.30384512197898 -6] 78.30384512197898]
Test Case: 302 | Input/Output: [[59.58440430909471 53] 112.58440430909471]
Test Case: 303 | Input/Output: [[15.1445516390542 -59] -43.8554483609458]
Test Case: 304 | Input/Output: [[25.939091101754258 -46] -20.060908898245742]
Test Case: 305 | Input/Output: [[-9.701521632584374 73] 63.298478367415626]
Test Case: 306 | Input/Output: [[65.74826611333339 -97] -31.251733886666614]
Test Case: 307 | Input/Output: [[-58.62562605306398 18] -40.62562605306398]
Test Case: 308 | Input/Output: [[-52.00728007093227 -69] -121.00728007093227]
Test Case: 309 | Input/Output: [[-91.08786558743749 33] -58.08786558743749]
Test Case: 310 | Input/Output: [[-78.02581436982625 -26] -104.02581436982625]
Test Case: 311 | Input/Output: [[61.792447562917175 -92] -30.207552437082825]
Test Case: 312 | Input/Output: [[-70.93804247834179 44] -26.938042478341785]
Test Case: 313 | Input/Output: [[79.31764188436327 -53] 26.31764188436327]
Test Case: 314 | Input/Output: [[97.13586673654336 -62] 35.13586673654336]
Test Case: 315 | Input/Output: [[23.777433953006494 87] 110.7774339530065]
Test Case: 316 | Input/Output: [[-2.362657283826735 -99] -101.36265728382674]
Test Case: 317 | Input/Output: [[41.330107484897724 -88] -46.669892515102276]
Test Case: 318 | Input/Output: [[0.4565953641623537 -2] -1.5434046358376463]
Test Case: 319 | Input/Output: [[-37.20624433543578 65] 27.793755664564223]
Test Case: 320 | Input/Output: [[98.01491965205682 -48] 50.01491965205682]
Test Case: 321 | Input/Output: [[13.844483048767927 -79] -65.15551695123207]
Test Case: 322 | Input/Output: [[65.00787692569395 92] 157.00787692569395]
Test Case: 323 | Input/Output: [[78.84749319070795 75] 153.84749319070795]
Test Case: 324 | Input/Output: [[-48.62561697658758 66] 17.37438302341242]
Test Case: 325 | Input/Output: [[-13.43617619343604 92] 78.56382380656396]
Test Case: 326 | Input/Output: [[62.77501776368382 -18] 44.77501776368382]
Test Case: 327 | Input/Output: [[-24.415941462940822 -78] -102.41594146294082]
Test Case: 328 | Input/Output: [[27.695316778620466 51] 78.69531677862047]
Test Case: 329 | Input/Output: [[85.52565426970429 -3] 82.52565426970429]
Test Case: 330 | Input/Output: [[57.05806900595988 28] 85.05806900595988]
Test Case: 331 | Input/Output: [[73.4390498109639 61] 134.4390498109639]
Test Case: 332 | Input/Output: [[86.50628457421195 5] 91.50628457421195]
Test Case: 333 | Input/Output: [[6.745549409555423 -16] -9.254450590444577]
Test Case: 334 | Input/Output: [[-30.643645105313013 -61] -91.64364510531301]
Test Case: 335 | Input/Output: [[19.653278438585644 99] 118.65327843858564]
Test Case: 336 | Input/Output: [[-61.096366002804594 -55] -116.09636600280459]
Test Case: 337 | Input/Output: [[12.975700355956633 16] 28.975700355956633]
Test Case: 338 | Input/Output: [[88.28953494213474 -45] 43.289534942134736]
Test Case: 339 | Input/Output: [[-25.38589546105665 -98] -123.38589546105665]
Test Case: 340 | Input/Output: [[6.545694888824244 -59] -52.454305111175756]
Test Case: 341 | Input/Output: [[-28.70895608866182 -6] -34.70895608866182]
Test Case: 342 | Input/Output: [[17.927252335008433 -33] -15.072747664991567]
Test Case: 343 | Input/Output: [[38.9174748444606 -6] 32.9174748444606]
Test Case: 344 | Input/Output: [[-65.16616919135586 -96] -161.16616919135586]
Test Case: 345 | Input/Output: [[-29.15530664052504 3] -26.15530664052504]
Test Case: 346 | Input/Output: [[-3.3519274223265114 -73] -76.35192742232651]
Test Case: 347 | Input/Output: [[-64.25884784416287 0] -64.25884784416287]
Test Case: 348 | Input/Output: [[-81.2677270411112 -14] -95.2677270411112]
Test Case: 349 | Input/Output: [[36.81120010772426 9] 45.81120010772426]
Test Case: 350 | Input/Output: [[-44.68158613360338 -2] -46.68158613360338]
Test Case: 351 | Input/Output: [[-10.897607390598907 17] 6.102392609401093]
Test Case: 352 | Input/Output: [[-71.83362470367287 -96] -167.83362470367285]
Test Case: 353 | Input/Output: [[-96.49800775046464 19] -77.49800775046464]
Test Case: 354 | Input/Output: [[60.480872146241836 65] 125.48087214624184]
Test Case: 355 | Input/Output: [[56.69563873472231 39] 95.69563873472231]
Test Case: 356 | Input/Output: [[96.8035269338699 96] 192.8035269338699]
Test Case: 357 | Input/Output: [[-39.82472985541303 23] -16.824729855413032]
Test Case: 358 | Input/Output: [[7.522139527802963 69] 76.52213952780296]
Test Case: 359 | Input/Output: [[-0.22992563192967452 39] 38.770074368070325]
Test Case: 360 | Input/Output: [[-32.70751759791504 8] -24.707517597915043]
Test Case: 361 | Input/Output: [[-6.155093717998184 -73] -79.15509371799818]
Test Case: 362 | Input/Output: [[38.31961711294781 99] 137.3196171129478]
Test Case: 363 | Input/Output: [[73.32388193864398 -85] -11.676118061356021]
Test Case: 364 | Input/Output: [[35.05440542303532 -80] -44.94559457696468]
Test Case: 365 | Input/Output: [[-45.56396407604917 65] 19.436035923950833]
Test Case: 366 | Input/Output: [[66.3410171856386 -85] -18.658982814361394]
Test Case: 367 | Input/Output: [[-61.460099658290865 -30] -91.46009965829086]
Test Case: 368 | Input/Output: [[-23.402809323635253 -59] -82.40280932363525]
Test Case: 369 | Input/Output: [[-54.49202111467255 56] 1.5079788853274465]
Test Case: 370 | Input/Output: [[48.78819607505767 -55] -6.2118039249423305]
Test Case: 371 | Input/Output: [[-70.79284178730597 88] 17.207158212694026]
Test Case: 372 | Input/Output: [[46.696989705679954 42] 88.69698970567995]
Test Case: 373 | Input/Output: [[-36.6569734306053 61] 24.343026569394702]
Test Case: 374 | Input/Output: [[33.18784363216059 87] 120.1878436321606]
Test Case: 375 | Input/Output: [[-71.186943832196 18] -53.18694383219599]
Test Case: 376 | Input/Output: [[-31.448821417118694 -6] -37.448821417118694]
Test Case: 377 | Input/Output: [[76.78510088700051 47] 123.78510088700051]
Test Case: 378 | Input/Output: [[-32.41627270281677 -4] -36.41627270281677]
Test Case: 379 | Input/Output: [[-23.733546743715124 -49] -72.73354674371512]
Test Case: 380 | Input/Output: [[69.46505798187482 46] 115.46505798187482]
Test Case: 381 | Input/Output: [[-98.72479174590067 -84] -182.7247917459007]
Test Case: 382 | Input/Output: [[90.22051369555473 -82] 8.220513695554729]
Test Case: 383 | Input/Output: [[49.36925112858884 -99] -49.63074887141116]
Test Case: 384 | Input/Output: [[-58.61121532076567 98] 39.38878467923433]
Test Case: 385 | Input/Output: [[53.1249686645084 -48] 5.124968664508401]
Test Case: 386 | Input/Output: [[33.39170742513261 57] 90.39170742513261]
Test Case: 387 | Input/Output: [[83.88711963778576 8] 91.88711963778576]
Test Case: 388 | Input/Output: [[85.34712568861707 19] 104.34712568861707]
Test Case: 389 | Input/Output: [[-57.07652524256963 -91] -148.07652524256963]
Test Case: 390 | Input/Output: [[-86.04759537610502 2] -84.04759537610502]
Test Case: 391 | Input/Output: [[72.99632789208181 62] 134.9963278920818]
Test Case: 392 | Input/Output: [[30.138217048314203 2] 32.1382170483142]
Test Case: 393 | Input/Output: [[-4.212958101667951 -69] -73.21295810166795]
Test Case: 394 | Input/Output: [[13.446437324186846 27] 40.446437324186846]
Test Case: 395 | Input/Output: [[58.14569392748851 -79] -20.85430607251149]
Test Case: 396 | Input/Output: [[67.0130507221885 -25] 42.013050722188495]
Test Case: 397 | Input/Output: [[2.215194474121745 1] 3.215194474121745]
Test Case: 398 | Input/Output: [[-1.3035416968486118 -59] -60.30354169684861]
Test Case: 399 | Input/Output: [[77.96222947711072 -61] 16.962229477110725]
Test Case: 400 | Input/Output: [[14.26020940324375 88] 102.26020940324375]
Test Case: 401 | Input/Output: [[14.558780477154684 -7] 7.558780477154684]
Test Case: 402 | Input/Output: [[-25.252069629436534 -79] -104.25206962943653]
Test Case: 403 | Input/Output: [[75.27925877952453 -86] -10.720741220475475]
Test Case: 404 | Input/Output: [[12.341910135535272 47] 59.34191013553527]
Test Case: 405 | Input/Output: [[-73.60109506769365 -40] -113.60109506769365]
Test Case: 406 | Input/Output: [[-58.9253013391442 81] 22.074698660855802]
Test Case: 407 | Input/Output: [[20.149935803940906 -50] -29.850064196059094]
Test Case: 408 | Input/Output: [[-79.08259706058357 36] -43.082597060583566]
Test Case: 409 | Input/Output: [[5.669405854383896 -9] -3.3305941456161037]
Test Case: 410 | Input/Output: [[-77.47896696777559 32] -45.47896696777559]
Test Case: 411 | Input/Output: [[42.76573852485467 -25] 17.76573852485467]
Test Case: 412 | Input/Output: [[80.2384071518481 -60] 20.238407151848094]
Test Case: 413 | Input/Output: [[-95.27255277130087 -68] -163.27255277130087]
Test Case: 414 | Input/Output: [[89.7290375798946 -100] -10.270962420105405]
Test Case: 415 | Input/Output: [[-67.57062233412982 -77] -144.57062233412984]
Test Case: 416 | Input/Output: [[-97.79034521451734 77] -20.790345214517345]
Test Case: 417 | Input/Output: [[97.49632929137385 -44] 53.496329291373854]
Test Case: 418 | Input/Output: [[-29.148107431884966 -31] -60.148107431884966]
Test Case: 419 | Input/Output: [[-34.647862289483626 46] 11.352137710516374]
Test Case: 420 | Input/Output: [[-15.870008254999561 80] 64.12999174500044]
Test Case: 421 | Input/Output: [[32.36314799898392 35] 67.36314799898392]
Test Case: 422 | Input/Output: [[-19.683476425447367 73] 53.31652357455263]
Test Case: 423 | Input/Output: [[91.72684043241154 69] 160.72684043241154]
Test Case: 424 | Input/Output: [[37.3238667203008 -13] 24.3238667203008]
Test Case: 425 | Input/Output: [[45.47107583053702 96] 141.47107583053702]
Test Case: 426 | Input/Output: [[89.62488550639415 -32] 57.62488550639415]
Test Case: 427 | Input/Output: [[-70.12431485595236 9] -61.12431485595236]
Test Case: 428 | Input/Output: [[52.494690595816934 -15] 37.494690595816934]
Test Case: 429 | Input/Output: [[-12.868039936857372 38] 25.13196006314263]
Test Case: 430 | Input/Output: [[-89.86479500266586 42] -47.86479500266586]
Test Case: 431 | Input/Output: [[79.2739763267933 99] 178.2739763267933]
Test Case: 432 | Input/Output: [[-81.82212312506726 98] 16.177876874932736]
Test Case: 433 | Input/Output: [[-48.98804700348249 14] -34.98804700348249]
Test Case: 434 | Input/Output: [[-85.55672907149585 83] -2.5567290714958517]
Test Case: 435 | Input/Output: [[-92.19753186840944 -60] -152.19753186840944]
Test Case: 436 | Input/Output: [[93.44887093711881 -77] 16.448870937118812]
Test Case: 437 | Input/Output: [[29.168048343155817 40] 69.16804834315582]
Test Case: 438 | Input/Output: [[-99.32382903971168 43] -56.32382903971168]
Test Case: 439 | Input/Output: [[22.39558066504756 -75] -52.60441933495244]
Test Case: 440 | Input/Output: [[70.70027206829042 -26] 44.70027206829042]
Test Case: 441 | Input/Output: [[23.848661568416517 -57] -33.15133843158348]
Test Case: 442 | Input/Output: [[-58.048715189776324 -12] -70.04871518977632]
Test Case: 443 | Input/Output: [[-63.035847253537305 -55] -118.0358472535373]
Test Case: 444 | Input/Output: [[29.898447794444536 -11] 18.898447794444536]
Test Case: 445 | Input/Output: [[-13.934602627419082 -40] -53.93460262741908]
Test Case: 446 | Input/Output: [[-13.846266064141162 87] 73.15373393585884]
Test Case: 447 | Input/Output: [[-71.92964242135545 97] 25.070357578644547]
Test Case: 448 | Input/Output: [[-46.943257975743016 -18] -64.94325797574302]
Test Case: 449 | Input/Output: [[30.64924871901917 -56] -25.35075128098083]
Test Case: 450 | Input/Output: [[-14.78212005952848 1] -13.78212005952848]
Test Case: 451 | Input/Output: [[-42.88493966156302 95] 52.11506033843698]
Test Case: 452 | Input/Output: [[84.48483662449843 -33] 51.48483662449843]
Test Case: 453 | Input/Output: [[57.79456447491654 -91] -33.20543552508346]
Test Case: 454 | Input/Output: [[10.897200601045938 28] 38.89720060104594]
Test Case: 455 | Input/Output: [[-23.659819838928797 -24] -47.6598198389288]
Test Case: 456 | Input/Output: [[84.6363536157287 -83] 1.6363536157286944]
Test Case: 457 | Input/Output: [[37.29450141361664 81] 118.29450141361664]
Test Case: 458 | Input/Output: [[71.20665238276771 96] 167.20665238276771]
Test Case: 459 | Input/Output: [[26.475150837663634 68] 94.47515083766363]
Test Case: 460 | Input/Output: [[35.47901373162108 51] 86.47901373162108]
Test Case: 461 | Input/Output: [[79.38936425919115 -59] 20.389364259191154]
Test Case: 462 | Input/Output: [[0.2921689728089518 91] 91.29216897280895]
Test Case: 463 | Input/Output: [[92.38734090705313 -50] 42.38734090705313]
Test Case: 464 | Input/Output: [[-22.64647325462947 3] -19.64647325462947]
Test Case: 465 | Input/Output: [[-81.86903520941078 50] -31.869035209410782]
Test Case: 466 | Input/Output: [[40.81325934313756 97] 137.81325934313756]
Test Case: 467 | Input/Output: [[68.33383497235528 -60] 8.333834972355277]
Test Case: 468 | Input/Output: [[29.445771724655714 14] 43.445771724655714]
Test Case: 469 | Input/Output: [[-84.81300259293884 28] -56.813002592938844]
Test Case: 470 | Input/Output: [[96.58568337324661 -6] 90.58568337324661]
Test Case: 471 | Input/Output: [[-40.917548042230514 22] -18.917548042230514]
Test Case: 472 | Input/Output: [[-48.85696938388531 30] -18.856969383885307]
Test Case: 473 | Input/Output: [[-5.673961009387256 -75] -80.67396100938726]
Test Case: 474 | Input/Output: [[80.18108181240959 56] 136.1810818124096]
Test Case: 475 | Input/Output: [[-32.90649928966083 68] 35.09350071033917]
Test Case: 476 | Input/Output: [[-92.52773046494447 -78] -170.52773046494445]
Test Case: 477 | Input/Output: [[-52.608914307791935 53] 0.39108569220806544]
Test Case: 478 | Input/Output: [[-9.442475241002526 12] 2.5575247589974737]
Test Case: 479 | Input/Output: [[-2.386200112120207 -13] -15.386200112120207]
Test Case: 480 | Input/Output: [[41.99585286304682 26] 67.99585286304682]
Test Case: 481 | Input/Output: [[-43.05260510013036 -49] -92.05260510013036]
Test Case: 482 | Input/Output: [[-9.576141780651696 18] 8.423858219348304]
Test Case: 483 | Input/Output: [[16.10607335410654 54] 70.10607335410654]
Test Case: 484 | Input/Output: [[34.79674104483834 -62] -27.203258955161658]
Test Case: 485 | Input/Output: [[48.21052867352776 -76] -27.78947132647224]
Test Case: 486 | Input/Output: [[49.16703170466107 -88] -38.83296829533893]
Test Case: 487 | Input/Output: [[85.27308633662003 81] 166.27308633662003]
Test Case: 488 | Input/Output: [[-68.44224121965503 82] 13.557758780344969]
Test Case: 489 | Input/Output: [[-29.085217326945795 23] -6.085217326945795]
Test Case: 490 | Input/Output: [[-72.24209674344058 9] -63.242096743440584]
Test Case: 491 | Input/Output: [[14.172165636571748 9] 23.172165636571748]
Test Case: 492 | Input/Output: [[6.764627410630197 -21] -14.235372589369803]
Test Case: 493 | Input/Output: [[13.760469927119019 -93] -79.23953007288098]
Test Case: 494 | Input/Output: [[-19.082483506108574 42] 22.917516493891426]
Test Case: 495 | Input/Output: [[-8.962317599607843 82] 73.03768240039216]
Test Case: 496 | Input/Output: [[-59.0853838421505 -28] -87.08538384215049]
Test Case: 497 | Input/Output: [[19.21695909037777 -26] -6.78304090962223]
Test Case: 498 | Input/Output: [[-93.10132001182372 -81] -174.1013200118237]
Test Case: 499 | Input/Output: [[-14.91050137283753 -41] -55.91050137283753]
Test Case: 500 | Input/Output: [[-22.89060763788187 -60] -82.89060763788187]
Test Case: 501 | Input/Output: [[15.298699446815618 -50] -34.70130055318438]
Test Case: 502 | Input/Output: [[50.46225237298901 -8] 42.46225237298901]
Test Case: 503 | Input/Output: [[59.76001260169073 -33] 26.760012601690732]
Test Case: 504 | Input/Output: [[-71.93960006515789 36] -35.93960006515789]
Test Case: 505 | Input/Output: [[-12.63482006148186 -67] -79.63482006148186]
Test Case: 506 | Input/Output: [[-54.55586039323963 89] 34.44413960676037]
Test Case: 507 | Input/Output: [[-87.21135657643428 -75] -162.2113565764343]
Test Case: 508 | Input/Output: [[-33.2520454998438 78] 44.7479545001562]
Test Case: 509 | Input/Output: [[-14.66862296082563 -30] -44.66862296082563]
Test Case: 510 | Input/Output: [[97.69612217429494 -78] 19.696122174294942]
Test Case: 511 | Input/Output: [[-26.246384093941444 -89] -115.24638409394144]
Test Case: 512 | Input/Output: [[-80.08094202614933 15] -65.08094202614933]
Test Case: 513 | Input/Output: [[-95.93811138948848 47] -48.93811138948848]
Test Case: 514 | Input/Output: [[-42.06992493774224 -17] -59.06992493774224]
Test Case: 515 | Input/Output: [[-39.04386800859383 93] 53.95613199140617]
Test Case: 516 | Input/Output: [[89.0402752357283 58] 147.0402752357283]
Test Case: 517 | Input/Output: [[-16.063521425579253 -33] -49.06352142557925]
Test Case: 518 | Input/Output: [[49.43095245650713 86] 135.43095245650713]
Test Case: 519 | Input/Output: [[64.24380853374555 75] 139.24380853374555]
Test Case: 520 | Input/Output: [[7.343849869099657 48] 55.34384986909966]
Test Case: 521 | Input/Output: [[-22.114291057410725 93] 70.88570894258928]
Test Case: 522 | Input/Output: [[98.6804029753242 21] 119.6804029753242]
Test Case: 523 | Input/Output: [[66.1794703246562 -30] 36.179470324656194]
Test Case: 524 | Input/Output: [[18.679121720645256 36] 54.679121720645256]
Test Case: 525 | Input/Output: [[67.11187528403718 -87] -19.888124715962817]
Test Case: 526 | Input/Output: [[-41.8311228123494 -60] -101.8311228123494]
Test Case: 527 | Input/Output: [[-32.455826643457655 -86] -118.45582664345766]
Test Case: 528 | Input/Output: [[-31.532627289309815 -61] -92.53262728930981]
Test Case: 529 | Input/Output: [[-66.12690957455561 15] -51.12690957455561]
Test Case: 530 | Input/Output: [[8.592509408629994 -54] -45.407490591370006]
Test Case: 531 | Input/Output: [[-54.38127334776783 44] -10.38127334776783]
Test Case: 532 | Input/Output: [[13.105853473945572 -64] -50.89414652605443]
Test Case: 533 | Input/Output: [[-95.9703751923834 29] -66.9703751923834]
Test Case: 534 | Input/Output: [[40.53746640567158 -20] 20.53746640567158]
Test Case: 535 | Input/Output: [[91.87393849045952 -97] -5.126061509540477]
Test Case: 536 | Input/Output: [[42.27896241361819 75] 117.27896241361819]
Test Case: 537 | Input/Output: [[-99.37228557053031 -6] -105.37228557053031]
Test Case: 538 | Input/Output: [[-31.727751324094086 -90] -121.72775132409409]
Test Case: 539 | Input/Output: [[83.13846589350382 68] 151.13846589350382]
Test Case: 540 | Input/Output: [[44.60178690819171 62] 106.60178690819171]
Test Case: 541 | Input/Output: [[17.078390412784557 -31] -13.921609587215443]
Test Case: 542 | Input/Output: [[76.65095916711931 -23] 53.65095916711931]
Test Case: 543 | Input/Output: [[86.70366659268845 67] 153.70366659268845]
Test Case: 544 | Input/Output: [[-76.90147339368954 50] -26.901473393689542]
Test Case: 545 | Input/Output: [[-62.99200013901958 87] 24.00799986098042]
Test Case: 546 | Input/Output: [[98.00701082849338 -87] 11.007010828493378]
Test Case: 547 | Input/Output: [[-67.68211733954357 -31] -98.68211733954357]
Test Case: 548 | Input/Output: [[62.417362202597445 43] 105.41736220259745]
Test Case: 549 | Input/Output: [[-91.2478095415133 15] -76.2478095415133]
Test Case: 550 | Input/Output: [[93.96766613152377 -28] 65.96766613152377]
Test Case: 551 | Input/Output: [[46.58122140542116 -36] 10.58122140542116]
Test Case: 552 | Input/Output: [[47.74571784981262 91] 138.74571784981262]
Test Case: 553 | Input/Output: [[93.93226254825254 80] 173.93226254825254]
Test Case: 554 | Input/Output: [[11.268701125176435 4] 15.268701125176435]
Test Case: 555 | Input/Output: [[92.30207573227801 61] 153.302075732278]
Test Case: 556 | Input/Output: [[74.32551267117111 83] 157.3255126711711]
Test Case: 557 | Input/Output: [[28.826668895081525 44] 72.82666889508153]
Test Case: 558 | Input/Output: [[-69.43577514602708 -99] -168.43577514602708]
Test Case: 559 | Input/Output: [[-57.79943259992475 -18] -75.79943259992476]
Test Case: 560 | Input/Output: [[63.94114861760386 -37] 26.941148617603858]
Test Case: 561 | Input/Output: [[73.7205426236822 -9] 64.7205426236822]
Test Case: 562 | Input/Output: [[55.39709162547459 -80] -24.602908374525413]
Test Case: 563 | Input/Output: [[-44.4664794845117 93] 48.5335205154883]
Test Case: 564 | Input/Output: [[-48.79752587750268 35] -13.797525877502679]
Test Case: 565 | Input/Output: [[1.1056685984193564 -12] -10.894331401580644]
Test Case: 566 | Input/Output: [[-3.1000028895656726 -36] -39.10000288956567]
Test Case: 567 | Input/Output: [[-99.56638440805641 88] -11.566384408056408]
Test Case: 568 | Input/Output: [[62.86385831645987 41] 103.86385831645987]
Test Case: 569 | Input/Output: [[-81.54001302242418 51] -30.540013022424176]
Test Case: 570 | Input/Output: [[49.244551371461625 -66] -16.755448628538375]
Test Case: 571 | Input/Output: [[-24.17865389664422 -66] -90.17865389664422]
Test Case: 572 | Input/Output: [[-69.9472612899124 80] 10.052738710087596]
Test Case: 573 | Input/Output: [[-76.41240430623186 38] -38.41240430623186]
Test Case: 574 | Input/Output: [[59.45115006439531 18] 77.4511500643953]
Test Case: 575 | Input/Output: [[86.13803496681692 -32] 54.13803496681692]
Test Case: 576 | Input/Output: [[-57.87865608435598 82] 24.12134391564402]
Test Case: 577 | Input/Output: [[-88.41448503777553 -27] -115.41448503777553]
Test Case: 578 | Input/Output: [[38.209810969006156 95] 133.20981096900616]
Test Case: 579 | Input/Output: [[70.87050974060944 -95] -24.129490259390565]
Test Case: 580 | Input/Output: [[-5.054847155280953 -37] -42.05484715528095]
Test Case: 581 | Input/Output: [[-82.22378761693506 -79] -161.22378761693506]
Test Case: 582 | Input/Output: [[38.56318533162687 -95] -56.43681466837313]
Test Case: 583 | Input/Output: [[85.7688436944546 93] 178.7688436944546]
Test Case: 584 | Input/Output: [[23.4644776975625 86] 109.4644776975625]
Test Case: 585 | Input/Output: [[-2.122505309333107 60] 57.87749469066689]
Test Case: 586 | Input/Output: [[-73.85032245955323 76] 2.149677540446774]
Test Case: 587 | Input/Output: [[34.617685107237094 72] 106.6176851072371]
Test Case: 588 | Input/Output: [[-67.5530622997045 55] -12.553062299704493]
Test Case: 589 | Input/Output: [[34.50070578372603 17] 51.50070578372603]
Test Case: 590 | Input/Output: [[-91.30982286512526 -57] -148.30982286512526]
Test Case: 591 | Input/Output: [[31.082347287598907 -16] 15.082347287598907]
Test Case: 592 | Input/Output: [[-95.71300840652084 55] -40.71300840652084]
Test Case: 593 | Input/Output: [[18.59722469308251 -46] -27.40277530691749]
Test Case: 594 | Input/Output: [[-20.955667032857605 -70] -90.9556670328576]
Test Case: 595 | Input/Output: [[15.29892164686224 17] 32.29892164686224]
Test Case: 596 | Input/Output: [[94.76816702813491 -86] 8.768167028134911]
Test Case: 597 | Input/Output: [[40.42333145420423 -37] 3.423331454204231]
Test Case: 598 | Input/Output: [[-59.1954199524459 -19] -78.1954199524459]
Test Case: 599 | Input/Output: [[-98.62006121565028 -20] -118.62006121565028]
Test Case: 600 | Input/Output: [[11.278318500985776 32] 43.278318500985776]
Test Case: 601 | Input/Output: [[42.746883638849994 21] 63.746883638849994]
Test Case: 602 | Input/Output: [[-33.78486090802191 22] -11.784860908021912]
Test Case: 603 | Input/Output: [[-40.181382042993754 -81] -121.18138204299376]
Test Case: 604 | Input/Output: [[23.274100677629804 81] 104.2741006776298]
Test Case: 605 | Input/Output: [[81.97709237537524 27] 108.97709237537524]
Test Case: 606 | Input/Output: [[-91.87781665898174 36] -55.87781665898174]
Test Case: 607 | Input/Output: [[6.88068567788396 -16] -9.11931432211604]
Test Case: 608 | Input/Output: [[-69.58000904635844 -25] -94.58000904635844]
Test Case: 609 | Input/Output: [[73.61502949668696 99] 172.61502949668696]
Test Case: 610 | Input/Output: [[-79.7363368359361 -65] -144.7363368359361]
Test Case: 611 | Input/Output: [[29.07066889362875 -78] -48.92933110637125]
Test Case: 612 | Input/Output: [[-53.33365063975823 11] -42.33365063975823]
Test Case: 613 | Input/Output: [[-34.109957965941334 35] 0.8900420340586663]
Test Case: 614 | Input/Output: [[69.36404932340807 86] 155.36404932340807]
Test Case: 615 | Input/Output: [[50.45564244376354 -34] 16.455642443763537]
Test Case: 616 | Input/Output: [[-95.48209857308912 23] -72.48209857308912]
Test Case: 617 | Input/Output: [[44.6201085347619 -3] 41.6201085347619]
Test Case: 618 | Input/Output: [[-40.430046820708675 41] 0.5699531792913248]
Test Case: 619 | Input/Output: [[93.49224470646641 5] 98.49224470646641]
Test Case: 620 | Input/Output: [[-15.867327443521503 24] 8.132672556478497]
Test Case: 621 | Input/Output: [[78.78183691699502 66] 144.78183691699502]
Test Case: 622 | Input/Output: [[-80.73165227622002 -28] -108.73165227622002]
Test Case: 623 | Input/Output: [[53.33938841333875 -24] 29.339388413338753]
Test Case: 624 | Input/Output: [[72.56065887557025 -79] -6.439341124429745]
Test Case: 625 | Input/Output: [[60.62651426301568 93] 153.62651426301568]
Test Case: 626 | Input/Output: [[-83.45455401453891 27] -56.454554014538914]
Test Case: 627 | Input/Output: [[5.7851408971046965 99] 104.7851408971047]
Test Case: 628 | Input/Output: [[-47.92496807491338 -63] -110.92496807491338]
Test Case: 629 | Input/Output: [[-30.875522592902982 86] 55.12447740709702]
Test Case: 630 | Input/Output: [[89.12240365317302 -93] -3.8775963468269765]
Test Case: 631 | Input/Output: [[54.372595084385324 -34] 20.372595084385324]
Test Case: 632 | Input/Output: [[-82.01467329568158 -84] -166.01467329568158]
Test Case: 633 | Input/Output: [[74.46866036068508 96] 170.46866036068508]
Test Case: 634 | Input/Output: [[-84.81968448793754 69] -15.819684487937536]
Test Case: 635 | Input/Output: [[-93.84542144482768 -8] -101.84542144482768]
Test Case: 636 | Input/Output: [[-42.08771646544067 18] -24.08771646544067]
Test Case: 637 | Input/Output: [[60.564481672135344 52] 112.56448167213534]
Test Case: 638 | Input/Output: [[21.828383944557814 -47] -25.171616055442186]
Test Case: 639 | Input/Output: [[78.11817207723061 -4] 74.11817207723061]
Test Case: 640 | Input/Output: [[4.467470215124791 -70] -65.53252978487521]
Test Case: 641 | Input/Output: [[83.16261168569704 -28] 55.162611685697044]
Test Case: 642 | Input/Output: [[-59.18523443320976 -16] -75.18523443320976]
Test Case: 643 | Input/Output: [[-55.492469458877494 -100] -155.4924694588775]
Test Case: 644 | Input/Output: [[-48.88654284203806 -42] -90.88654284203807]
Test Case: 645 | Input/Output: [[88.8952719736717 -98] -9.104728026328303]
Test Case: 646 | Input/Output: [[51.73337435303668 57] 108.73337435303668]
Test Case: 647 | Input/Output: [[-10.32778660775682 1] -9.32778660775682]
Test Case: 648 | Input/Output: [[23.864763870946362 -2] 21.864763870946362]
Test Case: 649 | Input/Output: [[-89.60633519907648 31] -58.60633519907648]
Test Case: 650 | Input/Output: [[-8.146040403985722 -22] -30.146040403985722]
Test Case: 651 | Input/Output: [[77.63769461648184 16] 93.63769461648184]
Test Case: 652 | Input/Output: [[42.5021892986623 -58] -15.497810701337698]
Test Case: 653 | Input/Output: [[-95.9894558526879 -81] -176.9894558526879]
Test Case: 654 | Input/Output: [[70.16303968508834 -4] 66.16303968508834]
Test Case: 655 | Input/Output: [[63.18401396213238 86] 149.18401396213238]
Test Case: 656 | Input/Output: [[85.22792604780201 82] 167.22792604780201]
Test Case: 657 | Input/Output: [[88.19732557523002 -73] 15.197325575230025]
Test Case: 658 | Input/Output: [[-0.43553807043225845 4] 3.5644619295677415]
Test Case: 659 | Input/Output: [[-69.57224258269443 -6] -75.57224258269443]
Test Case: 660 | Input/Output: [[-0.4888230108790026 93] 92.511176989121]
Test Case: 661 | Input/Output: [[87.60988804061921 -57] 30.60988804061921]
Test Case: 662 | Input/Output: [[88.08062169331609 -45] 43.08062169331609]
Test Case: 663 | Input/Output: [[-54.692259917878516 -70] -124.69225991787852]
Test Case: 664 | Input/Output: [[-5.090532730640845 -53] -58.090532730640845]
Test Case: 665 | Input/Output: [[47.908243639527115 -69] -21.091756360472885]
Test Case: 666 | Input/Output: [[-31.695708714327736 34] 2.3042912856722637]
Test Case: 667 | Input/Output: [[43.12098576671016 -31] 12.120985766710163]
Test Case: 668 | Input/Output: [[-36.993220549348884 45] 8.006779450651116]
Test Case: 669 | Input/Output: [[65.78366311641471 -2] 63.783663116414715]
Test Case: 670 | Input/Output: [[50.893496880316604 100] 150.8934968803166]
Test Case: 671 | Input/Output: [[23.101337524305805 78] 101.1013375243058]
Test Case: 672 | Input/Output: [[-3.727458811551571 24] 20.27254118844843]
Test Case: 673 | Input/Output: [[80.95495180342766 18] 98.95495180342766]
Test Case: 674 | Input/Output: [[87.41181609080283 -18] 69.41181609080283]
Test Case: 675 | Input/Output: [[-72.55371815361215 77] 4.446281846387848]
Test Case: 676 | Input/Output: [[1.1005369980776152 61] 62.100536998077615]
Test Case: 677 | Input/Output: [[-46.41042959456263 -58] -104.41042959456263]
Test Case: 678 | Input/Output: [[64.69766182865655 -40] 24.69766182865655]
Test Case: 679 | Input/Output: [[45.31406952827203 7] 52.31406952827203]
Test Case: 680 | Input/Output: [[77.7578449173997 18] 95.7578449173997]
Test Case: 681 | Input/Output: [[-91.57573792382297 -44] -135.57573792382297]
Test Case: 682 | Input/Output: [[-47.45859818396507 0] -47.45859818396507]
Test Case: 683 | Input/Output: [[-8.5076570983218 -91] -99.5076570983218]
Test Case: 684 | Input/Output: [[-46.212119660916805 -54] -100.21211966091681]
Test Case: 685 | Input/Output: [[40.21686111553905 52] 92.21686111553905]
Test Case: 686 | Input/Output: [[-76.6156279243036 -38] -114.6156279243036]
Test Case: 687 | Input/Output: [[72.90467156578646 -7] 65.90467156578646]
Test Case: 688 | Input/Output: [[-59.456564203980136 -40] -99.45656420398014]
Test Case: 689 | Input/Output: [[-19.586802201587147 -75] -94.58680220158715]
Test Case: 690 | Input/Output: [[69.06009663636291 18] 87.06009663636291]
Test Case: 691 | Input/Output: [[-93.18539006048101 11] -82.18539006048101]
Test Case: 692 | Input/Output: [[70.54782552503838 -59] 11.547825525038377]
Test Case: 693 | Input/Output: [[-44.44844372952019 29] -15.448443729520193]
Test Case: 694 | Input/Output: [[-43.43722903320115 -34] -77.43722903320115]
Test Case: 695 | Input/Output: [[-11.606901607536741 23] 11.393098392463259]
Test Case: 696 | Input/Output: [[-30.256977675157046 88] 57.743022324842954]
Test Case: 697 | Input/Output: [[98.47317490339691 11] 109.47317490339691]
Test Case: 698 | Input/Output: [[69.01711752818665 6] 75.01711752818665]
Test Case: 699 | Input/Output: [[68.52542180483832 -66] 2.5254218048383166]
Test Case: 700 | Input/Output: [[23.469730298350086 27] 50.469730298350086]
Test Case: 701 | Input/Output: [[-81.51357189908899 -76] -157.513571899089]
Test Case: 702 | Input/Output: [[-47.23913841713896 -74] -121.23913841713896]
Test Case: 703 | Input/Output: [[-96.2214783677122 -78] -174.2214783677122]
Test Case: 704 | Input/Output: [[43.1524642140524 -85] -41.8475357859476]
Test Case: 705 | Input/Output: [[-91.03184979413098 -85] -176.03184979413098]
Test Case: 706 | Input/Output: [[-52.36944021296623 23] -29.369440212966232]
Test Case: 707 | Input/Output: [[22.09243584016933 -79] -56.90756415983067]
Test Case: 708 | Input/Output: [[63.146837648060625 17] 80.14683764806063]
Test Case: 709 | Input/Output: [[-76.85585062946963 -63] -139.85585062946961]
Test Case: 710 | Input/Output: [[26.012964560126278 -37] -10.987035439873722]
Test Case: 711 | Input/Output: [[-0.7251725167500638 50] 49.274827483249936]
Test Case: 712 | Input/Output: [[-20.59123342479903 -71] -91.59123342479903]
Test Case: 713 | Input/Output: [[-71.86050872024596 -74] -145.86050872024595]
Test Case: 714 | Input/Output: [[75.14891868128538 -4] 71.14891868128538]
Test Case: 715 | Input/Output: [[70.78673218355249 -61] 9.786732183552488]
Test Case: 716 | Input/Output: [[-55.93263002539535 61] 5.067369974604652]
Test Case: 717 | Input/Output: [[-85.56537897369265 66] -19.565378973692646]
Test Case: 718 | Input/Output: [[35.972875293966126 -23] 12.972875293966126]
Test Case: 719 | Input/Output: [[-57.34304119705735 -81] -138.34304119705735]
Test Case: 720 | Input/Output: [[-24.98716940266536 13] -11.987169402665359]
Test Case: 721 | Input/Output: [[3.7764813084721425 -44] -40.22351869152786]
Test Case: 722 | Input/Output: [[57.51956950635676 -71] -13.48043049364324]
Test Case: 723 | Input/Output: [[53.127077959377914 57] 110.12707795937791]
Test Case: 724 | Input/Output: [[72.19773261558146 14] 86.19773261558146]
Test Case: 725 | Input/Output: [[99.50146463464503 -77] 22.501464634645032]
Test Case: 726 | Input/Output: [[-4.403975259094366 -89] -93.40397525909437]
Test Case: 727 | Input/Output: [[74.6355748512685 -61] 13.635574851268501]
Test Case: 728 | Input/Output: [[34.693767843706354 19] 53.693767843706354]
Test Case: 729 | Input/Output: [[96.98465657987072 2] 98.98465657987072]
Test Case: 730 | Input/Output: [[-86.47183606351481 -67] -153.47183606351481]
Test Case: 731 | Input/Output: [[18.624061704922497 35] 53.6240617049225]
Test Case: 732 | Input/Output: [[-41.25426633995004 82] 40.74573366004996]
Test Case: 733 | Input/Output: [[53.56409463528732 90] 143.56409463528732]
Test Case: 734 | Input/Output: [[-27.088412393921416 88] 60.911587606078584]
Test Case: 735 | Input/Output: [[74.69889782660903 2] 76.69889782660903]
Test Case: 736 | Input/Output: [[53.216130829255036 -6] 47.216130829255036]
Test Case: 737 | Input/Output: [[-25.00232432093658 65] 39.99767567906342]
Test Case: 738 | Input/Output: [[82.44200725195336 -7] 75.44200725195336]
Test Case: 739 | Input/Output: [[-98.18455623395226 -2] -100.18455623395226]
Test Case: 740 | Input/Output: [[-46.15167323687468 -59] -105.15167323687467]
Test Case: 741 | Input/Output: [[-47.72364516115177 -86] -133.72364516115178]
Test Case: 742 | Input/Output: [[73.410294310029 6] 79.410294310029]
Test Case: 743 | Input/Output: [[-46.478796527267605 -93] -139.4787965272676]
Test Case: 744 | Input/Output: [[30.72597135914259 5] 35.72597135914259]
Test Case: 745 | Input/Output: [[-89.64575484943158 9] -80.64575484943158]
Test Case: 746 | Input/Output: [[-13.47883371329091 81] 67.52116628670909]
Test Case: 747 | Input/Output: [[-68.64370115273609 -62] -130.64370115273607]
Test Case: 748 | Input/Output: [[24.25627444645508 35] 59.25627444645508]
Test Case: 749 | Input/Output: [[16.96648779916616 8] 24.96648779916616]
Test Case: 750 | Input/Output: [[-6.60089456212954 0] -6.60089456212954]
Test Case: 751 | Input/Output: [[74.85449643370262 -95] -20.14550356629738]
Test Case: 752 | Input/Output: [[-90.21223705497819 -21] -111.21223705497819]
Test Case: 753 | Input/Output: [[-91.16378922633422 -17] -108.16378922633422]
Test Case: 754 | Input/Output: [[-80.31486286039305 -73] -153.31486286039305]
Test Case: 755 | Input/Output: [[96.83153125260748 56] 152.83153125260748]
Test Case: 756 | Input/Output: [[-24.6875158097682 38] 13.3124841902318]
Test Case: 757 | Input/Output: [[-13.914684151149842 42] 28.085315848850158]
Test Case: 758 | Input/Output: [[-49.75837215088576 -2] -51.75837215088576]
Test Case: 759 | Input/Output: [[-37.07892878466801 -92] -129.078928784668]
Test Case: 760 | Input/Output: [[-20.02935611230336 -23] -43.02935611230336]
Test Case: 761 | Input/Output: [[54.57133216079404 -65] -10.428667839205957]
Test Case: 762 | Input/Output: [[50.89644550767528 -94] -43.10355449232472]
Test Case: 763 | Input/Output: [[-95.90887142346544 -66] -161.90887142346543]
Test Case: 764 | Input/Output: [[89.13453432081585 -58] 31.134534320815845]
Test Case: 765 | Input/Output: [[71.09217326964699 -88] -16.90782673035301]
Test Case: 766 | Input/Output: [[-5.46890254006334 58] 52.53109745993666]
Test Case: 767 | Input/Output: [[15.353789909806807 32] 47.35378990980681]
Test Case: 768 | Input/Output: [[91.79073880935036 -59] 32.79073880935036]
Test Case: 769 | Input/Output: [[-88.60872266266611 68] -20.60872266266611]
Test Case: 770 | Input/Output: [[-49.17437880918414 0] -49.17437880918414]
Test Case: 771 | Input/Output: [[76.88947414852228 -70] 6.889474148522282]
Test Case: 772 | Input/Output: [[5.363935984203394 -45] -39.636064015796606]
Test Case: 773 | Input/Output: [[-3.366314780056996 -1] -4.366314780056996]
Test Case: 774 | Input/Output: [[47.06250617398052 87] 134.06250617398052]
Test Case: 775 | Input/Output: [[-65.63290465291453 -78] -143.63290465291453]
Test Case: 776 | Input/Output: [[-69.12621105351332 45] -24.126211053513316]
Test Case: 777 | Input/Output: [[-30.579503351205688 -47] -77.57950335120569]
Test Case: 778 | Input/Output: [[64.56195110347616 2] 66.56195110347616]
Test Case: 779 | Input/Output: [[20.89930249684599 31] 51.89930249684599]
Test Case: 780 | Input/Output: [[31.594268554152023 100] 131.59426855415202]
Test Case: 781 | Input/Output: [[90.91667127774465 -89] 1.9166712777446548]
Test Case: 782 | Input/Output: [[-70.31705635981689 51] -19.31705635981689]
Test Case: 783 | Input/Output: [[-37.48441479309508 -48] -85.48441479309508]
Test Case: 784 | Input/Output: [[-15.458020413244242 -50] -65.45802041324424]
Test Case: 785 | Input/Output: [[-30.563455725430444 -87] -117.56345572543044]
Test Case: 786 | Input/Output: [[-10.67625952329368 43] 32.32374047670632]
Test Case: 787 | Input/Output: [[-73.94951862818012 -82] -155.9495186281801]
Test Case: 788 | Input/Output: [[-95.87142393550272 36] -59.87142393550272]
Test Case: 789 | Input/Output: [[-14.505906484340585 86] 71.49409351565942]
Test Case: 790 | Input/Output: [[75.15359784638855 -2] 73.15359784638855]
Test Case: 791 | Input/Output: [[-85.21239772556832 -1] -86.21239772556832]
Test Case: 792 | Input/Output: [[22.3032952409377 -100] -77.6967047590623]
Test Case: 793 | Input/Output: [[57.213462457199284 1] 58.213462457199284]
Test Case: 794 | Input/Output: [[63.09736149558117 -65] -1.9026385044188316]
Test Case: 795 | Input/Output: [[-32.98832880958801 45] 12.011671190411988]
Test Case: 796 | Input/Output: [[73.56305210527833 67] 140.56305210527833]
Test Case: 797 | Input/Output: [[25.80026957103405 28] 53.80026957103405]
Test Case: 798 | Input/Output: [[54.655390733885355 19] 73.65539073388535]
Test Case: 799 | Input/Output: [[95.3996969278241 90] 185.3996969278241]
Test Case: 800 | Input/Output: [[19.355188874158216 -72] -52.644811125841784]
Test Case: 801 | Input/Output: [[-1.8953573047322863 -96] -97.89535730473229]
Test Case: 802 | Input/Output: [[92.1507623189568 89] 181.1507623189568]
Test Case: 803 | Input/Output: [[-40.84781394012342 46] 5.152186059876577]
Test Case: 804 | Input/Output: [[19.81535980376043 78] 97.81535980376043]
Test Case: 805 | Input/Output: [[-37.627100198560484 3] -34.627100198560484]
Test Case: 806 | Input/Output: [[72.68404244227636 29] 101.68404244227636]
Test Case: 807 | Input/Output: [[29.139244036642168 54] 83.13924403664217]
Test Case: 808 | Input/Output: [[-52.20769346326737 -6] -58.20769346326737]
Test Case: 809 | Input/Output: [[-24.954461545529227 -70] -94.95446154552923]
Test Case: 810 | Input/Output: [[-26.984272406265447 81] 54.01572759373455]
Test Case: 811 | Input/Output: [[-67.23639756065256 41] -26.236397560652563]
Test Case: 812 | Input/Output: [[46.775713064277 -83] -36.224286935723]
Test Case: 813 | Input/Output: [[-29.082025197367372 4] -25.082025197367372]
Test Case: 814 | Input/Output: [[40.53228319501423 22] 62.53228319501423]
Test Case: 815 | Input/Output: [[52.418740440813394 -81] -28.581259559186606]
Test Case: 816 | Input/Output: [[-38.625501786959845 -24] -62.625501786959845]
Test Case: 817 | Input/Output: [[-95.53829735006845 17] -78.53829735006845]
Test Case: 818 | Input/Output: [[-67.38284703649768 -46] -113.38284703649768]
Test Case: 819 | Input/Output: [[0.6254526207845004 -57] -56.3745473792155]
Test Case: 820 | Input/Output: [[-58.21149334097835 -41] -99.21149334097835]
Test Case: 821 | Input/Output: [[-91.09467676938165 97] 5.90532323061835]
Test Case: 822 | Input/Output: [[-53.0670676088274 55] 1.9329323911725993]
Test Case: 823 | Input/Output: [[-4.944568441405892 -69] -73.94456844140589]
Test Case: 824 | Input/Output: [[-55.75835190673202 74] 18.241648093267983]
Test Case: 825 | Input/Output: [[-4.253292868853293 -4] -8.253292868853293]
Test Case: 826 | Input/Output: [[16.130303159704113 -13] 3.1303031597041127]
Test Case: 827 | Input/Output: [[-15.469598607973722 4] -11.469598607973722]
Test Case: 828 | Input/Output: [[50.74832045705156 -68] -17.251679542948438]
Test Case: 829 | Input/Output: [[-72.9816527189237 88] 15.018347281076302]
Test Case: 830 | Input/Output: [[-83.47985284995671 -85] -168.47985284995673]
Test Case: 831 | Input/Output: [[-74.97203194584834 -9] -83.97203194584834]
Test Case: 832 | Input/Output: [[32.56063463405863 -14] 18.56063463405863]
Test Case: 833 | Input/Output: [[78.9427664515087 -74] 4.942766451508703]
Test Case: 834 | Input/Output: [[-50.14812760760019 -46] -96.14812760760019]
Test Case: 835 | Input/Output: [[32.54306991157699 28] 60.54306991157699]
Test Case: 836 | Input/Output: [[-34.546347425368936 -77] -111.54634742536894]
Test Case: 837 | Input/Output: [[56.067680553687666 69] 125.06768055368767]
Test Case: 838 | Input/Output: [[76.83694484156945 60] 136.83694484156945]
Test Case: 839 | Input/Output: [[-15.3361902867547 77] 61.6638097132453]
Test Case: 840 | Input/Output: [[70.84548525046492 83] 153.84548525046492]
Test Case: 841 | Input/Output: [[37.51212576896049 -90] -52.48787423103951]
Test Case: 842 | Input/Output: [[-86.39616344908202 80] -6.3961634490820245]
Test Case: 843 | Input/Output: [[-26.76471065157402 -57] -83.76471065157402]
Test Case: 844 | Input/Output: [[80.46788470159399 97] 177.467884701594]
Test Case: 845 | Input/Output: [[56.917559947067275 -74] -17.082440052932725]
Test Case: 846 | Input/Output: [[21.706433292384574 -39] -17.293566707615426]
Test Case: 847 | Input/Output: [[-88.83385223351384 26] -62.83385223351384]
Test Case: 848 | Input/Output: [[-78.18318531439132 -87] -165.18318531439132]
Test Case: 849 | Input/Output: [[-32.12674962529785 -10] -42.12674962529785]
Test Case: 850 | Input/Output: [[96.78121253226323 81] 177.78121253226323]
Test Case: 851 | Input/Output: [[-37.210464141630226 83] 45.789535858369774]
Test Case: 852 | Input/Output: [[97.85825758936352 83] 180.85825758936352]
Test Case: 853 | Input/Output: [[-92.24789630601052 -23] -115.24789630601052]
Test Case: 854 | Input/Output: [[49.924748717123435 60] 109.92474871712344]
Test Case: 855 | Input/Output: [[82.55130628703981 0] 82.55130628703981]
Test Case: 856 | Input/Output: [[-57.84105554963095 -28] -85.84105554963095]
Test Case: 857 | Input/Output: [[68.29708727308449 72] 140.2970872730845]
Test Case: 858 | Input/Output: [[-20.737913585052013 -55] -75.73791358505201]
Test Case: 859 | Input/Output: [[96.98665793106659 -68] 28.98665793106659]
Test Case: 860 | Input/Output: [[-18.81387571755269 58] 39.18612428244731]
Test Case: 861 | Input/Output: [[-98.82528837516466 39] -59.82528837516466]
Test Case: 862 | Input/Output: [[-45.29314571651724 2] -43.29314571651724]
Test Case: 863 | Input/Output: [[-71.33862358900507 56] -15.338623589005067]
Test Case: 864 | Input/Output: [[93.78505766787521 52] 145.7850576678752]
Test Case: 865 | Input/Output: [[78.5969616316109 52] 130.5969616316109]
Test Case: 866 | Input/Output: [[41.913280181852144 -59] -17.086719818147856]
Test Case: 867 | Input/Output: [[-54.58894825881697 -27] -81.58894825881697]
Test Case: 868 | Input/Output: [[-98.2540024991932 45] -53.254002499193206]
Test Case: 869 | Input/Output: [[28.693649207333266 -23] 5.693649207333266]
Test Case: 870 | Input/Output: [[34.127455492181156 -31] 3.1274554921811557]
Test Case: 871 | Input/Output: [[87.17401637759724 44] 131.17401637759724]
Test Case: 872 | Input/Output: [[5.270537638229712 -58] -52.72946236177029]
Test Case: 873 | Input/Output: [[30.510808709817894 -20] 10.510808709817894]
Test Case: 874 | Input/Output: [[4.747150914805616 -92] -87.25284908519438]
Test Case: 875 | Input/Output: [[27.630688792835187 -56] -28.369311207164813]
Test Case: 876 | Input/Output: [[91.34228218884621 -91] 0.3422821888462124]
Test Case: 877 | Input/Output: [[27.58093864790932 67] 94.58093864790932]
Test Case: 878 | Input/Output: [[-14.589440205227547 51] 36.41055979477245]
Test Case: 879 | Input/Output: [[95.72588537083868 -92] 3.7258853708386823]
Test Case: 880 | Input/Output: [[26.539305203608237 -62] -35.46069479639176]
Test Case: 881 | Input/Output: [[-66.32906787676727 -65] -131.32906787676728]
Test Case: 882 | Input/Output: [[-6.363315427967393 -96] -102.3633154279674]
Test Case: 883 | Input/Output: [[-78.02064022544435 81] 2.979359774555647]
Test Case: 884 | Input/Output: [[-28.81274930695315 -90] -118.81274930695315]
Test Case: 885 | Input/Output: [[20.31349800631976 -51] -30.68650199368024]
Test Case: 886 | Input/Output: [[18.228036914895142 -17] 1.2280369148951422]
Test Case: 887 | Input/Output: [[35.219327610551034 -4] 31.219327610551034]
Test Case: 888 | Input/Output: [[-74.77088055430123 82] 7.229119445698771]
Test Case: 889 | Input/Output: [[-46.14527890483193 -27] -73.14527890483194]
Test Case: 890 | Input/Output: [[-42.18817214638495 -73] -115.18817214638494]
Test Case: 891 | Input/Output: [[78.2239963560094 85] 163.2239963560094]
Test Case: 892 | Input/Output: [[32.10456157149491 -62] -29.895438428505088]
Test Case: 893 | Input/Output: [[-58.40597310008888 -77] -135.4059731000889]
Test Case: 894 | Input/Output: [[72.17015853780876 -5] 67.17015853780876]
Test Case: 895 | Input/Output: [[-90.71866624413842 22] -68.71866624413842]
Test Case: 896 | Input/Output: [[40.19329605628715 48] 88.19329605628715]
Test Case: 897 | Input/Output: [[77.06921617860564 -68] 9.069216178605643]
Test Case: 898 | Input/Output: [[-93.6049015510181 62] -31.604901551018102]
Test Case: 899 | Input/Output: [[50.39247739130241 38] 88.3924773913024]
Test Case: 900 | Input/Output: [[24.6120141002353 -51] -26.3879858997647]
Test Case: 901 | Input/Output: [[-3.6468993253615736 -1] -4.646899325361574]
Test Case: 902 | Input/Output: [[-70.6715603281084 31] -39.6715603281084]
Test Case: 903 | Input/Output: [[17.709547010440673 -85] -67.29045298955933]
Test Case: 904 | Input/Output: [[-3.996142043230691 9] 5.003857956769309]
Test Case: 905 | Input/Output: [[1.7679997019535136 43] 44.767999701953514]
Test Case: 906 | Input/Output: [[-35.16356556864177 -99] -134.1635655686418]
Test Case: 907 | Input/Output: [[-66.10336832595218 -95] -161.10336832595218]
Test Case: 908 | Input/Output: [[-8.361652814841818 53] 44.63834718515818]
Test Case: 909 | Input/Output: [[-32.384553151816746 100] 67.61544684818325]
Test Case: 910 | Input/Output: [[-26.750940345902265 -9] -35.750940345902265]
Test Case: 911 | Input/Output: [[-26.904358236588337 -55] -81.90435823658834]
Test Case: 912 | Input/Output: [[-76.28498258569238 35] -41.284982585692376]
Test Case: 913 | Input/Output: [[-16.726033306379094 -17] -33.726033306379094]
Test Case: 914 | Input/Output: [[18.871905753609994 -75] -56.128094246390006]
Test Case: 915 | Input/Output: [[88.7710171759654 17] 105.7710171759654]
Test Case: 916 | Input/Output: [[-22.89674987248486 42] 19.10325012751514]
Test Case: 917 | Input/Output: [[83.15223705876807 6] 89.15223705876807]
Test Case: 918 | Input/Output: [[-88.01673890985289 73] -15.01673890985289]
Test Case: 919 | Input/Output: [[-55.24629938197951 90] 34.75370061802049]
Test Case: 920 | Input/Output: [[-11.2618483976743 -47] -58.2618483976743]
Test Case: 921 | Input/Output: [[-46.975364407769284 14] -32.975364407769284]
Test Case: 922 | Input/Output: [[7.8627091915213185 -24] -16.13729080847868]
Test Case: 923 | Input/Output: [[-58.77150780204652 -33] -91.77150780204653]
Test Case: 924 | Input/Output: [[12.820685657546122 -76] -63.17931434245388]
Test Case: 925 | Input/Output: [[36.79235248380209 62] 98.79235248380209]
Test Case: 926 | Input/Output: [[-70.50939314077954 71] 0.4906068592204633]
Test Case: 927 | Input/Output: [[-2.6623557094775947 -88] -90.6623557094776]
Test Case: 928 | Input/Output: [[-99.32920407258253 -8] -107.32920407258253]
Test Case: 929 | Input/Output: [[-10.879267133585202 82] 71.1207328664148]
Test Case: 930 | Input/Output: [[-17.926777200291525 46] 28.073222799708475]
Test Case: 931 | Input/Output: [[-98.17079632782695 -6] -104.17079632782695]
Test Case: 932 | Input/Output: [[-63.47208082771343 55] -8.472080827713427]
Test Case: 933 | Input/Output: [[99.42248492565892 -40] 59.42248492565892]
Test Case: 934 | Input/Output: [[2.3495580354261563 -88] -85.65044196457384]
Test Case: 935 | Input/Output: [[-2.9526034322758363 77] 74.04739656772416]
Test Case: 936 | Input/Output: [[53.77642217708916 -61] -7.2235778229108405]
Test Case: 937 | Input/Output: [[58.09859245249916 43] 101.09859245249916]
Test Case: 938 | Input/Output: [[62.07944299291529 40] 102.07944299291529]
Test Case: 939 | Input/Output: [[-66.70181949428041 13] -53.701819494280414]
Test Case: 940 | Input/Output: [[43.62409810835183 -61] -17.37590189164817]
Test Case: 941 | Input/Output: [[19.832078246024068 73] 92.83207824602407]
Test Case: 942 | Input/Output: [[-14.56575240579177 27] 12.43424759420823]
Test Case: 943 | Input/Output: [[96.42964518929148 67] 163.42964518929148]
Test Case: 944 | Input/Output: [[65.28270321953076 11] 76.28270321953076]
Test Case: 945 | Input/Output: [[67.10328333917141 57] 124.10328333917141]
Test Case: 946 | Input/Output: [[75.58035471786704 -66] 9.580354717867039]
Test Case: 947 | Input/Output: [[1.3984523073795572 -28] -26.601547692620443]
Test Case: 948 | Input/Output: [[69.79623774125702 34] 103.79623774125702]
Test Case: 949 | Input/Output: [[-99.2718091939482 -10] -109.2718091939482]
Test Case: 950 | Input/Output: [[35.717444965019354 55] 90.71744496501935]
Test Case: 951 | Input/Output: [[88.9804378327498 -62] 26.9804378327498]
Test Case: 952 | Input/Output: [[97.36746057400583 34] 131.36746057400583]
Test Case: 953 | Input/Output: [[69.67131940206616 -100] -30.32868059793384]
Test Case: 954 | Input/Output: [[94.72079351429838 64] 158.72079351429838]
Test Case: 955 | Input/Output: [[-61.487865012127884 55] -6.487865012127884]
Test Case: 956 | Input/Output: [[98.92887609802605 85] 183.92887609802605]
Test Case: 957 | Input/Output: [[-7.539725666802028 6] -1.5397256668020276]
Test Case: 958 | Input/Output: [[-91.16709877288052 -29] -120.16709877288052]
Test Case: 959 | Input/Output: [[83.76962243353617 48] 131.76962243353617]
Test Case: 960 | Input/Output: [[-90.76070845442601 -91] -181.760708454426]
Test Case: 961 | Input/Output: [[-70.96840793107634 -3] -73.96840793107634]
Test Case: 962 | Input/Output: [[21.752423018616838 13] 34.75242301861684]
Test Case: 963 | Input/Output: [[-42.26071430197349 90] 47.73928569802651]
Test Case: 964 | Input/Output: [[-77.09838425569833 -20] -97.09838425569833]
Test Case: 965 | Input/Output: [[-72.55632230916555 -40] -112.55632230916555]
Test Case: 966 | Input/Output: [[-87.00932037876534 -3] -90.00932037876534]
Test Case: 967 | Input/Output: [[-66.41645091861237 19] -47.41645091861237]
Test Case: 968 | Input/Output: [[-18.020253965737567 39] 20.979746034262433]
Test Case: 969 | Input/Output: [[-42.19669177521674 -70] -112.19669177521675]
Test Case: 970 | Input/Output: [[19.882456209183943 -64] -44.11754379081606]
Test Case: 971 | Input/Output: [[51.88745099845292 -38] 13.88745099845292]
Test Case: 972 | Input/Output: [[46.46104791746748 95] 141.46104791746748]
Test Case: 973 | Input/Output: [[-0.9884275623433041 69] 68.0115724376567]
Test Case: 974 | Input/Output: [[17.137970141899544 -24] -6.862029858100456]
Test Case: 975 | Input/Output: [[-41.687585511554644 73] 31.312414488445356]
Test Case: 976 | Input/Output: [[48.902678848196445 51] 99.90267884819644]
Test Case: 977 | Input/Output: [[66.87360818936227 -96] -29.126391810637728]
Test Case: 978 | Input/Output: [[-29.69353767776397 -57] -86.69353767776397]
Test Case: 979 | Input/Output: [[-83.72197955255554 33] -50.72197955255554]
Test Case: 980 | Input/Output: [[-79.5178351992453 60] -19.517835199245297]
Test Case: 981 | Input/Output: [[-79.67644423480769 90] 10.32355576519231]
Test Case: 982 | Input/Output: [[65.42504450242055 -79] -13.574955497579452]
Test Case: 983 | Input/Output: [[31.846911845280488 21] 52.84691184528049]
Test Case: 984 | Input/Output: [[-97.53325545330051 14] -83.53325545330051]
Test Case: 985 | Input/Output: [[-27.308547281352162 -89] -116.30854728135216]
Test Case: 986 | Input/Output: [[16.423640288498277 -55] -38.57635971150172]
Test Case: 987 | Input/Output: [[-20.942632179966168 -31] -51.94263217996617]
Test Case: 988 | Input/Output: [[-69.36607609974341 51] -18.36607609974341]
Test Case: 989 | Input/Output: [[72.13689596952761 -97] -24.863104030472385]
Test Case: 990 | Input/Output: [[69.79135749567845 7] 76.79135749567845]
Test Case: 991 | Input/Output: [[-97.21810967508868 87] -10.218109675088684]
Test Case: 992 | Input/Output: [[-76.76563447147345 -30] -106.76563447147345]
Test Case: 993 | Input/Output: [[39.759398197127894 55] 94.7593981971279]
Test Case: 994 | Input/Output: [[52.821804330950215 89] 141.82180433095021]
Test Case: 995 | Input/Output: [[-61.534120706187935 71] 9.465879293812065]
Test Case: 996 | Input/Output: [[78.51592438688382 49] 127.51592438688382]
Test Case: 997 | Input/Output: [[-44.71485319821642 -28] -72.71485319821642]
Test Case: 998 | Input/Output: [[83.58826888020133 -42] 41.588268880201326]
Test Case: 999 | Input/Output: [[-70.01879212912907 -50] -120.01879212912907]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -14 71 -109 -122 23 119 119 10 -94 109 57 -34 -100 123 -101 19
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction float_inc} {:instruction -60} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_157} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_shove} {:instruction float_mult})
Best program: (float_frominteger integer_dup integer_fromfloat integer_flush integer_inc float_max integer_add float_inc integer_fromfloat float_swap float_dup integer_stackdepth integer_inc float_flush integer_div integer_pop integer_yank float_stackdepth integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_dup_items integer_swap float_max float_dup_items integer_stackdepth tag_integer_841 integer_mult integer_dup integer_mult float_swap float_inc -60 float_yankdup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_sub tagged_157 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_shove float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 17714.088523599996
Median total errors in population: 25344.0
Error averages by case: (685.4402760999983 13.242 697.3229086999999 13.368 675.4338784999997 12.245 683.5113615000004 13.33 690.2355777999992 12.563 695.8284198999984 12.5 689.0486842000014 12.488 680.9645025 13.199 688.6576564000027 13.156 704.7223483000006 13.109 700.6477849999997 13.853 711.4028240999993 14.056 702.6310288000004 13.707 725.958465600001 13.993 700.5623964000017 13.757 668.7063839999987 13.119 693.148790100001 13.284 686.1283978000008 13.094 700.7838679999998 13.431 679.6937998999997 13.182 679.6185623000023 12.518 723.3768543000017 13.234 715.6294484000018 14.06 716.694049100002 13.265 687.0842558999996 13.103)
Error minima by case: (0.0825 1 0.527 2 0.5812 7 0.0055 8 0.3962 2 0.0476 2 0.3987 1 0.5387 1 0.5216 2 0.9812 2 0.2664 8 6.9955 3 0.6671 6 1.0267 3 1.5633 9 0.0 0 3.4656 3 2.2 8 8.1755 2 2.239 9 0.1064 2 44.1702 2 4.8087 3 9.2991 2 0.4232 2)
Average genome size in population (length): 51.395
Average program size in population (points): 52.395
Average percent parens in population: 0.042
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.339
Error (vector) diversity:			 0.37
Behavioral diversity:				 0.391
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1288941
--- Timings ---
Current time: 1529615538060 milliseconds
Total Time:           3.4 seconds
Initialization:       0.1 seconds,  3.3%
Reproduction:         0.6 seconds, 16.2%
Fitness Testing:      2.8 seconds, 80.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction float_inc} {:instruction -60} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_shove} {:instruction float_mult})
Best program: (float_frominteger integer_dup integer_fromfloat integer_flush integer_inc float_max integer_add float_inc integer_fromfloat float_swap float_dup integer_stackdepth integer_inc float_flush integer_div integer_pop integer_yank float_stackdepth integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_dup_items integer_swap float_cos float_dup_items integer_stackdepth tag_integer_841 integer_mult integer_dup integer_mult float_swap float_inc -60 float_yankdup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_sub tagged_224 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_shove float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 6339.490651800013
Median total errors in population: 2016.4661499999997
Error averages by case: (225.5587211000006 10.932 233.09735479999966 11.088 201.7702977 11.136 229.73398090000006 12.522 226.105602699999 10.533 242.66029590000113 10.446 226.10767129999925 10.436 215.99322550000102 10.764 230.9134282999992 10.746 251.04175060000117 10.597 245.9615919999996 12.686 263.6111943999985 11.605 248.29149690000034 12.336 291.95588979999764 11.519 248.6276232 12.427 197.21117559999928 10.697 249.8254140999984 11.146 233.38321609999898 12.136 265.79306100000053 11.427 217.12057399999986 12.198 216.78080729999905 10.436 289.41353869999796 10.96 274.3186495999983 11.646 302.56805719999886 11.029 229.54503309999902 10.653)
Error minima by case: (0.0825 1 1.6076 2 0.5812 7 0.0055 8 1.6038 2 0.0476 2 0.3987 1 0.5387 1 0.5216 2 0.9812 2 1.1578 8 5.0 3 1.2805 6 40.0267 3 1.5633 9 0.0 0 5.9348 3 4.2062 8 14.8438 2 2.239 9 0.1064 2 43.0 2 4.8087 3 9.2991 2 0.4232 2)
Average genome size in population (length): 57.3
Average program size in population (points): 58.3
Average percent parens in population: 0.023
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.533
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.307
Error (vector) diversity:			 0.325
Behavioral diversity:				 0.347
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2725695
--- Timings ---
Current time: 1529615541885 milliseconds
Total Time:           7.4 seconds
Initialization:       0.1 seconds,  1.5%
Reproduction:         2.3 seconds, 30.4%
Fitness Testing:      4.4 seconds, 58.6%
Report:               0.7 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_tan} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction float_inc} {:instruction -60} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_shove} {:instruction float_mult})
Best program: (float_frominteger integer_dup integer_fromfloat integer_flush integer_inc float_max integer_add float_inc float_tan float_swap float_dup integer_stackdepth integer_inc float_flush integer_div integer_pop integer_yank float_stackdepth integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_dup_items integer_swap float_cos float_dup_items integer_stackdepth tag_integer_841 integer_mult integer_dup integer_mult float_swap float_inc -60 float_yankdup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_sub tagged_224 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_shove float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4670.819897300008
Median total errors in population: 1423.0
Error averages by case: (148.1977846000002 6.123 151.78419459999975 6.682 158.05804330000012 10.895 206.9078181 12.866 174.83050659999964 6.448 199.66745950000043 6.228 145.8255507000001 5.927 189.14221670000038 6.022 156.2383093999998 6.679 159.7886899000001 6.455 192.42956900000044 13.142 160.55824349999978 7.478 202.32197929999984 11.85 201.92178259999912 7.394 200.4380492000003 11.925 136.43441440000026 6.065 191.61621359999936 7.275 184.60575800000044 12.083 187.7671461000003 7.279 171.5531507000002 12.112 157.4629225999997 6.443 188.07878519999912 7.111 196.66086499999935 7.49 218.45816589999953 6.632 184.81227879999966 6.656)
Error minima by case: (0.1667 1 1.628 2 3.2738 9 19.6867 8 6.6133 2 0.0476 2 1.0 1 0.5387 1 6.4343 2 3.0188 2 1.1578 8 5.0 3 9.8422 8 1.0267 3 3.0699 9 0.0 0 25.9348 3 5.7938 9 14.8438 2 10.4357 9 0.5422 2 43.0 2 4.8087 3 9.2991 2 7.4232 2)
Average genome size in population (length): 51.593
Average program size in population (points): 52.593
Average percent parens in population: 0.025
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.0305
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.656
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.656
Total error diversity:				 0.137
Error (vector) diversity:			 0.146
Behavioral diversity:				 0.157
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4018784
--- Timings ---
Current time: 1529615545345 milliseconds
Total Time:          10.9 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         3.7 seconds, 33.9%
Fitness Testing:      5.8 seconds, 53.6%
Report:               1.3 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_dup} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction float_inc} {:instruction -60} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_shove} {:instruction float_mult})
Best program: (float_frominteger integer_dup integer_fromfloat integer_flush integer_inc float_max integer_add float_inc integer_fromfloat float_swap float_dup integer_stackdepth integer_inc float_flush integer_div integer_pop integer_yank float_stackdepth integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 integer_dup float_dup_items integer_swap float_cos float_dup_items integer_stackdepth tag_integer_841 integer_mult integer_dup integer_mult float_swap float_inc -60 float_yankdup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_sub tagged_224 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_shove float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4477.8806322
Median total errors in population: 1382.0
Error averages by case: (131.11663430000002 2.797 140.55870839999997 3.684 159.38287459999998 10.482 213.1642751 12.49 167.30103110000002 3.526 191.6158239 3.466 132.7439288 2.655 189.7472191 2.82 140.6243193 3.696 144.1760919 3.658 197.1156757 13.326 136.5448367 4.646 207.2068432 11.494 192.1369319 4.651 204.57707179999997 11.555 129.9799169 2.761 194.5073524 4.473 191.7819487 11.528 179.0910983 4.417 176.29479630000003 11.568 153.57056199999997 3.545 169.62323619999995 4.47 194.5411252 4.653 212.26881279999998 3.599 178.59151760000003 3.658)
Error minima by case: (0.0 1 9.1574 2 5.2738 9 26.9825 11 12.2635 2 18.8027 2 1.0 1 11.5387 1 10.7078 2 14.0 2 24.9508 11 5.0 3 18.0173 10 69.0 3 12.3283 10 0.0 0 73.0 3 59.4125 9 55.0 2 32.1287 8 26.0 2 43.0 2 69.4931 3 93.0 2 2.8924 2)
Average genome size in population (length): 36.419
Average program size in population (points): 37.419
Average percent parens in population: 0.037
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.534
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 88
Genome diversity (% unique Plush genomes):	 0.503
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.503
Total error diversity:				 0.031
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 4932809
--- Timings ---
Current time: 1529615548729 milliseconds
Total Time:          14.3 seconds
Initialization:       0.1 seconds,  0.8%
Reproduction:         5.1 seconds, 35.5%
Fitness Testing:      7.3 seconds, 51.0%
Report:               1.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction float_inc} {:instruction -60} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_157} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_shove} {:instruction float_mult})
Best program: (float_frominteger integer_dup integer_fromfloat integer_flush integer_inc float_max integer_add float_inc integer_fromfloat float_swap float_dup integer_stackdepth integer_inc float_flush integer_div integer_pop integer_yank float_stackdepth integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_dup_items integer_swap float_max float_dup_items integer_stackdepth tag_integer_841 integer_mult integer_dup integer_mult float_swap float_inc -60 float_yankdup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_sub tagged_157 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_shove float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4721.975520800001
Median total errors in population: 1382.0
Error averages by case: (141.20478070000001 2.889 151.54676569999998 3.77 169.0101933 10.454 222.05813899999998 12.471 177.0761294 3.61 201.0632046 3.61 142.0799469 2.759 198.88666869999997 3.022 150.529409 3.766 155.2008999 3.749 206.8356551 13.3 147.8700934 4.734 216.1430224 11.506 202.50440620000003 4.748 213.5643749 11.555 140.01991239999998 2.734 202.9812844 4.586 201.8813254 11.558 187.8977481 4.44 186.33513069999998 11.472 162.48276370000002 3.604 180.45861969999999 4.448 204.7525185 4.737 220.7503661 3.731 187.85316260000002 3.736)
Error minima by case: (1.0 1 7.527 2 4.2809 10 25.9825 8 11.2635 2 17.8027 2 2.7041 1 11.6809 1 11.2922 2 15.0875 2 8.2664 10 6.0156 3 1.3329 8 1.0267 3 4.3561 10 0.0 0 48.0652 3 59.4125 9 14.8438 2 32.1287 8 0.5422 2 44.2029 2 37.1913 3 9.2991 2 2.8924 2)
Average genome size in population (length): 40.435
Average program size in population (points): 41.435
Average percent parens in population: 0.036
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.98275
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.024
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 5950059
--- Timings ---
Current time: 1529615552123 milliseconds
Total Time:          17.7 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.5 seconds, 36.8%
Fitness Testing:      8.7 seconds, 49.4%
Report:               2.3 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction float_flush} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction float_inc} {:instruction -60} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_div} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin})
Best program: (float_frominteger integer_dup integer_fromfloat integer_flush integer_inc float_max integer_add float_inc integer_fromfloat float_swap float_dup integer_stackdepth integer_inc float_frominteger integer_div integer_pop integer_yank float_stackdepth integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_inc print_float float_flush float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_dup_items integer_swap float_cos float_dup_items integer_stackdepth tag_integer_841 integer_mult integer_dup integer_mult float_swap float_inc -60 float_yankdup float_swap float_swap float_inc float_div tag_integer_552 float_flush print_float in1 integer_min integer_max float_sub tagged_224 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 5576.287472100001
Median total errors in population: 1382.0
Error averages by case: (177.32200300000002 3.439 187.70510890000003 4.278 203.19154409999996 10.561 253.8652863 12.892 210.9000983 4.089 233.81093460000002 4.068 178.58053499999997 3.271 231.89875300000003 3.916 186.18861369999996 4.27 191.3552271 4.241 238.50208469999998 13.37 184.56805149999997 5.24 248.1071776 11.655 236.56234449999994 5.238 245.76898079999998 11.694 175.58553139999998 2.958 234.4739533 5.063 233.67498360000002 12.012 220.7088079 4.583 218.8984534 11.585 195.99254959999996 4.075 215.66854809999992 4.559 238.46226529999996 5.239 252.10619949999995 4.244 221.60443689999997 4.245)
Error minima by case: (0.0 0 7.527 2 4.2738 9 8.8127 11 11.2635 2 17.8027 1 3.0 1 11.5387 1 11.0 2 16.0 2 8.2664 10 7.0 2 1.3329 10 1.0267 2 4.3561 10 0.0 0 25.9348 2 5.7938 10 14.8438 2 5.7571 9 0.5422 2 45.0 2 36.8087 3 6.0 1 19.5768 2)
Average genome size in population (length): 59.596
Average program size in population (points): 60.596
Average percent parens in population: 0.025
Minimum age in population: 5.25
Maximum age in population: 9.1875
Average age in population: 7.3250625
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.027
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7454434
--- Timings ---
Current time: 1529615555663 milliseconds
Total Time:          21.2 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         7.9 seconds, 37.1%
Fitness Testing:     10.4 seconds, 48.9%
Report:               2.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_tan} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction float_inc} {:instruction -60} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_shove} {:instruction float_mult})
Best program: (float_frominteger integer_dup integer_fromfloat integer_flush integer_inc float_max integer_add float_inc float_tan float_swap float_dup integer_stackdepth integer_inc float_flush integer_div integer_pop integer_yank float_stackdepth integer_fromfloat integer_dup integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 float_sub float_pop float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_dup_items integer_swap float_cos float_dup_items integer_stackdepth tag_integer_841 integer_mult integer_dup integer_mult float_swap float_inc -60 float_yankdup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_sub tagged_224 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_shove float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4077.5592305000014
Median total errors in population: 1381.0
Error averages by case: (113.96805280000002 2.577 125.88907379999999 3.478 141.9798933 10.307 196.33921150000003 13.099 151.7075815 3.346 176.20745090000005 3.319 116.67754210000003 2.459 172.4248587 3.448 123.4542618 3.471 129.79977449999998 3.444 182.54072609999997 13.191 122.4267858 4.43 192.007915 11.405 178.75272149999998 4.457 189.3360452 11.423 112.55419099999999 1.734 177.5663876 4.292 176.12919639999996 12.177 162.3234036 3.492 160.06040919999998 11.345 135.80309240000003 3.335 156.10973509999997 3.506 180.77863419999997 4.447 196.3440354 3.415 161.32925109999996 3.452)
Error minima by case: (0.0 0 6.527 2 3.2738 9 25.9825 8 11.2635 2 17.8027 2 4.0 1 11.5387 1 3.0483 2 17.0 2 8.2664 10 8.0 2 1.3329 10 72.0 3 3.3561 11 0.0 0 73.0 3 64.2062 10 55.0 2 40.4407 8 26.0 2 46.0 2 52.8087 3 93.0 2 18.5768 2)
Average genome size in population (length): 80.305
Average program size in population (points): 81.305
Average percent parens in population: 0.014
Minimum age in population: 6.25
Maximum age in population: 10.6875
Average age in population: 8.67146875
Median age in population: 8.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.031
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9485834
--- Timings ---
Current time: 1529615559539 milliseconds
Total Time:          25.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.3 seconds, 36.9%
Fitness Testing:     12.3 seconds, 49.0%
Report:               3.4 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_sub} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction tag_float_932} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction integer_div} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction float_inc} {:instruction -60} {:instruction float_yankdup} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_shove} {:instruction float_mult})
Best program: (float_frominteger integer_dup integer_fromfloat integer_flush integer_sub float_max integer_add float_inc integer_fromfloat float_swap float_dup integer_stackdepth integer_inc float_flush integer_div integer_pop integer_yank tag_float_932 float_stackdepth integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 float_sub float_pop float_sin float_dup float_div integer_div integer_inc integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_dup_items integer_swap float_cos float_dup_items integer_stackdepth tag_integer_841 integer_mult integer_dup integer_mult float_swap float_inc -60 float_yankdup integer_min integer_max float_sub tagged_224 integer_max float_inc float_inc float_dec tag_integer_552 float_flush in1 integer_min integer_max float_sub tagged_224 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_shove float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3780.8931220000013
Median total errors in population: 1381.0
Error averages by case: (102.19785750000001 2.444 113.1899294 3.389 130.32348389999999 10.315 185.33196570000004 13.139 139.37379830000003 3.274 164.20665210000004 3.25 103.88095240000003 2.367 161.19258059999999 3.349 111.79099660000001 3.371 117.22397579999999 3.349 170.55148499999999 13.211 109.85250920000001 4.313 180.13730560000005 11.396 166.8098681 4.352 177.43276729999997 11.417 100.6455981 1.614 166.33967919999998 4.224 164.82494789999993 12.193 151.13213770000002 3.414 148.5846447 11.341 124.20520030000002 3.255 143.95262749999998 3.401 168.7584432 4.349 185.50912569999997 3.329 150.03759020000004 3.351)
Error minima by case: (0.0 0 5.527 2 3.2738 9 25.9825 8 11.2635 2 17.8027 1 3.6013 1 11.5376 1 11.0 2 17.0 2 8.2664 10 8.0 2 1.3329 10 72.0 3 2.3561 10 0.0 0 26.0 2 6.7938 7 44.0 2 11.4357 9 26.0 2 46.0 2 37.8087 3 6.0 1 17.5768 2)
Average genome size in population (length): 81.734
Average program size in population (points): 82.734
Average percent parens in population: 0.014
Minimum age in population: 7.25
Maximum age in population: 12.03125
Average age in population: 10.14884375
Median age in population: 10.171875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.034
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 11553634
--- Timings ---
Current time: 1529615563454 milliseconds
Total Time:          29.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.7 seconds, 36.9%
Fitness Testing:     14.2 seconds, 49.1%
Report:               4.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction float_rot} {:instruction integer_yank} {:instruction in2} {:instruction integer_min} {:instruction float_add} {:instruction float_sub} {:instruction integer_swap} {:instruction float_dup} {:instruction float_flush} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction float_inc} {:instruction -60} {:instruction float_yankdup} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_shove} {:instruction float_mult})
Best program: (integer_min float_rot integer_yank in2 integer_min float_add float_sub integer_swap float_dup float_flush integer_div integer_pop integer_yank float_stackdepth integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_dup_items integer_swap float_cos float_dup_items integer_stackdepth tag_integer_841 integer_mult integer_dup integer_mult float_swap float_inc -60 float_yankdup integer_min integer_max float_sub tagged_224 integer_max float_inc float_inc float_dec tag_integer_552 float_flush in1 integer_min integer_max float_sub tagged_224 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_shove float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3952.486902600001
Median total errors in population: 1381.0
Error averages by case: (109.4545183 2.515 121.25894369999999 3.443 137.1838977 10.276 191.6181087 13.078 146.2192766 3.299 170.8974424 3.291 111.49311490000001 2.426 167.8132636 3.413 118.98583879999998 3.437 125.31140539999997 3.412 177.05685539999993 13.167 118.04380489999998 4.374 186.59941929999997 11.376 174.41093300000003 4.412 183.92343069999998 11.386 107.8283485 1.726 171.6843066 4.269 171.18894949999998 12.165 156.5779438 3.461 155.1461282 11.294 129.9657776 3.299 151.81131289999996 3.481 176.27535719999995 4.422 190.681515 3.388 156.8320099 3.415)
Error minima by case: (0.0 0 6.527 2 3.2738 8 12.6834 8 11.6465 2 18.9676 1 4.0 1 1.2109 1 11.0 2 17.0 2 8.2664 10 8.0 2 1.3329 10 72.0 3 3.3561 10 0.0 0 3.9348 2 6.7938 10 30.8438 2 1.8864 9 14.8643 2 46.0 2 37.8087 3 6.0 1 18.5768 2)
Average genome size in population (length): 81.594
Average program size in population (points): 82.594
Average percent parens in population: 0.014
Minimum age in population: 8.25
Maximum age in population: 13.4921875
Average age in population: 11.6127109375
Median age in population: 11.640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.034
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 13618309
--- Timings ---
Current time: 1529615567297 milliseconds
Total Time:          32.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        12.1 seconds, 36.8%
Fitness Testing:     16.1 seconds, 49.1%
Report:               4.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_max} {:instruction tagged_532} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_826} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction float_flush} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction float_inc} {:instruction -60} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_157} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_swap} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction float_mult})
Best program: (float_frominteger integer_dup float_frominteger integer_dup integer_fromfloat integer_add integer_fromfloat integer_max tagged_532 integer_swap integer_mod integer_pop integer_flush float_inc integer_fromfloat float_swap float_dup integer_stackdepth integer_inc float_frominteger integer_div integer_pop integer_yank float_stackdepth integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 in2 integer_inc integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_826 float_div float_dup_items integer_swap float_max float_dup_items integer_stackdepth tag_integer_841 float_flush integer_dup integer_mult float_swap float_inc -60 float_yankdup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_sub tagged_157 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_swap integer_min in2 print_float float_sin float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4256.064338000001
Median total errors in population: 1381.0
Error averages by case: (123.37279470000001 2.726 134.01301169999996 3.631 150.4823612 10.33 204.44673029999998 13.134 157.69943899999998 3.485 182.02459800000005 3.466 123.61373420000002 2.625 181.01156289999997 3.599 132.74388679999998 3.616 137.9572069 3.591 185.2755484 13.222 130.81033960000002 4.554 196.78813340000002 11.445 186.16170449999993 4.595 194.52942430000002 11.458 121.01200279999999 1.935 182.810636 4.442 181.3052073 12.201 169.22952330000004 3.668 165.76720099999997 11.378 142.08281809999997 3.48 163.97471829999992 3.65 187.96107299999994 4.594 202.8852202 3.572 170.11146210000004 3.597)
Error minima by case: (0.0 0 6.527 2 3.2738 8 26.9945 10 11.3962 2 17.9676 2 4.0 1 11.5387 1 10.0 1 17.0 1 8.2664 10 8.0 2 1.3329 9 25.0267 3 3.3561 10 0.0 0 20.5732 3 6.7938 10 47.4822 2 11.4357 9 24.8194 2 21.1702 2 7.1913 3 85.7009 2 18.5768 2)
Average genome size in population (length): 81.969
Average program size in population (points): 82.969
Average percent parens in population: 0.014
Minimum age in population: 10.25
Maximum age in population: 15.05859375
Average age in population: 13.072921875
Median age in population: 13.099609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.922
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.922
Total error diversity:				 0.036
Error (vector) diversity:			 0.038
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 15692209
--- Timings ---
Current time: 1529615571139 milliseconds
Total Time:          36.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.5 seconds, 36.7%
Fitness Testing:     18.1 seconds, 49.2%
Report:               5.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_mod} {:instruction float_sin} {:instruction integer_dec} {:instruction float_sin} {:instruction integer_max} {:instruction tag_integer_213} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_inc} {:instruction -60} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction float_dec} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_shove} {:instruction float_mult})
Best program: (float_frominteger integer_dup float_frominteger integer_dup integer_fromfloat integer_flush integer_inc float_inc integer_mod float_sin integer_dec float_sin integer_max tag_integer_213 integer_yankdup float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 float_sub float_pop float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_dup_items integer_swap float_max float_dup_items integer_stackdepth float_swap float_inc -60 float_yankdup float_swap float_swap float_inc float_dec float_dec float_flush print_float in1 integer_min integer_max float_sub tagged_224 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_shove float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4097.489431500002
Median total errors in population: 1381.0
Error averages by case: (116.3891399 2.586 127.20566889999999 3.522 143.73955549999997 10.31 197.94996720000003 13.133 150.80847870000002 3.374 175.23673480000005 3.353 116.54852910000002 2.497 174.2049679 3.481 125.78597999999998 3.504 131.20531039999995 3.489 180.9281798999999 13.217 124.00552900000002 4.426 191.03836940000002 11.417 180.14836999999994 4.483 188.4247455 11.44 114.51565060000001 1.829 177.32161299999996 4.326 176.9920601999999 12.198 162.70900060000002 3.558 161.01916439999994 11.354 135.80668309999996 3.362 157.64838089999992 3.567 181.96769699999993 4.484 196.73108329999994 3.453 163.3135722 3.482)
Error minima by case: (0.0 0 6.527 2 3.2738 8 25.9825 10 11.2635 2 17.8027 1 4.0 1 10.5387 1 10.0265 2 0.3375 2 8.2664 10 8.0 2 1.3329 10 63.7081 3 3.3561 10 0.0 0 26.0 2 26.7328 10 44.0 2 40.4407 10 1.0609 2 46.0 2 31.49 3 6.0 1 18.5768 2)
Average genome size in population (length): 82.488
Average program size in population (points): 83.488
Average percent parens in population: 0.013
Minimum age in population: 12.046875
Maximum age in population: 16.662109375
Average age in population: 14.546564453125
Median age in population: 14.568359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.039
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 17779459
--- Timings ---
Current time: 1529615574966 milliseconds
Total Time:          40.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.8 seconds, 36.5%
Fitness Testing:     20.0 seconds, 49.4%
Report:               5.6 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 55223.0
Test mean error for best: 27.61150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -76.1667347159
Correct output: -52.4729786445 | Program output: -37.4729786445
Correct output: 5.2737975027   | Program output: -27.7262024973
Correct output: 28.9944965858  | Program output: -66.0055034142
Correct output: 13.3961934486  | Program output: 59.3961934486 
Correct output: 19.9676470573  | Program output: 93.9676470573 
Correct output: 33.3987292904  | Program output: 39.3987292904 
Correct output: -11.5386957197 | Program output: -79.5386957197
Correct output: -71.2921620852 | Program output: -82.2921620852
Correct output: -80.9811660953 | Program output: -61.9811660953
Correct output: -68.2663702523 | Program output: 12.7336297477 
Correct output: -103.9955386998 | Program output: -93.9955386998
Correct output: -61.3328712961 | Program output: 30.6671287039 
Correct output: -145.0267384409 | Program output: -71.0267384409
Correct output: -55.6438617168 | Program output: 33.3561382832 
Correct output: -25.0977592931 | Program output: -24.0977592931
Correct output: 101.9348060994 | Program output: 28.9348060994 
Correct output: 66.2062402799  | Program output: -4.7937597201 
Correct output: 128.8438321461 | Program output: 73.8438321461 
Correct output: 43.5643378164  | Program output: -9.4356621836 
Correct output: 56.5422105693  | Program output: 30.5422105693 
Correct output: -141.170234299 | Program output: -93.170234299 
Correct output: -112.8086599195 | Program output: -35.8086599195
Correct output: 180.7008834843 | Program output: 87.7008834843 
Correct output: -40.4231951304 | Program output: -95.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_div} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_tan} {:instruction float_swap} {:instruction float_dup} {:instruction float_shove} {:instruction integer_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_dup} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction float_inc} {:instruction -60} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_swap} {:instruction integer_mod} {:instruction float_dec} {:instruction tag_integer_557} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction in2} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction integer_dup_items} {:instruction float_mult})
Best program: (float_frominteger integer_dup integer_fromfloat integer_flush integer_div float_max integer_add float_inc float_tan float_swap float_dup float_shove integer_inc float_flush integer_div integer_pop integer_yank float_stackdepth integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 integer_dup float_dup_items integer_swap float_cos float_dup_items integer_stackdepth tag_integer_841 integer_mult integer_dup integer_mult float_swap float_inc -60 float_yankdup float_swap float_swap integer_mod float_dec tag_integer_557 float_flush print_float in1 integer_min integer_max float_sub tagged_224 integer_max float_inc integer_dup integer_flush integer_inc float_max integer_max float_sub tagged_224 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger in2 integer_mod integer_min in2 print_float float_sin integer_min integer_dup_items float_mult)
Errors: [0.0 0 15.0 2 33.0 9 95.0 13 46.0 2 74.0 2 6.0 1 68.0 2 11.0 2 19.0 2 81.0 13 10.0 2 92.0 11 74.0 3 89.0 11 1.0 1 73.0 3 71.0 12 55.0 3 53.0 10 26.0 2 48.0 3 77.0 3 93.0 2 55.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4016.133364800002
Median total errors in population: 1381.0
Error averages by case: (112.69221010000003 2.641 123.21299029999999 3.568 141.13011629999994 10.264 195.28687789999998 13.086 147.4914548 3.432 172.12888690000005 3.402 112.61898940000002 2.564 171.57602029999998 3.558 123.08318779999999 3.574 127.38504809999996 3.519 176.6213941999999 13.146 120.49233370000003 4.466 186.77186600000005 11.378 176.24936109999996 4.531 184.29504200000002 11.402 110.78702519999999 1.877 174.67040639999996 4.393 174.25500879999993 12.166 160.35154570000006 3.646 158.34043319999995 11.301 133.1380008 3.432 154.0204414999999 3.616 177.91829679999992 4.527 194.44400259999995 3.52 160.6174249 3.546)
Error minima by case: (0.0 0 7.527 2 3.2738 8 26.9945 8 11.3962 2 17.9676 2 4.0 1 11.5387 1 10.0 1 17.0 1 8.2664 9 8.0 2 1.3329 10 0.9733 3 4.3561 10 0.0 0 12.4984 3 6.7938 10 16.8438 2 11.4357 9 2.5422 2 46.0 2 37.8087 3 7.2991 2 18.5768 2)
Average genome size in population (length): 82.69
Average program size in population (points): 83.69
Average percent parens in population: 0.014
Minimum age in population: 13.046875
Maximum age in population: 18.2744140625
Average age in population: 15.9706064453125
Median age in population: 16.017578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.038
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 19871959
--- Timings ---
Current time: 1529615578849 milliseconds
Total Time:          44.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.1 seconds, 36.4%
Fitness Testing:     22.0 seconds, 49.5%
Report:               6.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_sub} {:instruction float_mult} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction integer_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_swap} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction -60} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction float_tan} {:instruction float_mult})
Best program: (integer_flush integer_inc float_max integer_add float_inc integer_fromfloat float_swap float_dup integer_stackdepth integer_inc float_sub float_mult float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_dup float_dec in1 float_mult integer_inc float_flush integer_div integer_pop integer_yank float_stackdepth integer_fromfloat integer_yankdup float_dec in1 float_mult tag_float_932 float_sub float_pop float_sin float_dup integer_mult float_dup integer_swap float_max float_dup_items integer_stackdepth tag_integer_841 integer_mult integer_dup integer_mult float_swap integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_dup_items float_dup_items integer_swap float_cos float_dup_items integer_stackdepth tag_integer_841 -60 float_yankdup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_sub tagged_224 integer_max float_inc integer_dup integer_dec integer_mod integer_min in2 print_float in1 integer_min float_tan float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4267.217248200002
Median total errors in population: 1381.0
Error averages by case: (122.4545785 2.636 134.0832752 3.576 149.3153398 10.305 203.21231290000006 13.142 159.32225099999997 3.414 183.61258630000006 3.399 124.65072730000004 2.55 179.68099700000002 3.558 131.81162099999997 3.563 138.1302885 3.541 189.10686239999998 13.211 131.0198176 4.47 199.20026850000002 11.421 186.47491509999992 4.529 196.64356719999998 11.442 120.39377460000004 1.891 184.38539969999994 4.372 182.2678771 12.221 169.85046190000006 3.61 166.43033839999998 11.34 143.25073189999995 3.417 164.25527629999993 3.632 188.33864989999995 4.537 203.4990901 3.501 169.00523999999996 3.543)
Error minima by case: (0.0 0 7.527 2 3.2738 8 26.9945 8 11.3962 2 17.9676 2 4.0 1 2.4613 1 10.0 1 17.0 1 8.2664 10 8.0 2 1.3329 9 1.9733 3 4.3561 10 0.0 0 26.9348 3 6.7938 10 17.8438 2 11.4357 9 3.5422 2 46.0 2 37.8087 3 6.2991 2 19.5768 2)
Average genome size in population (length): 81.389
Average program size in population (points): 82.389
Average percent parens in population: 0.014
Minimum age in population: 14.046875
Maximum age in population: 19.4345703125
Average age in population: 17.37109521484375
Median age in population: 17.42333984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.905
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.905
Total error diversity:				 0.043
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.047
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 21932634
--- Timings ---
Current time: 1529615582653 milliseconds
Total Time:          48.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        17.5 seconds, 36.3%
Fitness Testing:     23.9 seconds, 49.5%
Report:               6.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_dup} {:instruction integer_inc} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_pop} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_min} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction float_min} {:instruction integer_shove} {:instruction tag_float_977} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_inc} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_shove} {:instruction integer_flush})
Best program: (float_frominteger integer_dup integer_fromfloat integer_flush integer_sub integer_fromfloat float_swap float_dup integer_inc float_flush integer_fromfloat integer_pop float_mult tag_float_932 float_sub float_pop float_sin float_dup float_div in2 integer_min integer_pop integer_dup float_inc print_float integer_shove float_add integer_yank print_float tag_integer_841 integer_mult float_div in2 integer_inc integer_pop integer_dup integer_inc float_min integer_shove tag_float_977 integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_dup_items integer_swap float_max float_dup_items integer_stackdepth tag_integer_841 integer_mult integer_dup float_swap float_inc in1 integer_min integer_max float_sub tagged_224 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_shove integer_flush)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4177.907184300002
Median total errors in population: 1381.0
Error averages by case: (120.04068190000001 2.504 130.1146334 3.476 147.67855339999997 10.307 201.592408 13.172 153.7332802 3.336 178.21103080000003 3.303 117.42539090000002 2.456 177.95824 3.463 129.4545696 3.48 133.9880232 3.44 184.83758409999996 13.229 126.5524037 4.355 194.30388909999996 11.417 182.699745 4.43 191.61642379999998 11.44 118.70068970000003 1.784 180.7889495 4.311 181.27434409999998 12.229 165.61000540000003 3.537 165.4199888 11.329 139.3946182 3.35 160.09439119999996 3.533 184.8086438 4.435 199.4155963 3.426 166.98310020000002 3.468)
Error minima by case: (0.0 0 7.527 2 2.2738 2 18.359 8 2.7607 2 9.3321 2 4.0 1 2.6274 1 10.0 1 17.0 1 8.2664 10 8.0 2 1.3329 10 72.0 2 4.3561 9 0.0 0 2.3726 3 0.3726 2 3.0 2 5.0 1 12.0051 2 46.0 2 52.8087 3 22.3726 2 3.0 2)
Average genome size in population (length): 80.339
Average program size in population (points): 81.339
Average percent parens in population: 0.016
Minimum age in population: 15.046875
Maximum age in population: 20.9482421875
Average age in population: 18.8396875
Median age in population: 18.8790283203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.042
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 23967284
--- Timings ---
Current time: 1529615586446 milliseconds
Total Time:          52.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.9 seconds, 36.2%
Fitness Testing:     25.8 seconds, 49.6%
Report:               7.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction float_frominteger} {:instruction float_pop} {:instruction in1} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_flush} {:instruction integer_swap} {:instruction float_dup_times} {:instruction float_mult} {:instruction integer_flush} {:instruction 71} {:instruction float_mod} {:instruction integer_mult} {:instruction print_float} {:instruction float_mult} {:instruction float_stackdepth} {:instruction integer_min} {:instruction tagged_229} {:instruction integer_max} {:instruction integer_flush} {:instruction float_flush})
Best program: (float_frominteger integer_dup float_frominteger float_pop in1 print_integer integer_yankdup float_inc integer_flush integer_swap float_dup_times float_mult integer_flush 71 float_mod integer_mult print_float float_mult float_stackdepth integer_min tagged_229 integer_max integer_flush float_flush)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 24
Size: 25
Percent parens: 0.040
--- Population Statistics ---
Average total errors in population: 4223.747290600002
Median total errors in population: 1381.0
Error averages by case: (121.13051240000001 2.677 131.95885579999995 3.596 148.21210189999994 10.295 202.4828781 13.12 157.5767087 3.473 181.93910860000003 3.451 123.27200990000004 2.602 178.8673095 3.592 130.52616159999997 3.601 135.914538 3.586 185.78188449999996 13.231 128.67371520000003 4.512 197.32616140000002 11.452 184.4467968999999 4.577 194.99721379999997 11.472 118.7402758 1.924 182.65152319999993 4.43 178.52437879999997 12.202 168.7420854 3.656 163.72972839999997 11.326 141.81631019999995 3.462 162.0604032999999 3.672 186.40907879999995 4.558 202.37472839999995 3.561 167.973822 3.591)
Error minima by case: (0.0 0 6.527 2 2.8508 8 26.5715 8 10.9732 2 17.5447 1 3.0 1 11.5387 1 10.0 1 16.0 1 8.2664 10 7.0 2 1.3329 10 71.0 2 3.3561 10 0.0 0 25.9348 2 6.7938 10 44.0 2 11.4357 9 25.0 2 45.0 2 38.8087 3 6.0 1 18.5768 2)
Average genome size in population (length): 80.774
Average program size in population (points): 81.774
Average percent parens in population: 0.014
Minimum age in population: 17.01708984375
Maximum age in population: 22.2371826171875
Average age in population: 20.29715661621094
Median age in population: 20.3748779296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.044
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 26012734
--- Timings ---
Current time: 1529615589940 milliseconds
Total Time:          55.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.2 seconds, 36.2%
Fitness Testing:     27.7 seconds, 49.7%
Report:               7.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_min} {:instruction float_inc} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_tan} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_flush} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_855} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction float_inc} {:instruction integer_sub} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_swap} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction integer_swap} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_min} {:instruction float_shove} {:instruction float_mult})
Best program: (integer_dup integer_dup integer_fromfloat integer_flush integer_inc float_max integer_min float_inc float_tan float_frominteger integer_dup integer_inc float_max integer_add float_inc float_tan float_swap float_dup integer_stackdepth integer_inc float_flush integer_div integer_pop integer_yank float_stackdepth integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 float_sub float_pop integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_dup_items integer_swap float_cos float_dup_items integer_stackdepth tag_integer_855 integer_mult integer_dup integer_mult float_swap float_inc integer_sub float_yankdup float_swap float_swap float_dec tag_integer_552 float_flush integer_swap in1 integer_min integer_max float_sub tagged_224 integer_max float_inc integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float integer_stackdepth integer_min float_shove float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4515.284079300002
Median total errors in population: 1381.0
Error averages by case: (134.0886639 2.945 144.30497369999998 3.872 159.77972569999994 10.344 212.65801130000006 13.143 167.88417779999997 3.701 191.71313040000004 3.693 134.73814760000008 2.856 189.69906640000005 3.848 143.2077309 3.843 148.50133520000003 3.818 196.37309349999995 13.25 141.7700784 4.744 206.84202180000003 11.5 196.38649379999993 4.809 204.45310989999996 11.534 131.47646360000002 2.235 193.42468819999996 4.655 191.32826409999998 12.231 180.09112770000007 3.927 175.8076585 11.381 153.09650149999996 3.69 174.61668839999993 3.912 197.82681429999994 4.821 213.42405759999994 3.81 179.41005510000002 3.82)
Error minima by case: (0.0 0 7.527 2 3.2738 8 13.9945 8 1.6038 2 4.9676 1 4.0 1 11.5387 1 10.0 1 17.0 1 8.2664 10 8.0 2 1.3329 8 72.0 3 4.3561 10 0.0 0 25.9348 2 6.7938 9 44.0 2 11.4357 9 1.4578 2 46.0 2 37.8087 3 6.0 1 19.5768 2)
Average genome size in population (length): 79.967
Average program size in population (points): 80.967
Average percent parens in population: 0.014
Minimum age in population: 18.900146484375
Maximum age in population: 23.73516845703125
Average age in population: 21.77413861083984
Median age in population: 21.83474731445312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.039
Error (vector) diversity:			 0.04
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 28037404
--- Timings ---
Current time: 1529615593698 milliseconds
Total Time:          59.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.6 seconds, 36.4%
Fitness Testing:     29.6 seconds, 49.9%
Report:               8.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_inc} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction float_yank} {:instruction integer_inc} {:instruction print_float} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction -60} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_swap} {:instruction float_inc} {:instruction float_swap} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction integer_dup_items} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction float_sub} {:instruction in2} {:instruction print_float} {:instruction integer_pop} {:instruction integer_min} {:instruction float_shove} {:instruction float_mult})
Best program: (float_frominteger integer_dup integer_fromfloat integer_flush integer_inc float_max integer_add float_inc integer_fromfloat integer_dup float_dec in1 float_mult tag_float_932 float_sub float_pop float_sin float_dup float_div integer_dup float_dec in1 float_inc tag_float_932 float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop float_yank integer_inc print_float integer_swap float_cos float_dup_items integer_stackdepth tag_integer_841 -60 float_yankdup float_inc float_swap float_inc float_swap tag_integer_552 float_flush print_float in1 integer_min integer_max integer_dup_items tagged_224 integer_max float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod float_sub in2 print_float integer_pop integer_min float_shove float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 4825.894618700001
Median total errors in population: 1381.0
Error averages by case: (146.63101120000005 2.919 157.90452960000002 3.886 172.39721329999998 10.392 224.72512220000004 13.227 180.4338285 3.699 204.10783510000002 3.676 146.76388960000003 2.836 201.9504877 3.835 155.7415907 3.851 161.91013979999994 3.837 209.61895669999998 13.321 155.05672290000004 4.726 219.44749109999995 11.56 208.88644689999992 4.826 216.98577989999998 11.584 144.50144190000006 2.253 204.55052739999996 4.642 204.2885414 12.31 190.61703660000003 3.933 188.96031989999994 11.441 164.5790704 3.691 187.34150309999993 3.938 210.63228469999996 4.829 223.27487549999995 3.797 191.7399726 3.839)
Error minima by case: (0.0 0 5.527 2 3.8372 8 27.1361 8 11.4342 2 18.9676 2 4.0 1 9.9851 1 10.0 1 17.0 1 10.2664 10 8.0 2 3.3329 10 0.0267 3 2.3561 10 0.0 0 26.9348 3 6.7938 9 15.8438 2 11.4357 9 1.5422 2 46.0 2 37.8087 3 8.2991 2 17.5768 2)
Average genome size in population (length): 79.957
Average program size in population (points): 80.957
Average percent parens in population: 0.014
Minimum age in population: 20.41650390625
Maximum age in population: 25.05755615234375
Average age in population: 23.21695394897461
Median age in population: 23.2860107421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.048
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.053
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 30061804
--- Timings ---
Current time: 1529615597444 milliseconds
Total Time:          63.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.9 seconds, 36.4%
Fitness Testing:     31.4 seconds, 49.9%
Report:               8.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 55223.0
Test mean error for best: 27.61150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -76.1667347159
Correct output: -52.4729786445 | Program output: -37.4729786445
Correct output: 5.2737975027   | Program output: -27.7262024973
Correct output: 28.9944965858  | Program output: -66.0055034142
Correct output: 13.3961934486  | Program output: 59.3961934486 
Correct output: 19.9676470573  | Program output: 93.9676470573 
Correct output: 33.3987292904  | Program output: 39.3987292904 
Correct output: -11.5386957197 | Program output: -79.5386957197
Correct output: -71.2921620852 | Program output: -82.2921620852
Correct output: -80.9811660953 | Program output: -61.9811660953
Correct output: -68.2663702523 | Program output: 12.7336297477 
Correct output: -103.9955386998 | Program output: -93.9955386998
Correct output: -61.3328712961 | Program output: 30.6671287039 
Correct output: -145.0267384409 | Program output: -71.0267384409
Correct output: -55.6438617168 | Program output: 33.3561382832 
Correct output: -25.0977592931 | Program output: -24.0977592931
Correct output: 101.9348060994 | Program output: 28.9348060994 
Correct output: 66.2062402799  | Program output: -4.7937597201 
Correct output: 128.8438321461 | Program output: 73.8438321461 
Correct output: 43.5643378164  | Program output: -9.4356621836 
Correct output: 56.5422105693  | Program output: 30.5422105693 
Correct output: -141.170234299 | Program output: -93.170234299 
Correct output: -112.8086599195 | Program output: -35.8086599195
Correct output: 180.7008834843 | Program output: 87.7008834843 
Correct output: -40.4231951304 | Program output: -95.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction float_max} {:instruction float_flush} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction integer_flush} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction float_dup_items} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_mult} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction in2} {:instruction float_shove} {:instruction float_mult})
Best program: (float_dup_items integer_dup integer_max integer_fromfloat float_swap float_dup integer_stackdepth float_max float_flush integer_div integer_pop integer_yank float_stackdepth integer_fromfloat integer_dup float_dec in1 float_mult integer_flush float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_inc print_float float_dup_items print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_swap integer_swap float_cos float_frominteger integer_stackdepth tag_integer_841 integer_mult integer_dup integer_mult float_swap integer_dec integer_dup_items float_dup_times float_yankdup float_sub tagged_224 integer_max float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_mult float_sub tagged_224 integer_max float_inc float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin in2 float_shove float_mult)
Errors: [0.0 0 15.0 2 33.0 9 95.0 13 46.0 2 74.0 2 6.0 1 68.0 2 11.0 2 19.0 2 81.0 13 10.0 2 92.0 11 74.0 3 89.0 11 1.0 1 73.0 3 71.0 12 55.0 3 53.0 10 26.0 2 48.0 3 77.0 3 93.0 2 55.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4938.089567100002
Median total errors in population: 1381.0
Error averages by case: (151.95525200000003 3.004 163.07999539999997 3.977 177.15085259999995 10.44 228.9345502 13.286 184.57839189999996 3.755 208.00886680000008 3.763 151.71411370000004 2.911 206.45023150000003 3.926 160.8891032 3.934 167.14935350000002 3.905 212.62735599999996 13.375 160.4845624 4.802 223.05242130000002 11.582 214.0045438999999 4.893 220.7125198 11.624 149.4800811 2.351 207.93995519999996 4.703 207.94805049999994 12.341 194.59359950000004 3.983 192.73171640000004 11.472 168.55033669999997 3.745 192.64879679999993 4.0 215.49351899999994 4.914 227.0872651 3.879 196.34813259999993 3.911)
Error minima by case: (0.0 0 6.527 2 2.3924 2 10.3645 8 9.7344 2 17.4273 1 4.0 1 10.0 1 10.0 1 17.0 1 8.2664 10 8.0 2 1.3329 9 72.0 2 3.3561 10 0.0 0 15.0 2 6.7938 2 3.0 2 4.2054 1 7.7098 2 46.0 2 37.8087 3 6.0 1 3.0 2)
Average genome size in population (length): 80.644
Average program size in population (points): 81.644
Average percent parens in population: 0.014
Minimum age in population: 22.091796875
Maximum age in population: 26.74810791015625
Average age in population: 24.69973776245117
Median age in population: 24.73128509521484
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.055
Error (vector) diversity:			 0.059
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 32103204
--- Timings ---
Current time: 1529615601225 milliseconds
Total Time:          66.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.3 seconds, 36.4%
Fitness Testing:     33.3 seconds, 49.9%
Report:               9.0 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 55172.0
Test mean error for best: 27.58600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 58.3961934486 
Correct output: 19.9676470573  | Program output: 92.9676470573 
Correct output: 33.3987292904  | Program output: 38.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 11.7336297477 
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 29.6671287039 
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 32.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_flush} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_dup_items} {:instruction integer_swap} {:instruction float_max} {:instruction float_dup_items} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction float_inc} {:instruction -60} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_mod} {:instruction integer_min} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction print_float} {:instruction float_shove} {:instruction float_mult})
Best program: (integer_flush integer_flush integer_inc float_max integer_add integer_dup integer_fromfloat integer_flush integer_inc float_max integer_add float_inc integer_fromfloat float_swap float_dup integer_stackdepth integer_inc float_dec in1 float_mult tag_float_932 float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_dup_items integer_swap float_max float_dup_items integer_mult integer_dup integer_mult float_swap float_inc -60 float_yankdup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_mod integer_min float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin print_float float_shove float_mult)
Errors: [1.0 1 14.0 2 34.0 10 96.0 13 45.0 2 73.0 2 5.0 1 69.0 2 12.0 2 18.0 2 80.0 13 9.0 3 91.0 11 73.0 3 88.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 47.0 2 76.0 3 94.0 2 56.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4635.507536800002
Median total errors in population: 1381.0
Error averages by case: (138.62110210000006 2.84 148.9940992 3.776 164.8701908 10.308 217.53088250000002 13.126 172.6858495 3.634 196.55299830000004 3.614 139.18231750000004 2.773 194.5249233 3.761 147.7895928 3.768 153.02547960000004 3.742 202.7513162 13.237 146.15410210000002 4.657 211.9356247 11.482 200.52329499999996 4.749 209.32906580000002 11.512 136.82479850000004 2.15 198.5737365 4.584 197.96678089999992 12.226 184.05970180000003 3.87 182.38945260000003 11.341 158.04710239999997 3.624 178.77805769999992 3.868 202.2623975 4.749 217.1347922 3.736 184.1208773 3.752)
Error minima by case: (0.0 0 7.527 2 3.2738 8 8.31 8 11.3962 2 17.9676 2 4.0 1 11.5387 1 7.7128 1 17.0 1 7.2664 10 8.0 2 0.3329 8 0.0267 3 4.3561 10 0.0 0 26.9348 3 6.7938 9 15.8438 2 11.4357 9 1.5422 2 46.0 2 37.8087 3 8.2991 2 19.5768 2)
Average genome size in population (length): 80.34
Average program size in population (points): 81.34
Average percent parens in population: 0.014
Minimum age in population: 23.091796875
Maximum age in population: 28.35819244384766
Average age in population: 26.14132140350342
Median age in population: 26.18627166748047
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.909
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.909
Total error diversity:				 0.044
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 34137029
--- Timings ---
Current time: 1529615604925 milliseconds
Total Time:          70.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.6 seconds, 36.3%
Fitness Testing:     35.2 seconds, 49.9%
Report:               9.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 55223.0
Test mean error for best: 27.61150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -76.1667347159
Correct output: -52.4729786445 | Program output: -37.4729786445
Correct output: 5.2737975027   | Program output: -27.7262024973
Correct output: 28.9944965858  | Program output: -66.0055034142
Correct output: 13.3961934486  | Program output: 59.3961934486 
Correct output: 19.9676470573  | Program output: 93.9676470573 
Correct output: 33.3987292904  | Program output: 39.3987292904 
Correct output: -11.5386957197 | Program output: -79.5386957197
Correct output: -71.2921620852 | Program output: -82.2921620852
Correct output: -80.9811660953 | Program output: -61.9811660953
Correct output: -68.2663702523 | Program output: 12.7336297477 
Correct output: -103.9955386998 | Program output: -93.9955386998
Correct output: -61.3328712961 | Program output: 30.6671287039 
Correct output: -145.0267384409 | Program output: -71.0267384409
Correct output: -55.6438617168 | Program output: 33.3561382832 
Correct output: -25.0977592931 | Program output: -24.0977592931
Correct output: 101.9348060994 | Program output: 28.9348060994 
Correct output: 66.2062402799  | Program output: -4.7937597201 
Correct output: 128.8438321461 | Program output: 73.8438321461 
Correct output: 43.5643378164  | Program output: -9.4356621836 
Correct output: 56.5422105693  | Program output: 30.5422105693 
Correct output: -141.170234299 | Program output: -93.170234299 
Correct output: -112.8086599195 | Program output: -35.8086599195
Correct output: 180.7008834843 | Program output: 87.7008834843 
Correct output: -40.4231951304 | Program output: -95.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_max} {:instruction tagged_532} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_flush} {:instruction float_swap} {:instruction float_yank} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_sub} {:instruction float_pop} {:instruction float_sin} {:instruction float_dup} {:instruction float_div} {:instruction in2} {:instruction integer_inc} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_shove} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_div} {:instruction float_swap} {:instruction integer_swap} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction integer_mult} {:instruction float_swap} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_mult} {:instruction float_sub} {:instruction tagged_224} {:instruction integer_max} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction print_float} {:instruction float_shove} {:instruction float_mult})
Best program: (float_frominteger integer_dup integer_fromfloat integer_flush integer_inc float_max integer_add float_inc integer_fromfloat float_swap float_dup integer_stackdepth integer_max tagged_532 integer_swap integer_mod integer_pop integer_flush float_swap float_yank integer_fromfloat float_swap float_sub float_pop float_sin float_dup float_div in2 integer_inc integer_pop integer_dup integer_inc print_float integer_shove float_add integer_yank print_float float_cos float_sub tag_float_869 float_div float_swap integer_swap float_cos float_frominteger integer_stackdepth tag_integer_841 integer_mult integer_dup integer_mult float_swap integer_dec integer_dup_items float_dup_times float_yankdup float_sub tagged_224 integer_max float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_mult float_sub tagged_224 integer_max float_inc float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin print_float float_shove float_mult)
Errors: [0.0 0 15.0 2 33.0 9 95.0 13 46.0 2 74.0 2 6.0 1 68.0 2 11.0 2 19.0 2 81.0 13 10.0 2 92.0 11 74.0 3 89.0 11 1.0 1 73.0 3 71.0 12 55.0 3 53.0 10 26.0 2 48.0 3 77.0 3 93.0 2 55.0 2]
Total: 1381.0
Mean: 27.62
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4537.880342700002
Median total errors in population: 1381.0
Error averages by case: (134.81947680000005 2.732 145.68740859999997 3.714 161.71242579999998 10.313 215.2913225 13.141 169.1099345 3.546 193.20202980000005 3.539 134.58303990000005 2.681 192.00544170000006 3.68 144.1053473 3.698 149.5012806 3.682 196.95272819999997 13.257 142.2186297 4.578 208.4315307 11.478 197.27718599999997 4.677 206.1116218 11.505 132.6323106 2.085 193.6667072 4.505 192.4387035 12.241 179.76580390000004 3.784 176.9510654 11.334 153.35009989999998 3.545 175.11476919999996 3.797 199.31261659999996 4.677 212.9072986 3.642 181.2155639 3.685)
Error minima by case: (0.0 0 6.527 2 3.2809 9 27.099 8 11.6465 2 18.9676 1 3.0 1 9.1045 1 8.0 1 16.0 1 8.2664 10 7.0 2 1.3329 7 71.0 2 3.3561 10 0.0 0 25.0 2 6.7938 10 43.0 2 11.4357 9 23.0 2 45.0 2 37.8087 2 5.0 1 18.5768 2)
Average genome size in population (length): 79.323
Average program size in population (points): 80.323
Average percent parens in population: 0.015
Minimum age in population: 24.091796875
Maximum age in population: 29.56137466430664
Average age in population: 27.63320852279663
Median age in population: 27.68405342102051
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.034
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 36145079
--- Timings ---
Current time: 1529615608714 milliseconds
Total Time:          74.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.0 seconds, 36.4%
Fitness Testing:     37.1 seconds, 49.9%
Report:              10.1 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 54630.0
Test mean error for best: 27.31500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -39.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 57.3961934486 
Correct output: 19.9676470573  | Program output: 91.9676470573 
Correct output: 33.3987292904  | Program output: 37.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -63.9811660953
Correct output: -68.2663702523 | Program output: 10.7336297477 
Correct output: -103.9955386998 | Program output: -95.9955386998
Correct output: -61.3328712961 | Program output: 28.6671287039 
Correct output: -145.0267384409 | Program output: -73.0267384409
Correct output: -55.6438617168 | Program output: 31.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -95.170234299 
Correct output: -112.8086599195 | Program output: -37.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_yankdup tagged_224 tagged_962 float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_sub in2)
Errors: [1.0 1 13.0 2 34.0 10 96.0 13 44.0 2 72.0 2 4.0 1 69.0 2 12.0 2 17.0 2 79.0 13 8.0 3 90.0 11 72.0 3 87.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 46.0 3 75.0 3 94.0 2 56.0 2]
Total: 1370.0
Mean: 27.4
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4306.917741800003
Median total errors in population: 1381.0
Error averages by case: (125.51103420000003 2.687 136.30691359999997 3.676 151.28396679999997 10.286 204.70120349999996 13.152 159.4419006 3.515 183.55705720000006 3.49 124.95856640000007 2.645 182.20211900000004 3.649 134.76423809999997 3.664 140.56656129999993 3.641 189.49308699999995 13.239 133.37609050000006 4.525 199.2509397 11.466 188.81593189999995 4.639 196.50764369999996 11.486 122.68171550000001 2.04 184.94211979999994 4.45 184.1754460999999 12.233 170.27133690000002 3.752 168.3545524 11.309 143.42724999999996 3.505 166.70610719999993 3.773 191.30598559999993 4.627 204.07617199999996 3.591 171.56580279999994 3.634)
Error minima by case: (0.0 0 6.527 2 1.2738 8 9.9945 8 5.6038 2 0.9676 2 3.0 1 11.5387 1 10.0 1 10.4259 1 8.2664 10 7.0 2 1.3329 8 53.6197 2 3.3561 10 0.0 0 26.9348 3 6.7938 10 54.0 2 11.4357 9 9.401 2 45.0 2 21.4016 3 85.7009 2 0.4232 2)
Average genome size in population (length): 80.15
Average program size in population (points): 81.15
Average percent parens in population: 0.014
Minimum age in population: 25.091796875
Maximum age in population: 31.28148460388184
Average age in population: 29.10020113563538
Median age in population: 29.13400363922119
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.896
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.896
Total error diversity:				 0.05
Error (vector) diversity:			 0.054
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 38174204
--- Timings ---
Current time: 1529615612478 milliseconds
Total Time:          78.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        28.3 seconds, 36.3%
Fitness Testing:     39.0 seconds, 50.0%
Report:              10.6 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 54630.0
Test mean error for best: 27.31500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -39.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 57.3961934486 
Correct output: 19.9676470573  | Program output: 91.9676470573 
Correct output: 33.3987292904  | Program output: 37.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -63.9811660953
Correct output: -68.2663702523 | Program output: 10.7336297477 
Correct output: -103.9955386998 | Program output: -95.9955386998
Correct output: -61.3328712961 | Program output: 28.6671287039 
Correct output: -145.0267384409 | Program output: -73.0267384409
Correct output: -55.6438617168 | Program output: 31.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -95.170234299 
Correct output: -112.8086599195 | Program output: -37.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_yankdup tagged_224 tagged_962 float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_sub in2)
Errors: [1.0 1 13.0 2 34.0 10 96.0 13 44.0 2 72.0 2 4.0 1 69.0 2 12.0 2 17.0 2 79.0 13 8.0 3 90.0 11 72.0 3 87.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 46.0 3 75.0 3 94.0 2 56.0 2]
Total: 1370.0
Mean: 27.4
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4507.080552000002
Median total errors in population: 1381.0
Error averages by case: (133.2237514 2.868 145.69028919999997 3.852 159.59061769999994 10.287 212.68998180000003 13.122 168.08054079999997 3.665 191.92813160000003 3.657 133.73380730000005 2.814 189.71846549999998 3.802 142.52294869999997 3.815 149.95566680000002 3.818 195.24784869999996 13.235 142.97096180000005 4.688 207.19793230000002 11.483 198.34001519999993 4.814 205.0590896 11.512 130.06019910000003 2.224 190.69831879999992 4.61 189.4479145 12.214 177.85477030000004 3.905 174.03511239999997 11.316 150.25756299999998 3.646 176.60352839999993 3.958 199.85353459999996 4.819 211.1520767 3.762 179.4884858 3.793)
Error minima by case: (0.0 0 7.527 2 2.2738 8 6.4054 8 9.3962 2 15.4323 1 2.0012 1 10.9975 1 10.0 1 16.5864 1 8.2664 10 5.4279 2 1.3329 8 2.9733 3 4.3561 9 0.0 0 25.9348 2 6.7938 9 18.8438 2 8.1644 9 0.4102 2 42.6026 2 14.2411 3 5.2991 1 19.5768 2)
Average genome size in population (length): 79.387
Average program size in population (points): 80.387
Average percent parens in population: 0.015
Minimum age in population: 27.36688232421875
Maximum age in population: 32.71114921569824
Average age in population: 30.56169854450226
Median age in population: 30.61931800842285
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.055
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 40185129
--- Timings ---
Current time: 1529615616259 milliseconds
Total Time:          81.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        29.7 seconds, 36.3%
Fitness Testing:     40.8 seconds, 49.9%
Report:              11.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 54630.0
Test mean error for best: 27.31500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -39.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 57.3961934486 
Correct output: 19.9676470573  | Program output: 91.9676470573 
Correct output: 33.3987292904  | Program output: 37.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -63.9811660953
Correct output: -68.2663702523 | Program output: 10.7336297477 
Correct output: -103.9955386998 | Program output: -95.9955386998
Correct output: -61.3328712961 | Program output: 28.6671287039 
Correct output: -145.0267384409 | Program output: -73.0267384409
Correct output: -55.6438617168 | Program output: 31.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -95.170234299 
Correct output: -112.8086599195 | Program output: -37.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in2} {:instruction float_max} {:instruction float_inc} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_swap} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (in2 float_max float_inc float_inc integer_fromfloat float_swap float_dup integer_stackdepth integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_yankdup tagged_224 tagged_962 float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_sub in2)
Errors: [1.0 1 13.0 2 34.0 10 96.0 13 44.0 2 72.0 2 4.0 1 69.0 2 12.0 2 17.0 2 79.0 13 8.0 3 90.0 11 72.0 3 87.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 46.0 3 75.0 3 94.0 2 56.0 2]
Total: 1370.0
Mean: 27.4
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4855.0446863000025
Median total errors in population: 1381.0
Error averages by case: (147.0027215 3.028 158.13227109999997 3.972 172.4783273 10.352 224.59082399999997 13.141 183.27840549999996 3.77 206.76991440000006 3.753 150.3094443 2.933 201.92246630000008 3.933 156.0178949 3.96 162.2281752 3.932 211.29983089999993 13.273 155.5475707 4.831 221.74519080000002 11.531 209.3635856999999 4.927 219.4246187 11.553 144.5180711 2.397 207.0049371999999 4.719 203.38579629999995 12.239 193.50570150000004 4.044 188.173642 11.373 167.33823899999993 3.762 187.9014910999999 4.081 210.86244099999993 4.929 226.25966779999996 3.89 191.70745799999995 3.953)
Error minima by case: (0.0 0 7.527 2 3.2738 8 26.9945 8 11.3962 2 17.9676 2 4.0 1 10.5387 1 4.9842 1 17.0 1 5.7373 9 8.0 2 1.1962 9 72.0 3 4.3561 9 0.0 0 12.6555 3 6.7938 9 39.5646 2 11.4357 9 25.0 2 46.0 2 37.8087 3 85.7009 2 0.4232 2)
Average genome size in population (length): 77.648
Average program size in population (points): 78.648
Average percent parens in population: 0.015
Minimum age in population: 29.04904174804688
Maximum age in population: 33.98406553268433
Average age in population: 32.02591919755936
Median age in population: 32.07809996604919
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.05
Error (vector) diversity:			 0.053
Behavioral diversity:				 0.054
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 42152454
--- Timings ---
Current time: 1529615620026 milliseconds
Total Time:          85.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.1 seconds, 36.3%
Fitness Testing:     42.7 seconds, 49.9%
Report:              11.7 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 54630.0
Test mean error for best: 27.31500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -39.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 57.3961934486 
Correct output: 19.9676470573  | Program output: 91.9676470573 
Correct output: 33.3987292904  | Program output: 37.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -63.9811660953
Correct output: -68.2663702523 | Program output: 10.7336297477 
Correct output: -103.9955386998 | Program output: -95.9955386998
Correct output: -61.3328712961 | Program output: 28.6671287039 
Correct output: -145.0267384409 | Program output: -73.0267384409
Correct output: -55.6438617168 | Program output: 31.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -95.170234299 
Correct output: -112.8086599195 | Program output: -37.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction integer_swap} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max integer_swap tagged_224 tagged_962 float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_sub in2)
Errors: [1.0 1 13.0 2 34.0 10 96.0 13 44.0 2 72.0 2 4.0 1 69.0 2 12.0 2 17.0 2 79.0 13 8.0 3 90.0 11 72.0 3 87.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 46.0 3 75.0 3 94.0 2 56.0 2]
Total: 1370.0
Mean: 27.4
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4715.5288838000015
Median total errors in population: 1381.0
Error averages by case: (140.39753610000002 2.896 156.88620699999998 3.935 166.65168099999994 10.415 219.32000800000003 13.287 177.74301259999996 3.722 201.44534930000006 3.718 144.39924319999997 2.879 196.3656133 3.846 149.52465509999993 3.865 160.8367661 3.884 202.76360010000002 13.381 153.9189371 4.75 216.0269172 11.575 208.07448089999988 4.867 214.24960739999997 11.622 138.34197519999998 2.302 196.84639329999996 4.631 197.9610011999999 12.357 182.98090160000007 3.936 182.54239249999995 11.466 156.67153139999994 3.68 186.37720869999993 4.042 209.79654639999993 4.884 216.0024245 3.767 185.8608946 3.837)
Error minima by case: (0.0 0 7.527 2 2.4395 8 2.4629 8 0.729 2 7.3005 1 1.9414 1 10.4043 1 10.0 1 17.0 1 8.2664 10 8.0 2 1.3329 10 72.0 3 4.3561 10 0.0 0 26.0 2 6.7938 9 44.0 2 11.4357 9 18.4578 2 46.0 2 37.8087 3 6.0 1 0.4232 2)
Average genome size in population (length): 77.722
Average program size in population (points): 78.722
Average percent parens in population: 0.015
Minimum age in population: 30.6672739982605
Maximum age in population: 35.32927131652832
Average age in population: 33.49789596128464
Median age in population: 33.57564282417297
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.058
Error (vector) diversity:			 0.064
Behavioral diversity:				 0.065
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 44124779
--- Timings ---
Current time: 1529615623778 milliseconds
Total Time:          89.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.4 seconds, 36.3%
Fitness Testing:     44.6 seconds, 49.9%
Report:              12.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 54630.0
Test mean error for best: 27.31500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -39.4729786445
Correct output: 5.2737975027   | Program output: -28.7262024973
Correct output: 28.9944965858  | Program output: -67.0055034142
Correct output: 13.3961934486  | Program output: 57.3961934486 
Correct output: 19.9676470573  | Program output: 91.9676470573 
Correct output: 33.3987292904  | Program output: 37.3987292904 
Correct output: -11.5386957197 | Program output: -80.5386957197
Correct output: -71.2921620852 | Program output: -83.2921620852
Correct output: -80.9811660953 | Program output: -63.9811660953
Correct output: -68.2663702523 | Program output: 10.7336297477 
Correct output: -103.9955386998 | Program output: -95.9955386998
Correct output: -61.3328712961 | Program output: 28.6671287039 
Correct output: -145.0267384409 | Program output: -73.0267384409
Correct output: -55.6438617168 | Program output: 31.3561382832 
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 27.9348060994 
Correct output: 66.2062402799  | Program output: -5.7937597201 
Correct output: 128.8438321461 | Program output: 72.8438321461 
Correct output: 43.5643378164  | Program output: -10.4356621836
Correct output: 56.5422105693  | Program output: 29.5422105693 
Correct output: -141.170234299 | Program output: -95.170234299 
Correct output: -112.8086599195 | Program output: -37.8086599195
Correct output: 180.7008834843 | Program output: 86.7008834843 
Correct output: -40.4231951304 | Program output: -96.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (integer_pop integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_yankdup tagged_224 tagged_962 float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_sub in2)
Errors: [1.0 1 13.0 2 34.0 10 96.0 13 44.0 2 72.0 2 4.0 1 69.0 2 12.0 2 17.0 2 79.0 13 8.0 3 90.0 11 72.0 3 87.0 11 0.0 0 74.0 3 72.0 12 56.0 2 54.0 11 27.0 2 46.0 3 75.0 3 94.0 2 56.0 2]
Total: 1370.0
Mean: 27.4
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 5401.232182900002
Median total errors in population: 1381.0
Error averages by case: (164.9695138 3.256 188.44226500000005 4.296 189.53088799999995 10.483 240.69488610000002 13.271 211.77902259999996 4.077 234.44050570000005 4.104 179.0081995 3.26 218.50789950000004 4.15 173.84428029999998 4.182 192.27820380000006 4.26 227.03461880000003 13.377 185.76265120000002 5.128 246.84344040000002 11.641 237.65397849999997 5.263 246.62427290000002 11.663 164.3564443 2.623 221.17672939999994 4.92 217.61250469999993 12.347 209.05444780000008 4.249 203.20196399999998 11.519 182.52172149999993 3.99 216.92876609999996 4.461 239.1552451 5.239 241.14652699999996 4.104 208.63220689999994 4.168)
Error minima by case: (0.0 0 6.527 2 3.2738 8 25.9825 8 11.7344 2 18.8027 2 4.0 1 9.9851 1 10.0 1 17.0 1 7.2664 9 5.4279 2 0.3329 8 46.4591 3 3.3561 9 0.0 0 25.9348 3 4.5644 9 54.0 2 11.4357 9 5.0996 2 42.6026 2 14.2411 3 84.7009 2 18.5768 2)
Average genome size in population (length): 77.45
Average program size in population (points): 78.45
Average percent parens in population: 0.015
Minimum age in population: 31.92098808288574
Maximum age in population: 36.76896870136261
Average age in population: 34.92249248015881
Median age in population: 34.96733349561691
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.081
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 46094917
--- Timings ---
Current time: 1529615627487 milliseconds
Total Time:          93.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.8 seconds, 36.3%
Fitness Testing:     46.4 seconds, 49.9%
Report:              12.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 54158.0
Test mean error for best: 27.07900
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -76.1667347159
Correct output: -52.4729786445 | Program output: -39.4729786445
Correct output: 5.2737975027   | Program output: -27.7262024973
Correct output: 28.9944965858  | Program output: -66.0055034142
Correct output: 13.3961934486  | Program output: 57.3961934486 
Correct output: 19.9676470573  | Program output: 91.9676470573 
Correct output: 33.3987292904  | Program output: 37.3987292904 
Correct output: -11.5386957197 | Program output: -79.5386957197
Correct output: -71.2921620852 | Program output: -82.2921620852
Correct output: -80.9811660953 | Program output: -63.9811660953
Correct output: -68.2663702523 | Program output: 10.7336297477 
Correct output: -103.9955386998 | Program output: -95.9955386998
Correct output: -61.3328712961 | Program output: 28.6671287039 
Correct output: -145.0267384409 | Program output: -73.0267384409
Correct output: -55.6438617168 | Program output: 31.3561382832 
Correct output: -25.0977592931 | Program output: -24.0977592931
Correct output: 101.9348060994 | Program output: 28.9348060994 
Correct output: 66.2062402799  | Program output: -4.7937597201 
Correct output: 128.8438321461 | Program output: 73.8438321461 
Correct output: 43.5643378164  | Program output: -9.4356621836 
Correct output: 56.5422105693  | Program output: 30.5422105693 
Correct output: -141.170234299 | Program output: -95.170234299 
Correct output: -112.8086599195 | Program output: -37.8086599195
Correct output: 180.7008834843 | Program output: 87.7008834843 
Correct output: -40.4231951304 | Program output: -95.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_sub} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction float_dec} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction tagged_814} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_sub float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin float_dec float_div in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_inc tagged_814 tag_integer_552 float_flush print_float in1 integer_min integer_max float_yankdup tagged_224 tagged_962 float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_sub in2)
Errors: [0.0 0 13.0 2 33.0 9 95.0 13 44.0 2 72.0 2 4.0 1 68.0 2 11.0 2 17.0 2 79.0 13 8.0 3 90.0 11 72.0 3 87.0 11 1.0 1 73.0 3 71.0 12 55.0 3 53.0 10 26.0 2 46.0 3 75.0 3 93.0 2 55.0 2]
Total: 1358.0
Mean: 27.16
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4801.117358000003
Median total errors in population: 1381.0
Error averages by case: (135.48250940000003 2.819 177.1296522 4.09 158.89899620000003 10.361 213.55104820000003 13.187 199.1733998 3.902 222.37251910000006 3.999 165.68367830000003 3.075 190.56559940000002 3.661 142.310434 3.703 180.83470390000002 4.059 189.47253630000003 13.268 174.00741709999997 4.935 230.6495207 11.496 226.5337095 5.058 234.9220798 11.474 129.4267697 2.054 186.13570289999996 4.483 178.04035929999995 12.221 177.08156500000004 3.76 164.08818969999993 11.417 147.10836469999995 3.559 205.37884149999996 4.4 228.6278629 5.057 210.1902509 3.638 180.0516475 3.724)
Error minima by case: (0.0 0 12.0 2 3.2738 8 26.9945 10 11.7344 2 18.8027 2 1.3925 1 9.5387 1 10.0 1 16.0 2 9.7336 10 7.0 2 27.6671 8 0.9733 2 30.3561 9 0.0 0 26.9348 3 5.7938 10 16.8438 2 10.4357 9 2.5422 2 15.3974 2 37.8087 3 7.2991 2 38.4232 2)
Average genome size in population (length): 78.74
Average program size in population (points): 79.74
Average percent parens in population: 0.014
Minimum age in population: 33.647385597229
Maximum age in population: 38.22559064626694
Average age in population: 36.29769191914797
Median age in population: 36.34119388461113
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 54
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 54
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.088
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 48113838
--- Timings ---
Current time: 1529615631359 milliseconds
Total Time:          96.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.1 seconds, 36.2%
Fitness Testing:     48.4 seconds, 50.0%
Report:              13.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 54140.0
Test mean error for best: 27.07000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -76.1667347159
Correct output: -52.4729786445 | Program output: -39.4729786445
Correct output: 5.2737975027   | Program output: -27.7262024973
Correct output: 28.9944965858  | Program output: -66.0055034142
Correct output: 13.3961934486  | Program output: 57.3961934486 
Correct output: 19.9676470573  | Program output: 91.9676470573 
Correct output: 33.3987292904  | Program output: 37.3987292904 
Correct output: -11.5386957197 | Program output: -79.5386957197
Correct output: -71.2921620852 | Program output: -82.2921620852
Correct output: -80.9811660953 | Program output: -63.9811660953
Correct output: -68.2663702523 | Program output: 10.7336297477 
Correct output: -103.9955386998 | Program output: -95.9955386998
Correct output: -61.3328712961 | Program output: 28.6671287039 
Correct output: -145.0267384409 | Program output: -73.0267384409
Correct output: -55.6438617168 | Program output: 31.3561382832 
Correct output: -25.0977592931 | Program output: -24.0977592931
Correct output: 101.9348060994 | Program output: 28.9348060994 
Correct output: 66.2062402799  | Program output: -4.7937597201 
Correct output: 128.8438321461 | Program output: 73.8438321461 
Correct output: 43.5643378164  | Program output: -9.4356621836 
Correct output: 56.5422105693  | Program output: 30.5422105693 
Correct output: -141.170234299 | Program output: -95.170234299 
Correct output: -112.8086599195 | Program output: -37.8086599195
Correct output: 180.7008834843 | Program output: 87.7008834843 
Correct output: -40.4231951304 | Program output: -95.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction tagged_814} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_dup integer_inc print_float integer_dup_times float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_inc tagged_814 tag_integer_552 float_flush print_float in1 integer_min integer_max float_yankdup tagged_224 tagged_962 float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_sub in2)
Errors: [0.0 0 13.0 2 33.0 9 95.0 13 44.0 2 72.0 2 4.0 1 68.0 2 11.0 2 17.0 2 79.0 13 8.0 3 90.0 11 72.0 3 87.0 11 1.0 1 73.0 3 71.0 12 55.0 3 53.0 10 26.0 2 46.0 3 75.0 3 93.0 2 55.0 2]
Total: 1358.0
Mean: 27.16
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4767.2047065000015
Median total errors in population: 1370.0
Error averages by case: (118.95291930000002 2.738 181.5908692 4.03 157.33524050000005 10.39 212.61251349999998 13.193 205.57711279999995 3.853 228.65274950000003 4.054 171.487198 3.02 189.44158610000005 3.62 132.44790239999998 3.638 185.35638260000002 4.045 167.21695730000005 13.233 178.1935597 4.899 231.55491280000004 11.439 231.55361329999997 5.043 240.5541567 11.382 111.40205790000005 1.888 185.23039450000002 4.455 170.61567149999996 12.219 178.87101900000002 3.707 157.02692459999994 11.432 144.12927609999994 3.522 210.40431859999995 4.645 233.52742429999995 5.022 211.99352809999996 3.619 178.70041819999994 3.69)
Error minima by case: (0.0 0 3.6095 2 3.5358 8 27.9642 8 11.3962 2 17.9676 2 3.0 1 10.9975 1 2.8027 2 13.4157 2 0.7009 9 7.0 2 6.2326 8 71.0 2 6.7803 9 0.0 0 26.9348 3 4.2294 8 55.0 2 10.4357 9 26.0 2 45.0 2 37.8087 3 85.7009 2 8.4403 2)
Average genome size in population (length): 79.564
Average program size in population (points): 80.564
Average percent parens in population: 0.013
Minimum age in population: 34.87155055999756
Maximum age in population: 39.78149178624153
Average age in population: 37.75383060473204
Median age in population: 37.80117949843407
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 69
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.103
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 50175331
--- Timings ---
Current time: 1529615635286 milliseconds
Total Time:         100.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.5 seconds, 36.2%
Fitness Testing:     50.5 seconds, 50.0%
Report:              13.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 54140.0
Test mean error for best: 27.07000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -76.1667347159
Correct output: -52.4729786445 | Program output: -39.4729786445
Correct output: 5.2737975027   | Program output: -27.7262024973
Correct output: 28.9944965858  | Program output: -66.0055034142
Correct output: 13.3961934486  | Program output: 57.3961934486 
Correct output: 19.9676470573  | Program output: 91.9676470573 
Correct output: 33.3987292904  | Program output: 37.3987292904 
Correct output: -11.5386957197 | Program output: -79.5386957197
Correct output: -71.2921620852 | Program output: -82.2921620852
Correct output: -80.9811660953 | Program output: -63.9811660953
Correct output: -68.2663702523 | Program output: 10.7336297477 
Correct output: -103.9955386998 | Program output: -95.9955386998
Correct output: -61.3328712961 | Program output: 28.6671287039 
Correct output: -145.0267384409 | Program output: -73.0267384409
Correct output: -55.6438617168 | Program output: 31.3561382832 
Correct output: -25.0977592931 | Program output: -24.0977592931
Correct output: 101.9348060994 | Program output: 28.9348060994 
Correct output: 66.2062402799  | Program output: -4.7937597201 
Correct output: 128.8438321461 | Program output: 73.8438321461 
Correct output: 43.5643378164  | Program output: -9.4356621836 
Correct output: 56.5422105693  | Program output: 30.5422105693 
Correct output: -141.170234299 | Program output: -95.170234299 
Correct output: -112.8086599195 | Program output: -37.8086599195
Correct output: 180.7008834843 | Program output: 87.7008834843 
Correct output: -40.4231951304 | Program output: -95.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_rot} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (float_frominteger float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank print_float float_rot float_sub tag_float_869 float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_yankdup tagged_224 tagged_962 float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_sub in2)
Errors: [0.0 0 13.0 2 33.0 9 95.0 13 44.0 2 72.0 2 4.0 1 68.0 2 11.0 2 17.0 2 79.0 13 8.0 3 90.0 11 72.0 3 87.0 11 1.0 1 73.0 3 71.0 12 55.0 3 53.0 10 26.0 2 46.0 3 75.0 3 93.0 2 55.0 2]
Total: 1358.0
Mean: 27.16
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4263.499340700002
Median total errors in population: 1370.0
Error averages by case: (99.18452670000003 2.348 156.2731319 3.782 136.48952979999996 10.254 192.82737110000002 13.162 185.37079020000002 3.633 208.95836409999998 3.814 148.89077049999997 2.783 169.33930670000004 3.285 113.26148130000001 3.323 160.2468032 3.774 157.35180459999998 13.302 152.91735000000003 4.641 214.27967250000006 11.448 207.9588922 4.759 221.74339139999995 11.426 93.73730260000004 1.629 167.289845 4.185 155.67866339999995 12.167 159.38955550000003 3.498 141.11865939999998 11.325 126.12738009999997 3.233 186.1485328 4.429 209.89707320000002 4.76 193.03502019999996 3.324 158.36412230000005 3.336)
Error minima by case: (0.0 0 12.0 2 4.8372 8 14.8615 9 10.3964 2 18.3424 2 3.0 1 10.5387 1 10.0 1 16.0 1 10.7336 10 7.0 2 28.6671 10 71.0 2 31.3561 9 0.0 0 3.9348 2 6.7938 10 30.8438 2 0.2916 9 12.6862 2 45.0 2 37.8087 3 6.0 1 39.4232 2)
Average genome size in population (length): 80.742
Average program size in population (points): 81.742
Average percent parens in population: 0.012
Minimum age in population: 35.87155055999756
Maximum age in population: 41.27382434904575
Average age in population: 39.16623279000819
Median age in population: 39.19690158218145
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 38
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 38
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.108
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 52270283
--- Timings ---
Current time: 1529615639297 milliseconds
Total Time:         104.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.8 seconds, 36.0%
Fitness Testing:     52.6 seconds, 50.2%
Report:              14.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 53645.0
Test mean error for best: 26.82250
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -75.1667347159
Correct output: -52.4729786445 | Program output: -39.4729786445
Correct output: 5.2737975027   | Program output: -26.7262024973
Correct output: 28.9944965858  | Program output: -65.0055034142
Correct output: 13.3961934486  | Program output: 57.3961934486 
Correct output: 19.9676470573  | Program output: 91.9676470573 
Correct output: 33.3987292904  | Program output: 37.3987292904 
Correct output: -11.5386957197 | Program output: -78.5386957197
Correct output: -71.2921620852 | Program output: -81.2921620852
Correct output: -80.9811660953 | Program output: -63.9811660953
Correct output: -68.2663702523 | Program output: 10.7336297477 
Correct output: -103.9955386998 | Program output: -95.9955386998
Correct output: -61.3328712961 | Program output: 28.6671287039 
Correct output: -145.0267384409 | Program output: -73.0267384409
Correct output: -55.6438617168 | Program output: 31.3561382832 
Correct output: -25.0977592931 | Program output: -23.0977592931
Correct output: 101.9348060994 | Program output: 29.9348060994 
Correct output: 66.2062402799  | Program output: -3.7937597201 
Correct output: 128.8438321461 | Program output: 74.8438321461 
Correct output: 43.5643378164  | Program output: -8.4356621836 
Correct output: 56.5422105693  | Program output: 31.5422105693 
Correct output: -141.170234299 | Program output: -95.170234299 
Correct output: -112.8086599195 | Program output: -37.8086599195
Correct output: 180.7008834843 | Program output: 88.7008834843 
Correct output: -40.4231951304 | Program output: -94.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction 26.614640028384756} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction integer_dec} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_dup integer_add float_inc float_shove float_inc integer_fromfloat float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 float_mult tag_float_932 float_sub float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat 26.614640028384756 float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 integer_dup_times integer_mult integer_dup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max integer_dec tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [1.0 1 13.0 2 32.0 10 94.0 13 44.0 2 72.0 2 4.0 1 67.0 2 10.0 1 17.0 2 79.0 13 8.0 3 90.0 11 72.0 3 87.0 11 2.0 1 72.0 3 70.0 12 54.0 3 52.0 10 25.0 2 46.0 3 75.0 3 92.0 2 54.0 2]
Total: 1350.0
Mean: 27.0
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4120.168468800002
Median total errors in population: 1370.0
Error averages by case: (89.8605739 1.972 156.804938 3.668 126.96429879999997 10.007 183.4370069 13.077 179.7328358 3.513 203.61788739999997 3.677 141.65511120000005 2.633 159.55942039999996 3.092 103.88911939999998 3.184 160.58198839999997 3.672 157.35251860000008 13.171 153.44261929999996 4.504 209.86134090000002 11.364 207.3930926 4.607 216.3864939 11.327 87.28723160000004 1.728 159.5980024 4.024 150.28701329999996 12.091 148.99244050000001 3.581 135.20556759999997 11.068 117.07548469999999 3.072 185.65819689999998 4.258 209.5613938 4.642 183.1472514 3.131 148.54864109999997 3.205)
Error minima by case: (0.0 0 12.0 2 3.239 8 26.9796 10 9.3438 2 16.9091 2 3.0 1 9.9851 1 10.0 1 16.0 1 9.7336 10 7.0 2 27.6671 8 2.0267 2 30.3561 9 0.0 0 25.9348 3 6.7938 9 54.0 2 11.4357 10 25.0 2 45.0 2 36.1913 3 84.7009 2 38.0272 2)
Average genome size in population (length): 81.956
Average program size in population (points): 82.956
Average percent parens in population: 0.012
Minimum age in population: 37.87118941545486
Maximum age in population: 42.44875011593103
Average age in population: 40.57703980851173
Median age in population: 40.61262884363532
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.112
Error (vector) diversity:			 0.128
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 54397666
--- Timings ---
Current time: 1529615643304 milliseconds
Total Time:         108.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.1 seconds, 35.9%
Fitness Testing:     54.7 seconds, 50.3%
Report:              14.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 53645.0
Test mean error for best: 26.82250
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -75.1667347159
Correct output: -52.4729786445 | Program output: -39.4729786445
Correct output: 5.2737975027   | Program output: -26.7262024973
Correct output: 28.9944965858  | Program output: -65.0055034142
Correct output: 13.3961934486  | Program output: 57.3961934486 
Correct output: 19.9676470573  | Program output: 91.9676470573 
Correct output: 33.3987292904  | Program output: 37.3987292904 
Correct output: -11.5386957197 | Program output: -78.5386957197
Correct output: -71.2921620852 | Program output: -81.2921620852
Correct output: -80.9811660953 | Program output: -63.9811660953
Correct output: -68.2663702523 | Program output: 10.7336297477 
Correct output: -103.9955386998 | Program output: -95.9955386998
Correct output: -61.3328712961 | Program output: 28.6671287039 
Correct output: -145.0267384409 | Program output: -73.0267384409
Correct output: -55.6438617168 | Program output: 31.3561382832 
Correct output: -25.0977592931 | Program output: -23.0977592931
Correct output: 101.9348060994 | Program output: 29.9348060994 
Correct output: 66.2062402799  | Program output: -3.7937597201 
Correct output: 128.8438321461 | Program output: 74.8438321461 
Correct output: 43.5643378164  | Program output: -8.4356621836 
Correct output: 56.5422105693  | Program output: 31.5422105693 
Correct output: -141.170234299 | Program output: -95.170234299 
Correct output: -112.8086599195 | Program output: -37.8086599195
Correct output: 180.7008834843 | Program output: 88.7008834843 
Correct output: -40.4231951304 | Program output: -94.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_rot} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (float_frominteger float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank print_float float_rot float_sub tag_float_869 float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_inc float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_yankdup tagged_224 tagged_962 float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max tagged_962 float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_sub in2)
Errors: [1.0 1 13.0 2 32.0 10 94.0 13 44.0 2 72.0 2 4.0 1 67.0 2 10.0 1 17.0 2 79.0 13 8.0 3 90.0 11 72.0 3 87.0 11 2.0 1 72.0 3 70.0 12 54.0 3 52.0 10 25.0 2 46.0 3 75.0 3 92.0 2 54.0 2]
Total: 1350.0
Mean: 27.0
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4422.175448300004
Median total errors in population: 1369.0
Error averages by case: (104.35525090000002 1.951 169.7423067 3.898 138.25580199999996 9.747 195.02705079999998 13.071 196.0005895 3.718 219.37626189999997 3.939 161.51598610000002 2.871 171.42905530000002 3.306 116.2196299 3.366 173.44302770000002 3.894 159.38187570000005 13.14 166.43158320000003 4.693 223.08664650000009 11.393 219.82915860000003 4.813 231.959092 11.349 101.04227550000003 2.349 168.84128019999997 4.215 153.34276699999995 12.082 161.733848 4.104 139.0957477999999 10.755 128.03208929999994 3.268 198.29144109999996 4.487 221.83239410000002 4.874 195.3984989 3.34 160.4627896 3.426)
Error minima by case: (0.0 0 12.0 2 2.2809 8 9.8657 7 5.7326 2 0.8388 2 3.0 1 9.5387 1 7.5702 1 16.0 1 10.7336 10 7.0 2 28.6671 8 1.0267 2 2.5025 8 0.0 0 25.9348 2 6.7938 9 14.8438 2 11.4357 9 0.5422 2 45.0 2 37.1913 3 9.2991 2 23.2988 2)
Average genome size in population (length): 83.778
Average program size in population (points): 84.778
Average percent parens in population: 0.012
Minimum age in population: 39.33863359689713
Maximum age in population: 43.92453912273049
Average age in population: 41.96746408076584
Median age in population: 42.02460590191185
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.122
Error (vector) diversity:			 0.135
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 56577154
--- Timings ---
Current time: 1529615647312 milliseconds
Total Time:         112.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.4 seconds, 35.8%
Fitness Testing:     56.9 seconds, 50.4%
Report:              15.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 53155.0
Test mean error for best: 26.57750
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -74.1667347159
Correct output: -52.4729786445 | Program output: -39.4729786445
Correct output: 5.2737975027   | Program output: -25.7262024973
Correct output: 28.9944965858  | Program output: -64.0055034142
Correct output: 13.3961934486  | Program output: 57.3961934486 
Correct output: 19.9676470573  | Program output: 91.9676470573 
Correct output: 33.3987292904  | Program output: 37.3987292904 
Correct output: -11.5386957197 | Program output: -77.5386957197
Correct output: -71.2921620852 | Program output: -80.2921620852
Correct output: -80.9811660953 | Program output: -63.9811660953
Correct output: -68.2663702523 | Program output: 10.7336297477 
Correct output: -103.9955386998 | Program output: -95.9955386998
Correct output: -61.3328712961 | Program output: 28.6671287039 
Correct output: -145.0267384409 | Program output: -73.0267384409
Correct output: -55.6438617168 | Program output: 31.3561382832 
Correct output: -25.0977592931 | Program output: -26.0977592931
Correct output: 101.9348060994 | Program output: 30.9348060994 
Correct output: 66.2062402799  | Program output: -2.7937597201 
Correct output: 128.8438321461 | Program output: 75.8438321461 
Correct output: 43.5643378164  | Program output: -7.4356621836 
Correct output: 56.5422105693  | Program output: 32.5422105693 
Correct output: -141.170234299 | Program output: -95.170234299 
Correct output: -112.8086599195 | Program output: -37.8086599195
Correct output: 180.7008834843 | Program output: 89.7008834843 
Correct output: -40.4231951304 | Program output: -93.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat float_yankdup float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop float_tan integer_inc print_float integer_dup_times float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap integer_yank float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_yankdup tagged_224 tagged_962 float_inc integer_dup integer_flush integer_inc float_max tagged_962 float_inc integer_dup float_inc float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_sub in2)
Errors: [2.0 1 13.0 2 31.0 10 93.0 13 44.0 2 72.0 2 4.0 1 66.0 2 9.0 2 17.0 2 79.0 13 8.0 3 90.0 11 72.0 3 87.0 11 1.0 1 71.0 2 69.0 12 53.0 3 51.0 10 24.0 2 46.0 3 75.0 3 91.0 2 53.0 2]
Total: 1339.0
Mean: 26.78
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4546.958490600003
Median total errors in population: 1358.0
Error averages by case: (107.07041050000001 2.031 173.97484719999997 4.018 144.60392199999995 9.668 199.752759 13.104 197.89341549999997 3.836 221.19068390000004 4.051 161.2334663 2.991 176.6709687 3.509 121.19337169999997 3.493 177.93813660000006 4.021 170.62555780000005 13.254 170.49918679999996 4.787 226.36240140000007 11.468 224.23237709999998 4.963 233.6290979 11.434 104.85514110000005 2.539 175.07207759999994 4.363 165.0101883 12.149 165.7683108 4.314 150.55819029999992 10.658 133.60969569999997 3.416 202.90700429999998 4.735 226.20260579999996 5.001 199.16405479999995 3.516 166.07161949999994 3.55)
Error minima by case: (0.0 0 1.4287 2 0.0 0 0.0 0 9.7344 2 17.619 2 1.3987 1 0.0 0 0.0 0 15.9844 1 10.7336 10 6.9896 2 10.2886 8 70.9863 2 4.5996 10 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 44.9895 2 37.8087 3 0.0 0 0.0 0)
Average genome size in population (length): 85.179
Average program size in population (points): 86.179
Average percent parens in population: 0.012
Minimum age in population: 40.33863359689713
Maximum age in population: 45.42624581977725
Average age in population: 43.3286404511407
Median age in population: 43.36351975426078
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.124
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 58795467
--- Timings ---
Current time: 1529615651374 milliseconds
Total Time:         116.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.8 seconds, 35.7%
Fitness Testing:     59.0 seconds, 50.5%
Report:              16.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 52720.0
Test mean error for best: 26.36000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -73.1667347159
Correct output: -52.4729786445 | Program output: -39.4729786445
Correct output: 5.2737975027   | Program output: -24.7262024973
Correct output: 28.9944965858  | Program output: -63.0055034142
Correct output: 13.3961934486  | Program output: 57.3961934486 
Correct output: 19.9676470573  | Program output: 91.9676470573 
Correct output: 33.3987292904  | Program output: 37.3987292904 
Correct output: -11.5386957197 | Program output: -76.5386957197
Correct output: -71.2921620852 | Program output: -79.2921620852
Correct output: -80.9811660953 | Program output: -63.9811660953
Correct output: -68.2663702523 | Program output: 10.7336297477 
Correct output: -103.9955386998 | Program output: -95.9955386998
Correct output: -61.3328712961 | Program output: 28.6671287039 
Correct output: -145.0267384409 | Program output: -73.0267384409
Correct output: -55.6438617168 | Program output: 31.3561382832 
Correct output: -25.0977592931 | Program output: -21.0977592931
Correct output: 101.9348060994 | Program output: 31.9348060994 
Correct output: 66.2062402799  | Program output: -1.7937597201 
Correct output: 128.8438321461 | Program output: 76.8438321461 
Correct output: 43.5643378164  | Program output: -6.4356621836 
Correct output: 56.5422105693  | Program output: 33.5422105693 
Correct output: -141.170234299 | Program output: -95.170234299 
Correct output: -112.8086599195 | Program output: -37.8086599195
Correct output: 180.7008834843 | Program output: 90.7008834843 
Correct output: -40.4231951304 | Program output: -92.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction 13} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_dup_items} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction tagged_814} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_dup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat float_sin float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_div in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add 13 print_float float_cos float_sub tag_float_869 integer_dup_items float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_inc tagged_814 tag_integer_552 float_flush print_float in1 integer_min integer_max float_dup tagged_224 tagged_962 float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [3.0 1 13.0 2 30.0 10 92.0 13 44.0 2 72.0 2 4.0 1 65.0 2 8.0 1 17.0 2 79.0 13 8.0 3 90.0 11 72.0 3 87.0 11 4.0 1 70.0 2 68.0 12 52.0 3 50.0 10 23.0 2 46.0 3 75.0 3 90.0 2 52.0 2]
Total: 1331.0
Mean: 26.62
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4584.823158700004
Median total errors in population: 1358.0
Error averages by case: (110.92007010000002 2.101 184.1929201 4.066 139.1611254 9.904 195.73516949999998 13.196 208.39402199999998 3.857 231.46053320000004 4.119 174.0730226 3.017 172.01271850000003 3.34 118.91356040000001 3.218 187.73765640000002 4.046 161.09827900000002 13.155 180.65423489999998 4.818 232.85015440000004 11.415 233.2753225 4.948 243.61166169999998 11.391 107.7708675 2.331 168.20770849999997 4.16 152.62600299999994 12.168 161.42607370000002 4.044 139.17265829999994 10.762 128.20088949999993 3.256 212.03647939999996 4.745 235.35720769999998 5.042 195.1566039 3.317 160.95821650000002 3.404)
Error minima by case: (0.0 0 11.0 2 2.2809 8 25.9825 7 12.5499 2 19.1071 1 2.0 1 7.5387 1 8.0 1 14.0969 1 1.3821 10 6.0 2 5.5514 8 70.0 2 11.2405 9 0.0 0 26.9348 2 0.6698 2 52.0 2 11.4357 9 23.0 2 44.0 2 37.8087 2 85.7009 2 36.4232 2)
Average genome size in population (length): 85.572
Average program size in population (points): 86.572
Average percent parens in population: 0.012
Minimum age in population: 42.48577624186873
Maximum age in population: 46.69657682999969
Average age in population: 44.75664545493945
Median age in population: 44.77001567557454
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.126
Error (vector) diversity:			 0.137
Behavioral diversity:				 0.142
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 61028822
--- Timings ---
Current time: 1529615655491 milliseconds
Total Time:         121.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.1 seconds, 35.6%
Fitness Testing:     61.2 seconds, 50.6%
Report:              16.6 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 51274.393800000056
Test mean error for best: 25.63720
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -78.1667347159
Correct output: -52.4729786445 | Program output: -40.4729786445
Correct output: 5.2737975027   | Program output: -2.0          
Correct output: 28.9944965858  | Program output: -2.0          
Correct output: 13.3961934486  | Program output: 56.3961934486 
Correct output: 19.9676470573  | Program output: 90.9676470573 
Correct output: 33.3987292904  | Program output: 36.3987292904 
Correct output: -11.5386957197 | Program output: -2.0          
Correct output: -71.2921620852 | Program output: -2.0          
Correct output: -80.9811660953 | Program output: -64.9811660953
Correct output: -68.2663702523 | Program output: 9.7336297477  
Correct output: -103.9955386998 | Program output: -96.9955386998
Correct output: -61.3328712961 | Program output: 27.6671287039 
Correct output: -145.0267384409 | Program output: -74.0267384409
Correct output: -55.6438617168 | Program output: 30.3561382832 
Correct output: -25.0977592931 | Program output: -27.0977592931
Correct output: 101.9348060994 | Program output: 25.9348060994 
Correct output: 66.2062402799  | Program output: -2.0          
Correct output: 128.8438321461 | Program output: 70.8438321461 
Correct output: 43.5643378164  | Program output: -2.0          
Correct output: 56.5422105693  | Program output: 27.5422105693 
Correct output: -141.170234299 | Program output: -96.170234299 
Correct output: -112.8086599195 | Program output: -38.8086599195
Correct output: 180.7008834843 | Program output: 84.7008834843 
Correct output: -40.4231951304 | Program output: -2.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec integer_shove float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_min integer_max float_yankdup tagged_224 tagged_962 float_inc integer_dup tagged_962 float_mod integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_dec integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_sub in2)
Errors: [2.0 1 12.0 2 7.2738 10 30.9945 12 43.0 2 71.0 2 3.0 1 9.5387 12 69.2922 11 16.0 2 78.0 12 7.0 3 89.0 11 71.0 2 86.0 11 2.0 1 76.0 3 68.2062 11 58.0 3 45.5643 12 29.0 2 45.0 3 74.0 3 96.0 2 38.4232 11]
Total: 1272.2929
Mean: 25.445858
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4149.986859300003
Median total errors in population: 1356.0
Error averages by case: (99.17652510000002 2.564 149.28759209999998 3.875 130.22925039999998 10.396 185.45999579999994 13.272 175.76169030000003 3.726 199.6439938 3.852 141.2628855 2.901 161.80591979999997 3.493 107.73476779999997 3.159 154.2790653 3.822 165.81881880000006 13.246 146.2806149 4.732 208.38883650000005 11.502 201.65591830000005 4.653 212.66300919999998 11.546 102.59244400000001 2.521 164.40350789999994 4.268 156.48622599999996 12.295 152.7152799 4.192 140.74682919999998 10.929 120.47842589999996 3.406 180.0050771 4.597 203.4042132 4.831 186.6595455 3.489 152.22442699999993 3.555)
Error minima by case: (0.0 0 11.0 2 3.3924 8 8.1971 8 12.2635 2 17.2239 1 2.0 1 1.7213 1 7.0 1 15.0 1 11.7336 9 6.0 2 8.3356 9 0.9733 2 23.5784 9 0.0 0 22.9348 2 6.7938 7 16.8438 2 6.3728 9 0.4578 2 44.0 2 36.8087 2 7.2991 2 8.3578 2)
Average genome size in population (length): 87.23
Average program size in population (points): 88.23
Average percent parens in population: 0.011
Minimum age in population: 43.97158757597208
Maximum age in population: 48.22416921053082
Average age in population: 46.24158094137534
Median age in population: 46.24927430809475
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.156
Error (vector) diversity:			 0.178
Behavioral diversity:				 0.182
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 63311043
--- Timings ---
Current time: 1529615659557 milliseconds
Total Time:         125.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.5 seconds, 35.5%
Fitness Testing:     63.4 seconds, 50.7%
Report:              17.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 51274.393800000056
Test mean error for best: 25.63720
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -78.1667347159
Correct output: -52.4729786445 | Program output: -40.4729786445
Correct output: 5.2737975027   | Program output: -2.0          
Correct output: 28.9944965858  | Program output: -2.0          
Correct output: 13.3961934486  | Program output: 56.3961934486 
Correct output: 19.9676470573  | Program output: 90.9676470573 
Correct output: 33.3987292904  | Program output: 36.3987292904 
Correct output: -11.5386957197 | Program output: -2.0          
Correct output: -71.2921620852 | Program output: -2.0          
Correct output: -80.9811660953 | Program output: -64.9811660953
Correct output: -68.2663702523 | Program output: 9.7336297477  
Correct output: -103.9955386998 | Program output: -96.9955386998
Correct output: -61.3328712961 | Program output: 27.6671287039 
Correct output: -145.0267384409 | Program output: -74.0267384409
Correct output: -55.6438617168 | Program output: 30.3561382832 
Correct output: -25.0977592931 | Program output: -27.0977592931
Correct output: 101.9348060994 | Program output: 25.9348060994 
Correct output: 66.2062402799  | Program output: -2.0          
Correct output: 128.8438321461 | Program output: 70.8438321461 
Correct output: 43.5643378164  | Program output: -2.0          
Correct output: 56.5422105693  | Program output: 27.5422105693 
Correct output: -141.170234299 | Program output: -96.170234299 
Correct output: -112.8086599195 | Program output: -38.8086599195
Correct output: 180.7008834843 | Program output: 84.7008834843 
Correct output: -40.4231951304 | Program output: -2.0          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_yank} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction float_div} {:instruction float_sin} {:instruction integer_pop} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_yankdup} {:instruction print_float} {:instruction integer_dup_times} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction tagged_814} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_dec} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (float_frominteger integer_flush integer_flush integer_inc float_max integer_add integer_dup integer_flush float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec integer_yank float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop integer_swap integer_dup_items float_div float_sin integer_pop in2 integer_pop integer_dup integer_yankdup print_float integer_dup_times integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_inc tagged_814 float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_min integer_max float_yankdup tagged_224 tagged_962 float_inc integer_dup tagged_962 float_mod integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_dec integer_dec integer_mod integer_min in2 print_float float_sin integer_min float_sub in2)
Errors: [2.0 1 12.0 2 7.2738 10 30.9945 12 43.0 2 71.0 2 3.0 1 9.5387 12 69.2922 11 16.0 2 78.0 12 7.0 3 89.0 11 71.0 2 86.0 11 2.0 1 76.0 3 68.2062 11 58.0 3 45.5643 12 29.0 2 45.0 3 74.0 3 96.0 2 38.4232 11]
Total: 1272.2929
Mean: 25.445858
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4116.016089300004
Median total errors in population: 1350.0
Error averages by case: (104.47138760000001 2.588 148.73139939999996 3.816 129.30173169999998 10.345 185.31791470000002 13.117 173.8041752 3.644 197.5384097 3.805 139.00182880000008 2.852 161.96421990000002 3.488 112.40149799999999 3.086 152.85759360000003 3.746 150.3115157999999 13.217 146.03056519999998 4.655 204.17385300000004 11.382 200.42395499999995 4.697 210.52755709999997 11.402 109.831786 2.623 161.67869739999995 4.004 150.00356739999992 12.091 152.8137739 4.259 135.15731079999998 10.634 121.41720319999999 3.341 178.69035009999996 4.52 201.9754218 4.739 186.78091369999999 3.458 151.7564603 3.544)
Error minima by case: (0.0 0 11.0 2 1.5358 8 22.7499 8 11.3962 1 17.9676 1 2.0 1 6.5078 1 5.0 1 15.0 1 10.7336 7 6.0 2 28.6671 8 70.0 2 31.3561 9 0.0 0 22.9348 2 5.7938 2 18.8438 2 8.1801 9 4.5422 1 44.0 2 36.8087 2 5.2991 2 14.3777 1)
Average genome size in population (length): 90.586
Average program size in population (points): 91.586
Average percent parens in population: 0.011
Minimum age in population: 44.97158757597208
Maximum age in population: 49.90771919791587
Average age in population: 47.76887472928688
Median age in population: 47.7776199108921
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.173
Error (vector) diversity:			 0.189
Behavioral diversity:				 0.195
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 65685131
--- Timings ---
Current time: 1529615663673 milliseconds
Total Time:         129.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.8 seconds, 35.5%
Fitness Testing:     65.6 seconds, 50.8%
Report:              17.7 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 57403.74159999994
Test mean error for best: 28.70187
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -75.1667347159
Correct output: -52.4729786445 | Program output: -36.4729786445
Correct output: 5.2737975027   | Program output: -26.7262024973
Correct output: 28.9944965858  | Program output: -65.0055034142
Correct output: 13.3961934486  | Program output: -41.0         
Correct output: 19.9676470573  | Program output: -69.0         
Correct output: 33.3987292904  | Program output: -1.0          
Correct output: -11.5386957197 | Program output: -78.5386957197
Correct output: -71.2921620852 | Program output: -81.2921620852
Correct output: -80.9811660953 | Program output: -60.9811660953
Correct output: -68.2663702523 | Program output: -76.0         
Correct output: -103.9955386998 | Program output: -92.9955386998
Correct output: -61.3328712961 | Program output: -87.0         
Correct output: -145.0267384409 | Program output: -70.0267384409
Correct output: -55.6438617168 | Program output: -84.0         
Correct output: -25.0977592931 | Program output: -23.0977592931
Correct output: 101.9348060994 | Program output: 78.0          
Correct output: 66.2062402799  | Program output: -3.7937597201 
Correct output: 128.8438321461 | Program output: 60.0          
Correct output: 43.5643378164  | Program output: -8.4356621836 
Correct output: 56.5422105693  | Program output: 31.0          
Correct output: -141.170234299 | Program output: -92.170234299 
Correct output: -112.8086599195 | Program output: -34.8086599195
Correct output: 180.7008834843 | Program output: 98.0          
Correct output: -40.4231951304 | Program output: -94.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop integer_dup integer_inc in1 float_mult tag_float_932 float_sub integer_fromfloat float_yankdup float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop float_tan integer_inc print_float integer_dup_times float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap integer_yank float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_yankdup tagged_224 tagged_962 float_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc print_float float_sin integer_min float_sub in2)
Errors: [1.0 1 16.0 2 32.0 10 94.0 13 54.3962 12 88.9676 11 34.3987 11 67.0 2 10.0 1 20.0 1 7.7336 11 11.0 3 25.6671 11 75.0 3 28.3561 12 2.0 1 23.9348 12 70.0 12 68.8438 13 52.0 10 25.5422 11 49.0 3 78.0 3 82.7009 11 54.0 2]
Total: 1253.541
Mean: 25.07082
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4600.922659200001
Median total errors in population: 1341.0
Error averages by case: (114.1302462 2.64 177.79616890000003 4.031 141.14338519999995 10.436 195.6830649 13.214 202.1842315 3.846 225.8435527 3.991 167.09642119999992 3.067 172.28257650000012 3.705 121.85490359999994 3.423 180.5872072 3.946 172.9724918 13.339 174.5066191 4.853 231.45743460000006 11.5 227.51426539999997 4.948 238.1957276 11.532 119.0579265 2.676 175.2254604 3.756 166.8566118999999 12.084 163.88325890000002 4.329 152.0908374 10.763 133.28462869999998 3.393 205.5024056 4.687 229.09340830000002 4.928 197.82479349999994 3.506 162.5440316 3.718)
Error minima by case: (0.0 0 11.1636 2 0.2738 8 5.7156 7 8.3613 1 14.9459 2 3.0 1 9.3601 1 4.0 1 16.0 1 4.6298 8 7.0 2 2.3037 8 71.0 2 7.9927 9 0.0 0 23.9348 2 6.7938 2 48.0 2 8.8543 9 19.0 1 45.0 2 49.1721 2 82.7009 2 36.5679 1)
Average genome size in population (length): 92.562
Average program size in population (points): 93.562
Average percent parens in population: 0.011
Minimum age in population: 47.21357315732166
Maximum age in population: 51.71286095026881
Average age in population: 49.28578333756735
Median age in population: 49.3063198220334
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.202
Error (vector) diversity:			 0.227
Behavioral diversity:				 0.234
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 68116868
--- Timings ---
Current time: 1529615667932 milliseconds
Total Time:         133.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.2 seconds, 35.4%
Fitness Testing:     67.9 seconds, 50.9%
Report:              18.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 57403.74159999994
Test mean error for best: 28.70187
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -75.1667347159
Correct output: -52.4729786445 | Program output: -36.4729786445
Correct output: 5.2737975027   | Program output: -26.7262024973
Correct output: 28.9944965858  | Program output: -65.0055034142
Correct output: 13.3961934486  | Program output: -41.0         
Correct output: 19.9676470573  | Program output: -69.0         
Correct output: 33.3987292904  | Program output: -1.0          
Correct output: -11.5386957197 | Program output: -78.5386957197
Correct output: -71.2921620852 | Program output: -81.2921620852
Correct output: -80.9811660953 | Program output: -60.9811660953
Correct output: -68.2663702523 | Program output: -76.0         
Correct output: -103.9955386998 | Program output: -92.9955386998
Correct output: -61.3328712961 | Program output: -87.0         
Correct output: -145.0267384409 | Program output: -70.0267384409
Correct output: -55.6438617168 | Program output: -84.0         
Correct output: -25.0977592931 | Program output: -23.0977592931
Correct output: 101.9348060994 | Program output: 78.0          
Correct output: 66.2062402799  | Program output: -3.7937597201 
Correct output: 128.8438321461 | Program output: 60.0          
Correct output: 43.5643378164  | Program output: -8.4356621836 
Correct output: 56.5422105693  | Program output: 31.0          
Correct output: -141.170234299 | Program output: -92.170234299 
Correct output: -112.8086599195 | Program output: -34.8086599195
Correct output: 180.7008834843 | Program output: 98.0          
Correct output: -40.4231951304 | Program output: -94.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction in1} {:instruction float_dec} {:instruction in1} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction integer_dup_items} {:instruction float_div} {:instruction in2} {:instruction integer_pop} {:instruction float_tan} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction print_float} {:instruction float_sin} {:instruction integer_min} {:instruction float_sub} {:instruction in2})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec in1 float_dec in1 tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop integer_dup integer_inc in1 float_mult tag_float_932 float_sub integer_fromfloat float_yankdup float_dec float_pop float_sin integer_dup_items float_div in2 integer_pop float_tan integer_inc print_float integer_dup_times float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap integer_yank float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_max float_yankdup tagged_224 tagged_962 float_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc print_float float_sin integer_min float_sub in2)
Errors: [1.0 1 16.0 2 32.0 10 94.0 13 54.3962 12 88.9676 11 34.3987 11 67.0 2 10.0 1 20.0 1 7.7336 11 11.0 3 25.6671 11 75.0 3 28.3561 12 2.0 1 23.9348 12 70.0 12 68.8438 13 52.0 10 25.5422 11 49.0 3 78.0 3 82.7009 11 54.0 2]
Total: 1253.541
Mean: 25.07082
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4366.6991224
Median total errors in population: 1339.0
Error averages by case: (115.14519220000007 2.967 164.53344959999998 3.851 130.15557179999982 10.326 181.03335650000002 12.959 190.87959849999996 3.672 214.67368400000007 3.841 154.35447239999996 2.903 158.1028243000002 4.719 121.95181779999992 4.144 168.3393134 3.792 165.88820910000007 13.056 161.7713202 4.623 219.5907626000001 11.364 215.71767010000002 4.699 226.31135749999999 11.35 118.82067460000006 2.835 167.74893099999994 3.777 157.82682849999975 11.534 156.88208270000004 4.281 142.53615609999983 10.798 126.02167139999996 3.331 194.54466559999997 4.54 217.45068809999998 4.734 191.17827640000002 3.52 153.00954799999994 4.615)
Error minima by case: (0.0 0 12.0 1 0.6076 8 22.099 8 9.8182 1 15.5583 2 3.0 1 8.5387 1 1.0 1 16.0 1 7.7336 9 5.9955 2 19.6297 9 1.9733 2 18.7006 8 0.0 0 23.9348 2 6.2573 2 19.8438 2 9.2602 2 5.5422 1 43.1702 2 14.8087 2 4.2991 2 13.8638 1)
Average genome size in population (length): 93.315
Average program size in population (points): 94.315
Average percent parens in population: 0.011
Minimum age in population: 48.30717975366861
Maximum age in population: 52.98386231786571
Average age in population: 50.62783724546403
Median age in population: 50.68047903984552
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.215
Error (vector) diversity:			 0.238
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 70576653
--- Timings ---
Current time: 1529615672166 milliseconds
Total Time:         137.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.6 seconds, 35.3%
Fitness Testing:     70.2 seconds, 51.0%
Report:              18.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 46642.614700000035
Test mean error for best: 23.32131
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -69.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: 7.0           
Correct output: 28.9944965858  | Program output: 7.0           
Correct output: 13.3961934486  | Program output: 1.0           
Correct output: 19.9676470573  | Program output: 1.0           
Correct output: 33.3987292904  | Program output: 1.0           
Correct output: -11.5386957197 | Program output: 7.0           
Correct output: -71.2921620852 | Program output: 7.0           
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 1.0           
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 1.0           
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 1.0           
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 34.9348060994 
Correct output: 66.2062402799  | Program output: 7.0           
Correct output: 128.8438321461 | Program output: 79.8438321461 
Correct output: 43.5643378164  | Program output: 7.0           
Correct output: 56.5422105693  | Program output: 36.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 93.7008834843 
Correct output: -40.4231951304 | Program output: 7.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 print_float integer_fromfloat integer_dup float_dec integer_shove float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_min integer_max float_yankdup tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [7.0 2 14.0 2 1.7262 10 21.9945 12 12.3962 11 18.9676 10 32.3987 11 18.5387 13 78.2922 11 18.0 2 69.2664 12 9.0 3 62.3329 12 73.0 3 56.6439 13 0.0 0 67.0 3 59.2062 11 49.0 3 36.5643 12 20.0 1 47.0 2 76.0 3 87.0 3 47.4232 12]
Total: 1159.751
Mean: 23.19502
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4242.7749782
Median total errors in population: 1328.0
Error averages by case: (122.58883380000007 3.248 141.88110929999996 3.905 132.6376950999992 10.42 172.11034650000022 12.698 168.7143677 3.674 192.74034930000005 3.711 132.65053000000003 2.851 151.0823228000009 7.427 145.32033129999942 6.714 146.22838959999996 3.823 178.42219900000006 12.92 140.07942500000001 4.762 204.46172330000005 11.482 194.5119117999999 4.485 205.2081112 11.521 120.18194620000006 2.927 179.07024839999997 4.222 170.13473279999872 10.938 167.18093710000005 4.388 152.8767686999994 11.292 137.52982059999994 3.45 173.0126511999999 4.609 195.57248959999998 4.802 200.63399759999996 3.712 156.91474029999966 7.048)
Error minima by case: (0.0 0 7.1912 1 0.1628 7 7.4373 8 7.7344 1 15.619 1 2.0 1 2.3217 1 0.0 0 15.0 1 7.7336 8 6.0 2 16.0511 7 70.0 2 10.3621 9 0.0 0 9.2841 2 6.4635 1 43.0 2 11.4357 2 14.0 1 44.0 2 37.8087 2 51.8363 2 0.1415 1)
Average genome size in population (length): 90.641
Average program size in population (points): 91.641
Average percent parens in population: 0.011
Minimum age in population: 49.42924040555954
Maximum age in population: 54.06428575448808
Average age in population: 52.03383310520253
Median age in population: 52.07763212044665
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.232
Error (vector) diversity:			 0.258
Behavioral diversity:				 0.261
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 72969740
--- Timings ---
Current time: 1529615676258 milliseconds
Total Time:         141.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.9 seconds, 35.2%
Fitness Testing:     72.3 seconds, 51.0%
Report:              19.4 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 46642.614700000035
Test mean error for best: 23.32131
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -69.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: 7.0           
Correct output: 28.9944965858  | Program output: 7.0           
Correct output: 13.3961934486  | Program output: 1.0           
Correct output: 19.9676470573  | Program output: 1.0           
Correct output: 33.3987292904  | Program output: 1.0           
Correct output: -11.5386957197 | Program output: 7.0           
Correct output: -71.2921620852 | Program output: 7.0           
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 1.0           
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 1.0           
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 1.0           
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 34.9348060994 
Correct output: 66.2062402799  | Program output: 7.0           
Correct output: 128.8438321461 | Program output: 79.8438321461 
Correct output: 43.5643378164  | Program output: 7.0           
Correct output: 56.5422105693  | Program output: 36.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 93.7008834843 
Correct output: -40.4231951304 | Program output: 7.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 print_float integer_fromfloat integer_dup float_dec integer_shove float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_min integer_max float_yankdup tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [7.0 2 14.0 2 1.7262 10 21.9945 12 12.3962 11 18.9676 10 32.3987 11 18.5387 13 78.2922 11 18.0 2 69.2664 12 9.0 3 62.3329 12 73.0 3 56.6439 13 0.0 0 67.0 3 59.2062 11 49.0 3 36.5643 12 20.0 1 47.0 2 76.0 3 87.0 3 47.4232 12]
Total: 1159.751
Mean: 23.19502
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3336.575119399998
Median total errors in population: 1272.2929
Error averages by case: (92.5454713000001 3.158 91.39603079999995 3.32 101.79650319999928 10.39 130.6236398000005 12.256 118.8354666000001 3.438 144.02744480000015 3.378 81.66010150000005 2.558 110.87974600000084 10.184 138.3768397999992 9.451 96.26281980000002 3.246 147.09115339999994 12.568 89.64398529999997 4.209 159.62552940000003 11.361 146.9619777 3.649 157.24688069999993 11.47 83.13734190000004 2.437 158.41521149999997 4.385 151.6060443999986 11.064 144.78960590000005 4.411 132.07909999999902 11.761 114.6240943 3.44 124.2631175999999 4.09 148.1498137999999 4.232 179.49631929999998 3.583 129.44388060000122 9.558)
Error minima by case: (0.0 0 11.0 2 0.2738 3 21.9945 4 10.3962 1 16.9676 1 1.0376 1 0.0 0 0.0 0 15.0 1 7.7336 9 6.0 2 3.9986 7 0.0267 2 7.0684 9 0.0 0 23.9348 2 6.7938 1 14.8438 2 11.4357 2 0.5422 1 44.0 2 38.1913 2 9.2991 2 0.0 0)
Average genome size in population (length): 87.258
Average program size in population (points): 88.258
Average percent parens in population: 0.011
Minimum age in population: 50.68177385209128
Maximum age in population: 55.53644097853976
Average age in population: 53.42258975254835
Median age in population: 53.49277432451345
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.22
Error (vector) diversity:			 0.251
Behavioral diversity:				 0.254
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 75270640
--- Timings ---
Current time: 1529615680561 milliseconds
Total Time:         146.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.3 seconds, 35.1%
Fitness Testing:     74.6 seconds, 51.1%
Report:              20.0 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 46792.569600000046
Test mean error for best: 23.39628
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: 7.0           
Correct output: 28.9944965858  | Program output: 7.0           
Correct output: 13.3961934486  | Program output: 1.0           
Correct output: 19.9676470573  | Program output: 1.0           
Correct output: 33.3987292904  | Program output: 1.0           
Correct output: -11.5386957197 | Program output: 7.0           
Correct output: -71.2921620852 | Program output: 7.0           
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 1.0           
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 1.0           
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 1.0           
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 34.9348060994 
Correct output: 66.2062402799  | Program output: 7.0           
Correct output: 128.8438321461 | Program output: 79.8438321461 
Correct output: 43.5643378164  | Program output: 7.0           
Correct output: 56.5422105693  | Program output: 36.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 93.7008834843 
Correct output: -40.4231951304 | Program output: 7.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_inc float_max integer_add integer_add float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec integer_shove float_dec in1 float_mult tag_float_932 integer_dup integer_inc print_float integer_dup_times float_add integer_yank float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_min integer_max float_yankdup tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [1.0 1 14.0 2 1.7262 10 21.9945 12 12.3962 11 18.9676 10 32.3987 11 18.5387 13 78.2922 11 18.0 2 69.2664 12 9.0 3 62.3329 12 73.0 3 56.6439 13 0.0 0 67.0 3 59.2062 11 49.0 3 36.5643 12 20.0 1 47.0 2 76.0 3 87.0 3 47.4232 12]
Total: 1152.751
Mean: 23.05502
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3934.5348058999984
Median total errors in population: 1272.2929
Error averages by case: (115.34542460000009 3.372 121.17898759999997 3.666 119.61285519999905 10.568 149.09580780000056 12.289 146.70216320000003 4.622 169.61844670000042 4.45 115.31710570000023 3.811 130.051145700001 10.485 158.484835699999 9.769 125.76804289999993 3.558 174.99040039999966 12.68 119.57449660000005 4.568 184.65198759999996 11.558 175.2494184999999 4.132 182.16926099999978 11.764 111.80598620000006 2.689 175.35006539999992 4.72 166.6047925999982 11.297 163.6618398000001 4.809 147.4972876999992 11.757 134.62258539999996 3.776 153.15582829999988 4.353 176.15057049999984 4.563 196.89141439999995 3.904 147.9160564000001 9.908)
Error minima by case: (0.0 0 3.093 2 0.2665 8 19.9945 8 9.3962 1 16.3084 1 0.3987 1 1.0 1 0.0 0 15.0 1 7.7336 10 6.0 2 3.9986 8 70.0 2 6.2639 10 0.0 0 23.9348 2 6.7938 1 44.0 2 11.4357 2 15.0 1 44.0 2 37.8087 2 82.0 2 1.0 2)
Average genome size in population (length): 88.622
Average program size in population (points): 89.622
Average percent parens in population: 0.011
Minimum age in population: 52.31021303968737
Maximum age in population: 56.6746428116312
Average age in population: 54.76767702569422
Median age in population: 54.84171010994032
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.239
Error (vector) diversity:			 0.273
Behavioral diversity:				 0.275
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 77605085
--- Timings ---
Current time: 1529615684645 milliseconds
Total Time:         150.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.6 seconds, 35.0%
Fitness Testing:     76.7 seconds, 51.1%
Report:              20.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 46792.569600000046
Test mean error for best: 23.39628
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: 7.0           
Correct output: 28.9944965858  | Program output: 7.0           
Correct output: 13.3961934486  | Program output: 1.0           
Correct output: 19.9676470573  | Program output: 1.0           
Correct output: 33.3987292904  | Program output: 1.0           
Correct output: -11.5386957197 | Program output: 7.0           
Correct output: -71.2921620852 | Program output: 7.0           
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 1.0           
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 1.0           
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 1.0           
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 34.9348060994 
Correct output: 66.2062402799  | Program output: 7.0           
Correct output: 128.8438321461 | Program output: 79.8438321461 
Correct output: 43.5643378164  | Program output: 7.0           
Correct output: 56.5422105693  | Program output: 36.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 93.7008834843 
Correct output: -40.4231951304 | Program output: 7.0           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction float_cos} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction float_yank} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction float_rot} {:instruction integer_swap} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_frominteger float_cos float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 print_float integer_fromfloat integer_dup float_dec integer_shove float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin in2 integer_pop integer_dup float_yank print_float integer_dup_times float_add integer_yank float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min float_rot integer_swap float_yankdup tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [1.0 1 14.0 2 1.7262 10 21.9945 12 12.3962 11 18.9676 10 32.3987 11 18.5387 13 78.2922 11 18.0 2 69.2664 12 9.0 3 62.3329 12 73.0 3 56.6439 13 0.0 0 67.0 3 59.2062 11 49.0 3 36.5643 12 20.0 1 47.0 2 76.0 3 87.0 3 47.4232 12]
Total: 1152.751
Mean: 23.05502
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3959.1328412
Median total errors in population: 1263.3791
Error averages by case: (120.1917891000001 3.564 115.82589489999995 3.667 128.682377199999 10.615 160.32038480000043 12.387 134.51038160000056 7.05 152.06874150000124 6.622 119.28910260000106 6.42 139.9762362000011 10.217 161.56131169999915 9.475 120.52425319999998 3.519 165.41096839999875 12.467 113.90720210000002 4.566 172.3180543000002 11.749 169.9373722 4.355 169.4872138999993 12.13 104.91437210000008 2.638 186.4700886999997 5.117 176.893225399998 11.218 176.8933242000002 5.285 157.6458408999995 11.647 146.35432999999978 4.211 147.76335949999992 4.172 171.20477879999996 4.568 209.64324049999982 4.494 155.4529973999998 9.733)
Error minima by case: (0.0 0 11.0 2 0.2738 8 7.2062 9 4.7344 1 1.8206 1 2.0 1 0.0 0 0.0 0 7.9812 1 4.7336 9 6.0 2 11.6671 7 1.9733 2 17.3561 10 0.0 0 23.9348 2 1.6689 1 44.0 2 0.1007 2 11.3329 1 44.0 2 39.8087 2 77.6074 2 0.0 0)
Average genome size in population (length): 91.571
Average program size in population (points): 92.571
Average percent parens in population: 0.011
Minimum age in population: 53.40727386533399
Maximum age in population: 58.41483066164801
Average age in population: 56.13076223701932
Median age in population: 56.17791148702236
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.293
Error (vector) diversity:			 0.325
Behavioral diversity:				 0.327
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 80020384
--- Timings ---
Current time: 1529615688927 milliseconds
Total Time:         154.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.0 seconds, 35.0%
Fitness Testing:     78.9 seconds, 51.2%
Report:              21.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 46243.34249999998
Test mean error for best: 23.12167
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -75.1667347159
Correct output: -52.4729786445 | Program output: -36.4729786445
Correct output: 5.2737975027   | Program output: 8.2737975027  
Correct output: 28.9944965858  | Program output: 9.9944965858  
Correct output: 13.3961934486  | Program output: 3.0           
Correct output: 19.9676470573  | Program output: 3.0           
Correct output: 33.3987292904  | Program output: 3.0           
Correct output: -11.5386957197 | Program output: 8.4613042803  
Correct output: -71.2921620852 | Program output: 9.7078379148  
Correct output: -80.9811660953 | Program output: -60.9811660953
Correct output: -68.2663702523 | Program output: 3.0           
Correct output: -103.9955386998 | Program output: -92.9955386998
Correct output: -61.3328712961 | Program output: 3.0           
Correct output: -145.0267384409 | Program output: -70.0267384409
Correct output: -55.6438617168 | Program output: 3.0           
Correct output: -25.0977592931 | Program output: -23.0977592931
Correct output: 101.9348060994 | Program output: 34.9348060994 
Correct output: 66.2062402799  | Program output: 9.2062402799  
Correct output: 128.8438321461 | Program output: 79.8438321461 
Correct output: 43.5643378164  | Program output: 8.5643378164  
Correct output: 56.5422105693  | Program output: 36.5422105693 
Correct output: -141.170234299 | Program output: -92.170234299 
Correct output: -112.8086599195 | Program output: -34.8086599195
Correct output: 180.7008834843 | Program output: 93.7008834843 
Correct output: -40.4231951304 | Program output: 8.5768048696  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_max} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sin} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_max float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec integer_shove float_dec in1 float_mult tag_float_932 float_sin in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank float_add integer_yank print_float float_cos float_sub integer_dup_items float_cos float_dup_items tagged_96 integer_swap float_cos float_dup_items tagged_96 float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_min integer_max float_yankdup integer_max float_yankdup tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [1.0 1 16.0 2 3.0 1 19.0 2 10.3962 11 16.9676 11 30.3987 10 20.0 13 81.0 13 20.0 1 71.2664 12 11.0 3 64.3329 13 75.0 3 58.6439 13 2.0 1 67.0 3 57.0 2 49.0 3 35.0 2 20.0 1 49.0 3 78.0 3 87.0 3 49.0 13]
Total: 1134.0057000000002
Mean: 22.680115
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4363.149983099996
Median total errors in population: 1218.5832
Error averages by case: (137.39739430000012 3.788 138.4036672999999 4.009 144.10926019999968 10.539 170.44698630000048 12.301 141.61975380000072 8.815 155.03832180000174 8.221 140.97258570000056 8.446 155.47693960000097 10.707 183.2727302999989 9.861 143.24671669999995 3.874 184.85452069999772 12.446 137.15374700000004 4.855 184.45578030000036 11.993 191.85239429999993 4.824 180.20974849999877 12.531 124.40223400000008 2.638 198.1029057999998 4.896 191.71048469999798 11.2 185.69738030000013 5.022 173.0008437999991 11.746 155.31460669999993 3.98 170.31125959999986 4.237 192.47196029999986 4.86 219.9366864999999 4.488 173.20307459999987 10.211)
Error minima by case: (0.0 0 11.0 1 0.0 0 0.0 0 6.5437 1 13.0908 1 2.0 1 0.0 0 0.0 0 15.0 1 4.2682 10 6.0 2 2.6653 7 70.0 2 8.3543 9 0.0 0 23.9348 2 0.0 0 21.8438 2 0.0 0 7.5422 1 44.0 2 37.8087 2 2.2991 2 0.0 0)
Average genome size in population (length): 93.739
Average program size in population (points): 94.739
Average percent parens in population: 0.011
Minimum age in population: 54.40727386533399
Maximum age in population: 59.58819765569751
Average age in population: 57.62219932393343
Median age in population: 57.66176531444762
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.318
Error (vector) diversity:			 0.342
Behavioral diversity:				 0.344
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 82505099
--- Timings ---
Current time: 1529615693110 milliseconds
Total Time:         158.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.3 seconds, 34.9%
Fitness Testing:     81.0 seconds, 51.1%
Report:              22.0 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 46513.92079999999
Test mean error for best: 23.25696
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -70.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -15.4524049947
Correct output: 28.9944965858  | Program output: -30.0110068284
Correct output: 13.3961934486  | Program output: 1.0           
Correct output: 19.9676470573  | Program output: 1.0           
Correct output: 33.3987292904  | Program output: 1.0           
Correct output: -11.5386957197 | Program output: -3.5386957197 
Correct output: -71.2921620852 | Program output: -63.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 1.0           
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 1.0           
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 1.0           
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 28.9348060994 
Correct output: 66.2062402799  | Program output: 4.6811236393  
Correct output: 128.8438321461 | Program output: 73.8438321461 
Correct output: 43.5643378164  | Program output: -0.6139731013 
Correct output: 56.5422105693  | Program output: 35.0          
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 87.7008834843 
Correct output: -40.4231951304 | Program output: -32.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_dup_times} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 print_float integer_fromfloat integer_dup float_dec integer_shove float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_dup_times in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min float_frominteger integer_max float_yankdup tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [6.0 1 14.0 2 20.7262 11 59.0055 11 12.3962 11 18.9676 10 32.3987 11 8.0 2 8.0 2 18.0 2 69.2664 12 9.0 3 62.3329 12 73.0 3 56.6439 13 0.0 0 73.0 3 61.5251 11 55.0 3 44.1783 9 21.5422 11 47.0 2 76.0 3 93.0 2 8.0 2]
Total: 1098.983
Mean: 21.97966
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4132.593062799993
Median total errors in population: 1186.2985999999999
Error averages by case: (130.8465004000001 3.854 123.97858209999993 3.823 137.03428650000012 10.299 162.65962900000042 12.136 129.67577110000119 9.129 140.87842810000168 8.467 129.8583815000011 8.932 152.6826471000011 11.327 181.80448799999903 10.257 129.4180848999999 3.693 172.9822427999977 12.485 123.05040990000005 4.64 173.14107470000027 11.97 179.1197767999999 4.666 168.9606063999988 12.637 108.36084830000009 2.469 193.03529829999982 4.693 183.88324719999773 10.833 181.1797062000001 4.786 165.1405747999989 11.686 150.07981629999995 3.651 157.45757639999988 3.938 180.05276409999993 4.66 215.27104779999982 4.573 171.82027409999947 10.617)
Error minima by case: (0.0 0 12.0 1 0.0 0 5.309 2 3.9629 1 10.9784 1 3.0 1 0.0 0 0.0 0 16.0 1 10.7336 9 7.0 2 28.6671 9 0.9733 2 31.3561 10 0.0 0 22.9348 2 0.8922 1 17.8438 2 11.4357 1 3.5422 1 45.0 2 37.8087 2 6.2991 2 0.0 0)
Average genome size in population (length): 100.383
Average program size in population (points): 101.383
Average percent parens in population: 0.010
Minimum age in population: 55.40727386533399
Maximum age in population: 60.79822637995676
Average age in population: 59.07929185967399
Median age in population: 59.1118188129517
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.298
Error (vector) diversity:			 0.327
Behavioral diversity:				 0.33
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 85176333
--- Timings ---
Current time: 1529615697370 milliseconds
Total Time:         162.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 34.8%
Fitness Testing:     83.3 seconds, 51.2%
Report:              22.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 46513.92079999999
Test mean error for best: 23.25696
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -70.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -15.4524049947
Correct output: 28.9944965858  | Program output: -30.0110068284
Correct output: 13.3961934486  | Program output: 1.0           
Correct output: 19.9676470573  | Program output: 1.0           
Correct output: 33.3987292904  | Program output: 1.0           
Correct output: -11.5386957197 | Program output: -3.5386957197 
Correct output: -71.2921620852 | Program output: -63.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 1.0           
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 1.0           
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 1.0           
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 28.9348060994 
Correct output: 66.2062402799  | Program output: 4.6811236393  
Correct output: 128.8438321461 | Program output: 73.8438321461 
Correct output: 43.5643378164  | Program output: -0.6139731013 
Correct output: 56.5422105693  | Program output: 35.0          
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 87.7008834843 
Correct output: -40.4231951304 | Program output: -32.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_dup_times} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 print_float integer_fromfloat integer_dup float_dec integer_shove float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_dup_times in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min float_frominteger integer_max float_yankdup tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [6.0 1 14.0 2 20.7262 11 59.0055 11 12.3962 11 18.9676 10 32.3987 11 8.0 2 8.0 2 18.0 2 69.2664 12 9.0 3 62.3329 12 73.0 3 56.6439 13 0.0 0 73.0 3 61.5251 11 55.0 3 44.1783 9 21.5422 11 47.0 2 76.0 3 93.0 2 8.0 2]
Total: 1098.983
Mean: 21.97966
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3936.341748499994
Median total errors in population: 1169.751
Error averages by case: (117.68414700000008 3.446 119.11350639999995 3.664 126.7386848000008 10.179 151.45114880000045 12.036 121.3514726000012 8.81 132.83662000000166 8.165 124.13486990000115 8.643 143.88459450000138 11.239 173.7914229999988 10.156 123.81581009999994 3.537 166.3187062999975 12.474 117.43460540000002 4.487 165.33113099999954 11.9 173.3010993999999 4.512 160.9908661999985 12.55 108.75680540000003 2.267 183.92083259999987 4.818 174.51660319999795 10.612 172.20967750000014 4.754 155.16309279999896 11.632 140.84460279999993 3.629 151.15462099999988 3.806 174.3250598999999 4.497 206.8829867999999 4.733 163.31778109999962 10.525)
Error minima by case: (0.0 0 12.0 1 0.0 0 0.89 2 2.8252 1 3.7462 1 1.0 1 0.0 0 0.0 0 16.0 1 10.7336 10 7.0 2 28.6671 9 1.9733 2 31.3561 9 0.0 0 21.9348 2 6.7938 1 14.8438 2 0.2782 2 0.5422 1 45.0 2 37.8087 2 9.2991 2 0.0 0)
Average genome size in population (length): 104.598
Average program size in population (points): 105.598
Average percent parens in population: 0.010
Minimum age in population: 57.8678169991872
Maximum age in population: 62.52899425581154
Average age in population: 60.6097421701796
Median age in population: 60.67674882595793
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.907
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.907
Total error diversity:				 0.298
Error (vector) diversity:			 0.319
Behavioral diversity:				 0.323
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 87964667
--- Timings ---
Current time: 1529615701718 milliseconds
Total Time:         167.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.1 seconds, 34.7%
Fitness Testing:     85.7 seconds, 51.2%
Report:              23.3 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 44164.81549999999
Test mean error for best: 22.08241
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -11.7262024973
Correct output: 28.9944965858  | Program output: -50.0055034142
Correct output: 13.3961934486  | Program output: 1.0           
Correct output: 19.9676470573  | Program output: 1.0           
Correct output: 33.3987292904  | Program output: 1.0           
Correct output: -11.5386957197 | Program output: -63.5386957197
Correct output: -71.2921620852 | Program output: -66.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 1.0           
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 1.0           
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 1.0           
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 44.9348060994 
Correct output: 66.2062402799  | Program output: 11.2062402799 
Correct output: 128.8438321461 | Program output: 89.8438321461 
Correct output: 43.5643378164  | Program output: 6.5643378164  
Correct output: 56.5422105693  | Program output: 46.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 103.7008834843
Correct output: -40.4231951304 | Program output: -79.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction integer_div} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction integer_mult} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec integer_div float_frominteger in2 tagged_295 print_float integer_fromfloat integer_dup float_dec integer_shove float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank float_add integer_yank print_float float_cos integer_mult tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 float_inc float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [1.0 1 14.0 2 17.0 11 79.0 13 12.3962 11 18.9676 10 32.3987 11 52.0 2 5.0 2 18.0 2 69.2664 12 9.0 3 62.3329 12 73.0 3 56.6439 13 0.0 0 57.0 3 55.0 2 39.0 3 37.0 2 10.0 1 47.0 2 76.0 3 77.0 2 39.0 2]
Total: 1085.0057000000002
Mean: 21.700113
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4298.9084533999985
Median total errors in population: 1159.751
Error averages by case: (123.58142510000008 3.365 131.03802299999995 3.876 147.396520800001 10.164 170.79897770000034 11.78 133.3838806000011 9.086 144.34397930000188 8.485 136.96722260000104 8.874 164.03318860000127 10.949 192.28231819999908 10.115 135.81226439999995 3.697 178.51431139999738 12.531 129.63240460000003 4.704 177.19672449999965 12.004 184.2407935999999 4.744 172.79930969999853 12.654 119.3056152000001 2.494 200.37227009999984 5.199 191.96449799999786 10.376 189.1933272000001 5.063 173.615709599999 11.311 158.41497699999985 4.306 163.0315456999999 4.016 185.50841779999985 4.716 223.14939279999976 5.086 182.37635589999917 10.36)
Error minima by case: (0.0 0 12.0 1 0.0 0 9.0 1 8.3962 1 14.2089 1 3.0 1 0.0 0 0.0 0 1.1853 1 9.0 2 7.0 2 9.0 2 3.9733 2 9.0 2 0.0 0 21.9348 1 0.6936 1 39.0 2 3.2639 1 8.9705 1 44.1702 2 33.0128 2 77.0 1 0.0 0)
Average genome size in population (length): 106.745
Average program size in population (points): 107.745
Average percent parens in population: 0.009
Minimum age in population: 59.73287890113716
Maximum age in population: 64.03434237006945
Average age in population: 62.0987356397185
Median age in population: 62.12684103488425
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.315
Error (vector) diversity:			 0.338
Behavioral diversity:				 0.339
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 90818595
--- Timings ---
Current time: 1529615706314 milliseconds
Total Time:         171.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.4 seconds, 34.6%
Fitness Testing:     88.1 seconds, 51.3%
Report:              24.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 45601.85309999999
Test mean error for best: 22.80093
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -63.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: 3.773292615   
Correct output: 28.9944965858  | Program output: -24.7759814035
Correct output: 13.3961934486  | Program output: 1.0           
Correct output: 19.9676470573  | Program output: 1.0           
Correct output: 33.3987292904  | Program output: 1.0           
Correct output: -11.5386957197 | Program output: 1.1395610988  
Correct output: -71.2921620852 | Program output: -66.8764862556
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 1.0           
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 1.0           
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 1.0           
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 35.9348060994 
Correct output: 66.2062402799  | Program output: 12.7410575508 
Correct output: 128.8438321461 | Program output: 80.8438321461 
Correct output: 43.5643378164  | Program output: 12.6579667699 
Correct output: 56.5422105693  | Program output: 37.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 94.7008834843 
Correct output: -40.4231951304 | Program output: -15.3886344337
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction integer_div} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_swap} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction float_frominteger} {:instruction integer_min} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max integer_add float_inc float_shove float_dec integer_div float_frominteger in2 tagged_295 print_float integer_fromfloat integer_dup float_dec integer_shove float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat float_mult tag_float_932 float_sub integer_fromfloat integer_dup in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult integer_dup float_swap float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 float_frominteger integer_min integer_max float_yankdup tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [13.0 2 14.0 2 1.5005 8 53.7705 12 12.3962 11 18.9676 10 32.3987 11 12.6783 9 4.4157 10 18.0 2 69.2664 12 9.0 3 62.3329 12 73.0 3 56.6439 13 0.0 0 66.0 3 53.4652 12 48.0 3 30.9064 11 19.0 2 47.0 2 76.0 3 86.0 3 25.0346 11]
Total: 1072.7768999999998
Mean: 21.455538
Genome size: 127
Size: 128
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3958.793878499997
Median total errors in population: 1182.49435
Error averages by case: (113.1853608000001 3.222 120.95274569999997 3.744 130.43090750000104 9.797 156.4208993000003 11.205 127.2624662000013 8.596 138.80028010000166 8.075 127.55815520000158 8.317 145.73114880000105 9.845 168.90865249999914 9.365 126.11014919999988 3.53 170.03135989999734 12.514 119.79048440000004 4.55 170.40690810000012 11.964 175.32212010000003 4.623 166.19263499999846 12.525 104.87319230000008 2.377 181.5962792999999 5.114 171.24384749999876 10.022 171.64796210000014 4.917 153.05130969999922 10.508 139.86390589999985 4.851 153.49558499999986 3.956 176.4421960999999 4.588 205.70706269999985 4.858 161.2652651000001 9.44)
Error minima by case: (0.0 0 1.3141 1 0.0 0 3.3523 1 6.3962 1 3.0653 1 3.7041 1 0.4645 1 1.0 1 17.0 1 10.7336 2 8.0 2 7.5458 2 1.9733 2 1.8568 2 0.0 0 20.9348 2 3.1625 1 14.8438 2 0.5643 1 0.5422 1 46.0 2 37.8087 2 5.2991 1 5.0 1)
Average genome size in population (length): 108.231
Average program size in population (points): 109.231
Average percent parens in population: 0.009
Minimum age in population: 60.88645579447439
Maximum age in population: 65.46293299944193
Average age in population: 63.43228480380606
Median age in population: 63.4565271327391
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.369
Error (vector) diversity:			 0.402
Behavioral diversity:				 0.403
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 93725454
--- Timings ---
Current time: 1529615710899 milliseconds
Total Time:         176.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.8 seconds, 34.5%
Fitness Testing:     90.6 seconds, 51.4%
Report:              24.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 42867.81549999998
Test mean error for best: 21.43391
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -7.7262024973 
Correct output: 28.9944965858  | Program output: -46.0055034142
Correct output: 13.3961934486  | Program output: 1.0           
Correct output: 19.9676470573  | Program output: 1.0           
Correct output: 33.3987292904  | Program output: 1.0           
Correct output: -11.5386957197 | Program output: -59.5386957197
Correct output: -71.2921620852 | Program output: -62.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 1.0           
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 1.0           
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 1.0           
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 48.9348060994 
Correct output: 66.2062402799  | Program output: 15.2062402799 
Correct output: 128.8438321461 | Program output: 93.8438321461 
Correct output: 43.5643378164  | Program output: 10.5643378164 
Correct output: 56.5422105693  | Program output: 50.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 107.7008834843
Correct output: -40.4231951304 | Program output: -75.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction tagged_295} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction integer_sub} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_rot in2 tagged_295 print_float integer_fromfloat integer_dup float_dec integer_shove float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank float_add integer_yank print_float integer_sub float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [1.0 1 14.0 2 13.0 10 75.0 13 12.3962 11 18.9676 10 32.3987 11 48.0 2 9.0 2 18.0 2 69.2664 12 9.0 3 62.3329 12 73.0 3 56.6439 13 0.0 0 53.0 3 51.0 2 35.0 3 33.0 2 6.0 1 47.0 2 76.0 3 73.0 2 35.0 2]
Total: 1048.0057000000002
Mean: 20.960114
Genome size: 139
Size: 140
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 4154.710995299999
Median total errors in population: 1175.9799
Error averages by case: (124.84696250000007 3.517 127.90661659999992 3.865 146.5245560000007 9.889 177.07414079999998 10.964 130.546023900001 8.874 141.60454670000152 8.343 132.3947807000012 8.582 157.1856413000004 7.763 158.98519429999976 7.416 133.0691588999999 3.621 174.04054949999784 12.514 126.82062450000006 4.68 173.92434470000003 12.021 181.8727040999999 4.728 169.68528369999882 12.606 114.98988900000006 2.64 193.63815069999987 5.348 182.9348990999993 9.629 184.0693632000001 5.18 166.75830349999973 9.599 149.08991889999965 6.664 160.17532559999987 4.081 182.7665717999999 4.685 218.6722635999998 4.898 165.4851816999999 7.543)
Error minima by case: (0.0 0 12.0 1 0.0 0 3.7271 1 3.6038 1 3.0324 1 3.0 1 0.4645 1 0.0 0 16.0 1 8.0 1 7.0 2 8.0 2 4.9733 2 8.0 2 0.0 0 18.9348 2 2.2062 1 35.0 1 2.4357 1 6.0 1 41.1702 2 37.8087 2 73.0 1 3.0 1)
Average genome size in population (length): 106.485
Average program size in population (points): 107.485
Average percent parens in population: 0.009
Minimum age in population: 61.9641706878283
Maximum age in population: 66.84596355453459
Average age in population: 64.86814996846918
Median age in population: 64.90580131352411
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.891
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.891
Total error diversity:				 0.417
Error (vector) diversity:			 0.451
Behavioral diversity:				 0.455
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 96594265
--- Timings ---
Current time: 1529615715407 milliseconds
Total Time:         180.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.1 seconds, 34.4%
Fitness Testing:     93.0 seconds, 51.5%
Report:              25.5 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 42867.81549999998
Test mean error for best: 21.43391
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -77.1667347159
Correct output: -52.4729786445 | Program output: -38.4729786445
Correct output: 5.2737975027   | Program output: -7.7262024973 
Correct output: 28.9944965858  | Program output: -46.0055034142
Correct output: 13.3961934486  | Program output: 1.0           
Correct output: 19.9676470573  | Program output: 1.0           
Correct output: 33.3987292904  | Program output: 1.0           
Correct output: -11.5386957197 | Program output: -59.5386957197
Correct output: -71.2921620852 | Program output: -62.2921620852
Correct output: -80.9811660953 | Program output: -62.9811660953
Correct output: -68.2663702523 | Program output: 1.0           
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: 1.0           
Correct output: -145.0267384409 | Program output: -72.0267384409
Correct output: -55.6438617168 | Program output: 1.0           
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 48.9348060994 
Correct output: 66.2062402799  | Program output: 15.2062402799 
Correct output: 128.8438321461 | Program output: 93.8438321461 
Correct output: 43.5643378164  | Program output: 10.5643378164 
Correct output: 56.5422105693  | Program output: 50.5422105693 
Correct output: -141.170234299 | Program output: -94.170234299 
Correct output: -112.8086599195 | Program output: -36.8086599195
Correct output: 180.7008834843 | Program output: 107.7008834843
Correct output: -40.4231951304 | Program output: -75.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_add} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_rot} {:instruction in2} {:instruction tagged_295} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction integer_sub} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_flush integer_inc float_max integer_add float_inc float_shove float_dec float_sub float_rot in2 tagged_295 print_float integer_fromfloat integer_dup float_dec integer_shove float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank float_add integer_yank print_float integer_sub float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec integer_add float_inc float_inc integer_dup integer_flush integer_inc tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [1.0 1 14.0 2 13.0 10 75.0 13 12.3962 11 18.9676 10 32.3987 11 48.0 2 9.0 2 18.0 2 69.2664 12 9.0 3 62.3329 12 73.0 3 56.6439 13 0.0 0 53.0 3 51.0 2 35.0 3 33.0 2 6.0 1 47.0 2 76.0 3 73.0 2 35.0 2]
Total: 1048.0057000000002
Mean: 20.960114
Genome size: 139
Size: 140
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3998.9690645000032
Median total errors in population: 1137.3755
Error averages by case: (116.95199590000006 3.338 119.83589909999996 3.662 146.1008089000008 10.791 183.3517511999998 11.492 123.74837980000135 9.224 134.34548920000177 8.568 127.72638260000109 9.051 149.8797952000002 5.576 141.39729009999994 5.343 125.05711899999996 3.547 168.73168029999746 12.429 118.51951370000003 4.499 167.35010000000005 11.97 174.40076569999997 4.543 162.94273679999864 12.668 106.14414810000007 2.299 189.8296759999997 5.292 178.22362119999968 10.514 181.61883000000017 5.134 162.93213439999994 9.976 146.2116357999994 8.339 152.2457668999999 3.806 175.6917097999999 4.529 215.62126799999984 4.591 153.45856679999994 5.471)
Error minima by case: (0.0 0 12.0 1 0.0 0 0.0165 1 4.3962 1 9.0 1 2.7041 1 1.4645 1 0.0 0 13.6242 1 0.9094 9 7.0 2 5.1949 7 71.0 2 10.8839 8 0.0 0 18.9348 2 1.2062 1 7.0 1 3.0 1 3.0 1 45.0 2 37.8087 2 70.0 1 2.0 1)
Average genome size in population (length): 103.238
Average program size in population (points): 104.238
Average percent parens in population: 0.010
Minimum age in population: 64.10949013796437
Maximum age in population: 68.27740827957606
Average age in population: 66.27967126602559
Median age in population: 66.33480687987748
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.382
Error (vector) diversity:			 0.414
Behavioral diversity:				 0.417
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 99363316
--- Timings ---
Current time: 1529615719982 milliseconds
Total Time:         185.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.5 seconds, 34.3%
Fitness Testing:     95.4 seconds, 51.5%
Report:              26.3 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 44028.91619999999
Test mean error for best: 22.01446
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -74.1667347159
Correct output: -52.4729786445 | Program output: -35.4729786445
Correct output: 5.2737975027   | Program output: -4.4524049947 
Correct output: 28.9944965858  | Program output: -19.0110068284
Correct output: 13.3961934486  | Program output: 0.3961934486  
Correct output: 19.9676470573  | Program output: 0.9676470573  
Correct output: 33.3987292904  | Program output: 0.3987292904  
Correct output: -11.5386957197 | Program output: 7.4613042803  
Correct output: -71.2921620852 | Program output: -52.2921620852
Correct output: -80.9811660953 | Program output: -59.9811660953
Correct output: -68.2663702523 | Program output: 0.7336297477  
Correct output: -103.9955386998 | Program output: -91.9955386998
Correct output: -61.3328712961 | Program output: 0.6671287039  
Correct output: -145.0267384409 | Program output: -69.0267384409
Correct output: -55.6438617168 | Program output: 0.3561382832  
Correct output: -25.0977592931 | Program output: -22.0977592931
Correct output: 101.9348060994 | Program output: 40.9348060994 
Correct output: 66.2062402799  | Program output: 15.6811236393 
Correct output: 128.8438321461 | Program output: 85.8438321461 
Correct output: 43.5643378164  | Program output: 10.3860268987 
Correct output: 56.5422105693  | Program output: 46.0          
Correct output: -141.170234299 | Program output: -91.170234299 
Correct output: -112.8086599195 | Program output: -33.8086599195
Correct output: 180.7008834843 | Program output: 99.7008834843 
Correct output: -40.4231951304 | Program output: -21.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_tan} {:instruction float_inc} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction print_float} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_pop} {:instruction float_sin} {:instruction in2} {:instruction integer_pop} {:instruction integer_dup} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction integer_sub} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction tagged_224} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_dup integer_flush integer_inc float_max float_tan float_inc float_shove float_dec float_sub float_frominteger in2 tagged_295 print_float integer_fromfloat integer_dup float_dec integer_shove float_dec print_float integer_fromfloat integer_dup float_dec integer_shove float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat integer_dup float_dec float_pop float_sin in2 integer_pop integer_dup integer_inc print_float integer_dup_times float_add integer_yank float_add integer_yank print_float integer_sub float_sub tag_float_869 integer_swap float_cos float_dup_items tagged_96 tag_integer_841 integer_mult tagged_224 tag_integer_552 float_flush print_float in1 integer_min float_frominteger integer_max float_yankdup tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_max float_yankdup float_swap float_frominteger float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [2.0 1 17.0 2 9.7262 11 48.0055 11 13.0 2 19.0 2 33.0 2 19.0 13 19.0 2 21.0 2 69.0 12 12.0 3 62.0 10 76.0 3 56.0 11 3.0 1 61.0 2 50.5251 11 43.0 3 33.1783 11 10.5422 10 50.0 2 79.0 3 81.0 3 19.0 2]
Total: 1040.9773
Mean: 20.819546
Genome size: 140
Size: 141
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3820.858390300004
Median total errors in population: 1103.39655
Error averages by case: (104.78727560000004 2.902 110.45396939999998 3.457 146.4268956000008 11.06 185.8633184999999 11.743 112.24297240000125 9.144 124.43734100000174 8.438 114.68033710000127 8.935 151.24574260000014 5.188 126.93459849999996 4.698 114.81501770000001 3.349 159.8187136999976 12.458 107.81118999999998 4.297 158.0299885999996 11.934 164.7123638 4.344 153.4299655999987 12.63 98.92971050000001 2.001 185.81230279999974 5.297 177.16173729999983 10.353 175.6331842000002 5.066 164.85963640000014 10.064 139.0659249999994 8.393 142.02030639999995 3.588 166.2226536999999 4.304 210.6094044999998 4.546 151.81183940000003 4.853)
Error minima by case: (0.0 0 13.0 1 0.4356 1 0.0165 1 2.7775 1 3.794 1 4.0 1 0.3217 1 0.0 0 17.0 1 6.2664 1 8.0 2 6.3329 2 4.9733 1 6.6439 2 0.0 0 12.9348 2 0.2062 1 7.0 2 2.5643 1 3.0 1 43.1702 2 37.8087 2 70.0 1 2.0 1)
Average genome size in population (length): 105.109
Average program size in population (points): 106.109
Average percent parens in population: 0.010
Minimum age in population: 65.16115981546261
Maximum age in population: 69.40003977902909
Average age in population: 67.61340205253747
Median age in population: 67.66363210486269
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.895
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.895
Total error diversity:				 0.341
Error (vector) diversity:			 0.375
Behavioral diversity:				 0.376
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 102183529
--- Timings ---
Current time: 1529615724645 milliseconds
Total Time:         189.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.9 seconds, 34.2%
Fitness Testing:     97.9 seconds, 51.5%
Report:              27.0 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 11243.0
Test mean error for best: 5.62150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -67.1667347159
Correct output: -52.4729786445 | Program output: -43.4729786445
Correct output: 5.2737975027   | Program output: 14.2737975027 
Correct output: 28.9944965858  | Program output: 37.9944965858 
Correct output: 13.3961934486  | Program output: 22.3961934486 
Correct output: 19.9676470573  | Program output: 28.9676470573 
Correct output: 33.3987292904  | Program output: 42.3987292904 
Correct output: -11.5386957197 | Program output: -2.5386957197 
Correct output: -71.2921620852 | Program output: -62.2921620852
Correct output: -80.9811660953 | Program output: -71.9811660953
Correct output: -68.2663702523 | Program output: -59.2663702523
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: -52.3328712961
Correct output: -145.0267384409 | Program output: -136.0267384409
Correct output: -55.6438617168 | Program output: -46.6438617168
Correct output: -25.0977592931 | Program output: -16.0977592931
Correct output: 101.9348060994 | Program output: 110.9348060994
Correct output: 66.2062402799  | Program output: 75.2062402799 
Correct output: 128.8438321461 | Program output: 137.8438321461
Correct output: 43.5643378164  | Program output: 52.5643378164 
Correct output: 56.5422105693  | Program output: 65.5422105693 
Correct output: -141.170234299 | Program output: -132.170234299
Correct output: -112.8086599195 | Program output: -103.8086599195
Correct output: 180.7008834843 | Program output: 189.7008834843
Correct output: -40.4231951304 | Program output: -31.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_max} {:instruction float_max} {:instruction float_rot} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_swap} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction integer_swap} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction float_add} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_swap integer_flush integer_inc float_max integer_inc float_frominteger integer_swap integer_flush integer_max float_max float_rot integer_flush float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec float_swap float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat float_cos integer_swap tagged_96 tag_integer_841 integer_mult integer_dup float_rot float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_min float_frominteger float_yankdup tagged_224 tagged_1072 float_inc float_add tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 3 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 1 9.0 2]
Total: 275.0
Mean: 5.5
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4703.791354900002
Median total errors in population: 1151.4443500000002
Error averages by case: (141.99670740000005 3.455 145.96128249999998 3.991 178.49278340000083 10.998 216.1034300000001 11.74 152.33897229999985 9.058 163.2711458000017 8.443 153.12449939999996 8.848 187.03792700000005 6.414 168.51556340000005 5.526 150.81047099999998 3.893 195.22263539999736 12.531 144.17601929999998 4.818 194.8254746000002 11.98 198.4891835 4.898 190.6301535999985 12.628 135.8942706 2.635 216.4292270999997 5.78 209.82236210000013 9.863 207.19911690000015 5.547 195.23270570000037 10.012 173.18101309999932 7.676 177.00653089999992 4.151 199.9110924 4.823 240.71111699999986 5.119 186.8586705000004 5.722)
Error minima by case: (0.0 0 9.0 1 0.0 0 0.0165 1 7.3962 1 2.1099 1 3.6902 1 0.4613 1 0.0 0 9.0 1 9.0 2 8.0 2 9.0 2 0.0267 2 9.0 2 0.0 0 9.0 2 0.2062 1 6.8438 1 0.5643 1 3.0 1 9.0 2 9.0 2 9.0 1 1.0 1)
Average genome size in population (length): 111.935
Average program size in population (points): 112.935
Average percent parens in population: 0.009
Minimum age in population: 66.17408041531036
Maximum age in population: 70.85216081448559
Average age in population: 68.9025203443877
Median age in population: 68.92704060016234
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.411
Error (vector) diversity:			 0.438
Behavioral diversity:				 0.44
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 105208923
--- Timings ---
Current time: 1529615729174 milliseconds
Total Time:         194.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.2 seconds, 34.0%
Fitness Testing:    100.5 seconds, 51.6%
Report:              27.8 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 11243.0
Test mean error for best: 5.62150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -67.1667347159
Correct output: -52.4729786445 | Program output: -43.4729786445
Correct output: 5.2737975027   | Program output: 14.2737975027 
Correct output: 28.9944965858  | Program output: 37.9944965858 
Correct output: 13.3961934486  | Program output: 22.3961934486 
Correct output: 19.9676470573  | Program output: 28.9676470573 
Correct output: 33.3987292904  | Program output: 42.3987292904 
Correct output: -11.5386957197 | Program output: -2.5386957197 
Correct output: -71.2921620852 | Program output: -62.2921620852
Correct output: -80.9811660953 | Program output: -71.9811660953
Correct output: -68.2663702523 | Program output: -59.2663702523
Correct output: -103.9955386998 | Program output: -94.9955386998
Correct output: -61.3328712961 | Program output: -52.3328712961
Correct output: -145.0267384409 | Program output: -136.0267384409
Correct output: -55.6438617168 | Program output: -46.6438617168
Correct output: -25.0977592931 | Program output: -16.0977592931
Correct output: 101.9348060994 | Program output: 110.9348060994
Correct output: 66.2062402799  | Program output: 75.2062402799 
Correct output: 128.8438321461 | Program output: 137.8438321461
Correct output: 43.5643378164  | Program output: 52.5643378164 
Correct output: 56.5422105693  | Program output: 65.5422105693 
Correct output: -141.170234299 | Program output: -132.170234299
Correct output: -112.8086599195 | Program output: -103.8086599195
Correct output: 180.7008834843 | Program output: 189.7008834843
Correct output: -40.4231951304 | Program output: -31.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_max} {:instruction float_max} {:instruction float_rot} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_swap} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction integer_swap} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction float_add} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_swap integer_flush integer_inc float_max integer_inc float_frominteger integer_swap integer_flush integer_max float_max float_rot integer_flush float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec float_swap float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat float_cos integer_swap tagged_96 tag_integer_841 integer_mult integer_dup float_rot float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_min float_frominteger float_yankdup tagged_224 tagged_1072 float_inc float_add tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 3 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 1 9.0 2]
Total: 275.0
Mean: 5.5
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4444.683141300002
Median total errors in population: 1159.50285
Error averages by case: (132.2491032 3.46 138.55842559999996 4.014 169.20790230000043 10.595 208.86371440000025 11.845 141.3091095000005 8.785 152.68948840000166 8.195 141.26451450000053 8.535 182.96370350000015 7.157 159.06185529999996 5.808 143.35745090000006 3.875 184.4118800999975 12.366 137.44134119999998 4.836 184.23633200000017 11.796 191.4935476999998 4.888 180.02988089999852 12.423 124.99926950000011 2.715 201.05566839999963 5.475 193.97200570000035 9.091 191.93520590000017 5.3 179.73217490000062 9.145 158.4981399999994 6.376 170.20566089999986 4.202 192.13529689999984 4.806 225.4803546999998 4.953 182.85711490000025 6.033)
Error minima by case: (0.0 0 9.0 1 0.0 0 0.0165 2 2.7632 1 8.7234 1 0.0 0 0.4613 1 0.0 0 9.0 1 9.0 2 7.0 2 9.0 2 0.0267 2 9.0 2 0.0 0 8.0 1 0.2062 1 8.0 1 0.4357 1 1.5422 1 9.0 2 9.0 2 8.0 1 1.0 1)
Average genome size in population (length): 121.462
Average program size in population (points): 122.462
Average percent parens in population: 0.008
Minimum age in population: 67.17408041531036
Maximum age in population: 72.1252555355696
Average age in population: 70.1940374789973
Median age in population: 70.22820656050916
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.475
Error (vector) diversity:			 0.504
Behavioral diversity:				 0.507
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 108510190
--- Timings ---
Current time: 1529615733824 milliseconds
Total Time:         199.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.6 seconds, 33.9%
Fitness Testing:    103.3 seconds, 51.8%
Report:              28.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 2103.0
Test mean error for best: 1.05150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -75.1667347159
Correct output: -52.4729786445 | Program output: -51.4729786445
Correct output: 5.2737975027   | Program output: 6.2737975027  
Correct output: 28.9944965858  | Program output: 29.9944965858 
Correct output: 13.3961934486  | Program output: 14.3961934486 
Correct output: 19.9676470573  | Program output: 20.9676470573 
Correct output: 33.3987292904  | Program output: 34.3987292904 
Correct output: -11.5386957197 | Program output: -10.5386957197
Correct output: -71.2921620852 | Program output: -70.2921620852
Correct output: -80.9811660953 | Program output: -79.9811660953
Correct output: -68.2663702523 | Program output: -67.2663702523
Correct output: -103.9955386998 | Program output: -102.9955386998
Correct output: -61.3328712961 | Program output: -60.3328712961
Correct output: -145.0267384409 | Program output: -144.0267384409
Correct output: -55.6438617168 | Program output: -54.6438617168
Correct output: -25.0977592931 | Program output: -24.0977592931
Correct output: 101.9348060994 | Program output: 102.9348060994
Correct output: 66.2062402799  | Program output: 67.2062402799 
Correct output: 128.8438321461 | Program output: 129.8438321461
Correct output: 43.5643378164  | Program output: 44.5643378164 
Correct output: 56.5422105693  | Program output: 57.5422105693 
Correct output: -141.170234299 | Program output: -140.170234299
Correct output: -112.8086599195 | Program output: -111.8086599195
Correct output: 180.7008834843 | Program output: 181.7008834843
Correct output: -40.4231951304 | Program output: -39.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_max} {:instruction float_max} {:instruction float_rot} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_swap} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction integer_swap} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction float_add} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction integer_pop} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_sub} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1028} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup})
Best program: (float_frominteger integer_swap integer_flush integer_inc float_max integer_inc float_frominteger integer_swap integer_flush integer_max float_max float_rot integer_flush float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec float_swap float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat float_cos integer_swap tagged_96 tag_integer_841 integer_mult integer_dup float_rot float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_min float_frominteger float_yankdup tagged_224 tagged_1072 float_inc float_add integer_inc print_float integer_dup_times float_add float_add integer_yank float_add integer_yank print_float float_cos float_sub integer_pop float_add integer_yank print_float float_cos float_sub tag_float_869 float_sub float_cos float_dup_items tagged_96 tag_integer_841 float_dec tag_integer_552 float_flush print_float in1 integer_min float_frominteger integer_max float_yankdup tagged_224 tagged_1028 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 integer_inc float_inc integer_dup float_inc float_inc integer_dup integer_flush float_yankdup float_inc integer_dup integer_sub integer_dup integer_flush integer_inc float_max tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_min integer_flush float_frominteger float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2]
Total: 53.0
Mean: 1.06
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 4783.436341000002
Median total errors in population: 1171.4801499999999
Error averages by case: (150.55025750000007 3.797 150.49057559999991 4.07 185.59474850000055 10.437 224.0828101000004 11.879 155.46455889999993 8.823 166.32833400000177 8.246 154.66810900000024 8.602 199.92809840000018 7.991 174.0430283 6.03 155.10959019999996 3.966 196.60458059999738 12.312 148.35308710000004 4.881 196.6686043000004 11.781 201.9826411999999 4.933 192.7825772999984 12.349 137.06126170000007 2.803 211.2359547999994 5.92 209.7184199000003 8.881 204.1055004000002 5.572 194.23281480000045 8.878 172.10705909999936 6.462 181.33835149999985 4.199 203.12509419999992 4.857 237.12017709999975 5.349 201.60910650000045 6.113)
Error minima by case: (0.0 0 1.0 1 0.0 0 0.0 0 1.0 1 1.0 1 1.0 1 0.0 0 0.0 0 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 1.0 1 0.0 0 0.0 0)
Average genome size in population (length): 129.434
Average program size in population (points): 130.434
Average percent parens in population: 0.008
Minimum age in population: 69.15955352800046
Maximum age in population: 73.69680547078991
Average age in population: 71.4907916353008
Median age in population: 71.529704031391
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.498
Error (vector) diversity:			 0.53
Behavioral diversity:				 0.532
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 112047700
--- Timings ---
Current time: 1529615738948 milliseconds
Total Time:         204.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.0 seconds, 33.8%
Fitness Testing:    106.2 seconds, 52.0%
Report:              28.9 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 2103.0
Test mean error for best: 1.05150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -75.1667347159
Correct output: -52.4729786445 | Program output: -51.4729786445
Correct output: 5.2737975027   | Program output: 6.2737975027  
Correct output: 28.9944965858  | Program output: 29.9944965858 
Correct output: 13.3961934486  | Program output: 14.3961934486 
Correct output: 19.9676470573  | Program output: 20.9676470573 
Correct output: 33.3987292904  | Program output: 34.3987292904 
Correct output: -11.5386957197 | Program output: -10.5386957197
Correct output: -71.2921620852 | Program output: -70.2921620852
Correct output: -80.9811660953 | Program output: -79.9811660953
Correct output: -68.2663702523 | Program output: -67.2663702523
Correct output: -103.9955386998 | Program output: -102.9955386998
Correct output: -61.3328712961 | Program output: -60.3328712961
Correct output: -145.0267384409 | Program output: -144.0267384409
Correct output: -55.6438617168 | Program output: -54.6438617168
Correct output: -25.0977592931 | Program output: -24.0977592931
Correct output: 101.9348060994 | Program output: 102.9348060994
Correct output: 66.2062402799  | Program output: 67.2062402799 
Correct output: 128.8438321461 | Program output: 129.8438321461
Correct output: 43.5643378164  | Program output: 44.5643378164 
Correct output: 56.5422105693  | Program output: 57.5422105693 
Correct output: -141.170234299 | Program output: -140.170234299
Correct output: -112.8086599195 | Program output: -111.8086599195
Correct output: 180.7008834843 | Program output: 181.7008834843
Correct output: -40.4231951304 | Program output: -39.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_max} {:instruction float_max} {:instruction float_rot} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_swap} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction integer_swap} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction float_add} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_max} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc})
Best program: (float_frominteger integer_swap integer_flush integer_inc float_max integer_inc float_frominteger integer_swap integer_flush integer_max float_max float_rot integer_flush float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec float_swap float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat float_cos integer_swap tagged_96 tag_integer_841 integer_mult integer_dup float_rot float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_min float_frominteger float_yankdup tagged_224 tagged_1072 float_inc float_add tagged_962 float_mod tagged_224 print_float in1 integer_min integer_min float_frominteger float_yankdup tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc integer_min float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_inc integer_dup integer_flush float_max tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush integer_inc)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2]
Total: 53.0
Mean: 1.06
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4890.8392071
Median total errors in population: 1125.66125
Error averages by case: (152.32380960000006 4.013 157.88522649999993 4.25 184.79635770000056 9.826 220.7439807000002 11.293 162.52146069999984 8.238 173.02908110000146 7.752 159.17673520000022 8.003 204.17848920000029 7.638 184.17937639999985 5.808 163.5623502 4.153 199.82489649999795 11.687 157.63511910000005 5.063 200.42933720000067 11.173 208.4394238999999 5.047 196.77867639999877 11.664 143.4127953 3.033 216.74181339999953 5.655 206.16088609999983 7.679 210.83334600000015 5.422 194.66512030000013 7.957 179.5276207999995 5.702 190.0791937999999 4.375 208.9417434999999 4.997 240.3014766999998 5.142 203.2848908000003 5.816)
Error minima by case: (0.0 0 1.0 1 0.0 0 0.0 0 1.0 1 1.0 1 1.0 1 0.0 0 0.0 0 1.0 1 1.0 1 1.0 1 1.0 1 0.0267 1 1.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 1.0 1 0.0 0 0.0 0)
Average genome size in population (length): 130.134
Average program size in population (points): 131.134
Average percent parens in population: 0.008
Minimum age in population: 70.26123221381472
Maximum age in population: 75.27151071344528
Average age in population: 72.91686394377803
Median age in population: 72.91145746905306
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.94
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.94
Total error diversity:				 0.463
Error (vector) diversity:			 0.484
Behavioral diversity:				 0.485
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 115610793
--- Timings ---
Current time: 1529615743860 milliseconds
Total Time:         209.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.3 seconds, 33.6%
Fitness Testing:    109.1 seconds, 52.1%
Report:              29.8 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 2103.0
Test mean error for best: 1.05150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -75.1667347159
Correct output: -52.4729786445 | Program output: -51.4729786445
Correct output: 5.2737975027   | Program output: 6.2737975027  
Correct output: 28.9944965858  | Program output: 29.9944965858 
Correct output: 13.3961934486  | Program output: 14.3961934486 
Correct output: 19.9676470573  | Program output: 20.9676470573 
Correct output: 33.3987292904  | Program output: 34.3987292904 
Correct output: -11.5386957197 | Program output: -10.5386957197
Correct output: -71.2921620852 | Program output: -70.2921620852
Correct output: -80.9811660953 | Program output: -79.9811660953
Correct output: -68.2663702523 | Program output: -67.2663702523
Correct output: -103.9955386998 | Program output: -102.9955386998
Correct output: -61.3328712961 | Program output: -60.3328712961
Correct output: -145.0267384409 | Program output: -144.0267384409
Correct output: -55.6438617168 | Program output: -54.6438617168
Correct output: -25.0977592931 | Program output: -24.0977592931
Correct output: 101.9348060994 | Program output: 102.9348060994
Correct output: 66.2062402799  | Program output: 67.2062402799 
Correct output: 128.8438321461 | Program output: 129.8438321461
Correct output: 43.5643378164  | Program output: 44.5643378164 
Correct output: 56.5422105693  | Program output: 57.5422105693 
Correct output: -141.170234299 | Program output: -140.170234299
Correct output: -112.8086599195 | Program output: -111.8086599195
Correct output: 180.7008834843 | Program output: 181.7008834843
Correct output: -40.4231951304 | Program output: -39.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_mod} {:instruction float_max} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_max} {:instruction float_max} {:instruction float_rot} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_swap} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction integer_swap} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_rot} {:instruction float_swap} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction integer_min} {:instruction float_frominteger} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction float_add} {:instruction integer_inc} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_add} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction integer_pop} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction float_sub} {:instruction float_cos} {:instruction float_dup_items} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction integer_mult} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_max} {:instruction float_yankdup} {:instruction tagged_224} {:instruction tagged_1028} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_279} {:instruction tagged_962} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dec} {:instruction integer_sub} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction tagged_224} {:instruction tagged_1072} {:instruction float_inc} {:instruction integer_dup} {:instruction tagged_962} {:instruction float_mod} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_flush} {:instruction float_frominteger} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup})
Best program: (float_frominteger integer_swap integer_flush integer_mod float_max integer_inc float_frominteger integer_swap integer_flush integer_max float_max float_rot integer_flush float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec float_swap float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat float_cos integer_swap tagged_96 tag_integer_841 integer_mult integer_dup float_rot float_swap float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min integer_min float_frominteger float_yankdup tagged_224 tagged_1072 float_inc float_add integer_inc print_float integer_dup_times float_add float_add integer_yank float_add integer_yank print_float float_cos float_sub integer_pop float_add integer_yank print_float float_cos float_sub tag_float_869 float_sub float_cos float_dup_items tagged_96 tag_integer_841 integer_mult tag_integer_552 float_flush print_float in1 integer_min float_frominteger integer_max float_yankdup tagged_224 tagged_1028 float_inc integer_dup tagged_962 float_mod tagged_279 tagged_962 integer_inc float_inc integer_dup float_inc float_inc integer_dup integer_flush float_yankdup float_inc integer_dec integer_sub integer_dup integer_flush integer_inc float_max tagged_224 tagged_1072 float_inc integer_dup tagged_962 float_mod tagged_224 tagged_962 float_inc float_inc integer_min integer_flush float_frominteger float_inc float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2]
Total: 53.0
Mean: 1.06
Genome size: 137
Size: 138
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 5716.9297215
Median total errors in population: 1108.2905999999998
Error averages by case: (200.13847500000026 5.43 199.4000380999999 4.81 215.93551900000074 8.374 238.90747790000012 9.472 207.69155219999902 6.888 218.46389550000097 6.619 194.05912059999943 6.58 230.84313800000044 7.617 219.83727209999978 6.247 205.27005150000014 4.749 233.12609659999868 9.857 201.12250419999992 5.579 235.24449360000074 9.36 239.1941484999999 5.391 232.52494239999922 9.675 187.34364939999995 4.231 240.84528659999964 5.669 228.70710839999944 7.064 235.18462320000012 5.497 222.5949772000001 7.801 210.48270259999978 5.276 226.9671822999998 4.948 238.84266869999996 5.33 257.40396189999984 5.222 232.90783600000015 6.205)
Error minima by case: (0.0 0 1.0 1 0.0 0 0.0 0 0.6465 1 0.0419 1 1.0 1 0.0 0 0.0 0 1.0 1 1.0 1 1.0 1 1.0 1 0.0267 1 1.0 1 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 1.0 1 1.0 1 0.0 0 0.0 0)
Average genome size in population (length): 118.072
Average program size in population (points): 119.072
Average percent parens in population: 0.009
Minimum age in population: 71.54077310486382
Maximum age in population: 76.38841638828701
Average age in population: 74.46431514197114
Median age in population: 74.53131566507115
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.923
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.923
Total error diversity:				 0.414
Error (vector) diversity:			 0.423
Behavioral diversity:				 0.424
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 118832295
--- Timings ---
Current time: 1529615748763 milliseconds
Total Time:         214.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.7 seconds, 33.5%
Fitness Testing:    111.8 seconds, 52.2%
Report:              30.4 seconds, 14.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -76.1667347159
Correct output: -52.4729786445 | Program output: -52.4729786445
Correct output: 5.2737975027   | Program output: 5.2737975027  
Correct output: 28.9944965858  | Program output: 28.9944965858 
Correct output: 13.3961934486  | Program output: 13.3961934486 
Correct output: 19.9676470573  | Program output: 19.9676470573 
Correct output: 33.3987292904  | Program output: 33.3987292904 
Correct output: -11.5386957197 | Program output: -11.5386957197
Correct output: -71.2921620852 | Program output: -71.2921620852
Correct output: -80.9811660953 | Program output: -80.9811660953
Correct output: -68.2663702523 | Program output: -68.2663702523
Correct output: -103.9955386998 | Program output: -103.9955386998
Correct output: -61.3328712961 | Program output: -61.3328712961
Correct output: -145.0267384409 | Program output: -145.0267384409
Correct output: -55.6438617168 | Program output: -55.6438617168
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 101.9348060994
Correct output: 66.2062402799  | Program output: 66.2062402799 
Correct output: 128.8438321461 | Program output: 128.8438321461
Correct output: 43.5643378164  | Program output: 43.5643378164 
Correct output: 56.5422105693  | Program output: 56.5422105693 
Correct output: -141.170234299 | Program output: -141.170234299
Correct output: -112.8086599195 | Program output: -112.8086599195
Correct output: 180.7008834843 | Program output: 180.7008834843
Correct output: -40.4231951304 | Program output: -40.4231951304
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction integer_inc} {:instruction float_frominteger} {:instruction integer_swap} {:instruction integer_flush} {:instruction integer_max} {:instruction float_max} {:instruction float_rot} {:instruction integer_flush} {:instruction float_shove} {:instruction float_dec} {:instruction float_sub} {:instruction float_frominteger} {:instruction in2} {:instruction tagged_295} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_dec} {:instruction float_swap} {:instruction float_dec} {:instruction in1} {:instruction float_mult} {:instruction tag_float_932} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction integer_swap} {:instruction tagged_96} {:instruction tag_integer_841} {:instruction float_cos} {:instruction integer_dup} {:instruction float_rot} {:instruction float_swap} {:instruction float_sin} {:instruction float_sin} {:instruction float_dec} {:instruction tag_integer_552} {:instruction float_flush} {:instruction print_float} {:instruction in1} {:instruction integer_min} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_add} {:instruction integer_yank} {:instruction print_float} {:instruction float_cos} {:instruction float_sub} {:instruction tag_float_869} {:instruction integer_swap} {:instruction float_cos} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction tagged_224} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_max} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction tagged_962} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_mod} {:instruction integer_min} {:instruction in2} {:instruction print_float} {:instruction float_sin} {:instruction integer_min})
Best program: (float_frominteger integer_swap integer_flush integer_inc float_max integer_inc float_frominteger integer_swap integer_flush integer_max float_max float_rot integer_flush float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec float_swap float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat float_cos integer_swap tagged_96 tag_integer_841 float_cos integer_dup float_rot float_swap float_sin float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min float_frominteger integer_yank float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items integer_yankdup tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4204.076961200001
Median total errors in population: 656.0706000000001
Error averages by case: (143.4733396000002 5.073 145.19036619999994 4.308 160.59276740000047 5.952 172.46649240000005 6.632 163.25810269999994 4.422 170.60737620000026 4.503 138.31187920000016 4.181 169.75546330000043 5.983 154.94920489999964 5.294 151.67327089999998 4.334 171.56240939999995 6.373 147.7877874 4.905 174.6935134 6.12 174.95602809999986 4.588 173.78764779999997 6.234 133.12254600000014 4.035 175.24307659999988 4.333 164.62304649999993 5.397 172.9321523000001 4.315 162.4548498000002 6.235 156.16713939999988 4.005 171.02781649999972 4.364 174.34752989999984 4.533 184.4367446999999 4.028 171.01741059999992 5.492)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 102.88
Average program size in population (points): 103.88
Average percent parens in population: 0.010
Minimum age in population: 73.51394982964008
Maximum age in population: 77.91673706311624
Average age in population: 76.03396883481244
Median age in population: 76.08919268431104
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.288
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.299
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 121621609
--- Timings ---
Current time: 1529615753154 milliseconds
Total Time:         218.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.1 seconds, 33.4%
Fitness Testing:    114.2 seconds, 52.2%
Report:              31.2 seconds, 14.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 53
Successful program: (float_frominteger integer_swap integer_flush integer_inc float_max integer_inc float_frominteger integer_swap integer_flush integer_max float_max float_rot integer_flush float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec float_swap float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat float_cos integer_swap tagged_96 tag_integer_841 float_cos integer_dup float_rot float_swap float_sin float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min float_frominteger integer_yank float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items integer_yankdup tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 94


Auto-simplifying with starting size: 94
step: 0
program: (float_frominteger integer_swap integer_flush integer_inc float_max integer_inc float_frominteger integer_swap integer_flush integer_max float_max float_rot integer_flush float_shove float_dec float_sub float_frominteger in2 tagged_295 float_sin integer_fromfloat integer_dup float_dec float_swap float_dec in1 float_mult tag_float_932 float_sub integer_fromfloat float_cos integer_swap tagged_96 tag_integer_841 float_cos integer_dup float_rot float_swap float_sin float_sin float_dec tag_integer_552 float_flush print_float in1 integer_min float_frominteger integer_yank float_add integer_yank print_float float_cos float_sub tag_float_869 integer_swap float_cos float_dup_items integer_yankdup tagged_224 tagged_962 float_inc float_inc integer_dup integer_flush float_yankdup float_inc integer_dup float_inc integer_dup integer_flush integer_inc float_max float_yankdup float_swap float_frominteger integer_dec tagged_962 float_inc float_inc integer_dup integer_flush integer_inc float_inc float_yankdup float_swap float_frominteger integer_dec integer_mod integer_min in2 print_float float_sin integer_min)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 94

step: 500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in2 in1 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -76.1667347159 | Program output: -76.1667347159
Correct output: -52.4729786445 | Program output: -52.4729786445
Correct output: 5.2737975027   | Program output: 5.2737975027  
Correct output: 28.9944965858  | Program output: 28.9944965858 
Correct output: 13.3961934486  | Program output: 13.3961934486 
Correct output: 19.9676470573  | Program output: 19.9676470573 
Correct output: 33.3987292904  | Program output: 33.3987292904 
Correct output: -11.5386957197 | Program output: -11.5386957197
Correct output: -71.2921620852 | Program output: -71.2921620852
Correct output: -80.9811660953 | Program output: -80.9811660953
Correct output: -68.2663702523 | Program output: -68.2663702523
Correct output: -103.9955386998 | Program output: -103.9955386998
Correct output: -61.3328712961 | Program output: -61.3328712961
Correct output: -145.0267384409 | Program output: -145.0267384409
Correct output: -55.6438617168 | Program output: -55.6438617168
Correct output: -25.0977592931 | Program output: -25.0977592931
Correct output: 101.9348060994 | Program output: 101.9348060994
Correct output: 66.2062402799  | Program output: 66.2062402799 
Correct output: 128.8438321461 | Program output: 128.8438321461
Correct output: 43.5643378164  | Program output: 43.5643378164 
Correct output: 56.5422105693  | Program output: 56.5422105693 
Correct output: -141.170234299 | Program output: -141.170234299
Correct output: -112.8086599195 | Program output: -112.8086599195
Correct output: 180.7008834843 | Program output: 180.7008834843
Correct output: -40.4231951304 | Program output: -40.4231951304
;;******************************
