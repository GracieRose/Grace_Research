Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-66.1635067725885 59] -7.163506772588505]
Train Case:   1 | Input/Output: [[-23.973722468369132 2] -21.973722468369132]
Train Case:   2 | Input/Output: [[-96.7167633156757 -43] -139.7167633156757]
Train Case:   3 | Input/Output: [[-84.03090373216209 -79] -163.03090373216207]
Train Case:   4 | Input/Output: [[89.03832109664211 89] 178.0383210966421]
Train Case:   5 | Input/Output: [[14.958147161088135 73] 87.95814716108814]
Train Case:   6 | Input/Output: [[-67.73584898519982 47] -20.735848985199823]
Train Case:   7 | Input/Output: [[67.25711502512678 -73] -5.7428849748732205]
Train Case:   8 | Input/Output: [[-95.04066055256597 35] -60.04066055256597]
Train Case:   9 | Input/Output: [[-92.87053376427296 -8] -100.87053376427296]
Train Case:  10 | Input/Output: [[53.241787824342566 14] 67.24178782434257]
Train Case:  11 | Input/Output: [[79.05305120236397 -69] 10.053051202363974]
Train Case:  12 | Input/Output: [[31.583596301666745 -94] -62.416403698333255]
Train Case:  13 | Input/Output: [[17.600257208691204 -97] -79.3997427913088]
Train Case:  14 | Input/Output: [[19.805913590876088 -37] -17.194086409123912]
Train Case:  15 | Input/Output: [[6.344875875463842 66] 72.34487587546384]
Train Case:  16 | Input/Output: [[-38.62213782564721 -85] -123.6221378256472]
Train Case:  17 | Input/Output: [[16.30951651042136 13] 29.30951651042136]
Train Case:  18 | Input/Output: [[-54.36311562790203 81] 26.636884372097967]
Train Case:  19 | Input/Output: [[47.99526473423262 -74] -26.00473526576738]
Train Case:  20 | Input/Output: [[16.24165108363161 92] 108.24165108363161]
Train Case:  21 | Input/Output: [[30.62559438183365 -43] -12.37440561816635]
Train Case:  22 | Input/Output: [[-75.85818129450601 32] -43.85818129450601]
Train Case:  23 | Input/Output: [[48.1032673973144 81] 129.1032673973144]
Train Case:  24 | Input/Output: [[-4.5013549447518955 -28] -32.501354944751895]
Test Case:   0 | Input/Output: [[14.044999416389018 -21] -6.955000583610982]
Test Case:   1 | Input/Output: [[-75.93025274040207 -75] -150.93025274040207]
Test Case:   2 | Input/Output: [[-93.68487270358649 73] -20.684872703586493]
Test Case:   3 | Input/Output: [[-81.02283165821348 99] 17.977168341786523]
Test Case:   4 | Input/Output: [[-20.13903555465724 -21] -41.13903555465724]
Test Case:   5 | Input/Output: [[65.09882072539176 59] 124.09882072539176]
Test Case:   6 | Input/Output: [[-93.65933019058672 85] -8.659330190586715]
Test Case:   7 | Input/Output: [[21.865160567825342 -65] -43.13483943217466]
Test Case:   8 | Input/Output: [[98.4658553260821 -62] 36.46585532608211]
Test Case:   9 | Input/Output: [[-15.60878630227333 -82] -97.60878630227333]
Test Case:  10 | Input/Output: [[-14.896611326206283 -48] -62.89661132620628]
Test Case:  11 | Input/Output: [[67.8821975933798 -9] 58.8821975933798]
Test Case:  12 | Input/Output: [[50.5193139151192 -55] -4.4806860848808014]
Test Case:  13 | Input/Output: [[87.68865394606036 3] 90.68865394606036]
Test Case:  14 | Input/Output: [[7.680939608732643 -7] 0.6809396087326434]
Test Case:  15 | Input/Output: [[-40.85764351324439 64] 23.14235648675561]
Test Case:  16 | Input/Output: [[-15.293008412824179 50] 34.70699158717582]
Test Case:  17 | Input/Output: [[-4.243208407784408 -81] -85.24320840778441]
Test Case:  18 | Input/Output: [[-30.745309021453068 -54] -84.74530902145307]
Test Case:  19 | Input/Output: [[-83.67203578946854 -23] -106.67203578946854]
Test Case:  20 | Input/Output: [[-11.584246547183128 9] -2.5842465471831275]
Test Case:  21 | Input/Output: [[95.92493352154398 -9] 86.92493352154398]
Test Case:  22 | Input/Output: [[56.43846481713621 -38] 18.438464817136207]
Test Case:  23 | Input/Output: [[-41.720331488328455 -9] -50.720331488328455]
Test Case:  24 | Input/Output: [[-98.43943653342484 -48] -146.43943653342484]
Test Case:  25 | Input/Output: [[95.83247104477888 62] 157.83247104477888]
Test Case:  26 | Input/Output: [[33.8330845962077 16] 49.8330845962077]
Test Case:  27 | Input/Output: [[16.647172053481626 -83] -66.35282794651837]
Test Case:  28 | Input/Output: [[-15.347732660788438 36] 20.652267339211562]
Test Case:  29 | Input/Output: [[76.7457393997928 65] 141.7457393997928]
Test Case:  30 | Input/Output: [[30.755125658718214 13] 43.755125658718214]
Test Case:  31 | Input/Output: [[53.192167713007734 -65] -11.807832286992266]
Test Case:  32 | Input/Output: [[-89.39032293935713 6] -83.39032293935713]
Test Case:  33 | Input/Output: [[-86.57323987680039 -52] -138.5732398768004]
Test Case:  34 | Input/Output: [[35.055344005921 24] 59.055344005921]
Test Case:  35 | Input/Output: [[37.89549833640439 2] 39.89549833640439]
Test Case:  36 | Input/Output: [[92.46155757966753 -74] 18.461557579667527]
Test Case:  37 | Input/Output: [[29.258359122690052 -32] -2.7416408773099477]
Test Case:  38 | Input/Output: [[60.634182724071536 -33] 27.634182724071536]
Test Case:  39 | Input/Output: [[-23.625329323277427 -42] -65.62532932327743]
Test Case:  40 | Input/Output: [[-90.13869879319576 -97] -187.13869879319577]
Test Case:  41 | Input/Output: [[89.94645444211395 -39] 50.94645444211395]
Test Case:  42 | Input/Output: [[13.538612225235298 49] 62.5386122252353]
Test Case:  43 | Input/Output: [[-79.64991095441954 27] -52.64991095441954]
Test Case:  44 | Input/Output: [[83.67858520713466 98] 181.67858520713466]
Test Case:  45 | Input/Output: [[-10.72144701969897 27] 16.27855298030103]
Test Case:  46 | Input/Output: [[28.429023912975055 -2] 26.429023912975055]
Test Case:  47 | Input/Output: [[84.45963949237486 -80] 4.459639492374862]
Test Case:  48 | Input/Output: [[70.64625934131422 100] 170.64625934131422]
Test Case:  49 | Input/Output: [[-88.90185597315947 -13] -101.90185597315947]
Test Case:  50 | Input/Output: [[48.58917230344758 20] 68.58917230344758]
Test Case:  51 | Input/Output: [[-31.787376982455598 -97] -128.7873769824556]
Test Case:  52 | Input/Output: [[72.33925817782264 -87] -14.660741822177357]
Test Case:  53 | Input/Output: [[-7.694506115791057 94] 86.30549388420894]
Test Case:  54 | Input/Output: [[97.94175636584919 43] 140.9417563658492]
Test Case:  55 | Input/Output: [[14.47613854870579 50] 64.47613854870579]
Test Case:  56 | Input/Output: [[45.14622368487471 74] 119.14622368487471]
Test Case:  57 | Input/Output: [[-69.38265667839643 -12] -81.38265667839643]
Test Case:  58 | Input/Output: [[-52.82976981726206 -15] -67.82976981726206]
Test Case:  59 | Input/Output: [[89.1957878409386 33] 122.1957878409386]
Test Case:  60 | Input/Output: [[85.67024020158152 -2] 83.67024020158152]
Test Case:  61 | Input/Output: [[-95.89131713058727 -98] -193.89131713058725]
Test Case:  62 | Input/Output: [[16.402831150173995 -16] 0.40283115017399496]
Test Case:  63 | Input/Output: [[-16.105324827433847 63] 46.89467517256615]
Test Case:  64 | Input/Output: [[7.751312580158782 97] 104.75131258015878]
Test Case:  65 | Input/Output: [[-64.77764640276425 62] -2.7776464027642476]
Test Case:  66 | Input/Output: [[85.05213550700563 -2] 83.05213550700563]
Test Case:  67 | Input/Output: [[6.020066227516779 35] 41.02006622751678]
Test Case:  68 | Input/Output: [[-6.687992451147949 -34] -40.68799245114795]
Test Case:  69 | Input/Output: [[-77.13650172291533 -19] -96.13650172291533]
Test Case:  70 | Input/Output: [[-50.18198262201996 -66] -116.18198262201996]
Test Case:  71 | Input/Output: [[79.42127521328732 -57] 22.421275213287316]
Test Case:  72 | Input/Output: [[49.80292054746906 14] 63.80292054746906]
Test Case:  73 | Input/Output: [[-99.84178426767403 96] -3.8417842676740293]
Test Case:  74 | Input/Output: [[-79.72017021949125 89] 9.279829780508749]
Test Case:  75 | Input/Output: [[50.69905892648251 -32] 18.699058926482508]
Test Case:  76 | Input/Output: [[41.65681586769389 -36] 5.6568158676938936]
Test Case:  77 | Input/Output: [[64.70214405615258 17] 81.70214405615258]
Test Case:  78 | Input/Output: [[10.376970618877394 -36] -25.623029381122606]
Test Case:  79 | Input/Output: [[-15.619586055427973 65] 49.38041394457203]
Test Case:  80 | Input/Output: [[-42.67845243391264 -14] -56.67845243391264]
Test Case:  81 | Input/Output: [[-65.28925666852597 -71] -136.28925666852598]
Test Case:  82 | Input/Output: [[-69.77060677411635 -11] -80.77060677411635]
Test Case:  83 | Input/Output: [[-35.1652032262685 39] 3.8347967737314974]
Test Case:  84 | Input/Output: [[-5.129470324371837 87] 81.87052967562816]
Test Case:  85 | Input/Output: [[72.37637708632812 -2] 70.37637708632812]
Test Case:  86 | Input/Output: [[-30.48741483893916 78] 47.51258516106084]
Test Case:  87 | Input/Output: [[-85.85869940339231 -51] -136.8586994033923]
Test Case:  88 | Input/Output: [[-96.55085423422595 -12] -108.55085423422595]
Test Case:  89 | Input/Output: [[86.02159132858776 -56] 30.02159132858776]
Test Case:  90 | Input/Output: [[-99.17943073751132 82] -17.179430737511325]
Test Case:  91 | Input/Output: [[-95.74303308765487 8] -87.74303308765487]
Test Case:  92 | Input/Output: [[49.53898048214495 -59] -9.46101951785505]
Test Case:  93 | Input/Output: [[33.161407048881614 -45] -11.838592951118386]
Test Case:  94 | Input/Output: [[-86.67830519904571 -80] -166.67830519904572]
Test Case:  95 | Input/Output: [[-45.86801443217971 32] -13.868014432179713]
Test Case:  96 | Input/Output: [[23.240922414551918 -22] 1.2409224145519175]
Test Case:  97 | Input/Output: [[-32.98584825508948 60] 27.01415174491052]
Test Case:  98 | Input/Output: [[82.822121083768 72] 154.822121083768]
Test Case:  99 | Input/Output: [[71.76585801970108 67] 138.76585801970108]
Test Case: 100 | Input/Output: [[-7.77388937959546 -46] -53.77388937959546]
Test Case: 101 | Input/Output: [[-15.3991081663726 90] 74.6008918336274]
Test Case: 102 | Input/Output: [[18.120539818597265 -22] -3.8794601814027345]
Test Case: 103 | Input/Output: [[17.76487165761229 -16] 1.7648716576122894]
Test Case: 104 | Input/Output: [[-87.36826806265945 -43] -130.36826806265947]
Test Case: 105 | Input/Output: [[-73.75222914246689 -91] -164.7522291424669]
Test Case: 106 | Input/Output: [[-99.83826955209621 70] -29.838269552096207]
Test Case: 107 | Input/Output: [[-61.8962736442346 -92] -153.8962736442346]
Test Case: 108 | Input/Output: [[11.363756539635531 -12] -0.6362434603644687]
Test Case: 109 | Input/Output: [[-78.42698865114224 -35] -113.42698865114224]
Test Case: 110 | Input/Output: [[-32.27293054303853 47] 14.727069456961473]
Test Case: 111 | Input/Output: [[-4.073596213383297 4] -0.07359621338329703]
Test Case: 112 | Input/Output: [[56.340871611381004 6] 62.340871611381004]
Test Case: 113 | Input/Output: [[-45.052943644486 27] -18.052943644486]
Test Case: 114 | Input/Output: [[25.91067945922127 22] 47.91067945922127]
Test Case: 115 | Input/Output: [[80.5814128167089 -1] 79.5814128167089]
Test Case: 116 | Input/Output: [[-61.27008456154497 -23] -84.27008456154496]
Test Case: 117 | Input/Output: [[14.119434161008272 -63] -48.88056583899173]
Test Case: 118 | Input/Output: [[-81.38594522500036 19] -62.385945225000356]
Test Case: 119 | Input/Output: [[62.695469938970746 -56] 6.695469938970746]
Test Case: 120 | Input/Output: [[-86.63885198381742 42] -44.63885198381742]
Test Case: 121 | Input/Output: [[7.643636194168096 -38] -30.356363805831904]
Test Case: 122 | Input/Output: [[-13.819048360587203 -26] -39.8190483605872]
Test Case: 123 | Input/Output: [[36.81230092853073 12] 48.81230092853073]
Test Case: 124 | Input/Output: [[-51.81747181156964 -93] -144.81747181156965]
Test Case: 125 | Input/Output: [[-92.12773723349832 -4] -96.12773723349832]
Test Case: 126 | Input/Output: [[45.80464557825297 -17] 28.804645578252973]
Test Case: 127 | Input/Output: [[-44.877102086520026 16] -28.877102086520026]
Test Case: 128 | Input/Output: [[-8.230631122668001 -50] -58.230631122668]
Test Case: 129 | Input/Output: [[21.24596726233368 -72] -50.75403273766632]
Test Case: 130 | Input/Output: [[-33.273794825330484 -1] -34.273794825330484]
Test Case: 131 | Input/Output: [[-95.37960163896142 -59] -154.37960163896142]
Test Case: 132 | Input/Output: [[-29.505197753121166 71] 41.494802246878834]
Test Case: 133 | Input/Output: [[-76.0087036626178 80] 3.9912963373821952]
Test Case: 134 | Input/Output: [[-37.76661924011822 38] 0.23338075988178275]
Test Case: 135 | Input/Output: [[52.743762176856535 6] 58.743762176856535]
Test Case: 136 | Input/Output: [[10.717695342206298 -57] -46.2823046577937]
Test Case: 137 | Input/Output: [[-98.53243585771231 -23] -121.53243585771231]
Test Case: 138 | Input/Output: [[-86.20192397660146 47] -39.20192397660146]
Test Case: 139 | Input/Output: [[78.5794097376617 -47] 31.579409737661706]
Test Case: 140 | Input/Output: [[-83.78500226948793 -19] -102.78500226948793]
Test Case: 141 | Input/Output: [[-55.104017417090546 -96] -151.10401741709055]
Test Case: 142 | Input/Output: [[40.33134345672295 59] 99.33134345672295]
Test Case: 143 | Input/Output: [[-92.61180464387657 -2] -94.61180464387657]
Test Case: 144 | Input/Output: [[-49.65994711022192 5] -44.65994711022192]
Test Case: 145 | Input/Output: [[1.233894833300056 -90] -88.76610516669994]
Test Case: 146 | Input/Output: [[-93.5252604280407 -14] -107.5252604280407]
Test Case: 147 | Input/Output: [[-1.8321536890042722 51] 49.16784631099573]
Test Case: 148 | Input/Output: [[24.857746605378978 -98] -73.14225339462102]
Test Case: 149 | Input/Output: [[62.85181841209777 79] 141.85181841209777]
Test Case: 150 | Input/Output: [[94.75848712257812 -89] 5.758487122578117]
Test Case: 151 | Input/Output: [[-32.36334768292477 -97] -129.36334768292477]
Test Case: 152 | Input/Output: [[-71.43765204312285 -17] -88.43765204312285]
Test Case: 153 | Input/Output: [[65.83966762002535 -27] 38.83966762002535]
Test Case: 154 | Input/Output: [[-65.50781000986103 86] 20.492189990138968]
Test Case: 155 | Input/Output: [[3.7674479345791667 -57] -53.23255206542083]
Test Case: 156 | Input/Output: [[-90.78486998009534 -98] -188.78486998009532]
Test Case: 157 | Input/Output: [[29.0690273758093 -68] -38.9309726241907]
Test Case: 158 | Input/Output: [[-21.57819037514568 86] 64.42180962485432]
Test Case: 159 | Input/Output: [[-89.7345690193087 56] -33.734569019308694]
Test Case: 160 | Input/Output: [[69.92785824689602 -29] 40.92785824689602]
Test Case: 161 | Input/Output: [[78.447068263835 -50] 28.447068263835007]
Test Case: 162 | Input/Output: [[-2.1399936357578753 -82] -84.13999363575788]
Test Case: 163 | Input/Output: [[44.43039501942519 97] 141.4303950194252]
Test Case: 164 | Input/Output: [[61.640836003694545 -50] 11.640836003694545]
Test Case: 165 | Input/Output: [[-56.786462649685255 16] -40.786462649685255]
Test Case: 166 | Input/Output: [[-86.24156313141151 40] -46.24156313141151]
Test Case: 167 | Input/Output: [[-51.73652411368981 41] -10.73652411368981]
Test Case: 168 | Input/Output: [[30.67973521581405 67] 97.67973521581405]
Test Case: 169 | Input/Output: [[-95.09865634219177 28] -67.09865634219177]
Test Case: 170 | Input/Output: [[56.61303753295155 -39] 17.61303753295155]
Test Case: 171 | Input/Output: [[-89.25834543398999 33] -56.25834543398999]
Test Case: 172 | Input/Output: [[75.68945735596006 20] 95.68945735596006]
Test Case: 173 | Input/Output: [[52.851698054886555 -87] -34.148301945113445]
Test Case: 174 | Input/Output: [[50.31537208681621 48] 98.31537208681621]
Test Case: 175 | Input/Output: [[-9.834226588080753 -47] -56.83422658808075]
Test Case: 176 | Input/Output: [[61.98572323710013 91] 152.98572323710013]
Test Case: 177 | Input/Output: [[-64.46034454171522 -59] -123.46034454171522]
Test Case: 178 | Input/Output: [[31.20159867393943 4] 35.20159867393943]
Test Case: 179 | Input/Output: [[1.9263121204083973 61] 62.9263121204084]
Test Case: 180 | Input/Output: [[5.499070684160472 -76] -70.50092931583953]
Test Case: 181 | Input/Output: [[34.382293290383956 9] 43.382293290383956]
Test Case: 182 | Input/Output: [[-89.3815644024601 -49] -138.3815644024601]
Test Case: 183 | Input/Output: [[5.967487474224001 55] 60.967487474224]
Test Case: 184 | Input/Output: [[18.86960754565274 27] 45.86960754565274]
Test Case: 185 | Input/Output: [[19.971725954295593 48] 67.9717259542956]
Test Case: 186 | Input/Output: [[-48.62147265213888 -40] -88.62147265213888]
Test Case: 187 | Input/Output: [[53.49980725109623 71] 124.49980725109623]
Test Case: 188 | Input/Output: [[-19.291502343283142 -38] -57.29150234328314]
Test Case: 189 | Input/Output: [[71.08460592196175 15] 86.08460592196175]
Test Case: 190 | Input/Output: [[67.49801689075133 57] 124.49801689075133]
Test Case: 191 | Input/Output: [[45.10799942710082 -58] -12.892000572899178]
Test Case: 192 | Input/Output: [[-73.22498859055959 70] -3.2249885905595903]
Test Case: 193 | Input/Output: [[-62.882153334257815 62] -0.882153334257815]
Test Case: 194 | Input/Output: [[-9.067342879264388 41] 31.932657120735612]
Test Case: 195 | Input/Output: [[-67.39190107841401 -41] -108.39190107841401]
Test Case: 196 | Input/Output: [[34.97975458324112 69] 103.97975458324112]
Test Case: 197 | Input/Output: [[62.609682672640275 36] 98.60968267264028]
Test Case: 198 | Input/Output: [[50.986298960701646 66] 116.98629896070165]
Test Case: 199 | Input/Output: [[-48.17480391497402 -75] -123.17480391497402]
Test Case: 200 | Input/Output: [[-13.179703704680051 76] 62.82029629531995]
Test Case: 201 | Input/Output: [[-98.29855505180372 21] -77.29855505180372]
Test Case: 202 | Input/Output: [[39.33039762482463 48] 87.33039762482463]
Test Case: 203 | Input/Output: [[42.826758286014865 53] 95.82675828601487]
Test Case: 204 | Input/Output: [[-43.568797364780984 -39] -82.56879736478098]
Test Case: 205 | Input/Output: [[63.95359976980612 -65] -1.046400230193882]
Test Case: 206 | Input/Output: [[44.66981694288893 94] 138.66981694288893]
Test Case: 207 | Input/Output: [[-73.27036023863538 42] -31.270360238635377]
Test Case: 208 | Input/Output: [[9.40617558295591 90] 99.40617558295591]
Test Case: 209 | Input/Output: [[-76.89589280434234 43] -33.89589280434234]
Test Case: 210 | Input/Output: [[94.38763713163314 56] 150.38763713163314]
Test Case: 211 | Input/Output: [[49.86567216311329 81] 130.8656721631133]
Test Case: 212 | Input/Output: [[-92.18019007897342 2] -90.18019007897342]
Test Case: 213 | Input/Output: [[-47.04399888979734 -11] -58.04399888979734]
Test Case: 214 | Input/Output: [[24.460099112089907 -63] -38.53990088791009]
Test Case: 215 | Input/Output: [[-43.84638685176889 -55] -98.8463868517689]
Test Case: 216 | Input/Output: [[61.848406115808984 71] 132.84840611580898]
Test Case: 217 | Input/Output: [[-84.54526225847701 -82] -166.545262258477]
Test Case: 218 | Input/Output: [[80.96987946010276 -34] 46.96987946010276]
Test Case: 219 | Input/Output: [[-10.737055879839858 85] 74.26294412016014]
Test Case: 220 | Input/Output: [[61.683337888997045 14] 75.68333788899704]
Test Case: 221 | Input/Output: [[-90.7090107399767 94] 3.290989260023295]
Test Case: 222 | Input/Output: [[8.230661196920039 -16] -7.769338803079961]
Test Case: 223 | Input/Output: [[-4.557727036129535 24] 19.442272963870465]
Test Case: 224 | Input/Output: [[60.334023257824185 -48] 12.334023257824185]
Test Case: 225 | Input/Output: [[41.02609820627802 -15] 26.02609820627802]
Test Case: 226 | Input/Output: [[-49.56137943146845 -94] -143.56137943146845]
Test Case: 227 | Input/Output: [[-78.62350564717929 -5] -83.62350564717929]
Test Case: 228 | Input/Output: [[1.2337937720026275 46] 47.23379377200263]
Test Case: 229 | Input/Output: [[-15.732524724484094 -82] -97.7325247244841]
Test Case: 230 | Input/Output: [[94.85803857577244 -2] 92.85803857577244]
Test Case: 231 | Input/Output: [[83.08856534437962 -92] -8.911434655620383]
Test Case: 232 | Input/Output: [[64.53350798933263 91] 155.53350798933263]
Test Case: 233 | Input/Output: [[-56.06780315480564 90] 33.93219684519436]
Test Case: 234 | Input/Output: [[29.572515503935136 -75] -45.427484496064864]
Test Case: 235 | Input/Output: [[17.05428463396197 -11] 6.05428463396197]
Test Case: 236 | Input/Output: [[36.37942125516719 -28] 8.379421255167188]
Test Case: 237 | Input/Output: [[68.22399460113064 -85] -16.77600539886936]
Test Case: 238 | Input/Output: [[28.177422970261034 -26] 2.177422970261034]
Test Case: 239 | Input/Output: [[-39.99785724649636 -34] -73.99785724649635]
Test Case: 240 | Input/Output: [[-1.026134850631479 57] 55.97386514936852]
Test Case: 241 | Input/Output: [[44.01080299902503 5] 49.01080299902503]
Test Case: 242 | Input/Output: [[-19.067302404315868 56] 36.93269759568413]
Test Case: 243 | Input/Output: [[93.98743638133777 -70] 23.987436381337773]
Test Case: 244 | Input/Output: [[-78.40660518877402 34] -44.40660518877402]
Test Case: 245 | Input/Output: [[-74.74365137698416 -4] -78.74365137698416]
Test Case: 246 | Input/Output: [[37.14542094524046 34] 71.14542094524046]
Test Case: 247 | Input/Output: [[-23.55664336384335 60] 36.44335663615665]
Test Case: 248 | Input/Output: [[-67.56666815052874 52] -15.566668150528741]
Test Case: 249 | Input/Output: [[79.65933677292742 72] 151.65933677292742]
Test Case: 250 | Input/Output: [[-55.569682379537035 -83] -138.56968237953703]
Test Case: 251 | Input/Output: [[95.11198708305224 35] 130.11198708305224]
Test Case: 252 | Input/Output: [[-81.15714893689558 74] -7.157148936895581]
Test Case: 253 | Input/Output: [[-66.7539042085555 -30] -96.7539042085555]
Test Case: 254 | Input/Output: [[87.02072288895442 -65] 22.020722888954424]
Test Case: 255 | Input/Output: [[-72.43152837079079 75] 2.5684716292092133]
Test Case: 256 | Input/Output: [[-98.7955558466453 20] -78.7955558466453]
Test Case: 257 | Input/Output: [[39.78237374291376 -1] 38.78237374291376]
Test Case: 258 | Input/Output: [[-43.244014094088136 45] 1.7559859059118637]
Test Case: 259 | Input/Output: [[-1.4578940187187897 90] 88.54210598128121]
Test Case: 260 | Input/Output: [[-49.17897587958582 59] 9.82102412041418]
Test Case: 261 | Input/Output: [[7.695123651016928 -91] -83.30487634898307]
Test Case: 262 | Input/Output: [[-39.95900213295984 86] 46.04099786704016]
Test Case: 263 | Input/Output: [[-91.12072584130911 -43] -134.1207258413091]
Test Case: 264 | Input/Output: [[70.3279464231627 -3] 67.3279464231627]
Test Case: 265 | Input/Output: [[40.500522797952414 49] 89.50052279795241]
Test Case: 266 | Input/Output: [[42.134427795809245 -47] -4.865572204190755]
Test Case: 267 | Input/Output: [[-42.94582500909097 91] 48.05417499090903]
Test Case: 268 | Input/Output: [[-74.47030311924097 -35] -109.47030311924097]
Test Case: 269 | Input/Output: [[47.76221596292959 -22] 25.762215962929588]
Test Case: 270 | Input/Output: [[13.124828388518893 -77] -63.87517161148111]
Test Case: 271 | Input/Output: [[-97.14483857030183 -91] -188.14483857030183]
Test Case: 272 | Input/Output: [[52.5038428043444 -78] -25.4961571956556]
Test Case: 273 | Input/Output: [[70.19673308029783 80] 150.19673308029783]
Test Case: 274 | Input/Output: [[22.62610581992972 25] 47.62610581992972]
Test Case: 275 | Input/Output: [[-89.72609172384145 -7] -96.72609172384145]
Test Case: 276 | Input/Output: [[63.54666073812501 -87] -23.453339261874987]
Test Case: 277 | Input/Output: [[-59.035159279916336 -81] -140.03515927991634]
Test Case: 278 | Input/Output: [[-33.47800126643247 82] 48.52199873356753]
Test Case: 279 | Input/Output: [[-85.12860330778516 29] -56.128603307785156]
Test Case: 280 | Input/Output: [[-21.72084620280816 -68] -89.72084620280816]
Test Case: 281 | Input/Output: [[-96.63884173097806 -84] -180.63884173097807]
Test Case: 282 | Input/Output: [[30.99084727945177 -86] -55.00915272054823]
Test Case: 283 | Input/Output: [[-20.461755071232645 -31] -51.461755071232645]
Test Case: 284 | Input/Output: [[93.36030136165053 -9] 84.36030136165053]
Test Case: 285 | Input/Output: [[71.01117232340442 -55] 16.011172323404423]
Test Case: 286 | Input/Output: [[-85.5776149638932 80] -5.577614963893197]
Test Case: 287 | Input/Output: [[-6.440864778701112 -79] -85.44086477870111]
Test Case: 288 | Input/Output: [[2.3412697656926156 -97] -94.65873023430738]
Test Case: 289 | Input/Output: [[76.89157158545657 24] 100.89157158545657]
Test Case: 290 | Input/Output: [[87.7290978528656 100] 187.7290978528656]
Test Case: 291 | Input/Output: [[-10.974086160596897 25] 14.025913839403103]
Test Case: 292 | Input/Output: [[0.6732006932298304 -58] -57.32679930677017]
Test Case: 293 | Input/Output: [[73.72669651895086 -53] 20.72669651895086]
Test Case: 294 | Input/Output: [[28.91403634305894 -11] 17.91403634305894]
Test Case: 295 | Input/Output: [[-67.26248472040785 78] 10.737515279592145]
Test Case: 296 | Input/Output: [[29.64802241524066 -16] 13.64802241524066]
Test Case: 297 | Input/Output: [[-6.462586370400359 54] 47.53741362959964]
Test Case: 298 | Input/Output: [[97.05602644984444 -100] -2.9439735501555617]
Test Case: 299 | Input/Output: [[-38.98394957213371 -36] -74.98394957213371]
Test Case: 300 | Input/Output: [[2.250611403513389 1] 3.250611403513389]
Test Case: 301 | Input/Output: [[34.55595012029937 35] 69.55595012029937]
Test Case: 302 | Input/Output: [[76.25992712154499 22] 98.25992712154499]
Test Case: 303 | Input/Output: [[0.8154469665739867 30] 30.815446966573987]
Test Case: 304 | Input/Output: [[-84.54660036605448 17] -67.54660036605448]
Test Case: 305 | Input/Output: [[-1.2028430486867592 41] 39.79715695131324]
Test Case: 306 | Input/Output: [[13.248922754757757 21] 34.24892275475776]
Test Case: 307 | Input/Output: [[8.324580772334826 24] 32.324580772334826]
Test Case: 308 | Input/Output: [[23.793741235580228 52] 75.79374123558023]
Test Case: 309 | Input/Output: [[-7.560588286289118 58] 50.43941171371088]
Test Case: 310 | Input/Output: [[53.20201315647927 -6] 47.20201315647927]
Test Case: 311 | Input/Output: [[21.78175643096452 95] 116.78175643096452]
Test Case: 312 | Input/Output: [[-89.4714461797607 22] -67.4714461797607]
Test Case: 313 | Input/Output: [[15.676368885448525 32] 47.676368885448525]
Test Case: 314 | Input/Output: [[64.83140336730324 49] 113.83140336730324]
Test Case: 315 | Input/Output: [[25.878770604547725 52] 77.87877060454773]
Test Case: 316 | Input/Output: [[22.195346975791892 91] 113.19534697579189]
Test Case: 317 | Input/Output: [[45.80534363645904 71] 116.80534363645904]
Test Case: 318 | Input/Output: [[-44.68686263333308 -70] -114.68686263333308]
Test Case: 319 | Input/Output: [[34.056417955404726 14] 48.056417955404726]
Test Case: 320 | Input/Output: [[-95.73860216797677 65] -30.738602167976765]
Test Case: 321 | Input/Output: [[-94.29668171524592 -99] -193.29668171524594]
Test Case: 322 | Input/Output: [[87.2923762944277 -84] 3.2923762944276973]
Test Case: 323 | Input/Output: [[50.23878163069935 38] 88.23878163069935]
Test Case: 324 | Input/Output: [[24.104615124740775 94] 118.10461512474077]
Test Case: 325 | Input/Output: [[-48.15420080694719 -29] -77.15420080694719]
Test Case: 326 | Input/Output: [[64.23368731271341 79] 143.2336873127134]
Test Case: 327 | Input/Output: [[-45.04124076389417 -1] -46.04124076389417]
Test Case: 328 | Input/Output: [[-7.085827101637719 -7] -14.085827101637719]
Test Case: 329 | Input/Output: [[-75.27462520921307 32] -43.27462520921307]
Test Case: 330 | Input/Output: [[-20.405715606356935 -17] -37.405715606356935]
Test Case: 331 | Input/Output: [[-19.47869597120733 48] 28.52130402879267]
Test Case: 332 | Input/Output: [[58.37782167539524 79] 137.37782167539524]
Test Case: 333 | Input/Output: [[85.02498266817855 51] 136.02498266817855]
Test Case: 334 | Input/Output: [[-79.96277082471059 5] -74.96277082471059]
Test Case: 335 | Input/Output: [[0.04211413602943992 -77] -76.95788586397056]
Test Case: 336 | Input/Output: [[83.83385391444429 89] 172.8338539144443]
Test Case: 337 | Input/Output: [[-5.1230044366212155 36] 30.876995563378784]
Test Case: 338 | Input/Output: [[8.555990704288789 -55] -46.44400929571121]
Test Case: 339 | Input/Output: [[-4.626990599875029 33] 28.37300940012497]
Test Case: 340 | Input/Output: [[-30.906680719197638 44] 13.093319280802362]
Test Case: 341 | Input/Output: [[23.162153194489903 -100] -76.8378468055101]
Test Case: 342 | Input/Output: [[51.25123270745155 -55] -3.7487672925484503]
Test Case: 343 | Input/Output: [[96.75594529229883 64] 160.75594529229883]
Test Case: 344 | Input/Output: [[-41.91842954746225 21] -20.918429547462253]
Test Case: 345 | Input/Output: [[90.8044054184833 -25] 65.8044054184833]
Test Case: 346 | Input/Output: [[51.1839162934418 20] 71.1839162934418]
Test Case: 347 | Input/Output: [[10.864911698274554 -48] -37.135088301725446]
Test Case: 348 | Input/Output: [[-37.75549527222641 74] 36.24450472777359]
Test Case: 349 | Input/Output: [[-33.66201238908073 48] 14.33798761091927]
Test Case: 350 | Input/Output: [[-64.15351354793299 -10] -74.15351354793299]
Test Case: 351 | Input/Output: [[22.921059274897942 100] 122.92105927489794]
Test Case: 352 | Input/Output: [[56.4633813559233 61] 117.4633813559233]
Test Case: 353 | Input/Output: [[-32.75582674840496 29] -3.7558267484049566]
Test Case: 354 | Input/Output: [[47.86855452666342 66] 113.86855452666342]
Test Case: 355 | Input/Output: [[3.3490551844319185 2] 5.3490551844319185]
Test Case: 356 | Input/Output: [[18.48743723404644 82] 100.48743723404644]
Test Case: 357 | Input/Output: [[16.02243661689033 -90] -73.97756338310967]
Test Case: 358 | Input/Output: [[91.75631574617518 7] 98.75631574617518]
Test Case: 359 | Input/Output: [[-16.097167533339558 17] 0.9028324666604419]
Test Case: 360 | Input/Output: [[48.72580729079232 29] 77.72580729079232]
Test Case: 361 | Input/Output: [[53.517054229474184 24] 77.51705422947418]
Test Case: 362 | Input/Output: [[-1.984335373883738 -8] -9.984335373883738]
Test Case: 363 | Input/Output: [[-71.85405273760755 27] -44.854052737607546]
Test Case: 364 | Input/Output: [[99.21180119370678 -55] 44.211801193706776]
Test Case: 365 | Input/Output: [[70.34739710277728 84] 154.34739710277728]
Test Case: 366 | Input/Output: [[16.959758294660702 37] 53.9597582946607]
Test Case: 367 | Input/Output: [[-61.66158440670755 10] -51.66158440670755]
Test Case: 368 | Input/Output: [[0.584706833726429 25] 25.58470683372643]
Test Case: 369 | Input/Output: [[76.26134504540991 -10] 66.26134504540991]
Test Case: 370 | Input/Output: [[20.34215657400358 99] 119.34215657400358]
Test Case: 371 | Input/Output: [[-75.38360222656213 89] 13.616397773437868]
Test Case: 372 | Input/Output: [[20.066826876965635 0] 20.066826876965635]
Test Case: 373 | Input/Output: [[-94.42820227163133 73] -21.428202271631335]
Test Case: 374 | Input/Output: [[76.47548780388476 -36] 40.47548780388476]
Test Case: 375 | Input/Output: [[21.965599254697736 -88] -66.03440074530226]
Test Case: 376 | Input/Output: [[-74.17720540943552 -55] -129.17720540943552]
Test Case: 377 | Input/Output: [[-22.484451692951083 95] 72.51554830704892]
Test Case: 378 | Input/Output: [[-41.896095022777914 -67] -108.89609502277791]
Test Case: 379 | Input/Output: [[-53.52309212476767 71] 17.476907875232328]
Test Case: 380 | Input/Output: [[-4.369200249988296 -33] -37.369200249988296]
Test Case: 381 | Input/Output: [[-9.153791859274435 -74] -83.15379185927443]
Test Case: 382 | Input/Output: [[96.55882158455483 -28] 68.55882158455483]
Test Case: 383 | Input/Output: [[9.23888357622593 -97] -87.76111642377407]
Test Case: 384 | Input/Output: [[19.67686884965059 -60] -40.32313115034941]
Test Case: 385 | Input/Output: [[-69.17644615567451 75] 5.823553844325488]
Test Case: 386 | Input/Output: [[30.100447018024227 -62] -31.899552981975773]
Test Case: 387 | Input/Output: [[49.10646109882646 23] 72.10646109882646]
Test Case: 388 | Input/Output: [[75.25605601799444 -2] 73.25605601799444]
Test Case: 389 | Input/Output: [[-69.19691904783527 0] -69.19691904783527]
Test Case: 390 | Input/Output: [[36.59589997391768 92] 128.59589997391768]
Test Case: 391 | Input/Output: [[18.55946422423267 -59] -40.44053577576733]
Test Case: 392 | Input/Output: [[20.450028004190983 -10] 10.450028004190983]
Test Case: 393 | Input/Output: [[-34.271601983095024 -94] -128.27160198309502]
Test Case: 394 | Input/Output: [[-57.300541888660916 -8] -65.30054188866092]
Test Case: 395 | Input/Output: [[36.73831234404983 -19] 17.73831234404983]
Test Case: 396 | Input/Output: [[75.43245383502804 -70] 5.432453835028042]
Test Case: 397 | Input/Output: [[16.411511071424087 62] 78.41151107142409]
Test Case: 398 | Input/Output: [[76.09109041186173 64] 140.09109041186173]
Test Case: 399 | Input/Output: [[81.03067208248572 -92] -10.969327917514278]
Test Case: 400 | Input/Output: [[-63.08075174721881 -97] -160.0807517472188]
Test Case: 401 | Input/Output: [[1.776436328085822 -33] -31.223563671914178]
Test Case: 402 | Input/Output: [[-88.94393370989515 17] -71.94393370989515]
Test Case: 403 | Input/Output: [[10.949679133935163 -51] -40.05032086606484]
Test Case: 404 | Input/Output: [[-0.9455051999439235 22] 21.054494800056077]
Test Case: 405 | Input/Output: [[-19.245162258343697 7] -12.245162258343697]
Test Case: 406 | Input/Output: [[-58.791409065174726 -18] -76.79140906517472]
Test Case: 407 | Input/Output: [[98.43831544099169 -78] 20.438315440991687]
Test Case: 408 | Input/Output: [[78.64626060668468 1] 79.64626060668468]
Test Case: 409 | Input/Output: [[-55.612424658310154 6] -49.612424658310154]
Test Case: 410 | Input/Output: [[-7.828544604409942 11] 3.1714553955900584]
Test Case: 411 | Input/Output: [[-69.56770708820684 37] -32.567707088206845]
Test Case: 412 | Input/Output: [[45.927057186646834 -81] -35.072942813353166]
Test Case: 413 | Input/Output: [[-32.143854937726445 -88] -120.14385493772645]
Test Case: 414 | Input/Output: [[-48.615563362054374 90] 41.384436637945626]
Test Case: 415 | Input/Output: [[-51.419214866959415 -91] -142.4192148669594]
Test Case: 416 | Input/Output: [[24.433146711325122 -33] -8.566853288674878]
Test Case: 417 | Input/Output: [[-15.464310394729111 -21] -36.46431039472911]
Test Case: 418 | Input/Output: [[-70.95245417648084 -38] -108.95245417648084]
Test Case: 419 | Input/Output: [[-36.836594044360524 -49] -85.83659404436052]
Test Case: 420 | Input/Output: [[-54.430575397163736 37] -17.430575397163736]
Test Case: 421 | Input/Output: [[40.10520171940769 -55] -14.894798280592312]
Test Case: 422 | Input/Output: [[91.33663377549638 -87] 4.336633775496381]
Test Case: 423 | Input/Output: [[-0.5408423872719226 -76] -76.54084238727192]
Test Case: 424 | Input/Output: [[30.289030218131415 -72] -41.710969781868585]
Test Case: 425 | Input/Output: [[-79.92544139801674 52] -27.925441398016744]
Test Case: 426 | Input/Output: [[14.204898756529943 97] 111.20489875652994]
Test Case: 427 | Input/Output: [[25.716843505023235 -91] -65.28315649497677]
Test Case: 428 | Input/Output: [[45.00278549119082 21] 66.00278549119082]
Test Case: 429 | Input/Output: [[-18.583406557820027 3] -15.583406557820027]
Test Case: 430 | Input/Output: [[-31.072662207004086 38] 6.927337792995914]
Test Case: 431 | Input/Output: [[50.377995821813954 -60] -9.622004178186046]
Test Case: 432 | Input/Output: [[-46.64937284470039 -96] -142.6493728447004]
Test Case: 433 | Input/Output: [[-98.83389264136446 -49] -147.83389264136446]
Test Case: 434 | Input/Output: [[-19.7478331631839 -37] -56.7478331631839]
Test Case: 435 | Input/Output: [[26.615008384307814 77] 103.61500838430781]
Test Case: 436 | Input/Output: [[93.25313966748936 90] 183.25313966748936]
Test Case: 437 | Input/Output: [[31.933248604436926 0] 31.933248604436926]
Test Case: 438 | Input/Output: [[-65.96333480292482 94] 28.03666519707518]
Test Case: 439 | Input/Output: [[77.50370136634263 19] 96.50370136634263]
Test Case: 440 | Input/Output: [[-84.43832099537556 51] -33.43832099537556]
Test Case: 441 | Input/Output: [[-31.065734313670518 -50] -81.06573431367052]
Test Case: 442 | Input/Output: [[29.620798384580127 30] 59.62079838458013]
Test Case: 443 | Input/Output: [[7.75337471975044 51] 58.75337471975044]
Test Case: 444 | Input/Output: [[-75.00768678821332 -25] -100.00768678821332]
Test Case: 445 | Input/Output: [[89.34198099379017 -12] 77.34198099379017]
Test Case: 446 | Input/Output: [[51.47284472346175 -94] -42.52715527653825]
Test Case: 447 | Input/Output: [[-44.354561208152134 43] -1.354561208152134]
Test Case: 448 | Input/Output: [[55.28590055120074 -69] -13.71409944879926]
Test Case: 449 | Input/Output: [[9.428478731479558 -96] -86.57152126852044]
Test Case: 450 | Input/Output: [[-93.51366075838689 -20] -113.51366075838689]
Test Case: 451 | Input/Output: [[-93.8169796010704 -69] -162.8169796010704]
Test Case: 452 | Input/Output: [[83.28173260357158 57] 140.28173260357158]
Test Case: 453 | Input/Output: [[76.07826586390553 58] 134.07826586390553]
Test Case: 454 | Input/Output: [[4.068690449658845 2] 6.068690449658845]
Test Case: 455 | Input/Output: [[-3.1334628656600785 -15] -18.13346286566008]
Test Case: 456 | Input/Output: [[84.21105011113255 39] 123.21105011113255]
Test Case: 457 | Input/Output: [[-67.95397830652736 92] 24.04602169347264]
Test Case: 458 | Input/Output: [[35.878609372121645 -55] -19.121390627878355]
Test Case: 459 | Input/Output: [[64.53262565832426 -90] -25.467374341675736]
Test Case: 460 | Input/Output: [[23.16968897273462 -8] 15.169688972734619]
Test Case: 461 | Input/Output: [[-96.69994513555945 77] -19.699945135559446]
Test Case: 462 | Input/Output: [[13.130125105638086 23] 36.130125105638086]
Test Case: 463 | Input/Output: [[20.70180409365598 -67] -46.29819590634402]
Test Case: 464 | Input/Output: [[55.094689076971235 24] 79.09468907697124]
Test Case: 465 | Input/Output: [[-89.53704270920615 34] -55.53704270920615]
Test Case: 466 | Input/Output: [[-57.68800654530328 -96] -153.68800654530327]
Test Case: 467 | Input/Output: [[39.21244783797758 47] 86.21244783797758]
Test Case: 468 | Input/Output: [[-25.615254556368242 -16] -41.61525455636824]
Test Case: 469 | Input/Output: [[-28.57645914397702 86] 57.42354085602298]
Test Case: 470 | Input/Output: [[-18.96941748269076 61] 42.03058251730924]
Test Case: 471 | Input/Output: [[-0.7860246926679508 -66] -66.78602469266795]
Test Case: 472 | Input/Output: [[-64.10672414681017 -44] -108.10672414681017]
Test Case: 473 | Input/Output: [[-71.7680366924329 34] -37.7680366924329]
Test Case: 474 | Input/Output: [[81.27885993071033 93] 174.27885993071033]
Test Case: 475 | Input/Output: [[-7.189034086264854 30] 22.810965913735146]
Test Case: 476 | Input/Output: [[62.55342303411368 28] 90.55342303411368]
Test Case: 477 | Input/Output: [[20.648619935150663 -64] -43.35138006484934]
Test Case: 478 | Input/Output: [[22.548262849689095 37] 59.548262849689095]
Test Case: 479 | Input/Output: [[-18.678330411594033 -41] -59.67833041159403]
Test Case: 480 | Input/Output: [[-43.83662203060812 -10] -53.83662203060812]
Test Case: 481 | Input/Output: [[23.999665361089242 -25] -1.0003346389107577]
Test Case: 482 | Input/Output: [[7.96651695973074 53] 60.96651695973074]
Test Case: 483 | Input/Output: [[-4.703828542185562 -76] -80.70382854218556]
Test Case: 484 | Input/Output: [[87.21739887387255 -79] 8.217398873872554]
Test Case: 485 | Input/Output: [[25.86546853385856 -94] -68.13453146614144]
Test Case: 486 | Input/Output: [[-20.761620669381628 53] 32.23837933061837]
Test Case: 487 | Input/Output: [[-43.46436698469165 35] -8.464366984691651]
Test Case: 488 | Input/Output: [[-64.00591121346343 18] -46.005911213463435]
Test Case: 489 | Input/Output: [[-74.82954341584622 -18] -92.82954341584622]
Test Case: 490 | Input/Output: [[-79.15704432082885 7] -72.15704432082885]
Test Case: 491 | Input/Output: [[98.6881825680907 20] 118.6881825680907]
Test Case: 492 | Input/Output: [[-39.86999126661224 -22] -61.86999126661224]
Test Case: 493 | Input/Output: [[-52.33927642469094 58] 5.6607235753090634]
Test Case: 494 | Input/Output: [[99.90924147609348 13] 112.90924147609348]
Test Case: 495 | Input/Output: [[1.6697815230875506 76] 77.66978152308755]
Test Case: 496 | Input/Output: [[-85.17379805758387 39] -46.173798057583866]
Test Case: 497 | Input/Output: [[-23.580320953192953 58] 34.41967904680705]
Test Case: 498 | Input/Output: [[14.80303700977376 53] 67.80303700977376]
Test Case: 499 | Input/Output: [[-81.30074385874788 -49] -130.30074385874786]
Test Case: 500 | Input/Output: [[12.58297128196422 71] 83.58297128196422]
Test Case: 501 | Input/Output: [[40.44193078357793 -78] -37.55806921642207]
Test Case: 502 | Input/Output: [[-32.25574314714589 -88] -120.25574314714589]
Test Case: 503 | Input/Output: [[-16.97428972387918 42] 25.02571027612082]
Test Case: 504 | Input/Output: [[92.73854987179729 44] 136.7385498717973]
Test Case: 505 | Input/Output: [[40.020743291168486 -27] 13.020743291168486]
Test Case: 506 | Input/Output: [[43.52257752727857 -8] 35.52257752727857]
Test Case: 507 | Input/Output: [[29.081164874778665 13] 42.081164874778665]
Test Case: 508 | Input/Output: [[-81.01379953229943 33] -48.01379953229943]
Test Case: 509 | Input/Output: [[50.85036895064212 -31] 19.85036895064212]
Test Case: 510 | Input/Output: [[-2.5701867876390025 56] 53.429813212361]
Test Case: 511 | Input/Output: [[-20.839378508910173 25] 4.160621491089827]
Test Case: 512 | Input/Output: [[26.789059143932747 -7] 19.789059143932747]
Test Case: 513 | Input/Output: [[37.8234035775923 26] 63.8234035775923]
Test Case: 514 | Input/Output: [[-76.79136224981434 -80] -156.79136224981434]
Test Case: 515 | Input/Output: [[-0.32003898491836935 66] 65.67996101508163]
Test Case: 516 | Input/Output: [[-5.880072224053933 0] -5.880072224053933]
Test Case: 517 | Input/Output: [[-30.588752220358344 10] -20.588752220358344]
Test Case: 518 | Input/Output: [[-72.08093908364023 41] -31.08093908364023]
Test Case: 519 | Input/Output: [[-13.911642573205455 -42] -55.911642573205455]
Test Case: 520 | Input/Output: [[-11.972601620016604 45] 33.027398379983396]
Test Case: 521 | Input/Output: [[-96.37919032646106 -67] -163.37919032646107]
Test Case: 522 | Input/Output: [[61.19704766313305 -68] -6.8029523368669516]
Test Case: 523 | Input/Output: [[20.101803729662635 14] 34.101803729662635]
Test Case: 524 | Input/Output: [[80.94430281000857 91] 171.94430281000857]
Test Case: 525 | Input/Output: [[-77.62884480645607 -89] -166.62884480645607]
Test Case: 526 | Input/Output: [[19.25840614730771 26] 45.25840614730771]
Test Case: 527 | Input/Output: [[87.29703447802325 8] 95.29703447802325]
Test Case: 528 | Input/Output: [[-60.41595613126931 -90] -150.4159561312693]
Test Case: 529 | Input/Output: [[76.67741417404156 71] 147.67741417404156]
Test Case: 530 | Input/Output: [[-39.51061960316664 -43] -82.51061960316665]
Test Case: 531 | Input/Output: [[-98.89742780202644 86] -12.897427802026442]
Test Case: 532 | Input/Output: [[-55.82116980579235 -40] -95.82116980579235]
Test Case: 533 | Input/Output: [[87.2700347621662 -15] 72.2700347621662]
Test Case: 534 | Input/Output: [[57.153134879330366 -37] 20.153134879330366]
Test Case: 535 | Input/Output: [[-16.519370248722225 -58] -74.51937024872223]
Test Case: 536 | Input/Output: [[-15.527405605147877 -35] -50.52740560514788]
Test Case: 537 | Input/Output: [[77.48258034704975 -24] 53.48258034704975]
Test Case: 538 | Input/Output: [[-27.923750581285162 39] 11.076249418714838]
Test Case: 539 | Input/Output: [[90.80798071869475 92] 182.80798071869475]
Test Case: 540 | Input/Output: [[35.30587313633197 -49] -13.694126863668032]
Test Case: 541 | Input/Output: [[91.98869810156981 55] 146.9886981015698]
Test Case: 542 | Input/Output: [[65.23258752268245 66] 131.23258752268245]
Test Case: 543 | Input/Output: [[10.96084050273727 3] 13.96084050273727]
Test Case: 544 | Input/Output: [[-40.13500285902039 -55] -95.13500285902039]
Test Case: 545 | Input/Output: [[94.05411690012363 40] 134.05411690012363]
Test Case: 546 | Input/Output: [[34.3101611042994 -14] 20.310161104299397]
Test Case: 547 | Input/Output: [[46.73010484716332 48] 94.73010484716332]
Test Case: 548 | Input/Output: [[-95.68767250348591 -78] -173.6876725034859]
Test Case: 549 | Input/Output: [[59.43409563950931 3] 62.43409563950931]
Test Case: 550 | Input/Output: [[61.97426214339242 -86] -24.025737856607577]
Test Case: 551 | Input/Output: [[67.97693309639004 -88] -20.02306690360996]
Test Case: 552 | Input/Output: [[-18.864019045146478 13] -5.8640190451464775]
Test Case: 553 | Input/Output: [[7.489097600367629 82] 89.48909760036763]
Test Case: 554 | Input/Output: [[-86.35787233214502 67] -19.35787233214502]
Test Case: 555 | Input/Output: [[81.59342960898564 -8] 73.59342960898564]
Test Case: 556 | Input/Output: [[-53.452523998801894 -95] -148.4525239988019]
Test Case: 557 | Input/Output: [[71.57949741080961 4] 75.57949741080961]
Test Case: 558 | Input/Output: [[-25.385815037842278 -4] -29.385815037842278]
Test Case: 559 | Input/Output: [[33.38075322729853 -10] 23.380753227298527]
Test Case: 560 | Input/Output: [[2.113792627378544 -83] -80.88620737262146]
Test Case: 561 | Input/Output: [[29.617926552033737 73] 102.61792655203374]
Test Case: 562 | Input/Output: [[87.40625729389791 57] 144.4062572938979]
Test Case: 563 | Input/Output: [[-48.373115659324654 -69] -117.37311565932465]
Test Case: 564 | Input/Output: [[3.513462406593675 59] 62.513462406593675]
Test Case: 565 | Input/Output: [[-62.71637290441798 -94] -156.716372904418]
Test Case: 566 | Input/Output: [[12.924563591855815 -74] -61.075436408144185]
Test Case: 567 | Input/Output: [[-37.216217145575655 81] 43.783782854424345]
Test Case: 568 | Input/Output: [[-66.65742926131 -12] -78.65742926131]
Test Case: 569 | Input/Output: [[-76.18810524365635 -47] -123.18810524365635]
Test Case: 570 | Input/Output: [[-98.05561768901963 52] -46.05561768901963]
Test Case: 571 | Input/Output: [[-37.768794748293686 2] -35.768794748293686]
Test Case: 572 | Input/Output: [[-15.554395702888968 50] 34.44560429711103]
Test Case: 573 | Input/Output: [[-17.782084886808704 82] 64.2179151131913]
Test Case: 574 | Input/Output: [[-47.92515466990244 -64] -111.92515466990244]
Test Case: 575 | Input/Output: [[95.34213565856783 -78] 17.342135658567827]
Test Case: 576 | Input/Output: [[-70.75953114483902 53] -17.759531144839016]
Test Case: 577 | Input/Output: [[-58.17861518943739 -72] -130.17861518943738]
Test Case: 578 | Input/Output: [[-4.937990470822257 -19] -23.937990470822257]
Test Case: 579 | Input/Output: [[-59.439351288155876 -37] -96.43935128815588]
Test Case: 580 | Input/Output: [[-19.367630937426085 -56] -75.36763093742609]
Test Case: 581 | Input/Output: [[-45.998685800748106 69] 23.001314199251894]
Test Case: 582 | Input/Output: [[-46.31377558270173 48] 1.6862244172982699]
Test Case: 583 | Input/Output: [[84.04636545515336 38] 122.04636545515336]
Test Case: 584 | Input/Output: [[11.088024417630876 -32] -20.911975582369124]
Test Case: 585 | Input/Output: [[-6.246885391423547 15] 8.753114608576453]
Test Case: 586 | Input/Output: [[25.090264111725077 77] 102.09026411172508]
Test Case: 587 | Input/Output: [[15.348734393017608 -94] -78.65126560698239]
Test Case: 588 | Input/Output: [[-14.696835327386722 -6] -20.696835327386722]
Test Case: 589 | Input/Output: [[85.87797808732384 33] 118.87797808732384]
Test Case: 590 | Input/Output: [[72.70331534017544 -43] 29.703315340175436]
Test Case: 591 | Input/Output: [[-78.98497647805038 65] -13.984976478050385]
Test Case: 592 | Input/Output: [[20.947881121408997 84] 104.947881121409]
Test Case: 593 | Input/Output: [[-11.18640217879026 25] 13.81359782120974]
Test Case: 594 | Input/Output: [[-80.2295133907566 -43] -123.2295133907566]
Test Case: 595 | Input/Output: [[25.47531232384435 39] 64.47531232384435]
Test Case: 596 | Input/Output: [[5.395467709721899 97] 102.3954677097219]
Test Case: 597 | Input/Output: [[77.30778689724943 72] 149.30778689724943]
Test Case: 598 | Input/Output: [[-95.63017456189836 -52] -147.63017456189834]
Test Case: 599 | Input/Output: [[-64.01900848119493 -83] -147.01900848119493]
Test Case: 600 | Input/Output: [[-97.01340198319596 -98] -195.01340198319596]
Test Case: 601 | Input/Output: [[70.78634617344522 -68] 2.7863461734452244]
Test Case: 602 | Input/Output: [[84.02928353003122 -36] 48.02928353003122]
Test Case: 603 | Input/Output: [[-28.370001984639586 -26] -54.370001984639586]
Test Case: 604 | Input/Output: [[-55.646654698242685 -74] -129.64665469824268]
Test Case: 605 | Input/Output: [[70.37786374881762 9] 79.37786374881762]
Test Case: 606 | Input/Output: [[46.30018294633675 43] 89.30018294633675]
Test Case: 607 | Input/Output: [[27.47742123591199 60] 87.47742123591199]
Test Case: 608 | Input/Output: [[-5.142576838681407 -99] -104.1425768386814]
Test Case: 609 | Input/Output: [[-95.55237002541364 -24] -119.55237002541364]
Test Case: 610 | Input/Output: [[-78.95604760835515 1] -77.95604760835515]
Test Case: 611 | Input/Output: [[-50.55641829630599 -13] -63.55641829630599]
Test Case: 612 | Input/Output: [[62.133096999951675 -24] 38.133096999951675]
Test Case: 613 | Input/Output: [[-66.48904935124912 -82] -148.48904935124912]
Test Case: 614 | Input/Output: [[-24.420500225798534 55] 30.579499774201466]
Test Case: 615 | Input/Output: [[47.68455550909633 -50] -2.3154444909036727]
Test Case: 616 | Input/Output: [[-77.45822491759455 -7] -84.45822491759455]
Test Case: 617 | Input/Output: [[-27.213580858602924 -85] -112.21358085860292]
Test Case: 618 | Input/Output: [[58.63451083927342 70] 128.63451083927342]
Test Case: 619 | Input/Output: [[59.82241760874217 -49] 10.822417608742171]
Test Case: 620 | Input/Output: [[-34.45734799270332 16] -18.45734799270332]
Test Case: 621 | Input/Output: [[78.63910445788159 -95] -16.360895542118413]
Test Case: 622 | Input/Output: [[97.32746773531491 65] 162.3274677353149]
Test Case: 623 | Input/Output: [[10.33933026738751 -83] -72.66066973261249]
Test Case: 624 | Input/Output: [[27.39818701084586 49] 76.39818701084586]
Test Case: 625 | Input/Output: [[21.725350367800118 -33] -11.274649632199882]
Test Case: 626 | Input/Output: [[72.19121260522624 -100] -27.80878739477376]
Test Case: 627 | Input/Output: [[83.050375606616 75] 158.050375606616]
Test Case: 628 | Input/Output: [[-61.44770009749574 33] -28.44770009749574]
Test Case: 629 | Input/Output: [[-29.22312409776822 34] 4.7768759022317795]
Test Case: 630 | Input/Output: [[-7.213325513873031 -59] -66.21332551387303]
Test Case: 631 | Input/Output: [[-14.993195141744735 -80] -94.99319514174474]
Test Case: 632 | Input/Output: [[45.69570272108655 -15] 30.695702721086548]
Test Case: 633 | Input/Output: [[57.38772634259681 9] 66.3877263425968]
Test Case: 634 | Input/Output: [[-11.275547938617564 94] 82.72445206138244]
Test Case: 635 | Input/Output: [[87.91928900347207 -36] 51.91928900347207]
Test Case: 636 | Input/Output: [[-22.661353218732813 -2] -24.661353218732813]
Test Case: 637 | Input/Output: [[67.40157819676799 -26] 41.401578196767986]
Test Case: 638 | Input/Output: [[18.853606454210393 -6] 12.853606454210393]
Test Case: 639 | Input/Output: [[90.49088362124957 -43] 47.490883621249566]
Test Case: 640 | Input/Output: [[-14.604284309229769 -37] -51.60428430922977]
Test Case: 641 | Input/Output: [[-49.97807579487144 91] 41.02192420512856]
Test Case: 642 | Input/Output: [[-44.88346146807909 45] 0.11653853192090935]
Test Case: 643 | Input/Output: [[-65.20306286449475 73] 7.796937135505246]
Test Case: 644 | Input/Output: [[31.21303059208978 46] 77.21303059208978]
Test Case: 645 | Input/Output: [[-65.22328931202989 15] -50.22328931202989]
Test Case: 646 | Input/Output: [[-81.60987426952744 82] 0.3901257304725618]
Test Case: 647 | Input/Output: [[-97.43879260935118 -81] -178.4387926093512]
Test Case: 648 | Input/Output: [[13.64207377332687 0] 13.64207377332687]
Test Case: 649 | Input/Output: [[99.11138246369669 -95] 4.111382463696685]
Test Case: 650 | Input/Output: [[54.759624378944096 -22] 32.759624378944096]
Test Case: 651 | Input/Output: [[-56.19052597352485 -31] -87.19052597352484]
Test Case: 652 | Input/Output: [[20.26503211489083 96] 116.26503211489083]
Test Case: 653 | Input/Output: [[-74.51971007425131 63] -11.519710074251307]
Test Case: 654 | Input/Output: [[-77.7993002055035 66] -11.7993002055035]
Test Case: 655 | Input/Output: [[-32.25199010809219 -21] -53.25199010809219]
Test Case: 656 | Input/Output: [[-96.80254583207861 21] -75.80254583207861]
Test Case: 657 | Input/Output: [[88.26894286894603 87] 175.26894286894603]
Test Case: 658 | Input/Output: [[72.46438191545946 25] 97.46438191545946]
Test Case: 659 | Input/Output: [[-86.91646565925353 10] -76.91646565925353]
Test Case: 660 | Input/Output: [[16.350435550539103 14] 30.350435550539103]
Test Case: 661 | Input/Output: [[-61.045239269832074 68] 6.954760730167926]
Test Case: 662 | Input/Output: [[-23.453169479797808 88] 64.54683052020219]
Test Case: 663 | Input/Output: [[21.948235189393444 25] 46.94823518939344]
Test Case: 664 | Input/Output: [[99.87352481117608 -25] 74.87352481117608]
Test Case: 665 | Input/Output: [[24.601712710832572 59] 83.60171271083257]
Test Case: 666 | Input/Output: [[-98.96828065399035 73] -25.968280653990348]
Test Case: 667 | Input/Output: [[12.745016239572763 92] 104.74501623957276]
Test Case: 668 | Input/Output: [[-17.872187086496226 -9] -26.872187086496226]
Test Case: 669 | Input/Output: [[-87.08196405202257 80] -7.08196405202257]
Test Case: 670 | Input/Output: [[-63.54411949624996 1] -62.54411949624996]
Test Case: 671 | Input/Output: [[-17.18796136115357 46] 28.81203863884643]
Test Case: 672 | Input/Output: [[-41.341470855797866 -92] -133.34147085579787]
Test Case: 673 | Input/Output: [[-33.04199735550344 66] 32.95800264449656]
Test Case: 674 | Input/Output: [[93.61491292265126 -46] 47.61491292265126]
Test Case: 675 | Input/Output: [[-24.90740428480389 -22] -46.90740428480389]
Test Case: 676 | Input/Output: [[-63.3188868783827 55] -8.318886878382699]
Test Case: 677 | Input/Output: [[61.292627380206625 -42] 19.292627380206625]
Test Case: 678 | Input/Output: [[-44.51913751621728 2] -42.51913751621728]
Test Case: 679 | Input/Output: [[-30.601884289852293 49] 18.398115710147707]
Test Case: 680 | Input/Output: [[67.75407341499945 14] 81.75407341499945]
Test Case: 681 | Input/Output: [[17.781435392862036 -28] -10.218564607137964]
Test Case: 682 | Input/Output: [[59.864081343456235 78] 137.86408134345623]
Test Case: 683 | Input/Output: [[-84.4163854877076 19] -65.4163854877076]
Test Case: 684 | Input/Output: [[88.18855869540658 44] 132.18855869540658]
Test Case: 685 | Input/Output: [[-42.087897228238205 56] 13.912102771761795]
Test Case: 686 | Input/Output: [[31.651294271036477 83] 114.65129427103648]
Test Case: 687 | Input/Output: [[38.42785189429824 17] 55.42785189429824]
Test Case: 688 | Input/Output: [[6.689401056846947 -33] -26.310598943153053]
Test Case: 689 | Input/Output: [[-88.94454768386966 -94] -182.94454768386964]
Test Case: 690 | Input/Output: [[-93.20227640647339 -64] -157.2022764064734]
Test Case: 691 | Input/Output: [[41.836429304333876 10] 51.836429304333876]
Test Case: 692 | Input/Output: [[89.43569663588252 -83] 6.435696635882522]
Test Case: 693 | Input/Output: [[34.4116307981906 90] 124.4116307981906]
Test Case: 694 | Input/Output: [[-82.73278447899159 9] -73.73278447899159]
Test Case: 695 | Input/Output: [[31.636766639661687 30] 61.63676663966169]
Test Case: 696 | Input/Output: [[40.675019534997375 59] 99.67501953499738]
Test Case: 697 | Input/Output: [[-91.69749137235657 28] -63.697491372356566]
Test Case: 698 | Input/Output: [[-6.456990073952909 -88] -94.45699007395291]
Test Case: 699 | Input/Output: [[-2.4135111752545697 -86] -88.41351117525457]
Test Case: 700 | Input/Output: [[-86.3783479855607 26] -60.378347985560694]
Test Case: 701 | Input/Output: [[-0.533505061210235 7] 6.466494938789765]
Test Case: 702 | Input/Output: [[62.24303021614713 -60] 2.243030216147133]
Test Case: 703 | Input/Output: [[-30.870921694893454 75] 44.129078305106546]
Test Case: 704 | Input/Output: [[-53.65368111897124 -62] -115.65368111897124]
Test Case: 705 | Input/Output: [[-85.29484644514062 72] -13.294846445140621]
Test Case: 706 | Input/Output: [[27.646437574617224 -66] -38.353562425382776]
Test Case: 707 | Input/Output: [[69.60649472506256 -66] 3.6064947250625607]
Test Case: 708 | Input/Output: [[39.149303457405296 18] 57.149303457405296]
Test Case: 709 | Input/Output: [[-9.5402463964396 98] 88.4597536035604]
Test Case: 710 | Input/Output: [[1.1923440290413367 -47] -45.80765597095866]
Test Case: 711 | Input/Output: [[14.539311018305725 -94] -79.46068898169428]
Test Case: 712 | Input/Output: [[-80.43213189755885 -79] -159.43213189755886]
Test Case: 713 | Input/Output: [[-74.56940044839286 -62] -136.56940044839286]
Test Case: 714 | Input/Output: [[-13.822085664603946 56] 42.17791433539605]
Test Case: 715 | Input/Output: [[-58.36387657111284 70] 11.63612342888716]
Test Case: 716 | Input/Output: [[40.748284832748226 -67] -26.251715167251774]
Test Case: 717 | Input/Output: [[67.44165848398364 39] 106.44165848398364]
Test Case: 718 | Input/Output: [[21.159196981499377 -19] 2.1591969814993774]
Test Case: 719 | Input/Output: [[-7.014899311156512 82] 74.98510068884349]
Test Case: 720 | Input/Output: [[36.87256980048264 2] 38.87256980048264]
Test Case: 721 | Input/Output: [[-11.310286360387309 -99] -110.31028636038731]
Test Case: 722 | Input/Output: [[42.73185239904237 -31] 11.731852399042367]
Test Case: 723 | Input/Output: [[-10.756255484785314 44] 33.243744515214686]
Test Case: 724 | Input/Output: [[69.24408432363623 -66] 3.24408432363623]
Test Case: 725 | Input/Output: [[-8.724660851316429 -69] -77.72466085131643]
Test Case: 726 | Input/Output: [[-24.813629571342943 70] 45.18637042865706]
Test Case: 727 | Input/Output: [[-10.000580575543054 -61] -71.00058057554305]
Test Case: 728 | Input/Output: [[-36.206055723001725 -67] -103.20605572300173]
Test Case: 729 | Input/Output: [[-36.56812478427474 91] 54.43187521572526]
Test Case: 730 | Input/Output: [[-7.362212666815495 -4] -11.362212666815495]
Test Case: 731 | Input/Output: [[-0.8593317022483689 77] 76.14066829775163]
Test Case: 732 | Input/Output: [[44.7999608282864 -59] -14.200039171713598]
Test Case: 733 | Input/Output: [[-11.578484753072459 2] -9.578484753072459]
Test Case: 734 | Input/Output: [[64.22529561818962 -54] 10.22529561818962]
Test Case: 735 | Input/Output: [[26.340716447979688 80] 106.34071644797969]
Test Case: 736 | Input/Output: [[-35.47707786183658 38] 2.5229221381634233]
Test Case: 737 | Input/Output: [[47.69740526242094 -1] 46.69740526242094]
Test Case: 738 | Input/Output: [[-32.77111744397578 -38] -70.77111744397578]
Test Case: 739 | Input/Output: [[-83.07552294268798 -44] -127.07552294268798]
Test Case: 740 | Input/Output: [[-93.41065955570575 46] -47.41065955570575]
Test Case: 741 | Input/Output: [[1.2050944954454081 6] 7.205094495445408]
Test Case: 742 | Input/Output: [[-59.28867196211465 34] -25.28867196211465]
Test Case: 743 | Input/Output: [[-35.35026167791899 -3] -38.35026167791899]
Test Case: 744 | Input/Output: [[15.190325410706933 -79] -63.80967458929307]
Test Case: 745 | Input/Output: [[-13.266617815152102 -6] -19.266617815152102]
Test Case: 746 | Input/Output: [[95.26561113757464 44] 139.26561113757464]
Test Case: 747 | Input/Output: [[-64.91773865501524 -83] -147.91773865501523]
Test Case: 748 | Input/Output: [[-64.1331169037349 -64] -128.1331169037349]
Test Case: 749 | Input/Output: [[-86.60160018661179 -64] -150.6016001866118]
Test Case: 750 | Input/Output: [[-17.313657921629755 49] 31.686342078370245]
Test Case: 751 | Input/Output: [[-33.33052468444076 -5] -38.33052468444076]
Test Case: 752 | Input/Output: [[1.9449036540754463 -63] -61.055096345924554]
Test Case: 753 | Input/Output: [[-93.71156662464304 -78] -171.71156662464304]
Test Case: 754 | Input/Output: [[-84.09149389811105 98] 13.908506101888946]
Test Case: 755 | Input/Output: [[3.102366582784512 -81] -77.89763341721549]
Test Case: 756 | Input/Output: [[-37.292521914984064 49] 11.707478085015936]
Test Case: 757 | Input/Output: [[-80.67072825539884 68] -12.670728255398842]
Test Case: 758 | Input/Output: [[53.646911422372625 36] 89.64691142237263]
Test Case: 759 | Input/Output: [[70.48182106554415 19] 89.48182106554415]
Test Case: 760 | Input/Output: [[-97.20801000785218 -94] -191.20801000785218]
Test Case: 761 | Input/Output: [[35.55757565844172 84] 119.55757565844172]
Test Case: 762 | Input/Output: [[26.73604045219524 -51] -24.26395954780476]
Test Case: 763 | Input/Output: [[-58.8046689595797 63] 4.1953310404202995]
Test Case: 764 | Input/Output: [[63.86546456731509 13] 76.86546456731509]
Test Case: 765 | Input/Output: [[-75.75555880965248 40] -35.755558809652484]
Test Case: 766 | Input/Output: [[-85.27664457914838 25] -60.27664457914838]
Test Case: 767 | Input/Output: [[-50.82942196519915 43] -7.829421965199153]
Test Case: 768 | Input/Output: [[56.8402714754514 -63] -6.159728524548598]
Test Case: 769 | Input/Output: [[-33.02137376035843 -57] -90.02137376035843]
Test Case: 770 | Input/Output: [[34.24255960622955 -8] 26.24255960622955]
Test Case: 771 | Input/Output: [[-12.0594251008514 22] 9.9405748991486]
Test Case: 772 | Input/Output: [[60.85827146359267 -64] -3.141728536407328]
Test Case: 773 | Input/Output: [[-41.02201711471017 -48] -89.02201711471017]
Test Case: 774 | Input/Output: [[-42.070698857622645 -30] -72.07069885762265]
Test Case: 775 | Input/Output: [[-72.61184886896146 38] -34.61184886896146]
Test Case: 776 | Input/Output: [[51.61429583428091 -16] 35.61429583428091]
Test Case: 777 | Input/Output: [[69.55401060737643 -75] -5.445989392623574]
Test Case: 778 | Input/Output: [[78.83953429534668 -68] 10.839534295346681]
Test Case: 779 | Input/Output: [[45.361496405288875 -26] 19.361496405288875]
Test Case: 780 | Input/Output: [[18.427227642784217 16] 34.42722764278422]
Test Case: 781 | Input/Output: [[-79.37439557923287 33] -46.37439557923287]
Test Case: 782 | Input/Output: [[-39.84452527129996 44] 4.155474728700042]
Test Case: 783 | Input/Output: [[90.83222279554212 -39] 51.83222279554212]
Test Case: 784 | Input/Output: [[95.65361268088063 76] 171.65361268088063]
Test Case: 785 | Input/Output: [[-79.9842113209565 -90] -169.9842113209565]
Test Case: 786 | Input/Output: [[25.49914954083212 81] 106.49914954083212]
Test Case: 787 | Input/Output: [[-44.55033398257642 12] -32.55033398257642]
Test Case: 788 | Input/Output: [[-91.23524124274005 7] -84.23524124274005]
Test Case: 789 | Input/Output: [[17.906833194961507 -99] -81.09316680503849]
Test Case: 790 | Input/Output: [[-38.78376233094593 64] 25.216237669054067]
Test Case: 791 | Input/Output: [[25.172559922892418 -78] -52.82744007710758]
Test Case: 792 | Input/Output: [[15.003347324357108 92] 107.00334732435711]
Test Case: 793 | Input/Output: [[-67.98699798018153 -84] -151.9869979801815]
Test Case: 794 | Input/Output: [[1.7747221222197567 -47] -45.22527787778024]
Test Case: 795 | Input/Output: [[-40.96893501420453 -65] -105.96893501420453]
Test Case: 796 | Input/Output: [[70.55482766839322 -62] 8.554827668393216]
Test Case: 797 | Input/Output: [[20.78462537973202 -37] -16.21537462026798]
Test Case: 798 | Input/Output: [[2.9979111052076206 -22] -19.00208889479238]
Test Case: 799 | Input/Output: [[53.86554646286052 -33] 20.86554646286052]
Test Case: 800 | Input/Output: [[1.5156889222616172 73] 74.51568892226162]
Test Case: 801 | Input/Output: [[83.20120146284978 -78] 5.201201462849781]
Test Case: 802 | Input/Output: [[85.3077564661113 -7] 78.3077564661113]
Test Case: 803 | Input/Output: [[-54.504067036509255 -29] -83.50406703650926]
Test Case: 804 | Input/Output: [[-74.52747958747537 -70] -144.52747958747537]
Test Case: 805 | Input/Output: [[43.60886877135539 -67] -23.39113122864461]
Test Case: 806 | Input/Output: [[-11.177062362886446 -18] -29.177062362886446]
Test Case: 807 | Input/Output: [[54.25523601585985 -51] 3.2552360158598503]
Test Case: 808 | Input/Output: [[-4.160900751815859 -64] -68.16090075181586]
Test Case: 809 | Input/Output: [[27.17563793869671 100] 127.17563793869671]
Test Case: 810 | Input/Output: [[17.54660803648504 -1] 16.54660803648504]
Test Case: 811 | Input/Output: [[-86.86134516964563 67] -19.86134516964563]
Test Case: 812 | Input/Output: [[12.77774499106738 -51] -38.22225500893262]
Test Case: 813 | Input/Output: [[77.63018403554241 8] 85.63018403554241]
Test Case: 814 | Input/Output: [[5.8625869312283925 23] 28.862586931228392]
Test Case: 815 | Input/Output: [[-27.056043963816336 81] 53.943956036183664]
Test Case: 816 | Input/Output: [[10.53438484972753 13] 23.53438484972753]
Test Case: 817 | Input/Output: [[-12.716481641559113 -64] -76.71648164155911]
Test Case: 818 | Input/Output: [[75.48323170922004 -70] 5.4832317092200356]
Test Case: 819 | Input/Output: [[85.61622989204835 26] 111.61622989204835]
Test Case: 820 | Input/Output: [[49.40608482212468 42] 91.40608482212468]
Test Case: 821 | Input/Output: [[36.8433387918368 46] 82.8433387918368]
Test Case: 822 | Input/Output: [[-92.71264212833765 65] -27.71264212833765]
Test Case: 823 | Input/Output: [[7.89528025616697 -9] -1.10471974383303]
Test Case: 824 | Input/Output: [[-34.57031947633449 8] -26.57031947633449]
Test Case: 825 | Input/Output: [[42.869208615271646 89] 131.86920861527165]
Test Case: 826 | Input/Output: [[-13.48771797594361 -76] -89.48771797594361]
Test Case: 827 | Input/Output: [[-57.49246300690258 54] -3.4924630069025824]
Test Case: 828 | Input/Output: [[59.07985261660866 -59] 0.07985261660866172]
Test Case: 829 | Input/Output: [[-2.753560099954072 36] 33.24643990004593]
Test Case: 830 | Input/Output: [[73.60130108937935 -11] 62.60130108937935]
Test Case: 831 | Input/Output: [[-36.8970501104726 -47] -83.8970501104726]
Test Case: 832 | Input/Output: [[-46.996872648055835 97] 50.003127351944165]
Test Case: 833 | Input/Output: [[70.5288164746598 -73] -2.4711835253401944]
Test Case: 834 | Input/Output: [[2.5589754575343022 38] 40.5589754575343]
Test Case: 835 | Input/Output: [[60.53976036520922 -25] 35.53976036520922]
Test Case: 836 | Input/Output: [[-23.001397962901123 -71] -94.00139796290112]
Test Case: 837 | Input/Output: [[4.686512341989783 -23] -18.313487658010217]
Test Case: 838 | Input/Output: [[47.97353342178826 -98] -50.02646657821174]
Test Case: 839 | Input/Output: [[-69.09406148255243 8] -61.09406148255243]
Test Case: 840 | Input/Output: [[-19.736831695960973 8] -11.736831695960973]
Test Case: 841 | Input/Output: [[49.87834090992098 -89] -39.12165909007902]
Test Case: 842 | Input/Output: [[61.188388566629214 -68] -6.811611433370786]
Test Case: 843 | Input/Output: [[98.39021397081319 -4] 94.39021397081319]
Test Case: 844 | Input/Output: [[-33.65216798746333 38] 4.347832012536671]
Test Case: 845 | Input/Output: [[92.99595584110173 -81] 11.995955841101733]
Test Case: 846 | Input/Output: [[82.63099218354427 -63] 19.630992183544265]
Test Case: 847 | Input/Output: [[42.60131748799881 -64] -21.398682512001187]
Test Case: 848 | Input/Output: [[-10.04251806587635 -65] -75.04251806587635]
Test Case: 849 | Input/Output: [[-29.2663779421825 95] 65.7336220578175]
Test Case: 850 | Input/Output: [[-14.418736250042642 10] -4.418736250042642]
Test Case: 851 | Input/Output: [[-51.988278644341676 69] 17.011721355658324]
Test Case: 852 | Input/Output: [[-8.846907573137756 -8] -16.846907573137756]
Test Case: 853 | Input/Output: [[80.70557196809699 15] 95.70557196809699]
Test Case: 854 | Input/Output: [[-51.77432946873726 18] -33.77432946873726]
Test Case: 855 | Input/Output: [[-48.30787460184225 74] 25.69212539815775]
Test Case: 856 | Input/Output: [[75.7064071997836 -25] 50.7064071997836]
Test Case: 857 | Input/Output: [[61.44928620337643 -95] -33.55071379662357]
Test Case: 858 | Input/Output: [[-79.50476310916665 48] -31.504763109166646]
Test Case: 859 | Input/Output: [[-43.618699881016894 72] 28.381300118983106]
Test Case: 860 | Input/Output: [[95.32995503945236 87] 182.32995503945236]
Test Case: 861 | Input/Output: [[2.5334199039689196 8] 10.53341990396892]
Test Case: 862 | Input/Output: [[11.525916915734655 10] 21.525916915734655]
Test Case: 863 | Input/Output: [[27.461263993663152 67] 94.46126399366315]
Test Case: 864 | Input/Output: [[-93.4046286530412 -61] -154.4046286530412]
Test Case: 865 | Input/Output: [[44.01853374918787 11] 55.01853374918787]
Test Case: 866 | Input/Output: [[-49.02963931657413 -88] -137.02963931657413]
Test Case: 867 | Input/Output: [[10.37049217012897 13] 23.37049217012897]
Test Case: 868 | Input/Output: [[-85.83074521289913 60] -25.83074521289913]
Test Case: 869 | Input/Output: [[57.58002150529833 -61] -3.4199784947016667]
Test Case: 870 | Input/Output: [[45.698963483831164 70] 115.69896348383116]
Test Case: 871 | Input/Output: [[-50.01906729468091 -27] -77.01906729468091]
Test Case: 872 | Input/Output: [[-95.15306577177458 -64] -159.15306577177458]
Test Case: 873 | Input/Output: [[-73.40100361148806 86] 12.598996388511935]
Test Case: 874 | Input/Output: [[89.32795319820534 57] 146.32795319820534]
Test Case: 875 | Input/Output: [[-99.53482599913563 -76] -175.53482599913565]
Test Case: 876 | Input/Output: [[9.396082370608411 76] 85.39608237060841]
Test Case: 877 | Input/Output: [[41.934225522848976 -62] -20.065774477151024]
Test Case: 878 | Input/Output: [[-74.90352941224819 95] 20.09647058775181]
Test Case: 879 | Input/Output: [[-27.388954864802344 -29] -56.38895486480234]
Test Case: 880 | Input/Output: [[72.76942053634966 19] 91.76942053634966]
Test Case: 881 | Input/Output: [[-64.47783515296604 -24] -88.47783515296604]
Test Case: 882 | Input/Output: [[-17.039250008501412 -94] -111.03925000850141]
Test Case: 883 | Input/Output: [[30.45550815893486 66] 96.45550815893486]
Test Case: 884 | Input/Output: [[98.22534273598993 -53] 45.225342735989926]
Test Case: 885 | Input/Output: [[-50.48807926145522 71] 20.51192073854478]
Test Case: 886 | Input/Output: [[-93.99030628345363 -62] -155.99030628345363]
Test Case: 887 | Input/Output: [[57.735371500352784 -62] -4.264628499647216]
Test Case: 888 | Input/Output: [[-73.42082438126158 95] 21.579175618738418]
Test Case: 889 | Input/Output: [[76.30443388417572 40] 116.30443388417572]
Test Case: 890 | Input/Output: [[-72.90674425820313 -7] -79.90674425820313]
Test Case: 891 | Input/Output: [[-70.65294163595846 -46] -116.65294163595846]
Test Case: 892 | Input/Output: [[-22.122595397559166 -31] -53.12259539755917]
Test Case: 893 | Input/Output: [[-32.49446423256221 -55] -87.49446423256221]
Test Case: 894 | Input/Output: [[-38.70356215617872 91] 52.29643784382128]
Test Case: 895 | Input/Output: [[-75.48882344780793 45] -30.48882344780793]
Test Case: 896 | Input/Output: [[-77.87865213677199 -87] -164.878652136772]
Test Case: 897 | Input/Output: [[-0.6587265356495493 -84] -84.65872653564955]
Test Case: 898 | Input/Output: [[-70.57584776769181 -90] -160.5758477676918]
Test Case: 899 | Input/Output: [[-25.61616490145282 -29] -54.61616490145282]
Test Case: 900 | Input/Output: [[-22.476039410686013 4] -18.476039410686013]
Test Case: 901 | Input/Output: [[-51.386245246359266 -38] -89.38624524635927]
Test Case: 902 | Input/Output: [[-49.32702977861352 80] 30.67297022138648]
Test Case: 903 | Input/Output: [[19.363828490425476 93] 112.36382849042548]
Test Case: 904 | Input/Output: [[79.73495046101579 21] 100.73495046101579]
Test Case: 905 | Input/Output: [[-57.837925146863924 -25] -82.83792514686392]
Test Case: 906 | Input/Output: [[7.560255304112644 60] 67.56025530411264]
Test Case: 907 | Input/Output: [[90.0953832849035 -15] 75.0953832849035]
Test Case: 908 | Input/Output: [[-39.56578586199431 -69] -108.5657858619943]
Test Case: 909 | Input/Output: [[-4.417661717376362 -84] -88.41766171737636]
Test Case: 910 | Input/Output: [[-64.38072687875977 3] -61.38072687875977]
Test Case: 911 | Input/Output: [[-39.49278007206101 -11] -50.49278007206101]
Test Case: 912 | Input/Output: [[76.54068360481503 54] 130.54068360481503]
Test Case: 913 | Input/Output: [[0.3455576565993397 25] 25.34555765659934]
Test Case: 914 | Input/Output: [[-40.543008242077775 13] -27.543008242077775]
Test Case: 915 | Input/Output: [[84.9538435293486 66] 150.9538435293486]
Test Case: 916 | Input/Output: [[-59.22330855942521 64] 4.776691440574787]
Test Case: 917 | Input/Output: [[84.94878092209083 -34] 50.94878092209083]
Test Case: 918 | Input/Output: [[-84.0018801914864 -61] -145.0018801914864]
Test Case: 919 | Input/Output: [[96.82897781519944 -28] 68.82897781519944]
Test Case: 920 | Input/Output: [[-7.869772401896327 -52] -59.86977240189633]
Test Case: 921 | Input/Output: [[55.15644859138939 -16] 39.15644859138939]
Test Case: 922 | Input/Output: [[33.39578070079591 57] 90.39578070079591]
Test Case: 923 | Input/Output: [[-87.78885752815788 -34] -121.78885752815788]
Test Case: 924 | Input/Output: [[-1.9109929306587787 60] 58.08900706934122]
Test Case: 925 | Input/Output: [[6.7368877595056915 79] 85.73688775950569]
Test Case: 926 | Input/Output: [[-35.648334468489224 25] -10.648334468489224]
Test Case: 927 | Input/Output: [[-71.52682654223497 76] 4.473173457765029]
Test Case: 928 | Input/Output: [[-23.60097538580368 8] -15.600975385803679]
Test Case: 929 | Input/Output: [[-74.48726150906728 31] -43.48726150906728]
Test Case: 930 | Input/Output: [[-49.477760815824226 60] 10.522239184175774]
Test Case: 931 | Input/Output: [[14.307944535113435 27] 41.307944535113435]
Test Case: 932 | Input/Output: [[-77.9128248579503 -52] -129.91282485795028]
Test Case: 933 | Input/Output: [[75.86677567402319 67] 142.8667756740232]
Test Case: 934 | Input/Output: [[7.913708404337271 47] 54.91370840433727]
Test Case: 935 | Input/Output: [[-85.8854082587488 21] -64.8854082587488]
Test Case: 936 | Input/Output: [[-30.14333315948234 13] -17.14333315948234]
Test Case: 937 | Input/Output: [[-27.999924861938567 79] 51.00007513806143]
Test Case: 938 | Input/Output: [[-26.14288442210872 -53] -79.14288442210872]
Test Case: 939 | Input/Output: [[79.90944817400452 42] 121.90944817400452]
Test Case: 940 | Input/Output: [[81.0234776105655 -67] 14.023477610565493]
Test Case: 941 | Input/Output: [[18.461174248578644 60] 78.46117424857864]
Test Case: 942 | Input/Output: [[9.046870666574193 55] 64.0468706665742]
Test Case: 943 | Input/Output: [[-0.5491736177583277 -68] -68.54917361775833]
Test Case: 944 | Input/Output: [[21.301077057849056 78] 99.30107705784906]
Test Case: 945 | Input/Output: [[85.78119881586505 57] 142.78119881586505]
Test Case: 946 | Input/Output: [[-38.34685133262254 -28] -66.34685133262255]
Test Case: 947 | Input/Output: [[-3.3453315098133345 28] 24.654668490186666]
Test Case: 948 | Input/Output: [[5.419932068943183 25] 30.419932068943183]
Test Case: 949 | Input/Output: [[5.623421841112574 26] 31.623421841112574]
Test Case: 950 | Input/Output: [[75.18312019823762 -12] 63.18312019823762]
Test Case: 951 | Input/Output: [[-37.184481188075516 -98] -135.18448118807552]
Test Case: 952 | Input/Output: [[-0.18878496067628703 -97] -97.18878496067629]
Test Case: 953 | Input/Output: [[-73.04749102062829 -50] -123.04749102062829]
Test Case: 954 | Input/Output: [[62.84675122558161 -51] 11.846751225581613]
Test Case: 955 | Input/Output: [[-87.89955690865625 -26] -113.89955690865625]
Test Case: 956 | Input/Output: [[-83.68769011589501 39] -44.68769011589501]
Test Case: 957 | Input/Output: [[-18.38206384907552 82] 63.61793615092448]
Test Case: 958 | Input/Output: [[-80.10663256006617 2] -78.10663256006617]
Test Case: 959 | Input/Output: [[19.546980803350465 -74] -54.453019196649535]
Test Case: 960 | Input/Output: [[-5.787295667243541 -23] -28.78729566724354]
Test Case: 961 | Input/Output: [[-3.94214521325884 -62] -65.94214521325884]
Test Case: 962 | Input/Output: [[-94.79791494198298 -32] -126.79791494198298]
Test Case: 963 | Input/Output: [[-67.83082919279977 31] -36.83082919279977]
Test Case: 964 | Input/Output: [[34.52859643929099 72] 106.528596439291]
Test Case: 965 | Input/Output: [[-2.3315897793797546 40] 37.668410220620245]
Test Case: 966 | Input/Output: [[55.85851110858607 88] 143.85851110858607]
Test Case: 967 | Input/Output: [[-52.82930745769319 51] -1.82930745769319]
Test Case: 968 | Input/Output: [[26.368363779623834 65] 91.36836377962383]
Test Case: 969 | Input/Output: [[40.8458381091921 77] 117.8458381091921]
Test Case: 970 | Input/Output: [[1.542299610846527 47] 48.54229961084653]
Test Case: 971 | Input/Output: [[-76.12660955359895 19] -57.12660955359895]
Test Case: 972 | Input/Output: [[89.9014899927428 -56] 33.901489992742796]
Test Case: 973 | Input/Output: [[-78.94982275237126 3] -75.94982275237126]
Test Case: 974 | Input/Output: [[21.66840895530187 -34] -12.33159104469813]
Test Case: 975 | Input/Output: [[-53.196343418574 94] 40.803656581426]
Test Case: 976 | Input/Output: [[62.482143379999656 46] 108.48214337999966]
Test Case: 977 | Input/Output: [[-43.32641864357021 42] -1.3264186435702072]
Test Case: 978 | Input/Output: [[-58.885090039749684 97] 38.114909960250316]
Test Case: 979 | Input/Output: [[69.44488891092197 37] 106.44488891092197]
Test Case: 980 | Input/Output: [[37.2951912576182 -85] -47.7048087423818]
Test Case: 981 | Input/Output: [[-61.91961050340993 -2] -63.91961050340993]
Test Case: 982 | Input/Output: [[-59.515297220152384 30] -29.515297220152384]
Test Case: 983 | Input/Output: [[-78.879557887354 31] -47.879557887354]
Test Case: 984 | Input/Output: [[90.16351378571852 -6] 84.16351378571852]
Test Case: 985 | Input/Output: [[-69.31803724977655 -74] -143.31803724977655]
Test Case: 986 | Input/Output: [[-62.83754563520589 -100] -162.83754563520588]
Test Case: 987 | Input/Output: [[48.257165853036526 -18] 30.257165853036526]
Test Case: 988 | Input/Output: [[80.11613990338427 -23] 57.116139903384266]
Test Case: 989 | Input/Output: [[-60.34754016431707 13] -47.34754016431707]
Test Case: 990 | Input/Output: [[89.07195360688863 83] 172.07195360688863]
Test Case: 991 | Input/Output: [[68.88227721193434 -4] 64.88227721193434]
Test Case: 992 | Input/Output: [[-13.964357506218832 -93] -106.96435750621883]
Test Case: 993 | Input/Output: [[-91.4154644872649 22] -69.4154644872649]
Test Case: 994 | Input/Output: [[-42.701522538712446 44] 1.298477461287554]
Test Case: 995 | Input/Output: [[-77.01030543920662 69] -8.010305439206618]
Test Case: 996 | Input/Output: [[52.63326946104547 61] 113.63326946104547]
Test Case: 997 | Input/Output: [[76.27405271914739 16] 92.27405271914739]
Test Case: 998 | Input/Output: [[24.833343081724095 28] 52.833343081724095]
Test Case: 999 | Input/Output: [[-24.443448358704785 -69] -93.44344835870479]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -107 -95 -119 -27 0 -52 -90 40 32 -128 78 -73 37 99 122 -49
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 53877.0
Test mean error for best: 26.93850
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -67.1635067726
Correct output: -21.9737224684 | Program output: -24.9737224684
Correct output: -139.7167633157 | Program output: -97.7167633157
Correct output: -163.0309037322 | Program output: -85.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 13.9581471611 
Correct output: -20.7358489852 | Program output: -68.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -96.0406605526
Correct output: -100.8705337643 | Program output: -93.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 30.5835963017 
Correct output: -79.3997427913 | Program output: 16.6002572087 
Correct output: -17.1940864091 | Program output: 18.8059135909 
Correct output: 72.3448758755  | Program output: 5.3448758755  
Correct output: -123.6221378256 | Program output: -39.6221378256
Correct output: 29.3095165104  | Program output: 15.3095165104 
Correct output: 26.6368843721  | Program output: -55.3631156279
Correct output: -26.0047352658 | Program output: 46.9952647342 
Correct output: 108.2416510836 | Program output: 15.2416510836 
Correct output: -12.3744056182 | Program output: 29.6255943818 
Correct output: -43.8581812945 | Program output: -76.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -5.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_min} {:instruction float_mod} {:instruction float_shove} {:instruction integer_flush} {:instruction tag_integer_46} {:instruction float_cos} {:instruction float_dup} {:instruction float_frominteger} {:instruction tagged_947} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_div} {:instruction integer_swap} {:instruction float_dec} {:instruction float_yank} {:instruction float_sub} {:instruction float_flush} {:instruction tag_integer_721} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dup} {:instruction in1} {:instruction in1} {:instruction integer_dup_items} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_max} {:instruction float_dec} {:instruction integer_mod} {:instruction print_float} {:instruction integer_inc} {:instruction float_max} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_cos} {:instruction in2} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_mod} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_flush} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_mod} {:instruction tagged_823} {:instruction integer_mult} {:instruction float_sin} {:instruction float_yank} {:instruction print_integer} {:instruction integer_swap} {:instruction float_frominteger} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_tan} {:instruction float_sub} {:instruction float_min} {:instruction float_swap} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_pop} {:instruction integer_max} {:instruction float_div} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot})
Best program: (float_dec integer_min float_mod float_shove integer_flush tag_integer_46 float_cos float_dup float_frominteger tagged_947 integer_sub integer_inc float_div integer_swap float_dec float_yank float_sub float_flush tag_integer_721 integer_fromfloat float_rot integer_mult float_dup in1 in1 integer_dup_items integer_max integer_yank integer_max float_dec integer_mod print_float integer_inc float_max integer_stackdepth integer_div float_cos in2 integer_dup_times float_cos float_mod integer_shove float_frominteger float_rot integer_dup_items integer_div float_dup_items float_cos float_dup_times integer_max float_pop integer_flush float_max integer_dup_items in1 float_frominteger float_add integer_dec float_yankdup integer_swap integer_mod float_mod tagged_823 integer_mult float_sin float_yank print_integer integer_swap float_frominteger integer_mult integer_mult float_tan float_sub float_min float_swap integer_mult float_yankdup float_swap float_pop integer_max float_div integer_rot float_dup integer_rot)
Errors: [60.0 1 3.0 1 42.0 3 78.0 3 90.0 2 74.0 2 48.0 2 72.0 12 36.0 2 7.0 3 15.0 2 68.0 2 93.0 13 96.0 13 36.0 11 67.0 2 84.0 3 14.0 2 82.0 11 73.0 11 93.0 2 42.0 12 33.0 2 82.0 3 27.0 2]
Total: 1537.0
Mean: 30.74
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 17720.3364722
Median total errors in population: 25346.0
Error averages by case: (688.4983418000019 12.397 674.3291261999981 13.141 715.6916203000022 14.102 722.8914142000019 14.075 723.985824600001 13.213 697.8209864000014 12.514 689.822751800002 13.192 685.9309708999999 13.08 696.6612930000014 13.221 701.6191997999988 13.994 689.1747385999986 12.519 686.7314527000011 12.445 694.9246277999995 13.734 697.3966385999994 13.794 682.3575727 13.604 690.4229447000023 12.583 712.0986147000011 14.054 680.552041499998 12.411 692.5967241000005 13.084 688.9543331 13.664 703.603551800002 13.161 683.695372799999 13.64 691.6753737000015 13.254 711.4272054999983 13.282 686.1867508999989 13.129)
Error minima by case: (1.359 1 0.0263 1 0.2832 3 5.0309 3 0.0383 2 0.4201 2 1.2642 2 0.0616 8 0.9221 2 1.4615 3 0.2418 2 0.0531 2 1.4164 8 1.3997 7 0.8059 8 0.852 2 24.2131 3 0.3095 2 0.3631 8 0.0047 9 8.0 2 0.6256 8 1.1418 2 2.1033 2 1.3575 2)
Average genome size in population (length): 48.364
Average program size in population (points): 49.364
Average percent parens in population: 0.044
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.334
Error (vector) diversity:			 0.354
Behavioral diversity:				 0.376
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1212350
--- Timings ---
Current time: 1529615442567 milliseconds
Total Time:           3.5 seconds
Initialization:       0.1 seconds,  3.2%
Reproduction:         0.5 seconds, 15.1%
Fitness Testing:      2.9 seconds, 81.7%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 53877.0
Test mean error for best: 26.93850
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -67.1635067726
Correct output: -21.9737224684 | Program output: -24.9737224684
Correct output: -139.7167633157 | Program output: -97.7167633157
Correct output: -163.0309037322 | Program output: -85.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 13.9581471611 
Correct output: -20.7358489852 | Program output: -68.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -96.0406605526
Correct output: -100.8705337643 | Program output: -93.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 30.5835963017 
Correct output: -79.3997427913 | Program output: 16.6002572087 
Correct output: -17.1940864091 | Program output: 18.8059135909 
Correct output: 72.3448758755  | Program output: 5.3448758755  
Correct output: -123.6221378256 | Program output: -39.6221378256
Correct output: 29.3095165104  | Program output: 15.3095165104 
Correct output: 26.6368843721  | Program output: -55.3631156279
Correct output: -26.0047352658 | Program output: 46.9952647342 
Correct output: 108.2416510836 | Program output: 15.2416510836 
Correct output: -12.3744056182 | Program output: 29.6255943818 
Correct output: -43.8581812945 | Program output: -76.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -5.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_min} {:instruction float_mod} {:instruction float_shove} {:instruction integer_flush} {:instruction tag_integer_46} {:instruction float_cos} {:instruction float_dup} {:instruction float_frominteger} {:instruction tagged_947} {:instruction integer_sub} {:instruction integer_inc} {:instruction float_div} {:instruction integer_swap} {:instruction float_dec} {:instruction float_yank} {:instruction float_sub} {:instruction print_float} {:instruction tag_integer_721} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dup} {:instruction in1} {:instruction in1} {:instruction integer_dup_items} {:instruction integer_max} {:instruction integer_yank} {:instruction integer_max} {:instruction float_dec} {:instruction integer_mod} {:instruction print_float} {:instruction integer_inc} {:instruction float_max} {:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_cos} {:instruction in2} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_mod} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_rot} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_dup_times} {:instruction integer_max} {:instruction float_pop} {:instruction integer_flush} {:instruction float_max} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_dec} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_mod} {:instruction tagged_823} {:instruction integer_mult} {:instruction float_sin} {:instruction float_yank} {:instruction print_integer} {:instruction integer_swap} {:instruction float_frominteger} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_tan} {:instruction float_sub} {:instruction float_min} {:instruction float_swap} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_pop} {:instruction integer_max} {:instruction float_div} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_rot})
Best program: (float_dec integer_min float_mod float_shove integer_flush tag_integer_46 float_cos float_dup float_frominteger tagged_947 integer_sub integer_inc float_div integer_swap float_dec float_yank float_sub print_float tag_integer_721 integer_fromfloat float_rot integer_mult float_dup in1 in1 integer_dup_items integer_max integer_yank integer_max float_dec integer_mod print_float integer_inc float_max integer_stackdepth integer_div float_cos in2 integer_dup_times float_cos float_mod integer_shove float_frominteger float_rot integer_dup_items integer_div float_dup_items float_cos float_dup_times integer_max float_pop integer_flush float_max integer_dup_items integer_stackdepth float_frominteger float_add integer_dec float_yankdup integer_swap integer_mod float_mod tagged_823 integer_mult float_sin float_yank print_integer integer_swap float_frominteger integer_mult integer_mult float_tan float_sub float_min float_swap integer_mult float_yankdup float_swap float_pop integer_max float_div integer_rot float_dup integer_rot)
Errors: [60.0 1 3.0 1 42.0 3 78.0 3 90.0 2 74.0 2 48.0 2 72.0 12 36.0 2 7.0 3 15.0 2 68.0 2 93.0 13 96.0 13 36.0 11 67.0 2 84.0 3 14.0 2 82.0 11 73.0 11 93.0 2 42.0 12 33.0 2 82.0 3 27.0 2]
Total: 1537.0
Mean: 30.74
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 6158.060975300014
Median total errors in population: 1927.5734
Error averages by case: (211.7404024999993 10.082 190.22526480000053 10.658 275.5383903999987 11.716 293.9667939000023 11.561 296.0448091999979 10.86 240.35912259999887 10.353 211.66832879999896 10.721 223.04794950000004 12.317 228.10582800000134 10.772 246.52987969999828 11.505 218.19428479999905 10.314 225.987785699999 10.304 244.01378219999944 12.733 250.0140136000005 12.771 209.08759209999974 12.331 228.704514399999 10.572 272.2297301000009 11.587 196.24569140000077 10.165 223.88967550000055 12.142 226.80198959999976 12.559 254.9979263000022 10.725 212.16603250000006 12.471 217.92582779999884 10.782 265.8787251999984 10.98 213.14363470000052 10.572)
Error minima by case: (1.359 1 0.0263 1 0.2832 3 6.9691 3 23.7897 2 0.4201 2 1.2642 2 0.0616 8 0.9221 2 2.4818 3 0.2418 2 0.0531 2 1.4164 8 1.7375 8 0.8059 8 0.852 2 25.2334 3 0.3095 2 2.3631 8 0.0047 9 15.2417 2 0.6256 8 1.1418 2 2.1033 2 1.3575 2)
Average genome size in population (length): 57.077
Average program size in population (points): 58.077
Average percent parens in population: 0.024
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.492
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.282
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2642325
--- Timings ---
Current time: 1529615447783 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.7 seconds, 40.8%
Fitness Testing:      4.4 seconds, 47.8%
Report:               0.9 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 53816.0
Test mean error for best: 26.90800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -65.1635067726
Correct output: -21.9737224684 | Program output: -22.9737224684
Correct output: -139.7167633157 | Program output: -95.7167633157
Correct output: -163.0309037322 | Program output: -83.0309037322
Correct output: 178.0383210966 | Program output: 90.0383210966 
Correct output: 87.9581471611  | Program output: 15.9581471611 
Correct output: -20.7358489852 | Program output: -66.7358489852
Correct output: -5.7428849749  | Program output: 68.2571150251 
Correct output: -60.0406605526 | Program output: -94.0406605526
Correct output: -100.8705337643 | Program output: -91.8705337643
Correct output: 67.2417878243  | Program output: 54.2417878243 
Correct output: 10.0530512024  | Program output: 80.0530512024 
Correct output: -62.4164036983 | Program output: 32.5835963017 
Correct output: -79.3997427913 | Program output: 18.6002572087 
Correct output: -17.1940864091 | Program output: 20.8059135909 
Correct output: 72.3448758755  | Program output: 7.3448758755  
Correct output: -123.6221378256 | Program output: -37.6221378256
Correct output: 29.3095165104  | Program output: 17.3095165104 
Correct output: 26.6368843721  | Program output: -53.3631156279
Correct output: -26.0047352658 | Program output: 48.9952647342 
Correct output: 108.2416510836 | Program output: 17.2416510836 
Correct output: -12.3744056182 | Program output: 31.6255943818 
Correct output: -43.8581812945 | Program output: -74.8581812945
Correct output: 129.1032673973 | Program output: 49.1032673973 
Correct output: -32.5013549448 | Program output: -3.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush integer_pop integer_yank in1 float_yankdup integer_flush print_integer float_dup_times float_min integer_dup_items float_inc 39 float_max float_sub float_min integer_dup_items float_inc 39 float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_yankdup float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_tan float_rot integer_add float_sub integer_yank float_sin tagged_893)
Errors: [58.0 2 1.0 1 44.0 3 80.0 2 88.0 3 72.0 2 46.0 2 74.0 12 34.0 2 9.0 3 13.0 2 70.0 1 95.0 12 98.0 13 38.0 12 65.0 1 86.0 3 12.0 2 80.0 11 75.0 12 91.0 2 44.0 11 31.0 2 80.0 2 29.0 1]
Total: 1532.0
Mean: 30.64
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4721.803359500013
Median total errors in population: 1545.0352000000005
Error averages by case: (183.00722409999926 7.253 135.48860610000045 7.255 196.53944579999902 8.471 211.72343170000107 8.488 212.75430299999832 7.878 174.28786119999998 7.352 177.8055801999992 7.777 193.4956513999994 12.155 182.5021597000005 7.8 175.79409509999968 8.496 156.57747140000018 7.156 195.85797009999945 7.722 194.66260400000075 12.905 192.47779869999968 12.335 160.02993660000095 11.931 161.67924919999905 7.584 198.11353080000004 8.218 140.76350080000066 7.345 191.82755089999938 11.685 188.20190260000035 12.302 185.69355150000072 7.787 166.4619496999998 12.401 173.96396349999972 7.506 192.87521899999936 8.206 153.88680239999965 7.324)
Error minima by case: (1.359 1 0.0263 1 41.0 2 5.0309 2 0.0383 2 13.9581 2 1.2642 2 0.0616 8 9.9593 2 6.0 3 7.2418 2 8.0531 1 14.4164 8 1.6003 7 0.8059 7 5.3449 1 37.6221 2 3.2162 2 3.0872 8 0.4227 8 8.0 2 0.6256 8 0.8964 2 2.1033 2 3.5014 1)
Average genome size in population (length): 51.84
Average program size in population (points): 52.84
Average percent parens in population: 0.028
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.004
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.125
Error (vector) diversity:			 0.134
Behavioral diversity:				 0.143
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3940950
--- Timings ---
Current time: 1529615451178 milliseconds
Total Time:          12.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.2 seconds, 41.9%
Fitness Testing:      5.7 seconds, 45.4%
Report:               1.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 53816.0
Test mean error for best: 26.90800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -65.1635067726
Correct output: -21.9737224684 | Program output: -22.9737224684
Correct output: -139.7167633157 | Program output: -95.7167633157
Correct output: -163.0309037322 | Program output: -83.0309037322
Correct output: 178.0383210966 | Program output: 90.0383210966 
Correct output: 87.9581471611  | Program output: 15.9581471611 
Correct output: -20.7358489852 | Program output: -66.7358489852
Correct output: -5.7428849749  | Program output: 68.2571150251 
Correct output: -60.0406605526 | Program output: -94.0406605526
Correct output: -100.8705337643 | Program output: -91.8705337643
Correct output: 67.2417878243  | Program output: 54.2417878243 
Correct output: 10.0530512024  | Program output: 80.0530512024 
Correct output: -62.4164036983 | Program output: 32.5835963017 
Correct output: -79.3997427913 | Program output: 18.6002572087 
Correct output: -17.1940864091 | Program output: 20.8059135909 
Correct output: 72.3448758755  | Program output: 7.3448758755  
Correct output: -123.6221378256 | Program output: -37.6221378256
Correct output: 29.3095165104  | Program output: 17.3095165104 
Correct output: 26.6368843721  | Program output: -53.3631156279
Correct output: -26.0047352658 | Program output: 48.9952647342 
Correct output: 108.2416510836 | Program output: 17.2416510836 
Correct output: -12.3744056182 | Program output: 31.6255943818 
Correct output: -43.8581812945 | Program output: -74.8581812945
Correct output: 129.1032673973 | Program output: 49.1032673973 
Correct output: -32.5013549448 | Program output: -3.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush integer_pop integer_yank in1 float_yankdup integer_flush print_integer float_dup_times float_min integer_dup_items float_inc 39 float_max float_sub float_min integer_dup_items float_inc 39 float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_yankdup float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_tan float_rot integer_add float_sub integer_yank float_sin tagged_893)
Errors: [58.0 2 1.0 1 44.0 3 80.0 2 88.0 3 72.0 2 46.0 2 74.0 12 34.0 2 9.0 3 13.0 2 70.0 1 95.0 12 98.0 13 38.0 12 65.0 1 86.0 3 12.0 2 80.0 11 75.0 12 91.0 2 44.0 11 31.0 2 80.0 2 29.0 1]
Total: 1532.0
Mean: 30.64
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4186.211995000002
Median total errors in population: 1538.0
Error averages by case: (164.70808589999987 3.542 114.30102280000008 3.056 154.35044849999983 4.777 183.75930510000012 4.81 190.9001581999998 4.399 170.56235779999994 3.728 154.91446089999985 3.9 175.9078257999999 12.304 146.57725359999995 3.886 124.8403666000001 4.818 126.04384480000012 3.725 173.2064403999999 3.775 191.90425150000016 13.222 191.92767449999994 12.64 141.79261800000023 11.536 162.78906929999985 3.725 186.19022839999997 4.721 120.70386160000011 3.757 182.4896380999999 11.462 175.91502750000004 12.101 186.62501710000018 3.835 148.83005499999996 12.386 143.01262120000004 3.861 181.8532483999999 4.653 133.72811399999983 3.76)
Error minima by case: (5.2801 1 1.0 1 41.0 3 77.0 2 1.0383 2 6.3599 2 18.8524 2 3.8595 8 34.0 2 6.0 3 13.0 2 9.4894 1 30.5836 9 16.6003 9 15.3107 9 5.3449 1 37.6221 3 4.3095 2 26.2055 9 24.1213 10 15.2417 2 10.491 8 31.0 2 31.8967 2 3.5014 1)
Average genome size in population (length): 51.415
Average program size in population (points): 52.415
Average percent parens in population: 0.028
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.54525
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.044
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5227850
--- Timings ---
Current time: 1529615454984 milliseconds
Total Time:          16.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.9 seconds, 42.3%
Fitness Testing:      7.3 seconds, 44.6%
Report:               2.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 53816.0
Test mean error for best: 26.90800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -65.1635067726
Correct output: -21.9737224684 | Program output: -22.9737224684
Correct output: -139.7167633157 | Program output: -95.7167633157
Correct output: -163.0309037322 | Program output: -83.0309037322
Correct output: 178.0383210966 | Program output: 90.0383210966 
Correct output: 87.9581471611  | Program output: 15.9581471611 
Correct output: -20.7358489852 | Program output: -66.7358489852
Correct output: -5.7428849749  | Program output: 68.2571150251 
Correct output: -60.0406605526 | Program output: -94.0406605526
Correct output: -100.8705337643 | Program output: -91.8705337643
Correct output: 67.2417878243  | Program output: 54.2417878243 
Correct output: 10.0530512024  | Program output: 80.0530512024 
Correct output: -62.4164036983 | Program output: 32.5835963017 
Correct output: -79.3997427913 | Program output: 18.6002572087 
Correct output: -17.1940864091 | Program output: 20.8059135909 
Correct output: 72.3448758755  | Program output: 7.3448758755  
Correct output: -123.6221378256 | Program output: -37.6221378256
Correct output: 29.3095165104  | Program output: 17.3095165104 
Correct output: 26.6368843721  | Program output: -53.3631156279
Correct output: -26.0047352658 | Program output: 48.9952647342 
Correct output: 108.2416510836 | Program output: 17.2416510836 
Correct output: -12.3744056182 | Program output: 31.6255943818 
Correct output: -43.8581812945 | Program output: -74.8581812945
Correct output: 129.1032673973 | Program output: 49.1032673973 
Correct output: -32.5013549448 | Program output: -3.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush integer_pop integer_yank in1 float_yankdup integer_flush print_integer float_dup_times float_min integer_dup_items float_inc 39 float_max float_sub float_min integer_dup_items float_inc 39 float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_yankdup float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_flush float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_tan float_rot integer_add float_sub integer_yank float_sin tagged_893)
Errors: [58.0 2 1.0 1 44.0 3 80.0 2 88.0 3 72.0 2 46.0 2 74.0 12 34.0 2 9.0 3 13.0 2 70.0 1 95.0 12 98.0 13 38.0 12 65.0 1 86.0 3 12.0 2 80.0 11 75.0 12 91.0 2 44.0 11 31.0 2 80.0 2 29.0 1]
Total: 1532.0
Mean: 30.64
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3601.8638960000003
Median total errors in population: 1537.0
Error averages by case: (142.1609962 2.39 90.28027009999998 2.241 127.5824265 4.078 160.1169901 4.039 169.50632160000004 3.277 150.8737113 3.069 131.49246999999997 3.149 152.4552872 12.284 121.1301251 3.127 95.7721318 4.1 100.93422269999999 3.085 148.8840608 3.014 171.7536745 13.227 172.74635429999995 13.14 118.13042609999998 11.392 143.51038 2.998 165.06927619999996 4.067 96.6339648 3.068 162.09084049999998 11.358 153.4152672 11.607 168.2743323 3.1 125.1491224 12.335 118.2311686 3.168 161.9016271 3.983 109.41744860000001 3.055)
Error minima by case: (4.4555 1 1.0 1 41.0 3 6.0309 2 0.9617 2 14.9581 2 4.7389 2 3.7829 9 16.7389 2 6.0 3 13.0 2 10.0531 1 8.4164 8 17.6003 9 16.1941 8 6.3449 1 38.6221 3 2.3095 2 5.4468 8 7.9953 10 16.2417 2 9.3744 8 19.7389 2 8.1033 2 4.5014 1)
Average genome size in population (length): 66.456
Average program size in population (points): 67.456
Average percent parens in population: 0.018
Minimum age in population: 4.0
Maximum age in population: 7.5
Average age in population: 5.965875
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.794
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.794
Total error diversity:				 0.044
Error (vector) diversity:			 0.047
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6891237
--- Timings ---
Current time: 1529615458965 milliseconds
Total Time:          20.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.4 seconds, 41.4%
Fitness Testing:      9.3 seconds, 45.4%
Report:               2.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 53763.0
Test mean error for best: 26.88150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 91.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 69.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 55.2417878243 
Correct output: 10.0530512024  | Program output: 81.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 49.9952647342 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 50.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_add} {:instruction float_flush} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush integer_pop integer_yank in1 float_yankdup integer_flush print_integer float_dup_times float_min integer_dup_items float_inc 39 float_max float_sub float_min integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_yankdup float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod integer_pop integer_add float_flush float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_tan float_rot integer_add float_sub integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 87.0 3 71.0 2 45.0 2 75.0 12 33.0 2 10.0 2 12.0 2 71.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 76.0 12 90.0 1 45.0 11 30.0 1 79.0 3 30.0 1]
Total: 1530.0
Mean: 30.6
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3530.0617012
Median total errors in population: 1537.0
Error averages by case: (138.4070855 2.464 88.00138759999999 2.166 124.2980832 4.039 157.1069492 3.717 166.1095975 3.24 148.9844917 3.005 127.63552399999998 3.087 149.6390086 12.007 117.19219289999998 3.069 92.2579781 4.053 97.20590540000002 3.019 146.0629733 2.842 169.11713129999998 13.01 171.34229399999998 13.171 116.4486205 11.28 142.36151769999995 2.838 162.22237429999998 4.041 94.3642254 3.007 158.5118312 11.089 150.69423569999998 11.68 166.4067496 3.052 122.40234410000001 12.102 114.2186239 3.081 158.39100580000002 3.822 108.9085707 2.89)
Error minima by case: (5.1815 1 0.0 0 40.0 2 76.0 2 9.0 2 14.9581 2 19.7358 1 0.2973 8 33.0 2 5.0 2 12.0 2 2.7811 1 31.5836 8 17.6003 10 16.1941 10 6.3449 1 38.6221 3 11.0 2 25.7102 9 24.361 10 6.0 1 11.3744 9 30.0 1 17.0 2 4.5014 1)
Average genome size in population (length): 68.796
Average program size in population (points): 69.796
Average percent parens in population: 0.015
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.5385
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.034
Error (vector) diversity:			 0.039
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 8616212
--- Timings ---
Current time: 1529615462772 milliseconds
Total Time:          24.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.8 seconds, 40.8%
Fitness Testing:     11.1 seconds, 46.2%
Report:               3.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 53763.0
Test mean error for best: 26.88150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 91.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 69.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 55.2417878243 
Correct output: 10.0530512024  | Program output: 81.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 49.9952647342 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 50.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction float_add} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_shove} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction print_integer} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dup} {:instruction tagged_893})
Best program: (float_sub float_flush integer_pop integer_yank in1 float_yankdup integer_flush print_integer float_dup_times float_min integer_dup_items float_inc 39 float_max float_sub float_min integer_dup_items float_inc 39 float_max float_sub float_add print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove float_shove integer_dup_times in2 integer_add integer_yankdup float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos print_integer integer_mod float_sub float_rot float_swap float_dup_items float_tan float_rot integer_add float_sub integer_yank float_dup tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 87.0 3 71.0 2 45.0 2 75.0 12 33.0 2 10.0 2 12.0 2 71.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 76.0 12 90.0 1 45.0 11 30.0 1 79.0 3 30.0 1]
Total: 1530.0
Mean: 30.6
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3853.3478769000003
Median total errors in population: 1532.0
Error averages by case: (149.8742119 3.095 98.1223788 2.263 137.81783629999995 4.19 170.16317239999998 3.447 177.44693810000004 3.812 162.1087615 3.144 139.2663577 3.236 163.39850449999997 11.97 128.90638289999998 3.227 106.20952410000001 4.152 109.27367050000001 3.162 159.8450709 2.617 182.57868479999996 12.662 185.404502 13.139 131.40257419999998 11.64 155.7119265 2.612 175.12314179999998 4.207 108.02076380000001 3.15 169.64183769999997 11.061 164.43063160000003 12.198 179.28615390000004 3.165 136.71627509999996 11.732 126.0848086 3.191 169.72385250000005 3.594 123.4829148 2.641)
Error minima by case: (5.1635 1 0.0 0 40.0 2 71.5372 2 83.4695 2 6.6107 1 5.9699 1 4.7429 8 31.4531 2 5.0 2 11.0 2 4.0814 1 29.0773 10 12.094 9 9.5117 9 22.2239 1 32.1284 3 9.6905 1 12.3631 9 0.701 8 13.6728 1 11.3744 9 17.1524 1 34.5345 2 5.7956 1)
Average genome size in population (length): 65.705
Average program size in population (points): 66.705
Average percent parens in population: 0.015
Minimum age in population: 6.96875
Maximum age in population: 10.9375
Average age in population: 9.198625
Median age in population: 9.25
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 25
Genome diversity (% unique Plush genomes):	 0.763
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 25
Syntactic diversity (% unique Push programs):	 0.763
Total error diversity:				 0.039
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.048
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 10270962
--- Timings ---
Current time: 1529615466679 milliseconds
Total Time:          28.1 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.4 seconds, 40.4%
Fitness Testing:     13.1 seconds, 46.6%
Report:               3.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 53763.0
Test mean error for best: 26.88150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 91.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 69.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 55.2417878243 
Correct output: 10.0530512024  | Program output: 81.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 49.9952647342 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 50.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_add} {:instruction float_flush} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush integer_pop integer_yank in1 float_yankdup integer_flush print_integer float_dup_times float_min integer_dup_items float_inc 39 float_max float_sub float_min integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_yankdup integer_dup float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod integer_pop integer_add float_flush float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_tan float_rot integer_add float_sub integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 87.0 3 71.0 2 45.0 2 75.0 12 33.0 2 10.0 2 12.0 2 71.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 76.0 12 90.0 1 45.0 11 30.0 1 79.0 3 30.0 1]
Total: 1530.0
Mean: 30.6
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2976.6254936
Median total errors in population: 1532.0
Error averages by case: (113.97347779999998 2.713 60.65040000000001 1.543 104.62919329999998 3.751 138.17364179999998 3.168 143.3221581 3.723 126.65274630000002 2.729 102.96139799999999 2.771 131.0539617 12.075 92.1936228 2.769 69.9069357 3.47 72.56173150000001 2.737 127.34402020000002 2.129 151.1448077 12.438 153.5248764 12.724 95.33057179999999 11.771 119.8645179 2.141 143.37152909999998 3.768 70.50784770000001 2.719 134.51459450000002 11.142 132.19870150000003 12.1 144.53384649999998 2.502 103.31716410000003 11.223 89.24258560000003 2.495 135.3506753 3.12 86.7094883 1.87)
Error minima by case: (5.1635 1 0.0 0 6.0 1 5.0309 2 0.0383 2 4.5405 1 18.7358 2 3.7429 9 15.6706 2 6.0 2 10.0 1 7.4894 1 57.0 2 60.0 1 0.0 0 18.3977 1 46.3779 3 3.3095 1 12.3631 10 24.0047 10 15.743 1 6.0 2 28.0 1 32.8967 2 9.0 1)
Average genome size in population (length): 63.611
Average program size in population (points): 64.611
Average percent parens in population: 0.016
Minimum age in population: 8.5
Maximum age in population: 12.359375
Average age in population: 10.739140625
Median age in population: 10.765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.76
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.76
Total error diversity:				 0.038
Error (vector) diversity:			 0.042
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 11875836
--- Timings ---
Current time: 1529615470227 milliseconds
Total Time:          31.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.8 seconds, 40.5%
Fitness Testing:     14.7 seconds, 46.6%
Report:               4.0 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 53763.0
Test mean error for best: 26.88150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 91.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 69.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 55.2417878243 
Correct output: 10.0530512024  | Program output: 81.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 49.9952647342 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 50.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush integer_pop integer_yank in1 float_yankdup integer_flush print_integer float_dup_times float_min integer_dup_items float_inc 39 float_max float_sub float_min integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_add integer_yankdup float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_tan float_rot integer_add float_sub integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 87.0 3 71.0 2 45.0 2 75.0 12 33.0 2 10.0 2 12.0 2 71.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 76.0 12 90.0 1 45.0 11 30.0 1 79.0 3 30.0 1]
Total: 1530.0
Mean: 30.6
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2834.2167075
Median total errors in population: 1530.0
Error averages by case: (104.707397 2.593 51.49247030000001 0.932 102.08284169999997 3.616 135.84530949999998 3.52 134.88990539999998 3.616 118.81925760000001 2.595 93.5852086 2.649 128.81031330000002 12.071 82.7091357 2.644 68.1294497 2.854 63.2938292 2.619 125.15191439999998 2.501 148.73859879999998 12.916 151.70564180000002 12.244 94.44802200000001 11.312 110.05148929999999 2.494 141.0324036 3.661 61.8969553 2.583 125.58397029999999 11.107 129.87844700000002 12.089 136.86744929999998 1.88 100.95736649999999 11.203 79.76116800000001 1.858 126.8084345 3.486 86.16572869999999 1.761)
Error minima by case: (2.0619 1 0.0 0 42.0 2 78.0 2 85.0 2 69.0 1 17.7358 2 4.5974 8 31.0 2 7.0 2 10.0 1 7.4894 1 1.8496 8 13.042 9 15.3495 9 62.0 1 57.2644 3 9.0 1 25.2136 9 24.7277 9 88.0 1 10.4688 10 28.0 1 77.0 2 27.0 1)
Average genome size in population (length): 64.21
Average program size in population (points): 65.21
Average percent parens in population: 0.016
Minimum age in population: 10.0
Maximum age in population: 13.9921875
Average age in population: 12.31496875
Median age in population: 12.3671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.787
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.787
Total error diversity:				 0.031
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 13492801
--- Timings ---
Current time: 1529615474282 milliseconds
Total Time:          35.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.5 seconds, 40.9%
Fitness Testing:     16.5 seconds, 46.4%
Report:               4.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 53763.0
Test mean error for best: 26.88150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 91.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 69.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 55.2417878243 
Correct output: 10.0530512024  | Program output: 81.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 49.9952647342 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 50.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush integer_pop integer_yank in1 float_yankdup integer_flush print_integer float_dup_times float_min integer_dup_items float_inc 39 float_max float_sub float_min integer_dup_items float_inc 39 float_max float_sub integer_dup_times print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_yankdup float_add float_rot float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin integer_yankdup float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_tan float_rot integer_add float_sub integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 87.0 3 71.0 2 45.0 2 75.0 12 33.0 2 10.0 2 12.0 2 71.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 76.0 12 90.0 1 45.0 11 30.0 1 79.0 3 30.0 1]
Total: 1530.0
Mean: 30.6
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3054.6820052000003
Median total errors in population: 1530.0
Error averages by case: (114.6923544 2.76 62.579916 1.037 109.8226846 3.789 143.22437629999996 3.795 144.97992299999999 3.752 128.76880100000002 2.735 103.89394560000001 2.838 135.02358869999998 12.067 93.55446579999999 2.832 76.09429910000001 2.96 74.06688170000001 2.769 131.3638896 2.708 155.2154132 13.002 158.24300699999998 12.177 101.21476240000001 11.259 121.37976329999998 2.738 148.01687699999994 3.824 72.6044864 2.731 135.136456 11.132 136.25886060000002 12.094 146.58808240000002 1.963 107.59536150000001 11.229 90.53551730000002 1.975 136.82711590000002 3.716 93.18917640000001 1.93)
Error minima by case: (3.0619 1 0.0 0 42.0 2 78.0 2 86.0 2 47.9581 1 4.5155 2 4.7429 9 32.0 2 7.0 2 11.0 2 7.4894 1 60.9449 9 72.9014 9 15.7303 10 32.3449 1 84.0 3 8.6905 1 11.3631 7 23.7786 9 68.2417 1 10.0281 9 27.6379 1 78.0 2 17.1239 1)
Average genome size in population (length): 64.176
Average program size in population (points): 65.176
Average percent parens in population: 0.016
Minimum age in population: 11.421875
Maximum age in population: 15.578125
Average age in population: 13.79613671875
Median age in population: 13.8515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.031
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.037
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 15108028
--- Timings ---
Current time: 1529615478105 milliseconds
Total Time:          39.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.0 seconds, 40.6%
Fitness Testing:     18.3 seconds, 46.4%
Report:               5.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 53763.0
Test mean error for best: 26.88150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 91.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 69.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 55.2417878243 
Correct output: 10.0530512024  | Program output: 81.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 49.9952647342 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 50.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_flush} {:instruction print_integer} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_pop} {:instruction integer_add} {:instruction float_flush} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush integer_pop integer_yank in1 float_yankdup integer_flush print_integer float_dup_times float_min integer_dup_items float_inc 39 float_max float_sub float_min integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_yankdup float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod integer_pop integer_add float_flush float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_tan float_rot integer_add float_sub integer_yank integer_yankdup integer_swap integer_add float_sub integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 87.0 3 71.0 2 45.0 2 75.0 12 33.0 2 10.0 2 12.0 2 71.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 76.0 12 90.0 1 45.0 11 30.0 1 79.0 3 30.0 1]
Total: 1530.0
Mean: 30.6
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2941.3865427
Median total errors in population: 1530.0
Error averages by case: (112.19948059999999 2.638 59.32995149999999 0.875 104.10889369999997 3.649 137.79739920000003 3.634 140.99232969999997 3.622 125.09937500000001 2.617 101.15464449999997 2.692 129.7273466 12.081 90.37863610000001 2.688 70.29892980000001 2.811 69.95339240000001 2.632 126.03856569999999 2.564 149.83875469999998 12.989 152.8089914 12.182 95.42245149999998 11.241 116.03118850000001 2.597 142.9902744 3.679 68.6818861 2.62 132.8875965 11.135 130.84904950000004 12.089 142.96326390000002 1.826 101.921504 11.208 87.4849154 1.827 133.00761260000002 3.572 88.16710939999999 1.785)
Error minima by case: (3.0619 2 0.0 0 5.0 1 41.0 2 84.0 3 49.9581 1 3.8094 2 5.5862 9 30.0 1 8.0 1 9.0 1 7.4894 1 45.49 1 59.0 2 0.2677 1 61.0 1 47.0 2 8.0 1 24.9177 9 9.0783 8 70.2417 1 4.552 2 26.9318 1 76.0 2 10.0 1)
Average genome size in population (length): 64.289
Average program size in population (points): 65.289
Average percent parens in population: 0.016
Minimum age in population: 12.9375
Maximum age in population: 17.25390625
Average age in population: 15.262619140625
Median age in population: 15.3359375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.858
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.858
Total error diversity:				 0.03
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 16724953
--- Timings ---
Current time: 1529615481900 milliseconds
Total Time:          43.3 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.6 seconds, 40.7%
Fitness Testing:     20.1 seconds, 46.3%
Report:               5.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 53783.80260000001
Test mean error for best: 26.89190
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 90.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 68.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 54.2417878243 
Correct output: 10.0530512024  | Program output: 80.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 48.9952647342 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 49.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction integer_sub} {:instruction integer_max} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_min} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_sub} {:instruction tagged_41} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction integer_div} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 integer_sub integer_max float_min integer_dup_items float_inc 39 float_max float_min float_min integer_dup_items float_inc 39 float_max float_sub tagged_41 print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_yankdup float_add integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub float_dup_items float_tan float_rot integer_add integer_div integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 88.0 3 71.0 2 45.0 2 74.0 12 33.0 2 10.0 2 13.0 2 70.0 1 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 75.0 12 90.0 1 45.0 11 30.0 1 80.0 2 30.0 1]
Total: 1528.0
Mean: 30.56
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2992.9884327000004
Median total errors in population: 1530.0
Error averages by case: (113.2542491 2.693 60.378479000000006 0.907 107.046041 3.709 140.6277337 3.704 141.72610699999998 3.69 125.88504830000001 2.667 102.2054491 2.738 132.66623669999998 12.102 91.38470749999999 2.743 74.25366079999999 2.855 70.80728510000003 2.692 128.93997330000002 2.651 152.731751 13.03 155.68102869999998 12.198 99.44149899999998 11.254 117.47483159999999 2.648 145.83382569999998 3.723 69.5750326 2.654 133.85765899999998 11.154 133.81542560000003 12.115 143.7556555 1.858 104.9530878 11.229 88.44643670000002 1.869 133.7348631 3.64 92.1773658 1.812)
Error minima by case: (4.1635 2 0.0 0 43.0 2 79.0 2 78.6126 3 11.4676 1 17.7358 2 3.7429 9 31.0 2 8.0 2 10.0 1 6.544 1 60.4164 10 77.3997 11 15.1941 10 27.0809 1 85.0 3 8.6905 1 21.82 7 24.0047 9 8.8159 1 10.3744 10 28.0 1 29.6775 2 28.0 1)
Average genome size in population (length): 64.151
Average program size in population (points): 65.151
Average percent parens in population: 0.016
Minimum age in population: 14.09375
Maximum age in population: 18.59375
Average age in population: 16.7105126953125
Median age in population: 16.75048828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.038
Error (vector) diversity:			 0.043
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 18338328
--- Timings ---
Current time: 1529615485539 milliseconds
Total Time:          46.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.1 seconds, 40.7%
Fitness Testing:     21.7 seconds, 46.3%
Report:               6.0 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 53783.80260000001
Test mean error for best: 26.89190
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 90.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 68.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 54.2417878243 
Correct output: 10.0530512024  | Program output: 80.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 48.9952647342 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 49.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction integer_sub} {:instruction integer_max} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_max} {:instruction float_min} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 40} {:instruction float_max} {:instruction float_sub} {:instruction tagged_41} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_sub} {:instruction integer_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction tag_integer_859} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 integer_sub integer_max float_min integer_dup_items float_inc 39 float_max float_min float_min integer_dup_items float_inc 40 float_max float_sub tagged_41 print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_yankdup float_add integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_sub integer_mod in2 integer_add integer_yankdup float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod float_sin float_dup_items float_tan float_rot integer_add float_sub integer_yank tag_integer_859 tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 88.0 3 71.0 2 45.0 2 74.0 12 33.0 2 10.0 2 13.0 2 70.0 1 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 75.0 12 90.0 1 45.0 11 30.0 1 80.0 2 30.0 1]
Total: 1528.0
Mean: 30.56
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2952.3609014000003
Median total errors in population: 1530.0
Error averages by case: (111.9371645 2.761 59.397466699999995 1.037 106.23337589999998 3.788 139.7599475 3.774 141.85497389999995 3.764 124.21605630000003 2.75 101.16281129999999 2.83 130.0415168 12.057 90.89184789999999 2.822 71.4544479 2.966 70.41001000000003 2.789 126.34356559999999 2.695 150.61637900000002 12.971 153.1144218 12.183 94.84452509999997 11.233 116.57235150000001 2.727 144.49609689999997 3.818 68.125084 2.736 132.35556060000002 11.118 131.43363070000004 12.072 142.06443779999998 1.979 102.69288699999998 11.206 87.80838610000002 1.977 133.34879700000002 3.714 87.49215959999998 1.926)
Error minima by case: (5.1635 1 0.0 0 2.0245 2 33.9755 2 79.624 2 10.4562 1 18.7358 2 3.7429 9 31.0 2 7.0 2 10.0 1 7.4894 1 48.9755 9 51.9755 10 8.0245 9 26.0694 1 39.9755 3 9.0 1 12.3631 8 23.7786 8 9.8273 1 2.0245 9 28.0 1 30.689 2 17.0245 1)
Average genome size in population (length): 63.752
Average program size in population (points): 64.752
Average percent parens in population: 0.016
Minimum age in population: 15.1015625
Maximum age in population: 20.107421875
Average age in population: 18.1944599609375
Median age in population: 18.245361328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.042
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 19940715
--- Timings ---
Current time: 1529615489378 milliseconds
Total Time:          50.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.7 seconds, 40.8%
Fitness Testing:     23.5 seconds, 46.2%
Report:               6.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 53783.80260000001
Test mean error for best: 26.89190
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 90.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 68.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 54.2417878243 
Correct output: 10.0530512024  | Program output: 80.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 48.9952647342 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 49.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction integer_sub} {:instruction integer_max} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction integer_mult} {:instruction float_max} {:instruction float_min} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 40} {:instruction float_max} {:instruction float_sub} {:instruction tagged_41} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction integer_div} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 integer_sub integer_max float_min integer_dup_items float_inc integer_mult float_max float_min float_min integer_dup_items float_inc 40 float_max float_sub tagged_41 print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_yankdup float_add integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub float_dup_items float_tan float_rot integer_add integer_div integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 88.0 3 71.0 2 45.0 2 74.0 12 33.0 2 10.0 2 13.0 2 70.0 1 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 75.0 12 90.0 1 45.0 11 30.0 1 80.0 2 30.0 1]
Total: 1528.0
Mean: 30.56
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2935.0119336000002
Median total errors in population: 1530.0
Error averages by case: (113.2962339 2.631 60.29544740000001 0.844 102.0738717 3.637 135.8543936 3.637 141.77412790000002 3.641 126.0615802 2.622 102.20130970000001 2.679 128.0049389 12.122 91.2753953 2.676 69.17905110000001 2.774 70.87767560000002 2.653 124.27524150000002 2.596 148.06117699999996 13.032 151.0034564 12.183 94.535966 11.237 117.64685610000001 2.608 141.12413429999998 3.676 69.63919089999999 2.625 133.95915019999998 11.156 129.0926804 12.121 143.9185488 1.805 100.1015124 11.221 88.36431300000001 1.796 133.8761605 3.575 87.2135208 1.759)
Error minima by case: (5.8191 2 0.0 0 6.0 1 42.0 2 85.0 3 69.0 1 19.7639 2 4.5862 9 31.0 2 8.0 2 10.0 1 7.3005 1 11.6483 2 28.6316 1 0.0 0 62.0 1 48.0 3 9.0 1 25.6369 10 22.7786 9 81.306 1 6.0 2 28.0 1 77.0 2 9.0 1)
Average genome size in population (length): 62.956
Average program size in population (points): 63.956
Average percent parens in population: 0.016
Minimum age in population: 16.94921875
Maximum age in population: 21.612548828125
Average age in population: 19.6764482421875
Median age in population: 19.7232666015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.033
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.038
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 21522253
--- Timings ---
Current time: 1529615493139 milliseconds
Total Time:          54.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.3 seconds, 40.9%
Fitness Testing:     25.2 seconds, 46.2%
Report:               6.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_cos float_rot integer_add float_sub integer_add float_sub integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3051.1989125
Median total errors in population: 1530.0
Error averages by case: (115.1130756 2.737 62.49606880000001 1.021 109.12007929999999 3.779 142.6104994 3.753 144.8209226 3.772 128.7098693 2.71 104.11668539999997 2.798 135.28302199999996 12.086 93.35845229999998 2.794 74.4228942 2.94 73.9500378 2.775 131.50712090000002 2.608 155.4182319 13.006 158.3421708 12.208 100.43622719999996 11.274 122.09308910000001 2.678 147.71510979999996 3.805 72.61178550000001 2.694 135.63035100000002 11.139 136.4820406 12.082 146.5064174 1.935 107.8771986 11.237 90.41657290000002 1.953 136.66447689999998 3.598 92.20451320000001 1.91)
Error minima by case: (5.1635 1 0.0 0 42.0 2 78.0 2 84.0 2 5.3488 1 18.7358 2 4.5862 9 8.4681 1 7.0 2 9.0 1 7.3005 1 6.502 9 23.4853 10 14.7303 9 20.9621 1 67.7077 2 8.0 1 12.3631 9 22.7786 8 14.9347 1 11.3744 9 7.7143 1 35.7963 2 23.4131 1)
Average genome size in population (length): 63.346
Average program size in population (points): 64.346
Average percent parens in population: 0.016
Minimum age in population: 18.6826171875
Maximum age in population: 22.9898681640625
Average age in population: 21.18373962402344
Median age in population: 21.234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.035
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 23114065
--- Timings ---
Current time: 1529615496725 milliseconds
Total Time:          58.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.8 seconds, 40.9%
Fitness Testing:     26.8 seconds, 46.1%
Report:               7.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_cos float_rot integer_add float_sub integer_add float_sub integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2799.5795651999993
Median total errors in population: 1530.0
Error averages by case: (106.7025481 2.707 53.88156649999999 0.973 98.198576 3.744 131.95552259999997 3.711 137.24110400000006 3.817 119.46768550000002 2.698 95.75593790000002 2.781 122.04651259999996 12.067 85.23626239999997 2.763 65.30762059999999 2.901 64.85632839999998 2.84 118.01997829999999 2.345 143.47504070000002 12.976 146.55026199999998 12.177 89.74386499999999 11.245 112.68042539999996 2.662 136.94561049999996 3.759 62.82035169999999 2.684 127.16311049999999 11.13 123.68408539999993 11.988 137.49884349999996 1.912 95.20573310000002 11.195 82.16617250000002 1.918 128.18465539999997 3.328 82.60776659999999 1.863)
Error minima by case: (6.1635 2 0.0 0 1.0245 2 3.0309 2 85.0 2 40.5959 1 19.7358 2 4.7429 11 31.0 2 8.0 2 10.0 1 7.4894 1 47.9755 9 50.9755 10 7.0245 10 24.9826 1 38.9755 3 9.0 1 12.3631 10 25.0047 9 60.8794 1 1.0245 9 28.0 1 77.0 2 16.0245 1)
Average genome size in population (length): 63.666
Average program size in population (points): 64.666
Average percent parens in population: 0.016
Minimum age in population: 20.44384765625
Maximum age in population: 24.5045166015625
Average age in population: 22.72948657226562
Median age in population: 22.772216796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.045
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 24715162
--- Timings ---
Current time: 1529615500436 milliseconds
Total Time:          61.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.3 seconds, 40.9%
Fitness Testing:     28.6 seconds, 46.2%
Report:               7.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos integer_yankdup float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger float_dup float_sin float_inc integer_mod tag_float_378 float_cos float_sub)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2504.4427250999984
Median total errors in population: 1528.0
Error averages by case: (94.33964399999999 2.525 40.27064299999999 0.756 86.51557170000001 3.544 120.80108329999997 3.489 127.90155950000003 3.776 107.35090670000001 2.546 83.15961469999999 2.581 111.22440709999992 12.072 72.3547205 2.56 52.080054600000004 2.699 54.04679369999995 2.847 107.04915969999999 2.112 133.69448980000004 12.965 136.0845964 12.187 77.7626974 11.221 99.79547399999998 2.486 125.87115029999997 3.546 50.289268799999995 2.535 115.23761130000001 11.122 113.18880309999983 11.77 125.6205318 1.729 84.9207248 11.167 69.31828080000003 1.717 117.94779809999993 3.077 68.95013999999999 1.638)
Error minima by case: (3.0619 2 0.0 0 3.0245 2 32.9755 2 86.0 2 40.9336 1 3.1112 2 1.0444 9 11.0161 2 8.0 2 11.0 2 7.3005 1 13.3919 9 30.3752 9 9.0245 9 24.7426 1 38.9755 3 9.0 1 18.3877 8 20.0491 8 61.2171 1 3.0245 9 5.1664 1 78.0 2 16.5232 1)
Average genome size in population (length): 64.142
Average program size in population (points): 65.142
Average percent parens in population: 0.016
Minimum age in population: 21.705810546875
Maximum age in population: 26.03860473632812
Average age in population: 24.24670678710938
Median age in population: 24.32164001464844
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.791
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.791
Total error diversity:				 0.052
Error (vector) diversity:			 0.057
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 26328345
--- Timings ---
Current time: 1529615504140 milliseconds
Total Time:          65.6 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.9 seconds, 41.0%
Fitness Testing:     30.2 seconds, 46.1%
Report:               8.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_cos float_rot integer_add float_sub integer_add float_sub integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2861.5964365999976
Median total errors in population: 1528.0
Error averages by case: (108.35234399999999 2.8 55.68581379999999 1.075 102.46761559999996 3.836 135.93128249999998 3.795 142.0213422 3.893 120.77243220000001 2.786 97.59008859999997 2.881 123.61273969999988 12.061 87.42520119999998 2.859 68.88970239999998 2.999 68.50771159999991 3.173 119.34227229999998 2.672 146.6295303 12.974 149.149864 12.196 91.73742599999996 11.242 112.55396749999997 2.737 140.55053009999997 3.842 64.4014283 2.771 128.90458270000002 11.155 125.89533559999933 11.163 138.71692019999998 1.997 98.59048750000001 11.201 84.27241380000002 2.019 131.43684569999988 3.646 84.43055879999999 1.955)
Error minima by case: (3.1635 1 0.0 0 2.0245 2 3.0309 2 49.0383 2 25.0419 1 16.7358 2 4.7429 8 6.7502 2 7.0 2 10.0 1 7.0531 1 8.4164 10 22.3997 11 8.0245 10 25.3203 1 35.9755 3 5.3095 1 20.3877 7 7.9953 8 23.7583 1 2.0245 9 9.4323 1 8.1033 2 17.0245 1)
Average genome size in population (length): 62.99
Average program size in population (points): 63.99
Average percent parens in population: 0.016
Minimum age in population: 23.05059814453125
Maximum age in population: 27.64697265625
Average age in population: 25.76330947875977
Median age in population: 25.81614685058594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.071
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 27914328
--- Timings ---
Current time: 1529615507902 milliseconds
Total Time:          69.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.4 seconds, 41.0%
Fitness Testing:     31.9 seconds, 46.1%
Report:               8.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction tagged_291} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult tagged_291 integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_cos float_rot integer_add float_sub integer_add float_sub integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2397.024808700013
Median total errors in population: 1526.0293
Error averages by case: (87.86569999999998 2.798 35.96442519999999 1.12 84.54717559999999 3.853 118.51333029999996 3.82 126.10690160000003 3.294 103.65594720000007 2.874 77.40839829999999 2.921 102.9899750999999 12.045 68.12350819999996 2.872 51.441084599999996 2.994 50.976432100000004 3.062 99.11412670000003 2.949 127.58301120000007 12.925 131.13701609999993 12.16 73.52172820000001 11.195 96.47762449999992 2.853 122.2024871999999 3.868 46.030437899999995 2.826 108.67214739999997 11.159 105.28629929999914 9.753 122.07003609999995 2.07 78.6773818 11.159 64.60843750000002 2.033 115.29914779999999 3.965 66.17804880000001 2.006)
Error minima by case: (3.1635 1 0.0 0 3.0245 2 29.9755 2 86.0 2 36.6454 1 16.7358 2 4.7429 9 30.0 1 3.2524 2 11.0 2 7.0531 1 26.8328 9 47.9755 10 6.6118 10 12.4189 1 35.9755 2 8.0 1 13.3631 9 23.0047 8 58.2124 1 3.0245 9 27.0 1 78.0 2 18.0245 1)
Average genome size in population (length): 61.989
Average program size in population (points): 62.989
Average percent parens in population: 0.016
Minimum age in population: 24.61981201171875
Maximum age in population: 29.06456756591797
Average age in population: 27.29090417480469
Median age in population: 27.33030700683594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 57
Genome diversity (% unique Plush genomes):	 0.757
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 57
Syntactic diversity (% unique Push programs):	 0.757
Total error diversity:				 0.067
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 29477940
--- Timings ---
Current time: 1529615511515 milliseconds
Total Time:          72.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.9 seconds, 41.1%
Fitness Testing:     33.5 seconds, 46.0%
Report:               9.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction in2} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 in2 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult float_mult integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos integer_yankdup float_add float_rot float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2570.90005600002
Median total errors in population: 1526.0293
Error averages by case: (94.67844629999995 2.85 42.610582900000004 1.17 91.45105379999997 3.912 125.16587349999995 3.876 131.9217157 3.225 110.02836990000007 2.888 84.09105649999997 2.968 110.7733467999999 12.038 74.49596509999994 2.922 58.51004639999996 3.052 57.568418699999974 3.097 106.82963880000003 3.134 135.14011810000002 12.941 138.5083308999999 12.148 81.35574049999997 11.2 103.00755559999993 2.855 129.11485749999986 3.919 52.71496580000002 2.854 115.48270459999998 11.16 112.9677725999984 9.427 128.2962978 2.091 86.60889440000003 11.167 71.07781260000004 2.086 121.45667969999997 4.162 73.83781150000002 2.064)
Error minima by case: (3.1635 1 0.0 0 0.1072 2 29.9755 2 84.0 2 40.9336 1 16.7358 2 4.4597 8 11.0161 1 3.4957 2 9.0 2 8.0531 1 13.3919 10 30.3752 10 5.8928 10 25.3203 1 0.3533 2 4.5945 1 11.0491 10 20.0491 8 61.2171 1 0.1072 9 5.1664 1 76.0 2 14.8928 1)
Average genome size in population (length): 61.484
Average program size in population (points): 62.484
Average percent parens in population: 0.016
Minimum age in population: 26.145263671875
Maximum age in population: 30.72784805297852
Average age in population: 28.81159414291382
Median age in population: 28.86308288574219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.792
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.792
Total error diversity:				 0.055
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.059
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 31028228
--- Timings ---
Current time: 1529615515143 milliseconds
Total Time:          76.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.6 seconds, 41.2%
Fitness Testing:     35.1 seconds, 45.8%
Report:               9.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_swap} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_swap integer_yankdup integer_swap integer_mod float_sub float_rot float_swap float_dup_items float_cos float_rot integer_add float_sub integer_add float_sub integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2511.0244135000203
Median total errors in population: 1526.0293
Error averages by case: (93.46774529999998 2.839 41.50240229999998 1.154 87.43045089999997 3.887 121.38838359999997 3.857 131.00133230000003 3.218 109.11699770000008 2.893 82.8984777 2.947 106.9712645999999 12.076 73.27573219999995 2.909 54.353737199999976 3.034 56.739102699999975 3.109 103.0566366 3.123 131.49757280000003 12.965 134.88225789999993 12.186 77.47137479999999 11.216 101.41152929999996 2.873 125.4604424999999 3.893 51.7576305 2.855 114.42186620000001 11.185 109.17183269999859 9.403 127.40291939999996 2.094 82.71872680000001 11.194 69.93812920000002 2.06 120.58659019999997 4.157 69.89827810000001 2.076)
Error minima by case: (2.0619 1 0.0 0 4.0245 2 29.9755 2 43.9392 2 40.9336 1 15.7358 2 4.4597 8 27.1676 1 4.8077 2 12.0 2 8.4894 1 44.9755 10 47.9755 10 10.0245 10 25.3203 1 35.9755 2 8.0 1 18.3877 7 23.0047 8 61.2171 1 4.0245 9 24.1676 1 9.6389 2 19.0245 1)
Average genome size in population (length): 61.934
Average program size in population (points): 62.934
Average percent parens in population: 0.016
Minimum age in population: 27.145263671875
Maximum age in population: 32.30249214172363
Average age in population: 30.25205983734131
Median age in population: 30.28661918640137
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.062
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 32589440
--- Timings ---
Current time: 1529615518893 milliseconds
Total Time:          80.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.0 seconds, 41.1%
Fitness Testing:     36.9 seconds, 46.0%
Report:              10.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction float_tan} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod float_tan float_cos float_sub integer_mod float_sub float_rot float_swap)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2278.211877700021
Median total errors in population: 1526.0293
Error averages by case: (83.25969379999997 2.857 31.10711299999998 1.152 78.23382419999997 3.891 112.26220429999995 3.868 122.18399830000003 3.136 99.69049740000004 2.909 72.69024649999996 2.968 98.2159432999999 12.033 63.29086729999998 2.93 45.42602749999999 3.033 47.45829820000001 3.061 94.40556090000004 3.059 123.06382810000004 12.905 126.36464709999998 12.138 68.6011349 11.176 92.20145159999993 2.901 116.23965469999992 3.929 41.95594410000001 2.868 104.35910219999995 11.173 100.39864879999861 9.314 118.19833099999997 2.125 73.88692160000001 11.156 59.7998658 2.074 111.83911509999999 4.139 60.23295800000002 2.051)
Error minima by case: (1.1635 1 0.0 0 3.0245 2 3.0309 2 0.9617 2 25.9755 1 0.0245 2 1.7429 9 12.0245 1 7.0 2 11.0 2 6.2973 1 44.9755 8 47.9755 9 9.0245 9 18.9755 1 35.9755 2 2.3095 1 13.3631 7 20.0047 8 44.9755 1 3.0245 9 14.6192 1 33.8967 2 18.0245 1)
Average genome size in population (length): 61.857
Average program size in population (points): 62.857
Average percent parens in population: 0.016
Minimum age in population: 29.28276062011719
Maximum age in population: 33.73956966400146
Average age in population: 31.73355838680267
Median age in population: 31.78524684906006
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.072
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 34146990
--- Timings ---
Current time: 1529615522507 milliseconds
Total Time:          84.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.6 seconds, 41.1%
Fitness Testing:     38.6 seconds, 45.9%
Report:              10.7 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_pop} {:instruction integer_sub} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_sin} {:instruction float_inc})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_pop integer_sub integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_yankdup float_add integer_mod integer_swap integer_swap integer_mod float_frominteger float_dup float_sin float_inc)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2312.9474415000213
Median total errors in population: 1526.0293
Error averages by case: (84.3243526 2.773 31.028036899999982 1.068 82.43403279999997 3.813 116.45511309999995 3.787 122.00623680000001 3.057 98.00415040000006 2.776 73.75134820000001 2.887 101.6531088999999 12.05 64.26837039999997 2.832 49.2793317 2.971 46.81870820000001 2.963 97.76949340000004 2.993 126.20833380000003 12.927 128.48376229999994 12.139 70.84033289999998 11.177 90.59103329999996 2.746 120.33540309999992 3.824 40.40980649999999 2.743 105.03998010000004 11.145 103.82639859999874 9.338 116.52583529999997 1.971 77.24734650000002 11.144 60.77951160000002 1.997 111.37031339999997 4.02 62.38710070000001 1.969)
Error minima by case: (3.1635 1 0.0 0 1.2436 2 3.0309 2 41.9755 2 39.9336 1 16.7358 2 1.7429 9 30.0 1 3.1365 2 10.0 1 8.9242 1 7.2107 8 38.1774 9 6.6118 10 14.0528 1 35.9755 2 5.3095 1 4.1042 10 22.0047 8 60.2171 1 1.2436 8 27.0 1 33.9755 2 13.3806 1)
Average genome size in population (length): 61.431
Average program size in population (points): 62.431
Average percent parens in population: 0.016
Minimum age in population: 30.28276062011719
Maximum age in population: 35.16175413131714
Average age in population: 33.18037004518509
Median age in population: 33.21935701370239
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.067
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 35692965
--- Timings ---
Current time: 1529615526009 milliseconds
Total Time:          87.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.0 seconds, 41.1%
Fitness Testing:     40.2 seconds, 46.0%
Report:              11.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction print_integer} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_dup} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub integer_mod integer_yankdup float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos print_integer integer_mod float_sub float_rot float_swap float_dup_items float_tan float_rot integer_add float_sub integer_yank float_dup tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2609.44360230002
Median total errors in population: 1526.0293
Error averages by case: (95.34454209999998 2.871 43.138636399999996 1.172 94.91773289999996 3.915 128.39026799999996 3.882 132.88442320000001 3.224 110.01192960000003 2.883 84.91338979999998 2.97 113.6652127999999 12.109 75.65316669999996 2.925 60.998548999999976 3.061 58.706809399999976 3.119 109.69864600000004 3.155 137.90128910000004 12.978 140.70268249999992 12.208 82.73562079999996 11.238 102.17071519999993 2.851 132.19127219999993 3.927 52.85734230000003 2.828 116.0555416 11.209 115.78405599999812 9.391 128.28455559999995 2.075 89.52804460000002 11.22 72.14448080000003 2.094 122.39007489999995 4.148 74.81262079999999 2.109)
Error minima by case: (3.1635 1 0.0 0 5.0245 2 1.0309 2 39.9755 2 39.9336 1 16.7358 1 4.7429 10 28.0 1 3.4957 2 11.0 2 8.0531 1 26.8328 9 46.9755 10 5.7947 8 24.3203 1 34.9755 2 4.5945 1 20.3877 9 22.0047 8 60.2171 1 5.0245 9 25.0 1 31.9755 2 18.1239 1)
Average genome size in population (length): 61.445
Average program size in population (points): 62.445
Average percent parens in population: 0.016
Minimum age in population: 32.06745910644531
Maximum age in population: 36.6473560333252
Average age in population: 34.62715209555626
Median age in population: 34.65625250339508
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.869
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.869
Total error diversity:				 0.068
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 37238940
--- Timings ---
Current time: 1529615529784 milliseconds
Total Time:          91.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.5 seconds, 41.1%
Fitness Testing:     42.0 seconds, 46.0%
Report:              11.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_yank} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction float_sub} {:instruction float_rot} {:instruction integer_add} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_dec} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub float_frominteger integer_add float_sin float_yank integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_cos float_rot integer_add float_sub integer_add float_sub float_rot integer_add float_yankdup integer_yank float_dec tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2590.9318217000227
Median total errors in population: 1526.0293
Error averages by case: (95.4068145 2.812 43.376155499999996 1.139 92.37296669999996 3.863 126.01094649999995 3.838 132.3970331 3.134 110.82657860000005 2.806 84.85052969999998 2.905 112.3593301999999 12.052 75.33568469999996 2.874 58.40613289999998 3.01 58.531446999999964 3.026 108.50308290000004 3.05 136.28747700000002 12.951 139.57671139999997 12.163 81.59442639999995 11.206 103.83563359999994 2.786 130.08476809999993 3.874 53.53767780000001 2.768 116.1810778 11.141 114.28156399999811 9.355 129.068659 2.017 87.95789880000002 11.192 71.92775430000003 2.052 122.26023369999996 4.115 73.74223749999997 2.09)
Error minima by case: (2.0619 1 0.0 0 3.0245 2 3.0309 2 41.9755 2 40.9336 1 9.995 2 4.7429 9 29.0 1 7.0 2 11.0 2 8.0531 1 3.102 9 19.6991 8 7.6118 9 25.3203 1 35.9755 2 4.3095 1 14.3741 8 21.0491 8 61.2171 1 3.0245 9 13.1273 1 33.9755 2 1.7705 1)
Average genome size in population (length): 61.677
Average program size in population (points): 62.677
Average percent parens in population: 0.016
Minimum age in population: 33.32451343536377
Maximum age in population: 38.12652909755707
Average age in population: 36.08221022164822
Median age in population: 36.13360160589218
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.066
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 38789715
--- Timings ---
Current time: 1529615533320 milliseconds
Total Time:          94.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.0 seconds, 41.1%
Fitness Testing:     43.6 seconds, 46.0%
Report:              12.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction 40} {:instruction float_max} {:instruction float_sub} {:instruction tagged_41} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction 18} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_sin} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction float_sub} {:instruction float_rot} {:instruction integer_add} {:instruction integer_div} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult 40 float_max float_sub tagged_41 print_float float_add float_div float_frominteger integer_add float_sin float_inc float_inc integer_yankdup float_add float_rot 18 integer_mod integer_yankdup integer_swap integer_mod float_frominteger float_dup float_sin float_inc float_dup_items float_cos float_rot integer_add float_sub integer_add float_sub float_rot integer_add integer_div integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2366.7197905000226
Median total errors in population: 1526.0293
Error averages by case: (87.95635739999997 2.726 35.103978799999986 1.009 82.75240330000001 3.764 116.67203429999995 3.753 125.596905 3.026 102.65716090000008 2.76 77.38801909999998 2.833 101.78558689999994 12.073 68.01092359999996 2.782 49.22194329999998 2.901 50.93146109999999 2.945 97.9786829 2.968 126.03322130000006 12.962 128.9632661999999 12.157 71.33364689999999 11.179 94.67620809999994 2.736 120.44752979999991 3.781 45.031795700000025 2.733 108.70935949999995 11.165 103.66259219999837 9.359 121.08790959999996 1.935 77.20876590000002 11.173 64.47091660000002 1.941 115.24758439999998 3.949 63.26253770000001 1.919)
Error minima by case: (3.1635 1 0.0 0 4.0245 2 1.0309 2 39.9755 2 40.9336 1 16.7358 2 2.8919 8 11.0161 1 3.4957 2 12.0 2 1.1081 1 7.834 9 15.5942 9 6.6118 10 14.0528 1 3.5942 2 4.5945 1 10.9405 10 3.8919 8 61.2171 1 4.0245 9 5.1664 1 31.9755 2 1.6641 1)
Average genome size in population (length): 61.859
Average program size in population (points): 62.859
Average percent parens in population: 0.016
Minimum age in population: 34.32451343536377
Maximum age in population: 39.33325397968292
Average age in population: 37.54295126223564
Median age in population: 37.60602530837059
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.064
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 40344590
--- Timings ---
Current time: 1529615537120 milliseconds
Total Time:          98.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.5 seconds, 41.1%
Fitness Testing:     45.3 seconds, 46.0%
Report:              12.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_yank} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_mult} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction integer_div} {:instruction integer_add} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_yank float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_mult float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger float_add integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub float_dup_items float_tan float_rot integer_add integer_div integer_add float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2595.2467742000217
Median total errors in population: 1526.0293
Error averages by case: (97.48432889999997 2.797 44.748212899999984 1.089 90.50047619999998 3.842 124.32282289999998 3.815 133.70761290000002 3.098 111.93674080000005 2.836 86.78106999999999 2.903 111.18097379999992 12.065 76.87551729999997 2.864 57.58624159999998 2.987 60.2846147 3.008 107.30865230000002 3.011 135.28889790000005 12.964 137.96715989999996 12.167 80.81410000000001 11.214 104.19402759999994 2.818 128.72992069999992 3.867 54.79965960000003 2.801 118.50414889999996 11.182 113.13117409999849 9.353 130.15900529999996 2.042 86.68599800000001 11.193 73.59286250000002 2.011 124.00622199999998 4.026 72.6873334 2.016)
Error minima by case: (3.1635 1 0.0 0 4.0245 2 3.0309 2 41.9755 2 40.9336 1 16.7358 2 4.7429 11 30.0 1 7.0 2 12.0 2 7.0531 1 44.9755 9 47.9755 10 10.0245 10 24.7426 1 35.9755 2 5.3095 1 20.3877 11 24.9755 8 61.2171 1 4.0245 9 27.0 1 33.9755 2 19.0245 1)
Average genome size in population (length): 61.331
Average program size in population (points): 62.331
Average percent parens in population: 0.016
Minimum age in population: 36.38648629188538
Maximum age in population: 40.96692377328873
Average age in population: 38.98229445341229
Median age in population: 39.03558368980885
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.049
Error (vector) diversity:			 0.05
Behavioral diversity:				 0.05
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 41885415
--- Timings ---
Current time: 1529615540595 milliseconds
Total Time:         102.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.0 seconds, 41.1%
Fitness Testing:     46.9 seconds, 45.9%
Report:              13.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction print_float} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction float_flush} {:instruction integer_add} {:instruction float_min} {:instruction float_rot} {:instruction integer_add} {:instruction integer_div} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div print_float integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_cos float_rot integer_add float_flush integer_add float_min float_rot integer_add integer_div integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2467.0579585000205
Median total errors in population: 1526.0293
Error averages by case: (90.6260373 2.827 37.851603499999975 1.102 87.8928159 3.867 121.76560399999998 3.835 128.47415120000002 3.118 104.65012850000008 2.84 80.1374485 2.926 107.07762759999991 12.108 70.99384169999996 2.883 54.96391879999997 2.99 53.870542099999994 3.017 103.23512080000003 3.04 131.49657050000002 12.99 133.57470289999992 12.198 76.40581069999999 11.229 97.39335929999993 2.797 125.85149959999991 3.872 47.39532809999999 2.807 112.46284319999997 11.216 109.20405019999839 9.408 123.08392649999996 2.025 82.9047854 11.209 67.22599590000004 2.039 118.03316439999995 4.045 68.09408189999999 2.005)
Error minima by case: (0.1996 1 0.0 0 3.0245 2 29.9755 2 87.0 2 29.4222 1 15.3443 2 1.7429 8 30.0 1 7.0 2 12.0 2 8.0531 1 42.2946 10 10.2693 10 9.0245 10 20.3977 1 35.9755 2 8.0 1 11.0491 8 1.5375 8 61.2171 1 3.0245 9 27.0 1 79.0 2 18.0245 1)
Average genome size in population (length): 60.868
Average program size in population (points): 61.868
Average percent parens in population: 0.017
Minimum age in population: 37.70748347043991
Maximum age in population: 42.50248676538467
Average age in population: 40.42562548364699
Median age in population: 40.46855417639017
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.07
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 43413856
--- Timings ---
Current time: 1529615544278 milliseconds
Total Time:         105.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.4 seconds, 41.1%
Fitness Testing:     48.5 seconds, 46.0%
Report:              13.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction print_float} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction integer_pop} {:instruction float_flush} {:instruction integer_yankdup} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction integer_add} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_dup} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop print_float integer_mult integer_shove integer_fromfloat float_dec float_yankdup integer_dup_times in2 integer_add float_add float_rot integer_pop float_flush integer_yankdup float_sub float_rot float_swap integer_add float_cos float_rot integer_add float_sub integer_mod float_sub float_rot integer_yankdup integer_swap float_dup tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2750.184713900021
Median total errors in population: 1526.0293
Error averages by case: (103.36236049999997 2.886 50.62044949999999 1.203 98.01834379999998 3.924 131.45660879999997 3.898 139.22054109999996 3.219 116.37463090000001 2.887 92.83097619999998 2.992 117.94806029999994 12.093 83.20833919999997 2.947 65.3414509 3.083 66.17595759999999 3.111 113.99516480000003 3.145 141.93526500000004 12.984 144.02256349999996 12.207 87.3078348 11.25 109.1808714 2.859 135.61686199999997 3.932 59.8509305 2.859 123.8403517 11.206 119.86542659999846 9.427 134.5041495 2.105 93.7074987 11.23 79.84408970000001 2.13 129.31572059999993 4.203 78.77326629999999 2.087)
Error minima by case: (2.1635 1 0.0 0 3.0245 2 3.0309 2 0.9617 2 40.9336 1 15.7358 2 4.7429 10 14.0161 1 7.0 2 12.0 2 7.4894 1 26.8328 8 47.9755 10 6.6118 10 14.0528 1 35.9755 2 2.3095 1 18.3877 10 22.0047 8 61.2171 1 3.0245 9 2.1664 1 33.8967 2 17.1239 1)
Average genome size in population (length): 60.45
Average program size in population (points): 61.45
Average percent parens in population: 0.017
Minimum age in population: 38.70748347043991
Maximum age in population: 43.79243316501379
Average age in population: 41.91828402385861
Median age in population: 41.96057394146919
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.078
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 44930947
--- Timings ---
Current time: 1529615547864 milliseconds
Total Time:         109.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.9 seconds, 41.1%
Fitness Testing:     50.2 seconds, 45.9%
Report:              14.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 37} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction float_swap} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction in2} {:instruction integer_div} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_sub} {:instruction float_cos} {:instruction float_sub} {:instruction float_swap} {:instruction float_tan} {:instruction tag_float_378} {:instruction float_cos} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_swap} {:instruction integer_mult} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction integer_add} {:instruction float_sub} {:instruction float_sub} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank})
Best program: (float_sub integer_yank float_sub float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 37 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times integer_shove float_swap float_add float_rot float_sub in2 integer_div float_sin float_inc integer_mod integer_sub float_cos float_sub float_swap float_tan tag_float_378 float_cos integer_yankdup float_add float_rot float_swap integer_mult float_cos float_rot integer_add integer_add float_sub float_sub integer_mod float_rot integer_mod integer_yankdup float_rot float_swap float_dup_items float_cos float_rot integer_add integer_dup_items integer_add float_sub integer_yank)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2563.733057700022
Median total errors in population: 1526.0293
Error averages by case: (94.92687269999998 2.753 42.36587359999999 1.02 91.33529149999997 3.785 125.12644789999995 3.765 130.11569350000002 3.06 108.93799720000005 2.732 84.16532219999998 2.848 111.4463803999999 12.07 74.16915539999998 2.812 58.55746949999998 2.933 56.122868899999965 2.953 107.45387260000001 2.989 135.5419833 12.987 138.72361919999997 12.169 81.61130849999996 11.205 102.00924309999996 2.713 129.62706999999992 3.803 51.5224272 2.712 115.8224735 11.166 113.45506909999847 9.361 127.18322649999998 1.936 86.9806441 11.201 70.89232650000002 1.961 120.05760899999996 3.997 74.71681229999999 1.935)
Error minima by case: (1.1635 1 0.0 0 2.5477 2 3.0309 2 2.0383 2 40.9336 1 14.7358 2 4.7429 9 30.0 1 3.4957 2 11.0 2 7.3354 1 32.7358 9 35.7358 10 8.5477 9 25.3203 1 23.7358 2 5.3095 1 20.3877 7 12.7358 8 61.2171 1 2.5477 9 27.0 1 30.8967 2 17.5477 1)
Average genome size in population (length): 60.421
Average program size in population (points): 61.421
Average percent parens in population: 0.017
Minimum age in population: 40.55893236398697
Maximum age in population: 45.44555416330695
Average age in population: 43.40318264633045
Median age in population: 43.44077744148672
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.064
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 46447236
--- Timings ---
Current time: 1529615551480 milliseconds
Total Time:         112.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.5 seconds, 41.2%
Fitness Testing:     51.8 seconds, 45.9%
Report:              14.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_div} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction integer_div} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_yank} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction integer_inc} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction float_yank} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction float_frominteger} {:instruction integer_yank})
Best program: (float_sub float_flush float_sub integer_div in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_inc float_inc float_max float_sub float_dec print_float float_add float_div integer_div integer_pop float_yankdup float_frominteger integer_pop float_yankdup integer_mult float_stackdepth integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub float_frominteger integer_add float_sin float_yank integer_mod tag_float_378 float_cos integer_inc integer_add float_sin float_inc float_yank tag_float_378 float_cos float_sub integer_mod float_sub float_rot float_swap integer_fromfloat float_cos float_rot integer_add float_sub integer_add float_frominteger integer_yank)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2402.966517800019
Median total errors in population: 1526.0293
Error averages by case: (88.72762769999999 2.838 36.60822399999997 1.171 84.57331309999995 3.895 118.48465069999996 3.854 126.68453170000004 3.139 103.76784150000006 2.871 78.29132609999998 2.959 103.13248099999991 12.04 69.10035419999997 2.919 51.54630959999998 3.049 52.191495899999964 3.036 99.32160820000001 3.048 127.62331260000005 12.91 130.49753659999993 12.151 72.9703468 11.194 95.55947049999995 2.85 122.12255279999991 3.915 46.306248200000006 2.84 109.60213599999999 11.164 105.16064849999853 9.384 122.17742949999997 2.08 78.707418 11.155 65.55586830000003 2.089 116.37827499999997 4.079 65.1955113 2.05)
Error minima by case: (3.1635 1 0.0 0 3.0245 2 29.9755 2 41.9755 2 25.9755 1 0.0245 2 1.7429 9 12.0245 1 7.0 2 12.0 2 7.2973 1 10.3307 9 41.2974 10 9.0245 9 18.9755 1 35.9755 2 4.5945 1 7.2241 9 22.0047 8 44.9755 1 3.0245 9 15.0245 1 33.9755 2 16.5006 1)
Average genome size in population (length): 59.88
Average program size in population (points): 60.88
Average percent parens in population: 0.017
Minimum age in population: 42.06653381884098
Maximum age in population: 46.86095653288066
Average age in population: 44.9016760355942
Median age in population: 44.97224503476173
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.066
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 47950075
--- Timings ---
Current time: 1529615555295 milliseconds
Total Time:         116.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.0 seconds, 41.1%
Fitness Testing:     53.5 seconds, 45.9%
Report:              15.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction integer_rot} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_sin} {:instruction float_sub} {:instruction integer_mod} {:instruction in2} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction integer_add} {:instruction integer_div} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_dup_times} {:instruction integer_max} {:instruction in2} {:instruction integer_flush} {:instruction float_max} {:instruction integer_dup_items} {:instruction in1} {:instruction float_frominteger} {:instruction float_add} {:instruction float_rot} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_shove} {:instruction tagged_917} {:instruction integer_mult} {:instruction float_sin} {:instruction float_yank} {:instruction float_sub} {:instruction float_shove} {:instruction integer_rot} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 float_inc float_inc float_max integer_rot float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub integer_mod integer_add integer_yankdup float_add integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_div float_sin float_sub integer_mod in2 integer_add integer_yankdup float_add float_rot integer_add integer_div float_cos float_sub integer_mod float_sub float_rot float_sub integer_mod integer_mod float_sub float_rot integer_div float_dup_items float_cos float_dup_times integer_max in2 integer_flush float_max integer_dup_items in1 float_frominteger float_add float_rot float_yankdup integer_swap integer_mod integer_shove tagged_917 integer_mult float_sin float_yank float_sub float_shove integer_rot tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2352.35861330002
Median total errors in population: 1526.0293
Error averages by case: (86.48504519999997 2.888 34.95327029999998 1.225 82.07507319999996 3.95 116.00373979999996 3.912 125.63458040000003 3.224 102.92225870000007 2.91 76.18739559999997 3.016 99.8755007999999 12.041 67.22026939999998 2.966 48.91807429999998 3.113 50.504703099999986 3.132 95.9493207 3.147 124.67463050000006 12.907 128.23341489999993 12.145 70.48234539999999 11.171 95.73839439999992 2.894 119.4825456999999 3.96 45.15694060000001 2.87 107.41460479999998 11.161 102.16243379999848 9.36 121.35716849999996 2.118 75.69065610000003 11.155 63.634877100000026 2.132 114.82285599999997 4.175 63.07251400000002 2.134)
Error minima by case: (2.0619 1 0.0 0 3.0245 2 2.0309 2 40.9755 2 40.9336 1 16.7358 2 1.7429 9 19.4866 1 3.4957 2 12.0 2 6.2973 1 2.9539 8 33.9206 9 2.7947 7 25.3203 1 33.5582 2 6.3095 1 0.1526 9 22.0047 8 61.2171 1 3.0245 9 16.4866 1 32.9755 2 9.1238 1)
Average genome size in population (length): 59.197
Average program size in population (points): 60.197
Average percent parens in population: 0.017
Minimum age in population: 43.36196296662092
Maximum age in population: 48.30176942702383
Average age in population: 46.35744592710305
Median age in population: 46.38397101592273
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.076
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 49435400
--- Timings ---
Current time: 1529615558924 milliseconds
Total Time:         120.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.4 seconds, 41.1%
Fitness Testing:     55.2 seconds, 45.9%
Report:              15.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction in2} {:instruction float_mod} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction integer_div} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod in2 float_mod integer_yankdup float_add integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub float_dup_items float_tan float_rot integer_add integer_div integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2382.540867600022
Median total errors in population: 1526.0293
Error averages by case: (88.77491479999998 2.752 36.68725229999998 1.058 83.53672769999994 3.804 117.56254009999994 3.781 125.34739430000003 3.08 103.38084690000008 2.787 78.24197739999997 2.863 101.60498639999989 12.063 68.82853249999998 2.804 50.059680099999994 2.941 50.82993189999998 2.984 97.65519230000004 3.011 126.12817330000006 12.966 129.62181879999994 12.171 71.83742559999999 11.193 96.24037599999994 2.761 121.39470999999993 3.798 45.76483120000001 2.757 109.44278910000001 11.178 103.61885019999814 9.363 121.79225359999994 1.963 77.15316710000002 11.197 65.3363259 1.976 115.15184149999996 4.035 65.30432860000002 1.958)
Error minima by case: (3.1635 1 0.0 0 4.0245 2 10.1321 2 0.9617 2 40.9336 1 16.7358 2 3.7429 8 30.0 1 3.1365 2 12.0 2 0.1321 1 25.1321 8 28.1321 10 6.6118 9 25.3203 1 16.1321 2 8.0 1 11.0491 9 5.1321 8 61.2171 1 4.0245 9 27.0 1 33.8967 2 19.0245 1)
Average genome size in population (length): 58.958
Average program size in population (points): 59.958
Average percent parens in population: 0.017
Minimum age in population: 44.36196296662092
Maximum age in population: 49.83079353626817
Average age in population: 47.83691471015755
Median age in population: 47.88363296864554
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.067
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 50915025
--- Timings ---
Current time: 1529615562495 milliseconds
Total Time:         123.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.8 seconds, 41.0%
Fitness Testing:     56.8 seconds, 45.9%
Report:              16.1 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 40} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction integer_div} {:instruction integer_pop} {:instruction float_max} {:instruction 39} {:instruction float_rot} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction float_sub} {:instruction float_rot} {:instruction integer_dup_times} {:instruction integer_div} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_711})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank integer_stackdepth float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 40 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div integer_div integer_pop float_max 39 float_rot float_tan float_frominteger integer_add float_sub integer_mod float_sub float_rot float_swap float_dup_items float_rot integer_add float_sub integer_add float_sub float_rot integer_dup_times integer_div integer_add float_sub integer_yank float_sin tagged_711)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2402.450534300022
Median total errors in population: 1526.0293
Error averages by case: (89.33313979999994 2.802 37.257946899999986 1.101 83.79538219999996 3.848 117.82833119999995 3.826 127.38528480000002 3.077 104.56260070000005 2.797 78.9255923 2.918 102.40678119999991 12.063 69.67581439999998 2.863 50.3086403 2.981 52.9052005 2.984 98.5025483 3.0 126.93243350000003 12.953 129.78790779999994 12.165 72.17104419999998 11.18 97.31414909999994 2.775 121.4050584999999 3.87 47.0054114 2.751 110.27424569999998 11.172 104.46924609999864 9.337 122.93909559999996 1.981 78.0053975 11.166 66.17975700000004 2.019 117.16612989999999 4.048 64.21039540000001 2.026)
Error minima by case: (3.1635 1 0.0 0 5.0245 2 29.9755 2 87.0 2 40.9336 1 15.5934 2 4.7429 9 23.7114 1 5.0657 2 12.0 2 7.0531 1 24.8328 8 16.4051 10 8.6118 9 24.7426 1 27.8173 2 4.5945 1 12.3631 7 22.0047 8 61.2171 1 5.0245 9 7.5289 1 79.0 2 17.1239 1)
Average genome size in population (length): 59.771
Average program size in population (points): 60.771
Average percent parens in population: 0.017
Minimum age in population: 46.36500300699845
Maximum age in population: 51.34302378003486
Average age in population: 49.2939204890125
Median age in population: 49.36674146435689
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.884
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.884
Total error diversity:				 0.069
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 52414150
--- Timings ---
Current time: 1529615566190 milliseconds
Total Time:         127.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.3 seconds, 40.9%
Fitness Testing:     58.6 seconds, 45.9%
Report:              16.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction integer_swap} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mult} {:instruction 1.396628083909519} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_max} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_div} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_509} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction float_sub} {:instruction float_cos} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 integer_swap 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_inc float_inc integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_dup integer_mod integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc float_yankdup integer_mult 1.396628083909519 integer_fromfloat integer_dup_times in2 integer_add float_add float_max float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add integer_div float_inc integer_mod tag_float_509 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_cos float_rot integer_add float_sub integer_add float_sub float_cos float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 77
Size: 78
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2456.0929318000203
Median total errors in population: 1526.0293
Error averages by case: (90.78354860000002 2.954 38.928566399999966 1.291 86.80426179999998 3.987 120.44101119999993 3.964 128.89336490000005 3.236 105.61740510000007 2.93 80.50457780000002 3.081 104.82556759999986 12.06 71.54782279999993 3.028 54.18418159999998 3.154 54.12877389999999 3.132 100.97746730000001 3.156 129.50147360000005 12.93 132.32073229999997 12.159 74.94124430000001 11.19 98.43264959999992 2.907 123.97716219999992 4.008 48.287003 2.895 111.44394059999999 11.17 107.13222859999854 9.363 123.98336149999997 2.149 80.67950040000001 11.17 67.98202440000001 2.213 118.11227009999998 4.151 67.18179219999999 2.203)
Error minima by case: (2.0619 1 0.0 0 1.0 1 3.0309 2 0.9617 2 37.9336 1 16.7358 2 4.7429 10 30.0 1 7.0 2 12.0 2 6.2973 1 26.8328 2 47.9755 2 5.0 2 22.3203 1 35.9755 2 4.5945 1 12.3631 7 22.0047 8 58.2171 1 1.0 1 27.0 1 33.8967 2 14.0 1)
Average genome size in population (length): 59.334
Average program size in population (points): 60.334
Average percent parens in population: 0.017
Minimum age in population: 48.38858692813665
Maximum age in population: 52.80085562146269
Average age in population: 50.73105036481284
Median age in population: 50.77780648332555
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.07
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 53902400
--- Timings ---
Current time: 1529615569648 milliseconds
Total Time:         131.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.7 seconds, 41.0%
Fitness Testing:     60.2 seconds, 45.9%
Report:              17.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_shove} {:instruction in1} {:instruction float_yankdup} {:instruction integer_mult} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_sub} {:instruction integer_mod} {:instruction in2})
Best program: (float_sub float_flush float_sub integer_shove in1 float_yankdup integer_mult in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_sub integer_mod in2)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2475.010395900021
Median total errors in population: 1526.0293
Error averages by case: (92.50667929999994 2.81 39.817749799999994 1.078 86.56624469999996 3.828 120.39471799999998 3.8 128.1433342 3.137 106.48315150000005 2.84 81.70423559999998 2.902 106.30122119999993 12.086 71.69434379999997 2.873 54.0568677 2.972 53.720754799999995 3.046 102.39999880000002 3.079 130.63337840000003 12.967 133.89117459999997 12.176 76.62297749999998 11.216 99.52508829999996 2.804 124.86895069999996 3.849 49.00993629999999 2.81 113.36375779999997 11.202 108.41321779999886 9.378 124.78096059999996 2.023 81.93122960000001 11.178 68.38064190000001 2.013 117.69883469999998 4.108 69.93194829999999 1.994)
Error minima by case: (2.1635 1 0.0 0 5.0245 2 4.0309 2 42.9755 2 16.8718 1 15.7358 2 2.7429 9 12.6541 1 7.0 2 12.0 2 10.0531 1 29.8174 9 32.8174 10 5.1755 9 23.8718 1 20.8174 2 4.3095 1 8.8718 9 6.8467 8 2.1282 1 5.0245 7 9.6541 1 5.7931 2 2.2735 1)
Average genome size in population (length): 59.757
Average program size in population (points): 60.757
Average percent parens in population: 0.017
Minimum age in population: 49.39879198092967
Maximum age in population: 54.26058441156056
Average age in population: 52.16602991969942
Median age in population: 52.21373674063943
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.066
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 55401133
--- Timings ---
Current time: 1529615572955 milliseconds
Total Time:         134.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.1 seconds, 40.9%
Fitness Testing:     61.7 seconds, 45.9%
Report:              17.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction integer_sub} {:instruction integer_max} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_tan} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_add} {:instruction float_mult} {:instruction float_sub} {:instruction -14.555056876961146} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction 18} {:instruction float_flush} {:instruction integer_yankdup} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_add} {:instruction float_sub} {:instruction float_rot} {:instruction integer_add})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 integer_sub integer_max float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_tan float_sub integer_mod integer_yankdup integer_swap float_add float_mult float_sub -14.555056876961146 integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_frominteger integer_add float_sin integer_swap integer_yankdup float_add float_rot 18 float_flush integer_yankdup float_cos float_rot integer_add float_sub integer_add float_sub float_rot integer_add)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2325.043305700021
Median total errors in population: 1526.0293
Error averages by case: (85.80084019999997 2.81 33.794141799999984 1.112 80.52996929999995 3.857 114.56210149999994 3.81 123.85605540000003 3.126 101.69138150000006 2.814 75.30387439999998 2.91 99.53308919999992 12.065 65.96805199999996 2.871 47.23739199999998 2.997 48.95692269999997 3.04 95.53788380000002 3.062 124.22032740000006 12.947 127.66125059999993 12.17 69.78978449999998 11.189 94.57978619999993 2.791 118.39773679999989 3.859 43.90672730000002 2.783 106.75484689999996 11.18 101.71724039999881 9.357 120.13429479999998 1.996 75.09248330000001 11.181 62.444300700000014 2.037 113.32357109999994 4.095 62.22625190000001 1.964)
Error minima by case: (3.1635 1 0.0 0 3.0245 2 4.0309 2 41.9755 2 25.9755 1 0.0245 2 2.7429 8 12.0245 1 3.1365 2 6.7827 2 7.0531 1 28.0021 9 40.0926 9 4.1945 9 18.9755 1 28.0926 2 2.4037 1 11.0491 8 17.0926 8 44.9755 1 3.0245 9 15.0245 1 33.9755 2 18.0245 1)
Average genome size in population (length): 59.785
Average program size in population (points): 60.785
Average percent parens in population: 0.017
Minimum age in population: 50.65040794434026
Maximum age in population: 55.54499300263706
Average age in population: 53.61540270044006
Median age in population: 53.64408906131575
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.076
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 56899696
--- Timings ---
Current time: 1529615576469 milliseconds
Total Time:         137.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.6 seconds, 41.0%
Fitness Testing:     63.3 seconds, 45.9%
Report:              17.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction integer_swap} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_sub} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_max} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction float_add} {:instruction integer_mod} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction print_integer} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 integer_swap float_flush float_sub integer_yank float_stackdepth float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times integer_mod integer_yankdup integer_swap integer_mod float_frominteger float_sub integer_shove integer_yankdup integer_swap integer_mod float_max integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub float_add integer_mod float_rot float_swap float_dup_items float_cos float_rot integer_add print_integer integer_add float_sub integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2747.0791677000198
Median total errors in population: 1526.0293
Error averages by case: (102.37005469999995 2.984 50.5499287 1.317 97.10805839999992 4.035 130.54744599999992 4.012 140.23723169999988 3.365 117.25265690000008 3.045 91.93337389999996 3.116 117.15747699999989 12.095 82.46020659999995 3.065 64.72514219999996 3.194 66.75930259999998 3.261 113.17463820000003 3.286 141.3121935 12.971 143.97457429999997 12.198 87.4702526999999 11.239 109.77646229999992 3.021 134.51695479999992 4.045 60.90997210000002 3.021 122.90977249999999 11.232 119.3228083999983 9.449 135.4109486 2.264 93.27531870000001 11.23 79.11464630000005 2.234 129.91459609999998 4.24 78.75815049999996 2.218)
Error minima by case: (0.5226 1 0.0 0 2.0245 2 4.0309 2 29.4774 2 13.4774 1 12.5226 2 3.7429 10 5.8153 1 4.1288 2 11.0 2 7.2973 1 8.1911 9 25.1744 10 6.6118 9 6.4774 1 17.6399 2 4.3095 1 19.3877 7 6.6399 8 32.4774 1 2.0245 9 3.8843 1 21.4774 2 17.0245 1)
Average genome size in population (length): 58.903
Average program size in population (points): 59.903
Average percent parens in population: 0.017
Minimum age in population: 52.48683603972313
Maximum age in population: 57.18812388587685
Average age in population: 55.06763757305643
Median age in population: 55.07920134421147
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.071
Error (vector) diversity:			 0.076
Behavioral diversity:				 0.076
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 58375794
--- Timings ---
Current time: 1529615580173 milliseconds
Total Time:         141.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.2 seconds, 41.1%
Fitness Testing:     64.9 seconds, 45.8%
Report:              18.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_add} {:instruction float_sub} {:instruction float_rot} {:instruction integer_fromfloat})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup float_flush float_sub integer_yank float_stackdepth float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_dec print_float float_add print_float float_add float_div float_frominteger integer_pop integer_dup_times in2 integer_add float_add integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 integer_mult float_sub integer_add float_sub float_rot integer_fromfloat)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2454.172245900021
Median total errors in population: 1526.0293
Error averages by case: (91.9508389 2.84 39.74638969999999 1.145 85.47387539999998 3.86 119.25107609999993 3.836 128.8930929 3.23 106.63492550000002 2.852 81.32261189999998 2.95 104.01309679999993 12.073 71.72248699999994 2.893 52.66032949999998 3.022 54.121166899999956 3.126 99.97288720000002 3.164 128.57404690000004 12.953 131.94376189999997 12.191 74.55199259999998 11.223 99.60997829999998 2.827 123.33217709999992 3.877 49.0294336 2.819 112.90924919999999 11.215 106.24961929999854 9.373 124.97463419999995 2.056 79.86127330000002 11.206 68.27269930000003 2.064 118.19725619999994 4.128 67.88034619999999 2.1)
Error minima by case: (1.1635 1 0.0 0 3.0245 2 2.0309 2 41.9755 2 40.9336 1 11.5809 2 1.3563 7 11.0161 1 7.0 2 12.0 2 6.2973 1 13.3919 8 30.3752 9 6.6118 10 25.3203 1 35.9755 2 5.3095 1 12.0491 10 20.0491 8 61.2171 1 3.0245 9 5.1664 1 33.9755 2 16.5232 1)
Average genome size in population (length): 58.489
Average program size in population (points): 59.489
Average percent parens in population: 0.017
Minimum age in population: 53.54625291598495
Maximum age in population: 58.79382099526265
Average age in population: 56.50076591074328
Median age in population: 56.54178972712907
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.07
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 59841310
--- Timings ---
Current time: 1529615583757 milliseconds
Total Time:         145.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.7 seconds, 41.1%
Fitness Testing:     66.6 seconds, 45.9%
Report:              18.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction integer_fromfloat} {:instruction float_min} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction in2} {:instruction integer_dec} {:instruction integer_add} {:instruction float_sin} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_tan} {:instruction float_cos} {:instruction float_sub} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_swap} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float integer_fromfloat float_min integer_yankdup float_min integer_yankdup integer_swap in2 integer_dec integer_add float_sin float_yankdup integer_mod float_tan float_cos float_sub integer_add integer_mod integer_swap float_swap float_rot integer_add float_sub integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2459.1342806000216
Median total errors in population: 1526.0293
Error averages by case: (92.36745509999999 2.848 39.92841759999999 1.143 85.16976639999999 3.867 118.96644439999993 3.835 128.34627720000003 3.195 106.23037140000005 2.877 81.6901852 2.957 105.28996239999991 12.065 71.96886009999997 2.906 52.56385790000001 3.022 53.78721939999998 3.103 100.36794099999997 3.133 129.77873520000003 12.949 133.07224549999995 12.169 75.77617519999997 11.205 99.21276089999994 2.84 123.31988309999993 3.891 48.882974600000004 2.853 112.13521399999998 11.191 107.55116399999864 9.362 124.53735709999995 2.074 81.07361999999999 11.181 68.55595520000003 2.059 117.65971279999997 4.124 68.0337249 2.019)
Error minima by case: (3.1635 1 0.0 0 3.0245 2 2.0309 2 40.9755 2 14.9581 1 11.3563 2 1.7429 8 0.6437 2 4.1365 2 12.0 2 9.407 1 0.3364 8 17.3198 10 9.0245 10 6.3449 1 35.9755 3 5.3095 1 12.3631 9 22.0047 8 16.2417 1 3.0245 9 3.6437 1 32.9755 2 4.5014 1)
Average genome size in population (length): 58.513
Average program size in population (points): 59.513
Average percent parens in population: 0.017
Minimum age in population: 54.54625291598495
Maximum age in population: 59.99147124401861
Average age in population: 57.92268379373975
Median age in population: 57.95722950264644
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.067
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.069
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 61307252
--- Timings ---
Current time: 1529615587093 milliseconds
Total Time:         148.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.1 seconds, 41.1%
Fitness Testing:     68.1 seconds, 45.8%
Report:              19.2 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction print_float} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction integer_dec} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_yank} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_fromfloat})
Best program: (float_sub float_flush float_sub integer_yank float_sub print_float in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float integer_dec float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub integer_mod float_yank float_rot float_swap float_dup_items integer_fromfloat float_rot integer_fromfloat)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2506.870662100022
Median total errors in population: 1526.0293
Error averages by case: (94.00423759999998 2.706 40.410784500000005 0.965 86.34500569999996 3.732 120.42275489999999 3.711 130.2026201 2.979 107.97654620000003 2.724 83.10112999999997 2.787 108.99589869999993 12.118 72.8194425 2.763 53.10321269999998 2.895 56.77562699999998 2.892 105.01084480000003 2.907 133.0286571 13.009 135.40254810000002 12.221 78.06303249999998 11.244 100.24933249999998 2.693 125.12026939999996 3.733 50.96155000000002 2.692 114.95658649999999 11.2 110.79797739999847 9.395 126.31776159999998 1.906 84.21802160000001 11.226 69.62133320000001 1.905 120.80397169999998 3.937 67.94751579999999 1.874)
Error minima by case: (3.1635 1 0.0 0 3.0245 2 3.0309 2 87.0 2 37.9336 1 16.7358 2 3.7429 10 16.0924 1 4.4957 2 12.0 2 7.1895 1 44.9755 8 47.9755 10 9.0245 10 22.3203 1 35.9755 2 5.3095 1 20.3877 7 24.0047 8 58.2171 1 3.0245 9 27.0 1 79.0 2 18.0245 1)
Average genome size in population (length): 58.403
Average program size in population (points): 59.403
Average percent parens in population: 0.017
Minimum age in population: 55.84309764589125
Maximum age in population: 61.43945706963677
Average age in population: 59.33239312133705
Median age in population: 59.39308263306339
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.064
Error (vector) diversity:			 0.067
Behavioral diversity:				 0.067
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 62770269
--- Timings ---
Current time: 1529615590527 milliseconds
Total Time:         152.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.6 seconds, 41.2%
Fitness Testing:     69.7 seconds, 45.9%
Report:              19.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction in1} {:instruction float_yankdup} {:instruction float_sub} {:instruction in1} {:instruction float_min} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction integer_sub} {:instruction float_div} {:instruction integer_div} {:instruction integer_pop} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction print_float} {:instruction float_add} {:instruction float_add} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_rot} {:instruction float_dup} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub integer_yank float_sub in1 float_yankdup float_sub in1 float_min in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_max float_sub float_dec print_float integer_sub float_div integer_div integer_pop float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times print_float float_add float_add integer_mod integer_yankdup integer_pop integer_mod float_frominteger integer_add float_sin float_rot float_dup tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2472.582038000022
Median total errors in population: 1526.0293
Error averages by case: (91.69540289999998 2.727 39.12704899999999 0.991 86.44272889999996 3.754 120.29647889999993 3.733 128.25532310000003 3.05 106.83675460000008 2.737 81.00254219999997 2.813 106.84107439999991 12.103 71.25943249999995 2.772 53.05312429999998 2.888 54.268960199999945 2.967 102.8421001 2.992 131.12558 13.0 134.42455089999999 12.197 76.81671869999997 11.218 99.84510669999995 2.706 124.63361489999994 3.756 49.32113390000002 2.706 112.59351509999999 11.182 108.82291039999824 9.375 125.15339189999996 1.903 82.2583503 11.224 67.86130240000003 1.921 118.21896679999993 4.038 68.9379249 1.895)
Error minima by case: (3.1635 1 0.0 0 4.0245 2 1.0309 2 39.9755 2 40.9336 1 16.7358 2 4.4597 8 27.0 1 3.4957 2 12.0 2 7.2973 1 26.8328 9 47.9755 10 6.6118 10 25.3203 1 35.9755 2 4.3095 1 17.3877 7 22.0047 8 61.2171 1 4.0245 9 24.0 1 31.9755 2 19.0245 1)
Average genome size in population (length): 58.517
Average program size in population (points): 59.517
Average percent parens in population: 0.017
Minimum age in population: 56.84309764589125
Maximum age in population: 62.85328672387914
Average age in population: 60.76125120444867
Median age in population: 60.80268011310227
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.068
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 64236288
--- Timings ---
Current time: 1529615593885 milliseconds
Total Time:         155.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.0 seconds, 41.2%
Fitness Testing:     71.2 seconds, 45.8%
Report:              20.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sin} {:instruction float_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction print_float} {:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_add} {:instruction integer_swap} {:instruction in2} {:instruction float_cos} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_rot} {:instruction float_min} {:instruction in2} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction print_float} {:instruction float_sub} {:instruction float_dup} {:instruction float_swap} {:instruction integer_mod} {:instruction float_sub} {:instruction float_pop} {:instruction integer_div} {:instruction float_rot} {:instruction integer_yankdup} {:instruction tagged_37} {:instruction float_cos} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction integer_shove} {:instruction float_shove} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction tag_integer_859})
Best program: (float_sub float_flush float_sin float_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop print_float integer_mult integer_fromfloat integer_fromfloat float_pop in2 integer_add float_add float_rot float_add integer_swap in2 float_cos float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger float_rot float_min in2 integer_mod float_inc integer_mod tag_float_378 float_cos float_sub print_float float_sub float_dup float_swap integer_mod float_sub float_pop integer_div float_rot integer_yankdup tagged_37 float_cos float_frominteger integer_add float_sin integer_shove float_shove float_sin float_dup_items float_tan float_rot integer_add float_sub integer_yank tag_integer_859)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2636.855839600019
Median total errors in population: 1526.0293
Error averages by case: (97.70943029999995 2.983 46.0018232 1.337 93.84706219999995 4.047 127.40042619999996 4.004 136.24582229999996 3.29 113.95107900000006 3.005 87.59587159999998 3.119 111.04734229999994 12.109 78.83927439999994 3.06 60.96004509999999 3.196 62.154895900000014 3.198 107.25470920000002 3.194 135.63625900000002 12.957 139.1642437 12.205 82.07778699999997 11.236 106.83095629999994 2.978 130.6626974999999 4.052 56.912889600000014 2.97 118.3568186 11.214 113.30668579999848 9.45 132.14825989999994 2.217 87.17336420000002 11.2 75.27130330000001 2.25 125.76699089999998 4.247 74.8098021 2.212)
Error minima by case: (3.1635 1 0.0 0 3.0245 2 29.9755 2 87.0 2 40.9336 1 16.3855 1 1.7429 9 30.0 1 5.0 2 12.0 2 7.2973 1 25.8328 10 47.9755 10 7.6118 9 25.3203 1 35.9755 2 4.5945 1 17.3877 9 21.0491 8 61.2171 1 3.0245 9 27.0 1 79.0 2 18.0245 1)
Average genome size in population (length): 57.672
Average program size in population (points): 58.672
Average percent parens in population: 0.018
Minimum age in population: 59.50646434571536
Maximum age in population: 64.13521673809828
Average age in population: 62.19232935532591
Median age in population: 62.26353468835282
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.078
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 65680859
--- Timings ---
Current time: 1529615597762 milliseconds
Total Time:         159.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.6 seconds, 41.3%
Fitness Testing:     72.9 seconds, 45.8%
Report:              20.4 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction integer_dup_items} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_add} {:instruction float_sin} {:instruction float_frominteger} {:instruction float_add} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_rot} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction in2} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_frominteger} {:instruction integer_mod} {:instruction in2} {:instruction integer_flush} {:instruction tag_float_378} {:instruction float_cos} {:instruction integer_yankdup} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_add} {:instruction in2} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos})
Best program: (float_sub float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 integer_dup_items 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div float_add float_sin float_frominteger float_add float_yankdup float_yankdup integer_yank float_rot float_sub integer_pop integer_yankdup integer_swap float_div float_frominteger integer_pop integer_dup_times integer_yankdup integer_pop integer_shove integer_fromfloat float_mod in2 float_frominteger integer_add float_sin float_frominteger integer_mod in2 integer_flush tag_float_378 float_cos integer_yankdup float_add float_rot float_sub integer_mod integer_yankdup integer_swap float_tan float_frominteger float_add in2 float_inc integer_mod tag_float_378 float_cos)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 70
Size: 71
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2847.2531251000205
Median total errors in population: 1526.0293
Error averages by case: (107.36127829999994 2.983 55.65196490000001 1.271 100.73653269999997 3.993 133.96620719999996 3.979 143.59652429999994 3.328 122.02146970000005 3.003 96.86408339999994 3.081 120.25666479999992 12.226 87.33415029999995 3.033 68.3603139 3.151 70.33968669999997 3.231 116.35554790000002 3.256 144.32651829999995 13.087 147.61685669999997 12.322 91.06166599999995 11.35 114.46040149999995 2.953 138.06248859999997 3.998 65.48546060000002 2.974 127.7649562 11.328 122.39073759999803 9.541 140.03494300000003 2.176 96.3004746 11.331 83.96539170000005 2.2 133.24343459999994 4.232 83.50637159999992 2.162)
Error minima by case: (3.1635 1 0.0 0 3.0245 2 5.0309 2 43.9755 2 40.9336 1 16.7358 2 2.7429 8 30.0 1 1.2661 2 12.0 2 7.3354 1 26.8328 8 47.9755 10 6.6118 10 25.3203 1 3.3533 2 2.3095 1 17.3877 7 22.0047 8 61.2171 1 3.0245 9 27.0 1 35.9755 2 18.0245 1)
Average genome size in population (length): 57.334
Average program size in population (points): 58.334
Average percent parens in population: 0.018
Minimum age in population: 60.94994662021236
Maximum age in population: 65.6069085936906
Average age in population: 63.6486873662652
Median age in population: 63.71147848382975
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.074
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.085
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 67116785
--- Timings ---
Current time: 1529615601162 milliseconds
Total Time:         162.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.0 seconds, 41.2%
Fitness Testing:     74.4 seconds, 45.8%
Report:              21.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction tagged_773} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction integer_pop} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction integer_flush} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_add} {:instruction float_sin} {:instruction float_dup} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_sin} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction integer_mod} {:instruction tag_float_378} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction integer_mod} {:instruction float_sin})
Best program: (float_sub float_flush float_sub tagged_773 float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_div integer_pop integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_add integer_flush float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod integer_inc integer_add float_sin float_dup integer_mod tag_float_378 float_sin float_sin float_inc integer_mod integer_mod tag_float_378 integer_inc float_sub integer_mod float_sub float_rot float_swap integer_mod float_sin)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2603.630690600021
Median total errors in population: 1526.0293
Error averages by case: (96.23013589999992 2.857 45.16526940000001 1.214 93.42030819999991 3.904 126.98467129999992 3.871 133.7593692 3.169 111.31896050000009 2.854 86.01441649999995 2.977 111.0339826999999 12.096 77.21172849999992 2.909 60.153994699999984 3.061 59.51943559999996 3.06 107.07293290000004 3.108 135.5288224 12.962 139.04280829999993 12.202 81.74990919999993 11.229 104.21329909999996 2.818 130.39046509999986 3.884 54.46776670000001 2.822 116.38763210000002 11.181 113.17014889999842 9.41 129.55975439999995 2.057 86.95027730000001 11.218 73.58097610000006 2.111 123.09407139999993 4.139 74.39555419999995 2.101)
Error minima by case: (2.1635 1 0.0 0 3.0245 2 3.0309 2 2.0383 2 25.9755 1 0.0245 2 1.7429 9 12.0245 1 7.0 2 12.0 2 7.4894 1 26.8328 8 47.9755 11 6.6118 10 9.3096 1 35.9755 2 4.5945 1 11.0491 9 22.0047 8 44.9755 1 3.0245 9 15.0245 1 30.8967 2 18.0245 1)
Average genome size in population (length): 56.469
Average program size in population (points): 57.469
Average percent parens in population: 0.018
Minimum age in population: 62.4693841971075
Maximum age in population: 67.12016833575058
Average age in population: 65.11561123677976
Median age in population: 65.15571532882632
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.079
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 68530813
--- Timings ---
Current time: 1529615604876 milliseconds
Total Time:         166.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.4 seconds, 41.2%
Fitness Testing:     76.1 seconds, 45.8%
Report:              21.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction in1} {:instruction float_yankdup} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction float_min} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_sub} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction integer_sub} {:instruction float_div} {:instruction integer_div} {:instruction integer_pop} {:instruction float_max} {:instruction 39} {:instruction float_max} {:instruction integer_shove} {:instruction float_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction float_inc} {:instruction integer_mod} {:instruction float_sin} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_cos} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction float_flush} {:instruction integer_inc} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_fromfloat})
Best program: (float_sub float_flush float_sub integer_yank float_sub in1 float_yankdup float_sub integer_yank float_sub float_min in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_sub float_inc float_inc float_max float_max float_sub float_dec print_float integer_sub float_div integer_div integer_pop float_max 39 float_max integer_shove float_inc float_sub integer_mod float_inc integer_mod float_sin float_inc integer_fromfloat float_tan float_cos float_inc integer_mod tag_float_378 float_mult integer_yankdup integer_swap float_flush integer_inc integer_add integer_mod integer_fromfloat)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2780.5143626000204
Median total errors in population: 1526.0293
Error averages by case: (104.16053429999998 2.905 52.1035062 1.235 99.15669479999995 3.949 132.60741929999995 3.932 140.5805429 3.243 118.09480770000003 2.877 93.67469629999998 3.02 118.7749091999999 12.142 84.17604209999996 2.969 66.37468009999999 3.112 67.01476879999997 3.132 114.83311780000002 3.177 142.86709550000006 13.039 145.51583370000003 12.264 88.80645759999997 11.288 111.07393559999998 2.843 136.65213179999998 3.951 61.51771269999999 2.854 124.56175520000001 11.247 120.92039199999826 9.461 136.16972559999994 2.093 94.6832276 11.283 80.78605570000002 2.154 130.15438679999994 4.167 80.75993329999999 2.157)
Error minima by case: (3.1635 1 0.0 0 3.0245 2 3.0309 2 2.0383 2 40.9336 1 16.7358 2 4.7429 10 30.0 1 7.0 2 10.0 1 7.3354 1 26.8328 9 47.9755 10 6.6118 10 24.7426 1 35.9755 2 4.5945 1 11.0491 7 21.9847 8 61.2171 1 3.0245 9 27.0 1 30.8967 2 17.1239 1)
Average genome size in population (length): 56.201
Average program size in population (points): 57.201
Average percent parens in population: 0.018
Minimum age in population: 63.8611544704263
Maximum age in population: 68.83120514593378
Average age in population: 66.56865450210891
Median age in population: 66.64423921189444
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.065
Error (vector) diversity:			 0.071
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 69937637
--- Timings ---
Current time: 1529615608349 milliseconds
Total Time:         169.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.9 seconds, 41.1%
Fitness Testing:     77.8 seconds, 45.8%
Report:              22.1 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_dec} {:instruction float_mult} {:instruction in1} {:instruction float_yankdup} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_add} {:instruction float_dup} {:instruction float_inc} {:instruction float_tan} {:instruction tag_float_378} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction tag_integer_859} {:instruction tagged_893})
Best program: (float_sub float_flush float_dec float_mult in1 float_yankdup in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc float_inc float_inc float_max float_sub float_dec float_yankdup float_frominteger float_frominteger print_float integer_dup_items print_float integer_dup_times float_dup_items float_tan integer_stackdepth integer_add integer_dup_items integer_yank integer_mod float_dec integer_add float_dup float_inc float_tan tag_float_378 float_sin float_inc integer_mod float_sin float_dup_items float_tan float_rot integer_add float_sub integer_yank tag_integer_859 tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2487.0663336000207
Median total errors in population: 1526.0293
Error averages by case: (91.98154589999996 2.899 40.22218189999999 1.221 88.11794429999999 3.921 121.53073009999994 3.898 129.39936240000003 3.252 106.89948060000002 2.898 81.66019739999997 3.017 106.2520215999999 12.119 72.76991899999993 2.953 55.15437970000001 3.091 55.063438999999974 3.167 102.34835380000003 3.194 130.88509950000002 12.978 134.30631439999996 12.217 76.82971889999997 11.25 99.17735939999997 2.862 125.16587329999993 3.93 49.814622899999996 2.863 112.40965489999999 11.236 108.54880379999868 9.384 125.22322299999995 2.095 82.14479250000001 11.25 69.09266890000004 2.135 118.60477029999996 4.215 69.29787609999998 2.121)
Error minima by case: (3.1635 1 0.0 0 3.0245 2 2.0309 2 0.0383 2 2.3806 1 16.7358 2 1.7429 9 30.0 1 4.4957 2 0.8961 2 4.6644 1 25.9505 9 32.6644 10 1.6118 10 4.6194 1 0.3533 2 4.3095 1 10.3806 8 9.6644 8 21.3806 1 3.0245 9 27.0 1 13.3806 2 18.0245 1)
Average genome size in population (length): 55.814
Average program size in population (points): 56.814
Average percent parens in population: 0.018
Minimum age in population: 64.8611544704263
Maximum age in population: 70.34996834226803
Average age in population: 68.01231125205348
Median age in population: 68.04031391195151
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.086
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 71334647
--- Timings ---
Current time: 1529615611662 milliseconds
Total Time:         173.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.3 seconds, 41.2%
Fitness Testing:     79.3 seconds, 45.8%
Report:              22.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_dup_times} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_yankdup} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_rot} {:instruction float_sub} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_mod} {:instruction float_yank} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_fromfloat})
Best program: (float_sub float_flush float_sub integer_dup_times in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_yankdup float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times integer_rot integer_add float_add float_rot float_rot float_sub float_sin float_inc integer_mod float_sub integer_mod float_yank float_rot float_swap float_dup_items integer_fromfloat float_rot integer_fromfloat)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2657.0823256000235
Median total errors in population: 1526.0293
Error averages by case: (100.64239479999996 2.874 48.33381740000001 1.157 93.94079049999996 3.896 127.35385289999994 3.872 135.19423799999998 3.118 113.30085450000003 2.804 90.17030929999997 2.975 113.64582449999995 12.124 80.77975489999996 2.93 61.06226629999998 3.047 61.921999899999975 3.032 108.72332270000001 3.051 137.63978010000002 13.012 140.29585769999997 12.214 83.26059719999996 11.236 106.24326719999998 2.766 131.34145049999992 3.887 56.488670400000004 2.786 119.9714467 11.2 115.52415939999827 9.402 131.4824458 1.986 89.19536389999999 11.229 77.31134240000003 2.101 125.34543739999997 4.062 75.10108119999997 2.051)
Error minima by case: (3.1635 1 0.0 0 3.0245 2 4.0309 2 0.0383 2 39.9336 1 16.7358 2 4.7429 9 0.3986 1 7.0 2 11.0 2 7.0531 1 25.8328 9 37.284 10 7.6118 10 20.3977 1 25.284 2 3.3095 1 10.0491 7 14.284 8 60.2171 1 3.0245 9 15.7838 1 32.8967 2 18.0245 1)
Average genome size in population (length): 55.207
Average program size in population (points): 56.207
Average percent parens in population: 0.018
Minimum age in population: 66.8012900543917
Maximum age in population: 71.47717344229544
Average age in population: 69.45917638742316
Median age in population: 69.54144747899824
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.075
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 72716773
--- Timings ---
Current time: 1529615615203 milliseconds
Total Time:         176.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.8 seconds, 41.2%
Fitness Testing:     80.9 seconds, 45.8%
Report:              22.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction integer_add} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction integer_add} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_inc} {:instruction float_inc} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_div} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction print_float} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_mult} {:instruction 1.396628083909519} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction float_dup} {:instruction float_swap} {:instruction float_flush} {:instruction float_cos} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_pop} {:instruction float_sin})
Best program: (float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 integer_add 45.024537355588535 float_min integer_dup_items float_inc integer_add integer_min float_inc float_inc float_max float_sub float_dec print_float float_add float_inc float_inc integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 integer_dup integer_mod float_div integer_yankdup integer_swap print_float float_frominteger integer_add float_sin float_inc float_yankdup integer_mult 1.396628083909519 integer_fromfloat integer_inc float_dup float_swap float_flush float_cos float_inc integer_yankdup integer_swap integer_mod float_frominteger float_pop float_sin)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2600.742470700021
Median total errors in population: 1526.0293
Error averages by case: (97.14382949999998 2.94 45.19359630000001 1.247 92.14288769999996 3.984 125.63579349999996 3.945 134.4325364 3.231 111.90892290000005 2.938 86.78498979999998 3.042 110.0490625999999 12.141 77.66090049999997 3.002 59.162562299999976 3.121 60.747381099999984 3.135 107.0536036 3.151 134.25472000000002 12.989 137.03503549999994 12.226 79.86487999999996 11.242 104.77565559999995 2.895 129.4389166999999 3.979 54.92689270000001 2.886 118.70804159999996 11.246 112.09144829999829 9.412 130.14271969999993 2.116 85.69839160000001 11.234 74.16010280000002 2.167 124.28253449999998 4.157 72.8770655 2.144)
Error minima by case: (3.1635 1 0.0 0 3.0245 2 2.0309 2 40.9755 2 40.9336 1 16.7358 2 1.7429 11 30.0 1 2.2876 2 11.0 2 7.0531 1 11.5391 8 19.4275 10 6.6118 9 25.3203 1 35.9755 2 4.3095 1 12.3631 8 20.0491 8 61.2171 1 3.0245 8 27.0 1 32.9755 2 5.3692 1)
Average genome size in population (length): 55.065
Average program size in population (points): 56.065
Average percent parens in population: 0.019
Minimum age in population: 68.60794727455041
Maximum age in population: 73.15605920005525
Average age in population: 70.9120302015315
Median age in population: 70.97251510289259
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.856
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.856
Total error diversity:				 0.08
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 74095350
--- Timings ---
Current time: 1529615618620 milliseconds
Total Time:         180.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.3 seconds, 41.3%
Fitness Testing:     82.4 seconds, 45.8%
Report:              23.2 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sin} {:instruction integer_yank} {:instruction in1} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 38} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction integer_pop} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_times} {:instruction float_swap} {:instruction integer_add} {:instruction float_dup_items} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction float_dup} {:instruction float_sub} {:instruction float_rot} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction tag_integer_859} {:instruction tagged_893})
Best program: (float_sub float_flush float_sin integer_yank in1 float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 38 integer_dup_items float_inc float_inc float_max float_sub float_dec integer_pop print_float float_add integer_dup_times float_swap integer_add float_dup_items float_div float_frominteger integer_add integer_yankdup float_add integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_sin float_inc integer_mod float_dup float_sub float_rot float_sin float_dup_items float_tan float_rot integer_add float_sub integer_yank tag_integer_859 tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2636.6342965000217
Median total errors in population: 1526.0293
Error averages by case: (99.817646 2.86 47.166023199999984 1.13 92.82030629999998 3.858 126.41165589999997 3.841 134.76586709999998 3.134 112.79546720000003 2.823 89.15522729999996 2.954 112.45756649999993 12.155 79.43749169999997 2.917 60.246248699999974 3.036 61.28419219999998 3.044 108.53991990000004 3.075 136.29769200000004 13.019 138.94532849999993 12.247 81.9585428 11.275 105.75679669999995 2.796 130.66167399999995 3.883 55.8623394 2.804 120.4127077 11.251 114.29355749999813 9.446 130.9934917 2.032 87.90104740000001 11.256 76.07813930000003 2.076 124.82266719999997 4.062 74.75970029999998 2.019)
Error minima by case: (3.1635 1 0.0 0 3.0245 2 3.0309 2 2.0383 2 25.9755 1 0.0245 2 4.7429 9 12.0245 1 7.0 2 10.0 1 7.0531 1 24.8328 8 47.9755 10 2.1945 10 18.9755 1 35.9755 2 5.3095 1 20.3877 9 21.8019 8 44.9755 1 3.0245 9 15.0245 1 30.8967 2 18.0245 1)
Average genome size in population (length): 54.775
Average program size in population (points): 55.775
Average percent parens in population: 0.019
Minimum age in population: 69.70579221930348
Maximum age in population: 74.21875762605424
Average age in population: 72.3742566007749
Median age in population: 72.39789033641833
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.072
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 75466114
--- Timings ---
Current time: 1529615622076 milliseconds
Total Time:         183.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.8 seconds, 41.3%
Fitness Testing:     83.9 seconds, 45.7%
Report:              23.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction float_mod} {:instruction in1} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_rot} {:instruction integer_mult} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction float_rot} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction float_pop} {:instruction tagged_729} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction integer_mod} {:instruction integer_shove} {:instruction float_rot} {:instruction float_sin} {:instruction float_rot})
Best program: (float_sub float_flush float_sub float_mod in1 float_yankdup float_yankdup float_sub integer_yank in1 float_rot integer_mult float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min float_rot float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add integer_dup_times in2 integer_add float_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times in2 float_pop tagged_729 integer_yankdup float_add integer_mod integer_yankdup integer_pop integer_mod integer_shove float_rot float_sin float_rot)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2670.57932610002
Median total errors in population: 1526.0293
Error averages by case: (100.21334959999993 2.952 48.940007400000006 1.305 93.99920899999998 3.972 127.62926629999994 3.956 137.8646016 3.341 115.16278970000005 2.94 89.88310129999996 3.06 112.39290619999989 12.165 80.63128149999994 3.013 61.18964899999998 3.149 63.686990299999984 3.242 108.35884530000003 3.287 136.93483160000002 13.04 140.28450179999996 12.27 83.33836009999992 11.29 107.77536699999995 2.925 131.34321659999992 3.984 58.52354170000001 2.927 120.66231309999998 11.274 114.74848259999828 9.433 133.36094109999996 2.155 88.5835894 11.294 77.21202190000004 2.2 127.08052519999995 4.299 75.11863679999998 2.188)
Error minima by case: (0.1635 1 0.0 0 6.0245 2 29.9755 2 86.0 2 0.8379 1 13.7358 2 1.7429 8 30.0 1 1.1019 2 11.0 2 7.4894 1 25.8328 9 47.9755 9 6.6118 9 16.4511 1 35.9755 2 8.0 1 19.3877 10 20.0491 8 19.4456 1 5.3744 9 27.0 1 40.3073 2 21.0245 1)
Average genome size in population (length): 54.483
Average program size in population (points): 55.483
Average percent parens in population: 0.019
Minimum age in population: 71.14237233076517
Maximum age in population: 75.78448156237172
Average age in population: 73.79835757336943
Median age in population: 73.82255350832718
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.077
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 76829502
--- Timings ---
Current time: 1529615625619 milliseconds
Total Time:         187.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.4 seconds, 41.4%
Fitness Testing:     85.4 seconds, 45.6%
Report:              24.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction float_flush} {:instruction float_mult} {:instruction integer_shove} {:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_add} {:instruction float_dec} {:instruction print_float} {:instruction print_integer} {:instruction integer_pop} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_add} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_div} {:instruction float_add} {:instruction float_add} {:instruction integer_mod} {:instruction tag_float_509} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_sub} {:instruction print_float} {:instruction float_shove} {:instruction float_rot} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_rot} {:instruction float_swap} {:instruction integer_stackdepth} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add})
Best program: (float_sub float_sub float_flush float_mult integer_shove float_sub float_flush float_sub integer_pop in1 float_yankdup integer_yank float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_add float_dec print_float print_integer integer_pop float_dup_items float_sub float_add integer_mult integer_shove integer_fromfloat float_add float_div float_add float_add integer_mod tag_float_509 float_cos float_sub integer_mod float_sub float_rot float_swap float_dup_items float_sub print_float float_shove float_rot integer_mod float_frominteger integer_add float_sub integer_mod float_sub float_rot float_swap integer_stackdepth float_cos float_rot integer_add)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2734.3730356000206
Median total errors in population: 1526.0293
Error averages by case: (101.32643859999993 2.982 49.4045543 1.292 98.31450949999994 3.993 131.65549169999997 3.98 138.1346505 3.299 115.55779880000003 2.968 90.91451019999997 3.094 117.33692999999991 12.18 81.56439979999995 3.04 65.82274039999999 3.149 64.41290519999997 3.205 113.40919600000001 3.234 141.6346905 13.051 144.3206044 12.28 87.63057949999994 11.302 108.50007459999999 2.935 135.60559619999998 3.998 58.836666300000005 2.954 121.8988799 11.296 119.60864249999823 9.505 133.70505419999995 2.155 93.37750050000001 11.309 78.13811490000003 2.217 127.69086939999995 4.229 79.72063769999995 2.204)
Error minima by case: (0.2665 1 0.0 0 3.0245 2 2.0309 2 0.0383 2 40.9336 1 13.8388 2 1.5826 10 29.0 1 7.0 2 11.0 2 6.2973 1 44.7697 8 47.7697 10 9.0245 10 21.7581 1 35.7697 2 4.3095 1 20.3877 7 22.0784 8 61.2171 1 3.0245 8 26.0 1 32.8967 2 17.1239 1)
Average genome size in population (length): 54.177
Average program size in population (points): 55.177
Average percent parens in population: 0.019
Minimum age in population: 72.56435075481308
Maximum age in population: 77.25578823953056
Average age in population: 75.26856205874947
Median age in population: 75.34084228293493
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.075
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 78185352
--- Timings ---
Current time: 1529615629088 milliseconds
Total Time:         190.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.9 seconds, 41.4%
Fitness Testing:     86.9 seconds, 45.6%
Report:              24.5 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction in1} {:instruction float_yankdup} {:instruction float_sub} {:instruction integer_yank} {:instruction integer_flush} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction integer_mult} {:instruction float_div} {:instruction integer_div} {:instruction integer_pop} {:instruction float_rot} {:instruction 39} {:instruction float_max} {:instruction float_min} {:instruction float_min} {:instruction float_min} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_yankdup} {:instruction float_swap} {:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_yankdup})
Best program: (float_sub float_flush float_sub integer_yank in1 float_flush float_sub integer_yank float_sub in1 float_yankdup float_sub integer_yank integer_flush integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float integer_mult float_div integer_div integer_pop float_rot 39 float_max float_min float_min float_min float_yankdup float_frominteger integer_min float_yankdup float_swap float_sub integer_dup_times integer_yankdup)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2772.397118600022
Median total errors in population: 1526.0293
Error averages by case: (104.19664289999996 2.944 52.132894000000015 1.237 98.67253299999994 3.927 132.00327399999995 3.922 141.09626479999991 3.252 118.44020610000003 2.917 93.77565889999997 3.033 117.76519949999991 12.254 84.49578819999994 2.973 65.88322429999997 3.102 67.65614739999997 3.173 113.9565715 3.192 141.45508589999997 13.103 144.25288469999995 12.348 87.59176489999994 11.365 110.65511099999995 2.864 135.77106879999994 3.928 61.8118636 2.891 124.4682969 11.353 119.6051679999983 9.507 136.54024740000003 2.095 93.5380765 11.363 81.00592970000004 2.162 130.75309569999996 4.178 79.62712089999998 2.164)
Error minima by case: (3.1635 1 0.0 0 5.0245 2 3.0309 2 41.9755 2 40.9336 1 16.7358 2 2.7429 8 11.0161 1 3.4957 2 12.0 2 7.2973 1 13.3919 9 30.3752 10 6.6118 10 24.7426 1 35.9755 2 3.3095 1 20.3877 10 20.0491 8 61.2171 1 5.0245 9 5.1664 1 33.9755 2 16.5232 1)
Average genome size in population (length): 53.752
Average program size in population (points): 54.752
Average percent parens in population: 0.019
Minimum age in population: 73.58677401508541
Maximum age in population: 78.5721764052456
Average age in population: 76.68396552834932
Median age in population: 76.7321964241787
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.074
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.079
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 79530152
--- Timings ---
Current time: 1529615632652 milliseconds
Total Time:         194.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.6 seconds, 41.5%
Fitness Testing:     88.4 seconds, 45.5%
Report:              25.0 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yankdup} {:instruction float_pop} {:instruction float_flush} {:instruction float_swap} {:instruction integer_yank} {:instruction in1} {:instruction integer_flush} {:instruction integer_mult} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_swap} {:instruction float_dec} {:instruction print_float} {:instruction integer_dec} {:instruction float_div} {:instruction float_add} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_yank} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_div} {:instruction float_add} {:instruction float_swap} {:instruction float_sub} {:instruction integer_add} {:instruction integer_yankdup})
Best program: (float_yankdup float_pop float_flush float_swap integer_yank in1 integer_flush integer_mult in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_yankdup float_inc float_inc float_max float_sub float_swap float_dec print_float integer_dec float_div float_add float_yankdup float_yankdup integer_yank float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_add float_div float_add float_swap float_sub integer_add integer_yankdup)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2796.615471200022
Median total errors in population: 1526.0293
Error averages by case: (104.48791960000001 2.988 53.1360296 1.339 100.30817139999996 4.058 133.6661397999999 4.027 142.13965629999998 3.303 119.19170880000006 2.978 94.28010769999997 3.1 118.30152599999987 12.129 85.32803659999995 3.068 67.27204669999998 3.211 68.56723999999996 3.209 114.43003720000003 3.247 142.49922830000008 13.025 145.37911799999992 12.246 88.63441679999997 11.27 112.02180759999996 2.947 137.16741449999992 4.053 62.69210240000001 2.956 124.8401695 11.229 120.38270499999804 9.482 137.27882659999997 2.173 94.42477980000004 11.271 81.83133960000004 2.241 131.64654089999993 4.235 80.72240249999996 2.201)
Error minima by case: (1.3693 1 0.0 0 3.0245 2 4.0309 2 42.9755 2 40.9336 1 11.5809 2 1.3563 8 16.2783 1 3.1365 2 12.0 2 7.0531 1 18.654 9 35.6374 9 5.1945 9 14.0528 1 35.9755 2 4.3095 1 20.3877 10 17.7577 8 61.2171 1 3.0245 9 0.0958 1 34.9755 2 11.261 1)
Average genome size in population (length): 52.875
Average program size in population (points): 53.875
Average percent parens in population: 0.019
Minimum age in population: 75.35054251442045
Maximum age in population: 80.0081728917633
Average age in population: 78.17586425206511
Median age in population: 78.1901635071003
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.083
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 80852877
--- Timings ---
Current time: 1529615635989 milliseconds
Total Time:         197.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.0 seconds, 41.5%
Fitness Testing:     89.9 seconds, 45.5%
Report:              25.4 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup_items} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_max} {:instruction float_sub} {:instruction float_swap} {:instruction integer_sub} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_add} {:instruction float_mod} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_yank} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_add} {:instruction float_sin} {:instruction tag_integer_46} {:instruction float_mod} {:instruction float_add} {:instruction float_rot} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod})
Best program: (float_sub float_sub integer_yank in1 float_yankdup integer_yankdup in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float integer_dup_items float_sub float_dec print_float float_max float_sub float_swap integer_sub print_float float_add float_div float_add float_mod integer_mod float_sub integer_yank float_swap float_dup_items float_cos float_rot integer_add integer_mod integer_yankdup integer_swap integer_mod integer_inc integer_add float_sin tag_integer_46 float_mod float_add float_rot float_sub integer_mod integer_yankdup integer_swap integer_mod)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2711.125868400021
Median total errors in population: 1526.0293
Error averages by case: (101.24481109999995 2.911 49.276759200000015 1.236 96.59151329999993 3.944 130.05500789999994 3.929 138.0520956 3.254 115.44246210000004 2.907 90.78197419999995 3.024 115.7971734999999 12.191 81.37434479999996 2.965 63.74693669999999 3.101 64.41837999999994 3.152 111.83194069999998 3.186 139.90209750000002 13.055 142.63661129999997 12.288 85.80875549999995 11.309 108.37707259999998 2.868 133.91743649999992 3.943 58.7863609 2.889 121.72367580000001 11.28 117.85056829999837 9.463 133.59233159999994 2.099 91.6603042 11.314 77.95780070000002 2.153 127.72698319999995 4.17 77.83047119999998 2.111)
Error minima by case: (2.1635 1 0.0 0 3.0245 2 6.0309 2 41.9755 2 25.9755 1 0.0245 2 1.7429 11 11.0161 1 7.0 2 12.0 2 7.4894 1 13.3919 8 30.3752 10 6.6118 10 18.9755 1 3.3533 2 2.3095 1 18.3877 9 20.0491 8 44.9755 1 3.0245 9 5.1664 1 33.9755 2 16.5232 1)
Average genome size in population (length): 52.787
Average program size in population (points): 53.787
Average percent parens in population: 0.019
Minimum age in population: 76.65675914268107
Maximum age in population: 81.57472227994941
Average age in population: 79.64035860011055
Median age in population: 79.70176076097876
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.07
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.077
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 82173552
--- Timings ---
Current time: 1529615639358 milliseconds
Total Time:         200.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.6 seconds, 41.6%
Fitness Testing:     91.4 seconds, 45.5%
Report:              25.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_shove} {:instruction in1} {:instruction float_yankdup} {:instruction integer_mult} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_dec} {:instruction float_add} {:instruction float_add} {:instruction float_div} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction print_float} {:instruction float_add} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_yank} {:instruction float_rot} {:instruction float_swap} {:instruction float_inc} {:instruction in2} {:instruction integer_add} {:instruction float_dup})
Best program: (float_sub float_flush float_sub integer_shove in1 float_yankdup integer_mult in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_sub float_dec print_float float_add float_dec float_add float_add float_div float_dec print_float float_add print_float float_add float_cos float_sub integer_mod float_yank float_rot float_swap float_inc in2 integer_add float_dup)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3106.995672300021
Median total errors in population: 1526.0293
Error averages by case: (117.07488709999997 3.125 66.38140590000002 1.451 111.38625899999997 4.133 144.22268950000003 4.133 153.24245789999992 3.435 132.24399670000005 3.119 106.81290179999995 3.24 130.50466999999992 12.232 97.56153139999996 3.194 79.17148660000001 3.314 81.20639550000003 3.331 126.70174970000004 3.334 154.23574499999998 13.08 157.5123157 12.329 101.55636379999994 11.352 125.41754569999995 3.085 148.20838549999993 4.141 76.31371300000008 3.087 137.4980191 11.352 132.54710509999816 9.579 150.0502967 2.329 106.74262740000002 11.358 94.21265420000006 2.366 143.38103419999996 4.348 94.04143579999995 2.321)
Error minima by case: (2.9746 1 0.0 0 3.0245 2 3.0309 2 0.9617 2 40.9336 1 15.7541 2 2.7429 8 28.0 1 4.1288 2 8.0816 2 7.0531 1 26.8328 8 47.9755 10 6.6118 9 25.3203 1 23.4349 2 2.3095 1 18.3877 7 23.0047 8 61.2171 1 3.0245 9 25.0 1 33.8967 2 0.5557 1)
Average genome size in population (length): 52.663
Average program size in population (points): 53.663
Average percent parens in population: 0.019
Minimum age in population: 78.38754796789127
Maximum age in population: 83.15356505291277
Average age in population: 81.06834458160911
Median age in population: 81.11864880861302
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.843
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.843
Total error diversity:				 0.079
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 83491052
--- Timings ---
Current time: 1529615642733 milliseconds
Total Time:         204.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.1 seconds, 41.7%
Fitness Testing:     92.8 seconds, 45.5%
Report:              26.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction float_sub} {:instruction float_sub} {:instruction float_flush} {:instruction integer_mod} {:instruction float_sub} {:instruction float_flush} {:instruction float_sin} {:instruction integer_yank} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_flush} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dec} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction integer_mult} {:instruction float_sub} {:instruction float_dec} {:instruction float_div} {:instruction float_add} {:instruction float_div} {:instruction integer_yank} {:instruction float_sin} {:instruction tagged_893})
Best program: (float_sub float_flush float_sub float_sub float_sub float_flush integer_mod float_sub float_flush float_sin integer_yank in1 integer_stackdepth integer_flush in1 float_yankdup 45.024537355588535 float_min integer_dec float_inc 39 integer_dup_items float_inc float_inc float_max float_max float_sub float_dec print_float integer_mult float_sub float_dec float_div float_add float_div integer_yank float_sin tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 3218.4809734000196
Median total errors in population: 1526.0293
Error averages by case: (121.92622829999993 3.194 71.76688320000002 1.578 115.73699089999994 4.243 148.39105989999996 4.216 157.27115299999994 3.481 136.64603810000006 3.187 111.74884569999993 3.319 134.7095874999999 12.238 102.68192839999995 3.268 83.65742859999999 3.416 85.85745790000001 3.378 130.8699669 3.403 158.16388800000004 13.09 161.3767523 12.35 105.70009759999995 11.386 129.19220729999995 3.148 152.17536619999993 4.232 81.28755030000004 3.168 141.95527999999996 11.346 136.6083184999978 9.605 154.35607349999998 2.409 110.8954177 11.401 99.31864540000004 2.471 147.61201840000004 4.401 98.22078979999995 2.427)
Error minima by case: (0.1635 1 0.0 0 3.0245 2 2.0309 2 0.9617 2 25.9755 1 0.0245 2 1.3563 9 9.0245 1 2.4157 2 9.7827 1 7.0531 1 16.3919 8 33.3752 9 9.0245 10 18.9755 1 0.3533 2 5.3095 1 19.3877 8 20.0198 7 44.9755 1 3.0245 9 2.1664 1 32.9755 2 13.5232 1)
Average genome size in population (length): 52.573
Average program size in population (points): 53.573
Average percent parens in population: 0.020
Minimum age in population: 80.24086677835425
Maximum age in population: 84.60357126188094
Average age in population: 82.53087450214028
Median age in population: 82.53236332240513
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.084
Error (vector) diversity:			 0.095
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 84806277
--- Timings ---
Current time: 1529615646244 milliseconds
Total Time:         207.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.6 seconds, 41.7%
Fitness Testing:     94.5 seconds, 45.5%
Report:              26.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction in1} {:instruction float_dup_items} {:instruction integer_yank} {:instruction -20} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_shove} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_inc} {:instruction integer_add} {:instruction float_rot} {:instruction integer_add} {:instruction float_sub} {:instruction integer_yank} {:instruction tag_integer_859} {:instruction tagged_893})
Best program: (float_sub integer_dup_times integer_yank in1 float_dup_items integer_yank -20 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc float_shove integer_dup_items float_inc float_inc float_max float_sub float_max float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_mult float_frominteger integer_pop integer_shove integer_fromfloat integer_dup_times in2 integer_add float_add float_inc integer_add float_rot integer_add float_sub integer_yank tag_integer_859 tagged_893)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 2640.399340400023
Median total errors in population: 1526.0293
Error averages by case: (99.05329249999998 2.813 46.35442730000001 1.075 92.57317149999996 3.826 126.19834239999993 3.798 135.4956725 3.042 113.64867740000003 2.769 88.42791119999998 2.9 113.71823839999996 12.196 78.72814159999997 2.859 59.61752409999999 2.968 61.5131823 2.97 109.93007200000002 2.984 137.32335820000003 13.08 139.95084439999994 12.282 83.03657309999998 11.3 105.91350279999996 2.728 130.36674259999995 3.827 56.69707400000001 2.754 119.56159140000001 11.276 114.79456739999848 9.435 131.81654369999998 1.935 89.04519429999999 11.298 75.34107600000002 2.01 124.95750239999997 3.986 74.22711689999998 1.998)
Error minima by case: (2.1635 1 0.0 0 3.0245 2 3.0309 2 41.9755 2 40.9336 1 15.7358 2 3.7429 9 16.8413 1 6.0 2 9.7827 1 8.4894 1 14.4656 9 2.5178 10 6.6118 9 20.3977 1 35.9755 2 3.3095 1 11.0491 10 22.0047 8 61.2171 1 3.0245 9 26.0 1 33.9755 2 18.0245 1)
Average genome size in population (length): 52.343
Average program size in population (points): 53.343
Average percent parens in population: 0.020
Minimum age in population: 81.24086677835425
Maximum age in population: 85.99948012993634
Average age in population: 83.97354551515477
Median age in population: 84.01422805705919
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.077
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 86115602
--- Timings ---
Current time: 1529615649633 milliseconds
Total Time:         211.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.1 seconds, 41.7%
Fitness Testing:     96.0 seconds, 45.5%
Report:              26.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction float_sub} {:instruction float_flush} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_swap} {:instruction in1} {:instruction float_swap} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction integer_mult} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_add} {:instruction print_integer} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_cos} {:instruction float_rot} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_add} {:instruction float_sub})
Best program: (float_sub float_flush float_sub float_sub float_flush integer_yank float_sub integer_yank float_sub integer_swap in1 float_swap integer_yank in1 float_yankdup float_tan float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 integer_mult 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup integer_dup_times float_dec integer_dup_items float_add print_integer float_sub float_yankdup integer_mult integer_shove float_dup integer_dup_times float_cos float_rot integer_mod float_sub integer_add float_sub)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3008.9766717000202
Median total errors in population: 1526.0293
Error averages by case: (113.90636749999993 3.046 62.3817934 1.371 107.63248199999992 4.056 140.66626799999995 4.036 149.64988589999993 3.348 127.58428770000003 3.056 103.54321649999996 3.16 126.86532959999991 12.191 94.15287259999997 3.102 75.4987619 3.23 77.0351161 3.244 123.02897680000004 3.272 150.75887860000003 13.033 153.446994 12.28 97.34762189999996 11.323 120.59866749999998 3.003 144.64738699999995 4.056 71.6809065 3.036 134.0590219 11.3 128.94738699999797 9.525 145.49628709999996 2.261 103.06356530000001 11.306 90.84751920000002 2.3 139.55606889999996 4.29 89.51400879999996 2.242)
Error minima by case: (3.0619 1 0.0 0 3.0245 2 5.0309 2 43.9755 2 39.9336 1 11.5809 2 1.3563 10 29.0 2 7.0 2 6.7827 1 8.3354 1 44.9755 9 47.9755 9 9.0245 10 20.3977 1 3.3533 2 3.3095 1 17.3877 7 22.0047 8 60.2171 1 3.0245 9 26.0 1 35.9755 2 18.0245 1)
Average genome size in population (length): 52.024
Average program size in population (points): 53.024
Average percent parens in population: 0.020
Minimum age in population: 82.24086677835425
Maximum age in population: 87.2872377353359
Average age in population: 85.5014068706677
Median age in population: 85.57422697787379
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.086
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 87416727
--- Timings ---
Current time: 1529615652921 milliseconds
Total Time:         214.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.5 seconds, 41.7%
Fitness Testing:     97.5 seconds, 45.5%
Report:              27.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_tan} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_items} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_yank} {:instruction integer_div} {:instruction integer_shove} {:instruction print_integer} {:instruction integer_dup_times} {:instruction float_min} {:instruction float_mult} {:instruction float_stackdepth} {:instruction in2} {:instruction integer_swap} {:instruction integer_mult} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_shove} {:instruction integer_mod} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction integer_dup_times} {:instruction integer_max} {:instruction integer_dup} {:instruction float_sub})
Best program: (float_sub float_flush float_tan integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add integer_dup_items float_frominteger float_frominteger integer_pop integer_yank integer_div integer_shove print_integer integer_dup_times float_min float_mult float_stackdepth in2 integer_swap integer_mult integer_flush integer_fromfloat integer_dup_times float_shove integer_mod float_dec print_float float_add integer_dup_times integer_max integer_dup float_sub)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2668.7413477000214
Median total errors in population: 1526.0293
Error averages by case: (99.68813969999994 2.896 47.6338778 1.185 93.40565129999996 3.905 126.93000629999996 3.885 136.5564388 3.199 114.75599530000004 2.877 89.12561559999999 2.975 114.22335929999996 12.175 79.54772239999998 2.939 60.53782349999999 3.059 63.14098699999996 3.11 110.1799551 3.14 138.3934423 13.04 141.5269621 12.275 84.549308 11.301 107.45638789999998 2.832 131.12051489999996 3.913 58.03534380000001 2.851 120.14346339999999 11.27 116.34252389999831 9.456 132.93459369999997 2.067 89.9792565 11.292 76.14270450000002 2.117 126.47137469999993 4.13 75.9038999 2.127)
Error minima by case: (3.1635 1 0.0 0 3.0245 2 3.0309 2 41.9755 2 21.6666 1 16.7358 2 1.7429 8 29.0 1 2.2876 2 12.0 2 4.8564 1 27.8328 8 43.8467 6 5.6118 9 2.56 1 31.8467 2 0.5073 1 2.1653 10 20.8467 8 43.2336 1 3.0245 9 26.0 1 33.9755 2 17.1239 1)
Average genome size in population (length): 51.565
Average program size in population (points): 52.565
Average percent parens in population: 0.020
Minimum age in population: 83.6436482998642
Maximum age in population: 89.04545334400544
Average age in population: 86.97642605315666
Median age in population: 87.00453334219546
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.089
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 88706302
--- Timings ---
Current time: 1529615656209 milliseconds
Total Time:         217.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        90.9 seconds, 41.8%
Fitness Testing:     99.0 seconds, 45.5%
Report:              27.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_yank} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_swap} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction integer_mult} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_sub} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_add} {:instruction float_mult} {:instruction float_add} {:instruction float_div} {:instruction float_cos} {:instruction print_integer} {:instruction integer_add} {:instruction integer_add} {:instruction integer_pop} {:instruction integer_min} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_mult} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_add})
Best program: (float_sub float_flush integer_dup_times float_sub integer_yank float_sub integer_yank in1 float_swap integer_yank in1 float_yankdup float_tan float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 integer_mult 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_sub float_dec print_float float_add float_div float_frominteger integer_pop float_yankdup float_sub float_dec integer_dup_items integer_add float_mult float_add float_div float_cos print_integer integer_add integer_add integer_pop integer_min integer_mult integer_shove integer_fromfloat integer_dup_times integer_shove integer_fromfloat integer_dup_times float_mult float_frominteger integer_add integer_dup_times integer_dup_times integer_add)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2900.5113701000214
Median total errors in population: 1526.0293
Error averages by case: (109.03920519999996 2.958 57.4922215 1.27 103.59444609999994 3.972 136.76849149999995 3.957 144.52523589999993 3.289 122.76156060000004 2.955 98.56459509999998 3.065 123.59458339999992 12.215 89.03758399999995 3.013 71.13515709999997 3.136 71.96414779999998 3.2 119.5716551 3.232 147.4167208 13.061 150.38270799999998 12.288 94.02098629999996 11.314 115.20222399999997 2.916 140.99224949999996 3.985 66.7162105 2.94 129.422548 11.301 125.56736309999806 9.504 140.8027158 2.149 99.50170580000001 11.321 85.69363990000004 2.191 134.6797835 4.208 86.45563159999996 2.168)
Error minima by case: (2.1635 1 0.0 0 1.0 1 2.0309 2 40.9755 2 0.7177 1 15.7358 2 1.7429 9 30.0 1 3.4957 2 9.0 2 8.0531 1 24.8328 2 47.9755 2 5.0 2 16.331 1 35.9755 2 3.3095 1 19.3877 9 22.0047 8 19.5658 1 1.0 1 27.0 1 32.9755 2 8.4694 1)
Average genome size in population (length): 51.188
Average program size in population (points): 52.188
Average percent parens in population: 0.020
Minimum age in population: 85.71168183882273
Maximum age in population: 90.43606272653982
Average age in population: 88.40320342263816
Median age in population: 88.4747044039427
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.08
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 89986377
--- Timings ---
Current time: 1529615659726 milliseconds
Total Time:         221.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.4 seconds, 41.8%
Fitness Testing:    100.5 seconds, 45.5%
Report:              28.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_flush} {:instruction float_sub} {:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction integer_rot} {:instruction float_dec} {:instruction print_float} {:instruction float_inc} {:instruction float_max} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_frominteger} {:instruction in1} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_sub} {:instruction float_sub} {:instruction integer_mod} {:instruction tag_float_148} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction integer_inc} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction float_yank} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yank} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction float_cos} {:instruction float_rot} {:instruction integer_add})
Best program: (integer_sub float_flush float_sub float_sub float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_yankdup float_inc float_inc float_max integer_rot float_dec print_float float_inc float_max integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_dec print_float float_add integer_inc integer_dup_times float_sub integer_mod integer_yankdup integer_inc integer_mod float_frominteger in1 float_sin float_inc integer_mod tag_float_378 float_cos integer_mult integer_mod float_sub float_sub integer_mod tag_float_148 integer_dup_times integer_mod integer_yankdup integer_swap integer_mod integer_inc integer_add float_sin float_inc float_yank tag_float_378 float_cos float_sub integer_mod float_sub float_yank float_swap integer_fromfloat float_cos float_rot integer_add)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2751.912869100022
Median total errors in population: 1526.0293
Error averages by case: (104.37586430000003 2.891 52.540110399999996 1.154 97.3595632 3.884 130.71789459999994 3.886 139.52510550000002 3.256 117.91250480000004 2.887 93.86951549999998 2.974 116.08605419999991 12.229 84.38683319999997 2.928 64.5428962 3.028 66.05362579999998 3.166 112.00603619999998 3.201 140.23993370000005 13.098 143.50764809999995 12.307 86.604088 11.324 111.00299759999994 2.844 134.85094559999996 3.875 61.24363460000001 2.859 124.5903234 11.328 118.23486089999847 9.471 136.00233079999995 2.046 91.99265400000002 11.344 80.97726480000003 2.087 129.13147039999996 4.186 79.82071330000001 2.085)
Error minima by case: (2.1635 1 0.0 0 6.0 1 3.0309 2 2.0383 2 40.9336 1 15.7358 2 1.7429 9 30.0 1 3.4957 2 12.0 2 7.0531 1 25.8328 2 31.0058 1 0.0 0 25.3203 1 19.0058 2 5.3095 1 12.3631 8 5.0351 8 61.2171 1 6.0 2 27.0 1 30.8967 2 9.0 1)
Average genome size in population (length): 50.631
Average program size in population (points): 51.631
Average percent parens in population: 0.020
Minimum age in population: 86.71168183882273
Maximum age in population: 91.57782750902315
Average age in population: 89.81431756249948
Median age in population: 89.83441124773388
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.832
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.832
Total error diversity:				 0.089
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 91252602
--- Timings ---
Current time: 1529615663181 milliseconds
Total Time:         224.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.9 seconds, 41.8%
Fitness Testing:    101.9 seconds, 45.4%
Report:              28.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_cos} {:instruction float_rot} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction integer_stackdepth} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_pop} {:instruction print_float} {:instruction float_max} {:instruction integer_pop} {:instruction float_add} {:instruction float_shove} {:instruction float_sub} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_inc} {:instruction integer_mod} {:instruction float_frominteger} {:instruction in1} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_sub} {:instruction float_sub})
Best program: (float_sub float_flush float_cos float_rot in1 float_yankdup integer_yank in1 integer_stackdepth 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add float_rot float_frominteger integer_pop print_float float_max integer_pop float_add float_shove float_sub integer_mod integer_yankdup integer_swap integer_mod float_frominteger integer_inc integer_mod float_frominteger in1 float_sin float_inc integer_mod tag_float_378 float_cos integer_mult integer_mod float_sub float_sub)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2976.304040700021
Median total errors in population: 1526.0293
Error averages by case: (112.75586809999994 3.004 60.63034720000001 1.307 105.66272859999994 3.995 138.72097929999995 3.982 148.64909579999994 3.271 125.85002800000007 3.012 102.33719079999997 3.102 126.6622116999999 12.292 92.84908179999994 3.037 73.12071340000001 3.169 76.62526489999998 3.2 122.7296419 3.218 150.36440160000004 13.127 152.22278899999995 12.375 95.96725979999998 11.384 118.44337939999997 2.941 143.01209489999994 3.983 70.21747000000003 3.0 132.93364390000002 11.372 128.57106029999798 9.566 143.80294779999994 2.193 102.4294011 11.405 89.51835570000004 2.24 139.003876 4.22 86.65020969999998 2.179)
Error minima by case: (2.1635 1 0.0 0 0.0245 2 3.0309 2 41.9755 2 40.9336 1 15.7358 2 2.7429 8 30.0 1 7.0 2 12.0 2 8.544 1 44.9755 9 47.9755 10 6.0245 10 25.3203 1 35.9755 2 4.3095 1 17.3877 7 23.0047 8 61.2171 1 0.0245 8 27.0 1 33.9755 2 15.0245 1)
Average genome size in population (length): 50.269
Average program size in population (points): 51.269
Average percent parens in population: 0.020
Minimum age in population: 88.84237418495816
Maximum age in population: 93.43647137985577
Average age in population: 91.27581935424799
Median age in population: 91.33848008828498
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.082
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 92509877
--- Timings ---
Current time: 1529615666489 milliseconds
Total Time:         227.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        95.4 seconds, 41.8%
Fitness Testing:    103.4 seconds, 45.4%
Report:              29.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_cos} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction integer_stackdepth} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction integer_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_mult} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_tan} {:instruction integer_add} {:instruction float_max} {:instruction in2} {:instruction float_dup_items} {:instruction float_add} {:instruction float_rot} {:instruction integer_pop} {:instruction float_div} {:instruction float_add} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_mod} {:instruction tagged_729} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_swap} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_dup})
Best program: (float_sub float_flush float_cos integer_yank in1 float_yankdup integer_yank in1 integer_stackdepth 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_float float_add integer_dec float_dec print_float float_add float_frominteger integer_add float_sin float_mult float_dup_times integer_yankdup float_add integer_pop float_yankdup integer_pop float_yankdup float_add float_div float_frominteger integer_pop float_yankdup float_dec integer_shove integer_fromfloat integer_dup_times float_tan integer_add float_max in2 float_dup_items float_add float_rot integer_pop float_div float_add integer_inc float_sub integer_mod tagged_729 integer_yankdup float_add integer_swap integer_yankdup integer_pop integer_mod float_dup)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2635.143062300021
Median total errors in population: 1526.0293
Error averages by case: (98.29921559999994 2.941 45.963960799999995 1.25 92.97570219999996 3.963 126.49032669999995 3.936 135.97982760000002 3.277 112.38662760000005 2.954 87.84288609999999 3.04 113.03249019999993 12.132 78.60451569999995 2.985 60.11830509999998 3.116 62.61609479999999 3.175 109.0543184 3.197 137.12693090000005 13.006 139.17766929999996 12.236 82.25966699999995 11.269 104.77447059999996 2.915 130.3419933999999 3.955 55.91461680000002 2.919 118.8713602 11.235 115.02921329999822 9.429 130.63842369999995 2.141 88.7149131 11.253 75.11718170000005 2.174 125.92880379999995 4.181 73.06554769999998 2.139)
Error minima by case: (2.1635 1 0.0 0 3.0245 2 2.0309 2 0.9617 2 25.9755 1 0.0245 2 1.7429 11 10.0245 1 7.0 2 12.0 2 7.0531 1 14.3919 9 31.3752 11 9.0245 10 18.9755 1 35.9755 2 3.3095 1 19.3877 9 20.0491 8 44.9755 1 3.0245 9 4.1664 1 32.9755 2 15.5232 1)
Average genome size in population (length): 50.072
Average program size in population (points): 51.072
Average percent parens in population: 0.020
Minimum age in population: 89.84237418495816
Maximum age in population: 94.75426204330911
Average age in population: 92.77578976805869
Median age in population: 92.8578491240613
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.838
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.838
Total error diversity:				 0.079
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 93762102
--- Timings ---
Current time: 1529615670003 milliseconds
Total Time:         231.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        96.8 seconds, 41.8%
Fitness Testing:    104.9 seconds, 45.4%
Report:              29.5 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction float_flush} {:instruction float_swap} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction integer_mult} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction integer_flush} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_rot} {:instruction float_max} {:instruction in2} {:instruction integer_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_mod})
Best program: (float_sub float_flush float_swap integer_yank in1 float_yankdup integer_yank in1 integer_mult in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max integer_flush float_dec print_float float_add in2 integer_add float_add float_rot float_max in2 integer_add float_div float_frominteger integer_pop float_yankdup integer_mult integer_shove integer_fromfloat integer_dup_times integer_mod)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2979.50303690002
Median total errors in population: 1526.0293
Error averages by case: (112.62001679999995 3.125 61.78005090000001 1.499 106.84245969999996 4.146 139.7776394 4.125 148.89965329999998 3.378 126.39527250000006 3.126 102.45944369999997 3.245 125.02292889999991 12.162 93.55502239999996 3.188 74.53493409999996 3.345 76.39668149999999 3.281 121.26924530000005 3.277 149.07176150000004 13.021 151.8397992 12.292 95.56227289999993 11.327 118.72053959999997 3.087 143.49858049999992 4.144 70.82001260000001 3.096 132.65163760000002 11.291 127.15589499999817 9.522 144.3146521 2.362 101.2456141 11.324 90.11506780000003 2.398 138.6249166 4.329 87.85593889999996 2.383)
Error minima by case: (2.0619 1 0.0 0 3.0245 2 1.0309 2 0.9617 2 6.0738 1 2.9755 2 1.7429 9 9.0245 1 3.4957 2 5.6824 2 8.407 1 26.8328 9 47.9755 9 6.6118 10 0.5793 1 35.9755 2 5.3095 1 17.3877 8 20.034 8 14.2097 1 3.0245 9 12.0245 1 33.8967 2 18.0245 1)
Average genome size in population (length): 49.402
Average program size in population (points): 50.402
Average percent parens in population: 0.021
Minimum age in population: 91.4791984958367
Maximum age in population: 96.46335587715811
Average age in population: 94.25701749638785
Median age in population: 94.2732028385139
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.087
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 94997527
--- Timings ---
Current time: 1529615673295 milliseconds
Total Time:         234.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.4 seconds, 41.9%
Fitness Testing:    106.3 seconds, 45.3%
Report:              30.0 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_flush} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction integer_mod} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction integer_dup} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_rot} {:instruction float_frominteger} {:instruction float_dup} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction integer_shove} {:instruction in1} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_add} {:instruction float_swap} {:instruction float_sub})
Best program: (integer_dup_times float_flush float_sub integer_dup_items float_sub integer_yank in1 float_yankdup integer_yank in1 integer_mod 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max integer_dup float_dec print_float float_add float_rot float_frominteger float_dup float_dec print_float float_add float_div float_frominteger integer_pop integer_shove in1 integer_dup_times in2 integer_add float_add float_swap float_sub)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2844.977961800021
Median total errors in population: 1526.0293
Error averages by case: (106.75753019999996 2.917 55.5328162 1.263 101.13291129999996 3.91 134.66687739999995 3.91 142.54482719999996 3.204 121.51589750000002 2.872 96.30885819999997 3.007 120.91679159999994 12.286 86.73629969999998 2.947 68.22096220000002 3.097 69.63338959999997 3.109 116.87306910000001 3.144 144.85212829999998 13.114 148.12086420000003 12.371 91.49154069999997 11.37 114.62893700000001 2.826 138.72676089999996 3.9 65.1364969 2.867 127.05073870000001 11.335 122.88942439999815 9.525 139.51869029999997 2.088 96.79025100000001 11.39 83.47418670000003 2.167 132.7173401999999 4.136 83.80037229999999 2.185)
Error minima by case: (1.1635 1 0.0 0 6.0245 2 29.9755 2 85.0 2 40.9336 1 10.767 2 2.7429 9 22.0513 1 7.0 2 10.0 1 7.4894 1 24.3857 8 41.346 10 11.1941 9 25.3203 1 35.9755 2 8.0 1 17.3877 7 11.9524 8 61.2171 1 6.0245 9 5.8715 1 77.0 2 5.213 1)
Average genome size in population (length): 49.389
Average program size in population (points): 50.389
Average percent parens in population: 0.021
Minimum age in population: 92.76773476232323
Maximum age in population: 97.80379433398738
Average age in population: 95.68600174651812
Median age in population: 95.68580088476435
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.08
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 96232640
--- Timings ---
Current time: 1529615676706 milliseconds
Total Time:         238.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        99.8 seconds, 41.9%
Fitness Testing:    107.8 seconds, 45.3%
Report:              30.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 53787.60820000001
Test mean error for best: 26.89380
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -64.1635067726
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -94.7167633157
Correct output: -163.0309037322 | Program output: -82.0309037322
Correct output: 178.0383210966 | Program output: 88.0383210966 
Correct output: 87.9581471611  | Program output: 16.9581471611 
Correct output: -20.7358489852 | Program output: -65.7358489852
Correct output: -5.7428849749  | Program output: 66.2571150251 
Correct output: -60.0406605526 | Program output: -93.0406605526
Correct output: -100.8705337643 | Program output: -90.8705337643
Correct output: 67.2417878243  | Program output: 52.2417878243 
Correct output: 10.0530512024  | Program output: 78.0530512024 
Correct output: -62.4164036983 | Program output: 33.5835963017 
Correct output: -79.3997427913 | Program output: 19.6002572087 
Correct output: -17.1940864091 | Program output: 21.8059135909 
Correct output: 72.3448758755  | Program output: 8.3448758755  
Correct output: -123.6221378256 | Program output: -36.6221378256
Correct output: 29.3095165104  | Program output: 18.3095165104 
Correct output: 26.6368843721  | Program output: -52.3631156279
Correct output: -26.0047352658 | Program output: 47.0245373556 
Correct output: 108.2416510836 | Program output: 18.2416510836 
Correct output: -12.3744056182 | Program output: 32.6255943818 
Correct output: -43.8581812945 | Program output: -73.8581812945
Correct output: 129.1032673973 | Program output: 47.1032673973 
Correct output: -32.5013549448 | Program output: -2.5013549448 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_rot} {:instruction float_sub} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction float_flush} {:instruction float_sub} {:instruction tagged_471} {:instruction in1} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_shove} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_sin} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction integer_div} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_swap} {:instruction float_div} {:instruction integer_mod} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_inc} {:instruction integer_mod} {:instruction tag_float_378} {:instruction float_cos} {:instruction float_sub} {:instruction float_add} {:instruction float_sub} {:instruction integer_inc} {:instruction float_swap} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_add} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_sub} {:instruction float_tan} {:instruction float_sub} {:instruction float_rot})
Best program: (integer_rot float_sub float_flush integer_fromfloat float_sub float_flush float_sub tagged_471 in1 float_yankdup float_yankdup in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_shove float_sub float_dec print_float float_add float_frominteger integer_add float_sin float_inc integer_mod tag_float_378 float_cos float_sub integer_div float_sub integer_fromfloat integer_dup_times in2 integer_swap float_div integer_mod float_frominteger float_mult integer_shove integer_yankdup integer_swap integer_mod float_frominteger integer_add float_stackdepth float_inc integer_mod tag_float_378 float_cos float_sub float_add float_sub integer_inc float_swap float_dup_items float_sub float_add integer_pop float_yankdup integer_mult integer_shove float_sub float_tan float_sub float_rot)
Errors: [57.0 2 0.0 0 45.0 3 81.0 3 90.0 2 71.0 2 45.0 2 72.0 12 33.0 2 10.0 2 15.0 2 68.0 2 96.0 13 99.0 12 39.0 11 64.0 2 87.0 3 11.0 2 79.0 11 73.0293 9 90.0 1 45.0 11 30.0 1 82.0 3 30.0 1]
Total: 1526.0293
Mean: 30.520586
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2926.4766633000218
Median total errors in population: 1526.0293
Error averages by case: (110.88588569999996 3.012 58.99990620000001 1.343 104.22671099999995 4.038 137.15117489999992 4.017 145.977035 3.326 124.44983260000006 3.006 100.49325429999998 3.119 123.93750879999995 12.206 91.20388769999994 3.078 71.58816749999997 3.206 73.80767239999996 3.21 120.04451880000003 3.23 147.5640911 13.068 150.20265229999998 12.322 93.70516369999997 11.35 117.47000849999995 2.961 141.1785738999999 4.033 68.33232070000003 2.977 131.11500780000003 11.299 125.72820789999793 9.512 142.40803189999994 2.206 99.623207 11.352 87.76374600000004 2.249 136.37982099999994 4.286 85.59627659999997 2.238)
Error minima by case: (3.1635 1 0.0 0 5.0245 2 0.0309 2 0.9617 2 39.9336 1 16.7358 2 4.7429 9 30.0 1 7.0 2 6.7827 2 8.0531 1 16.1667 8 47.1334 10 10.7814 10 20.3977 1 0.3533 2 4.3095 1 13.0602 8 19.034 8 60.2171 1 5.0245 9 27.0 1 33.8967 2 19.5259 1)
Average genome size in population (length): 49.098
Average program size in population (points): 50.098
Average percent parens in population: 0.021
Minimum age in population: 93.76773476232323
Maximum age in population: 99.21557317795418
Average age in population: 97.09588163708175
Median age in population: 97.1537706197295
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.074
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 97460415
--- Timings ---
Current time: 1529615680215 milliseconds
Total Time:         241.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.4 seconds, 42.0%
Fitness Testing:    109.3 seconds, 45.3%
Report:              30.8 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 3144.5312000000004
Test mean error for best: 1.57227
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -5.1635067726 
Correct output: -21.9737224684 | Program output: -19.9737224684
Correct output: -139.7167633157 | Program output: -137.7167633157
Correct output: -163.0309037322 | Program output: -161.0309037322
Correct output: 178.0383210966 | Program output: 177.0383210966
Correct output: 87.9581471611  | Program output: 89.9581471611 
Correct output: -20.7358489852 | Program output: -18.7358489852
Correct output: -5.7428849749  | Program output: -6.7428849749 
Correct output: -60.0406605526 | Program output: -58.0406605526
Correct output: -100.8705337643 | Program output: -98.8705337643
Correct output: 67.2417878243  | Program output: 66.2417878243 
Correct output: 10.0530512024  | Program output: 9.0530512024  
Correct output: -62.4164036983 | Program output: -60.4164036983
Correct output: -79.3997427913 | Program output: -77.3997427913
Correct output: -17.1940864091 | Program output: -15.1940864091
Correct output: 72.3448758755  | Program output: 74.3448758755 
Correct output: -123.6221378256 | Program output: -121.6221378256
Correct output: 29.3095165104  | Program output: 31.3095165104 
Correct output: 26.6368843721  | Program output: 28.6368843721 
Correct output: -26.0047352658 | Program output: -26.9754626444
Correct output: 108.2416510836 | Program output: 110.2416510836
Correct output: -12.3744056182 | Program output: -10.3744056182
Correct output: -43.8581812945 | Program output: -41.8581812945
Correct output: 129.1032673973 | Program output: 128.1032673973
Correct output: -32.5013549448 | Program output: -30.5013549448
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction integer_pop} {:instruction in1} {:instruction integer_mod} {:instruction integer_yank} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_add} {:instruction in2} {:instruction print_float} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction -91} {:instruction float_sub} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction float_dec} {:instruction print_float} {:instruction tag_integer_653} {:instruction integer_shove} {:instruction float_add})
Best program: (integer_div integer_yank in1 float_yankdup integer_yank in1 integer_pop in1 integer_mod integer_yank float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc float_inc float_max float_sub float_dec print_integer float_add integer_dup_times in2 integer_add float_frominteger float_add integer_add in2 print_float float_max float_sub float_dec print_float float_add -91 float_sub integer_inc integer_yankdup float_dec print_float tag_integer_653 integer_shove float_add)
Errors: [2.0 1 2.0 2 2.0 1 2.0 1 1.0 1 2.0 1 2.0 2 1.0 1 2.0 2 2.0 3 1.0 1 1.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 0.9707 9 2.0 2 2.0 1 2.0 1 1.0 1 2.0 1]
Total: 84.9707
Mean: 1.699414
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2579.3803803000224
Median total errors in population: 1526.0293
Error averages by case: (98.61248999999998 2.814 45.3321772 1.081 90.41633229999998 3.85 124.12160029999997 3.821 133.68011070000003 3.143 109.79720870000004 2.806 88.043354 2.904 109.46772739999989 12.118 78.41719559999996 2.868 58.4132835 2.983 60.02136689999997 3.052 105.45128929999997 3.097 133.72552450000006 13.026 135.22691450000002 12.199 78.97977579999998 11.227 102.50189649999996 2.76 128.25661399999996 3.837 53.18060619999999 2.78 119.0980041 11.203 111.55166739999807 9.405 128.02743179999996 1.975 85.0161622 11.226 75.05057680000003 2.027 123.61963939999997 4.079 71.10243120000001 1.988)
Error minima by case: (2.0 1 0.0 0 2.0 1 2.0 1 1.0 1 2.0 1 2.0 2 1.0 1 2.0 1 2.0 2 1.0 1 1.0 1 2.0 1 2.0 1 2.0 1 0.3419 1 2.0 1 2.0 1 2.0 1 0.9707 8 2.0 1 2.0 1 2.0 1 1.0 1 2.0 1)
Average genome size in population (length): 48.601
Average program size in population (points): 49.601
Average percent parens in population: 0.021
Minimum age in population: 95.70080294311359
Maximum age in population: 100.7838431932986
Average age in population: 98.52718540208356
Median age in population: 98.56339256745828
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.805
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.805
Total error diversity:				 0.073
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 98675540
--- Timings ---
Current time: 1529615683434 milliseconds
Total Time:         244.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       102.8 seconds, 42.0%
Fitness Testing:    110.8 seconds, 45.2%
Report:              31.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 2237.63
Test mean error for best: 1.11882
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -6.1635067726 
Correct output: -21.9737224684 | Program output: -20.9737224684
Correct output: -139.7167633157 | Program output: -138.7167633157
Correct output: -163.0309037322 | Program output: -162.0309037322
Correct output: 178.0383210966 | Program output: 177.0383210966
Correct output: 87.9581471611  | Program output: 88.9581471611 
Correct output: -20.7358489852 | Program output: -19.7358489852
Correct output: -5.7428849749  | Program output: -6.7428849749 
Correct output: -60.0406605526 | Program output: -59.0406605526
Correct output: -100.8705337643 | Program output: -99.8705337643
Correct output: 67.2417878243  | Program output: 66.2417878243 
Correct output: 10.0530512024  | Program output: 9.0530512024  
Correct output: -62.4164036983 | Program output: -61.4164036983
Correct output: -79.3997427913 | Program output: -78.3997427913
Correct output: -17.1940864091 | Program output: -16.1940864091
Correct output: 72.3448758755  | Program output: 73.3448758755 
Correct output: -123.6221378256 | Program output: -122.6221378256
Correct output: 29.3095165104  | Program output: 30.3095165104 
Correct output: 26.6368843721  | Program output: 27.6368843721 
Correct output: -26.0047352658 | Program output: -27.0047352658
Correct output: 108.2416510836 | Program output: 109.2416510836
Correct output: -12.3744056182 | Program output: -11.3744056182
Correct output: -43.8581812945 | Program output: -42.8581812945
Correct output: 129.1032673973 | Program output: 128.1032673973
Correct output: -32.5013549448 | Program output: -31.5013549448
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sub} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction float_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_inc} {:instruction in2} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction float_inc} {:instruction float_add} {:instruction float_div} {:instruction float_frominteger} {:instruction integer_pop} {:instruction float_add} {:instruction float_dec} {:instruction float_inc} {:instruction float_max} {:instruction integer_swap} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction float_div} {:instruction integer_dup_items} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction tag_integer_578} {:instruction float_div} {:instruction float_add} {:instruction integer_pop} {:instruction integer_yank} {:instruction float_tan} {:instruction tagged_893})
Best program: (float_sub integer_yankdup integer_dup_times float_yank in1 float_yankdup integer_yank in1 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_inc in2 float_max float_sub float_dec float_inc float_add float_div float_frominteger integer_pop float_add float_dec float_inc float_max integer_swap float_dec print_float float_add float_div integer_dup_items float_inc float_inc integer_dup_times float_sub float_dec print_float tag_integer_578 float_div float_add integer_pop integer_yank float_tan tagged_893)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 2 1.0 3 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 56.0
Mean: 1.12
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2816.855174700021
Median total errors in population: 1526.0293
Error averages by case: (105.52701339999994 3.009 55.048709100000025 1.359 99.80123439999993 4.052 132.85591979999998 4.02 142.25887399999996 3.247 120.61758900000008 2.979 95.36135279999995 3.142 119.2051558999999 12.132 86.37752249999991 3.086 67.35133549999999 3.206 69.8963961 3.163 115.27053700000002 3.203 143.2421409 12.986 146.4156506 12.213 90.16112699999992 11.234 112.39361779999999 2.934 136.5781991999999 4.015 64.96252780000002 2.976 125.39031310000001 11.24 121.3505326999982 9.47 138.526551 2.18 95.448521 11.256 82.94081620000006 2.261 132.2867086 4.17 81.82882929999991 2.225)
Error minima by case: (1.0 1 0.0 0 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 0.282 1 1.0 1 1.0 1 1.0 1 1.0 1 0.9707 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1)
Average genome size in population (length): 48.566
Average program size in population (points): 49.566
Average percent parens in population: 0.021
Minimum age in population: 97.53773580522237
Maximum age in population: 102.0927747135944
Average age in population: 99.9603622525217
Median age in population: 99.99975365378877
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.088
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 99889815
--- Timings ---
Current time: 1529615686994 milliseconds
Total Time:         248.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.3 seconds, 42.0%
Fitness Testing:    112.3 seconds, 45.2%
Report:              31.7 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -7.1635067726 
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -139.7167633157
Correct output: -163.0309037322 | Program output: -163.0309037322
Correct output: 178.0383210966 | Program output: 178.0383210966
Correct output: 87.9581471611  | Program output: 87.9581471611 
Correct output: -20.7358489852 | Program output: -20.7358489852
Correct output: -5.7428849749  | Program output: -5.7428849749 
Correct output: -60.0406605526 | Program output: -60.0406605526
Correct output: -100.8705337643 | Program output: -100.8705337643
Correct output: 67.2417878243  | Program output: 67.2417878243 
Correct output: 10.0530512024  | Program output: 10.0530512024 
Correct output: -62.4164036983 | Program output: -62.4164036983
Correct output: -79.3997427913 | Program output: -79.3997427913
Correct output: -17.1940864091 | Program output: -17.1940864091
Correct output: 72.3448758755  | Program output: 72.3448758755 
Correct output: -123.6221378256 | Program output: -123.6221378256
Correct output: 29.3095165104  | Program output: 29.3095165104 
Correct output: 26.6368843721  | Program output: 26.6368843721 
Correct output: -26.0047352658 | Program output: -26.0047352658
Correct output: 108.2416510836 | Program output: 108.2416510836
Correct output: -12.3744056182 | Program output: -12.3744056182
Correct output: -43.8581812945 | Program output: -43.8581812945
Correct output: 129.1032673973 | Program output: 129.1032673973
Correct output: -32.5013549448 | Program output: -32.5013549448
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction integer_pop} {:instruction in1} {:instruction float_max} {:instruction integer_yank} {:instruction float_flush} {:instruction float_sub} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction integer_yank} {:instruction in1} {:instruction float_yankdup} {:instruction 45.024537355588535} {:instruction float_min} {:instruction integer_dup_items} {:instruction float_inc} {:instruction 39} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_inc} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_integer} {:instruction float_add} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_add} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_add} {:instruction in2} {:instruction print_float} {:instruction float_max} {:instruction float_sub} {:instruction float_dec} {:instruction print_float} {:instruction float_add} {:instruction -91} {:instruction float_sub} {:instruction integer_inc} {:instruction integer_yankdup} {:instruction float_dec} {:instruction print_float} {:instruction tag_integer_653} {:instruction integer_shove} {:instruction float_add})
Best program: (integer_div integer_yank in1 float_yankdup integer_yank in1 integer_pop in1 float_max integer_yank float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_pop float_inc float_max float_sub float_dec print_integer float_add integer_dup_times in2 integer_add float_frominteger float_add integer_add in2 print_float float_max float_sub float_dec print_float float_add -91 float_sub integer_inc integer_yankdup float_dec print_float tag_integer_653 integer_shove float_add)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2551.2230761000196
Median total errors in population: 1526.0293
Error averages by case: (96.53617509999998 2.76 46.03543 1.151 88.83700189999998 3.729 121.06094809999996 3.707 130.59560480000002 3.099 109.68058820000002 2.764 86.27131899999996 2.882 108.87610499999991 11.695 76.839771 2.849 57.4340495 3.001 60.47627929999996 3.003 105.22576960000002 3.07 131.6486865 12.508 134.01235999999997 11.761 79.5510819 10.834 102.88916249999998 2.741 125.29218099999997 3.744 55.2714169 2.785 116.29324559999999 10.806 110.60292789999876 9.41 127.09748389999997 2.028 85.2637679 10.815 73.6771492 2.005 121.00773909999998 3.97 71.67083220000002 1.959)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 48.031
Average program size in population (points): 49.031
Average percent parens in population: 0.021
Minimum age in population: 99.10670163789885
Maximum age in population: 103.2341876991179
Average age in population: 101.4390317441242
Median age in population: 101.483200915009
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.072
Error (vector) diversity:			 0.077
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 101090740
--- Timings ---
Current time: 1529615690368 milliseconds
Total Time:         251.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.8 seconds, 42.0%
Fitness Testing:    113.7 seconds, 45.2%
Report:              32.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 69
Successful program: (integer_div integer_yank in1 float_yankdup integer_yank in1 integer_pop in1 float_max integer_yank float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_pop float_inc float_max float_sub float_dec print_integer float_add integer_dup_times in2 integer_add float_frominteger float_add integer_add in2 print_float float_max float_sub float_dec print_float float_add -91 float_sub integer_inc integer_yankdup float_dec print_float tag_integer_653 integer_shove float_add)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 54


Auto-simplifying with starting size: 54
step: 0
program: (integer_div integer_yank in1 float_yankdup integer_yank in1 integer_pop in1 float_max integer_yank float_flush float_sub integer_yank in1 float_yankdup integer_yank in1 float_yankdup 45.024537355588535 float_min integer_dup_items float_inc 39 integer_dup_items float_pop float_inc float_max float_sub float_dec print_integer float_add integer_dup_times in2 integer_add float_frominteger float_add integer_add in2 print_float float_max float_sub float_dec print_float float_add -91 float_sub integer_inc integer_yankdup float_dec print_float tag_integer_653 integer_shove float_add)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 54

step: 500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -7.1635067726  | Program output: -7.1635067726 
Correct output: -21.9737224684 | Program output: -21.9737224684
Correct output: -139.7167633157 | Program output: -139.7167633157
Correct output: -163.0309037322 | Program output: -163.0309037322
Correct output: 178.0383210966 | Program output: 178.0383210966
Correct output: 87.9581471611  | Program output: 87.9581471611 
Correct output: -20.7358489852 | Program output: -20.7358489852
Correct output: -5.7428849749  | Program output: -5.7428849749 
Correct output: -60.0406605526 | Program output: -60.0406605526
Correct output: -100.8705337643 | Program output: -100.8705337643
Correct output: 67.2417878243  | Program output: 67.2417878243 
Correct output: 10.0530512024  | Program output: 10.0530512024 
Correct output: -62.4164036983 | Program output: -62.4164036983
Correct output: -79.3997427913 | Program output: -79.3997427913
Correct output: -17.1940864091 | Program output: -17.1940864091
Correct output: 72.3448758755  | Program output: 72.3448758755 
Correct output: -123.6221378256 | Program output: -123.6221378256
Correct output: 29.3095165104  | Program output: 29.3095165104 
Correct output: 26.6368843721  | Program output: 26.6368843721 
Correct output: -26.0047352658 | Program output: -26.0047352658
Correct output: 108.2416510836 | Program output: 108.2416510836
Correct output: -12.3744056182 | Program output: -12.3744056182
Correct output: -43.8581812945 | Program output: -43.8581812945
Correct output: 129.1032673973 | Program output: 129.1032673973
Correct output: -32.5013549448 | Program output: -32.5013549448
;;******************************
