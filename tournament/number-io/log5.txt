Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[68.33385914596917 24] 92.33385914596917]
Train Case:   1 | Input/Output: [[-90.02608972425426 29] -61.02608972425426]
Train Case:   2 | Input/Output: [[-31.093668333580467 -67] -98.09366833358047]
Train Case:   3 | Input/Output: [[10.557295778628657 76] 86.55729577862866]
Train Case:   4 | Input/Output: [[27.192828380360595 -90] -62.807171619639405]
Train Case:   5 | Input/Output: [[91.82767985436851 -31] 60.82767985436851]
Train Case:   6 | Input/Output: [[-75.83184648392687 4] -71.83184648392687]
Train Case:   7 | Input/Output: [[-81.98268812026959 -93] -174.9826881202696]
Train Case:   8 | Input/Output: [[26.632730336358378 51] 77.63273033635838]
Train Case:   9 | Input/Output: [[63.17716998960236 36] 99.17716998960236]
Train Case:  10 | Input/Output: [[7.829241029365264 -80] -72.17075897063474]
Train Case:  11 | Input/Output: [[65.6362210059377 -87] -21.3637789940623]
Train Case:  12 | Input/Output: [[13.531620404038208 -39] -25.468379595961792]
Train Case:  13 | Input/Output: [[-77.83669348995602 80] 2.163306510043981]
Train Case:  14 | Input/Output: [[48.051807211123815 -32] 16.051807211123815]
Train Case:  15 | Input/Output: [[-81.10959505403794 -14] -95.10959505403794]
Train Case:  16 | Input/Output: [[41.22394763547527 -32] 9.22394763547527]
Train Case:  17 | Input/Output: [[39.11309654139936 86] 125.11309654139936]
Train Case:  18 | Input/Output: [[-66.58711701727032 -56] -122.58711701727032]
Train Case:  19 | Input/Output: [[-46.50096672090855 -55] -101.50096672090855]
Train Case:  20 | Input/Output: [[81.80117366791387 41] 122.80117366791387]
Train Case:  21 | Input/Output: [[85.09281828086574 -27] 58.09281828086574]
Train Case:  22 | Input/Output: [[-31.014761041970942 18] -13.014761041970942]
Train Case:  23 | Input/Output: [[-61.83468470832305 -8] -69.83468470832305]
Train Case:  24 | Input/Output: [[19.80066624739942 -28] -8.19933375260058]
Test Case:   0 | Input/Output: [[10.959738793454662 -80] -69.04026120654534]
Test Case:   1 | Input/Output: [[26.29432667206774 47] 73.29432667206774]
Test Case:   2 | Input/Output: [[85.71373093842982 12] 97.71373093842982]
Test Case:   3 | Input/Output: [[53.04374938246889 -59] -5.956250617531111]
Test Case:   4 | Input/Output: [[48.73861609718517 65] 113.73861609718517]
Test Case:   5 | Input/Output: [[73.91510962408603 76] 149.91510962408603]
Test Case:   6 | Input/Output: [[-82.71683779113941 44] -38.71683779113941]
Test Case:   7 | Input/Output: [[-89.90037531623759 -23] -112.90037531623759]
Test Case:   8 | Input/Output: [[13.206952264076733 18] 31.206952264076733]
Test Case:   9 | Input/Output: [[24.54342781669972 66] 90.54342781669972]
Test Case:  10 | Input/Output: [[61.368894903627336 16] 77.36889490362734]
Test Case:  11 | Input/Output: [[-79.97178502230136 -44] -123.97178502230136]
Test Case:  12 | Input/Output: [[62.25363154475056 39] 101.25363154475056]
Test Case:  13 | Input/Output: [[-69.56741710090336 -35] -104.56741710090336]
Test Case:  14 | Input/Output: [[15.763767904277898 55] 70.7637679042779]
Test Case:  15 | Input/Output: [[-54.15039323778137 93] 38.84960676221863]
Test Case:  16 | Input/Output: [[-93.32327663062523 -68] -161.32327663062523]
Test Case:  17 | Input/Output: [[-21.562165614534962 98] 76.43783438546504]
Test Case:  18 | Input/Output: [[36.70382036028826 -31] 5.703820360288262]
Test Case:  19 | Input/Output: [[-98.03076067067218 65] -33.03076067067218]
Test Case:  20 | Input/Output: [[6.446820628799003 -72] -65.553179371201]
Test Case:  21 | Input/Output: [[-21.098708921191076 80] 58.901291078808924]
Test Case:  22 | Input/Output: [[-42.274463485551706 -76] -118.2744634855517]
Test Case:  23 | Input/Output: [[44.02071133534017 18] 62.02071133534017]
Test Case:  24 | Input/Output: [[32.750906424579995 83] 115.75090642458]
Test Case:  25 | Input/Output: [[62.24654633603552 7] 69.24654633603552]
Test Case:  26 | Input/Output: [[41.70615796249737 58] 99.70615796249737]
Test Case:  27 | Input/Output: [[-33.749227836486554 57] 23.250772163513446]
Test Case:  28 | Input/Output: [[-73.89906156254038 -20] -93.89906156254038]
Test Case:  29 | Input/Output: [[61.00030537641899 92] 153.000305376419]
Test Case:  30 | Input/Output: [[60.075017353958145 -59] 1.0750173539581453]
Test Case:  31 | Input/Output: [[-65.84047269193726 43] -22.840472691937265]
Test Case:  32 | Input/Output: [[83.32048381958259 50] 133.3204838195826]
Test Case:  33 | Input/Output: [[-27.48926335394988 36] 8.51073664605012]
Test Case:  34 | Input/Output: [[-33.80423679567397 -30] -63.80423679567397]
Test Case:  35 | Input/Output: [[-41.81392210579189 5] -36.81392210579189]
Test Case:  36 | Input/Output: [[43.743679742681735 33] 76.74367974268173]
Test Case:  37 | Input/Output: [[25.197984102473384 81] 106.19798410247338]
Test Case:  38 | Input/Output: [[-2.746750944754382 23] 20.253249055245618]
Test Case:  39 | Input/Output: [[-85.55314938773684 -50] -135.55314938773682]
Test Case:  40 | Input/Output: [[33.85861322841447 -53] -19.14138677158553]
Test Case:  41 | Input/Output: [[-69.4983944688445 60] -9.498394468844495]
Test Case:  42 | Input/Output: [[41.735474618193734 -62] -20.264525381806266]
Test Case:  43 | Input/Output: [[-39.197372130667944 85] 45.802627869332056]
Test Case:  44 | Input/Output: [[51.46534090765809 26] 77.46534090765809]
Test Case:  45 | Input/Output: [[75.29921571998341 -86] -10.700784280016592]
Test Case:  46 | Input/Output: [[49.35194915442614 64] 113.35194915442614]
Test Case:  47 | Input/Output: [[-77.96840753316721 -30] -107.96840753316721]
Test Case:  48 | Input/Output: [[49.50941142784251 -26] 23.509411427842508]
Test Case:  49 | Input/Output: [[-93.63296923893196 -40] -133.63296923893196]
Test Case:  50 | Input/Output: [[-77.58124939927649 84] 6.418750600723513]
Test Case:  51 | Input/Output: [[-62.3031123733234 49] -13.303112373323401]
Test Case:  52 | Input/Output: [[36.63649300155157 6] 42.63649300155157]
Test Case:  53 | Input/Output: [[-9.48297342287303 -6] -15.48297342287303]
Test Case:  54 | Input/Output: [[-79.17661965566758 18] -61.17661965566758]
Test Case:  55 | Input/Output: [[-80.56584118486474 12] -68.56584118486474]
Test Case:  56 | Input/Output: [[75.0561869464199 52] 127.0561869464199]
Test Case:  57 | Input/Output: [[-0.9720540729196756 60] 59.027945927080324]
Test Case:  58 | Input/Output: [[61.7608642657149 12] 73.7608642657149]
Test Case:  59 | Input/Output: [[-93.0823247492426 -95] -188.08232474924262]
Test Case:  60 | Input/Output: [[50.504611771552334 58] 108.50461177155233]
Test Case:  61 | Input/Output: [[2.3355540550825395 74] 76.33555405508254]
Test Case:  62 | Input/Output: [[-82.06200596334492 -95] -177.06200596334492]
Test Case:  63 | Input/Output: [[8.763730774521747 -20] -11.236269225478253]
Test Case:  64 | Input/Output: [[-19.560479677732275 44] 24.439520322267725]
Test Case:  65 | Input/Output: [[58.02852835930611 16] 74.02852835930611]
Test Case:  66 | Input/Output: [[-64.08985134956134 65] 0.9101486504386571]
Test Case:  67 | Input/Output: [[82.7639687055227 -3] 79.7639687055227]
Test Case:  68 | Input/Output: [[-28.161597194124425 60] 31.838402805875575]
Test Case:  69 | Input/Output: [[66.86647965286295 -95] -28.13352034713705]
Test Case:  70 | Input/Output: [[0.9590898742750227 21] 21.959089874275023]
Test Case:  71 | Input/Output: [[66.42244673385525 -97] -30.577553266144747]
Test Case:  72 | Input/Output: [[-17.41671180110764 -11] -28.41671180110764]
Test Case:  73 | Input/Output: [[72.73615866793321 -39] 33.73615866793321]
Test Case:  74 | Input/Output: [[-26.94029914942935 -64] -90.94029914942935]
Test Case:  75 | Input/Output: [[35.96691123232557 -2] 33.96691123232557]
Test Case:  76 | Input/Output: [[54.12853608276927 51] 105.12853608276927]
Test Case:  77 | Input/Output: [[-31.306435644983452 28] -3.306435644983452]
Test Case:  78 | Input/Output: [[-49.11324512474968 8] -41.11324512474968]
Test Case:  79 | Input/Output: [[-80.10009271645775 71] -9.100092716457752]
Test Case:  80 | Input/Output: [[-86.82380260699232 -71] -157.82380260699233]
Test Case:  81 | Input/Output: [[-55.67191018818241 83] 27.32808981181759]
Test Case:  82 | Input/Output: [[45.684487141689345 -19] 26.684487141689345]
Test Case:  83 | Input/Output: [[-28.563471177235726 36] 7.436528822764274]
Test Case:  84 | Input/Output: [[-16.191921622250078 56] 39.80807837774992]
Test Case:  85 | Input/Output: [[-62.42112540634373 -83] -145.42112540634372]
Test Case:  86 | Input/Output: [[-19.629814418891797 -29] -48.6298144188918]
Test Case:  87 | Input/Output: [[32.663031040932566 9] 41.663031040932566]
Test Case:  88 | Input/Output: [[63.173642477392946 46] 109.17364247739295]
Test Case:  89 | Input/Output: [[44.100180011133375 31] 75.10018001113338]
Test Case:  90 | Input/Output: [[-28.45890153948541 -22] -50.45890153948541]
Test Case:  91 | Input/Output: [[39.8318991435865 88] 127.8318991435865]
Test Case:  92 | Input/Output: [[-98.33312587025715 47] -51.33312587025715]
Test Case:  93 | Input/Output: [[22.728053620259473 -98] -75.27194637974053]
Test Case:  94 | Input/Output: [[31.895121568447422 76] 107.89512156844742]
Test Case:  95 | Input/Output: [[19.12611227057309 12] 31.12611227057309]
Test Case:  96 | Input/Output: [[-98.66663856600984 98] -0.6666385660098371]
Test Case:  97 | Input/Output: [[-13.783513561541156 -14] -27.783513561541156]
Test Case:  98 | Input/Output: [[-97.39244759400778 40] -57.39244759400778]
Test Case:  99 | Input/Output: [[90.02022895541796 86] 176.02022895541796]
Test Case: 100 | Input/Output: [[66.04081057889562 40] 106.04081057889562]
Test Case: 101 | Input/Output: [[76.40710067030344 -11] 65.40710067030344]
Test Case: 102 | Input/Output: [[-39.57032167119499 -15] -54.57032167119499]
Test Case: 103 | Input/Output: [[-3.664690799128394 -63] -66.6646907991284]
Test Case: 104 | Input/Output: [[63.00175132385323 -78] -14.998248676146773]
Test Case: 105 | Input/Output: [[-12.457531492942792 17] 4.542468507057208]
Test Case: 106 | Input/Output: [[97.60266659559434 -14] 83.60266659559434]
Test Case: 107 | Input/Output: [[96.27660770597225 -84] 12.276607705972253]
Test Case: 108 | Input/Output: [[-74.50769825392518 -19] -93.50769825392518]
Test Case: 109 | Input/Output: [[53.84773025317293 -50] 3.8477302531729265]
Test Case: 110 | Input/Output: [[-45.87877964915678 22] -23.878779649156783]
Test Case: 111 | Input/Output: [[73.9441832434909 -60] 13.944183243490897]
Test Case: 112 | Input/Output: [[58.26344043577396 4] 62.26344043577396]
Test Case: 113 | Input/Output: [[-8.344872781279207 2] -6.344872781279207]
Test Case: 114 | Input/Output: [[-60.97641456737848 -98] -158.97641456737847]
Test Case: 115 | Input/Output: [[77.94672472627053 35] 112.94672472627053]
Test Case: 116 | Input/Output: [[-98.16888687790149 -60] -158.16888687790149]
Test Case: 117 | Input/Output: [[-64.71748193199882 -100] -164.7174819319988]
Test Case: 118 | Input/Output: [[27.124630818993566 -71] -43.875369181006434]
Test Case: 119 | Input/Output: [[-76.09225194157841 2] -74.09225194157841]
Test Case: 120 | Input/Output: [[-81.67815016843991 73] -8.678150168439913]
Test Case: 121 | Input/Output: [[92.60277320911513 50] 142.60277320911513]
Test Case: 122 | Input/Output: [[-78.4938316901907 13] -65.4938316901907]
Test Case: 123 | Input/Output: [[40.67678302342509 48] 88.67678302342509]
Test Case: 124 | Input/Output: [[-72.3550415142681 43] -29.355041514268095]
Test Case: 125 | Input/Output: [[89.72708228145882 48] 137.72708228145882]
Test Case: 126 | Input/Output: [[-0.6429624978381554 -71] -71.64296249783816]
Test Case: 127 | Input/Output: [[-74.90254019511961 61] -13.902540195119613]
Test Case: 128 | Input/Output: [[-63.04493388083758 68] 4.955066119162417]
Test Case: 129 | Input/Output: [[9.260083447861362 86] 95.26008344786136]
Test Case: 130 | Input/Output: [[25.939022331633538 20] 45.93902233163354]
Test Case: 131 | Input/Output: [[12.585047835565405 -29] -16.414952164434595]
Test Case: 132 | Input/Output: [[55.574093605074836 -6] 49.574093605074836]
Test Case: 133 | Input/Output: [[-59.48115524370079 84] 24.51884475629921]
Test Case: 134 | Input/Output: [[16.32722203475339 48] 64.32722203475339]
Test Case: 135 | Input/Output: [[73.0208181551182 57] 130.0208181551182]
Test Case: 136 | Input/Output: [[-50.227296095151864 34] -16.227296095151864]
Test Case: 137 | Input/Output: [[-78.07620602825043 22] -56.076206028250425]
Test Case: 138 | Input/Output: [[4.648988949884199 82] 86.6489889498842]
Test Case: 139 | Input/Output: [[-2.183703389573097 35] 32.8162966104269]
Test Case: 140 | Input/Output: [[-51.65732095427407 -79] -130.65732095427407]
Test Case: 141 | Input/Output: [[-12.488217588274011 81] 68.51178241172599]
Test Case: 142 | Input/Output: [[-7.987455363754492 -87] -94.98745536375449]
Test Case: 143 | Input/Output: [[-57.30107007721583 -44] -101.30107007721583]
Test Case: 144 | Input/Output: [[-55.5121058733435 -32] -87.5121058733435]
Test Case: 145 | Input/Output: [[34.6750996819527 79] 113.6750996819527]
Test Case: 146 | Input/Output: [[-46.13496404074735 -78] -124.13496404074735]
Test Case: 147 | Input/Output: [[2.850453271482408 -66] -63.14954672851759]
Test Case: 148 | Input/Output: [[71.7297375677835 46] 117.7297375677835]
Test Case: 149 | Input/Output: [[-32.496084350007706 25] -7.496084350007706]
Test Case: 150 | Input/Output: [[18.007855333122862 75] 93.00785533312286]
Test Case: 151 | Input/Output: [[-34.589936029578894 -22] -56.589936029578894]
Test Case: 152 | Input/Output: [[-83.8974000376374 87] 3.1025999623626035]
Test Case: 153 | Input/Output: [[86.1292583090414 20] 106.1292583090414]
Test Case: 154 | Input/Output: [[-33.34494427784884 -18] -51.34494427784884]
Test Case: 155 | Input/Output: [[18.751700788515507 -50] -31.248299211484493]
Test Case: 156 | Input/Output: [[-12.593418407041867 89] 76.40658159295813]
Test Case: 157 | Input/Output: [[63.473834300335625 -89] -25.526165699664375]
Test Case: 158 | Input/Output: [[-76.75286769332942 -94] -170.75286769332942]
Test Case: 159 | Input/Output: [[-28.861556733730936 -34] -62.861556733730936]
Test Case: 160 | Input/Output: [[19.318716062189154 -50] -30.681283937810846]
Test Case: 161 | Input/Output: [[-24.846114210381515 41] 16.153885789618485]
Test Case: 162 | Input/Output: [[20.481490310423368 -78] -57.51850968957663]
Test Case: 163 | Input/Output: [[20.14035391313429 83] 103.14035391313429]
Test Case: 164 | Input/Output: [[-40.84477061541332 -83] -123.84477061541332]
Test Case: 165 | Input/Output: [[-63.368360807782786 -59] -122.36836080778278]
Test Case: 166 | Input/Output: [[-6.053252765355083 37] 30.946747234644917]
Test Case: 167 | Input/Output: [[47.59456704091076 4] 51.59456704091076]
Test Case: 168 | Input/Output: [[12.44364515651391 48] 60.44364515651391]
Test Case: 169 | Input/Output: [[1.784803409409193 -7] -5.215196590590807]
Test Case: 170 | Input/Output: [[-98.96930826222842 -91] -189.96930826222842]
Test Case: 171 | Input/Output: [[-75.79118126898689 -81] -156.7911812689869]
Test Case: 172 | Input/Output: [[-74.43158030242327 87] 12.56841969757673]
Test Case: 173 | Input/Output: [[56.82839856000476 42] 98.82839856000476]
Test Case: 174 | Input/Output: [[68.94024418589945 2] 70.94024418589945]
Test Case: 175 | Input/Output: [[94.5639739345828 -79] 15.563973934582805]
Test Case: 176 | Input/Output: [[-41.050391411645634 52] 10.949608588354366]
Test Case: 177 | Input/Output: [[-68.77821444219639 23] -45.778214442196386]
Test Case: 178 | Input/Output: [[-37.224390916163586 -67] -104.22439091616359]
Test Case: 179 | Input/Output: [[88.86788849736826 36] 124.86788849736826]
Test Case: 180 | Input/Output: [[-52.078324528410306 93] 40.921675471589694]
Test Case: 181 | Input/Output: [[94.85199042105154 -48] 46.85199042105154]
Test Case: 182 | Input/Output: [[8.606245772497516 12] 20.606245772497516]
Test Case: 183 | Input/Output: [[-45.97861828043808 -46] -91.97861828043807]
Test Case: 184 | Input/Output: [[13.078376241599884 -40] -26.921623758400116]
Test Case: 185 | Input/Output: [[5.064911476402756 50] 55.064911476402756]
Test Case: 186 | Input/Output: [[-93.84437101949442 -62] -155.84437101949442]
Test Case: 187 | Input/Output: [[-40.57252215681171 -4] -44.57252215681171]
Test Case: 188 | Input/Output: [[53.13732027056116 99] 152.13732027056116]
Test Case: 189 | Input/Output: [[14.173922672844455 -70] -55.826077327155545]
Test Case: 190 | Input/Output: [[94.34494880336283 -85] 9.344948803362826]
Test Case: 191 | Input/Output: [[-47.92779636932099 -18] -65.92779636932099]
Test Case: 192 | Input/Output: [[-78.30607942436811 -17] -95.30607942436811]
Test Case: 193 | Input/Output: [[7.226890639498947 5] 12.226890639498947]
Test Case: 194 | Input/Output: [[4.3774760518805635 -82] -77.62252394811944]
Test Case: 195 | Input/Output: [[-66.93508761835933 39] -27.935087618359333]
Test Case: 196 | Input/Output: [[-74.96365391663778 -32] -106.96365391663778]
Test Case: 197 | Input/Output: [[-77.2074219312829 -99] -176.2074219312829]
Test Case: 198 | Input/Output: [[71.13863157023076 -12] 59.13863157023076]
Test Case: 199 | Input/Output: [[69.18939096684662 -48] 21.189390966846616]
Test Case: 200 | Input/Output: [[-83.49662553987021 12] -71.49662553987021]
Test Case: 201 | Input/Output: [[96.27099764283753 -93] 3.2709976428375285]
Test Case: 202 | Input/Output: [[89.50396494534033 -52] 37.50396494534033]
Test Case: 203 | Input/Output: [[73.19790669178246 -5] 68.19790669178246]
Test Case: 204 | Input/Output: [[-96.62517131169763 -6] -102.62517131169763]
Test Case: 205 | Input/Output: [[38.918635904938725 99] 137.91863590493872]
Test Case: 206 | Input/Output: [[95.33556670034253 82] 177.33556670034253]
Test Case: 207 | Input/Output: [[-24.879584961845453 -66] -90.87958496184545]
Test Case: 208 | Input/Output: [[-26.449676049458162 11] -15.449676049458162]
Test Case: 209 | Input/Output: [[-85.85213613434941 -49] -134.8521361343494]
Test Case: 210 | Input/Output: [[-53.78851090181354 -46] -99.78851090181354]
Test Case: 211 | Input/Output: [[19.040165410929006 7] 26.040165410929006]
Test Case: 212 | Input/Output: [[-78.44280454445958 -69] -147.4428045444596]
Test Case: 213 | Input/Output: [[-90.38350235052258 5] -85.38350235052258]
Test Case: 214 | Input/Output: [[-92.8405815854938 40] -52.840581585493794]
Test Case: 215 | Input/Output: [[89.33141223304295 -43] 46.331412233042954]
Test Case: 216 | Input/Output: [[81.08522001261537 58] 139.08522001261537]
Test Case: 217 | Input/Output: [[-63.78717060115575 3] -60.78717060115575]
Test Case: 218 | Input/Output: [[-31.932291434584428 97] 65.06770856541557]
Test Case: 219 | Input/Output: [[-73.92476844940782 -32] -105.92476844940782]
Test Case: 220 | Input/Output: [[82.2312452126464 -69] 13.2312452126464]
Test Case: 221 | Input/Output: [[11.954918010797002 26] 37.954918010797]
Test Case: 222 | Input/Output: [[24.669476647866077 29] 53.66947664786608]
Test Case: 223 | Input/Output: [[67.39753910252239 18] 85.39753910252239]
Test Case: 224 | Input/Output: [[55.09595328046518 -62] -6.9040467195348185]
Test Case: 225 | Input/Output: [[27.0680602457483 60] 87.0680602457483]
Test Case: 226 | Input/Output: [[-18.270992808511764 -30] -48.270992808511764]
Test Case: 227 | Input/Output: [[80.77099766557052 41] 121.77099766557052]
Test Case: 228 | Input/Output: [[11.228072126087696 -45] -33.771927873912304]
Test Case: 229 | Input/Output: [[1.259727686732944 -81] -79.74027231326706]
Test Case: 230 | Input/Output: [[-21.66361032269117 -84] -105.66361032269117]
Test Case: 231 | Input/Output: [[-27.5971376857171 15] -12.597137685717101]
Test Case: 232 | Input/Output: [[6.438312086365158 23] 29.43831208636516]
Test Case: 233 | Input/Output: [[-68.81994857161042 -17] -85.81994857161042]
Test Case: 234 | Input/Output: [[-73.41712009713774 37] -36.41712009713774]
Test Case: 235 | Input/Output: [[-76.07653819141235 -17] -93.07653819141235]
Test Case: 236 | Input/Output: [[94.69642987276791 96] 190.6964298727679]
Test Case: 237 | Input/Output: [[-85.41778352104792 -87] -172.4177835210479]
Test Case: 238 | Input/Output: [[-53.5856585673502 -54] -107.58565856735021]
Test Case: 239 | Input/Output: [[4.632175359800954 38] 42.632175359800954]
Test Case: 240 | Input/Output: [[-98.74937220904461 43] -55.74937220904461]
Test Case: 241 | Input/Output: [[79.94071087481774 100] 179.94071087481774]
Test Case: 242 | Input/Output: [[-76.5705354042486 37] -39.5705354042486]
Test Case: 243 | Input/Output: [[32.967109250162366 -95] -62.032890749837634]
Test Case: 244 | Input/Output: [[63.04464978442769 14] 77.04464978442769]
Test Case: 245 | Input/Output: [[61.79987560287344 -99] -37.20012439712656]
Test Case: 246 | Input/Output: [[99.0242844647592 -18] 81.0242844647592]
Test Case: 247 | Input/Output: [[32.9769487667663 -91] -58.0230512332337]
Test Case: 248 | Input/Output: [[-96.54640414709752 73] -23.54640414709752]
Test Case: 249 | Input/Output: [[19.03154913007063 71] 90.03154913007063]
Test Case: 250 | Input/Output: [[-93.05555779938386 10] -83.05555779938386]
Test Case: 251 | Input/Output: [[-46.88875219238318 -94] -140.88875219238318]
Test Case: 252 | Input/Output: [[87.10222444491802 3] 90.10222444491802]
Test Case: 253 | Input/Output: [[-45.32977173379953 72] 26.670228266200468]
Test Case: 254 | Input/Output: [[99.73951640267134 90] 189.73951640267134]
Test Case: 255 | Input/Output: [[-16.339886475019583 32] 15.660113524980417]
Test Case: 256 | Input/Output: [[37.38822625444112 -31] 6.388226254441122]
Test Case: 257 | Input/Output: [[24.037917968250767 8] 32.03791796825077]
Test Case: 258 | Input/Output: [[94.35114296937721 -98] -3.6488570306227928]
Test Case: 259 | Input/Output: [[39.92012917436256 -87] -47.07987082563744]
Test Case: 260 | Input/Output: [[9.827096530515036 91] 100.82709653051504]
Test Case: 261 | Input/Output: [[-58.940316753727195 -6] -64.94031675372719]
Test Case: 262 | Input/Output: [[-68.28416412909053 -45] -113.28416412909053]
Test Case: 263 | Input/Output: [[55.49649217469948 21] 76.49649217469948]
Test Case: 264 | Input/Output: [[-96.31317380507866 4] -92.31317380507866]
Test Case: 265 | Input/Output: [[-37.57404028307485 14] -23.57404028307485]
Test Case: 266 | Input/Output: [[48.457221122795374 -56] -7.542778877204626]
Test Case: 267 | Input/Output: [[-96.24599112039816 76] -20.24599112039816]
Test Case: 268 | Input/Output: [[5.4772619722389635 -46] -40.52273802776104]
Test Case: 269 | Input/Output: [[-0.1590998322138688 60] 59.84090016778613]
Test Case: 270 | Input/Output: [[-40.659539655870105 -99] -139.6595396558701]
Test Case: 271 | Input/Output: [[-20.97749943171155 44] 23.02250056828845]
Test Case: 272 | Input/Output: [[-49.30464558153089 -76] -125.30464558153089]
Test Case: 273 | Input/Output: [[-13.963687647766946 56] 42.036312352233054]
Test Case: 274 | Input/Output: [[43.270604992211275 -6] 37.270604992211275]
Test Case: 275 | Input/Output: [[-7.250185552413939 -28] -35.25018555241394]
Test Case: 276 | Input/Output: [[-92.07093866523203 -21] -113.07093866523203]
Test Case: 277 | Input/Output: [[-71.7768830920152 -67] -138.7768830920152]
Test Case: 278 | Input/Output: [[32.953367608935224 -94] -61.046632391064776]
Test Case: 279 | Input/Output: [[-64.96315263144412 80] 15.036847368555883]
Test Case: 280 | Input/Output: [[-99.7047659334896 23] -76.7047659334896]
Test Case: 281 | Input/Output: [[17.915860924956363 97] 114.91586092495636]
Test Case: 282 | Input/Output: [[76.76267928531598 94] 170.76267928531598]
Test Case: 283 | Input/Output: [[-29.27022976210516 84] 54.72977023789484]
Test Case: 284 | Input/Output: [[90.52152410799624 -8] 82.52152410799624]
Test Case: 285 | Input/Output: [[-53.18918945342559 -29] -82.1891894534256]
Test Case: 286 | Input/Output: [[8.366694846099804 -75] -66.6333051539002]
Test Case: 287 | Input/Output: [[36.512086707904956 71] 107.51208670790496]
Test Case: 288 | Input/Output: [[-18.59484189130268 98] 79.40515810869732]
Test Case: 289 | Input/Output: [[-50.39154551397724 22] -28.391545513977242]
Test Case: 290 | Input/Output: [[-14.288391462862492 89] 74.71160853713751]
Test Case: 291 | Input/Output: [[-30.92196595507363 91] 60.07803404492637]
Test Case: 292 | Input/Output: [[-61.47378844275935 65] 3.52621155724065]
Test Case: 293 | Input/Output: [[-91.9878161503346 17] -74.9878161503346]
Test Case: 294 | Input/Output: [[34.283197486578814 80] 114.28319748657881]
Test Case: 295 | Input/Output: [[92.11514201210736 -18] 74.11514201210736]
Test Case: 296 | Input/Output: [[62.39864458794949 30] 92.39864458794949]
Test Case: 297 | Input/Output: [[57.436478590060375 88] 145.43647859006037]
Test Case: 298 | Input/Output: [[94.21466553200136 -46] 48.21466553200136]
Test Case: 299 | Input/Output: [[-23.466008367189815 -11] -34.466008367189815]
Test Case: 300 | Input/Output: [[52.86971436164305 44] 96.86971436164305]
Test Case: 301 | Input/Output: [[49.17960052933918 79] 128.17960052933918]
Test Case: 302 | Input/Output: [[58.412100656672095 -20] 38.412100656672095]
Test Case: 303 | Input/Output: [[77.41984217278318 26] 103.41984217278318]
Test Case: 304 | Input/Output: [[54.65247303567929 45] 99.6524730356793]
Test Case: 305 | Input/Output: [[-65.60576576636343 23] -42.60576576636343]
Test Case: 306 | Input/Output: [[87.53338268239753 -32] 55.53338268239753]
Test Case: 307 | Input/Output: [[81.70936793152862 -57] 24.709367931528618]
Test Case: 308 | Input/Output: [[-97.26844617928914 -43] -140.26844617928913]
Test Case: 309 | Input/Output: [[69.0284250086113 -7] 62.02842500861129]
Test Case: 310 | Input/Output: [[97.26130768592697 -16] 81.26130768592697]
Test Case: 311 | Input/Output: [[-37.58294685263734 -17] -54.58294685263734]
Test Case: 312 | Input/Output: [[70.06054852314469 -3] 67.06054852314469]
Test Case: 313 | Input/Output: [[-51.79536700070517 95] 43.20463299929483]
Test Case: 314 | Input/Output: [[66.93682410905092 37] 103.93682410905092]
Test Case: 315 | Input/Output: [[-27.859316472820893 -19] -46.85931647282089]
Test Case: 316 | Input/Output: [[81.44896837894936 -45] 36.44896837894936]
Test Case: 317 | Input/Output: [[64.62457127520904 -95] -30.375428724790964]
Test Case: 318 | Input/Output: [[69.925400250807 65] 134.925400250807]
Test Case: 319 | Input/Output: [[-54.49371019666287 24] -30.493710196662867]
Test Case: 320 | Input/Output: [[51.46247560268213 36] 87.46247560268213]
Test Case: 321 | Input/Output: [[42.175738603707146 9] 51.175738603707146]
Test Case: 322 | Input/Output: [[87.06397557821569 71] 158.0639755782157]
Test Case: 323 | Input/Output: [[70.19333046747965 -95] -24.806669532520345]
Test Case: 324 | Input/Output: [[-57.725486083009095 -47] -104.72548608300909]
Test Case: 325 | Input/Output: [[-57.31882067720058 -23] -80.31882067720058]
Test Case: 326 | Input/Output: [[83.45987144315868 -24] 59.459871443158676]
Test Case: 327 | Input/Output: [[-9.18665838473433 91] 81.81334161526567]
Test Case: 328 | Input/Output: [[-38.88816617916964 -11] -49.88816617916964]
Test Case: 329 | Input/Output: [[50.85851001487106 -71] -20.141489985128942]
Test Case: 330 | Input/Output: [[36.61839962677891 25] 61.61839962677891]
Test Case: 331 | Input/Output: [[55.81500344843164 87] 142.81500344843164]
Test Case: 332 | Input/Output: [[34.381502420244345 -25] 9.381502420244345]
Test Case: 333 | Input/Output: [[-11.117188792849177 -3] -14.117188792849177]
Test Case: 334 | Input/Output: [[-14.412450030968586 52] 37.587549969031414]
Test Case: 335 | Input/Output: [[90.91136028743503 -74] 16.91136028743503]
Test Case: 336 | Input/Output: [[3.350031647975271 -99] -95.64996835202473]
Test Case: 337 | Input/Output: [[-98.71245506565485 6] -92.71245506565485]
Test Case: 338 | Input/Output: [[92.31537161316317 16] 108.31537161316317]
Test Case: 339 | Input/Output: [[-1.1521662486904063 -64] -65.1521662486904]
Test Case: 340 | Input/Output: [[-21.617241592570508 2] -19.617241592570508]
Test Case: 341 | Input/Output: [[-80.86867081412474 81] 0.1313291858752592]
Test Case: 342 | Input/Output: [[36.0143600001301 17] 53.0143600001301]
Test Case: 343 | Input/Output: [[54.14191097212708 71] 125.14191097212708]
Test Case: 344 | Input/Output: [[-65.54293020584461 -49] -114.54293020584461]
Test Case: 345 | Input/Output: [[32.45305060513877 83] 115.45305060513877]
Test Case: 346 | Input/Output: [[88.21464582554299 69] 157.214645825543]
Test Case: 347 | Input/Output: [[-64.40440974534198 55] -9.40440974534198]
Test Case: 348 | Input/Output: [[68.11244297699241 -15] 53.11244297699241]
Test Case: 349 | Input/Output: [[-32.50808541989589 98] 65.49191458010411]
Test Case: 350 | Input/Output: [[-23.096183942355154 11] -12.096183942355154]
Test Case: 351 | Input/Output: [[-16.75998865124862 -12] -28.75998865124862]
Test Case: 352 | Input/Output: [[27.75844315343076 -84] -56.24155684656924]
Test Case: 353 | Input/Output: [[57.07492598523339 -43] 14.074925985233392]
Test Case: 354 | Input/Output: [[-75.66734974296668 7] -68.66734974296668]
Test Case: 355 | Input/Output: [[55.798553468840765 -15] 40.798553468840765]
Test Case: 356 | Input/Output: [[7.005801490578506 10] 17.005801490578506]
Test Case: 357 | Input/Output: [[-34.864800939076275 -17] -51.864800939076275]
Test Case: 358 | Input/Output: [[24.96076127708851 -12] 12.960761277088508]
Test Case: 359 | Input/Output: [[19.478641013143246 -58] -38.521358986856754]
Test Case: 360 | Input/Output: [[50.54864259262828 -40] 10.548642592628283]
Test Case: 361 | Input/Output: [[37.172603003845325 36] 73.17260300384532]
Test Case: 362 | Input/Output: [[63.094812783222494 55] 118.0948127832225]
Test Case: 363 | Input/Output: [[-5.514255320928044 96] 90.48574467907196]
Test Case: 364 | Input/Output: [[-44.00632108398528 37] -7.006321083985277]
Test Case: 365 | Input/Output: [[78.29242083675717 -7] 71.29242083675717]
Test Case: 366 | Input/Output: [[61.89877083656944 -82] -20.10122916343056]
Test Case: 367 | Input/Output: [[-67.88843057580402 42] -25.888430575804023]
Test Case: 368 | Input/Output: [[1.246799247324688 -99] -97.75320075267531]
Test Case: 369 | Input/Output: [[78.42302293721474 82] 160.42302293721474]
Test Case: 370 | Input/Output: [[5.4415595734368765 -11] -5.5584404265631235]
Test Case: 371 | Input/Output: [[-8.995990158357458 -23] -31.995990158357458]
Test Case: 372 | Input/Output: [[-21.301583499242497 45] 23.698416500757503]
Test Case: 373 | Input/Output: [[-55.48326078243897 -1] -56.48326078243897]
Test Case: 374 | Input/Output: [[28.135312202293136 -72] -43.864687797706864]
Test Case: 375 | Input/Output: [[59.70776681510827 -25] 34.70776681510827]
Test Case: 376 | Input/Output: [[79.67067900336525 -64] 15.670679003365251]
Test Case: 377 | Input/Output: [[-7.183245430114752 -51] -58.18324543011475]
Test Case: 378 | Input/Output: [[-73.45027539726257 92] 18.549724602737427]
Test Case: 379 | Input/Output: [[-91.31733137646518 -83] -174.31733137646518]
Test Case: 380 | Input/Output: [[-60.39726651912307 97] 36.60273348087693]
Test Case: 381 | Input/Output: [[25.956642450228614 -28] -2.043357549771386]
Test Case: 382 | Input/Output: [[52.00336059602981 -57] -4.9966394039701925]
Test Case: 383 | Input/Output: [[37.50016306550182 81] 118.50016306550182]
Test Case: 384 | Input/Output: [[48.242500319470906 -51] -2.7574996805290937]
Test Case: 385 | Input/Output: [[68.89000762564581 3] 71.89000762564581]
Test Case: 386 | Input/Output: [[-7.126987733543345 -20] -27.126987733543345]
Test Case: 387 | Input/Output: [[8.548492760946289 81] 89.54849276094629]
Test Case: 388 | Input/Output: [[14.291921582799773 -50] -35.70807841720023]
Test Case: 389 | Input/Output: [[-94.92760239946563 -3] -97.92760239946563]
Test Case: 390 | Input/Output: [[10.212037204693189 -11] -0.7879627953068109]
Test Case: 391 | Input/Output: [[-87.27590237101754 -65] -152.27590237101754]
Test Case: 392 | Input/Output: [[-81.20907831570901 95] 13.790921684290993]
Test Case: 393 | Input/Output: [[-79.49695070315138 -62] -141.49695070315138]
Test Case: 394 | Input/Output: [[-0.5959756605494704 -82] -82.59597566054947]
Test Case: 395 | Input/Output: [[-83.73816371045194 -33] -116.73816371045194]
Test Case: 396 | Input/Output: [[86.89086009006837 -82] 4.890860090068372]
Test Case: 397 | Input/Output: [[-35.43635508115099 -85] -120.43635508115099]
Test Case: 398 | Input/Output: [[21.518143225873914 39] 60.518143225873914]
Test Case: 399 | Input/Output: [[-23.494881646268453 82] 58.50511835373155]
Test Case: 400 | Input/Output: [[68.98593365256113 -14] 54.98593365256113]
Test Case: 401 | Input/Output: [[-87.92731027235119 -82] -169.92731027235118]
Test Case: 402 | Input/Output: [[-94.59751168228938 70] -24.59751168228938]
Test Case: 403 | Input/Output: [[10.934019509558482 87] 97.93401950955848]
Test Case: 404 | Input/Output: [[-3.712185073167504 60] 56.287814926832496]
Test Case: 405 | Input/Output: [[34.46256961801859 -76] -41.53743038198141]
Test Case: 406 | Input/Output: [[-13.645303251616767 -29] -42.64530325161677]
Test Case: 407 | Input/Output: [[17.320588316331936 47] 64.32058831633194]
Test Case: 408 | Input/Output: [[-98.98394592316902 36] -62.98394592316902]
Test Case: 409 | Input/Output: [[-24.375308222577118 83] 58.62469177742288]
Test Case: 410 | Input/Output: [[76.14696674981428 -26] 50.14696674981428]
Test Case: 411 | Input/Output: [[91.87227361652393 -88] 3.872273616523927]
Test Case: 412 | Input/Output: [[95.97248254772057 -71] 24.972482547720574]
Test Case: 413 | Input/Output: [[93.53750636770769 86] 179.5375063677077]
Test Case: 414 | Input/Output: [[-79.85635982540089 37] -42.85635982540089]
Test Case: 415 | Input/Output: [[29.95149873536488 -94] -64.04850126463512]
Test Case: 416 | Input/Output: [[-42.79058557927409 -32] -74.79058557927408]
Test Case: 417 | Input/Output: [[13.950626157550786 89] 102.95062615755079]
Test Case: 418 | Input/Output: [[1.2727864265051068 -50] -48.72721357349489]
Test Case: 419 | Input/Output: [[13.604852479214387 29] 42.60485247921439]
Test Case: 420 | Input/Output: [[-14.285926163799317 17] 2.714073836200683]
Test Case: 421 | Input/Output: [[86.63689540189458 -86] 0.6368954018945772]
Test Case: 422 | Input/Output: [[-37.60626443040715 -94] -131.60626443040715]
Test Case: 423 | Input/Output: [[-96.52837544694547 -77] -173.52837544694546]
Test Case: 424 | Input/Output: [[17.703051798240637 23] 40.70305179824064]
Test Case: 425 | Input/Output: [[-71.46802530354452 -59] -130.46802530354452]
Test Case: 426 | Input/Output: [[-52.037949724080136 -59] -111.03794972408014]
Test Case: 427 | Input/Output: [[94.82837834718049 81] 175.8283783471805]
Test Case: 428 | Input/Output: [[-66.2681469011651 79] 12.731853098834904]
Test Case: 429 | Input/Output: [[58.25381786407337 72] 130.25381786407337]
Test Case: 430 | Input/Output: [[-82.53355222158262 -33] -115.53355222158262]
Test Case: 431 | Input/Output: [[88.4983878947454 46] 134.4983878947454]
Test Case: 432 | Input/Output: [[66.60855793962241 89] 155.60855793962241]
Test Case: 433 | Input/Output: [[28.073328628569982 41] 69.07332862856998]
Test Case: 434 | Input/Output: [[91.73187024100184 40] 131.73187024100184]
Test Case: 435 | Input/Output: [[90.8284907638124 53] 143.8284907638124]
Test Case: 436 | Input/Output: [[-62.49260130651526 -32] -94.49260130651527]
Test Case: 437 | Input/Output: [[-64.39714434274117 19] -45.39714434274117]
Test Case: 438 | Input/Output: [[-88.53015878592767 81] -7.530158785927668]
Test Case: 439 | Input/Output: [[20.003407871598384 -17] 3.003407871598384]
Test Case: 440 | Input/Output: [[-76.12094237642673 62] -14.120942376426726]
Test Case: 441 | Input/Output: [[-47.84919685374618 -37] -84.84919685374618]
Test Case: 442 | Input/Output: [[-8.053877867433613 -59] -67.05387786743361]
Test Case: 443 | Input/Output: [[-25.450743529091895 99] 73.5492564709081]
Test Case: 444 | Input/Output: [[-17.512731093635537 -44] -61.51273109363554]
Test Case: 445 | Input/Output: [[-27.477993722396917 28] 0.5220062776030829]
Test Case: 446 | Input/Output: [[-4.247409321688238 -97] -101.24740932168824]
Test Case: 447 | Input/Output: [[-4.684248941461092 85] 80.31575105853891]
Test Case: 448 | Input/Output: [[-28.217043307635393 51] 22.782956692364607]
Test Case: 449 | Input/Output: [[13.793250915039977 32] 45.79325091503998]
Test Case: 450 | Input/Output: [[93.0623935883894 90] 183.0623935883894]
Test Case: 451 | Input/Output: [[36.45897353563049 46] 82.45897353563049]
Test Case: 452 | Input/Output: [[54.737771465613065 58] 112.73777146561306]
Test Case: 453 | Input/Output: [[-57.98466213930122 91] 33.01533786069878]
Test Case: 454 | Input/Output: [[-85.48684515942524 -20] -105.48684515942524]
Test Case: 455 | Input/Output: [[31.075170680401357 -23] 8.075170680401357]
Test Case: 456 | Input/Output: [[87.67348911488395 8] 95.67348911488395]
Test Case: 457 | Input/Output: [[50.23916998028099 31] 81.23916998028099]
Test Case: 458 | Input/Output: [[78.00073542451605 0] 78.00073542451605]
Test Case: 459 | Input/Output: [[51.68332472969067 -52] -0.3166752703093323]
Test Case: 460 | Input/Output: [[72.20877020543952 -6] 66.20877020543952]
Test Case: 461 | Input/Output: [[-39.84730699847447 -11] -50.84730699847447]
Test Case: 462 | Input/Output: [[42.390187532447726 49] 91.39018753244773]
Test Case: 463 | Input/Output: [[69.69344876506435 -26] 43.693448765064346]
Test Case: 464 | Input/Output: [[-95.14447059272256 52] -43.144470592722556]
Test Case: 465 | Input/Output: [[-94.08785371237131 40] -54.08785371237131]
Test Case: 466 | Input/Output: [[89.75788774865256 -38] 51.757887748652564]
Test Case: 467 | Input/Output: [[-78.49655082736331 -64] -142.4965508273633]
Test Case: 468 | Input/Output: [[9.018258750025268 -39] -29.981741249974732]
Test Case: 469 | Input/Output: [[33.923101801533676 70] 103.92310180153368]
Test Case: 470 | Input/Output: [[8.577375319402563 -51] -42.42262468059744]
Test Case: 471 | Input/Output: [[-75.87169092362146 52] -23.871690923621458]
Test Case: 472 | Input/Output: [[64.10312186625623 -29] 35.10312186625623]
Test Case: 473 | Input/Output: [[95.3313257958905 17] 112.3313257958905]
Test Case: 474 | Input/Output: [[46.22177639141023 -76] -29.77822360858977]
Test Case: 475 | Input/Output: [[1.1957725711538814 -93] -91.80422742884612]
Test Case: 476 | Input/Output: [[52.53503991987421 -68] -15.464960080125792]
Test Case: 477 | Input/Output: [[-19.131504333883825 -36] -55.131504333883825]
Test Case: 478 | Input/Output: [[-93.56675703364444 36] -57.566757033644436]
Test Case: 479 | Input/Output: [[-47.849508556026564 47] -0.8495085560265636]
Test Case: 480 | Input/Output: [[-20.89348400128253 -63] -83.89348400128253]
Test Case: 481 | Input/Output: [[-99.97922266400805 8] -91.97922266400805]
Test Case: 482 | Input/Output: [[-14.54868633128416 -15] -29.54868633128416]
Test Case: 483 | Input/Output: [[-94.31142349165074 -98] -192.31142349165074]
Test Case: 484 | Input/Output: [[-49.17855038449916 86] 36.82144961550084]
Test Case: 485 | Input/Output: [[-54.077647388431195 97] 42.922352611568805]
Test Case: 486 | Input/Output: [[-71.09957755157944 100] 28.900422448420557]
Test Case: 487 | Input/Output: [[-30.82475591461595 27] -3.824755914615949]
Test Case: 488 | Input/Output: [[-20.888711638531433 -74] -94.88871163853143]
Test Case: 489 | Input/Output: [[-7.644245051792083 67] 59.35575494820792]
Test Case: 490 | Input/Output: [[-7.654880462369576 91] 83.34511953763042]
Test Case: 491 | Input/Output: [[-9.918072628133132 -68] -77.91807262813313]
Test Case: 492 | Input/Output: [[80.38218698644067 34] 114.38218698644067]
Test Case: 493 | Input/Output: [[77.08032144263325 -9] 68.08032144263325]
Test Case: 494 | Input/Output: [[-41.857120119508636 -12] -53.857120119508636]
Test Case: 495 | Input/Output: [[-88.83431410090053 -51] -139.83431410090054]
Test Case: 496 | Input/Output: [[72.03766203367076 -1] 71.03766203367076]
Test Case: 497 | Input/Output: [[-80.12253238097693 66] -14.122532380976935]
Test Case: 498 | Input/Output: [[-63.870982531544044 7] -56.870982531544044]
Test Case: 499 | Input/Output: [[60.355250984120545 45] 105.35525098412054]
Test Case: 500 | Input/Output: [[-47.94807746246563 30] -17.948077462465633]
Test Case: 501 | Input/Output: [[45.355711310104624 50] 95.35571131010462]
Test Case: 502 | Input/Output: [[80.42320424154289 -88] -7.576795758457109]
Test Case: 503 | Input/Output: [[92.7110257329436 -35] 57.7110257329436]
Test Case: 504 | Input/Output: [[31.664996740593665 63] 94.66499674059366]
Test Case: 505 | Input/Output: [[27.400274239458142 2] 29.400274239458142]
Test Case: 506 | Input/Output: [[63.22732456601571 -80] -16.77267543398429]
Test Case: 507 | Input/Output: [[-51.489774431571256 77] 25.510225568428744]
Test Case: 508 | Input/Output: [[82.48023995042331 -61] 21.48023995042331]
Test Case: 509 | Input/Output: [[-45.16797132434298 76] 30.83202867565702]
Test Case: 510 | Input/Output: [[-98.84728003449416 -19] -117.84728003449416]
Test Case: 511 | Input/Output: [[93.00967632786973 -100] -6.990323672130273]
Test Case: 512 | Input/Output: [[-11.129697302543889 98] 86.87030269745611]
Test Case: 513 | Input/Output: [[-4.171650556197903 -88] -92.1716505561979]
Test Case: 514 | Input/Output: [[-6.988548100848874 29] 22.011451899151126]
Test Case: 515 | Input/Output: [[-52.59606049075074 -42] -94.59606049075074]
Test Case: 516 | Input/Output: [[66.81715729190608 -3] 63.817157291906085]
Test Case: 517 | Input/Output: [[-65.76023363038797 -2] -67.76023363038797]
Test Case: 518 | Input/Output: [[-96.42527701885668 -5] -101.42527701885668]
Test Case: 519 | Input/Output: [[62.52758543508406 29] 91.52758543508406]
Test Case: 520 | Input/Output: [[-30.00589912831761 -15] -45.00589912831761]
Test Case: 521 | Input/Output: [[-73.32742134134556 -29] -102.32742134134556]
Test Case: 522 | Input/Output: [[-96.0782743872437 58] -38.078274387243695]
Test Case: 523 | Input/Output: [[-73.60563263271555 -64] -137.60563263271555]
Test Case: 524 | Input/Output: [[-19.999872504148072 -3] -22.999872504148072]
Test Case: 525 | Input/Output: [[75.88912133627136 10] 85.88912133627136]
Test Case: 526 | Input/Output: [[63.660767122398425 67] 130.66076712239843]
Test Case: 527 | Input/Output: [[-90.11134649261498 68] -22.111346492614985]
Test Case: 528 | Input/Output: [[-96.11450085921882 -56] -152.11450085921882]
Test Case: 529 | Input/Output: [[-89.89151243695301 14] -75.89151243695301]
Test Case: 530 | Input/Output: [[72.75596141896455 -32] 40.755961418964546]
Test Case: 531 | Input/Output: [[-43.24091477535945 40] -3.2409147753594496]
Test Case: 532 | Input/Output: [[50.87500700634217 62] 112.87500700634217]
Test Case: 533 | Input/Output: [[90.87929058741341 42] 132.8792905874134]
Test Case: 534 | Input/Output: [[33.47379890227364 56] 89.47379890227364]
Test Case: 535 | Input/Output: [[9.345677819761477 -74] -64.65432218023852]
Test Case: 536 | Input/Output: [[2.210643348323174 76] 78.21064334832317]
Test Case: 537 | Input/Output: [[-53.640974583919586 -93] -146.6409745839196]
Test Case: 538 | Input/Output: [[-9.848509313257537 -78] -87.84850931325754]
Test Case: 539 | Input/Output: [[67.49764525630891 -56] 11.497645256308914]
Test Case: 540 | Input/Output: [[-6.580618997473266 55] 48.419381002526734]
Test Case: 541 | Input/Output: [[-62.238054105777984 -93] -155.238054105778]
Test Case: 542 | Input/Output: [[-69.77002494967977 -1] -70.77002494967977]
Test Case: 543 | Input/Output: [[-27.977395123556278 -37] -64.97739512355628]
Test Case: 544 | Input/Output: [[-12.3176210935666 -22] -34.3176210935666]
Test Case: 545 | Input/Output: [[49.790941275292624 92] 141.79094127529262]
Test Case: 546 | Input/Output: [[-64.05937737338331 22] -42.05937737338331]
Test Case: 547 | Input/Output: [[-16.759624395263444 0] -16.759624395263444]
Test Case: 548 | Input/Output: [[42.04803585916039 36] 78.0480358591604]
Test Case: 549 | Input/Output: [[64.01357280534626 -29] 35.01357280534626]
Test Case: 550 | Input/Output: [[95.63711717230123 -37] 58.63711717230123]
Test Case: 551 | Input/Output: [[-8.785832003969048 79] 70.21416799603095]
Test Case: 552 | Input/Output: [[70.17319582585117 -82] -11.826804174148833]
Test Case: 553 | Input/Output: [[70.8752314571521 83] 153.8752314571521]
Test Case: 554 | Input/Output: [[-66.16067257691698 42] -24.16067257691698]
Test Case: 555 | Input/Output: [[90.47231314244024 70] 160.47231314244024]
Test Case: 556 | Input/Output: [[-43.53669732677987 40] -3.5366973267798727]
Test Case: 557 | Input/Output: [[78.27946380281753 -86] -7.720536197182469]
Test Case: 558 | Input/Output: [[79.01099802860332 31] 110.01099802860332]
Test Case: 559 | Input/Output: [[65.73124429596211 67] 132.7312442959621]
Test Case: 560 | Input/Output: [[90.22538975758522 48] 138.22538975758522]
Test Case: 561 | Input/Output: [[46.9897614387084 30] 76.9897614387084]
Test Case: 562 | Input/Output: [[-72.62191030712208 -11] -83.62191030712208]
Test Case: 563 | Input/Output: [[-96.83821637606269 27] -69.83821637606269]
Test Case: 564 | Input/Output: [[-53.29134700600275 -36] -89.29134700600275]
Test Case: 565 | Input/Output: [[-24.67046251936047 88] 63.32953748063953]
Test Case: 566 | Input/Output: [[39.181034206130846 0] 39.181034206130846]
Test Case: 567 | Input/Output: [[86.90648734686371 -5] 81.90648734686371]
Test Case: 568 | Input/Output: [[-92.78960038049323 37] -55.789600380493226]
Test Case: 569 | Input/Output: [[31.742692501387126 -70] -38.257307498612874]
Test Case: 570 | Input/Output: [[-24.6324474142598 90] 65.3675525857402]
Test Case: 571 | Input/Output: [[31.071209506306218 -25] 6.071209506306218]
Test Case: 572 | Input/Output: [[-15.585568448249248 99] 83.41443155175075]
Test Case: 573 | Input/Output: [[-45.837682777598296 -76] -121.8376827775983]
Test Case: 574 | Input/Output: [[78.37061324760947 -72] 6.3706132476094695]
Test Case: 575 | Input/Output: [[-51.85404429470506 -66] -117.85404429470506]
Test Case: 576 | Input/Output: [[-17.71895876132264 51] 33.28104123867736]
Test Case: 577 | Input/Output: [[-49.20070682103701 -59] -108.20070682103702]
Test Case: 578 | Input/Output: [[67.87566917710234 15] 82.87566917710234]
Test Case: 579 | Input/Output: [[-64.29867276326323 -57] -121.29867276326323]
Test Case: 580 | Input/Output: [[-60.7042108770981 65] 4.295789122901901]
Test Case: 581 | Input/Output: [[-90.9670650457324 -14] -104.9670650457324]
Test Case: 582 | Input/Output: [[38.81210355435985 99] 137.81210355435985]
Test Case: 583 | Input/Output: [[-93.85536518134974 78] -15.85536518134974]
Test Case: 584 | Input/Output: [[98.34536783918722 97] 195.34536783918722]
Test Case: 585 | Input/Output: [[63.117270877232755 -67] -3.8827291227672447]
Test Case: 586 | Input/Output: [[-76.7492724125951 81] 4.250727587404896]
Test Case: 587 | Input/Output: [[-33.65981322091159 -2] -35.65981322091159]
Test Case: 588 | Input/Output: [[-82.50424456967191 -64] -146.50424456967193]
Test Case: 589 | Input/Output: [[-34.12554477655689 -80] -114.1255447765569]
Test Case: 590 | Input/Output: [[44.49165956292549 -95] -50.50834043707451]
Test Case: 591 | Input/Output: [[-41.29520360052554 -11] -52.29520360052554]
Test Case: 592 | Input/Output: [[-84.9417748349712 -28] -112.9417748349712]
Test Case: 593 | Input/Output: [[43.228913252865624 25] 68.22891325286562]
Test Case: 594 | Input/Output: [[22.841270524087946 30] 52.841270524087946]
Test Case: 595 | Input/Output: [[27.655263741879793 -74] -46.34473625812021]
Test Case: 596 | Input/Output: [[49.82870768991063 97] 146.82870768991063]
Test Case: 597 | Input/Output: [[32.60959586876183 -24] 8.60959586876183]
Test Case: 598 | Input/Output: [[-49.71612868037432 -46] -95.71612868037431]
Test Case: 599 | Input/Output: [[0.8223731272710637 -90] -89.17762687272894]
Test Case: 600 | Input/Output: [[32.51196170815837 78] 110.51196170815837]
Test Case: 601 | Input/Output: [[-22.55676513032124 -18] -40.55676513032124]
Test Case: 602 | Input/Output: [[57.712203464476374 -83] -25.287796535523626]
Test Case: 603 | Input/Output: [[42.25957192926788 -7] 35.25957192926788]
Test Case: 604 | Input/Output: [[-18.64225119834451 55] 36.35774880165549]
Test Case: 605 | Input/Output: [[-21.3346208922937 73] 51.6653791077063]
Test Case: 606 | Input/Output: [[-49.38312543894643 -89] -138.38312543894642]
Test Case: 607 | Input/Output: [[-36.18521487505899 -96] -132.185214875059]
Test Case: 608 | Input/Output: [[-70.04526243166826 33] -37.04526243166826]
Test Case: 609 | Input/Output: [[-23.936266704854773 -36] -59.93626670485477]
Test Case: 610 | Input/Output: [[19.198623747211045 31] 50.198623747211045]
Test Case: 611 | Input/Output: [[33.34351119102499 17] 50.34351119102499]
Test Case: 612 | Input/Output: [[-32.86455360018485 -30] -62.86455360018485]
Test Case: 613 | Input/Output: [[55.58749566647148 48] 103.58749566647148]
Test Case: 614 | Input/Output: [[-54.23842436689155 -62] -116.23842436689155]
Test Case: 615 | Input/Output: [[-84.04359022461576 33] -51.043590224615755]
Test Case: 616 | Input/Output: [[-81.80314226847842 -47] -128.80314226847844]
Test Case: 617 | Input/Output: [[-50.67744989878948 -82] -132.6774498987895]
Test Case: 618 | Input/Output: [[37.9542424664256 -53] -15.045757533574402]
Test Case: 619 | Input/Output: [[94.2173077281644 47] 141.2173077281644]
Test Case: 620 | Input/Output: [[9.05701095207489 43] 52.05701095207489]
Test Case: 621 | Input/Output: [[32.432173213990666 -43] -10.567826786009334]
Test Case: 622 | Input/Output: [[-91.52696515504044 71] -20.526965155040443]
Test Case: 623 | Input/Output: [[26.832722608501 -63] -36.167277391499]
Test Case: 624 | Input/Output: [[51.86350707188768 17] 68.86350707188768]
Test Case: 625 | Input/Output: [[-76.75025241495155 -24] -100.75025241495155]
Test Case: 626 | Input/Output: [[20.9104199593327 -7] 13.9104199593327]
Test Case: 627 | Input/Output: [[-1.6506065001772328 45] 43.34939349982277]
Test Case: 628 | Input/Output: [[-34.51932789384749 27] -7.519327893847489]
Test Case: 629 | Input/Output: [[-77.52296523722511 -12] -89.52296523722511]
Test Case: 630 | Input/Output: [[-12.057811823135722 -55] -67.05781182313572]
Test Case: 631 | Input/Output: [[48.470081238763385 -97] -48.529918761236615]
Test Case: 632 | Input/Output: [[-96.92411196073665 -36] -132.92411196073664]
Test Case: 633 | Input/Output: [[-84.36073721632773 92] 7.639262783672265]
Test Case: 634 | Input/Output: [[-85.4563086011908 18] -67.4563086011908]
Test Case: 635 | Input/Output: [[54.83571571809179 32] 86.83571571809179]
Test Case: 636 | Input/Output: [[-42.36122452398392 -33] -75.36122452398392]
Test Case: 637 | Input/Output: [[31.619801315560096 49] 80.6198013155601]
Test Case: 638 | Input/Output: [[-32.983985872601124 -79] -111.98398587260112]
Test Case: 639 | Input/Output: [[88.73623626808907 -2] 86.73623626808907]
Test Case: 640 | Input/Output: [[72.4963654683828 -16] 56.496365468382805]
Test Case: 641 | Input/Output: [[44.020525194792015 25] 69.02052519479201]
Test Case: 642 | Input/Output: [[5.535859992281061 35] 40.53585999228106]
Test Case: 643 | Input/Output: [[-77.47282242525677 78] 0.5271775747432343]
Test Case: 644 | Input/Output: [[17.72613379786634 -6] 11.72613379786634]
Test Case: 645 | Input/Output: [[75.92735853151683 -31] 44.92735853151683]
Test Case: 646 | Input/Output: [[-59.43016133354468 52] -7.430161333544682]
Test Case: 647 | Input/Output: [[55.588296489922016 17] 72.58829648992202]
Test Case: 648 | Input/Output: [[71.60977701034983 55] 126.60977701034983]
Test Case: 649 | Input/Output: [[40.57821156110913 -58] -17.42178843889087]
Test Case: 650 | Input/Output: [[24.36472383385049 74] 98.36472383385049]
Test Case: 651 | Input/Output: [[22.068411053893385 57] 79.06841105389339]
Test Case: 652 | Input/Output: [[12.926237520816414 72] 84.92623752081641]
Test Case: 653 | Input/Output: [[-6.511411113681348 9] 2.4885888863186523]
Test Case: 654 | Input/Output: [[8.600020392494429 36] 44.60002039249443]
Test Case: 655 | Input/Output: [[-29.725754515435284 95] 65.27424548456472]
Test Case: 656 | Input/Output: [[-98.89376808792281 27] -71.89376808792281]
Test Case: 657 | Input/Output: [[-63.565863607718256 84] 20.434136392281744]
Test Case: 658 | Input/Output: [[-23.769081166310116 -15] -38.769081166310116]
Test Case: 659 | Input/Output: [[79.08274577823713 53] 132.08274577823713]
Test Case: 660 | Input/Output: [[-63.68943466603527 68] 4.310565333964732]
Test Case: 661 | Input/Output: [[88.82790524005034 -30] 58.82790524005034]
Test Case: 662 | Input/Output: [[-97.69911034842569 12] -85.69911034842569]
Test Case: 663 | Input/Output: [[1.8300936847304428 -100] -98.16990631526956]
Test Case: 664 | Input/Output: [[-30.887935781063703 -85] -115.8879357810637]
Test Case: 665 | Input/Output: [[40.81340200198511 -56] -15.18659799801489]
Test Case: 666 | Input/Output: [[-68.30891377021658 -16] -84.30891377021658]
Test Case: 667 | Input/Output: [[-38.76647033615694 -70] -108.76647033615694]
Test Case: 668 | Input/Output: [[-62.24511035807758 42] -20.245110358077582]
Test Case: 669 | Input/Output: [[97.97651143973499 -58] 39.97651143973499]
Test Case: 670 | Input/Output: [[39.256526119975234 26] 65.25652611997523]
Test Case: 671 | Input/Output: [[-92.38296687889796 14] -78.38296687889796]
Test Case: 672 | Input/Output: [[-80.74045076827285 -78] -158.74045076827286]
Test Case: 673 | Input/Output: [[47.74976243619767 60] 107.74976243619767]
Test Case: 674 | Input/Output: [[-70.69507561918604 -42] -112.69507561918604]
Test Case: 675 | Input/Output: [[-48.61921940981222 -31] -79.61921940981222]
Test Case: 676 | Input/Output: [[-57.91508914941139 44] -13.915089149411394]
Test Case: 677 | Input/Output: [[-3.444847625489203 -53] -56.4448476254892]
Test Case: 678 | Input/Output: [[15.182561599504751 -15] 0.18256159950475137]
Test Case: 679 | Input/Output: [[-85.69973362457675 76] -9.699733624576751]
Test Case: 680 | Input/Output: [[-13.865719674124051 24] 10.134280325875949]
Test Case: 681 | Input/Output: [[-65.79990970412557 -54] -119.79990970412557]
Test Case: 682 | Input/Output: [[-33.412086014024496 -87] -120.4120860140245]
Test Case: 683 | Input/Output: [[61.307356353481765 79] 140.30735635348177]
Test Case: 684 | Input/Output: [[-53.06931096384524 85] 31.93068903615476]
Test Case: 685 | Input/Output: [[64.51153298123339 -15] 49.51153298123339]
Test Case: 686 | Input/Output: [[42.44108454944134 78] 120.44108454944134]
Test Case: 687 | Input/Output: [[10.3923766678258 -26] -15.6076233321742]
Test Case: 688 | Input/Output: [[67.57998255557777 49] 116.57998255557777]
Test Case: 689 | Input/Output: [[10.357441585442672 -17] -6.642558414557328]
Test Case: 690 | Input/Output: [[-19.829435700328958 -100] -119.82943570032896]
Test Case: 691 | Input/Output: [[69.66095870833331 56] 125.66095870833331]
Test Case: 692 | Input/Output: [[-29.695732957133586 -14] -43.695732957133586]
Test Case: 693 | Input/Output: [[-11.678075150017023 57] 45.32192484998298]
Test Case: 694 | Input/Output: [[89.66411563382255 -93] -3.335884366177453]
Test Case: 695 | Input/Output: [[11.346435695357698 45] 56.3464356953577]
Test Case: 696 | Input/Output: [[-3.4803081350947025 -85] -88.4803081350947]
Test Case: 697 | Input/Output: [[-7.283218545403415 23] 15.716781454596585]
Test Case: 698 | Input/Output: [[-21.88514962309543 30] 8.11485037690457]
Test Case: 699 | Input/Output: [[12.423857261982192 -64] -51.57614273801781]
Test Case: 700 | Input/Output: [[-78.83239482694941 31] -47.83239482694941]
Test Case: 701 | Input/Output: [[-4.598504264364209 -6] -10.598504264364209]
Test Case: 702 | Input/Output: [[-17.96707599777652 -41] -58.96707599777652]
Test Case: 703 | Input/Output: [[-99.26142379666636 74] -25.261423796666364]
Test Case: 704 | Input/Output: [[-62.57095595649928 1] -61.57095595649928]
Test Case: 705 | Input/Output: [[-98.34116304729005 77] -21.341163047290053]
Test Case: 706 | Input/Output: [[-24.32145746174446 -31] -55.32145746174446]
Test Case: 707 | Input/Output: [[-69.26525040901971 -63] -132.2652504090197]
Test Case: 708 | Input/Output: [[60.72513370162466 70] 130.72513370162466]
Test Case: 709 | Input/Output: [[66.31017887554819 -31] 35.31017887554819]
Test Case: 710 | Input/Output: [[97.15406036869663 67] 164.15406036869663]
Test Case: 711 | Input/Output: [[-85.79574985120537 -49] -134.79574985120536]
Test Case: 712 | Input/Output: [[-18.27046533752292 32] 13.729534662477079]
Test Case: 713 | Input/Output: [[37.630416126628774 -98] -60.369583873371226]
Test Case: 714 | Input/Output: [[94.36705263646243 58] 152.36705263646243]
Test Case: 715 | Input/Output: [[-61.03774536710753 -63] -124.03774536710753]
Test Case: 716 | Input/Output: [[6.91987624470103 86] 92.91987624470103]
Test Case: 717 | Input/Output: [[-83.21882465948256 -2] -85.21882465948256]
Test Case: 718 | Input/Output: [[-29.769139401747765 -89] -118.76913940174776]
Test Case: 719 | Input/Output: [[-55.248828961020166 23] -32.248828961020166]
Test Case: 720 | Input/Output: [[1.467451003427442 -5] -3.532548996572558]
Test Case: 721 | Input/Output: [[2.212577457223361 -30] -27.78742254277664]
Test Case: 722 | Input/Output: [[-79.13336094803891 -24] -103.13336094803891]
Test Case: 723 | Input/Output: [[-50.30352765331221 76] 25.69647234668779]
Test Case: 724 | Input/Output: [[27.329860647444605 -62] -34.670139352555395]
Test Case: 725 | Input/Output: [[-13.648205732118328 -15] -28.648205732118328]
Test Case: 726 | Input/Output: [[-8.89052529375185 -10] -18.89052529375185]
Test Case: 727 | Input/Output: [[46.31870435319331 93] 139.3187043531933]
Test Case: 728 | Input/Output: [[-35.42733421027897 -99] -134.42733421027896]
Test Case: 729 | Input/Output: [[29.401795325473017 91] 120.40179532547302]
Test Case: 730 | Input/Output: [[65.83009151934587 77] 142.83009151934587]
Test Case: 731 | Input/Output: [[-44.95637729196096 -63] -107.95637729196096]
Test Case: 732 | Input/Output: [[-16.273634849428632 70] 53.72636515057137]
Test Case: 733 | Input/Output: [[-61.51472765267783 -24] -85.51472765267783]
Test Case: 734 | Input/Output: [[-26.908771970416126 -26] -52.908771970416126]
Test Case: 735 | Input/Output: [[-62.90260545414663 -38] -100.90260545414662]
Test Case: 736 | Input/Output: [[96.0475657513363 22] 118.0475657513363]
Test Case: 737 | Input/Output: [[-63.62052054444214 -76] -139.62052054444214]
Test Case: 738 | Input/Output: [[39.184928971835404 -40] -0.8150710281645956]
Test Case: 739 | Input/Output: [[54.97804882422275 100] 154.97804882422275]
Test Case: 740 | Input/Output: [[-25.412404266020204 -88] -113.4124042660202]
Test Case: 741 | Input/Output: [[3.992574650376639 -7] -3.007425349623361]
Test Case: 742 | Input/Output: [[-71.50560984291825 16] -55.50560984291825]
Test Case: 743 | Input/Output: [[90.49593066319568 20] 110.49593066319568]
Test Case: 744 | Input/Output: [[18.763159842585566 97] 115.76315984258557]
Test Case: 745 | Input/Output: [[-4.119518967753805 92] 87.8804810322462]
Test Case: 746 | Input/Output: [[-13.106275631601648 19] 5.8937243683983525]
Test Case: 747 | Input/Output: [[69.06649450683614 -86] -16.933505493163864]
Test Case: 748 | Input/Output: [[86.02070366612432 46] 132.02070366612432]
Test Case: 749 | Input/Output: [[96.86475620845746 -27] 69.86475620845746]
Test Case: 750 | Input/Output: [[-53.28235385812678 3] -50.28235385812678]
Test Case: 751 | Input/Output: [[48.23393983170919 -52] -3.7660601682908066]
Test Case: 752 | Input/Output: [[7.150438702068925 -49] -41.849561297931075]
Test Case: 753 | Input/Output: [[-80.79518352498212 -76] -156.79518352498212]
Test Case: 754 | Input/Output: [[99.75149159101434 -50] 49.75149159101434]
Test Case: 755 | Input/Output: [[7.12706470290459 42] 49.12706470290459]
Test Case: 756 | Input/Output: [[79.82019886697523 50] 129.82019886697523]
Test Case: 757 | Input/Output: [[-30.34224020884706 -93] -123.34224020884706]
Test Case: 758 | Input/Output: [[-78.83061717053488 -19] -97.83061717053488]
Test Case: 759 | Input/Output: [[6.362875262052015 49] 55.362875262052015]
Test Case: 760 | Input/Output: [[62.700300456606186 91] 153.7003004566062]
Test Case: 761 | Input/Output: [[53.94243684172534 12] 65.94243684172534]
Test Case: 762 | Input/Output: [[42.784248635571856 31] 73.78424863557186]
Test Case: 763 | Input/Output: [[0.7208205984352816 -67] -66.27917940156472]
Test Case: 764 | Input/Output: [[-88.11045112658682 -91] -179.11045112658684]
Test Case: 765 | Input/Output: [[4.851155550158154 -84] -79.14884444984185]
Test Case: 766 | Input/Output: [[-83.2776791208526 62] -21.277679120852596]
Test Case: 767 | Input/Output: [[32.107645712235325 -13] 19.107645712235325]
Test Case: 768 | Input/Output: [[43.68827286255984 14] 57.68827286255984]
Test Case: 769 | Input/Output: [[-10.46113624475096 1] -9.46113624475096]
Test Case: 770 | Input/Output: [[19.246792785770083 92] 111.24679278577008]
Test Case: 771 | Input/Output: [[-89.23676259169989 -31] -120.23676259169989]
Test Case: 772 | Input/Output: [[-61.68788339793976 37] -24.687883397939757]
Test Case: 773 | Input/Output: [[-29.144450813913153 -18] -47.14445081391315]
Test Case: 774 | Input/Output: [[26.51542755675318 6] 32.51542755675318]
Test Case: 775 | Input/Output: [[-96.04926140270649 -86] -182.0492614027065]
Test Case: 776 | Input/Output: [[-70.61206498836319 -92] -162.6120649883632]
Test Case: 777 | Input/Output: [[-99.50758306808379 -86] -185.5075830680838]
Test Case: 778 | Input/Output: [[-17.976467519785658 -45] -62.97646751978566]
Test Case: 779 | Input/Output: [[-52.162995802830615 42] -10.162995802830615]
Test Case: 780 | Input/Output: [[31.04179691768286 45] 76.04179691768286]
Test Case: 781 | Input/Output: [[-78.03634439526417 -41] -119.03634439526417]
Test Case: 782 | Input/Output: [[21.050814366460855 33] 54.050814366460855]
Test Case: 783 | Input/Output: [[-19.39059215935042 68] 48.60940784064958]
Test Case: 784 | Input/Output: [[-46.629900027438524 61] 14.370099972561476]
Test Case: 785 | Input/Output: [[0.13562328581832617 75] 75.13562328581833]
Test Case: 786 | Input/Output: [[74.00462593575489 3] 77.00462593575489]
Test Case: 787 | Input/Output: [[-24.465564246280238 53] 28.534435753719762]
Test Case: 788 | Input/Output: [[50.957991730203275 36] 86.95799173020328]
Test Case: 789 | Input/Output: [[2.5282346027291 -87] -84.4717653972709]
Test Case: 790 | Input/Output: [[94.17041811316597 -28] 66.17041811316597]
Test Case: 791 | Input/Output: [[90.9883525935866 -93] -2.0116474064134025]
Test Case: 792 | Input/Output: [[22.660437565401637 -9] 13.660437565401637]
Test Case: 793 | Input/Output: [[-3.902821612385239 -35] -38.90282161238524]
Test Case: 794 | Input/Output: [[85.74570647513445 34] 119.74570647513445]
Test Case: 795 | Input/Output: [[69.28569899537024 51] 120.28569899537024]
Test Case: 796 | Input/Output: [[-89.15294673179135 -20] -109.15294673179135]
Test Case: 797 | Input/Output: [[28.114905125340215 73] 101.11490512534021]
Test Case: 798 | Input/Output: [[82.44170673496475 -72] 10.441706734964754]
Test Case: 799 | Input/Output: [[38.93379908573465 23] 61.93379908573465]
Test Case: 800 | Input/Output: [[-21.187014580603858 52] 30.812985419396142]
Test Case: 801 | Input/Output: [[-27.163632203750552 71] 43.83636779624945]
Test Case: 802 | Input/Output: [[-20.838353965613948 -51] -71.83835396561395]
Test Case: 803 | Input/Output: [[-59.78480316539729 17] -42.78480316539729]
Test Case: 804 | Input/Output: [[65.7799132872614 -50] 15.779913287261394]
Test Case: 805 | Input/Output: [[-80.0478686489574 -89] -169.0478686489574]
Test Case: 806 | Input/Output: [[-91.72400946425275 -54] -145.72400946425273]
Test Case: 807 | Input/Output: [[-81.23946946808785 -32] -113.23946946808785]
Test Case: 808 | Input/Output: [[4.7900912277798255 -4] 0.7900912277798255]
Test Case: 809 | Input/Output: [[4.037115825859615 61] 65.03711582585962]
Test Case: 810 | Input/Output: [[-31.55403544411834 28] -3.554035444118341]
Test Case: 811 | Input/Output: [[-43.63472562085828 8] -35.63472562085828]
Test Case: 812 | Input/Output: [[-91.01077041847549 66] -25.010770418475488]
Test Case: 813 | Input/Output: [[39.48278004501685 6] 45.48278004501685]
Test Case: 814 | Input/Output: [[55.178556141417346 17] 72.17855614141735]
Test Case: 815 | Input/Output: [[28.510749644927586 -31] -2.4892503550724143]
Test Case: 816 | Input/Output: [[-83.20057511566425 16] -67.20057511566425]
Test Case: 817 | Input/Output: [[66.61612520826 97] 163.61612520826]
Test Case: 818 | Input/Output: [[46.529216963320266 -31] 15.529216963320266]
Test Case: 819 | Input/Output: [[-25.126647599041803 51] 25.873352400958197]
Test Case: 820 | Input/Output: [[-9.504022190222258 41] 31.49597780977774]
Test Case: 821 | Input/Output: [[-82.48680572163974 56] -26.48680572163974]
Test Case: 822 | Input/Output: [[75.68213640725904 71] 146.68213640725904]
Test Case: 823 | Input/Output: [[93.30957894535896 -32] 61.309578945358965]
Test Case: 824 | Input/Output: [[4.681881841759534 -93] -88.31811815824047]
Test Case: 825 | Input/Output: [[-44.783098420013644 -48] -92.78309842001364]
Test Case: 826 | Input/Output: [[-99.10549413123024 -41] -140.10549413123024]
Test Case: 827 | Input/Output: [[-42.161728296421884 -64] -106.16172829642188]
Test Case: 828 | Input/Output: [[-44.85795798039953 -51] -95.85795798039953]
Test Case: 829 | Input/Output: [[-56.78492136855289 63] 6.215078631447113]
Test Case: 830 | Input/Output: [[-75.05717533072911 21] -54.05717533072911]
Test Case: 831 | Input/Output: [[-18.32358199777842 30] 11.676418002221581]
Test Case: 832 | Input/Output: [[-37.07037721865394 -25] -62.07037721865394]
Test Case: 833 | Input/Output: [[29.482113370908394 -63] -33.517886629091606]
Test Case: 834 | Input/Output: [[-74.61902270252017 -73] -147.61902270252017]
Test Case: 835 | Input/Output: [[9.581924136312495 45] 54.581924136312495]
Test Case: 836 | Input/Output: [[91.58944474059828 2] 93.58944474059828]
Test Case: 837 | Input/Output: [[-4.630592029366241 82] 77.36940797063376]
Test Case: 838 | Input/Output: [[-66.6504943755952 77] 10.349505624404799]
Test Case: 839 | Input/Output: [[77.53887936379024 -8] 69.53887936379024]
Test Case: 840 | Input/Output: [[-53.62650717939354 48] -5.626507179393542]
Test Case: 841 | Input/Output: [[88.64265035227425 -16] 72.64265035227425]
Test Case: 842 | Input/Output: [[92.22648295705326 7] 99.22648295705326]
Test Case: 843 | Input/Output: [[-89.04484041483194 21] -68.04484041483194]
Test Case: 844 | Input/Output: [[87.275843904786 -39] 48.275843904786]
Test Case: 845 | Input/Output: [[42.94128835473606 -73] -30.05871164526394]
Test Case: 846 | Input/Output: [[-22.68558714959137 -48] -70.68558714959137]
Test Case: 847 | Input/Output: [[-1.9130901109369205 -39] -40.91309011093692]
Test Case: 848 | Input/Output: [[5.872971128007094 -41] -35.127028871992906]
Test Case: 849 | Input/Output: [[45.16925509344631 21] 66.16925509344631]
Test Case: 850 | Input/Output: [[17.623422665616005 41] 58.623422665616005]
Test Case: 851 | Input/Output: [[-15.008813510116752 7] -8.008813510116752]
Test Case: 852 | Input/Output: [[-8.993845229787212 95] 86.00615477021279]
Test Case: 853 | Input/Output: [[40.34379010280344 -95] -54.65620989719656]
Test Case: 854 | Input/Output: [[-69.573151146669 -92] -161.573151146669]
Test Case: 855 | Input/Output: [[98.56298417570125 48] 146.56298417570125]
Test Case: 856 | Input/Output: [[15.452517841913945 23] 38.452517841913945]
Test Case: 857 | Input/Output: [[77.83315022601224 6] 83.83315022601224]
Test Case: 858 | Input/Output: [[-96.88159461955223 -28] -124.88159461955223]
Test Case: 859 | Input/Output: [[84.14204794047922 -77] 7.142047940479216]
Test Case: 860 | Input/Output: [[9.112318250346078 -69] -59.88768174965392]
Test Case: 861 | Input/Output: [[93.9127309506753 3] 96.9127309506753]
Test Case: 862 | Input/Output: [[-57.298626902356474 86] 28.701373097643526]
Test Case: 863 | Input/Output: [[-35.5795411728939 78] 42.4204588271061]
Test Case: 864 | Input/Output: [[92.5552225006613 44] 136.5552225006613]
Test Case: 865 | Input/Output: [[-6.332970790399031 -35] -41.33297079039903]
Test Case: 866 | Input/Output: [[22.053425469887998 -16] 6.053425469887998]
Test Case: 867 | Input/Output: [[-59.02015184156293 -38] -97.02015184156292]
Test Case: 868 | Input/Output: [[32.235976647033624 22] 54.235976647033624]
Test Case: 869 | Input/Output: [[17.66856149862572 -63] -45.33143850137428]
Test Case: 870 | Input/Output: [[-95.62921411781087 -38] -133.62921411781087]
Test Case: 871 | Input/Output: [[44.305023494753016 -76] -31.694976505246984]
Test Case: 872 | Input/Output: [[-72.57455126774065 77] 4.425448732259355]
Test Case: 873 | Input/Output: [[28.70629444682035 86] 114.70629444682035]
Test Case: 874 | Input/Output: [[-78.21787868276047 -60] -138.21787868276047]
Test Case: 875 | Input/Output: [[-19.866564927613297 -75] -94.8665649276133]
Test Case: 876 | Input/Output: [[-40.28341097892134 -20] -60.28341097892134]
Test Case: 877 | Input/Output: [[0.6441082230806074 21] 21.644108223080607]
Test Case: 878 | Input/Output: [[83.99068026136484 -44] 39.990680261364844]
Test Case: 879 | Input/Output: [[-92.9090306906624 -32] -124.9090306906624]
Test Case: 880 | Input/Output: [[51.85601856348123 42] 93.85601856348123]
Test Case: 881 | Input/Output: [[-0.6343464416489724 -87] -87.63434644164897]
Test Case: 882 | Input/Output: [[-74.0755967419233 57] -17.075596741923306]
Test Case: 883 | Input/Output: [[-80.67980651944013 -71] -151.67980651944015]
Test Case: 884 | Input/Output: [[-31.38752790067987 71] 39.61247209932013]
Test Case: 885 | Input/Output: [[-8.495897515511118 -21] -29.495897515511118]
Test Case: 886 | Input/Output: [[-22.59200878449063 57] 34.40799121550937]
Test Case: 887 | Input/Output: [[-46.53236573263915 -6] -52.53236573263915]
Test Case: 888 | Input/Output: [[-13.578397640505145 -75] -88.57839764050514]
Test Case: 889 | Input/Output: [[83.86875759316791 -25] 58.86875759316791]
Test Case: 890 | Input/Output: [[8.58466676199616 -7] 1.5846667619961607]
Test Case: 891 | Input/Output: [[-25.817819776433467 40] 14.182180223566533]
Test Case: 892 | Input/Output: [[-18.094782355479524 -71] -89.09478235547952]
Test Case: 893 | Input/Output: [[-83.2600262812043 -11] -94.2600262812043]
Test Case: 894 | Input/Output: [[37.386237484990005 15] 52.386237484990005]
Test Case: 895 | Input/Output: [[27.47444605373714 -43] -15.52555394626286]
Test Case: 896 | Input/Output: [[-52.16914977373213 75] 22.83085022626787]
Test Case: 897 | Input/Output: [[-77.17991205583522 -99] -176.17991205583522]
Test Case: 898 | Input/Output: [[32.60141596685628 -13] 19.60141596685628]
Test Case: 899 | Input/Output: [[84.14099695786825 70] 154.14099695786825]
Test Case: 900 | Input/Output: [[-6.523810505248079 -69] -75.52381050524808]
Test Case: 901 | Input/Output: [[-18.52354130973724 -33] -51.52354130973724]
Test Case: 902 | Input/Output: [[43.24363576569809 -44] -0.7563642343019126]
Test Case: 903 | Input/Output: [[-78.81884334363903 -24] -102.81884334363903]
Test Case: 904 | Input/Output: [[3.390098003165491 83] 86.39009800316549]
Test Case: 905 | Input/Output: [[21.813883365925534 66] 87.81388336592553]
Test Case: 906 | Input/Output: [[-42.72594579122413 -71] -113.72594579122412]
Test Case: 907 | Input/Output: [[89.68645443132596 -10] 79.68645443132596]
Test Case: 908 | Input/Output: [[49.68148161725432 64] 113.68148161725432]
Test Case: 909 | Input/Output: [[61.1698684759578 95] 156.1698684759578]
Test Case: 910 | Input/Output: [[-84.95979741830935 94] 9.04020258169065]
Test Case: 911 | Input/Output: [[-80.46982845352908 -68] -148.4698284535291]
Test Case: 912 | Input/Output: [[5.518883143933294 -76] -70.4811168560667]
Test Case: 913 | Input/Output: [[-65.58420081785562 -38] -103.58420081785562]
Test Case: 914 | Input/Output: [[-57.317272180614644 81] 23.682727819385356]
Test Case: 915 | Input/Output: [[-32.43096247766432 36] 3.5690375223356767]
Test Case: 916 | Input/Output: [[85.35561023933724 39] 124.35561023933724]
Test Case: 917 | Input/Output: [[-69.98264527420855 -34] -103.98264527420855]
Test Case: 918 | Input/Output: [[28.716502657974132 95] 123.71650265797413]
Test Case: 919 | Input/Output: [[-82.45978587491123 11] -71.45978587491123]
Test Case: 920 | Input/Output: [[-18.35012253592076 49] 30.64987746407924]
Test Case: 921 | Input/Output: [[-56.33441377942845 -1] -57.33441377942845]
Test Case: 922 | Input/Output: [[27.805657311775377 57] 84.80565731177538]
Test Case: 923 | Input/Output: [[13.636419465834578 -56] -42.36358053416542]
Test Case: 924 | Input/Output: [[3.4717807541819354 31] 34.471780754181935]
Test Case: 925 | Input/Output: [[-36.93443704635953 66] 29.065562953640473]
Test Case: 926 | Input/Output: [[-30.91732098197744 22] -8.91732098197744]
Test Case: 927 | Input/Output: [[-7.035911288531963 -6] -13.035911288531963]
Test Case: 928 | Input/Output: [[-58.56434827328671 62] 3.4356517267132887]
Test Case: 929 | Input/Output: [[87.79674685700755 27] 114.79674685700755]
Test Case: 930 | Input/Output: [[-21.342762498898793 15] -6.342762498898793]
Test Case: 931 | Input/Output: [[-76.79311498972984 -70] -146.79311498972984]
Test Case: 932 | Input/Output: [[-72.79226231054281 53] -19.79226231054281]
Test Case: 933 | Input/Output: [[-72.29550640621238 -6] -78.29550640621238]
Test Case: 934 | Input/Output: [[70.49240111472915 85] 155.49240111472915]
Test Case: 935 | Input/Output: [[-22.35850737866913 -48] -70.35850737866913]
Test Case: 936 | Input/Output: [[-10.882937534767038 -99] -109.88293753476704]
Test Case: 937 | Input/Output: [[86.6372528153062 22] 108.6372528153062]
Test Case: 938 | Input/Output: [[58.90790031614384 97] 155.90790031614384]
Test Case: 939 | Input/Output: [[-9.672748377541595 72] 62.327251622458405]
Test Case: 940 | Input/Output: [[-2.2320771178089984 -58] -60.232077117809]
Test Case: 941 | Input/Output: [[-24.695920171918132 -39] -63.69592017191813]
Test Case: 942 | Input/Output: [[-51.0545263832896 14] -37.0545263832896]
Test Case: 943 | Input/Output: [[26.988346043843265 35] 61.988346043843265]
Test Case: 944 | Input/Output: [[-44.657490103976926 -16] -60.657490103976926]
Test Case: 945 | Input/Output: [[8.464770374394831 -54] -45.53522962560517]
Test Case: 946 | Input/Output: [[-89.63616787256771 53] -36.63616787256771]
Test Case: 947 | Input/Output: [[-94.4483711982445 16] -78.4483711982445]
Test Case: 948 | Input/Output: [[-2.2992009897683943 -11] -13.299200989768394]
Test Case: 949 | Input/Output: [[83.1059806345715 6] 89.1059806345715]
Test Case: 950 | Input/Output: [[55.929777836338616 -44] 11.929777836338616]
Test Case: 951 | Input/Output: [[-47.69357080637353 -15] -62.69357080637353]
Test Case: 952 | Input/Output: [[-95.81092133823557 -91] -186.81092133823557]
Test Case: 953 | Input/Output: [[47.889390300164564 -30] 17.889390300164564]
Test Case: 954 | Input/Output: [[83.70237404487074 31] 114.70237404487074]
Test Case: 955 | Input/Output: [[12.352664152845904 31] 43.352664152845904]
Test Case: 956 | Input/Output: [[53.81253968784364 58] 111.81253968784364]
Test Case: 957 | Input/Output: [[14.287469238880107 -40] -25.712530761119893]
Test Case: 958 | Input/Output: [[-28.321973975618107 -83] -111.3219739756181]
Test Case: 959 | Input/Output: [[13.705008765800613 20] 33.70500876580061]
Test Case: 960 | Input/Output: [[-42.960786677699225 -23] -65.96078667769922]
Test Case: 961 | Input/Output: [[-97.51331436719444 -70] -167.51331436719443]
Test Case: 962 | Input/Output: [[75.83648926470795 -63] 12.83648926470795]
Test Case: 963 | Input/Output: [[95.37034067303779 7] 102.37034067303779]
Test Case: 964 | Input/Output: [[98.5416433154582 7] 105.5416433154582]
Test Case: 965 | Input/Output: [[43.474772441356436 -26] 17.474772441356436]
Test Case: 966 | Input/Output: [[80.68910989567911 29] 109.68910989567911]
Test Case: 967 | Input/Output: [[-10.955109734820411 -33] -43.95510973482041]
Test Case: 968 | Input/Output: [[-8.763300778639831 -97] -105.76330077863983]
Test Case: 969 | Input/Output: [[21.394998948157166 13] 34.394998948157166]
Test Case: 970 | Input/Output: [[99.5843015738545 -61] 38.5843015738545]
Test Case: 971 | Input/Output: [[18.808129694608738 -82] -63.19187030539126]
Test Case: 972 | Input/Output: [[-18.30664508862145 45] 26.69335491137855]
Test Case: 973 | Input/Output: [[-40.4626536889511 54] 13.5373463110489]
Test Case: 974 | Input/Output: [[42.793952268835255 52] 94.79395226883526]
Test Case: 975 | Input/Output: [[-27.867500158084496 -51] -78.8675001580845]
Test Case: 976 | Input/Output: [[89.27761987423938 -85] 4.277619874239377]
Test Case: 977 | Input/Output: [[-86.83142981839387 48] -38.83142981839387]
Test Case: 978 | Input/Output: [[5.137594874512089 88] 93.13759487451209]
Test Case: 979 | Input/Output: [[-31.678565230993527 17] -14.678565230993527]
Test Case: 980 | Input/Output: [[-49.62092023673221 42] -7.620920236732211]
Test Case: 981 | Input/Output: [[-31.36667123161348 -79] -110.36667123161348]
Test Case: 982 | Input/Output: [[-81.79341500232155 40] -41.79341500232155]
Test Case: 983 | Input/Output: [[-83.86413151582025 -14] -97.86413151582025]
Test Case: 984 | Input/Output: [[-79.3461948768066 81] 1.6538051231933935]
Test Case: 985 | Input/Output: [[-68.2512394541503 -70] -138.2512394541503]
Test Case: 986 | Input/Output: [[14.571972519832016 -33] -18.428027480167984]
Test Case: 987 | Input/Output: [[-29.405684128712977 -72] -101.40568412871298]
Test Case: 988 | Input/Output: [[-8.99103059572613 48] 39.00896940427387]
Test Case: 989 | Input/Output: [[-89.27477200605236 83] -6.274772006052359]
Test Case: 990 | Input/Output: [[2.130389555387609 16] 18.13038955538761]
Test Case: 991 | Input/Output: [[38.18458392944481 13] 51.18458392944481]
Test Case: 992 | Input/Output: [[67.09900136815395 -67] 0.09900136815394944]
Test Case: 993 | Input/Output: [[-0.9896777732186592 20] 19.01032222678134]
Test Case: 994 | Input/Output: [[-63.40692170174198 -99] -162.40692170174196]
Test Case: 995 | Input/Output: [[13.205904199182214 -90] -76.79409580081779]
Test Case: 996 | Input/Output: [[-38.735064115302166 85] 46.264935884697834]
Test Case: 997 | Input/Output: [[-82.7466696005402 -84] -166.7466696005402]
Test Case: 998 | Input/Output: [[77.67551553178086 36] 113.67551553178086]
Test Case: 999 | Input/Output: [[62.46158840938256 87] 149.46158840938256]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -125 -103 38 -95 -68 -96 -99 63 -76 108 118 83 49 14 34 -9
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 53831.0
Test mean error for best: 26.91550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 67.333859146  
Correct output: -61.0260897243 | Program output: -91.0260897243
Correct output: -98.0936683336 | Program output: -32.0936683336
Correct output: 86.5572957786  | Program output: 9.5572957786  
Correct output: -62.8071716196 | Program output: 26.1928283804 
Correct output: 60.8276798544  | Program output: 90.8276798544 
Correct output: -71.8318464839 | Program output: -76.8318464839
Correct output: -174.9826881203 | Program output: -82.9826881203
Correct output: 77.6327303364  | Program output: 25.6327303364 
Correct output: 99.1771699896  | Program output: 62.1771699896 
Correct output: -72.1707589706 | Program output: 6.8292410294  
Correct output: -21.3637789941 | Program output: 64.6362210059 
Correct output: -25.468379596  | Program output: 12.531620404  
Correct output: 2.16330651     | Program output: -78.83669349  
Correct output: 16.0518072111  | Program output: 47.0518072111 
Correct output: -95.109595054  | Program output: -82.109595054 
Correct output: 9.2239476355   | Program output: 40.2239476355 
Correct output: 125.1130965414 | Program output: 38.1130965414 
Correct output: -122.5871170173 | Program output: -67.5871170173
Correct output: -101.5009667209 | Program output: -47.5009667209
Correct output: 122.8011736679 | Program output: 80.8011736679 
Correct output: 58.0928182809  | Program output: 84.0928182809 
Correct output: -13.014761042  | Program output: -32.014761042 
Correct output: -69.8346847083 | Program output: -62.8346847083
Correct output: -8.1993337526  | Program output: 18.8006662474 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div in2 integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [25.0 2 30.0 1 66.0 2 77.0 2 89.0 12 30.0 1 5.0 1 92.0 3 52.0 2 37.0 2 79.0 13 86.0 12 38.0 11 81.0 10 31.0 2 13.0 2 31.0 2 87.0 3 55.0 3 54.0 3 42.0 3 26.0 2 19.0 2 7.0 1 27.0 11]
Total: 1287.0
Mean: 25.74
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 17766.285592
Median total errors in population: 25335.0
Error averages by case: (694.3952263000003 11.71 694.7289053000011 13.116 706.3738991000008 13.268 696.4320647999979 12.546 702.0382467000006 13.804 699.5470774000023 12.51 687.4394766000007 13.232 729.1792287000012 14.022 690.7011232999993 12.565 695.6851187 12.593 699.4007211999998 13.715 695.8888967000006 13.837 688.4409861000009 13.011 687.8961930000004 10.637 689.986784000001 12.39 704.6631325000001 12.352 688.7523920999993 11.766 705.3486711999988 13.236 714.6582862000008 14.082 710.0274883000008 14.041 702.2875998999979 13.249 698.3675968999992 12.383 679.9773410000001 12.335 696.978864000001 13.135 684.4282719999995 13.127)
Error minima by case: (0.049 2 4.3793 1 0.5052 2 1.0453 2 6.1603 8 0.1723 1 0.5987 1 16.7669 3 0.2384 1 1.1772 2 0.8292 10 0.3638 9 0.0722 7 0.1313 7 0.0518 2 0.8904 2 0.7761 2 27.1131 3 23.5871 3 2.501 3 1.5194 2 1.1227 2 0.2487 2 0.3116 1 1.8548 7)
Average genome size in population (length): 50.671
Average program size in population (points): 51.671
Average percent parens in population: 0.045
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.998
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.998
Total error diversity:				 0.307
Error (vector) diversity:			 0.325
Behavioral diversity:				 0.345
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1271204
--- Timings ---
Current time: 1529614819677 milliseconds
Total Time:           3.3 seconds
Initialization:       0.1 seconds,  3.4%
Reproduction:         0.5 seconds, 16.1%
Fitness Testing:      2.7 seconds, 80.5%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 53831.0
Test mean error for best: 26.91550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 67.333859146  
Correct output: -61.0260897243 | Program output: -91.0260897243
Correct output: -98.0936683336 | Program output: -32.0936683336
Correct output: 86.5572957786  | Program output: 9.5572957786  
Correct output: -62.8071716196 | Program output: 26.1928283804 
Correct output: 60.8276798544  | Program output: 90.8276798544 
Correct output: -71.8318464839 | Program output: -76.8318464839
Correct output: -174.9826881203 | Program output: -82.9826881203
Correct output: 77.6327303364  | Program output: 25.6327303364 
Correct output: 99.1771699896  | Program output: 62.1771699896 
Correct output: -72.1707589706 | Program output: 6.8292410294  
Correct output: -21.3637789941 | Program output: 64.6362210059 
Correct output: -25.468379596  | Program output: 12.531620404  
Correct output: 2.16330651     | Program output: -78.83669349  
Correct output: 16.0518072111  | Program output: 47.0518072111 
Correct output: -95.109595054  | Program output: -82.109595054 
Correct output: 9.2239476355   | Program output: 40.2239476355 
Correct output: 125.1130965414 | Program output: 38.1130965414 
Correct output: -122.5871170173 | Program output: -67.5871170173
Correct output: -101.5009667209 | Program output: -47.5009667209
Correct output: 122.8011736679 | Program output: 80.8011736679 
Correct output: 58.0928182809  | Program output: 84.0928182809 
Correct output: -13.014761042  | Program output: -32.014761042 
Correct output: -69.8346847083 | Program output: -62.8346847083
Correct output: -8.1993337526  | Program output: 18.8006662474 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div in2 integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [25.0 2 30.0 1 66.0 2 77.0 2 89.0 12 30.0 1 5.0 1 92.0 3 52.0 2 37.0 2 79.0 13 86.0 12 38.0 11 81.0 10 31.0 2 13.0 2 31.0 2 87.0 3 55.0 3 54.0 3 42.0 3 26.0 2 19.0 2 7.0 1 27.0 11]
Total: 1287.0
Mean: 25.74
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 6172.21444659999
Median total errors in population: 2035.1348999999998
Error averages by case: (236.68003709999948 9.368 231.17701909999857 10.273 249.76861629999917 10.532 239.0869369999975 10.041 242.17106890000042 12.822 235.25996419999873 10.078 219.55336570000222 10.435 298.2315344999977 11.191 233.11900389999792 10.105 241.2575072000014 10.143 241.42056219999986 12.474 231.71606679999965 12.686 212.3028025000004 12.039 224.46313419999956 10.078 213.90238919999814 9.862 243.0901870999993 9.736 209.9311673000011 9.531 263.6642258999977 10.647 263.08795590000096 11.274 252.8260227999979 11.229 255.74007309999766 10.628 232.77658480000196 9.754 201.6490321000011 9.738 227.85687220000156 10.191 204.2913165999999 12.336)
Error minima by case: (0.049 2 4.3793 1 0.0937 2 1.5573 2 6.1603 8 0.1723 1 0.5987 1 16.7669 3 1.3332 1 1.1772 2 1.8292 9 0.3638 9 0.0722 7 0.0328 6 0.0518 2 2.4573 2 2.7761 2 27.1131 3 23.5871 3 2.501 3 1.5194 2 1.9072 2 0.1407 2 0.3116 1 1.8548 9)
Average genome size in population (length): 60.431
Average program size in population (points): 61.431
Average percent parens in population: 0.022
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.502
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.279
Error (vector) diversity:			 0.299
Behavioral diversity:				 0.327
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2786484
--- Timings ---
Current time: 1529614823040 milliseconds
Total Time:           6.8 seconds
Initialization:       0.1 seconds,  1.7%
Reproduction:         2.1 seconds, 30.1%
Fitness Testing:      4.2 seconds, 60.9%
Report:               0.5 seconds,  7.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 53831.0
Test mean error for best: 26.91550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 67.333859146  
Correct output: -61.0260897243 | Program output: -91.0260897243
Correct output: -98.0936683336 | Program output: -32.0936683336
Correct output: 86.5572957786  | Program output: 9.5572957786  
Correct output: -62.8071716196 | Program output: 26.1928283804 
Correct output: 60.8276798544  | Program output: 90.8276798544 
Correct output: -71.8318464839 | Program output: -76.8318464839
Correct output: -174.9826881203 | Program output: -82.9826881203
Correct output: 77.6327303364  | Program output: 25.6327303364 
Correct output: 99.1771699896  | Program output: 62.1771699896 
Correct output: -72.1707589706 | Program output: 6.8292410294  
Correct output: -21.3637789941 | Program output: 64.6362210059 
Correct output: -25.468379596  | Program output: 12.531620404  
Correct output: 2.16330651     | Program output: -78.83669349  
Correct output: 16.0518072111  | Program output: 47.0518072111 
Correct output: -95.109595054  | Program output: -82.109595054 
Correct output: 9.2239476355   | Program output: 40.2239476355 
Correct output: 125.1130965414 | Program output: 38.1130965414 
Correct output: -122.5871170173 | Program output: -67.5871170173
Correct output: -101.5009667209 | Program output: -47.5009667209
Correct output: 122.8011736679 | Program output: 80.8011736679 
Correct output: 58.0928182809  | Program output: 84.0928182809 
Correct output: -13.014761042  | Program output: -32.014761042 
Correct output: -69.8346847083 | Program output: -62.8346847083
Correct output: -8.1993337526  | Program output: 18.8006662474 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div in2 integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [25.0 2 30.0 1 66.0 2 77.0 2 89.0 12 30.0 1 5.0 1 92.0 3 52.0 2 37.0 2 79.0 13 86.0 12 38.0 11 81.0 10 31.0 2 13.0 2 31.0 2 87.0 3 55.0 3 54.0 3 42.0 3 26.0 2 19.0 2 7.0 1 27.0 11]
Total: 1287.0
Mean: 25.74
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 4676.5388666
Median total errors in population: 1318.0
Error averages by case: (163.16432069999985 5.278 168.90334929999992 5.711 194.09505359999966 5.771 193.72806619999946 5.521 208.1756760999998 13.416 172.80464869999966 5.655 149.7210387000002 5.123 221.4492896999993 6.669 177.50516339999965 5.586 171.47084440000046 5.581 197.47268960000002 12.587 208.77741350000008 12.596 168.45258519999985 12.248 202.6890223000004 10.655 167.35480409999974 5.558 161.43205709999972 5.43 166.42385870000007 5.347 205.61661509999948 6.351 191.22932850000035 6.729 187.5184813999997 6.73 177.9104259999997 6.327 169.10986030000015 5.378 152.9261442000002 5.48 154.0791957000005 5.02 161.07193410000005 12.71)
Error minima by case: (0.6661 2 5.9649 1 7.6666 2 6.4427 2 7.746 9 29.1723 1 0.5987 1 79.9827 3 12.9543 1 6.1772 2 6.8292 9 3.3638 9 0.0722 8 0.0328 6 0.0342 2 13.0 2 6.8621 2 7.924 3 55.0 3 44.501 3 29.8012 2 25.9072 2 3.9852 2 7.0 1 5.7034 9)
Average genome size in population (length): 47.515
Average program size in population (points): 48.515
Average percent parens in population: 0.027
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 3.01
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.655
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.655
Total error diversity:				 0.119
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.136
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3977144
--- Timings ---
Current time: 1529614826036 milliseconds
Total Time:           9.8 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.3 seconds, 33.6%
Fitness Testing:      5.6 seconds, 56.7%
Report:               0.8 seconds,  8.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 53803.0
Test mean error for best: 26.90150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 66.333859146  
Correct output: -61.0260897243 | Program output: -92.0260897243
Correct output: -98.0936683336 | Program output: -33.0936683336
Correct output: 86.5572957786  | Program output: 8.5572957786  
Correct output: -62.8071716196 | Program output: 25.1928283804 
Correct output: 60.8276798544  | Program output: 89.8276798544 
Correct output: -71.8318464839 | Program output: -77.8318464839
Correct output: -174.9826881203 | Program output: -83.9826881203
Correct output: 77.6327303364  | Program output: 24.6327303364 
Correct output: 99.1771699896  | Program output: 61.1771699896 
Correct output: -72.1707589706 | Program output: 5.8292410294  
Correct output: -21.3637789941 | Program output: 63.6362210059 
Correct output: -25.468379596  | Program output: 11.531620404  
Correct output: 2.16330651     | Program output: -79.83669349  
Correct output: 16.0518072111  | Program output: 46.0518072111 
Correct output: -95.109595054  | Program output: -83.109595054 
Correct output: 9.2239476355   | Program output: 39.2239476355 
Correct output: 125.1130965414 | Program output: 37.1130965414 
Correct output: -122.5871170173 | Program output: -68.5871170173
Correct output: -101.5009667209 | Program output: -48.5009667209
Correct output: 122.8011736679 | Program output: 79.8011736679 
Correct output: 58.0928182809  | Program output: 83.0928182809 
Correct output: -13.014761042  | Program output: -33.014761042 
Correct output: -69.8346847083 | Program output: -63.8346847083
Correct output: -8.1993337526  | Program output: 17.8006662474 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div in2 integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [26.0 2 31.0 2 65.0 2 78.0 1 88.0 13 29.0 2 6.0 1 91.0 3 53.0 2 38.0 2 78.0 13 85.0 12 37.0 12 82.0 10 30.0 1 12.0 2 30.0 1 88.0 3 54.0 3 53.0 3 43.0 3 25.0 2 20.0 1 6.0 1 26.0 12]
Total: 1283.0
Mean: 25.66
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 4493.9974132
Median total errors in population: 1296.0
Error averages by case: (153.60335619999998 3.435 157.85430100000002 3.549 191.3388092 3.702 198.2158103 3.531 210.69129610000002 13.226 159.9931308 3.39 136.5967748 2.835 214.54437269999997 4.691 176.6743123 3.564 163.9719665 3.535 202.2756559 12.602 207.8267447 12.562 166.6718847 12.218 200.89944969999996 10.372 160.57570009999998 3.562 146.0404448 3.567 160.5412083 3.474 207.1548869 4.474 182.2631315 4.685 181.13773769999997 4.69 168.4797954 4.506 156.5416365 3.519 147.9193557 3.552 140.6376558 2.869 157.1129956 12.325)
Error minima by case: (8.8241 2 28.0 1 4.8051 2 3.0475 1 30.4814 10 22.6821 1 3.0 1 81.6941 3 5.8771 1 15.6674 2 21.1179 11 14.4387 11 18.5433 11 1.1633 8 15.0518 1 1.821 2 8.2239 1 41.6033 3 29.2985 3 8.2124 3 39.2914 2 23.0928 2 6.0897 1 6.0 1 1.2743 10)
Average genome size in population (length): 37.203
Average program size in population (points): 38.203
Average percent parens in population: 0.030
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.50225
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 82
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.034
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 4909044
--- Timings ---
Current time: 1529614829474 milliseconds
Total Time:          13.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.0 seconds, 37.6%
Fitness Testing:      7.0 seconds, 52.4%
Report:               1.2 seconds,  9.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 53828.0
Test mean error for best: 26.91400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 65.333859146  
Correct output: -61.0260897243 | Program output: -93.0260897243
Correct output: -98.0936683336 | Program output: -34.0936683336
Correct output: 86.5572957786  | Program output: 7.5572957786  
Correct output: -62.8071716196 | Program output: 24.1928283804 
Correct output: 60.8276798544  | Program output: 88.8276798544 
Correct output: -71.8318464839 | Program output: -78.8318464839
Correct output: -174.9826881203 | Program output: -84.9826881203
Correct output: 77.6327303364  | Program output: 23.6327303364 
Correct output: 99.1771699896  | Program output: 60.1771699896 
Correct output: -72.1707589706 | Program output: 4.8292410294  
Correct output: -21.3637789941 | Program output: 62.6362210059 
Correct output: -25.468379596  | Program output: 10.531620404  
Correct output: 2.16330651     | Program output: -80.83669349  
Correct output: 16.0518072111  | Program output: 45.0518072111 
Correct output: -95.109595054  | Program output: -84.109595054 
Correct output: 9.2239476355   | Program output: 38.2239476355 
Correct output: 125.1130965414 | Program output: 36.1130965414 
Correct output: -122.5871170173 | Program output: -69.5871170173
Correct output: -101.5009667209 | Program output: -49.5009667209
Correct output: 122.8011736679 | Program output: 78.8011736679 
Correct output: 58.0928182809  | Program output: 82.0928182809 
Correct output: -13.014761042  | Program output: -34.014761042 
Correct output: -69.8346847083 | Program output: -64.8346847083
Correct output: -8.1993337526  | Program output: 16.8006662474 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec integer_mult integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup float_dec print_float float_rot float_stackdepth integer_div in2 integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [27.0 2 32.0 2 64.0 2 79.0 2 87.0 13 28.0 2 7.0 1 90.0 2 54.0 2 39.0 2 77.0 13 84.0 11 36.0 12 83.0 10 29.0 2 11.0 2 29.0 2 89.0 3 53.0 3 52.0 3 44.0 3 24.0 2 21.0 2 5.0 1 25.0 12]
Total: 1280.0
Mean: 25.6
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3038.9806159
Median total errors in population: 1287.0
Error averages by case: (95.5186845 2.787 100.94706740000001 2.307 134.76290889999999 2.954 143.31060159999998 2.831 154.6256263 12.492 100.3828057 2.2 78.13497229999999 2.021 159.4201375 3.936 120.22632020000002 2.868 106.61306159999998 2.841 145.6178596 12.855 151.638725 12.224 107.49996430000002 11.502 147.12722920000004 10.113 100.9901492 2.829 86.18416910000002 2.879 100.9435207 2.781 152.82608330000002 3.834 124.95927130000001 3.935 123.8108432 3.938 111.3846704 3.835 96.6792958 2.846 90.43564890000002 2.857 80.4410487 2.038 97.26995120000001 11.527)
Error minima by case: (23.0 2 21.9739 1 15.0937 2 44.1652 1 20.1928 8 28.0 1 3.0 1 90.0 2 35.2406 1 35.0 2 10.8292 11 20.0132 9 25.2906 10 1.3157 8 14.7167 1 11.0 2 8.6456 1 82.721 3 39.5871 3 18.501 3 40.0 2 24.0 2 12.3827 1 5.0 1 8.0134 9)
Average genome size in population (length): 37.441
Average program size in population (points): 38.441
Average percent parens in population: 0.027
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.941625
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 198
Genome diversity (% unique Plush genomes):	 0.548
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 198
Syntactic diversity (% unique Push programs):	 0.548
Total error diversity:				 0.026
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 5845469
--- Timings ---
Current time: 1529614832344 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.2 seconds, 38.4%
Fitness Testing:      8.3 seconds, 51.3%
Report:               1.5 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 53828.0
Test mean error for best: 26.91400
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 65.333859146  
Correct output: -61.0260897243 | Program output: -93.0260897243
Correct output: -98.0936683336 | Program output: -34.0936683336
Correct output: 86.5572957786  | Program output: 7.5572957786  
Correct output: -62.8071716196 | Program output: 24.1928283804 
Correct output: 60.8276798544  | Program output: 88.8276798544 
Correct output: -71.8318464839 | Program output: -78.8318464839
Correct output: -174.9826881203 | Program output: -84.9826881203
Correct output: 77.6327303364  | Program output: 23.6327303364 
Correct output: 99.1771699896  | Program output: 60.1771699896 
Correct output: -72.1707589706 | Program output: 4.8292410294  
Correct output: -21.3637789941 | Program output: 62.6362210059 
Correct output: -25.468379596  | Program output: 10.531620404  
Correct output: 2.16330651     | Program output: -80.83669349  
Correct output: 16.0518072111  | Program output: 45.0518072111 
Correct output: -95.109595054  | Program output: -84.109595054 
Correct output: 9.2239476355   | Program output: 38.2239476355 
Correct output: 125.1130965414 | Program output: 36.1130965414 
Correct output: -122.5871170173 | Program output: -69.5871170173
Correct output: -101.5009667209 | Program output: -49.5009667209
Correct output: 122.8011736679 | Program output: 78.8011736679 
Correct output: 58.0928182809  | Program output: 82.0928182809 
Correct output: -13.014761042  | Program output: -34.014761042 
Correct output: -69.8346847083 | Program output: -64.8346847083
Correct output: -8.1993337526  | Program output: 16.8006662474 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec integer_mult integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup float_dec print_float float_rot float_stackdepth integer_div in2 integer_fromfloat integer_dup_times float_swap float_dup float_dec)
Errors: [27.0 2 32.0 2 64.0 2 79.0 2 87.0 13 28.0 2 7.0 1 90.0 2 54.0 2 39.0 2 77.0 13 84.0 11 36.0 12 83.0 10 29.0 2 11.0 2 29.0 2 89.0 3 53.0 3 52.0 3 44.0 3 24.0 2 21.0 2 5.0 1 25.0 12]
Total: 1280.0
Mean: 25.6
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2586.7440176
Median total errors in population: 1287.0
Error averages by case: (77.46934310000002 2.634 82.09551180000001 2.029 116.84812409999999 2.812 126.0679133 2.569 137.81829799999997 12.267 82.57932759999998 1.895 59.03175559999998 1.89 142.30291169999998 3.796 102.5727533 2.694 88.7749642 2.685 128.7295289 13.009 134.59422730000003 12.101 89.7127362 11.275 128.50172600000002 10.002 83.06770390000001 2.559 67.63110500000002 2.759 82.998453 2.506 135.82779520000005 3.69 107.05184380000003 3.8 105.75403890000001 3.789 93.69751250000002 3.686 78.80675299999999 2.683 71.01776219999998 2.627 61.61995850000001 1.894 79.24397050000002 11.277)
Error minima by case: (24.0 2 29.0 1 64.0 2 10.5573 1 60.9292 9 28.0 1 4.0 1 90.0 2 26.6327 2 36.0 2 72.1705 11 20.6946 10 25.2906 11 1.3157 8 14.7167 1 11.0 2 8.6456 1 39.1131 3 53.0 3 52.0 3 41.0 3 24.0 2 8.0808 1 5.0 1 8.0134 9)
Average genome size in population (length): 38.335
Average program size in population (points): 39.335
Average percent parens in population: 0.026
Minimum age in population: 5.0
Maximum age in population: 9.4375
Average age in population: 7.3475
Median age in population: 7.375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 161
Genome diversity (% unique Plush genomes):	 0.587
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 161
Syntactic diversity (% unique Push programs):	 0.587
Total error diversity:				 0.022
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 6803844
--- Timings ---
Current time: 1529614835250 milliseconds
Total Time:          19.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.4 seconds, 39.1%
Fitness Testing:      9.6 seconds, 50.4%
Report:               1.9 seconds,  9.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 54005.0
Test mean error for best: 27.00250
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 63.333859146  
Correct output: -61.0260897243 | Program output: -95.0260897243
Correct output: -98.0936683336 | Program output: -36.0936683336
Correct output: 86.5572957786  | Program output: 5.5572957786  
Correct output: -62.8071716196 | Program output: 22.1928283804 
Correct output: 60.8276798544  | Program output: 86.8276798544 
Correct output: -71.8318464839 | Program output: -80.8318464839
Correct output: -174.9826881203 | Program output: -86.9826881203
Correct output: 77.6327303364  | Program output: 21.6327303364 
Correct output: 99.1771699896  | Program output: 58.1771699896 
Correct output: -72.1707589706 | Program output: 2.8292410294  
Correct output: -21.3637789941 | Program output: 60.6362210059 
Correct output: -25.468379596  | Program output: 8.531620404   
Correct output: 2.16330651     | Program output: -82.83669349  
Correct output: 16.0518072111  | Program output: 43.0518072111 
Correct output: -95.109595054  | Program output: -86.109595054 
Correct output: 9.2239476355   | Program output: 36.2239476355 
Correct output: 125.1130965414 | Program output: 34.1130965414 
Correct output: -122.5871170173 | Program output: -71.5871170173
Correct output: -101.5009667209 | Program output: -51.5009667209
Correct output: 122.8011736679 | Program output: 76.8011736679 
Correct output: 58.0928182809  | Program output: 80.0928182809 
Correct output: -13.014761042  | Program output: -36.014761042 
Correct output: -69.8346847083 | Program output: -66.8346847083
Correct output: -8.1993337526  | Program output: 14.8006662474 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_rot} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod integer_rot integer_swap integer_yank integer_swap in1 integer_mod integer_swap integer_yank integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [29.0 2 34.0 2 62.0 2 81.0 2 85.0 12 26.0 2 9.0 2 88.0 3 56.0 2 41.0 2 75.0 12 82.0 12 34.0 11 85.0 10 27.0 2 9.0 2 27.0 2 91.0 3 51.0 3 50.0 2 46.0 3 22.0 2 23.0 2 3.0 1 23.0 12]
Total: 1269.0
Mean: 25.38
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2648.2158230000005
Median total errors in population: 1283.0
Error averages by case: (80.639909 2.627 86.20493379999999 2.382 119.0141946 2.771 129.336295 2.191 139.2564672 12.668 83.95816989999999 2.3 63.0006802 1.839 144.074604 3.726 105.84771940000002 2.682 91.94820759999999 2.686 129.98170600000003 13.024 136.1376865 12.056 91.20184899999998 11.667 133.10233000000002 10.005 84.5812285 2.186 69.57055420000002 2.716 84.53504489999999 2.136 138.97546800000003 3.679 109.09555350000002 3.772 107.85608390000002 3.758 96.7999695 3.677 80.19264499999998 2.678 75.45715599999998 2.223 63.7084537 1.845 80.77391360000001 11.671)
Error minima by case: (24.0 2 29.0 1 62.0 2 76.0 1 61.3372 11 26.0 1 4.0 1 88.0 2 51.0 2 36.0 1 71.1708 10 17.1606 9 24.4684 11 1.2006 8 15.1736 1 9.0 1 8.225 1 86.0 2 51.0 3 50.0 2 41.0 3 22.0 2 11.7947 1 3.0 1 7.1993 8)
Average genome size in population (length): 39.674
Average program size in population (points): 40.674
Average percent parens in population: 0.025
Minimum age in population: 6.75
Maximum age in population: 10.5625
Average age in population: 8.81190625
Median age in population: 8.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.609
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.609
Total error diversity:				 0.021
Error (vector) diversity:			 0.022
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 7795694
--- Timings ---
Current time: 1529614838217 milliseconds
Total Time:          22.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.7 seconds, 39.7%
Fitness Testing:     10.9 seconds, 49.6%
Report:               2.2 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 54179.0
Test mean error for best: 27.08950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 61.333859146  
Correct output: -61.0260897243 | Program output: -97.0260897243
Correct output: -98.0936683336 | Program output: -38.0936683336
Correct output: 86.5572957786  | Program output: 3.5572957786  
Correct output: -62.8071716196 | Program output: 20.1928283804 
Correct output: 60.8276798544  | Program output: 84.8276798544 
Correct output: -71.8318464839 | Program output: -82.8318464839
Correct output: -174.9826881203 | Program output: -88.9826881203
Correct output: 77.6327303364  | Program output: 19.6327303364 
Correct output: 99.1771699896  | Program output: 56.1771699896 
Correct output: -72.1707589706 | Program output: 0.8292410294  
Correct output: -21.3637789941 | Program output: 58.6362210059 
Correct output: -25.468379596  | Program output: 6.531620404   
Correct output: 2.16330651     | Program output: -84.83669349  
Correct output: 16.0518072111  | Program output: 41.0518072111 
Correct output: -95.109595054  | Program output: -88.109595054 
Correct output: 9.2239476355   | Program output: 34.2239476355 
Correct output: 125.1130965414 | Program output: 32.1130965414 
Correct output: -122.5871170173 | Program output: -73.5871170173
Correct output: -101.5009667209 | Program output: -53.5009667209
Correct output: 122.8011736679 | Program output: 74.8011736679 
Correct output: 58.0928182809  | Program output: 78.0928182809 
Correct output: -13.014761042  | Program output: -38.014761042 
Correct output: -69.8346847083 | Program output: -68.8346847083
Correct output: -8.1993337526  | Program output: 12.8006662474 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [31.0 2 36.0 2 60.0 1 83.0 2 83.0 13 24.0 2 11.0 2 86.0 3 58.0 2 43.0 2 73.0 13 80.0 12 32.0 11 87.0 10 25.0 2 7.0 2 25.0 2 93.0 2 49.0 3 48.0 3 48.0 3 20.0 1 25.0 2 1.0 1 21.0 12]
Total: 1259.0
Mean: 25.18
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2724.3300538
Median total errors in population: 1283.0
Error averages by case: (84.55460489999997 2.677 89.9885274 2.873 121.38930609999998 2.886 132.8840549 2.127 141.2111399 13.018 86.46112289999999 2.706 67.19676309999998 1.981 146.85632049999998 3.611 109.5313185 2.746 95.79269359999999 2.73 132.16429920000002 13.014 138.0943058 11.819 93.46849099999999 12.004 135.9326375 9.994 86.9428036 2.119 72.57451320000001 2.822 86.8806433 2.07 142.60400890000003 3.73 111.80660260000003 3.873 110.3910368 3.866 100.6940144 3.735 82.70059420000001 2.732 79.14572100000002 2.206 66.59702899999999 1.979 83.11750149999999 12.032)
Error minima by case: (24.0 2 11.6413 1 3.0959 1 42.9569 1 22.5444 9 24.0 1 4.0 1 79.985 2 34.0323 2 36.0 1 22.827 10 16.1606 8 14.7944 8 1.2006 8 15.1736 1 0.1119 1 8.225 1 81.5127 2 27.5894 3 6.5032 2 41.0 3 20.0 1 11.3323 1 1.0 1 6.4605 10)
Average genome size in population (length): 41.027
Average program size in population (points): 42.027
Average percent parens in population: 0.024
Minimum age in population: 8.0625
Maximum age in population: 12.1875
Average age in population: 10.29246875
Median age in population: 10.3515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.617
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.617
Total error diversity:				 0.029
Error (vector) diversity:			 0.031
Behavioral diversity:				 0.032
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 8821369
--- Timings ---
Current time: 1529614841211 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.9 seconds, 39.9%
Fitness Testing:     12.3 seconds, 49.1%
Report:               2.6 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 54284.0
Test mean error for best: 27.14200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 60.333859146  
Correct output: -61.0260897243 | Program output: -98.0260897243
Correct output: -98.0936683336 | Program output: -39.0936683336
Correct output: 86.5572957786  | Program output: 2.5572957786  
Correct output: -62.8071716196 | Program output: 19.1928283804 
Correct output: 60.8276798544  | Program output: 83.8276798544 
Correct output: -71.8318464839 | Program output: -83.8318464839
Correct output: -174.9826881203 | Program output: -89.9826881203
Correct output: 77.6327303364  | Program output: 18.6327303364 
Correct output: 99.1771699896  | Program output: 55.1771699896 
Correct output: -72.1707589706 | Program output: -0.1707589706 
Correct output: -21.3637789941 | Program output: 57.6362210059 
Correct output: -25.468379596  | Program output: 5.531620404   
Correct output: 2.16330651     | Program output: -85.83669349  
Correct output: 16.0518072111  | Program output: 40.0518072111 
Correct output: -95.109595054  | Program output: -89.109595054 
Correct output: 9.2239476355   | Program output: 33.2239476355 
Correct output: 125.1130965414 | Program output: 31.1130965414 
Correct output: -122.5871170173 | Program output: -74.5871170173
Correct output: -101.5009667209 | Program output: -54.5009667209
Correct output: 122.8011736679 | Program output: 73.8011736679 
Correct output: 58.0928182809  | Program output: 77.0928182809 
Correct output: -13.014761042  | Program output: -39.014761042 
Correct output: -69.8346847083 | Program output: -69.8346847083
Correct output: -8.1993337526  | Program output: 11.8006662474 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec in2 float_rot float_dec integer_mod float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap)
Errors: [32.0 2 37.0 2 59.0 2 84.0 2 82.0 13 23.0 2 12.0 2 85.0 3 59.0 2 44.0 2 72.0 2 79.0 12 31.0 11 88.0 10 24.0 2 6.0 2 24.0 2 94.0 3 48.0 3 47.0 3 49.0 3 19.0 2 26.0 2 0.0 0 20.0 12]
Total: 1245.0
Mean: 24.9
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2471.4403445999997
Median total errors in population: 1280.0
Error averages by case: (74.17274210000001 2.538 81.90512540000002 2.69 112.1928537 2.691 123.25121850000001 2.411 130.64845559999998 13.0 74.7786241 2.578 58.65534589999999 1.809 137.53938129999997 3.009 99.56700740000001 2.601 85.5565879 2.507 121.4285658 12.986 127.52201840000001 11.309 82.20860319999998 11.895 128.8935867 9.907 75.48954480000002 2.499 62.56223710000001 2.566 75.4551073 2.446 132.9802182 3.49 102.21232 3.686 101.004806 3.571 90.4476588 3.581 70.97770799999998 2.575 71.00539309999999 2.542 56.60785229999999 1.767 71.68638300000002 12.037)
Error minima by case: (12.6669 1 8.7737 1 59.0 1 6.8904 1 57.9292 9 23.0 1 2.0321 1 85.0 2 2.0342 2 19.5102 1 71.1708 2 18.0132 9 23.9128 9 1.8195 7 16.0518 1 6.0 1 9.178 1 45.4462 2 48.0 2 47.0 2 41.0 3 19.0 1 10.4389 1 0.0 0 6.601 7)
Average genome size in population (length): 42.358
Average program size in population (points): 43.358
Average percent parens in population: 0.024
Minimum age in population: 9.1875
Maximum age in population: 13.7890625
Average age in population: 11.905671875
Median age in population: 11.9375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.588
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.588
Total error diversity:				 0.028
Error (vector) diversity:			 0.029
Behavioral diversity:				 0.029
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 9880319
--- Timings ---
Current time: 1529614844223 milliseconds
Total Time:          28.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.2 seconds, 40.0%
Fitness Testing:     13.6 seconds, 48.7%
Report:               3.0 seconds, 10.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 54396.0
Test mean error for best: 27.19800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 59.333859146  
Correct output: -61.0260897243 | Program output: -99.0260897243
Correct output: -98.0936683336 | Program output: -40.0936683336
Correct output: 86.5572957786  | Program output: 1.5572957786  
Correct output: -62.8071716196 | Program output: 18.1928283804 
Correct output: 60.8276798544  | Program output: 82.8276798544 
Correct output: -71.8318464839 | Program output: -84.8318464839
Correct output: -174.9826881203 | Program output: -90.9826881203
Correct output: 77.6327303364  | Program output: 17.6327303364 
Correct output: 99.1771699896  | Program output: 54.1771699896 
Correct output: -72.1707589706 | Program output: -1.1707589706 
Correct output: -21.3637789941 | Program output: 56.6362210059 
Correct output: -25.468379596  | Program output: 4.531620404   
Correct output: 2.16330651     | Program output: -86.83669349  
Correct output: 16.0518072111  | Program output: 39.0518072111 
Correct output: -95.109595054  | Program output: -90.109595054 
Correct output: 9.2239476355   | Program output: 32.2239476355 
Correct output: 125.1130965414 | Program output: 30.1130965414 
Correct output: -122.5871170173 | Program output: -75.5871170173
Correct output: -101.5009667209 | Program output: -55.5009667209
Correct output: 122.8011736679 | Program output: 72.8011736679 
Correct output: 58.0928182809  | Program output: 76.0928182809 
Correct output: -13.014761042  | Program output: -40.014761042 
Correct output: -69.8346847083 | Program output: -70.8346847083
Correct output: -8.1993337526  | Program output: 10.8006662474 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec integer_mult float_dec float_dec integer_mult float_rot integer_sub integer_mod float_max float_dec integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [33.0 2 38.0 2 58.0 2 85.0 2 81.0 13 22.0 2 13.0 2 84.0 3 60.0 1 45.0 2 71.0 2 78.0 12 30.0 11 89.0 10 23.0 2 5.0 1 23.0 2 95.0 3 47.0 3 46.0 3 50.0 2 18.0 2 27.0 2 1.0 2 19.0 12]
Total: 1241.0
Mean: 24.82
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2925.0732833
Median total errors in population: 1269.0
Error averages by case: (94.88951429999999 2.747 100.18048230000002 2.94 128.16082959999997 2.898 141.66364399999998 2.461 147.57029699999998 12.907 93.6607159 2.837 77.4126774 2.214 153.16827669999995 3.597 119.0780268 2.844 106.0037142 2.49 137.99257720000003 12.816 144.68899670000002 11.442 99.6502572 11.462 146.099625 9.639 94.0431114 2.831 79.60328909999998 2.517 93.9624589 2.763 152.31242490000002 3.426 118.50433660000003 3.907 117.2271302 3.468 110.8969602 3.845 89.93175660000001 2.783 89.36800710000001 2.857 73.72209610000002 2.028 89.52407790000001 12.039)
Error minima by case: (24.0 1 29.0 1 58.0 1 6.7727 1 29.7363 7 22.0 1 4.0 1 84.0 2 51.0 1 36.0 1 68.7785 2 13.1606 9 9.3812 7 2.2006 8 16.1736 1 5.0 1 9.225 1 86.0 2 47.0 2 46.0 2 41.0 2 18.0 1 7.0884 1 0.0 0 3.601 7)
Average genome size in population (length): 45.417
Average program size in population (points): 46.417
Average percent parens in population: 0.022
Minimum age in population: 11.15625
Maximum age in population: 15.36328125
Average age in population: 13.4986875
Median age in population: 13.51953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.647
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.647
Total error diversity:				 0.031
Error (vector) diversity:			 0.033
Behavioral diversity:				 0.033
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 11015744
--- Timings ---
Current time: 1529614847218 milliseconds
Total Time:          30.9 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.4 seconds, 40.1%
Fitness Testing:     15.0 seconds, 48.4%
Report:               3.4 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 54396.0
Test mean error for best: 27.19800
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 59.333859146  
Correct output: -61.0260897243 | Program output: -99.0260897243
Correct output: -98.0936683336 | Program output: -40.0936683336
Correct output: 86.5572957786  | Program output: 1.5572957786  
Correct output: -62.8071716196 | Program output: 18.1928283804 
Correct output: 60.8276798544  | Program output: 82.8276798544 
Correct output: -71.8318464839 | Program output: -84.8318464839
Correct output: -174.9826881203 | Program output: -90.9826881203
Correct output: 77.6327303364  | Program output: 17.6327303364 
Correct output: 99.1771699896  | Program output: 54.1771699896 
Correct output: -72.1707589706 | Program output: -1.1707589706 
Correct output: -21.3637789941 | Program output: 56.6362210059 
Correct output: -25.468379596  | Program output: 4.531620404   
Correct output: 2.16330651     | Program output: -86.83669349  
Correct output: 16.0518072111  | Program output: 39.0518072111 
Correct output: -95.109595054  | Program output: -90.109595054 
Correct output: 9.2239476355   | Program output: 32.2239476355 
Correct output: 125.1130965414 | Program output: 30.1130965414 
Correct output: -122.5871170173 | Program output: -75.5871170173
Correct output: -101.5009667209 | Program output: -55.5009667209
Correct output: 122.8011736679 | Program output: 72.8011736679 
Correct output: 58.0928182809  | Program output: 76.0928182809 
Correct output: -13.014761042  | Program output: -40.014761042 
Correct output: -69.8346847083 | Program output: -70.8346847083
Correct output: -8.1993337526  | Program output: 10.8006662474 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup float_dec float_dec integer_mult integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup float_dec print_float float_rot float_stackdepth integer_div in2 integer_fromfloat integer_dup_times float_swap float_dup float_dec)
Errors: [33.0 2 38.0 2 58.0 2 85.0 2 81.0 13 22.0 2 13.0 2 84.0 3 60.0 1 45.0 2 71.0 2 78.0 12 30.0 11 89.0 10 23.0 2 5.0 1 23.0 2 95.0 3 47.0 3 46.0 3 50.0 2 18.0 2 27.0 2 1.0 2 19.0 12]
Total: 1241.0
Mean: 24.82
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3381.8894897999994
Median total errors in population: 1269.0
Error averages by case: (113.73553229999999 2.863 121.10528610000001 3.262 146.08558689999998 3.041 160.3159605 2.748 163.35108179999997 12.946 110.0546324 3.045 99.19866590000001 2.786 171.05606289999994 4.096 137.694285 3.077 124.55969010000001 2.764 154.5443397 12.259 160.0651128 11.806 116.83803259999999 11.207 164.93603470000002 9.685 110.48182350000002 3.072 99.06527500000001 2.834 110.42096219999999 2.983 169.6402027 3.513 136.97950910000003 4.121 135.5536506 3.825 129.34728889999997 4.049 106.3553799 2.834 110.1739895 3.151 93.15949780000001 2.35 106.7876069 12.067)
Error minima by case: (7.2014 1 29.0 1 56.0 1 1.4248 1 53.8077 6 20.0 1 4.0 1 82.0 2 7.4997 1 14.0447 1 60.6519 2 12.3643 8 16.4689 7 2.1753 7 15.7167 1 3.0 1 8.5185 1 7.0 2 45.0 2 44.0 2 37.6687 2 1.9012 1 3.0148 1 0.0 0 0.8001 7)
Average genome size in population (length): 51.629
Average program size in population (points): 52.629
Average percent parens in population: 0.020
Minimum age in population: 12.7734375
Maximum age in population: 17.02734375
Average age in population: 15.028615234375
Median age in population: 15.072265625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 40
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 40
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.041
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.045
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 12306469
--- Timings ---
Current time: 1529614850396 milliseconds
Total Time:          34.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.7 seconds, 40.0%
Fitness Testing:     16.4 seconds, 48.2%
Report:               3.9 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 54544.0
Test mean error for best: 27.27200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 58.333859146  
Correct output: -61.0260897243 | Program output: -100.0260897243
Correct output: -98.0936683336 | Program output: -41.0936683336
Correct output: 86.5572957786  | Program output: 0.5572957786  
Correct output: -62.8071716196 | Program output: 17.1928283804 
Correct output: 60.8276798544  | Program output: 81.8276798544 
Correct output: -71.8318464839 | Program output: -85.8318464839
Correct output: -174.9826881203 | Program output: -91.9826881203
Correct output: 77.6327303364  | Program output: 16.6327303364 
Correct output: 99.1771699896  | Program output: 53.1771699896 
Correct output: -72.1707589706 | Program output: -2.1707589706 
Correct output: -21.3637789941 | Program output: 55.6362210059 
Correct output: -25.468379596  | Program output: 3.531620404   
Correct output: 2.16330651     | Program output: -87.83669349  
Correct output: 16.0518072111  | Program output: 38.0518072111 
Correct output: -95.109595054  | Program output: -91.109595054 
Correct output: 9.2239476355   | Program output: 31.2239476355 
Correct output: 125.1130965414 | Program output: 29.1130965414 
Correct output: -122.5871170173 | Program output: -76.5871170173
Correct output: -101.5009667209 | Program output: -56.5009667209
Correct output: 122.8011736679 | Program output: 71.8011736679 
Correct output: 58.0928182809  | Program output: 75.0928182809 
Correct output: -13.014761042  | Program output: -41.014761042 
Correct output: -69.8346847083 | Program output: -71.8346847083
Correct output: -8.1993337526  | Program output: 9.8006662474  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction tag_integer_145} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod float_tan in1 integer_mod float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec float_rot integer_stackdepth float_dec integer_stackdepth float_dec float_dec integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup float_dec print_float float_rot float_stackdepth integer_div in2 integer_fromfloat float_rot integer_sub integer_mod tag_integer_145 integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap float_dup float_dec float_div integer_dup_items integer_pop)
Errors: [34.0 2 39.0 3 57.0 2 86.0 2 80.0 13 21.0 2 14.0 2 83.0 3 61.0 2 46.0 2 70.0 1 77.0 12 29.0 11 90.0 10 22.0 2 4.0 1 22.0 2 96.0 2 46.0 3 45.0 3 51.0 3 17.0 2 28.0 2 2.0 2 18.0 12]
Total: 1239.0
Mean: 24.78
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2860.1012582999997
Median total errors in population: 1259.0
Error averages by case: (95.04524280000001 2.671 101.34548160000001 3.044 123.97101380000002 2.591 142.64631350000002 2.894 142.4263947 12.996 88.00984050000001 2.836 78.99633089999998 2.911 149.63193799999996 3.909 119.65283640000001 2.781 106.17681209999999 2.839 133.42374550000002 9.571 139.14738930000004 12.09 94.88389790000001 11.131 146.33145860000005 9.973 88.43701759999999 2.831 75.82954490000002 2.878 88.36832059999999 2.777 152.5281725 3.367 114.69085880000002 3.9 113.16905000000001 3.982 111.16860609999999 3.784 84.2979232 2.42 90.2772648 2.934 69.89029609999997 1.976 84.62650810000001 12.043)
Error minima by case: (1.2471 1 14.0324 1 55.0 1 2.3105 1 44.7469 9 13.5568 1 3.2266 1 81.0 2 11.235 1 8.0904 1 54.1105 1 3.3035 8 7.4081 8 0.1633 7 14.0518 1 2.0 1 7.2239 1 34.0263 2 44.0 2 43.0 2 31.7144 2 10.8219 1 5.0455 1 0.0 0 2.3325 9)
Average genome size in population (length): 59.189
Average program size in population (points): 60.189
Average percent parens in population: 0.017
Minimum age in population: 14.35546875
Maximum age in population: 18.390625
Average age in population: 16.49329296875
Median age in population: 16.513671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.047
Error (vector) diversity:			 0.049
Behavioral diversity:				 0.049
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 13786194
--- Timings ---
Current time: 1529614853678 milliseconds
Total Time:          37.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.9 seconds, 39.8%
Fitness Testing:     18.1 seconds, 48.3%
Report:               4.3 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 54544.0
Test mean error for best: 27.27200
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 58.333859146  
Correct output: -61.0260897243 | Program output: -100.0260897243
Correct output: -98.0936683336 | Program output: -41.0936683336
Correct output: 86.5572957786  | Program output: 0.5572957786  
Correct output: -62.8071716196 | Program output: 17.1928283804 
Correct output: 60.8276798544  | Program output: 81.8276798544 
Correct output: -71.8318464839 | Program output: -85.8318464839
Correct output: -174.9826881203 | Program output: -91.9826881203
Correct output: 77.6327303364  | Program output: 16.6327303364 
Correct output: 99.1771699896  | Program output: 53.1771699896 
Correct output: -72.1707589706 | Program output: -2.1707589706 
Correct output: -21.3637789941 | Program output: 55.6362210059 
Correct output: -25.468379596  | Program output: 3.531620404   
Correct output: 2.16330651     | Program output: -87.83669349  
Correct output: 16.0518072111  | Program output: 38.0518072111 
Correct output: -95.109595054  | Program output: -91.109595054 
Correct output: 9.2239476355   | Program output: 31.2239476355 
Correct output: 125.1130965414 | Program output: 29.1130965414 
Correct output: -122.5871170173 | Program output: -76.5871170173
Correct output: -101.5009667209 | Program output: -56.5009667209
Correct output: 122.8011736679 | Program output: 71.8011736679 
Correct output: 58.0928182809  | Program output: 75.0928182809 
Correct output: -13.014761042  | Program output: -41.014761042 
Correct output: -69.8346847083 | Program output: -71.8346847083
Correct output: -8.1993337526  | Program output: 9.8006662474  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction tag_integer_145} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod float_tan in1 integer_mod float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec float_rot integer_stackdepth float_dec integer_stackdepth float_dec float_dec integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup float_dec print_float float_rot float_stackdepth integer_div in2 integer_fromfloat float_rot integer_sub integer_mod tag_integer_145 integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap float_dup float_dec float_div integer_dup_items integer_pop)
Errors: [34.0 2 39.0 3 57.0 2 86.0 2 80.0 13 21.0 2 14.0 2 83.0 3 61.0 2 46.0 2 70.0 1 77.0 12 29.0 11 90.0 10 22.0 2 4.0 1 22.0 2 96.0 2 46.0 3 45.0 3 51.0 3 17.0 2 28.0 2 2.0 2 18.0 12]
Total: 1239.0
Mean: 24.78
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3237.3095538999996
Median total errors in population: 1245.0
Error averages by case: (110.1093395 2.907 119.65323570000002 3.237 139.7933655 3.069 156.41827370000001 3.425 154.82239450000003 13.032 101.33825850000001 2.978 97.63740949999999 3.128 164.7985462 4.128 134.2200559 2.797 121.02217100000001 3.011 149.9436899 4.946 151.5225543 12.172 107.52120999999997 11.191 163.93997720000002 10.029 101.6646385 3.0 92.48775550000005 2.743 101.59427 2.935 166.43515560000003 3.804 130.5675404 4.12 129.1653608 4.142 125.84480590000001 3.752 97.68435339999999 2.906 108.8463043 3.074 87.51382579999999 2.222 97.9480623 12.069)
Error minima by case: (8.5446 1 2.0976 2 39.1651 1 2.7681 1 3.8786 10 18.0 1 4.0 1 80.0 2 6.1565 1 15.3879 1 13.2422 1 12.6946 9 17.2906 8 1.1633 8 2.376 1 1.0 1 8.2239 1 6.0 2 43.0 2 42.0 2 39.0119 2 14.0 1 4.4053 1 0.0 0 0.0134 8)
Average genome size in population (length): 61.969
Average program size in population (points): 62.969
Average percent parens in population: 0.016
Minimum age in population: 16.0625
Maximum age in population: 19.75390625
Average age in population: 17.97164306640625
Median age in population: 18.01416015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.048
Error (vector) diversity:			 0.051
Behavioral diversity:				 0.051
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 15335419
--- Timings ---
Current time: 1529614856956 milliseconds
Total Time:          40.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.1 seconds, 39.6%
Fitness Testing:     19.7 seconds, 48.4%
Report:               4.8 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 55667.0
Test mean error for best: 27.83350
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 51.333859146  
Correct output: -61.0260897243 | Program output: -107.0260897243
Correct output: -98.0936683336 | Program output: -48.0936683336
Correct output: 86.5572957786  | Program output: -6.4427042214 
Correct output: -62.8071716196 | Program output: 10.1928283804 
Correct output: 60.8276798544  | Program output: 74.8276798544 
Correct output: -71.8318464839 | Program output: -92.8318464839
Correct output: -174.9826881203 | Program output: -98.9826881203
Correct output: 77.6327303364  | Program output: 9.6327303364  
Correct output: 99.1771699896  | Program output: 46.1771699896 
Correct output: -72.1707589706 | Program output: -9.1707589706 
Correct output: -21.3637789941 | Program output: 48.6362210059 
Correct output: -25.468379596  | Program output: -3.468379596  
Correct output: 2.16330651     | Program output: -94.83669349  
Correct output: 16.0518072111  | Program output: 31.0518072111 
Correct output: -95.109595054  | Program output: -98.109595054 
Correct output: 9.2239476355   | Program output: 24.2239476355 
Correct output: 125.1130965414 | Program output: 22.1130965414 
Correct output: -122.5871170173 | Program output: -83.5871170173
Correct output: -101.5009667209 | Program output: -63.5009667209
Correct output: 122.8011736679 | Program output: 64.8011736679 
Correct output: 58.0928182809  | Program output: 68.0928182809 
Correct output: -13.014761042  | Program output: -48.014761042 
Correct output: -69.8346847083 | Program output: -78.8346847083
Correct output: -8.1993337526  | Program output: 2.8006662474  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod integer_mult integer_stackdepth integer_stackdepth float_dec integer_mult integer_stackdepth integer_stackdepth integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec float_rot integer_stackdepth float_dec integer_swap float_dec integer_mod integer_mult integer_stackdepth float_dec float_dec float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup float_dec float_rot integer_mod float_yank integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [41.0 2 46.0 3 50.0 1 93.0 11 73.0 13 14.0 2 21.0 2 76.0 3 68.0 2 53.0 2 63.0 2 70.0 12 22.0 2 97.0 10 15.0 2 3.0 1 15.0 2 103.0 2 39.0 3 38.0 3 58.0 3 10.0 1 35.0 2 9.0 2 11.0 12]
Total: 1223.0
Mean: 24.46
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3301.2088795
Median total errors in population: 1241.0
Error averages by case: (112.6370953 2.963 124.60680930000002 3.537 142.6345244 3.226 160.04473549999994 4.033 155.3331136 12.989 102.0715211 3.027 102.75712630000002 3.204 167.7016165 4.185 136.6133819 2.684 123.5619844 3.069 153.72308620000007 3.584 151.9175172 12.111 108.42468860000001 11.132 168.2845891 9.984 102.28368420000001 3.032 95.87283909999996 2.393 102.2042906 2.946 168.84072410000002 3.668 133.62295099999997 4.207 132.1701985 4.207 128.4351655 3.669 98.3031249 3.045 113.51047170000001 3.09 92.3878361 2.975 98.2988044 12.007)
Error minima by case: (8.7649 1 30.0 1 23.9063 1 2.9883 1 54.6796 7 6.9208 1 5.0 1 0.9827 2 5.9363 1 15.1772 1 63.0 1 12.6946 8 16.4336 2 0.055 6 11.5397 1 0.0 0 6.2239 1 5.0 1 22.5871 2 3.501 2 28.8012 1 3.9012 1 1.2463 1 0.0 0 0.0134 8)
Average genome size in population (length): 65.798
Average program size in population (points): 66.798
Average percent parens in population: 0.015
Minimum age in population: 17.54150390625
Maximum age in population: 21.282958984375
Average age in population: 19.4045009765625
Median age in population: 19.4349365234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.051
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.057
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 16980369
--- Timings ---
Current time: 1529614860479 milliseconds
Total Time:          44.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.4 seconds, 39.4%
Fitness Testing:     21.3 seconds, 48.4%
Report:               5.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 55419.0
Test mean error for best: 27.70950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 52.333859146  
Correct output: -61.0260897243 | Program output: -106.0260897243
Correct output: -98.0936683336 | Program output: -47.0936683336
Correct output: 86.5572957786  | Program output: -5.4427042214 
Correct output: -62.8071716196 | Program output: 11.1928283804 
Correct output: 60.8276798544  | Program output: 75.8276798544 
Correct output: -71.8318464839 | Program output: -91.8318464839
Correct output: -174.9826881203 | Program output: -97.9826881203
Correct output: 77.6327303364  | Program output: 10.6327303364 
Correct output: 99.1771699896  | Program output: 47.1771699896 
Correct output: -72.1707589706 | Program output: -8.1707589706 
Correct output: -21.3637789941 | Program output: 49.6362210059 
Correct output: -25.468379596  | Program output: -2.468379596  
Correct output: 2.16330651     | Program output: -93.83669349  
Correct output: 16.0518072111  | Program output: 32.0518072111 
Correct output: -95.109595054  | Program output: -97.109595054 
Correct output: 9.2239476355   | Program output: 25.2239476355 
Correct output: 125.1130965414 | Program output: 23.1130965414 
Correct output: -122.5871170173 | Program output: -82.5871170173
Correct output: -101.5009667209 | Program output: -62.5009667209
Correct output: 122.8011736679 | Program output: 65.8011736679 
Correct output: 58.0928182809  | Program output: 69.0928182809 
Correct output: -13.014761042  | Program output: -47.014761042 
Correct output: -69.8346847083 | Program output: -77.8346847083
Correct output: -8.1993337526  | Program output: 3.8006662474  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_pop} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod integer_mult integer_stackdepth integer_stackdepth float_dec integer_mult integer_stackdepth integer_stackdepth integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec integer_yankdup float_rot integer_stackdepth float_dec integer_swap float_dec integer_mod integer_mult integer_stackdepth float_dec float_dec float_rot integer_pop float_dec float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup float_dec float_rot integer_mod float_yank integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [40.0 1 45.0 3 51.0 2 92.0 12 74.0 13 15.0 2 20.0 1 77.0 2 67.0 2 52.0 2 64.0 2 71.0 12 23.0 1 96.0 10 16.0 2 2.0 1 16.0 2 102.0 2 40.0 2 39.0 3 57.0 3 11.0 2 34.0 2 8.0 2 12.0 12]
Total: 1222.0
Mean: 24.44
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3420.3127797999996
Median total errors in population: 1239.0
Error averages by case: (118.83747890000001 3.063 128.97534220000003 4.008 146.02241289999995 3.349 165.4977692 4.464 160.15585740000003 12.986 107.7220051 3.132 107.5513503 3.347 170.61802009999994 4.286 142.34760550000004 3.038 129.59910660000003 3.15 156.83597640000002 3.211 156.53320209999995 12.089 112.8176101 10.945 171.70343370000003 9.998 107.63341900000002 3.129 99.83894959999999 2.455 107.49595690000001 3.052 174.36257089999995 3.425 137.32835380000006 4.321 135.711612 4.318 133.5221824 4.017 104.10555710000003 3.139 117.69234389999994 3.231 97.32350580000004 3.272 102.65015789999998 12.006)
Error minima by case: (24.0 1 29.0 1 49.0 1 34.6814 1 50.9292 8 13.0 1 4.0 1 75.0 2 25.7569 1 36.0 1 53.6519 1 10.0573 8 13.6086 1 1.1715 8 14.0 1 0.0 0 8.2423 1 4.0 1 38.0 2 37.0 2 13.28 2 9.0 1 0.9867 1 0.0 0 0.0134 6)
Average genome size in population (length): 67.036
Average program size in population (points): 68.036
Average percent parens in population: 0.015
Minimum age in population: 18.881103515625
Maximum age in population: 22.737548828125
Average age in population: 20.82717663574219
Median age in population: 20.8604736328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.061
Error (vector) diversity:			 0.065
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 18656294
--- Timings ---
Current time: 1529614864041 milliseconds
Total Time:          47.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.6 seconds, 39.1%
Fitness Testing:     23.1 seconds, 48.5%
Report:               5.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 56412.0
Test mean error for best: 28.20600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 48.333859146  
Correct output: -61.0260897243 | Program output: -110.0260897243
Correct output: -98.0936683336 | Program output: -51.0936683336
Correct output: 86.5572957786  | Program output: -9.4427042214 
Correct output: -62.8071716196 | Program output: 7.1928283804  
Correct output: 60.8276798544  | Program output: 71.8276798544 
Correct output: -71.8318464839 | Program output: -95.8318464839
Correct output: -174.9826881203 | Program output: -101.9826881203
Correct output: 77.6327303364  | Program output: 6.6327303364  
Correct output: 99.1771699896  | Program output: 43.1771699896 
Correct output: -72.1707589706 | Program output: -12.1707589706
Correct output: -21.3637789941 | Program output: 45.6362210059 
Correct output: -25.468379596  | Program output: -6.468379596  
Correct output: 2.16330651     | Program output: -97.83669349  
Correct output: 16.0518072111  | Program output: 28.0518072111 
Correct output: -95.109595054  | Program output: -101.109595054
Correct output: 9.2239476355   | Program output: 21.2239476355 
Correct output: 125.1130965414 | Program output: 19.1130965414 
Correct output: -122.5871170173 | Program output: -86.5871170173
Correct output: -101.5009667209 | Program output: -66.5009667209
Correct output: 122.8011736679 | Program output: 61.8011736679 
Correct output: 58.0928182809  | Program output: 65.0928182809 
Correct output: -13.014761042  | Program output: -51.014761042 
Correct output: -69.8346847083 | Program output: -81.8346847083
Correct output: -8.1993337526  | Program output: -0.1993337526 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec integer_stackdepth integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec float_rot integer_stackdepth float_dec integer_swap float_dec integer_mod integer_mult integer_stackdepth float_dec float_dec float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod float_dec integer_min integer_yank integer_dup float_dec float_rot integer_mod float_yank integer_min integer_yank integer_dup float_dec integer_mod float_yank integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [44.0 2 49.0 2 47.0 2 96.0 12 70.0 13 11.0 2 24.0 2 73.0 2 71.0 2 56.0 2 60.0 1 67.0 12 19.0 2 100.0 10 12.0 2 6.0 3 12.0 2 106.0 2 36.0 3 35.0 3 61.0 3 7.0 2 38.0 2 12.0 2 8.0 1]
Total: 1211.0
Mean: 24.22
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3374.6444788
Median total errors in population: 1239.0
Error averages by case: (118.1926656 3.067 128.03678879999998 4.077 143.7434797 3.324 165.00521119999996 5.625 156.9933557 12.946 104.69711850000002 3.135 106.5740916 3.319 169.23181159999993 4.244 141.1592447 3.136 129.0235117 3.142 152.45352150000002 3.202 153.5932354 12.071 110.1102261 9.932 170.75357069999998 9.986 104.6735382 3.155 97.7655073 2.401 104.55322399999999 3.085 173.9389873 3.343 135.08116869999998 4.311 133.43015870000002 4.22 134.04036050000002 4.108 101.0217655 3.126 116.72441799999997 3.23 96.3006646 3.254 100.1058532 12.002)
Error minima by case: (3.3168 1 29.0 1 47.0 1 2.4597 1 53.6898 8 11.0 1 4.0 1 73.0 2 5.8524 1 10.1602 1 56.6519 1 8.1606 9 15.6086 1 1.1715 7 12.0 1 0.0 0 8.2423 1 5.0 1 36.0 2 35.0 2 33.7842 1 6.9012 1 0.7537 1 0.0 0 0.6675 1)
Average genome size in population (length): 70.196
Average program size in population (points): 71.196
Average percent parens in population: 0.014
Minimum age in population: 19.881103515625
Maximum age in population: 24.4200439453125
Average age in population: 22.26040472412109
Median age in population: 22.26373291015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.808
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.808
Total error diversity:				 0.065
Error (vector) diversity:			 0.069
Behavioral diversity:				 0.071
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 20411219
--- Timings ---
Current time: 1529614867645 milliseconds
Total Time:          51.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.8 seconds, 38.8%
Fitness Testing:     24.9 seconds, 48.6%
Report:               6.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 53990.0
Test mean error for best: 26.99500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 53.333859146  
Correct output: -61.0260897243 | Program output: -105.0260897243
Correct output: -98.0936683336 | Program output: -50.0936683336
Correct output: 86.5572957786  | Program output: -4.4427042214 
Correct output: -62.8071716196 | Program output: 8.1928283804  
Correct output: 60.8276798544  | Program output: 72.8276798544 
Correct output: -71.8318464839 | Program output: -90.8318464839
Correct output: -174.9826881203 | Program output: -100.9826881203
Correct output: 77.6327303364  | Program output: 11.6327303364 
Correct output: 99.1771699896  | Program output: 48.1771699896 
Correct output: -72.1707589706 | Program output: -11.1707589706
Correct output: -21.3637789941 | Program output: 46.6362210059 
Correct output: -25.468379596  | Program output: -5.468379596  
Correct output: 2.16330651     | Program output: -92.83669349  
Correct output: 16.0518072111  | Program output: 29.0518072111 
Correct output: -95.109595054  | Program output: -100.109595054
Correct output: 9.2239476355   | Program output: 22.2239476355 
Correct output: 125.1130965414 | Program output: 24.1130965414 
Correct output: -122.5871170173 | Program output: -85.5871170173
Correct output: -101.5009667209 | Program output: -65.5009667209
Correct output: 122.8011736679 | Program output: 66.8011736679 
Correct output: 58.0928182809  | Program output: 66.0928182809 
Correct output: -13.014761042  | Program output: -46.014761042 
Correct output: -69.8346847083 | Program output: -80.8346847083
Correct output: -8.1993337526  | Program output: 0.8006662474  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec float_dec integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [39.0 2 44.0 3 48.0 2 91.0 12 71.0 13 12.0 2 19.0 2 74.0 2 66.0 2 51.0 2 61.0 2 68.0 12 20.0 1 95.0 10 13.0 2 5.0 3 13.0 2 101.0 2 37.0 3 36.0 3 56.0 3 8.0 2 33.0 2 11.0 2 9.0 12]
Total: 1184.0
Mean: 23.68
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3767.2672801
Median total errors in population: 1239.0
Error averages by case: (136.8180654 3.23 144.93410870000002 4.461 156.82943080000004 3.635 181.87614560000006 9.068 169.74237180000006 12.861 119.66289049999999 3.399 124.55167699999997 3.619 182.8419425999999 4.545 158.44537429999994 3.435 147.35982570000004 3.288 164.67875809999998 3.636 166.43443460000003 11.952 126.31590899999996 6.921 185.3033951 9.852 119.23849469999996 3.386 113.84928059999997 2.685 119.07005290000001 3.337 190.9993878 3.479 148.9404058 4.583 146.99640889999998 4.394 152.4391308 4.343 116.20833859999999 3.346 133.44860350000002 3.525 114.61944120000003 3.622 113.20440610000001 11.857)
Error minima by case: (7.7672 1 11.3381 1 17.9132 1 1.9906 1 9.6251 8 5.7904 1 0.5323 1 69.0 1 6.934 1 14.6105 1 0.2615 1 5.327 9 9.4316 1 1.1715 8 8.0 1 0.0 0 6.5185 1 0.0 0 32.0 2 21.3205 2 38.2345 1 3.0 1 0.8907 1 0.0 0 0.1505 1)
Average genome size in population (length): 77.819
Average program size in population (points): 78.819
Average percent parens in population: 0.013
Minimum age in population: 21.252197265625
Maximum age in population: 25.77630615234375
Average age in population: 23.71649945068359
Median age in population: 23.76495361328125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.855
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.855
Total error diversity:				 0.095
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 22356769
--- Timings ---
Current time: 1529614871406 milliseconds
Total Time:          55.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.2 seconds, 38.5%
Fitness Testing:     26.8 seconds, 48.7%
Report:               6.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 54483.0
Test mean error for best: 27.24150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 51.333859146  
Correct output: -61.0260897243 | Program output: -107.0260897243
Correct output: -98.0936683336 | Program output: -52.0936683336
Correct output: 86.5572957786  | Program output: -6.4427042214 
Correct output: -62.8071716196 | Program output: 6.1928283804  
Correct output: 60.8276798544  | Program output: 70.8276798544 
Correct output: -71.8318464839 | Program output: -92.8318464839
Correct output: -174.9826881203 | Program output: -102.9826881203
Correct output: 77.6327303364  | Program output: 9.6327303364  
Correct output: 99.1771699896  | Program output: 46.1771699896 
Correct output: -72.1707589706 | Program output: -13.1707589706
Correct output: -21.3637789941 | Program output: 44.6362210059 
Correct output: -25.468379596  | Program output: -7.468379596  
Correct output: 2.16330651     | Program output: -94.83669349  
Correct output: 16.0518072111  | Program output: 27.0518072111 
Correct output: -95.109595054  | Program output: -102.109595054
Correct output: 9.2239476355   | Program output: 20.2239476355 
Correct output: 125.1130965414 | Program output: 22.1130965414 
Correct output: -122.5871170173 | Program output: -87.5871170173
Correct output: -101.5009667209 | Program output: -67.5009667209
Correct output: 122.8011736679 | Program output: 64.8011736679 
Correct output: 58.0928182809  | Program output: 64.0928182809 
Correct output: -13.014761042  | Program output: -48.014761042 
Correct output: -69.8346847083 | Program output: -82.8346847083
Correct output: -8.1993337526  | Program output: -1.1993337526 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_inc} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec float_dec integer_mult integer_mod float_rot integer_stackdepth float_dec float_dec integer_mult float_dec integer_mod float_rot integer_stackdepth float_dec float_dec in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec float_dec integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_inc float_rot integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [41.0 2 46.0 3 46.0 2 93.0 11 69.0 12 10.0 1 21.0 2 72.0 2 68.0 2 53.0 2 59.0 2 66.0 12 18.0 2 97.0 10 11.0 2 7.0 3 11.0 2 103.0 2 35.0 3 34.0 3 58.0 3 6.0 2 35.0 2 13.0 2 7.0 1]
Total: 1169.0
Mean: 23.38
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3418.068962399999
Median total errors in population: 1223.0
Error averages by case: (126.7499641 2.893 132.06663210000005 4.206 139.26252769999996 3.357 172.1881825 11.522 155.71567789999997 12.905 104.70702 3.21 110.74660659999996 3.206 164.99076199999993 3.993 149.14186360000005 3.253 137.42267089999999 3.079 148.19118299999997 3.456 152.7121493 11.928 110.67065939999999 4.103 174.75041540000004 9.848 104.43605970000002 3.228 96.8010807 2.566 104.19129170000001 3.134 182.17853670000002 3.211 130.7681066 4.155 128.9316922 4.152 142.55789269999997 4.193 101.1568644 3.17 120.716781 3.283 100.45558950000003 3.409 99.99775269999999 11.101)
Error minima by case: (0.029 1 5.1318 1 1.2235 1 5.8055 1 17.7628 7 3.9166 1 2.6002 1 6.9827 1 14.7301 1 6.8143 1 27.1464 1 6.3638 9 9.7851 1 0.0546 7 4.0068 1 0.0 0 1.4815 1 32.7503 1 23.27 2 2.1838 2 22.8012 2 1.0 1 0.5017 1 0.0 0 0.6121 1)
Average genome size in population (length): 86.3
Average program size in population (points): 87.3
Average percent parens in population: 0.012
Minimum age in population: 23.22283935546875
Maximum age in population: 27.33694458007812
Average age in population: 25.2523579864502
Median age in population: 25.29378509521484
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.861
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.861
Total error diversity:				 0.077
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 24514294
--- Timings ---
Current time: 1529614875358 milliseconds
Total Time:          58.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.4 seconds, 38.0%
Fitness Testing:     28.9 seconds, 49.1%
Report:               7.5 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 53952.0
Test mean error for best: 26.97600
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 52.333859146  
Correct output: -61.0260897243 | Program output: -106.0260897243
Correct output: -98.0936683336 | Program output: -52.0936683336
Correct output: 86.5572957786  | Program output: -5.4427042214 
Correct output: -62.8071716196 | Program output: 6.1928283804  
Correct output: 60.8276798544  | Program output: 70.8276798544 
Correct output: -71.8318464839 | Program output: -91.8318464839
Correct output: -174.9826881203 | Program output: -102.9826881203
Correct output: 77.6327303364  | Program output: 10.6327303364 
Correct output: 99.1771699896  | Program output: 47.1771699896 
Correct output: -72.1707589706 | Program output: -13.1707589706
Correct output: -21.3637789941 | Program output: 44.6362210059 
Correct output: -25.468379596  | Program output: -7.468379596  
Correct output: 2.16330651     | Program output: -93.83669349  
Correct output: 16.0518072111  | Program output: 27.0518072111 
Correct output: -95.109595054  | Program output: -102.109595054
Correct output: 9.2239476355   | Program output: 20.2239476355 
Correct output: 125.1130965414 | Program output: 23.1130965414 
Correct output: -122.5871170173 | Program output: -87.5871170173
Correct output: -101.5009667209 | Program output: -67.5009667209
Correct output: 122.8011736679 | Program output: 65.8011736679 
Correct output: 58.0928182809  | Program output: 64.0928182809 
Correct output: -13.014761042  | Program output: -47.014761042 
Correct output: -69.8346847083 | Program output: -82.8346847083
Correct output: -8.1993337526  | Program output: -1.1993337526 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction float_mult} {:instruction integer_sub} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_pop})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec float_dec integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_max integer_min integer_yank integer_dup float_dec float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth float_mult integer_sub float_div integer_dup_items integer_pop)
Errors: [40.0 1 45.0 3 46.0 2 92.0 12 69.0 12 10.0 1 20.0 1 72.0 2 67.0 2 52.0 2 59.0 2 66.0 12 18.0 2 96.0 10 11.0 2 7.0 3 11.0 2 102.0 2 35.0 3 34.0 3 57.0 3 6.0 2 34.0 2 13.0 2 7.0 1]
Total: 1158.0
Mean: 23.16
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3918.1516532000005
Median total errors in population: 1222.0
Error averages by case: (147.95630650000004 3.17 156.11828940000004 4.259 158.94138239999998 3.703 192.27245569999997 11.915 168.68986099999995 12.861 121.97314579999998 3.313 136.6493992 3.534 185.41858649999995 4.062 166.04328219999994 3.534 159.1271843 3.478 165.98108100000005 3.814 167.64120640000002 12.078 129.22826089999998 3.703 195.91847009999998 10.071 120.45201700000003 3.499 122.5987631 3.54 119.86813749999997 3.4 201.2501437999999 3.619 150.8403765 4.453 148.64289499999998 4.605 164.43440159999997 4.413 118.40987319999998 3.45 144.78778440000002 3.577 125.82025420000004 3.692 118.89409549999998 8.451)
Error minima by case: (14.3339 1 13.6497 1 1.0067 1 19.4907 1 23.3991 1 1.0 1 2.8439 1 18.9827 1 11.4648 1 2.8228 1 8.8098 1 2.3638 8 2.098 1 1.1633 7 2.0 1 0.0 0 2.0 1 58.9452 1 23.4867 2 2.4006 2 10.8012 2 0.0 0 0.0148 1 0.0 0 0.0 0)
Average genome size in population (length): 93.488
Average program size in population (points): 94.488
Average percent parens in population: 0.011
Minimum age in population: 24.68198394775391
Maximum age in population: 28.54847717285156
Average age in population: 26.68124964141846
Median age in population: 26.73517608642578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.874
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.874
Total error diversity:				 0.107
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 26851494
--- Timings ---
Current time: 1529614879307 milliseconds
Total Time:          62.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.6 seconds, 37.6%
Fitness Testing:     31.0 seconds, 49.4%
Report:               8.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 53170.0
Test mean error for best: 26.58500
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 53.333859146  
Correct output: -61.0260897243 | Program output: -105.0260897243
Correct output: -98.0936683336 | Program output: -53.0936683336
Correct output: 86.5572957786  | Program output: -4.4427042214 
Correct output: -62.8071716196 | Program output: 5.1928283804  
Correct output: 60.8276798544  | Program output: 69.8276798544 
Correct output: -71.8318464839 | Program output: -90.8318464839
Correct output: -174.9826881203 | Program output: -103.9826881203
Correct output: 77.6327303364  | Program output: 11.6327303364 
Correct output: 99.1771699896  | Program output: 48.1771699896 
Correct output: -72.1707589706 | Program output: -14.1707589706
Correct output: -21.3637789941 | Program output: 43.6362210059 
Correct output: -25.468379596  | Program output: -8.468379596  
Correct output: 2.16330651     | Program output: -92.83669349  
Correct output: 16.0518072111  | Program output: 26.0518072111 
Correct output: -95.109595054  | Program output: -103.109595054
Correct output: 9.2239476355   | Program output: 19.2239476355 
Correct output: 125.1130965414 | Program output: 24.1130965414 
Correct output: -122.5871170173 | Program output: -88.5871170173
Correct output: -101.5009667209 | Program output: -68.5009667209
Correct output: 122.8011736679 | Program output: 66.8011736679 
Correct output: 58.0928182809  | Program output: 63.0928182809 
Correct output: -13.014761042  | Program output: -46.014761042 
Correct output: -69.8346847083 | Program output: -83.8346847083
Correct output: -8.1993337526  | Program output: -2.1993337526 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec float_dec integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float integer_mod float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove integer_stackdepth)
Errors: [39.0 2 44.0 3 45.0 2 91.0 12 68.0 13 9.0 1 19.0 2 71.0 2 66.0 2 51.0 2 58.0 2 65.0 12 17.0 2 95.0 10 10.0 1 8.0 3 10.0 1 101.0 2 34.0 3 33.0 3 56.0 3 5.0 2 33.0 2 14.0 2 6.0 1]
Total: 1138.0
Mean: 22.76
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3933.666171099999
Median total errors in population: 1210.0
Error averages by case: (150.7242812 3.342 159.34744430000003 3.859 156.52382349999996 3.65 200.5706843 12.336 167.26971280000004 12.577 119.13849469999995 2.968 138.81597459999998 3.733 181.83603239999997 3.78 172.6523504 3.656 161.1298608 3.43 166.6103144 3.722 164.92484679999998 11.982 129.95416969999997 3.764 200.4890145999999 10.163 118.16381229999996 3.384 124.17928139999997 4.068 117.92666969999999 3.279 204.35278340000005 3.561 148.37107150000003 4.608 146.58758800000004 4.464 166.25798229999995 4.438 115.63251509999998 3.443 148.08302500000002 3.415 127.99363780000004 3.622 120.23380010000002 4.653)
Error minima by case: (20.3339 1 29.0 2 11.9063 1 76.0 1 18.6143 1 0.0 0 4.0 1 12.9827 1 48.0 1 3.1772 1 45.0 1 0.8306 8 2.5741 1 1.2097 7 1.0 1 0.0 0 1.0 1 9.0 1 21.0 2 15.501 2 16.8012 2 0.0 0 0.0148 1 1.0 1 0.0 0)
Average genome size in population (length): 102.665
Average program size in population (points): 103.665
Average percent parens in population: 0.010
Minimum age in population: 25.99836730957031
Maximum age in population: 29.82678604125977
Average age in population: 28.08824844741821
Median age in population: 28.12401962280273
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.092
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 29418144
--- Timings ---
Current time: 1529614883634 milliseconds
Total Time:          67.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.9 seconds, 37.1%
Fitness Testing:     33.4 seconds, 49.8%
Report:               8.7 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 51593.0
Test mean error for best: 25.79650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 55.333859146  
Correct output: -61.0260897243 | Program output: -103.0260897243
Correct output: -98.0936683336 | Program output: -55.0936683336
Correct output: 86.5572957786  | Program output: -2.4427042214 
Correct output: -62.8071716196 | Program output: 3.1928283804  
Correct output: 60.8276798544  | Program output: 67.8276798544 
Correct output: -71.8318464839 | Program output: -88.8318464839
Correct output: -174.9826881203 | Program output: -105.9826881203
Correct output: 77.6327303364  | Program output: 13.6327303364 
Correct output: 99.1771699896  | Program output: 50.1771699896 
Correct output: -72.1707589706 | Program output: -16.1707589706
Correct output: -21.3637789941 | Program output: 41.6362210059 
Correct output: -25.468379596  | Program output: -10.468379596 
Correct output: 2.16330651     | Program output: -90.83669349  
Correct output: 16.0518072111  | Program output: 24.0518072111 
Correct output: -95.109595054  | Program output: -105.109595054
Correct output: 9.2239476355   | Program output: 17.2239476355 
Correct output: 125.1130965414 | Program output: 26.1130965414 
Correct output: -122.5871170173 | Program output: -90.5871170173
Correct output: -101.5009667209 | Program output: -70.5009667209
Correct output: 122.8011736679 | Program output: 68.8011736679 
Correct output: 58.0928182809  | Program output: 61.0928182809 
Correct output: -13.014761042  | Program output: -44.014761042 
Correct output: -69.8346847083 | Program output: -85.8346847083
Correct output: -8.1993337526  | Program output: -4.1993337526 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_dec} {:instruction float_dup_times} {:instruction integer_flush} {:instruction float_shove} {:instruction float_inc} {:instruction float_mult})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec float_dec integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_dec float_max integer_min integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod float_dec integer_min integer_yank integer_dup float_dec float_rot integer_mod float_yank integer_min integer_yank integer_dup float_dec integer_mod float_yank integer_div integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap float_dup float_dec float_dup_times integer_flush float_shove float_inc float_mult)
Errors: [37.0 2 42.0 3 43.0 2 89.0 12 66.0 13 7.0 1 17.0 2 69.0 2 64.0 2 49.0 2 56.0 2 63.0 11 15.0 2 93.0 10 8.0 2 10.0 2 8.0 2 99.0 2 32.0 3 31.0 2 54.0 3 3.0 2 31.0 2 16.0 2 4.0 1]
Total: 1095.0
Mean: 21.9
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3628.8516841999995
Median total errors in population: 1207.0
Error averages by case: (138.1747967999999 3.266 146.66135390000005 3.95 145.0259398 3.652 186.3174498 12.186 156.45154469999997 12.282 108.14283560000003 2.87 126.3499859 3.821 171.47625209999995 3.851 160.94065709999995 3.986 148.7408226 3.302 152.80435120000004 3.776 152.96100330000004 11.874 115.57928809999997 3.819 186.89098119999994 10.154 106.0935625 3.346 114.62233929999996 4.044 105.75969479999998 3.279 192.66897169999996 3.434 137.33325070000004 4.591 135.17812369999996 4.42 154.06181920000003 4.364 103.81607439999998 3.284 134.67921970000003 3.46 117.68302930000006 3.645 104.89133680000002 4.891)
Error minima by case: (3.3339 1 4.1968 2 11.9063 1 8.428 1 14.6397 1 0.0 0 4.0 1 12.9827 1 0.4965 1 3.1772 1 3.1999 1 0.0573 7 3.9791 1 1.5235 7 0.0 0 0.0 0 0.0 0 13.0 1 22.0 2 15.501 2 0.1988 2 0.0 0 0.0133 1 0.0 0 0.0 0)
Average genome size in population (length): 107.316
Average program size in population (points): 108.316
Average percent parens in population: 0.009
Minimum age in population: 26.99836730957031
Maximum age in population: 31.20363998413086
Average age in population: 29.45605935287476
Median age in population: 29.52789211273193
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.897
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.897
Total error diversity:				 0.131
Error (vector) diversity:			 0.149
Behavioral diversity:				 0.15
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 32101069
--- Timings ---
Current time: 1529614888029 milliseconds
Total Time:          71.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.2 seconds, 36.7%
Fitness Testing:     35.9 seconds, 50.1%
Report:               9.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 52271.0
Test mean error for best: 26.13550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 52.333859146  
Correct output: -61.0260897243 | Program output: -106.0260897243
Correct output: -98.0936683336 | Program output: -59.0936683336
Correct output: 86.5572957786  | Program output: -5.4427042214 
Correct output: -62.8071716196 | Program output: -0.8071716196 
Correct output: 60.8276798544  | Program output: 63.8276798544 
Correct output: -71.8318464839 | Program output: -91.8318464839
Correct output: -174.9826881203 | Program output: -109.9826881203
Correct output: 77.6327303364  | Program output: 10.6327303364 
Correct output: 99.1771699896  | Program output: 47.1771699896 
Correct output: -72.1707589706 | Program output: -20.1707589706
Correct output: -21.3637789941 | Program output: 37.6362210059 
Correct output: -25.468379596  | Program output: -14.468379596 
Correct output: 2.16330651     | Program output: -93.83669349  
Correct output: 16.0518072111  | Program output: 20.0518072111 
Correct output: -95.109595054  | Program output: -109.109595054
Correct output: 9.2239476355   | Program output: 13.2239476355 
Correct output: 125.1130965414 | Program output: 23.1130965414 
Correct output: -122.5871170173 | Program output: -94.5871170173
Correct output: -101.5009667209 | Program output: -74.5009667209
Correct output: 122.8011736679 | Program output: 65.8011736679 
Correct output: 58.0928182809  | Program output: 57.0928182809 
Correct output: -13.014761042  | Program output: -47.014761042 
Correct output: -69.8346847083 | Program output: -89.8346847083
Correct output: -8.1993337526  | Program output: -8.1993337526 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec float_dec integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_max integer_min integer_yank integer_dup float_dec float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod float_dec integer_min float_dec integer_mult float_rot float_dec float_rot float_rot integer_mod float_yank integer_min integer_yank integer_dup float_dec integer_mod float_yank integer_div integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth)
Errors: [40.0 1 45.0 3 39.0 2 92.0 12 62.0 2 3.0 1 20.0 1 65.0 2 67.0 2 52.0 2 52.0 2 59.0 12 11.0 2 96.0 10 4.0 2 14.0 3 4.0 2 102.0 2 28.0 3 27.0 3 57.0 3 1.0 1 34.0 2 20.0 1 0.0 0]
Total: 1070.0
Mean: 21.4
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3757.9782767999995
Median total errors in population: 1203.0
Error averages by case: (141.62970999999996 3.219 153.33892160000005 4.239 152.04003849999998 3.597 189.16416849999996 11.732 161.6507053 12.255 112.90423430000001 2.963 132.9711851 3.741 178.0924722999999 3.9 160.3786791 3.942 152.00221790000003 3.319 159.20972520000007 3.73 159.8729516 12.007 121.53932499999999 3.882 193.40783009999993 10.071 112.36238630000001 3.303 119.11091459999997 3.881 112.1662566 3.245 194.73158109999994 3.441 144.2751279000001 4.574 142.22349170000004 4.484 156.98093540000005 4.283 109.53499599999999 3.216 141.4191952 3.553 122.4521483000001 3.553 107.8320792 6.557)
Error minima by case: (3.1309 1 15.7171 1 1.0937 1 8.9075 1 18.7363 1 0.0 0 4.0 1 25.9827 1 13.9024 1 1.1772 1 15.3348 1 1.8677 10 1.6188 1 0.1633 7 0.0 0 0.0 0 0.0 0 2.0 1 19.0 2 13.9955 2 3.8012 2 0.0 0 1.5489 1 0.0 0 0.0 0)
Average genome size in population (length): 106.804
Average program size in population (points): 107.804
Average percent parens in population: 0.009
Minimum age in population: 28.42085647583008
Maximum age in population: 32.73034572601318
Average age in population: 30.7720707616806
Median age in population: 30.8284330368042
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.178
Error (vector) diversity:			 0.222
Behavioral diversity:				 0.223
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 34771194
--- Timings ---
Current time: 1529614892689 milliseconds
Total Time:          76.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.5 seconds, 36.2%
Fitness Testing:     38.3 seconds, 50.5%
Report:              10.0 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 52271.0
Test mean error for best: 26.13550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 52.333859146  
Correct output: -61.0260897243 | Program output: -106.0260897243
Correct output: -98.0936683336 | Program output: -59.0936683336
Correct output: 86.5572957786  | Program output: -5.4427042214 
Correct output: -62.8071716196 | Program output: -0.8071716196 
Correct output: 60.8276798544  | Program output: 63.8276798544 
Correct output: -71.8318464839 | Program output: -91.8318464839
Correct output: -174.9826881203 | Program output: -109.9826881203
Correct output: 77.6327303364  | Program output: 10.6327303364 
Correct output: 99.1771699896  | Program output: 47.1771699896 
Correct output: -72.1707589706 | Program output: -20.1707589706
Correct output: -21.3637789941 | Program output: 37.6362210059 
Correct output: -25.468379596  | Program output: -14.468379596 
Correct output: 2.16330651     | Program output: -93.83669349  
Correct output: 16.0518072111  | Program output: 20.0518072111 
Correct output: -95.109595054  | Program output: -109.109595054
Correct output: 9.2239476355   | Program output: 13.2239476355 
Correct output: 125.1130965414 | Program output: 23.1130965414 
Correct output: -122.5871170173 | Program output: -94.5871170173
Correct output: -101.5009667209 | Program output: -74.5009667209
Correct output: 122.8011736679 | Program output: 65.8011736679 
Correct output: 58.0928182809  | Program output: 57.0928182809 
Correct output: -13.014761042  | Program output: -47.014761042 
Correct output: -69.8346847083 | Program output: -89.8346847083
Correct output: -8.1993337526  | Program output: -8.1993337526 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth})
Best program: (integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec float_dec integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_max integer_min integer_yank integer_dup float_dec float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod float_dec integer_min float_dec integer_mult float_rot float_dec float_rot float_rot integer_mod float_yank integer_min integer_yank integer_dup float_dec integer_mod float_yank integer_div integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth)
Errors: [40.0 1 45.0 3 39.0 2 92.0 12 62.0 2 3.0 1 20.0 1 65.0 2 67.0 2 52.0 2 52.0 2 59.0 12 11.0 2 96.0 10 4.0 2 14.0 3 4.0 2 102.0 2 28.0 3 27.0 3 57.0 3 1.0 1 34.0 2 20.0 1 0.0 0]
Total: 1070.0
Mean: 21.4
Genome size: 120
Size: 121
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4080.3291639999998
Median total errors in population: 1184.0
Error averages by case: (153.01667239999998 3.311 163.92331860000004 4.472 166.12308519999996 3.736 198.4221584 11.71 175.4332515 12.684 126.86012770000004 3.058 143.61098450000003 3.659 191.16805939999992 4.013 171.66435380000001 3.59 163.29469250000002 3.492 174.21747209999998 3.794 173.2474227 12.053 135.81344929999997 3.868 204.27554959999998 10.046 126.3843059 3.437 132.72893369999997 4.098 125.80915289999999 3.338 204.44803349999995 3.617 158.0380629 4.717 156.25352940000002 4.66 168.2972133 4.421 123.39096219999998 3.434 152.68571709999998 3.618 136.3267596 3.719 126.48289580000001 5.868)
Error minima by case: (7.3339 1 6.7594 2 34.0 1 10.08 1 39.9997 1 1.0 1 4.0 1 60.0 1 1.1555 1 6.8228 1 32.5169 1 0.4025 8 0.0632 1 1.0447 7 1.0 1 0.0 0 1.0 1 1.0 1 23.0 2 22.0 2 3.8012 2 0.0 0 0.0985 1 0.0 0 0.0 0)
Average genome size in population (length): 109.594
Average program size in population (points): 110.594
Average percent parens in population: 0.009
Minimum age in population: 29.48538208007812
Maximum age in population: 34.46969985961914
Average age in population: 32.08152835178375
Median age in population: 32.12133121490479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.175
Error (vector) diversity:			 0.229
Behavioral diversity:				 0.23
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 37511044
--- Timings ---
Current time: 1529614897114 milliseconds
Total Time:          80.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        28.8 seconds, 35.8%
Fitness Testing:     40.8 seconds, 50.6%
Report:              10.9 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 51141.0
Test mean error for best: 25.57050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 
54.333859146 
Correct output: -61.0260897243 | Program output: 
-104.0260897243
Correct output: -98.0936683336 | Program output: 
-64.0936683336
Correct output: 86.5572957786  | Program output: 
-3.4427042214
Correct output: -62.8071716196 | Program output: 
-5.8071716196
Correct output: 60.8276798544  | Program output: 
58.8276798544
Correct output: -71.8318464839 | Program output: 
-89.8318464839
Correct output: -174.9826881203 | Program output: 
-114.9826881203
Correct output: 77.6327303364  | Program output: 
12.6327303364
Correct output: 99.1771699896  | Program output: 
49.1771699896
Correct output: -72.1707589706 | Program output: 
-25.1707589706
Correct output: -21.3637789941 | Program output: 
32.6362210059
Correct output: -25.468379596  | Program output: 
-19.468379596
Correct output: 2.16330651     | Program output: 
-91.83669349 
Correct output: 16.0518072111  | Program output: 
15.0518072111
Correct output: -95.109595054  | Program output: 
-114.109595054
Correct output: 9.2239476355   | Program output: 
8.2239476355 
Correct output: 125.1130965414 | Program output: 
25.1130965414
Correct output: -122.5871170173 | Program output: 
-99.5871170173
Correct output: -101.5009667209 | Program output: 
-79.5009667209
Correct output: 122.8011736679 | Program output: 
67.8011736679
Correct output: 58.0928182809  | Program output: 
52.0928182809
Correct output: -13.014761042  | Program output: 
-45.014761042
Correct output: -69.8346847083 | Program output: 
-94.8346847083
Correct output: -8.1993337526  | Program output: 
-13.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction print_newline} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_max} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction integer_stackdepth} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth})
Best program: (integer_min integer_mod float_tan in1 integer_mod float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec float_dec integer_min integer_yank integer_dup print_newline float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_dup float_dec float_rot integer_stackdepth float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_dup float_dec float_rot integer_stackdepth float_dec integer_max float_rot float_dec float_rot integer_stackdepth float_dec integer_mult integer_dup float_dec float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod float_dec integer_min float_dec integer_mult float_rot float_dec float_rot float_rot integer_mod float_yank integer_min integer_yank integer_dup float_dec integer_mod float_yank integer_div integer_yank integer_dup float_dec float_rot integer_stackdepth float_shove integer_stackdepth integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth)
Errors: [38.0 3 43.0 4 34.0 3 90.0 13 57.0 3 2.0 3 18.0 3 60.0 2 65.0 3 50.0 2 47.0 3 54.0 12 6.0 3 94.0 10 1.0 2 19.0 4 1.0 2 100.0 1 23.0 4 22.0 4 55.0 3 6.0 2 32.0 3 25.0 3 5.0 3]
Total: 1045.0
Mean: 20.9
Genome size: 136
Size: 137
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3909.697186
Median total errors in population: 1164.0
Error averages by case: (151.7439994 3.44 162.75241119999998 4.571 154.89281539999996 3.756 199.68235849999994 11.801 164.61676990000007 12.317 115.77072199999999 2.916 142.15129220000003 3.894 181.10353579999986 3.967 169.00425339999998 3.767 162.0796881 3.591 164.18673410000002 3.797 161.45418580000003 11.99 126.71744089999999 3.955 201.17832269999994 10.072 114.84529550000003 3.388 124.3375762 4.219 114.64963819999998 3.331 202.8702183 3.769 147.66354859999998 4.736 145.22063829999996 4.621 167.2844379 4.528 112.32639029999993 3.343 150.56964980000004 3.741 128.6602261 3.794 116.08003739999995 4.551)
Error minima by case: (1.3339 1 13.9851 2 0.9063 1 11.5573 1 10.7662 1 0.0 0 4.0 1 23.9827 1 15.7895 1 0.8228 1 17.5889 1 0.6362 6 1.8414 1 0.1633 7 0.0 0 0.0 0 0.0 0 40.1131 1 23.0 2 22.0 2 2.1988 2 0.0 0 0.0171 1 0.0 0 0.0 0)
Average genome size in population (length): 114.818
Average program size in population (points): 115.818
Average percent parens in population: 0.009
Minimum age in population: 30.48538208007812
Maximum age in population: 35.75091314315796
Average age in population: 33.57088999652863
Median age in population: 33.63565111160278
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.229
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.286
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 40381519
--- Timings ---
Current time: 1529614901786 milliseconds
Total Time:          85.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.2 seconds, 35.5%
Fitness Testing:     43.4 seconds, 50.9%
Report:              11.5 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 51000.0
Test mean error for best: 25.50000
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 53.333859146  
Correct output: -61.0260897243 | Program output: -105.0260897243
Correct output: -98.0936683336 | Program output: -63.0936683336
Correct output: 86.5572957786  | Program output: -4.4427042214 
Correct output: -62.8071716196 | Program output: -4.8071716196 
Correct output: 60.8276798544  | Program output: 59.8276798544 
Correct output: -71.8318464839 | Program output: -90.8318464839
Correct output: -174.9826881203 | Program output: -113.9826881203
Correct output: 77.6327303364  | Program output: 11.6327303364 
Correct output: 99.1771699896  | Program output: 48.1771699896 
Correct output: -72.1707589706 | Program output: -24.1707589706
Correct output: -21.3637789941 | Program output: 33.6362210059 
Correct output: -25.468379596  | Program output: -18.468379596 
Correct output: 2.16330651     | Program output: -92.83669349  
Correct output: 16.0518072111  | Program output: 16.0518072111 
Correct output: -95.109595054  | Program output: -113.109595054
Correct output: 9.2239476355   | Program output: 9.2239476355  
Correct output: 125.1130965414 | Program output: 24.1130965414 
Correct output: -122.5871170173 | Program output: -98.5871170173
Correct output: -101.5009667209 | Program output: -78.5009667209
Correct output: 122.8011736679 | Program output: 66.8011736679 
Correct output: 58.0928182809  | Program output: 53.0928182809 
Correct output: -13.014761042  | Program output: -46.014761042 
Correct output: -69.8346847083 | Program output: -93.8346847083
Correct output: -8.1993337526  | Program output: -12.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_min} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_max} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_swap integer_yank integer_swap in1 integer_mod float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot integer_stackdepth float_dec float_dec in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec float_dec integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_min integer_dup float_dec float_rot integer_stackdepth float_dec integer_max float_rot float_dec float_dec float_dec integer_mult float_rot integer_sub integer_mod float_dec integer_min integer_yank integer_dup float_dec float_rot integer_mod float_yank integer_min integer_yank float_dec float_dec integer_mod float_yank integer_div integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_add integer_fromfloat integer_dup_times float_swap float_dup)
Errors: [39.0 2 44.0 3 35.0 2 91.0 12 58.0 2 1.0 2 19.0 2 61.0 2 66.0 2 51.0 2 48.0 2 55.0 12 7.0 2 95.0 10 0.0 0 18.0 3 0.0 0 101.0 2 24.0 3 23.0 3 56.0 3 5.0 1 33.0 2 24.0 2 4.0 2]
Total: 1036.0
Mean: 20.72
Genome size: 134
Size: 135
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 4066.2771141999992
Median total errors in population: 1145.0
Error averages by case: (150.92417559999996 3.395 165.85706579999996 4.481 165.06348789999996 3.764 198.78378759999995 11.765 174.31697050000005 11.591 123.2438223 2.819 146.0117518 3.917 191.33648389999996 3.976 169.58420619999998 3.934 161.17256240000006 3.536 174.67646520000002 3.876 169.9682482 11.985 138.4562343 3.977 204.6633359 10.082 123.14969959999999 3.401 138.02887900000002 4.247 122.9832531 3.355 201.37227369999997 3.64 158.20486170000004 4.725 156.25216429999998 4.598 166.1788814 4.46 120.2069438 3.151 153.06227340000007 3.696 141.53908480000004 3.783 125.06520179999998 4.021)
Error minima by case: (4.3339 1 29.0 1 34.0 1 7.3725 1 34.3372 1 0.0 0 4.0 1 60.0 1 1.5521 1 9.8228 1 44.1955 1 0.4025 9 1.7851 1 0.1633 7 0.0 0 0.0 0 0.0 0 0.0 0 23.0 2 22.0 2 0.8012 1 0.0 0 0.9852 1 0.0 0 0.0 0)
Average genome size in population (length): 118.313
Average program size in population (points): 119.313
Average percent parens in population: 0.008
Minimum age in population: 32.25964641571045
Maximum age in population: 37.49257397651672
Average age in population: 34.93207206070423
Median age in population: 34.95523065328598
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.229
Error (vector) diversity:			 0.293
Behavioral diversity:				 0.294
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 43339344
--- Timings ---
Current time: 1529614906390 milliseconds
Total Time:          89.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.5 seconds, 35.0%
Fitness Testing:     46.1 seconds, 51.3%
Report:              12.2 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 50222.04220000004
Test mean error for best: 25.11102
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 98.6677182919 
Correct output: -61.0260897243 | Program output: -111.0260897243
Correct output: -98.0936683336 | Program output: -58.0936683336
Correct output: 86.5572957786  | Program output: -10.4427042214
Correct output: -62.8071716196 | Program output: 0.1928283804  
Correct output: 60.8276798544  | Program output: 64.8276798544 
Correct output: -71.8318464839 | Program output: -96.8318464839
Correct output: -174.9826881203 | Program output: -108.9826881203
Correct output: 77.6327303364  | Program output: 15.2654606727 
Correct output: 99.1771699896  | Program output: 88.3543399792 
Correct output: -72.1707589706 | Program output: -19.1707589706
Correct output: -21.3637789941 | Program output: 38.6362210059 
Correct output: -25.468379596  | Program output: -13.468379596 
Correct output: 2.16330651     | Program output: -98.83669349  
Correct output: 16.0518072111  | Program output: 21.0518072111 
Correct output: -95.109595054  | Program output: -108.109595054
Correct output: 9.2239476355   | Program output: 14.2239476355 
Correct output: 125.1130965414 | Program output: 40.2261930828 
Correct output: -122.5871170173 | Program output: -93.5871170173
Correct output: -101.5009667209 | Program output: -73.5009667209
Correct output: 122.8011736679 | Program output: 125.6023473358
Correct output: 58.0928182809  | Program output: 58.0928182809 
Correct output: -13.014761042  | Program output: -52.014761042 
Correct output: -69.8346847083 | Program output: -88.8346847083
Correct output: -8.1993337526  | Program output: -7.1993337526 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_min} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_min print_integer in1 integer_mod float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec float_dec integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_dec float_max integer_min integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec float_dec float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_add integer_mod float_max integer_min float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float)
Errors: [6.3339 9 50.0 2 40.0 1 97.0 13 63.0 13 4.0 1 25.0 2 66.0 2 62.3673 11 10.8228 9 53.0 2 60.0 12 12.0 2 101.0 10 5.0 2 13.0 3 5.0 2 84.8869 12 29.0 3 28.0 3 2.8012 9 0.0 0 39.0 2 19.0 2 1.0 1]
Total: 1005.2121
Mean: 20.104242
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4077.6220949
Median total errors in population: 1122.0
Error averages by case: (149.16997450000005 3.429 163.05852059999998 4.491 167.72971659999993 3.827 196.78190689999997 11.7 174.23063200000004 10.849 126.32243200000003 2.945 142.23536009999992 3.849 193.2580264999999 4.021 165.74382520000003 4.024 159.3666318 3.575 177.2961594 3.907 170.37949740000002 11.969 141.11457369999997 3.929 202.36162439999995 10.074 124.55962160000001 3.514 141.9309433 4.399 124.31542680000001 3.475 199.21039800000003 3.696 159.28946290000005 4.761 158.14914929999992 4.669 164.33084999999994 4.53 122.64492819999998 3.178 151.2937252 3.67 145.33910080000004 3.87 131.38860770000002 3.77)
Error minima by case: (6.3339 1 13.1274 1 9.9063 1 13.3895 1 11.3463 1 0.0 0 2.3216 1 14.9827 1 4.4649 1 1.1772 1 1.9827 1 0.2212 8 0.0872 1 0.0546 7 0.0 0 0.0 0 0.0 0 0.0 0 20.0 1 17.501 2 2.8012 2 0.0 0 0.0207 1 1.0 1 0.0 0)
Average genome size in population (length): 119.644
Average program size in population (points): 120.644
Average percent parens in population: 0.008
Minimum age in population: 33.74126827716827
Maximum age in population: 38.37018948793411
Average age in population: 36.23280512857437
Median age in population: 36.24039375782013
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.246
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 46330444
--- Timings ---
Current time: 1529614910909 milliseconds
Total Time:          94.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.7 seconds, 34.6%
Fitness Testing:     48.7 seconds, 51.6%
Report:              12.9 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 50044.84250000003
Test mean error for best: 25.02242
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 97.6677182919 
Correct output: -61.0260897243 | Program output: -110.0260897243
Correct output: -98.0936683336 | Program output: -58.0936683336
Correct output: 86.5572957786  | Program output: -9.4427042214 
Correct output: -62.8071716196 | Program output: 0.1928283804  
Correct output: 60.8276798544  | Program output: 64.8276798544 
Correct output: -71.8318464839 | Program output: -95.8318464839
Correct output: -174.9826881203 | Program output: -108.9826881203
Correct output: 77.6327303364  | Program output: 14.2654606727 
Correct output: 99.1771699896  | Program output: 87.3543399792 
Correct output: -72.1707589706 | Program output: -19.1707589706
Correct output: -21.3637789941 | Program output: 38.6362210059 
Correct output: -25.468379596  | Program output: -13.468379596 
Correct output: 2.16330651     | Program output: -97.83669349  
Correct output: 16.0518072111  | Program output: 21.0518072111 
Correct output: -95.109595054  | Program output: -108.109595054
Correct output: 9.2239476355   | Program output: 14.2239476355 
Correct output: 125.1130965414 | Program output: 39.2261930828 
Correct output: -122.5871170173 | Program output: -93.5871170173
Correct output: -101.5009667209 | Program output: -73.5009667209
Correct output: 122.8011736679 | Program output: 124.6023473358
Correct output: 58.0928182809  | Program output: 58.0928182809 
Correct output: -13.014761042  | Program output: -51.014761042 
Correct output: -69.8346847083 | Program output: -88.8346847083
Correct output: -8.1993337526  | Program output: -7.1993337526 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_min} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_min print_integer in1 integer_mod float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec float_dec integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_dec float_max integer_min integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec float_dec float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mod integer_yank integer_dup float_dec integer_pop integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_add integer_mod float_max integer_min float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float)
Errors: [5.3339 9 49.0 2 40.0 1 96.0 12 63.0 13 4.0 1 24.0 2 66.0 2 63.3673 11 11.8228 9 53.0 2 60.0 12 12.0 2 100.0 10 5.0 2 13.0 3 5.0 2 85.8869 12 29.0 3 28.0 3 1.8012 9 0.0 0 38.0 2 19.0 2 1.0 1]
Total: 1000.2121
Mean: 20.004242
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3697.3279335
Median total errors in population: 1103.0
Error averages by case: (134.6491805 3.312 151.7717941999999 4.474 151.47025179999994 3.71 187.55034750000007 11.568 158.7710666000001 9.498 107.88613819999999 2.823 132.12254000000001 3.931 178.15324539999986 3.96 156.355592 4.131 145.100846 3.461 159.6289143 3.811 151.5986271 12.0 122.7026357 3.798 189.81593379999995 10.105 105.54320830000006 3.359 127.19363399999995 4.339 105.15580760000002 3.417 187.39254780000002 3.599 144.32331920000001 4.668 141.95165839999999 4.567 150.22192080000002 4.418 104.63551779999997 2.953 138.82547870000005 3.702 130.16525020000012 3.729 111.30947759999998 3.7)
Error minima by case: (0.3339 1 29.0 1 5.0937 1 7.2693 1 27.1928 1 0.0 0 4.0 1 29.9827 1 1.4227 1 4.1772 1 7.8292 1 0.5799 8 0.2149 1 0.1633 7 0.0 0 0.0 0 0.0 0 39.1131 1 21.0 2 17.0 2 0.8012 2 0.0 0 0.0148 1 1.0 1 0.0 0)
Average genome size in population (length): 120.552
Average program size in population (points): 121.552
Average percent parens in population: 0.008
Minimum age in population: 35.15255761146545
Maximum age in population: 40.06095823645592
Average age in population: 37.67896299630404
Median age in population: 37.72762002050877
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.26
Error (vector) diversity:			 0.324
Behavioral diversity:				 0.324
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 49344244
--- Timings ---
Current time: 1529614915557 milliseconds
Total Time:          99.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.1 seconds, 34.4%
Fitness Testing:     51.4 seconds, 51.9%
Report:              13.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 49353.82780000002
Test mean error for best: 24.67691
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 91.6677182919 
Correct output: -61.0260897243 | Program output: -107.0260897243
Correct output: -98.0936683336 | Program output: -61.0936683336
Correct output: 86.5572957786  | Program output: -6.4427042214 
Correct output: -62.8071716196 | Program output: -2.8071716196 
Correct output: 60.8276798544  | Program output: 61.8276798544 
Correct output: -71.8318464839 | Program output: -92.8318464839
Correct output: -174.9826881203 | Program output: -111.9826881203
Correct output: 77.6327303364  | Program output: 9.6327303364  
Correct output: 99.1771699896  | Program output: 81.3543399792 
Correct output: -72.1707589706 | Program output: -22.1707589706
Correct output: -21.3637789941 | Program output: 35.6362210059 
Correct output: -25.468379596  | Program output: -16.468379596 
Correct output: 2.16330651     | Program output: -94.83669349  
Correct output: 16.0518072111  | Program output: 18.0518072111 
Correct output: -95.109595054  | Program output: -111.109595054
Correct output: 9.2239476355   | Program output: 11.2239476355 
Correct output: 125.1130965414 | Program output: 33.2261930828 
Correct output: -122.5871170173 | Program output: -96.5871170173
Correct output: -101.5009667209 | Program output: -76.5009667209
Correct output: 122.8011736679 | Program output: 118.6023473358
Correct output: 58.0928182809  | Program output: 55.0928182809 
Correct output: -13.014761042  | Program output: -48.014761042 
Correct output: -69.8346847083 | Program output: -91.8346847083
Correct output: -8.1993337526  | Program output: -10.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_rot float_dec float_dec in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_dup_times float_max integer_min integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec float_dec float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mod integer_yank integer_dup float_dec integer_pop integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_add integer_mod float_max integer_min float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float)
Errors: [0.6661 9 46.0 3 37.0 2 93.0 11 60.0 1 1.0 1 21.0 2 63.0 2 68.0 2 17.8228 9 50.0 1 57.0 12 9.0 2 97.0 10 2.0 1 16.0 3 2.0 2 91.8869 12 26.0 3 25.0 3 4.1988 10 3.0 1 35.0 2 22.0 2 2.0 2]
Total: 957.5746
Mean: 19.151491
Genome size: 128
Size: 129
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4233.7585797
Median total errors in population: 1096.5
Error averages by case: (154.12858659999995 3.53 172.60189630000005 4.739 173.55322409999994 3.938 205.53260440000005 11.322 181.19580460000012 8.889 129.95937610000001 3.031 153.60355640000006 4.176 199.2127134999999 4.256 177.79477160000002 4.447 164.29064489999996 3.729 180.91156960000006 4.066 173.03578910000004 12.068 145.057506 3.985 209.77386499999997 10.117 127.7337775 3.46 150.69223470000003 4.583 126.9044879 3.553 206.00869970000002 3.877 164.7485178 4.989 164.19166179999993 4.868 169.2902093999999 4.648 126.9915237 3.077 160.40020090000004 3.882 153.27061250000008 3.942 135.67474559999994 4.028)
Error minima by case: (0.6661 1 3.2349 1 3.4199 1 7.0774 1 31.8666 1 0.0 0 5.0 1 33.9827 1 1.8472 1 1.8228 1 19.8292 1 1.7503 8 0.3914 1 6.0E-4 6 0.0 0 0.0 0 0.0 0 1.0 1 21.0 2 6.8272 2 0.8012 1 0.0 0 0.0477 1 0.0 0 0.0 0)
Average genome size in population (length): 123.538
Average program size in population (points): 124.538
Average percent parens in population: 0.008
Minimum age in population: 36.72771191596985
Maximum age in population: 41.31682209670544
Average age in population: 39.08237010914087
Median age in population: 39.09012018144131
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.274
Error (vector) diversity:			 0.345
Behavioral diversity:				 0.346
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 52432694
--- Timings ---
Current time: 1529614920288 milliseconds
Total Time:         103.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.3 seconds, 34.1%
Fitness Testing:     54.2 seconds, 52.2%
Report:              14.1 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 46434.0
Test mean error for best: 23.21700
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 61.333859146  
Correct output: -61.0260897243 | Program output: -97.0260897243
Correct output: -98.0936683336 | Program output: -65.0936683336
Correct output: 86.5572957786  | Program output: 3.5572957786  
Correct output: -62.8071716196 | Program output: -6.8071716196 
Correct output: 60.8276798544  | Program output: 57.8276798544 
Correct output: -71.8318464839 | Program output: -82.8318464839
Correct output: -174.9826881203 | Program output: -115.9826881203
Correct output: 77.6327303364  | Program output: 19.6327303364 
Correct output: 99.1771699896  | Program output: 56.1771699896 
Correct output: -72.1707589706 | Program output: -26.1707589706
Correct output: -21.3637789941 | Program output: 31.6362210059 
Correct output: -25.468379596  | Program output: -20.468379596 
Correct output: 2.16330651     | Program output: -84.83669349  
Correct output: 16.0518072111  | Program output: 14.0518072111 
Correct output: -95.109595054  | Program output: -115.109595054
Correct output: 9.2239476355   | Program output: 7.2239476355  
Correct output: 125.1130965414 | Program output: 32.1130965414 
Correct output: -122.5871170173 | Program output: -100.5871170173
Correct output: -101.5009667209 | Program output: -80.5009667209
Correct output: 122.8011736679 | Program output: 74.8011736679 
Correct output: 58.0928182809  | Program output: 51.0928182809 
Correct output: -13.014761042  | Program output: -38.014761042 
Correct output: -69.8346847083 | Program output: -95.8346847083
Correct output: -8.1993337526  | Program output: -14.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_min} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_add} {:instruction integer_fromfloat})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod float_dec integer_min integer_yank integer_dup float_dec float_rot integer_mod float_yank integer_min integer_yank float_dec float_dec integer_mod float_dec float_rot integer_mod float_yank integer_min float_dec integer_min float_dec float_yank integer_min integer_yank float_dec float_dec integer_mod float_yank integer_div integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_add integer_fromfloat)
Errors: [31.0 2 36.0 2 33.0 2 83.0 2 56.0 1 3.0 2 11.0 2 59.0 2 58.0 2 43.0 2 46.0 2 53.0 11 5.0 1 87.0 10 2.0 1 20.0 2 2.0 1 93.0 2 22.0 2 21.0 2 48.0 3 7.0 1 25.0 2 26.0 2 6.0 2]
Total: 939.0
Mean: 18.78
Genome size: 144
Size: 145
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 3758.605555999999
Median total errors in population: 1075.0
Error averages by case: (132.5232824999999 3.554 154.2587943 4.505 155.02325249999993 3.665 185.6098969999999 11.187 162.4596375 7.866 112.08327219999998 2.762 134.3496608 3.932 180.71713159999987 3.999 155.27076209999996 4.473 142.71163899999993 3.653 163.8902024 3.709 157.8410423 12.057 124.71398229999996 3.828 193.25950050000003 10.125 111.9793368 3.114 133.1326308999999 4.42 111.56806449999999 3.291 185.45007649999994 3.914 146.1496640000001 4.652 145.48994089999997 4.61 147.351989 4.571 110.7047864 2.789 141.5881961000001 3.63 135.40017500000005 3.681 113.26563889999998 3.826)
Error minima by case: (0.6661 1 9.7419 1 2.0937 1 26.0 1 11.523 1 0.0 0 5.0 1 11.0173 1 27.476 1 0.8228 1 6.8292 1 0.6348 8 0.4741 1 0.1633 7 0.0 0 0.0 0 0.0 0 0.0 0 10.5871 1 8.499 2 0.1988 1 0.0 0 0.0148 1 0.0 0 0.0 0)
Average genome size in population (length): 126.132
Average program size in population (points): 127.132
Average percent parens in population: 0.008
Minimum age in population: 38.03024169802666
Maximum age in population: 42.41503126174212
Average age in population: 40.36827618834376
Median age in population: 40.36855896189809
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.954
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.954
Total error diversity:				 0.296
Error (vector) diversity:			 0.361
Behavioral diversity:				 0.362
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 55586019
--- Timings ---
Current time: 1529614925102 milliseconds
Total Time:         108.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.7 seconds, 33.8%
Fitness Testing:     56.9 seconds, 52.5%
Report:              14.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 46169.0
Test mean error for best: 23.08450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 62.333859146  
Correct output: -61.0260897243 | Program output: -96.0260897243
Correct output: -98.0936683336 | Program output: -63.0936683336
Correct output: 86.5572957786  | Program output: 4.5572957786  
Correct output: -62.8071716196 | Program output: -4.8071716196 
Correct output: 60.8276798544  | Program output: 59.8276798544 
Correct output: -71.8318464839 | Program output: -81.8318464839
Correct output: -174.9826881203 | Program output: -113.9826881203
Correct output: 77.6327303364  | Program output: 20.6327303364 
Correct output: 99.1771699896  | Program output: 57.1771699896 
Correct output: -72.1707589706 | Program output: -24.1707589706
Correct output: -21.3637789941 | Program output: 33.6362210059 
Correct output: -25.468379596  | Program output: -18.468379596 
Correct output: 2.16330651     | Program output: -83.83669349  
Correct output: 16.0518072111  | Program output: 16.0518072111 
Correct output: -95.109595054  | Program output: -113.109595054
Correct output: 9.2239476355   | Program output: 9.2239476355  
Correct output: 125.1130965414 | Program output: 33.1130965414 
Correct output: -122.5871170173 | Program output: -98.5871170173
Correct output: -101.5009667209 | Program output: -78.5009667209
Correct output: 122.8011736679 | Program output: 75.8011736679 
Correct output: 58.0928182809  | Program output: 53.0928182809 
Correct output: -13.014761042  | Program output: -37.014761042 
Correct output: -69.8346847083 | Program output: -93.8346847083
Correct output: -8.1993337526  | Program output: -12.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_swap} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_mult} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_min} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_div} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction print_integer} {:instruction integer_yank} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction integer_fromfloat})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_dec integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth integer_yank integer_mult float_rot integer_stackdepth float_rot integer_sub integer_mod integer_swap float_dec integer_mod float_rot float_dup_items float_dec integer_mult in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_dec float_dec integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_max integer_min integer_yank integer_dup float_dec float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod float_dec integer_min float_dec integer_mult float_rot float_dec float_rot float_rot integer_mod float_yank integer_min integer_yank float_dec integer_mod float_yank integer_div integer_yank integer_dup float_dec integer_shove integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_dec integer_mod float_yank integer_div integer_yank integer_dup float_dec print_integer integer_yank float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot integer_fromfloat)
Errors: [30.0 1 35.0 2 35.0 2 82.0 2 58.0 2 1.0 2 10.0 1 61.0 2 57.0 2 42.0 2 48.0 2 55.0 12 7.0 2 86.0 10 0.0 0 18.0 3 0.0 0 92.0 3 24.0 3 23.0 3 47.0 3 5.0 1 24.0 2 24.0 2 4.0 2]
Total: 934.0
Mean: 18.68
Genome size: 145
Size: 146
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 4198.536089599998
Median total errors in population: 1063.0
Error averages by case: (153.5821633999998 4.335 175.53666030000002 4.863 168.10394889999995 3.949 203.25064170000007 11.155 181.687213 7.627 129.54289739999993 3.015 155.69602620000012 4.413 193.49509789999985 4.25 170.4678833000002 5.178 162.10437539999973 4.302 176.27866079999995 3.971 174.52568269999998 12.103 140.73448869999999 3.97 213.3752004000002 10.1 128.0740298 3.285 148.32575709999995 4.641 127.41776799999995 3.481 203.19782970000028 4.83 161.33259820000006 4.884 159.0255685 4.882 167.60406449999985 5.212 128.59326389999995 3.037 161.8618497000001 3.997 151.73813560000013 3.95 133.57228450000005 3.982)
Error minima by case: (0.6661 1 4.8666 2 1.0937 1 3.867 1 27.8672 1 0.0 0 4.0 1 20.9827 1 4.9109 1 2.1772 1 19.1165 1 0.9868 8 1.0 1 0.0546 7 0.0 0 0.0 0 0.0 0 2.0 1 15.0 1 10.2137 2 0.1988 2 0.0 0 0.6179 1 1.0 1 0.0 0)
Average genome size in population (length): 129.445
Average program size in population (points): 130.445
Average percent parens in population: 0.008
Minimum age in population: 39.45291924476624
Maximum age in population: 43.85048647597432
Average age in population: 41.81192302329466
Median age in population: 41.84099940955639
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.356
Error (vector) diversity:			 0.421
Behavioral diversity:				 0.423
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 58822194
--- Timings ---
Current time: 1529614930015 milliseconds
Total Time:         113.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.9 seconds, 33.4%
Fitness Testing:     59.8 seconds, 52.8%
Report:              15.5 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 44923.0
Test mean error for best: 22.46150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 64.333859146  
Correct output: -61.0260897243 | Program output: -94.0260897243
Correct output: -98.0936683336 | Program output: -64.0936683336
Correct output: 86.5572957786  | Program output: 6.5572957786  
Correct output: -62.8071716196 | Program output: -5.8071716196 
Correct output: 60.8276798544  | Program output: 58.8276798544 
Correct output: -71.8318464839 | Program output: -79.8318464839
Correct output: -174.9826881203 | Program output: -114.9826881203
Correct output: 77.6327303364  | Program output: 22.6327303364 
Correct output: 99.1771699896  | Program output: 59.1771699896 
Correct output: -72.1707589706 | Program output: -25.1707589706
Correct output: -21.3637789941 | Program output: 32.6362210059 
Correct output: -25.468379596  | Program output: -19.468379596 
Correct output: 2.16330651     | Program output: -81.83669349  
Correct output: 16.0518072111  | Program output: 15.0518072111 
Correct output: -95.109595054  | Program output: -114.109595054
Correct output: 9.2239476355   | Program output: 8.2239476355  
Correct output: 125.1130965414 | Program output: 35.1130965414 
Correct output: -122.5871170173 | Program output: -99.5871170173
Correct output: -101.5009667209 | Program output: -79.5009667209
Correct output: 122.8011736679 | Program output: 77.8011736679 
Correct output: 58.0928182809  | Program output: 52.0928182809 
Correct output: -13.014761042  | Program output: -35.014761042 
Correct output: -69.8346847083 | Program output: -94.8346847083
Correct output: -8.1993337526  | Program output: -13.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_cos} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction tag_float_550} {:instruction float_dec} {:instruction float_sub} {:instruction integer_flush} {:instruction float_shove} {:instruction integer_stackdepth})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_rot float_dec float_dec float_dec float_rot float_dup_items float_dec integer_mult float_rot integer_stackdepth float_dec float_dec integer_min integer_yank integer_dup float_dec float_rot float_rot integer_stackdepth float_dec float_dec integer_min float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec float_dec integer_mult integer_sub integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub integer_mod integer_yank integer_dup_items float_dec float_rot integer_stackdepth float_dec float_rot integer_stackdepth float_dec float_dec integer_mult float_rot integer_sub integer_mod float_dec integer_min float_dec integer_mult integer_mult float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_dup float_dec float_rot float_dec integer_dup_times float_rot integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min float_dec integer_dup integer_swap print_float float_cos float_stackdepth integer_div float_rot integer_fromfloat integer_dup_times float_swap tag_float_550 float_dec float_sub integer_flush float_shove integer_stackdepth)
Errors: [28.0 2 33.0 2 34.0 2 80.0 1 57.0 2 2.0 2 8.0 1 60.0 1 55.0 2 40.0 1 47.0 2 54.0 11 6.0 2 84.0 9 1.0 1 19.0 3 1.0 1 90.0 2 23.0 3 22.0 3 45.0 3 6.0 1 22.0 2 25.0 2 5.0 2]
Total: 910.0
Mean: 18.2
Genome size: 139
Size: 140
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 4354.740173799999
Median total errors in population: 1049.5
Error averages by case: (143.7551774999997 5.198 173.98645299999978 4.895 185.15189149999992 4.269 200.23487960000017 10.808 191.14358879999997 7.664 140.49456959999992 3.496 156.72688250000013 4.583 211.1436864999999 4.573 167.68784760000028 5.961 152.34606519999952 5.116 187.5936038 4.303 181.90238459999995 12.046 151.5042743 4.295 210.93800340000013 10.125 138.25173789999994 3.693 165.88986970000002 4.851 137.5349284 3.795 197.57525760000058 5.948 178.09777130000006 5.163 176.36764720000002 5.142 156.08391089999995 5.928 139.559875 3.484 159.81833360000022 4.106 168.56215430000017 4.219 144.47737999999995 4.251)
Error minima by case: (0.3339 1 5.0261 1 6.0937 1 3.5661 1 16.5109 1 0.0 0 4.0 1 13.9827 1 5.3828 1 0.8228 1 7.8292 1 0.2497 7 0.0412 1 1.0546 7 0.0 0 0.0 0 0.0 0 4.0 1 15.0 1 13.3695 2 0.1988 2 0.0 0 0.0247 1 0.0 0 0.0 0)
Average genome size in population (length): 131.534
Average program size in population (points): 132.534
Average percent parens in population: 0.008
Minimum age in population: 40.62399743497372
Maximum age in population: 45.66617924533784
Average age in population: 43.35080453877151
Median age in population: 43.38582077343017
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.949
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.949
Total error diversity:				 0.422
Error (vector) diversity:			 0.501
Behavioral diversity:				 0.502
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 62110644
--- Timings ---
Current time: 1529614934905 milliseconds
Total Time:         118.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.2 seconds, 33.2%
Fitness Testing:     62.7 seconds, 53.0%
Report:              16.3 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 44526.724300000016
Test mean error for best: 22.26336
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 103.6677182919
Correct output: -61.0260897243 | Program output: -97.0260897243
Correct output: -98.0936683336 | Program output: -60.0936683336
Correct output: 86.5572957786  | Program output: 3.5572957786  
Correct output: -62.8071716196 | Program output: -1.8071716196 
Correct output: 60.8276798544  | Program output: 62.8276798544 
Correct output: -71.8318464839 | Program output: -82.8318464839
Correct output: -174.9826881203 | Program output: -110.9826881203
Correct output: 77.6327303364  | Program output: 20.2654606727 
Correct output: 99.1771699896  | Program output: 93.3543399792 
Correct output: -72.1707589706 | Program output: -21.1707589706
Correct output: -21.3637789941 | Program output: 36.6362210059 
Correct output: -25.468379596  | Program output: -15.468379596 
Correct output: 2.16330651     | Program output: -84.83669349  
Correct output: 16.0518072111  | Program output: 19.0518072111 
Correct output: -95.109595054  | Program output: -110.109595054
Correct output: 9.2239476355   | Program output: 12.2239476355 
Correct output: 125.1130965414 | Program output: 45.2261930828 
Correct output: -122.5871170173 | Program output: -95.5871170173
Correct output: -101.5009667209 | Program output: -75.5009667209
Correct output: 122.8011736679 | Program output: 130.6023473358
Correct output: 58.0928182809  | Program output: 56.0928182809 
Correct output: -13.014761042  | Program output: -38.014761042 
Correct output: -69.8346847083 | Program output: -90.8346847083
Correct output: -8.1993337526  | Program output: -9.1993337526 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec integer_mult float_dup_items integer_sub float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_add integer_mod float_max integer_min float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_shove integer_dup integer_swap print_float float_rot float_stackdepth integer_div)
Errors: [11.3339 11 36.0 2 38.0 2 83.0 2 61.0 2 2.0 1 11.0 2 64.0 2 57.3673 11 5.8228 8 51.0 2 58.0 12 10.0 1 87.0 10 3.0 1 15.0 3 3.0 2 79.8869 11 27.0 3 26.0 3 7.8012 10 2.0 1 25.0 2 21.0 2 1.0 1]
Total: 893.2120999999999
Mean: 17.864243
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4324.230050199999
Median total errors in population: 1031.0
Error averages by case: (144.23420139999968 5.985 175.45137699999987 4.963 179.06233369999993 4.265 201.16286760000025 10.419 191.9432373 7.065 139.50377149999997 3.446 155.57856310000005 4.729 204.8014105999998 4.456 169.72481370000062 6.6 152.38450039999924 5.835 187.71073130000002 4.263 180.99583349999995 12.043 152.4200690000001 4.125 212.4489362000002 10.189 136.09750730000002 3.58 161.52785289999994 4.824 134.8874359999999 3.728 198.68418370000097 6.949 172.74557290000013 5.08 170.35631489999986 5.087 155.19091759999992 6.576 138.8255613999999 3.432 159.93718810000016 4.231 163.05633630000017 4.221 145.39453280000006 4.013)
Error minima by case: (0.3339 1 16.1211 1 0.9063 1 7.4097 1 12.0945 1 0.0 0 4.0 1 16.9827 1 1.5149 1 0.8228 1 7.8292 1 0.5728 7 0.0 0 1.1633 7 0.0 0 0.0 0 0.0 0 0.0 0 13.427 1 4.6591 2 0.1988 2 0.0 0 0.0148 1 0.0 0 0.0 0)
Average genome size in population (length): 133.377
Average program size in population (points): 134.377
Average percent parens in population: 0.008
Minimum age in population: 42.29770747572184
Maximum age in population: 46.90500718634576
Average age in population: 44.77981547384989
Median age in population: 44.8060045982711
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.953
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.953
Total error diversity:				 0.485
Error (vector) diversity:			 0.574
Behavioral diversity:				 0.575
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 65445069
--- Timings ---
Current time: 1529614940187 milliseconds
Total Time:         123.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.7 seconds, 32.9%
Fitness Testing:     65.7 seconds, 53.2%
Report:              17.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 44526.724300000016
Test mean error for best: 22.26336
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 103.6677182919
Correct output: -61.0260897243 | Program output: -97.0260897243
Correct output: -98.0936683336 | Program output: -60.0936683336
Correct output: 86.5572957786  | Program output: 3.5572957786  
Correct output: -62.8071716196 | Program output: -1.8071716196 
Correct output: 60.8276798544  | Program output: 62.8276798544 
Correct output: -71.8318464839 | Program output: -82.8318464839
Correct output: -174.9826881203 | Program output: -110.9826881203
Correct output: 77.6327303364  | Program output: 20.2654606727 
Correct output: 99.1771699896  | Program output: 93.3543399792 
Correct output: -72.1707589706 | Program output: -21.1707589706
Correct output: -21.3637789941 | Program output: 36.6362210059 
Correct output: -25.468379596  | Program output: -15.468379596 
Correct output: 2.16330651     | Program output: -84.83669349  
Correct output: 16.0518072111  | Program output: 19.0518072111 
Correct output: -95.109595054  | Program output: -110.109595054
Correct output: 9.2239476355   | Program output: 12.2239476355 
Correct output: 125.1130965414 | Program output: 45.2261930828 
Correct output: -122.5871170173 | Program output: -95.5871170173
Correct output: -101.5009667209 | Program output: -75.5009667209
Correct output: 122.8011736679 | Program output: 130.6023473358
Correct output: 58.0928182809  | Program output: 56.0928182809 
Correct output: -13.014761042  | Program output: -38.014761042 
Correct output: -69.8346847083 | Program output: -90.8346847083
Correct output: -8.1993337526  | Program output: -9.1993337526 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec integer_mult float_dup_items integer_sub float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_add integer_mod float_max integer_min float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_shove integer_dup integer_swap print_float float_rot float_stackdepth integer_div)
Errors: [11.3339 11 36.0 2 38.0 2 83.0 2 61.0 2 2.0 1 11.0 2 64.0 2 57.3673 11 5.8228 8 51.0 2 58.0 12 10.0 1 87.0 10 3.0 1 15.0 3 3.0 2 79.8869 11 27.0 3 26.0 3 7.8012 10 2.0 1 25.0 2 21.0 2 1.0 1]
Total: 893.2120999999999
Mean: 17.864243
Genome size: 132
Size: 133
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4289.3917115999975
Median total errors in population: 1033.68545
Error averages by case: (145.61598009999963 6.559 182.9234109999999 5.004 173.9027031999999 4.194 205.04635360000034 9.877 185.6079729 6.746 136.37384459999987 3.61 163.17261760000022 4.764 198.9708421999999 4.407 172.58466790000028 7.033 151.8465859999993 6.316 181.62519409999996 4.378 176.72722279999996 12.018 144.80297620000002 4.226 220.76752980000037 10.174 131.2395572 3.638 158.30845889999998 4.786 128.35797479999994 3.776 200.5015461000011 7.753 168.0702572 5.009 165.5614039 5.004 153.47912510000015 7.035 134.90949439999994 3.512 166.86858230000024 4.297 160.46082880000017 4.148 139.22858090000003 4.174)
Error minima by case: (0.3339 1 16.1211 1 0.0937 1 10.5573 1 27.1928 1 0.0 0 4.0 1 11.9827 1 16.6327 1 0.1772 1 7.8292 1 0.6401 2 0.0 0 0.6518 2 0.0 0 0.0 0 0.0 0 5.8869 1 15.0 1 14.0 2 0.1988 2 0.0 0 0.0148 1 0.0 0 0.0 0)
Average genome size in population (length): 135.39
Average program size in population (points): 136.39
Average percent parens in population: 0.007
Minimum age in population: 44.06209997832775
Maximum age in population: 48.30373196164146
Average age in population: 46.16558121268544
Median age in population: 46.16443932568654
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.953
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.953
Total error diversity:				 0.541
Error (vector) diversity:			 0.624
Behavioral diversity:				 0.625
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 68829819
--- Timings ---
Current time: 1529614945246 milliseconds
Total Time:         128.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.0 seconds, 32.6%
Fitness Testing:     68.7 seconds, 53.4%
Report:              17.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 43983.06320000002
Test mean error for best: 21.99153
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 101.6677182919
Correct output: -61.0260897243 | Program output: -97.0260897243
Correct output: -98.0936683336 | Program output: -64.0936683336
Correct output: 86.5572957786  | Program output: 3.5572957786  
Correct output: -62.8071716196 | Program output: -5.8071716196 
Correct output: 60.8276798544  | Program output: 58.8276798544 
Correct output: -71.8318464839 | Program output: -82.8318464839
Correct output: -174.9826881203 | Program output: -114.9826881203
Correct output: 77.6327303364  | Program output: 19.6327303364 
Correct output: 99.1771699896  | Program output: 91.3543399792 
Correct output: -72.1707589706 | Program output: -25.1707589706
Correct output: -21.3637789941 | Program output: 32.6362210059 
Correct output: -25.468379596  | Program output: -19.468379596 
Correct output: 2.16330651     | Program output: -84.83669349  
Correct output: 16.0518072111  | Program output: 15.0518072111 
Correct output: -95.109595054  | Program output: -114.109595054
Correct output: 9.2239476355   | Program output: 8.2239476355  
Correct output: 125.1130965414 | Program output: 43.2261930828 
Correct output: -122.5871170173 | Program output: -99.5871170173
Correct output: -101.5009667209 | Program output: -79.5009667209
Correct output: 122.8011736679 | Program output: 128.6023473358
Correct output: 58.0928182809  | Program output: 52.0928182809 
Correct output: -13.014761042  | Program output: -38.014761042 
Correct output: -69.8346847083 | Program output: -94.8346847083
Correct output: -8.1993337526  | Program output: -13.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_shove} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec integer_mult float_dup_items integer_sub float_dup_items integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot float_dec integer_mult float_rot integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_add integer_mod float_max integer_min float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_shove integer_dup integer_swap print_float float_rot float_stackdepth integer_div)
Errors: [9.3339 11 36.0 2 34.0 2 83.0 2 57.0 2 2.0 2 11.0 2 60.0 1 58.0 2 7.8228 8 47.0 2 54.0 11 6.0 2 87.0 10 1.0 1 19.0 3 1.0 1 81.8869 12 23.0 3 22.0 3 5.8012 9 6.0 1 25.0 2 25.0 2 5.0 2]
Total: 864.8448
Mean: 17.296896
Genome size: 144
Size: 145
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 4619.766991999997
Median total errors in population: 1070.5
Error averages by case: (158.2374781999995 7.103 193.58602559999972 5.411 185.52843759999993 4.395 211.76739010000048 10.268 199.03463939999995 6.344 153.64376029999988 3.752 174.50195690000044 5.103 210.5101055999998 4.62 184.28945820000075 7.108 165.32762949999884 6.813 194.1082191 4.433 194.60509770000007 12.06 159.325484 4.235 229.2775762000004 10.226 148.50966159999996 3.691 170.84856689999995 4.965 147.0245429 3.832 212.3537509000018 8.359 179.64537750000008 5.189 177.1637200999999 5.24 165.8326204999998 7.569 153.6086309 3.659 176.46473220000024 4.681 173.47397220000016 4.414 153.40315790000005 4.225)
Error minima by case: (0.3339 1 18.12 1 0.0937 1 6.8353 1 6.8378 1 0.0 0 4.0 1 9.8378 1 6.1018 1 0.1772 1 3.1622 1 0.3313 8 0.0 0 0.1633 8 0.0 0 0.0 0 0.0 0 3.0 1 9.5731 1 10.5731 2 0.1988 2 0.0 0 0.0165 1 0.0 0 0.0 0)
Average genome size in population (length): 137.893
Average program size in population (points): 138.893
Average percent parens in population: 0.007
Minimum age in population: 45.75297461263835
Maximum age in population: 49.60782008199021
Average age in population: 47.61315863288566
Median age in population: 47.64152244990692
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.944
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.944
Total error diversity:				 0.567
Error (vector) diversity:			 0.633
Behavioral diversity:				 0.635
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 72277144
--- Timings ---
Current time: 1529614950564 milliseconds
Total Time:         133.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.4 seconds, 32.4%
Fitness Testing:     71.8 seconds, 53.6%
Report:              18.6 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 43059.796000000024
Test mean error for best: 21.52990
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 102.6677182919
Correct output: -61.0260897243 | Program output: -94.0260897243
Correct output: -98.0936683336 | Program output: -62.0936683336
Correct output: 86.5572957786  | Program output: 6.5572957786  
Correct output: -62.8071716196 | Program output: -3.8071716196 
Correct output: 60.8276798544  | Program output: 60.8276798544 
Correct output: -71.8318464839 | Program output: -79.8318464839
Correct output: -174.9826881203 | Program output: -112.9826881203
Correct output: 77.6327303364  | Program output: 22.6327303364 
Correct output: 99.1771699896  | Program output: 92.3543399792 
Correct output: -72.1707589706 | Program output: -23.1707589706
Correct output: -21.3637789941 | Program output: 34.6362210059 
Correct output: -25.468379596  | Program output: -17.468379596 
Correct output: 2.16330651     | Program output: -81.83669349  
Correct output: 16.0518072111  | Program output: 17.0518072111 
Correct output: -95.109595054  | Program output: -112.109595054
Correct output: 9.2239476355   | Program output: 10.2239476355 
Correct output: 125.1130965414 | Program output: 44.2261930828 
Correct output: -122.5871170173 | Program output: -97.5871170173
Correct output: -101.5009667209 | Program output: -77.5009667209
Correct output: 122.8011736679 | Program output: 129.6023473358
Correct output: 58.0928182809  | Program output: 54.0928182809 
Correct output: -13.014761042  | Program output: -35.014761042 
Correct output: -69.8346847083 | Program output: -92.8346847083
Correct output: -8.1993337526  | Program output: -11.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_min} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_div} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mod} {:instruction float_yank} {:instruction integer_min} {:instruction float_swap} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float} {:instruction float_rot} {:instruction float_stackdepth} {:instruction integer_div} {:instruction float_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min float_tan integer_min integer_mod float_tan integer_swap integer_min print_integer in1 integer_mod float_rot in2 float_mult float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot integer_stackdepth float_max integer_min integer_yank integer_dup float_div float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_rot integer_mod float_dec integer_mult float_dec integer_mult float_rot float_dec integer_mod float_rot integer_mod float_dec integer_mult float_dup_items integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult integer_dup float_dec float_rot integer_mod float_yank integer_min float_swap float_dec integer_mult float_rot float_add integer_mod float_max integer_min float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_dup float_dec float_rot float_dec integer_dup_times float_rot integer_sub integer_mod integer_yank integer_dup float_dec float_rot integer_stackdepth integer_yank integer_dup float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float float_rot float_stackdepth integer_div float_add integer_fromfloat integer_dup_times float_swap float_dup)
Errors: [10.3339 10 33.0 2 36.0 2 80.0 1 59.0 2 0.0 0 8.0 1 62.0 2 55.0 2 6.8228 8 49.0 2 56.0 12 8.0 2 84.0 9 1.0 1 17.0 3 1.0 2 80.8869 12 25.0 3 24.0 3 6.8012 9 4.0 1 22.0 2 23.0 2 3.0 2]
Total: 849.8448
Mean: 16.996897
Genome size: 152
Size: 153
Percent parens: 0.007
--- Population Statistics ---
Average total errors in population: 4489.132586199997
Median total errors in population: 1003.7873
Error averages by case: (155.6734973999994 7.361 187.46247909999983 5.358 178.6811772999999 4.278 211.66298990000035 10.183 192.04659199999995 5.795 149.29771519999989 3.629 166.85219330000035 4.988 204.39931219999977 4.475 185.92202720000085 6.753 162.6837670999989 7.058 185.56630350000003 4.346 189.3586720000001 12.041 149.9920434 4.156 222.4069821000004 10.18 145.35230059999998 3.477 163.44684699999996 4.881 143.3312621 3.666 212.0024635000017 8.709 172.74075860000008 5.095 170.0916144999999 5.129 162.6959697999996 7.805 149.85412820000005 3.493 171.1390124000002 4.598 165.48159840000022 4.345 144.91487940000007 4.277)
Error minima by case: (0.3339 1 5.1872 2 0.0937 1 8.3926 1 6.9606 1 0.0 0 3.2669 1 14.9827 1 0.0138 1 0.1772 1 2.403 1 0.1716 7 0.0 0 1.1633 8 0.0 0 0.0 0 0.0 0 2.0 1 15.0 1 14.0 2 0.1988 2 0.0 0 0.1015 1 0.0 0 0.0 0)
Average genome size in population (length): 139.162
Average program size in population (points): 140.162
Average percent parens in population: 0.007
Minimum age in population: 46.75297461263835
Maximum age in population: 50.94210176449269
Average age in population: 48.91405637915758
Median age in population: 48.93856983340811
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.953
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.953
Total error diversity:				 0.559
Error (vector) diversity:			 0.628
Behavioral diversity:				 0.629
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 75756194
--- Timings ---
Current time: 1529614955798 milliseconds
Total Time:         139.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.8 seconds, 32.2%
Fitness Testing:     74.9 seconds, 53.8%
Report:              19.4 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 24891.0
Test mean error for best: 12.44550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 74.333859146  
Correct output: -61.0260897243 | Program output: -79.0260897243
Correct output: -98.0936683336 | Program output: -124.0936683336
Correct output: 86.5572957786  | Program output: 68.5572957786 
Correct output: -62.8071716196 | Program output: -88.8071716196
Correct output: 60.8276798544  | Program output: 34.8276798544 
Correct output: -71.8318464839 | Program output: -89.8318464839
Correct output: -174.9826881203 | Program output: -200.9826881203
Correct output: 77.6327303364  | Program output: 59.6327303364 
Correct output: 99.1771699896  | Program output: 81.1771699896 
Correct output: -72.1707589706 | Program output: -98.1707589706
Correct output: -21.3637789941 | Program output: -47.3637789941
Correct output: -25.468379596  | Program output: -51.468379596 
Correct output: 2.16330651     | Program output: -15.83669349  
Correct output: 16.0518072111  | Program output: -9.9481927889 
Correct output: -95.109595054  | Program output: -121.109595054
Correct output: 9.2239476355   | Program output: -16.7760523645
Correct output: 125.1130965414 | Program output: 107.1130965414
Correct output: -122.5871170173 | Program output: -148.5871170173
Correct output: -101.5009667209 | Program output: -127.5009667209
Correct output: 122.8011736679 | Program output: 104.8011736679
Correct output: 58.0928182809  | Program output: 32.0928182809 
Correct output: -13.014761042  | Program output: -31.014761042 
Correct output: -69.8346847083 | Program output: -95.8346847083
Correct output: -8.1993337526  | Program output: -34.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec float_frominteger float_dup_items integer_sub integer_dup float_dec integer_pop integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot float_swap float_dec integer_mult float_rot float_add integer_mod float_max integer_min float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_dup float_dec float_rot float_dec integer_dup_times float_rot integer_sub integer_mod integer_yank integer_dup integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float)
Errors: [18.0 2 18.0 2 26.0 3 18.0 2 26.0 2 26.0 2 18.0 2 26.0 3 18.0 2 18.0 2 26.0 2 26.0 2 26.0 2 18.0 10 26.0 11 26.0 3 26.0 12 18.0 2 26.0 2 26.0 2 18.0 2 26.0 2 18.0 2 26.0 2 26.0 2]
Total: 650.0
Mean: 13.0
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4640.781760399996
Median total errors in population: 1062.0
Error averages by case: (157.03138629999935 7.71 194.47186679999962 5.597 188.2003799 4.599 211.97027580000037 10.166 202.46651479999986 5.802 154.75976649999976 4.084 176.4266279000005 5.319 213.6862795999997 4.749 184.48333600000078 6.972 162.67457739999895 7.378 195.18987200000004 4.559 191.48629690000016 12.013 158.63920999999993 4.397 226.65459690000026 10.21 148.8676198999998 3.865 176.3442824999998 5.178 144.49151730000008 4.087 210.95868630000206 9.033 182.9972853000002 5.347 180.60209619999983 5.403 165.42112999999978 8.04 154.24931430000024 4.004 176.44630400000014 4.866 176.34293070000032 4.71 153.25260709999995 4.579)
Error minima by case: (0.3339 1 5.487 2 0.0937 1 4.1008 1 11.6247 1 0.0 0 2.9233 1 10.9827 1 1.3673 1 0.1772 1 7.8292 1 0.6465 2 0.0 0 0.0546 7 0.0 0 0.0 0 0.0 0 8.1131 1 4.2114 1 5.2114 2 0.1988 2 0.0 0 0.1809 1 0.0 0 0.0 0)
Average genome size in population (length): 140.938
Average program size in population (points): 141.938
Average percent parens in population: 0.007
Minimum age in population: 47.75297461263835
Maximum age in population: 52.17689857509686
Average age in population: 50.29137830108614
Median age in population: 50.338421335764
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.952
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.952
Total error diversity:				 0.599
Error (vector) diversity:			 0.659
Behavioral diversity:				 0.66
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 79279694
--- Timings ---
Current time: 1529614960995 milliseconds
Total Time:         144.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.1 seconds, 31.9%
Fitness Testing:     78.1 seconds, 54.0%
Report:              20.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 24891.0
Test mean error for best: 12.44550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 74.333859146  
Correct output: -61.0260897243 | Program output: -79.0260897243
Correct output: -98.0936683336 | Program output: -124.0936683336
Correct output: 86.5572957786  | Program output: 68.5572957786 
Correct output: -62.8071716196 | Program output: -88.8071716196
Correct output: 60.8276798544  | Program output: 34.8276798544 
Correct output: -71.8318464839 | Program output: -89.8318464839
Correct output: -174.9826881203 | Program output: -200.9826881203
Correct output: 77.6327303364  | Program output: 59.6327303364 
Correct output: 99.1771699896  | Program output: 81.1771699896 
Correct output: -72.1707589706 | Program output: -98.1707589706
Correct output: -21.3637789941 | Program output: -47.3637789941
Correct output: -25.468379596  | Program output: -51.468379596 
Correct output: 2.16330651     | Program output: -15.83669349  
Correct output: 16.0518072111  | Program output: -9.9481927889 
Correct output: -95.109595054  | Program output: -121.109595054
Correct output: 9.2239476355   | Program output: -16.7760523645
Correct output: 125.1130965414 | Program output: 107.1130965414
Correct output: -122.5871170173 | Program output: -148.5871170173
Correct output: -101.5009667209 | Program output: -127.5009667209
Correct output: 122.8011736679 | Program output: 104.8011736679
Correct output: 58.0928182809  | Program output: 32.0928182809 
Correct output: -13.014761042  | Program output: -31.014761042 
Correct output: -69.8346847083 | Program output: -95.8346847083
Correct output: -8.1993337526  | Program output: -34.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec float_frominteger float_dup_items integer_sub integer_dup float_dec integer_pop integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot float_swap float_dec integer_mult float_rot float_add integer_mod float_max integer_min float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_dup float_dec float_rot float_dec integer_dup_times float_rot integer_sub integer_mod integer_yank integer_dup integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float)
Errors: [18.0 2 18.0 2 26.0 3 18.0 2 26.0 2 26.0 2 18.0 2 26.0 3 18.0 2 18.0 2 26.0 2 26.0 2 26.0 2 18.0 10 26.0 11 26.0 3 26.0 12 18.0 2 26.0 2 26.0 2 18.0 2 26.0 2 18.0 2 26.0 2 26.0 2]
Total: 650.0
Mean: 13.0
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4236.263691699996
Median total errors in population: 1042.5
Error averages by case: (156.29124249999936 7.949 191.2817177999996 5.903 162.38636879999987 4.383 208.1758342000003 9.401 177.3997931 5.314 129.57429829999987 3.825 173.47664110000045 5.701 189.13875089999962 4.535 180.62969130000067 7.01 159.75049039999902 7.457 171.38851219999995 4.274 166.8029415999999 11.889 134.7698458 4.085 222.02096950000026 10.293 123.16602880000006 3.598 150.9439708999998 5.067 121.77296809999986 3.764 208.71444270000174 9.137 157.77275850000012 5.129 154.5662781999999 5.166 163.70789139999974 8.182 130.2005937999999 3.686 171.4648841000002 5.205 151.79319320000033 4.592 129.32958450000007 4.199)
Error minima by case: (0.3339 1 15.2704 2 0.0937 1 5.1556 1 9.7663 1 0.0 0 4.4646 1 11.9827 1 1.6327 1 0.1772 1 7.8292 1 0.1716 2 0.0 0 0.0027 7 0.0 0 0.0 0 0.0 0 2.0 1 0.1551 1 0.8449 2 0.1988 2 0.0 0 0.0148 1 0.0 0 0.0 0)
Average genome size in population (length): 141.732
Average program size in population (points): 142.732
Average percent parens in population: 0.007
Minimum age in population: 48.81134232226759
Maximum age in population: 53.54273894347716
Average age in population: 51.63179808751398
Median age in population: 51.68752940888226
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.962
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.962
Total error diversity:				 0.631
Error (vector) diversity:			 0.698
Behavioral diversity:				 0.699
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 82822994
--- Timings ---
Current time: 1529614966194 milliseconds
Total Time:         149.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.5 seconds, 31.7%
Fitness Testing:     81.2 seconds, 54.3%
Report:              20.8 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 23862.0
Test mean error for best: 11.93100
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 75.333859146  
Correct output: -61.0260897243 | Program output: -78.0260897243
Correct output: -98.0936683336 | Program output: -123.0936683336
Correct output: 86.5572957786  | Program output: 69.5572957786 
Correct output: -62.8071716196 | Program output: -87.8071716196
Correct output: 60.8276798544  | Program output: 35.8276798544 
Correct output: -71.8318464839 | Program output: -88.8318464839
Correct output: -174.9826881203 | Program output: -199.9826881203
Correct output: 77.6327303364  | Program output: 60.6327303364 
Correct output: 99.1771699896  | Program output: 82.1771699896 
Correct output: -72.1707589706 | Program output: -97.1707589706
Correct output: -21.3637789941 | Program output: -46.3637789941
Correct output: -25.468379596  | Program output: -50.468379596 
Correct output: 2.16330651     | Program output: -14.83669349  
Correct output: 16.0518072111  | Program output: -8.9481927889 
Correct output: -95.109595054  | Program output: -120.109595054
Correct output: 9.2239476355   | Program output: -15.7760523645
Correct output: 125.1130965414 | Program output: 108.1130965414
Correct output: -122.5871170173 | Program output: -147.5871170173
Correct output: -101.5009667209 | Program output: -126.5009667209
Correct output: 122.8011736679 | Program output: 105.8011736679
Correct output: 58.0928182809  | Program output: 33.0928182809 
Correct output: -13.014761042  | Program output: -30.014761042 
Correct output: -69.8346847083 | Program output: -94.8346847083
Correct output: -8.1993337526  | Program output: -33.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot float_stackdepth float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec float_frominteger float_dup_items integer_sub integer_dup float_dec integer_pop integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot float_swap float_dec integer_mult float_rot float_add integer_mod float_max integer_min float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_dup_times float_rot integer_sub integer_mod integer_yank integer_dup integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float)
Errors: [17.0 2 17.0 2 25.0 3 17.0 2 25.0 2 25.0 2 17.0 2 25.0 2 17.0 2 17.0 2 25.0 2 25.0 2 25.0 2 17.0 10 25.0 11 25.0 3 25.0 12 17.0 2 25.0 2 25.0 2 17.0 2 25.0 2 17.0 2 25.0 2 25.0 2]
Total: 624.0
Mean: 12.48
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4585.173237299997
Median total errors in population: 990.80485
Error averages by case: (160.08326289999928 8.609 192.28981839999963 5.543 184.3546924999999 4.549 205.95272380000046 8.293 201.2734032999999 5.504 151.00668249999987 3.919 172.99056370000037 5.321 209.22482299999967 4.655 183.41699570000074 7.352 159.97840479999894 7.823 191.98798069999998 4.459 190.38490390000004 11.871 158.37678679999993 4.269 225.17197920000055 10.304 147.87131309999992 3.824 171.16108589999985 5.079 144.18980689999998 4.004 209.19099910000216 9.831 179.7691721000001 5.258 176.88667249999986 5.302 167.4887398999996 8.623 150.73861390000002 3.794 173.0822823000003 4.952 172.90701500000026 4.545 153.39251540000012 4.319)
Error minima by case: (0.3339 1 0.0933 1 0.0937 1 3.9459 1 24.0 1 0.0 0 4.0 1 14.9827 1 0.5776 1 0.1772 1 7.8292 1 0.3638 2 0.0 0 0.1633 4 0.0 0 0.0 0 0.0 0 0.6607 1 10.0 1 4.7425 2 0.1988 2 0.0 0 0.0148 1 1.0 1 0.0 0)
Average genome size in population (length): 141.324
Average program size in population (points): 142.324
Average percent parens in population: 0.007
Minimum age in population: 50.17082167626359
Maximum age in population: 54.99496832826117
Average age in population: 52.89776673956345
Median age in population: 52.92701007209689
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.958
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.958
Total error diversity:				 0.618
Error (vector) diversity:			 0.698
Behavioral diversity:				 0.698
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 86356119
--- Timings ---
Current time: 1529614971377 milliseconds
Total Time:         154.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.8 seconds, 31.5%
Fitness Testing:     84.3 seconds, 54.5%
Report:              21.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 17699.0
Test mean error for best: 8.84950
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 79.333859146  
Correct output: -61.0260897243 | Program output: -74.0260897243
Correct output: -98.0936683336 | Program output: -115.0936683336
Correct output: 86.5572957786  | Program output: 73.5572957786 
Correct output: -62.8071716196 | Program output: -79.8071716196
Correct output: 60.8276798544  | Program output: 43.8276798544 
Correct output: -71.8318464839 | Program output: -84.8318464839
Correct output: -174.9826881203 | Program output: -191.9826881203
Correct output: 77.6327303364  | Program output: 64.6327303364 
Correct output: 99.1771699896  | Program output: 86.1771699896 
Correct output: -72.1707589706 | Program output: -89.1707589706
Correct output: -21.3637789941 | Program output: -38.3637789941
Correct output: -25.468379596  | Program output: -42.468379596 
Correct output: 2.16330651     | Program output: -10.83669349  
Correct output: 16.0518072111  | Program output: -0.9481927889 
Correct output: -95.109595054  | Program output: -112.109595054
Correct output: 9.2239476355   | Program output: -7.7760523645 
Correct output: 125.1130965414 | Program output: 112.1130965414
Correct output: -122.5871170173 | Program output: -139.5871170173
Correct output: -101.5009667209 | Program output: -118.5009667209
Correct output: 122.8011736679 | Program output: 109.8011736679
Correct output: 58.0928182809  | Program output: 41.0928182809 
Correct output: -13.014761042  | Program output: -26.014761042 
Correct output: -69.8346847083 | Program output: -86.8346847083
Correct output: -8.1993337526  | Program output: -25.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (print_integer integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_dup float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_dec float_frominteger float_dup_items integer_sub integer_dup float_dec integer_pop integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot float_swap float_dec integer_mult float_rot float_add integer_mod float_max integer_min float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_dup float_dec float_rot float_dec integer_dup_times float_rot integer_sub integer_mod integer_yank integer_dup integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float)
Errors: [13.0 2 13.0 2 17.0 3 13.0 2 17.0 2 17.0 2 13.0 2 17.0 2 13.0 2 13.0 2 17.0 2 17.0 2 17.0 2 13.0 10 17.0 11 17.0 3 17.0 11 13.0 2 17.0 2 17.0 2 13.0 2 17.0 2 13.0 2 17.0 2 17.0 2]
Total: 463.0
Mean: 9.26
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4473.434661899997
Median total errors in population: 995.0
Error averages by case: (148.63293259999912 8.664 185.0412686999998 5.459 179.55109619999996 4.905 198.90645900000044 7.283 195.33712109999988 5.987 155.3418524999998 4.343 166.6319411000004 5.318 204.48581369999968 4.995 171.60705850000053 7.037 149.20303299999878 7.788 187.24311670000006 4.831 189.67939810000001 11.624 154.7855329 4.581 218.09532800000068 10.214 147.76506310000002 4.496 172.83915549999986 5.243 145.9570923999999 4.616 199.31540000000197 9.819 177.4778679000002 5.599 174.18131729999982 5.572 151.55091369999954 8.601 153.55041439999997 4.261 165.89204980000034 4.975 174.1412577000003 4.887 150.50817800000016 4.616)
Error minima by case: (0.3339 1 7.182 1 0.0937 1 1.452 1 2.7448 1 0.0 0 3.6238 1 0.2552 1 0.8064 1 0.1772 1 3.9627 1 0.5784 1 0.0 0 0.1633 7 0.0 0 0.0 0 0.0 0 4.8869 1 11.4028 1 12.501 1 0.1988 1 0.0 0 0.0379 1 1.0 1 0.0 0)
Average genome size in population (length): 141.778
Average program size in population (points): 142.778
Average percent parens in population: 0.007
Minimum age in population: 51.91359631076921
Maximum age in population: 56.10684477389441
Average age in population: 54.30977148356302
Median age in population: 54.38283777244214
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.962
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.962
Total error diversity:				 0.604
Error (vector) diversity:			 0.704
Behavioral diversity:				 0.705
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 89900569
--- Timings ---
Current time: 1529614976454 milliseconds
Total Time:         160.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.2 seconds, 31.4%
Fitness Testing:     87.4 seconds, 54.6%
Report:              22.3 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 16669.0
Test mean error for best: 8.33450
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 80.333859146  
Correct output: -61.0260897243 | Program output: -73.0260897243
Correct output: -98.0936683336 | Program output: -114.0936683336
Correct output: 86.5572957786  | Program output: 74.5572957786 
Correct output: -62.8071716196 | Program output: -78.8071716196
Correct output: 60.8276798544  | Program output: 44.8276798544 
Correct output: -71.8318464839 | Program output: -83.8318464839
Correct output: -174.9826881203 | Program output: -190.9826881203
Correct output: 77.6327303364  | Program output: 65.6327303364 
Correct output: 99.1771699896  | Program output: 87.1771699896 
Correct output: -72.1707589706 | Program output: -88.1707589706
Correct output: -21.3637789941 | Program output: -37.3637789941
Correct output: -25.468379596  | Program output: -41.468379596 
Correct output: 2.16330651     | Program output: -9.83669349   
Correct output: 16.0518072111  | Program output: 0.0518072111  
Correct output: -95.109595054  | Program output: -111.109595054
Correct output: 9.2239476355   | Program output: -6.7760523645 
Correct output: 125.1130965414 | Program output: 113.1130965414
Correct output: -122.5871170173 | Program output: -138.5871170173
Correct output: -101.5009667209 | Program output: -117.5009667209
Correct output: 122.8011736679 | Program output: 110.8011736679
Correct output: 58.0928182809  | Program output: 42.0928182809 
Correct output: -13.014761042  | Program output: -25.014761042 
Correct output: -69.8346847083 | Program output: -85.8346847083
Correct output: -8.1993337526  | Program output: -24.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (print_integer integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_dup float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_dec float_frominteger float_dup_items integer_sub integer_dup float_dec integer_pop integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot float_swap float_dec integer_mult float_rot float_add integer_mod float_max integer_min float_dec float_dec float_rot integer_stackdepth integer_dup_items integer_mult integer_dup_times integer_dup float_dec float_rot float_dec integer_dup_times float_rot integer_sub integer_mod integer_yank integer_dup integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float)
Errors: [12.0 2 12.0 2 16.0 3 12.0 2 16.0 2 16.0 2 12.0 2 16.0 2 12.0 2 12.0 2 16.0 2 16.0 2 16.0 2 12.0 10 16.0 2 16.0 3 16.0 11 12.0 2 16.0 2 16.0 2 12.0 2 16.0 2 12.0 2 16.0 2 16.0 2]
Total: 429.0
Mean: 8.58
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4978.699448599997
Median total errors in population: 1031.5
Error averages by case: (189.5490986999991 8.365 219.45489349999934 5.815 191.29129269999987 5.055 221.10419300000046 7.091 203.94777649999986 6.278 165.63598729999973 4.356 199.6250353000009 5.652 213.36594119999958 5.139 202.56261750000084 6.887 188.1429297999987 7.671 196.74280460000003 4.992 200.29991710000004 10.742 168.88643839999995 4.714 246.80273060000079 10.241 163.34614549999978 5.36 183.47900369999982 5.337 162.3227576000001 5.523 227.29412980000197 9.363 188.6424017000002 5.607 185.7837074999998 5.55 191.64197579999865 8.405 164.81822750000018 4.305 200.47338660000042 5.34 184.21324580000038 4.937 161.6798109 4.868)
Error minima by case: (0.3339 1 7.0261 1 0.0937 1 2.3249 1 1.9641 1 0.0 0 1.7615 1 10.9827 1 2.407 1 0.1772 1 7.8292 1 0.3638 1 0.0 0 2.1499 3 0.0 0 0.0 0 0.0 0 0.0 0 15.0 1 13.501 1 0.1988 2 0.0 0 0.0148 1 0.0 0 0.0 0)
Average genome size in population (length): 138.675
Average program size in population (points): 139.675
Average percent parens in population: 0.007
Minimum age in population: 53.39308535167947
Maximum age in population: 57.55289710206125
Average age in population: 55.67856808581722
Median age in population: 55.72316562300875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.959
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.959
Total error diversity:				 0.591
Error (vector) diversity:			 0.678
Behavioral diversity:				 0.679
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 93367444
--- Timings ---
Current time: 1529614981499 milliseconds
Total Time:         165.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.6 seconds, 31.3%
Fitness Testing:     90.4 seconds, 54.8%
Report:              22.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 15606.0
Test mean error for best: 7.80300
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 81.333859146  
Correct output: -61.0260897243 | Program output: -72.0260897243
Correct output: -98.0936683336 | Program output: -113.0936683336
Correct output: 86.5572957786  | Program output: 75.5572957786 
Correct output: -62.8071716196 | Program output: -77.8071716196
Correct output: 60.8276798544  | Program output: 45.8276798544 
Correct output: -71.8318464839 | Program output: -82.8318464839
Correct output: -174.9826881203 | Program output: -189.9826881203
Correct output: 77.6327303364  | Program output: 66.6327303364 
Correct output: 99.1771699896  | Program output: 88.1771699896 
Correct output: -72.1707589706 | Program output: -87.1707589706
Correct output: -21.3637789941 | Program output: -36.3637789941
Correct output: -25.468379596  | Program output: -40.468379596 
Correct output: 2.16330651     | Program output: -8.83669349   
Correct output: 16.0518072111  | Program output: 1.0518072111  
Correct output: -95.109595054  | Program output: -110.109595054
Correct output: 9.2239476355   | Program output: -5.7760523645 
Correct output: 125.1130965414 | Program output: 114.1130965414
Correct output: -122.5871170173 | Program output: -137.5871170173
Correct output: -101.5009667209 | Program output: -116.5009667209
Correct output: 122.8011736679 | Program output: 111.8011736679
Correct output: 58.0928182809  | Program output: 43.0928182809 
Correct output: -13.014761042  | Program output: -24.014761042 
Correct output: -69.8346847083 | Program output: -84.8346847083
Correct output: -8.1993337526  | Program output: -23.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_sub} {:instruction integer_mod} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (print_integer integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 integer_mod float_rot in2 float_dup float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_dup_items integer_sub float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_dec float_frominteger float_dup_items integer_sub integer_dup float_dec integer_pop integer_stackdepth float_dec integer_mult float_rot float_dec float_rot integer_yank integer_dup float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_swap float_dec integer_mult float_rot float_add integer_mod float_max integer_min float_dec float_dec float_rot integer_stackdepth integer_dup_items integer_mult integer_dup_times integer_dup float_dec float_rot float_dec integer_dup_times float_rot integer_sub integer_mod integer_yank integer_dup integer_sub integer_mod float_max integer_min integer_yank integer_dup integer_swap print_float)
Errors: [11.0 2 11.0 2 15.0 3 11.0 2 15.0 2 15.0 2 11.0 2 15.0 2 11.0 2 11.0 2 15.0 2 15.0 2 15.0 2 11.0 10 15.0 1 15.0 3 15.0 11 11.0 2 15.0 2 15.0 2 11.0 2 15.0 2 11.0 2 15.0 2 15.0 2]
Total: 403.0
Mean: 8.06
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4689.230585899998
Median total errors in population: 944.11065
Error averages by case: (170.5359359999995 6.246 191.94211749999982 5.383 188.23338039999996 5.146 191.4994554000001 6.235 193.2752482999999 6.601 168.86922039999976 4.367 177.4728062000003 5.224 206.88695309999972 5.113 182.39266260000028 5.606 172.34913349999957 5.859 189.24218679999996 4.912 192.46965420000004 8.624 167.9318619 4.636 211.0404340000005 9.92 164.6123481999999 7.297 177.9873516999999 5.257 163.2804754 7.592 200.2618175000006 7.039 188.35706200000013 5.339 185.4204629999999 5.275 175.74094669999934 6.519 167.01561800000002 4.377 176.94080880000033 4.999 176.15021880000023 4.844 161.9754255 4.937)
Error minima by case: (0.3339 1 2.0 1 0.0994 1 9.0 1 9.2486 1 0.0 0 4.0 1 0.0173 1 3.3673 1 0.1772 1 3.7153 1 0.3599 1 0.0 0 1.8367 2 0.0 0 0.0 0 0.0 0 2.6716 1 11.1227 1 2.501 1 0.1988 1 0.0 0 0.6631 1 1.0 1 0.0 0)
Average genome size in population (length): 127.36
Average program size in population (points): 128.36
Average percent parens in population: 0.008
Minimum age in population: 54.70723433999228
Maximum age in population: 59.16047791796154
Average age in population: 57.04904431035277
Median age in population: 57.0603035076274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.92
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.92
Total error diversity:				 0.535
Error (vector) diversity:			 0.587
Behavioral diversity:				 0.588
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 96551469
--- Timings ---
Current time: 1529614986360 milliseconds
Total Time:         169.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.0 seconds, 31.2%
Fitness Testing:     93.3 seconds, 54.9%
Report:              23.5 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 10221.0
Test mean error for best: 5.11050
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 84.333859146  
Correct output: -61.0260897243 | Program output: -69.0260897243
Correct output: -98.0936683336 | Program output: -106.0936683336
Correct output: 86.5572957786  | Program output: 78.5572957786 
Correct output: -62.8071716196 | Program output: -70.8071716196
Correct output: 60.8276798544  | Program output: 52.8276798544 
Correct output: -71.8318464839 | Program output: -79.8318464839
Correct output: -174.9826881203 | Program output: -182.9826881203
Correct output: 77.6327303364  | Program output: 69.6327303364 
Correct output: 99.1771699896  | Program output: 91.1771699896 
Correct output: -72.1707589706 | Program output: -80.1707589706
Correct output: -21.3637789941 | Program output: -29.3637789941
Correct output: -25.468379596  | Program output: -33.468379596 
Correct output: 2.16330651     | Program output: -5.83669349   
Correct output: 16.0518072111  | Program output: 8.0518072111  
Correct output: -95.109595054  | Program output: -103.109595054
Correct output: 9.2239476355   | Program output: 1.2239476355  
Correct output: 125.1130965414 | Program output: 117.1130965414
Correct output: -122.5871170173 | Program output: -130.5871170173
Correct output: -101.5009667209 | Program output: -109.5009667209
Correct output: 122.8011736679 | Program output: 114.8011736679
Correct output: 58.0928182809  | Program output: 50.0928182809 
Correct output: -13.014761042  | Program output: -21.014761042 
Correct output: -69.8346847083 | Program output: -77.8346847083
Correct output: -8.1993337526  | Program output: -16.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction in1} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_inc} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 in1 float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mod float_dec float_frominteger integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec float_frominteger float_dup_items integer_sub integer_dup float_dec integer_pop integer_stackdepth float_dec integer_inc float_rot float_dec float_rot integer_yank integer_shove float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot float_swap float_dec integer_mult float_rot float_add integer_min integer_yank integer_dup integer_swap print_float)
Errors: [8.0 2 8.0 1 8.0 3 8.0 2 8.0 2 8.0 2 8.0 1 8.0 2 8.0 2 8.0 1 8.0 2 8.0 1 8.0 2 8.0 10 8.0 2 8.0 3 8.0 1 8.0 2 8.0 2 8.0 1 8.0 2 8.0 1 8.0 2 8.0 2 8.0 2]
Total: 253.0
Mean: 5.06
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3494.809638799999
Median total errors in population: 808.0
Error averages by case: (125.16445879999978 4.437 142.93164440000007 5.046 141.76687529999987 4.704 131.73983030000002 5.83 145.3249576 6.444 123.27643679999987 3.71 132.57555490000001 4.977 155.51458049999962 4.478 127.3420512 4.753 126.24261960000013 4.372 140.9134846 4.205 146.41656199999994 6.615 124.75623730000004 4.221 149.89616830000014 9.825 127.65645190000005 8.193 134.1612978999998 4.849 128.13551039999987 8.868 143.46295120000002 5.15 142.40763340000026 4.808 139.39865280000004 4.5 131.7058370000002 4.79 121.59933059999993 3.72 128.92233500000026 4.644 129.7950935000004 4.439 121.2690835000001 4.856)
Error minima by case: (0.3339 1 0.0261 1 0.0937 1 7.0 1 2.1928 1 0.0 0 2.6867 1 8.0 1 0.3673 1 0.1772 1 7.8292 1 4.3638 1 1.0 1 1.1633 2 0.0 0 0.0 0 0.0 0 3.0 1 8.0 1 8.0 1 0.1988 1 0.0 0 0.0148 1 0.0 0 0.0 0)
Average genome size in population (length): 114.586
Average program size in population (points): 115.586
Average percent parens in population: 0.009
Minimum age in population: 56.32377594507489
Maximum age in population: 60.569296155134
Average age in population: 58.48074559467463
Median age in population: 58.53239519116732
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.505
Error (vector) diversity:			 0.535
Behavioral diversity:				 0.537
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 99416119
--- Timings ---
Current time: 1529614990852 milliseconds
Total Time:         174.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.3 seconds, 31.1%
Fitness Testing:     95.9 seconds, 55.0%
Report:              24.1 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 9087.0
Test mean error for best: 4.54350
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 85.333859146  
Correct output: -61.0260897243 | Program output: -68.0260897243
Correct output: -98.0936683336 | Program output: -105.0936683336
Correct output: 86.5572957786  | Program output: 79.5572957786 
Correct output: -62.8071716196 | Program output: -69.8071716196
Correct output: 60.8276798544  | Program output: 53.8276798544 
Correct output: -71.8318464839 | Program output: -78.8318464839
Correct output: -174.9826881203 | Program output: -181.9826881203
Correct output: 77.6327303364  | Program output: 70.6327303364 
Correct output: 99.1771699896  | Program output: 92.1771699896 
Correct output: -72.1707589706 | Program output: -79.1707589706
Correct output: -21.3637789941 | Program output: -28.3637789941
Correct output: -25.468379596  | Program output: -32.468379596 
Correct output: 2.16330651     | Program output: -4.83669349   
Correct output: 16.0518072111  | Program output: 9.0518072111  
Correct output: -95.109595054  | Program output: -102.109595054
Correct output: 9.2239476355   | Program output: 2.2239476355  
Correct output: 125.1130965414 | Program output: 118.1130965414
Correct output: -122.5871170173 | Program output: -129.5871170173
Correct output: -101.5009667209 | Program output: -108.5009667209
Correct output: 122.8011736679 | Program output: 115.8011736679
Correct output: 58.0928182809  | Program output: 51.0928182809 
Correct output: -13.014761042  | Program output: -20.014761042 
Correct output: -69.8346847083 | Program output: -76.8346847083
Correct output: -8.1993337526  | Program output: -15.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction in1} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_inc} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_inc} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 in1 float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mod float_dec float_frominteger integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec float_frominteger float_dup_items integer_sub float_inc float_dec integer_pop integer_stackdepth float_dec integer_inc float_rot float_dec float_rot integer_yank integer_shove float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot float_swap float_dec integer_mult float_rot float_add integer_min integer_yank integer_dup integer_swap print_float)
Errors: [7.0 2 7.0 1 7.0 3 7.0 2 7.0 1 7.0 2 7.0 1 7.0 2 7.0 1 7.0 1 7.0 1 7.0 1 7.0 2 7.0 10 7.0 2 7.0 3 7.0 1 7.0 2 7.0 1 7.0 1 7.0 2 7.0 1 7.0 2 7.0 2 7.0 2]
Total: 224.0
Mean: 4.48
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3438.169026399999
Median total errors in population: 653.0
Error averages by case: (123.07519679999982 4.248 139.86312200000017 5.087 140.64039609999995 4.704 128.45322800000002 5.428 140.85646169999998 6.392 126.18270779999989 3.665 128.2160885 4.954 153.49706929999982 4.325 125.74559250000007 4.733 127.08004930000011 4.253 138.35809339999997 4.254 141.89956860000004 6.195 126.07279539999999 4.544 145.80793490000022 9.809 125.27185130000004 7.659 129.68748649999986 4.788 125.51218719999991 8.984 138.47103780000012 5.001 142.14697020000017 4.766 138.81672570000003 4.397 131.4548093000002 4.553 123.24489459999994 3.667 121.66789470000022 4.678 125.85825220000034 4.355 119.3766126000001 5.473)
Error minima by case: (1.0 1 2.5151 1 2.9063 1 2.6581 1 0.1928 1 0.954 1 1.0 1 2.9827 1 0.3673 1 0.1772 1 6.6585 1 0.4201 1 4.0 1 0.1633 2 0.1004 1 0.0 0 1.4217 1 4.3393 1 7.0 1 2.9021 1 4.5745 1 0.0 0 0.0091 1 0.0 0 0.0 0)
Average genome size in population (length): 107.195
Average program size in population (points): 108.195
Average percent parens in population: 0.009
Minimum age in population: 57.51098158916284
Maximum age in population: 61.97458625038507
Average age in population: 60.0257340553672
Median age in population: 60.05484414586385
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.9
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.9
Total error diversity:				 0.492
Error (vector) diversity:			 0.535
Behavioral diversity:				 0.536
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 102095994
--- Timings ---
Current time: 1529614995182 milliseconds
Total Time:         178.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.6 seconds, 31.1%
Fitness Testing:     98.3 seconds, 55.0%
Report:              24.7 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 7931.0
Test mean error for best: 3.96550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 86.333859146  
Correct output: -61.0260897243 | Program output: -67.0260897243
Correct output: -98.0936683336 | Program output: -104.0936683336
Correct output: 86.5572957786  | Program output: 80.5572957786 
Correct output: -62.8071716196 | Program output: -68.8071716196
Correct output: 60.8276798544  | Program output: 54.8276798544 
Correct output: -71.8318464839 | Program output: -77.8318464839
Correct output: -174.9826881203 | Program output: -180.9826881203
Correct output: 77.6327303364  | Program output: 71.6327303364 
Correct output: 99.1771699896  | Program output: 93.1771699896 
Correct output: -72.1707589706 | Program output: -78.1707589706
Correct output: -21.3637789941 | Program output: -27.3637789941
Correct output: -25.468379596  | Program output: -31.468379596 
Correct output: 2.16330651     | Program output: -3.83669349   
Correct output: 16.0518072111  | Program output: 10.0518072111 
Correct output: -95.109595054  | Program output: -101.109595054
Correct output: 9.2239476355   | Program output: 3.2239476355  
Correct output: 125.1130965414 | Program output: 119.1130965414
Correct output: -122.5871170173 | Program output: -128.5871170173
Correct output: -101.5009667209 | Program output: -107.5009667209
Correct output: 122.8011736679 | Program output: 116.8011736679
Correct output: 58.0928182809  | Program output: 52.0928182809 
Correct output: -13.014761042  | Program output: -19.014761042 
Correct output: -69.8346847083 | Program output: -75.8346847083
Correct output: -8.1993337526  | Program output: -14.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction float_flush} {:instruction print_integer} {:instruction in1} {:instruction in1} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_sub} {:instruction integer_dup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_inc} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap float_flush print_integer in1 in1 float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mod float_dec float_frominteger integer_stackdepth integer_fromfloat integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec float_frominteger float_dup_items integer_sub integer_dup float_dec integer_pop integer_stackdepth float_dec integer_inc float_rot float_dec float_rot integer_yank integer_shove float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot float_swap float_dec integer_mult float_rot float_add integer_min integer_yank integer_dup integer_swap print_float)
Errors: [6.0 2 6.0 1 6.0 3 6.0 1 6.0 1 6.0 2 6.0 1 6.0 2 6.0 1 6.0 1 6.0 1 6.0 1 6.0 2 6.0 10 6.0 1 6.0 3 6.0 1 6.0 2 6.0 1 6.0 1 6.0 2 6.0 1 6.0 1 6.0 2 6.0 2]
Total: 196.0
Mean: 3.92
Genome size: 78
Size: 79
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3349.177513999999
Median total errors in population: 579.5
Error averages by case: (116.46010569999984 3.993 134.14701760000023 4.98 139.6929276999999 4.74 116.94896039999999 5.209 141.53777660000006 6.461 127.13112319999986 3.807 121.91359109999999 4.858 152.26564509999977 4.358 116.41872620000007 4.557 119.98954270000021 3.997 133.32806879999998 4.402 142.9573466999999 6.228 121.69546410000007 5.042 138.60590630000007 9.775 121.54006730000006 6.159 129.70432739999987 4.749 126.33657499999991 8.788 131.22529180000006 4.845 141.3746405000002 4.832 138.39714939999996 4.371 125.14111020000014 4.326 124.07999299999994 3.778 116.35975430000025 4.61 125.20539070000038 4.413 117.44501220000011 5.998)
Error minima by case: (3.3339 1 6.0 1 6.0 1 1.4155 1 0.1928 1 1.7122 1 0.0 0 3.9827 1 1.3673 1 1.1772 1 1.6784 1 6.0 1 1.5588 1 0.9413 2 6.0 1 0.0 0 0.5185 1 0.3393 1 2.4129 1 6.0 1 6.0 1 0.0531 1 0.4389 1 0.0 0 0.8007 1)
Average genome size in population (length): 100.229
Average program size in population (points): 101.229
Average percent parens in population: 0.010
Minimum age in population: 58.51098158916284
Maximum age in population: 63.44460648321319
Average age in population: 61.49676397294302
Median age in population: 61.57298581092664
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.876
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.876
Total error diversity:				 0.461
Error (vector) diversity:			 0.493
Behavioral diversity:				 0.494
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 104601719
--- Timings ---
Current time: 1529614999417 milliseconds
Total Time:         183.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.9 seconds, 31.1%
Fitness Testing:    100.8 seconds, 55.1%
Report:              25.2 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 6798.0
Test mean error for best: 3.39900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 87.333859146  
Correct output: -61.0260897243 | Program output: -66.0260897243
Correct output: -98.0936683336 | Program output: -103.0936683336
Correct output: 86.5572957786  | Program output: 81.5572957786 
Correct output: -62.8071716196 | Program output: -67.8071716196
Correct output: 60.8276798544  | Program output: 55.8276798544 
Correct output: -71.8318464839 | Program output: -76.8318464839
Correct output: -174.9826881203 | Program output: -179.9826881203
Correct output: 77.6327303364  | Program output: 72.6327303364 
Correct output: 99.1771699896  | Program output: 94.1771699896 
Correct output: -72.1707589706 | Program output: -77.1707589706
Correct output: -21.3637789941 | Program output: -26.3637789941
Correct output: -25.468379596  | Program output: -30.468379596 
Correct output: 2.16330651     | Program output: -2.83669349   
Correct output: 16.0518072111  | Program output: 11.0518072111 
Correct output: -95.109595054  | Program output: -100.109595054
Correct output: 9.2239476355   | Program output: 4.2239476355  
Correct output: 125.1130965414 | Program output: 120.1130965414
Correct output: -122.5871170173 | Program output: -127.5871170173
Correct output: -101.5009667209 | Program output: -106.5009667209
Correct output: 122.8011736679 | Program output: 117.8011736679
Correct output: 58.0928182809  | Program output: 53.0928182809 
Correct output: -13.014761042  | Program output: -18.014761042 
Correct output: -69.8346847083 | Program output: -74.8346847083
Correct output: -8.1993337526  | Program output: -13.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction -44.80276771031762} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_inc} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_inc} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min integer_mod integer_min integer_mod float_tan -44.80276771031762 integer_yank print_integer in1 integer_mod float_rot in2 float_dup float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec float_frominteger float_dup_items integer_sub float_inc float_dec integer_pop integer_stackdepth float_dec integer_inc float_rot float_dec float_rot integer_yank integer_shove float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot float_swap float_dec integer_mult float_rot float_add integer_min integer_yank integer_dup integer_swap print_float)
Errors: [5.0 2 5.0 1 5.0 3 5.0 1 5.0 1 5.0 2 5.0 1 5.0 1 5.0 1 5.0 1 5.0 1 5.0 1 5.0 2 5.0 9 5.0 1 5.0 3 5.0 1 5.0 1 5.0 1 5.0 1 5.0 2 5.0 1 5.0 1 5.0 2 5.0 2]
Total: 168.0
Mean: 3.36
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3469.394621299999
Median total errors in population: 465.5
Error averages by case: (126.79577769999983 4.22 142.75785990000008 5.099 141.92261649999992 4.928 126.96163210000005 5.143 141.48286979999997 6.286 129.86923939999988 3.996 130.10409089999996 5.016 154.9589610999997 4.571 126.38855110000007 4.603 129.57663290000028 4.164 134.04184729999997 4.639 143.829615 6.093 120.71365590000002 5.394 146.58185610000015 9.786 127.5551302000001 4.525 132.41388329999992 4.805 129.0573541999999 8.505 138.72057130000002 4.879 144.34268990000015 4.876 140.9728011 4.518 132.92746600000012 4.531 126.87613079999991 3.904 125.62573090000028 4.812 126.74045560000033 4.493 118.42220230000012 5.969)
Error minima by case: (5.0 1 5.0 1 5.0 1 3.4427 1 5.0 1 5.0 1 2.0 1 1.9827 1 5.0 1 0.6243 1 5.0 1 3.0834 1 5.0 1 1.1512 2 5.0 1 0.0 0 1.084 1 5.0 1 5.0 1 4.501 1 5.0 1 5.0 1 0.0 1 0.0 0 0.1993 1)
Average genome size in population (length): 93.682
Average program size in population (points): 94.682
Average percent parens in population: 0.011
Minimum age in population: 60.54712924766045
Maximum age in population: 64.72799450073626
Average age in population: 62.92633910205611
Median age in population: 63.00939117606595
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.409
Error (vector) diversity:			 0.432
Behavioral diversity:				 0.433
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 106943769
--- Timings ---
Current time: 1529615003573 milliseconds
Total Time:         187.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.2 seconds, 31.1%
Fitness Testing:    103.0 seconds, 55.1%
Report:              25.8 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 6798.0
Test mean error for best: 3.39900
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 87.333859146  
Correct output: -61.0260897243 | Program output: -66.0260897243
Correct output: -98.0936683336 | Program output: -103.0936683336
Correct output: 86.5572957786  | Program output: 81.5572957786 
Correct output: -62.8071716196 | Program output: -67.8071716196
Correct output: 60.8276798544  | Program output: 55.8276798544 
Correct output: -71.8318464839 | Program output: -76.8318464839
Correct output: -174.9826881203 | Program output: -179.9826881203
Correct output: 77.6327303364  | Program output: 72.6327303364 
Correct output: 99.1771699896  | Program output: 94.1771699896 
Correct output: -72.1707589706 | Program output: -77.1707589706
Correct output: -21.3637789941 | Program output: -26.3637789941
Correct output: -25.468379596  | Program output: -30.468379596 
Correct output: 2.16330651     | Program output: -2.83669349   
Correct output: 16.0518072111  | Program output: 11.0518072111 
Correct output: -95.109595054  | Program output: -100.109595054
Correct output: 9.2239476355   | Program output: 4.2239476355  
Correct output: 125.1130965414 | Program output: 120.1130965414
Correct output: -122.5871170173 | Program output: -127.5871170173
Correct output: -101.5009667209 | Program output: -106.5009667209
Correct output: 122.8011736679 | Program output: 117.8011736679
Correct output: 58.0928182809  | Program output: 53.0928182809 
Correct output: -13.014761042  | Program output: -18.014761042 
Correct output: -69.8346847083 | Program output: -74.8346847083
Correct output: -8.1993337526  | Program output: -13.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction -44.80276771031762} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_inc} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_inc} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min integer_mod integer_min integer_mod float_tan -44.80276771031762 integer_yank print_integer in1 integer_mod float_rot in2 float_dup float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec float_frominteger float_dup_items integer_sub float_inc float_dec integer_pop integer_stackdepth float_dec integer_inc float_rot float_dec float_rot integer_yank integer_shove float_dec float_rot integer_stackdepth float_dec integer_mult float_rot float_dec float_rot float_swap float_dec integer_mult float_rot float_add integer_min integer_yank integer_dup integer_swap print_float)
Errors: [5.0 2 5.0 1 5.0 3 5.0 1 5.0 1 5.0 2 5.0 1 5.0 1 5.0 1 5.0 1 5.0 1 5.0 1 5.0 2 5.0 9 5.0 1 5.0 3 5.0 1 5.0 1 5.0 1 5.0 1 5.0 2 5.0 1 5.0 1 5.0 2 5.0 2]
Total: 168.0
Mean: 3.36
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2692.103640599999
Median total errors in population: 394.0
Error averages by case: (96.33467809999986 3.825 109.11285860000024 4.2 109.76918709999993 4.685 100.06123640000003 4.525 113.7591646 5.927 98.24364879999986 3.733 98.52548170000001 4.144 122.19692999999963 4.317 98.94790670000005 4.024 98.97384070000017 3.554 107.35508319999994 4.488 113.7942724999999 5.734 93.96862000000002 5.236 114.08231839999999 9.873 92.88354450000008 3.767 99.58456569999991 4.507 96.90719719999993 6.99 109.81068860000006 4.377 111.05510460000018 4.481 107.88215530000006 4.073 103.02637200000018 4.146 95.8639200999999 3.527 94.98097840000013 4.138 94.9797652000002 4.147 91.88612220000009 5.7)
Error minima by case: (0.733 1 1.0 1 5.0 1 0.0317 1 4.1928 1 3.001 1 1.0 1 0.0173 1 1.0 1 1.0 1 0.1685 1 0.3638 1 1.4684 1 0.1409 1 2.0 1 0.0 0 2.001 1 1.0 1 5.0 1 1.0979 1 1.0 1 5.0 1 1.0 1 0.0 0 0.1993 1)
Average genome size in population (length): 87.103
Average program size in population (points): 88.103
Average percent parens in population: 0.011
Minimum age in population: 61.76266421185619
Maximum age in population: 66.19731968817467
Average age in population: 64.25293552539814
Median age in population: 64.32100092686886
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.354
Error (vector) diversity:			 0.374
Behavioral diversity:				 0.374
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 109121344
--- Timings ---
Current time: 1529615007622 milliseconds
Total Time:         191.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.6 seconds, 31.1%
Fitness Testing:    105.2 seconds, 55.0%
Report:              26.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 4417.0
Test mean error for best: 2.20850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 89.333859146  
Correct output: -61.0260897243 | Program output: -64.0260897243
Correct output: -98.0936683336 | Program output: -101.0936683336
Correct output: 86.5572957786  | Program output: 83.5572957786 
Correct output: -62.8071716196 | Program output: -65.8071716196
Correct output: 60.8276798544  | Program output: 57.8276798544 
Correct output: -71.8318464839 | Program output: -74.8318464839
Correct output: -174.9826881203 | Program output: -177.9826881203
Correct output: 77.6327303364  | Program output: 74.6327303364 
Correct output: 99.1771699896  | Program output: 96.1771699896 
Correct output: -72.1707589706 | Program output: -75.1707589706
Correct output: -21.3637789941 | Program output: -24.3637789941
Correct output: -25.468379596  | Program output: -28.468379596 
Correct output: 2.16330651     | Program output: -0.83669349   
Correct output: 16.0518072111  | Program output: 13.0518072111 
Correct output: -95.109595054  | Program output: -98.109595054 
Correct output: 9.2239476355   | Program output: 6.2239476355  
Correct output: 125.1130965414 | Program output: 122.1130965414
Correct output: -122.5871170173 | Program output: -125.5871170173
Correct output: -101.5009667209 | Program output: -104.5009667209
Correct output: 122.8011736679 | Program output: 119.8011736679
Correct output: 58.0928182809  | Program output: 55.0928182809 
Correct output: -13.014761042  | Program output: -16.014761042 
Correct output: -69.8346847083 | Program output: -72.8346847083
Correct output: -8.1993337526  | Program output: -11.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_min} {:instruction print_integer} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_mult} {:instruction float_dec} {:instruction in2} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_max} {:instruction float_dup_times} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_mod} {:instruction float_dup} {:instruction integer_min} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction integer_max} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_yankdup} {:instruction integer_dup} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_rot} {:instruction integer_sub} {:instruction integer_mod} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_sub} {:instruction float_inc} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (print_integer integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_min print_integer in1 integer_mod float_rot in2 float_mult float_dec in2 float_dup float_dec float_dec float_rot integer_stackdepth float_dec float_max float_dup_times integer_yank integer_mult float_rot float_dec integer_mod float_dec float_frominteger integer_mult float_dup_items integer_sub float_rot integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_rot integer_stackdepth float_dec integer_mult float_rot float_add integer_mod float_dup integer_min float_dec integer_swap float_rot integer_max float_dec integer_mult integer_yankdup integer_dup float_dec float_rot float_dec integer_dup_times float_rot integer_sub integer_mod integer_yank integer_dup integer_sub float_inc float_max integer_min integer_yank integer_dup integer_swap print_float)
Errors: [3.0 2 3.0 1 3.0 3 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 10 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 2 3.0 2]
Total: 116.0
Mean: 2.32
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2412.899458399999
Median total errors in population: 326.0
Error averages by case: (84.96148669999994 3.698 100.06656770000019 3.717 98.49869659999995 4.568 91.3260829 4.251 98.90017750000001 5.279 87.92539249999996 3.753 89.002929 3.692 108.54018559999983 4.001 87.25246050000001 3.636 88.18039680000001 3.277 97.20618879999996 4.336 100.06284229999989 5.072 81.21582610000002 5.035 106.59225219999996 9.837 80.17068310000006 3.694 91.57121820000002 4.363 83.35182469999988 4.835 99.51747650000001 4.126 99.6224278000001 3.938 96.84948970000002 3.628 94.12361120000014 3.996 85.4757768999999 3.29 86.79920960000004 3.792 87.18286180000011 3.883 79.51439370000008 5.292)
Error minima by case: (1.0 1 1.0 1 3.0 1 1.0 1 3.0 1 3.0 1 1.0 1 0.9827 1 1.0 1 1.0 1 3.0 1 1.5202 1 1.4684 1 1.0 1 0.9482 1 0.0 0 1.7761 1 1.0 1 0.8028 1 0.1972 1 1.0 1 3.0 1 0.0148 1 0.0 0 0.1993 1)
Average genome size in population (length): 80.622
Average program size in population (points): 81.622
Average percent parens in population: 0.012
Minimum age in population: 62.76266421185619
Maximum age in population: 67.44319932043246
Average age in population: 65.38853477747438
Median age in population: 65.38965827437428
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 35
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 35
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.271
Error (vector) diversity:			 0.281
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 111136894
--- Timings ---
Current time: 1529615011518 milliseconds
Total Time:         195.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.8 seconds, 31.2%
Fitness Testing:    107.3 seconds, 55.0%
Report:              26.9 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 4417.0
Test mean error for best: 2.20850
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 89.333859146  
Correct output: -61.0260897243 | Program output: -64.0260897243
Correct output: -98.0936683336 | Program output: -101.0936683336
Correct output: 86.5572957786  | Program output: 83.5572957786 
Correct output: -62.8071716196 | Program output: -65.8071716196
Correct output: 60.8276798544  | Program output: 57.8276798544 
Correct output: -71.8318464839 | Program output: -74.8318464839
Correct output: -174.9826881203 | Program output: -177.9826881203
Correct output: 77.6327303364  | Program output: 74.6327303364 
Correct output: 99.1771699896  | Program output: 96.1771699896 
Correct output: -72.1707589706 | Program output: -75.1707589706
Correct output: -21.3637789941 | Program output: -24.3637789941
Correct output: -25.468379596  | Program output: -28.468379596 
Correct output: 2.16330651     | Program output: -0.83669349   
Correct output: 16.0518072111  | Program output: 13.0518072111 
Correct output: -95.109595054  | Program output: -98.109595054 
Correct output: 9.2239476355   | Program output: 6.2239476355  
Correct output: 125.1130965414 | Program output: 122.1130965414
Correct output: -122.5871170173 | Program output: -125.5871170173
Correct output: -101.5009667209 | Program output: -104.5009667209
Correct output: 122.8011736679 | Program output: 119.8011736679
Correct output: 58.0928182809  | Program output: 55.0928182809 
Correct output: -13.014761042  | Program output: -16.014761042 
Correct output: -69.8346847083 | Program output: -72.8346847083
Correct output: -8.1993337526  | Program output: -11.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction float_swap} {:instruction print_integer} {:instruction in1} {:instruction in1} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap float_swap print_integer in1 in1 float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mod float_dec float_frominteger integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec float_frominteger float_dup_items float_dec integer_mult float_rot float_add integer_min integer_yank integer_dup integer_swap print_float)
Errors: [3.0 2 3.0 1 3.0 3 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 10 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 2 3.0 2]
Total: 116.0
Mean: 2.32
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2313.8387563999995
Median total errors in population: 227.0
Error averages by case: (81.62612879999986 3.869 96.51076030000021 3.646 92.53247820000001 4.618 84.54925229999998 3.995 97.98967750000001 5.038 87.26656019999989 3.951 83.78845520000002 3.652 100.7313326999997 3.999 83.30144039999999 3.509 82.51763370000005 3.387 91.10715089999991 4.247 99.33967689999989 4.933 78.88677250000006 5.077 103.19580089999997 9.722 78.8523475000001 3.79 87.34954060000001 4.468 79.23576819999982 4.075 94.46887109999999 4.113 93.58384810000008 3.794 90.64461230000006 3.515 88.89966590000017 4.114 85.21936609999985 3.393 82.26185880000007 3.634 82.0387276000002 3.994 80.1800297000001 5.228)
Error minima by case: (1.0 1 1.0 1 3.0 1 0.5573 1 3.0 1 0.1325 1 0.153 1 0.0173 1 1.0 1 1.0 1 0.1859 1 3.0 1 0.5316 1 0.087 1 0.9482 1 0.0 0 1.1325 1 1.0 1 2.0 1 0.499 1 1.0 1 3.0 1 0.0148 1 0.0 0 0.0134 1)
Average genome size in population (length): 77.429
Average program size in population (points): 78.429
Average percent parens in population: 0.013
Minimum age in population: 64.38788084116965
Maximum age in population: 69.15429505469382
Average age in population: 66.69505330743833
Median age in population: 66.73103868518814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.232
Error (vector) diversity:			 0.242
Behavioral diversity:				 0.243
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 113072619
--- Timings ---
Current time: 1529615015341 milliseconds
Total Time:         199.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.1 seconds, 31.2%
Fitness Testing:    109.4 seconds, 55.0%
Report:              27.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 3291.0
Test mean error for best: 1.64550
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 90.333859146  
Correct output: -61.0260897243 | Program output: -63.0260897243
Correct output: -98.0936683336 | Program output: -100.0936683336
Correct output: 86.5572957786  | Program output: 84.5572957786 
Correct output: -62.8071716196 | Program output: -64.8071716196
Correct output: 60.8276798544  | Program output: 58.8276798544 
Correct output: -71.8318464839 | Program output: -73.8318464839
Correct output: -174.9826881203 | Program output: -176.9826881203
Correct output: 77.6327303364  | Program output: 75.6327303364 
Correct output: 99.1771699896  | Program output: 97.1771699896 
Correct output: -72.1707589706 | Program output: -74.1707589706
Correct output: -21.3637789941 | Program output: -23.3637789941
Correct output: -25.468379596  | Program output: -27.468379596 
Correct output: 2.16330651     | Program output: 0.16330651    
Correct output: 16.0518072111  | Program output: 14.0518072111 
Correct output: -95.109595054  | Program output: -97.109595054 
Correct output: 9.2239476355   | Program output: 7.2239476355  
Correct output: 125.1130965414 | Program output: 123.1130965414
Correct output: -122.5871170173 | Program output: -124.5871170173
Correct output: -101.5009667209 | Program output: -103.5009667209
Correct output: 122.8011736679 | Program output: 120.8011736679
Correct output: 58.0928182809  | Program output: 56.0928182809 
Correct output: -13.014761042  | Program output: -15.014761042 
Correct output: -69.8346847083 | Program output: -71.8346847083
Correct output: -8.1993337526  | Program output: -10.1993337526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction integer_yank} {:instruction print_integer} {:instruction in1} {:instruction in1} {:instruction float_rot} {:instruction in2} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_inc} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_inc} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap integer_yank print_integer in1 in1 float_rot in2 float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_dec integer_mod float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec float_frominteger float_dup_items integer_sub float_inc float_dec integer_pop integer_stackdepth float_dec integer_inc float_rot float_dec float_rot integer_yank integer_shove float_dec float_rot integer_mult float_rot float_add integer_min integer_yank integer_dup integer_swap print_float)
Errors: [2.0 1 2.0 1 2.0 3 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 2]
Total: 80.0
Mean: 1.6
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2731.315603599999
Median total errors in population: 224.0
Error averages by case: (101.38564889999982 4.06 111.03858620000018 3.946 110.02409439999995 4.913 103.80734260000004 3.994 111.82758010000005 5.107 105.98047739999983 4.221 97.4214388 3.94 118.50140319999983 4.171 102.82346480000007 3.711 104.31962280000015 3.65 103.55374539999991 4.51 115.35442969999987 5.056 90.6039248000001 5.191 118.25954269999997 9.328 99.52179570000013 3.886 101.34576030000001 4.664 98.66037549999984 4.277 113.6191672000001 4.169 110.60399110000009 4.091 107.86927480000001 3.839 107.61874960000019 4.344 103.2020887999999 3.637 97.0098906000001 3.65 95.4115718000002 4.243 89.63263640000012 5.321)
Error minima by case: (0.0 0 0.0 0 0.4881 1 0.0 0 2.0 1 2.0 1 0.0 0 0.0173 1 0.0 0 0.0 0 1.1708 1 2.0 1 1.4684 1 0.0 0 0.9482 1 0.0 0 2.0 1 0.0 0 0.8028 1 0.1972 1 0.0 0 2.0 1 0.0 0 0.0 0 0.6221 1)
Average genome size in population (length): 75.133
Average program size in population (points): 76.133
Average percent parens in population: 0.013
Minimum age in population: 65.8682174195824
Maximum age in population: 70.20942967234954
Average age in population: 68.17445796744806
Median age in population: 68.19187157221702
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.242
Error (vector) diversity:			 0.255
Behavioral diversity:				 0.255
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 114950944
--- Timings ---
Current time: 1529615019068 milliseconds
Total Time:         202.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.4 seconds, 31.3%
Fitness Testing:    111.4 seconds, 54.9%
Report:              27.9 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 92.333859146  
Correct output: -61.0260897243 | Program output: -61.0260897243
Correct output: -98.0936683336 | Program output: -98.0936683336
Correct output: 86.5572957786  | Program output: 86.5572957786 
Correct output: -62.8071716196 | Program output: -62.8071716196
Correct output: 60.8276798544  | Program output: 60.8276798544 
Correct output: -71.8318464839 | Program output: -71.8318464839
Correct output: -174.9826881203 | Program output: -174.9826881203
Correct output: 77.6327303364  | Program output: 77.6327303364 
Correct output: 99.1771699896  | Program output: 99.1771699896 
Correct output: -72.1707589706 | Program output: -72.1707589706
Correct output: -21.3637789941 | Program output: -21.3637789941
Correct output: -25.468379596  | Program output: -25.468379596 
Correct output: 2.16330651     | Program output: 2.16330651    
Correct output: 16.0518072111  | Program output: 16.0518072111 
Correct output: -95.109595054  | Program output: -95.109595054 
Correct output: 9.2239476355   | Program output: 9.2239476355  
Correct output: 125.1130965414 | Program output: 125.1130965414
Correct output: -122.5871170173 | Program output: -122.5871170173
Correct output: -101.5009667209 | Program output: -101.5009667209
Correct output: 122.8011736679 | Program output: 122.8011736679
Correct output: 58.0928182809  | Program output: 58.0928182809 
Correct output: -13.014761042  | Program output: -13.014761042 
Correct output: -69.8346847083 | Program output: -69.8346847083
Correct output: -8.1993337526  | Program output: -8.1993337526 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_min} {:instruction float_rot} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction -44.80276771031762} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_min} {:instruction integer_mod} {:instruction float_tan} {:instruction integer_swap} {:instruction in1} {:instruction integer_mod} {:instruction float_rot} {:instruction in2} {:instruction float_dup} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_stackdepth} {:instruction float_max} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dup_items} {:instruction integer_sub} {:instruction float_inc} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction integer_mult} {:instruction float_rot} {:instruction float_add} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_dup} {:instruction integer_swap} {:instruction print_float})
Best program: (integer_min float_rot integer_min integer_mod float_tan -44.80276771031762 integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap in1 integer_mod float_rot in2 float_dup float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec float_frominteger float_dup_items integer_sub float_inc float_dec integer_pop integer_stackdepth integer_mult float_rot float_add integer_min integer_yank integer_dup integer_swap print_float)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2361.4611702999996
Median total errors in population: 196.0
Error averages by case: (87.53767569999982 4.192 98.45296950000022 4.008 92.56937529999992 4.926 88.04163859999996 3.913 96.55069809999998 5.189 93.46181049999994 4.332 84.82969539999996 4.103 101.89161649999984 4.022 87.78152350000002 3.795 89.01459269999998 3.77 87.0792454999999 4.674 101.58832969999976 5.19 75.93262260000004 5.163 106.45823479999996 9.015 83.35600540000011 3.881 87.47212600000006 4.436 79.65315309999984 4.217 99.58379520000007 4.123 93.5533413 4.121 90.37411229999995 3.848 93.55172760000023 4.4 90.93811639999983 3.778 82.7443611 3.661 81.31645360000014 4.304 75.24994990000006 5.417)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 73.139
Average program size in population (points): 74.139
Average percent parens in population: 0.014
Minimum age in population: 67.43243211523793
Maximum age in population: 71.65917737324504
Average age in population: 69.57836325258485
Median age in population: 69.62717476227216
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.266
Error (vector) diversity:			 0.277
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 116779469
--- Timings ---
Current time: 1529615022921 milliseconds
Total Time:         206.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.7 seconds, 31.3%
Fitness Testing:    113.4 seconds, 54.9%
Report:              28.3 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 49
Successful program: (integer_min float_rot integer_min integer_mod float_tan -44.80276771031762 integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap in1 integer_mod float_rot in2 float_dup float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec float_frominteger float_dup_items integer_sub float_inc float_dec integer_pop integer_stackdepth integer_mult float_rot float_add integer_min integer_yank integer_dup integer_swap print_float)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 66


Auto-simplifying with starting size: 66
step: 0
program: (integer_min float_rot integer_min integer_mod float_tan -44.80276771031762 integer_min integer_mod integer_min integer_mod float_tan integer_min integer_mod float_tan integer_swap in1 integer_mod float_rot in2 float_dup float_dec float_dec float_rot integer_stackdepth float_dec integer_mult float_rot integer_stackdepth float_rot float_dec float_dec float_rot integer_stackdepth float_max integer_min integer_yank integer_dup integer_stackdepth float_dec integer_mult float_rot float_dec integer_yank integer_stackdepth float_dec integer_mult float_rot float_dec integer_mod float_dec float_frominteger float_dup_items integer_sub float_inc float_dec integer_pop integer_stackdepth integer_mult float_rot float_add integer_min integer_yank integer_dup integer_swap print_float)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 66

step: 500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 92.333859146   | Program output: 92.333859146  
Correct output: -61.0260897243 | Program output: -61.0260897243
Correct output: -98.0936683336 | Program output: -98.0936683336
Correct output: 86.5572957786  | Program output: 86.5572957786 
Correct output: -62.8071716196 | Program output: -62.8071716196
Correct output: 60.8276798544  | Program output: 60.8276798544 
Correct output: -71.8318464839 | Program output: -71.8318464839
Correct output: -174.9826881203 | Program output: -174.9826881203
Correct output: 77.6327303364  | Program output: 77.6327303364 
Correct output: 99.1771699896  | Program output: 99.1771699896 
Correct output: -72.1707589706 | Program output: -72.1707589706
Correct output: -21.3637789941 | Program output: -21.3637789941
Correct output: -25.468379596  | Program output: -25.468379596 
Correct output: 2.16330651     | Program output: 2.16330651    
Correct output: 16.0518072111  | Program output: 16.0518072111 
Correct output: -95.109595054  | Program output: -95.109595054 
Correct output: 9.2239476355   | Program output: 9.2239476355  
Correct output: 125.1130965414 | Program output: 125.1130965414
Correct output: -122.5871170173 | Program output: -122.5871170173
Correct output: -101.5009667209 | Program output: -101.5009667209
Correct output: 122.8011736679 | Program output: 122.8011736679
Correct output: 58.0928182809  | Program output: 58.0928182809 
Correct output: -13.014761042  | Program output: -13.014761042 
Correct output: -69.8346847083 | Program output: -69.8346847083
Correct output: -8.1993337526  | Program output: -8.1993337526 
;;******************************
