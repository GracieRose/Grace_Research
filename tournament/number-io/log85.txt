Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[95.52221108799046 96] 191.52221108799046]
Train Case:   1 | Input/Output: [[62.92465507761048 9] 71.92465507761048]
Train Case:   2 | Input/Output: [[14.286358260241457 -86] -71.71364173975854]
Train Case:   3 | Input/Output: [[2.6363021211311093 -89] -86.36369787886889]
Train Case:   4 | Input/Output: [[-82.78981447498865 -93] -175.78981447498865]
Train Case:   5 | Input/Output: [[-6.4831289412761635 -61] -67.48312894127616]
Train Case:   6 | Input/Output: [[-13.351307193444441 -10] -23.35130719344444]
Train Case:   7 | Input/Output: [[-33.14476198710055 -90] -123.14476198710055]
Train Case:   8 | Input/Output: [[-46.99238285084986 71] 24.007617149150143]
Train Case:   9 | Input/Output: [[-46.67026781780594 -4] -50.67026781780594]
Train Case:  10 | Input/Output: [[-52.79932196421644 -76] -128.79932196421643]
Train Case:  11 | Input/Output: [[-58.24242519593861 100] 41.75757480406139]
Train Case:  12 | Input/Output: [[87.05704551903338 86] 173.05704551903338]
Train Case:  13 | Input/Output: [[-79.02644967371586 -31] -110.02644967371586]
Train Case:  14 | Input/Output: [[-77.02563615887503 89] 11.974363841124969]
Train Case:  15 | Input/Output: [[-97.42877599470899 95] -2.4287759947089853]
Train Case:  16 | Input/Output: [[-18.845389080129877 -42] -60.84538908012988]
Train Case:  17 | Input/Output: [[-26.19940055883238 -93] -119.19940055883238]
Train Case:  18 | Input/Output: [[-30.739685672802523 29] -1.7396856728025227]
Train Case:  19 | Input/Output: [[58.23004892732263 -7] 51.23004892732263]
Train Case:  20 | Input/Output: [[89.99047534767465 96] 185.99047534767465]
Train Case:  21 | Input/Output: [[53.44706771710406 -11] 42.44706771710406]
Train Case:  22 | Input/Output: [[19.313449409920864 34] 53.313449409920864]
Train Case:  23 | Input/Output: [[-96.87278614086688 63] -33.87278614086688]
Train Case:  24 | Input/Output: [[30.811534633171988 97] 127.81153463317199]
Test Case:   0 | Input/Output: [[11.918899581566464 100] 111.91889958156646]
Test Case:   1 | Input/Output: [[93.75200707008793 -46] 47.75200707008793]
Test Case:   2 | Input/Output: [[-36.548360112271205 92] 55.451639887728795]
Test Case:   3 | Input/Output: [[-5.708179448091016 49] 43.291820551908984]
Test Case:   4 | Input/Output: [[56.775675857404394 -33] 23.775675857404394]
Test Case:   5 | Input/Output: [[-63.22833376794594 -82] -145.22833376794594]
Test Case:   6 | Input/Output: [[-48.694248204523774 -66] -114.69424820452377]
Test Case:   7 | Input/Output: [[77.63932389124051 11] 88.63932389124051]
Test Case:   8 | Input/Output: [[-97.06201293628094 65] -32.06201293628094]
Test Case:   9 | Input/Output: [[-26.114634997080927 -44] -70.11463499708093]
Test Case:  10 | Input/Output: [[-61.61382613114921 -38] -99.61382613114921]
Test Case:  11 | Input/Output: [[-72.76579246989988 -26] -98.76579246989988]
Test Case:  12 | Input/Output: [[2.047939368609434 53] 55.047939368609434]
Test Case:  13 | Input/Output: [[-51.87295907811269 91] 39.12704092188731]
Test Case:  14 | Input/Output: [[-82.45948529440237 -36] -118.45948529440237]
Test Case:  15 | Input/Output: [[-38.371010184517004 -95] -133.371010184517]
Test Case:  16 | Input/Output: [[39.70412662060352 -84] -44.29587337939648]
Test Case:  17 | Input/Output: [[-44.20120587725429 8] -36.20120587725429]
Test Case:  18 | Input/Output: [[38.004170225110954 -4] 34.004170225110954]
Test Case:  19 | Input/Output: [[-40.42935766634117 -8] -48.42935766634117]
Test Case:  20 | Input/Output: [[56.24212503086699 26] 82.24212503086699]
Test Case:  21 | Input/Output: [[70.93197917317283 -80] -9.068020826827166]
Test Case:  22 | Input/Output: [[-33.045517987231904 89] 55.954482012768096]
Test Case:  23 | Input/Output: [[-65.37865739526706 100] 34.621342604732945]
Test Case:  24 | Input/Output: [[-2.8871741947551897 -68] -70.88717419475519]
Test Case:  25 | Input/Output: [[-62.35148263579584 -1] -63.35148263579584]
Test Case:  26 | Input/Output: [[47.177235991450004 17] 64.17723599145]
Test Case:  27 | Input/Output: [[99.3749862006693 75] 174.3749862006693]
Test Case:  28 | Input/Output: [[33.91874388857241 -19] 14.918743888572408]
Test Case:  29 | Input/Output: [[36.67844844456627 24] 60.67844844456627]
Test Case:  30 | Input/Output: [[-51.63524798885055 -40] -91.63524798885055]
Test Case:  31 | Input/Output: [[37.19546610886118 -84] -46.80453389113882]
Test Case:  32 | Input/Output: [[69.98487436635506 7] 76.98487436635506]
Test Case:  33 | Input/Output: [[-82.38828644212373 36] -46.38828644212373]
Test Case:  34 | Input/Output: [[72.66048130936852 -27] 45.66048130936852]
Test Case:  35 | Input/Output: [[86.16548373430183 -16] 70.16548373430183]
Test Case:  36 | Input/Output: [[-34.11944972598373 53] 18.880550274016272]
Test Case:  37 | Input/Output: [[78.13372278680947 72] 150.13372278680947]
Test Case:  38 | Input/Output: [[16.93436549119076 -40] -23.06563450880924]
Test Case:  39 | Input/Output: [[90.12419462236568 -55] 35.12419462236568]
Test Case:  40 | Input/Output: [[80.9048644615855 59] 139.9048644615855]
Test Case:  41 | Input/Output: [[-35.43604736927395 -61] -96.43604736927395]
Test Case:  42 | Input/Output: [[-17.181977169623025 11] -6.181977169623025]
Test Case:  43 | Input/Output: [[-77.7719865432466 -94] -171.7719865432466]
Test Case:  44 | Input/Output: [[11.545059143474717 -61] -49.45494085652528]
Test Case:  45 | Input/Output: [[-68.00785943027864 26] -42.00785943027864]
Test Case:  46 | Input/Output: [[-47.97954877810635 -10] -57.97954877810635]
Test Case:  47 | Input/Output: [[41.722029096529155 -24] 17.722029096529155]
Test Case:  48 | Input/Output: [[-20.534863084964087 -31] -51.53486308496409]
Test Case:  49 | Input/Output: [[-85.46795009646968 89] 3.5320499035303214]
Test Case:  50 | Input/Output: [[-95.91501653255459 -32] -127.91501653255459]
Test Case:  51 | Input/Output: [[48.7107310709157 -93] -44.2892689290843]
Test Case:  52 | Input/Output: [[-59.329224595243836 28] -31.329224595243836]
Test Case:  53 | Input/Output: [[53.67925198946756 89] 142.67925198946756]
Test Case:  54 | Input/Output: [[16.03141350623018 -94] -77.96858649376982]
Test Case:  55 | Input/Output: [[-75.32770554920185 29] -46.32770554920185]
Test Case:  56 | Input/Output: [[-49.197985059611746 24] -25.197985059611746]
Test Case:  57 | Input/Output: [[95.43665084913684 -50] 45.43665084913684]
Test Case:  58 | Input/Output: [[-40.123092977704 -24] -64.123092977704]
Test Case:  59 | Input/Output: [[0.3416271627122285 52] 52.34162716271223]
Test Case:  60 | Input/Output: [[-19.574174545636097 -74] -93.5741745456361]
Test Case:  61 | Input/Output: [[76.41058393580809 -47] 29.41058393580809]
Test Case:  62 | Input/Output: [[8.36084772520313 10] 18.36084772520313]
Test Case:  63 | Input/Output: [[56.886089761982134 -28] 28.886089761982134]
Test Case:  64 | Input/Output: [[1.3482624445329492 85] 86.34826244453295]
Test Case:  65 | Input/Output: [[74.22298953487626 76] 150.22298953487626]
Test Case:  66 | Input/Output: [[98.88057069625367 49] 147.88057069625367]
Test Case:  67 | Input/Output: [[19.668755347061378 10] 29.668755347061378]
Test Case:  68 | Input/Output: [[21.32080544144071 83] 104.32080544144071]
Test Case:  69 | Input/Output: [[-50.24361374745503 -73] -123.24361374745503]
Test Case:  70 | Input/Output: [[-17.36591565149392 100] 82.63408434850608]
Test Case:  71 | Input/Output: [[-27.481694803493582 -89] -116.48169480349358]
Test Case:  72 | Input/Output: [[83.20618196376003 -36] 47.20618196376003]
Test Case:  73 | Input/Output: [[69.56921375216606 -79] -9.430786247833936]
Test Case:  74 | Input/Output: [[8.31936467147571 98] 106.31936467147571]
Test Case:  75 | Input/Output: [[-22.06147261607734 -13] -35.06147261607734]
Test Case:  76 | Input/Output: [[92.5933099864269 79] 171.5933099864269]
Test Case:  77 | Input/Output: [[-30.57709093424647 42] 11.42290906575353]
Test Case:  78 | Input/Output: [[-8.656402748279419 -41] -49.65640274827942]
Test Case:  79 | Input/Output: [[-40.02029786976844 -38] -78.02029786976844]
Test Case:  80 | Input/Output: [[47.20826016573088 -4] 43.20826016573088]
Test Case:  81 | Input/Output: [[18.42236648694285 28] 46.42236648694285]
Test Case:  82 | Input/Output: [[47.347222050388694 -51] -3.6527779496113055]
Test Case:  83 | Input/Output: [[-43.782291311425034 -51] -94.78229131142504]
Test Case:  84 | Input/Output: [[-94.23529264749557 24] -70.23529264749557]
Test Case:  85 | Input/Output: [[67.71739214697439 -5] 62.71739214697439]
Test Case:  86 | Input/Output: [[43.708178498151085 13] 56.708178498151085]
Test Case:  87 | Input/Output: [[93.55504511326836 -69] 24.555045113268363]
Test Case:  88 | Input/Output: [[-81.85038368056365 49] -32.85038368056365]
Test Case:  89 | Input/Output: [[32.106637934041515 -97] -64.89336206595848]
Test Case:  90 | Input/Output: [[-85.73914759171741 -2] -87.73914759171741]
Test Case:  91 | Input/Output: [[-51.25578255872121 73] 21.744217441278792]
Test Case:  92 | Input/Output: [[-26.370383109713558 -75] -101.37038310971356]
Test Case:  93 | Input/Output: [[68.69889668071255 -80] -11.30110331928745]
Test Case:  94 | Input/Output: [[-72.89948093538116 35] -37.89948093538116]
Test Case:  95 | Input/Output: [[86.70195545487798 -100] -13.298044545122025]
Test Case:  96 | Input/Output: [[-51.854272219628996 -62] -113.854272219629]
Test Case:  97 | Input/Output: [[61.2829336049017 34] 95.2829336049017]
Test Case:  98 | Input/Output: [[77.89994754857244 13] 90.89994754857244]
Test Case:  99 | Input/Output: [[-58.027323041423706 71] 12.972676958576294]
Test Case: 100 | Input/Output: [[-41.41262615724639 -83] -124.4126261572464]
Test Case: 101 | Input/Output: [[88.3548583783697 87] 175.3548583783697]
Test Case: 102 | Input/Output: [[-19.818568901139756 -28] -47.818568901139756]
Test Case: 103 | Input/Output: [[-39.460300757158336 -93] -132.46030075715834]
Test Case: 104 | Input/Output: [[16.614724839368165 -13] 3.614724839368165]
Test Case: 105 | Input/Output: [[78.47862531441271 -22] 56.47862531441271]
Test Case: 106 | Input/Output: [[-32.8416518762707 51] 18.158348123729297]
Test Case: 107 | Input/Output: [[36.27374606455328 -16] 20.27374606455328]
Test Case: 108 | Input/Output: [[-9.01006766111152 -74] -83.01006766111152]
Test Case: 109 | Input/Output: [[-28.241467861253497 -12] -40.2414678612535]
Test Case: 110 | Input/Output: [[64.58373983461655 4] 68.58373983461655]
Test Case: 111 | Input/Output: [[4.971483831084896 56] 60.971483831084896]
Test Case: 112 | Input/Output: [[-80.76292986502145 -83] -163.76292986502145]
Test Case: 113 | Input/Output: [[-27.100748570944006 3] -24.100748570944006]
Test Case: 114 | Input/Output: [[-66.67615684286037 -17] -83.67615684286037]
Test Case: 115 | Input/Output: [[94.89669487005509 76] 170.8966948700551]
Test Case: 116 | Input/Output: [[27.16255024092237 -33] -5.837449759077629]
Test Case: 117 | Input/Output: [[-29.13552604342202 22] -7.1355260434220185]
Test Case: 118 | Input/Output: [[76.08641549347595 48] 124.08641549347595]
Test Case: 119 | Input/Output: [[95.5352023321791 79] 174.5352023321791]
Test Case: 120 | Input/Output: [[74.70832312486934 100] 174.70832312486934]
Test Case: 121 | Input/Output: [[-46.861849794305186 42] -4.861849794305186]
Test Case: 122 | Input/Output: [[-72.24813181621421 45] -27.24813181621421]
Test Case: 123 | Input/Output: [[-57.98201604821145 61] 3.017983951788551]
Test Case: 124 | Input/Output: [[-64.93914661547029 -70] -134.9391466154703]
Test Case: 125 | Input/Output: [[-64.99666123797539 -58] -122.99666123797539]
Test Case: 126 | Input/Output: [[98.96019819316905 26] 124.96019819316905]
Test Case: 127 | Input/Output: [[-75.57686685117957 -82] -157.57686685117957]
Test Case: 128 | Input/Output: [[22.648884159528663 -24] -1.351115840471337]
Test Case: 129 | Input/Output: [[-68.96291989314102 -97] -165.96291989314102]
Test Case: 130 | Input/Output: [[-11.701703957709128 20] 8.298296042290872]
Test Case: 131 | Input/Output: [[44.55306428379566 37] 81.55306428379566]
Test Case: 132 | Input/Output: [[1.5179513070160198 56] 57.51795130701602]
Test Case: 133 | Input/Output: [[85.04429382961845 -63] 22.044293829618454]
Test Case: 134 | Input/Output: [[-48.051927277558825 -61] -109.05192727755883]
Test Case: 135 | Input/Output: [[23.752037032355673 -54] -30.247962967644327]
Test Case: 136 | Input/Output: [[1.2616448341412223 44] 45.26164483414122]
Test Case: 137 | Input/Output: [[6.599975378566157 -85] -78.40002462143384]
Test Case: 138 | Input/Output: [[-49.67912935625567 14] -35.67912935625567]
Test Case: 139 | Input/Output: [[-40.94094644737911 -13] -53.94094644737911]
Test Case: 140 | Input/Output: [[0.7143513684664242 29] 29.714351368466424]
Test Case: 141 | Input/Output: [[-71.992370390075 19] -52.992370390074996]
Test Case: 142 | Input/Output: [[-92.87802346354258 75] -17.878023463542576]
Test Case: 143 | Input/Output: [[-83.79061365113753 -75] -158.79061365113753]
Test Case: 144 | Input/Output: [[5.564458303665916 -57] -51.435541696334084]
Test Case: 145 | Input/Output: [[69.07715555975713 -74] -4.922844440242869]
Test Case: 146 | Input/Output: [[81.85947157206974 -67] 14.859471572069737]
Test Case: 147 | Input/Output: [[41.08193212248676 34] 75.08193212248676]
Test Case: 148 | Input/Output: [[44.232029888548055 60] 104.23202988854806]
Test Case: 149 | Input/Output: [[84.87454330802711 96] 180.8745433080271]
Test Case: 150 | Input/Output: [[-18.659598560255716 89] 70.34040143974428]
Test Case: 151 | Input/Output: [[97.10142242124073 -28] 69.10142242124073]
Test Case: 152 | Input/Output: [[38.13562934068926 68] 106.13562934068926]
Test Case: 153 | Input/Output: [[-72.57982172140862 -41] -113.57982172140862]
Test Case: 154 | Input/Output: [[-42.35300049157749 44] 1.6469995084225104]
Test Case: 155 | Input/Output: [[25.12746382119235 11] 36.12746382119235]
Test Case: 156 | Input/Output: [[-2.674094179670462 -77] -79.67409417967046]
Test Case: 157 | Input/Output: [[62.89147898278159 25] 87.89147898278159]
Test Case: 158 | Input/Output: [[3.6602307040458584 66] 69.66023070404586]
Test Case: 159 | Input/Output: [[-46.71726259808702 46] -0.717262598087018]
Test Case: 160 | Input/Output: [[18.591742943482913 26] 44.59174294348291]
Test Case: 161 | Input/Output: [[-36.197662754235196 -68] -104.1976627542352]
Test Case: 162 | Input/Output: [[32.54256311678435 -20] 12.54256311678435]
Test Case: 163 | Input/Output: [[5.860387577809178 -26] -20.139612422190822]
Test Case: 164 | Input/Output: [[95.58072225648218 -15] 80.58072225648218]
Test Case: 165 | Input/Output: [[-76.7905181652273 -21] -97.7905181652273]
Test Case: 166 | Input/Output: [[42.49930883101325 24] 66.49930883101325]
Test Case: 167 | Input/Output: [[7.17036748958688 -18] -10.82963251041312]
Test Case: 168 | Input/Output: [[-22.71195938057066 -93] -115.71195938057066]
Test Case: 169 | Input/Output: [[-40.824180191506244 20] -20.824180191506244]
Test Case: 170 | Input/Output: [[1.2397795447816975 -93] -91.7602204552183]
Test Case: 171 | Input/Output: [[61.54903351992749 29] 90.54903351992749]
Test Case: 172 | Input/Output: [[-88.31538300008526 -11] -99.31538300008526]
Test Case: 173 | Input/Output: [[65.94509466625718 95] 160.94509466625718]
Test Case: 174 | Input/Output: [[-18.52854282246497 -25] -43.52854282246497]
Test Case: 175 | Input/Output: [[-15.626865688381514 -11] -26.626865688381514]
Test Case: 176 | Input/Output: [[-46.837255257410426 65] 18.162744742589574]
Test Case: 177 | Input/Output: [[-61.18192740380528 -71] -132.18192740380528]
Test Case: 178 | Input/Output: [[66.11885266032118 -39] 27.11885266032118]
Test Case: 179 | Input/Output: [[-5.839055472004716 -75] -80.83905547200472]
Test Case: 180 | Input/Output: [[19.99523737347073 14] 33.99523737347073]
Test Case: 181 | Input/Output: [[-57.47263711476842 -70] -127.47263711476842]
Test Case: 182 | Input/Output: [[-51.20702469311593 -56] -107.20702469311593]
Test Case: 183 | Input/Output: [[59.42167913657403 -80] -20.578320863425972]
Test Case: 184 | Input/Output: [[-10.620189451243988 9] -1.6201894512439878]
Test Case: 185 | Input/Output: [[86.74004185554358 23] 109.74004185554358]
Test Case: 186 | Input/Output: [[-55.86387367739438 55] -0.8638736773943805]
Test Case: 187 | Input/Output: [[75.05381516628003 -59] 16.05381516628003]
Test Case: 188 | Input/Output: [[19.418854423792226 -66] -46.581145576207774]
Test Case: 189 | Input/Output: [[-8.007597263250204 -30] -38.007597263250204]
Test Case: 190 | Input/Output: [[-93.27704172789848 -53] -146.27704172789848]
Test Case: 191 | Input/Output: [[31.090414577500127 12] 43.09041457750013]
Test Case: 192 | Input/Output: [[71.55318439237143 -49] 22.553184392371435]
Test Case: 193 | Input/Output: [[64.07072793203037 -79] -14.929272067969634]
Test Case: 194 | Input/Output: [[96.78925772139195 -14] 82.78925772139195]
Test Case: 195 | Input/Output: [[-95.02177652513906 54] -41.02177652513906]
Test Case: 196 | Input/Output: [[43.47994605017982 5] 48.47994605017982]
Test Case: 197 | Input/Output: [[51.47233933942712 75] 126.47233933942712]
Test Case: 198 | Input/Output: [[65.4698035446896 -62] 3.469803544689597]
Test Case: 199 | Input/Output: [[-59.38025628252215 -37] -96.38025628252214]
Test Case: 200 | Input/Output: [[-25.85911980104308 -57] -82.85911980104308]
Test Case: 201 | Input/Output: [[-55.06288662437051 -12] -67.06288662437052]
Test Case: 202 | Input/Output: [[82.3547753947793 -90] -7.6452246052207045]
Test Case: 203 | Input/Output: [[-1.645318964436143 38] 36.35468103556386]
Test Case: 204 | Input/Output: [[-36.1252901739062 -66] -102.1252901739062]
Test Case: 205 | Input/Output: [[-75.99837144146832 87] 11.001628558531678]
Test Case: 206 | Input/Output: [[-40.369533785657154 81] 40.630466214342846]
Test Case: 207 | Input/Output: [[60.83491749661144 -42] 18.83491749661144]
Test Case: 208 | Input/Output: [[15.547708683961247 -43] -27.452291316038753]
Test Case: 209 | Input/Output: [[-11.012369079274407 91] 79.98763092072559]
Test Case: 210 | Input/Output: [[62.38758315633956 -64] -1.6124168436604407]
Test Case: 211 | Input/Output: [[-50.285044363526495 89] 38.714955636473505]
Test Case: 212 | Input/Output: [[83.38141487838368 -86] -2.61858512161632]
Test Case: 213 | Input/Output: [[-46.66871370909951 35] -11.668713709099507]
Test Case: 214 | Input/Output: [[-70.13419802879206 -31] -101.13419802879206]
Test Case: 215 | Input/Output: [[-73.06562783214923 39] -34.06562783214923]
Test Case: 216 | Input/Output: [[15.260865947619706 56] 71.2608659476197]
Test Case: 217 | Input/Output: [[4.6261382250158505 99] 103.62613822501585]
Test Case: 218 | Input/Output: [[99.75786906045732 73] 172.75786906045732]
Test Case: 219 | Input/Output: [[65.91626046164941 -72] -6.083739538350585]
Test Case: 220 | Input/Output: [[-65.15658002775118 74] 8.843419972248824]
Test Case: 221 | Input/Output: [[78.62364340388197 99] 177.62364340388197]
Test Case: 222 | Input/Output: [[-61.38152667759069 43] -18.381526677590692]
Test Case: 223 | Input/Output: [[-78.87689564905271 -31] -109.87689564905271]
Test Case: 224 | Input/Output: [[45.8420025764992 -34] 11.842002576499198]
Test Case: 225 | Input/Output: [[-6.655769167452547 -47] -53.65576916745255]
Test Case: 226 | Input/Output: [[7.343198308586835 81] 88.34319830858684]
Test Case: 227 | Input/Output: [[-75.8847828816181 17] -58.884782881618094]
Test Case: 228 | Input/Output: [[-68.48406499476232 -66] -134.48406499476232]
Test Case: 229 | Input/Output: [[-23.317213183305626 5] -18.317213183305626]
Test Case: 230 | Input/Output: [[41.93562117522151 14] 55.93562117522151]
Test Case: 231 | Input/Output: [[-46.42109264340233 67] 20.578907356597668]
Test Case: 232 | Input/Output: [[-86.9220254186138 -76] -162.9220254186138]
Test Case: 233 | Input/Output: [[-63.63464236583907 -3] -66.63464236583907]
Test Case: 234 | Input/Output: [[94.45596847983865 25] 119.45596847983865]
Test Case: 235 | Input/Output: [[-90.65040020434421 28] -62.65040020434421]
Test Case: 236 | Input/Output: [[80.30420995035522 -57] 23.304209950355215]
Test Case: 237 | Input/Output: [[97.02663863672251 -2] 95.02663863672251]
Test Case: 238 | Input/Output: [[43.474165208865344 65] 108.47416520886534]
Test Case: 239 | Input/Output: [[46.30096719252984 22] 68.30096719252984]
Test Case: 240 | Input/Output: [[-24.716567077846435 13] -11.716567077846435]
Test Case: 241 | Input/Output: [[-29.18718392525379 -12] -41.18718392525379]
Test Case: 242 | Input/Output: [[-88.9896436197378 70] -18.989643619737805]
Test Case: 243 | Input/Output: [[30.11746670034205 -24] 6.1174667003420495]
Test Case: 244 | Input/Output: [[-9.457253144061454 -93] -102.45725314406145]
Test Case: 245 | Input/Output: [[-55.01044758237774 85] 29.989552417622257]
Test Case: 246 | Input/Output: [[54.037613791704956 -56] -1.9623862082950438]
Test Case: 247 | Input/Output: [[96.24097454277049 91] 187.2409745427705]
Test Case: 248 | Input/Output: [[26.573432151315885 60] 86.57343215131588]
Test Case: 249 | Input/Output: [[0.2137597014451984 11] 11.213759701445198]
Test Case: 250 | Input/Output: [[82.72270969374665 -12] 70.72270969374665]
Test Case: 251 | Input/Output: [[-87.04575326385782 30] -57.04575326385782]
Test Case: 252 | Input/Output: [[66.44680512829973 -58] 8.44680512829973]
Test Case: 253 | Input/Output: [[-43.37161789844717 7] -36.37161789844717]
Test Case: 254 | Input/Output: [[-51.86571132557918 -45] -96.86571132557918]
Test Case: 255 | Input/Output: [[38.396684621074655 -20] 18.396684621074655]
Test Case: 256 | Input/Output: [[97.71489674277396 98] 195.71489674277396]
Test Case: 257 | Input/Output: [[-10.978468875481767 47] 36.02153112451823]
Test Case: 258 | Input/Output: [[-65.52703764907955 -50] -115.52703764907955]
Test Case: 259 | Input/Output: [[95.00935276830859 -48] 47.00935276830859]
Test Case: 260 | Input/Output: [[63.146093163621 62] 125.146093163621]
Test Case: 261 | Input/Output: [[94.40745685184092 -69] 25.40745685184092]
Test Case: 262 | Input/Output: [[-70.70125816960015 61] -9.701258169600152]
Test Case: 263 | Input/Output: [[-18.400403311614383 -96] -114.40040331161438]
Test Case: 264 | Input/Output: [[-72.46946406073418 84] 11.530535939265818]
Test Case: 265 | Input/Output: [[87.63953111173714 -12] 75.63953111173714]
Test Case: 266 | Input/Output: [[43.18053385799888 -84] -40.81946614200112]
Test Case: 267 | Input/Output: [[-92.22917774676658 1] -91.22917774676658]
Test Case: 268 | Input/Output: [[6.071770914833991 27] 33.07177091483399]
Test Case: 269 | Input/Output: [[-30.525227167751567 46] 15.474772832248433]
Test Case: 270 | Input/Output: [[-4.46129906114669 -100] -104.46129906114669]
Test Case: 271 | Input/Output: [[-3.221975805571148 96] 92.77802419442885]
Test Case: 272 | Input/Output: [[-82.43623058967904 -42] -124.43623058967904]
Test Case: 273 | Input/Output: [[35.29510957690917 -83] -47.70489042309083]
Test Case: 274 | Input/Output: [[-62.31970830786855 68] 5.680291692131448]
Test Case: 275 | Input/Output: [[36.56089138694708 -27] 9.560891386947077]
Test Case: 276 | Input/Output: [[52.83282895558625 43] 95.83282895558625]
Test Case: 277 | Input/Output: [[47.87841714094242 -10] 37.87841714094242]
Test Case: 278 | Input/Output: [[-38.71949979727296 26] -12.71949979727296]
Test Case: 279 | Input/Output: [[43.35226186482197 -20] 23.35226186482197]
Test Case: 280 | Input/Output: [[-57.47913880291298 19] -38.47913880291298]
Test Case: 281 | Input/Output: [[4.388305369780497 -10] -5.611694630219503]
Test Case: 282 | Input/Output: [[68.75120100376165 -40] 28.75120100376165]
Test Case: 283 | Input/Output: [[-79.05030076225283 -76] -155.05030076225285]
Test Case: 284 | Input/Output: [[43.601653014037936 -81] -37.398346985962064]
Test Case: 285 | Input/Output: [[80.2225308353805 88] 168.2225308353805]
Test Case: 286 | Input/Output: [[18.74189586469845 21] 39.74189586469845]
Test Case: 287 | Input/Output: [[26.982108232574518 84] 110.98210823257452]
Test Case: 288 | Input/Output: [[16.601119535269262 -70] -53.39888046473074]
Test Case: 289 | Input/Output: [[-78.139948224021 20] -58.139948224021]
Test Case: 290 | Input/Output: [[86.23487170170964 -38] 48.234871701709636]
Test Case: 291 | Input/Output: [[-38.37230527088904 -87] -125.37230527088904]
Test Case: 292 | Input/Output: [[30.330246535670767 -2] 28.330246535670767]
Test Case: 293 | Input/Output: [[-68.59950962067924 83] 14.400490379320757]
Test Case: 294 | Input/Output: [[39.50976225679341 -71] -31.490237743206592]
Test Case: 295 | Input/Output: [[65.85814805706613 32] 97.85814805706613]
Test Case: 296 | Input/Output: [[-59.53346784553466 -20] -79.53346784553466]
Test Case: 297 | Input/Output: [[33.601279412444796 -91] -57.398720587555204]
Test Case: 298 | Input/Output: [[57.45061421450387 72] 129.45061421450387]
Test Case: 299 | Input/Output: [[-67.13715256065598 -8] -75.13715256065598]
Test Case: 300 | Input/Output: [[-32.39326773207523 90] 57.60673226792477]
Test Case: 301 | Input/Output: [[-18.78151803401542 -27] -45.78151803401542]
Test Case: 302 | Input/Output: [[-33.52728739540363 90] 56.47271260459637]
Test Case: 303 | Input/Output: [[59.44510848935644 -100] -40.55489151064356]
Test Case: 304 | Input/Output: [[-29.624015371297247 -60] -89.62401537129725]
Test Case: 305 | Input/Output: [[-96.25194371687293 68] -28.25194371687293]
Test Case: 306 | Input/Output: [[18.385330486747748 5] 23.385330486747748]
Test Case: 307 | Input/Output: [[90.69757874395839 82] 172.6975787439584]
Test Case: 308 | Input/Output: [[66.8927984726244 -82] -15.107201527375594]
Test Case: 309 | Input/Output: [[-97.5729777503153 -61] -158.57297775031532]
Test Case: 310 | Input/Output: [[6.5813744742794 88] 94.5813744742794]
Test Case: 311 | Input/Output: [[22.125928460390327 69] 91.12592846039033]
Test Case: 312 | Input/Output: [[-99.7135194145625 -93] -192.71351941456248]
Test Case: 313 | Input/Output: [[29.117176181576866 95] 124.11717618157687]
Test Case: 314 | Input/Output: [[-37.663172844787084 79] 41.336827155212916]
Test Case: 315 | Input/Output: [[11.441992494523205 -58] -46.558007505476795]
Test Case: 316 | Input/Output: [[45.057720704892034 51] 96.05772070489203]
Test Case: 317 | Input/Output: [[-10.271443699451368 -62] -72.27144369945137]
Test Case: 318 | Input/Output: [[-74.94697773787505 71] -3.946977737875045]
Test Case: 319 | Input/Output: [[-5.119739029421069 -64] -69.11973902942107]
Test Case: 320 | Input/Output: [[-50.004550362284284 -3] -53.004550362284284]
Test Case: 321 | Input/Output: [[65.11982026895618 -57] 8.119820268956175]
Test Case: 322 | Input/Output: [[87.91930849226063 12] 99.91930849226063]
Test Case: 323 | Input/Output: [[28.285499134407274 -47] -18.714500865592726]
Test Case: 324 | Input/Output: [[81.24081238287073 9] 90.24081238287073]
Test Case: 325 | Input/Output: [[63.0783164716708 6] 69.0783164716708]
Test Case: 326 | Input/Output: [[77.67547087008339 -1] 76.67547087008339]
Test Case: 327 | Input/Output: [[-4.657410460100195 18] 13.342589539899805]
Test Case: 328 | Input/Output: [[15.212006424230566 13] 28.212006424230566]
Test Case: 329 | Input/Output: [[97.11060368162177 81] 178.11060368162177]
Test Case: 330 | Input/Output: [[-68.31871291003662 96] 27.681287089963377]
Test Case: 331 | Input/Output: [[66.47200493807006 2] 68.47200493807006]
Test Case: 332 | Input/Output: [[70.78526651735427 -10] 60.78526651735427]
Test Case: 333 | Input/Output: [[-76.99421064145176 100] 23.005789358548242]
Test Case: 334 | Input/Output: [[-41.296683316064446 -22] -63.296683316064446]
Test Case: 335 | Input/Output: [[-47.629973309509374 -32] -79.62997330950938]
Test Case: 336 | Input/Output: [[73.61203624631204 -12] 61.612036246312044]
Test Case: 337 | Input/Output: [[97.1202966662388 65] 162.1202966662388]
Test Case: 338 | Input/Output: [[77.91011134234034 74] 151.91011134234034]
Test Case: 339 | Input/Output: [[22.915987555046343 -46] -23.084012444953657]
Test Case: 340 | Input/Output: [[-55.04779614298396 7] -48.04779614298396]
Test Case: 341 | Input/Output: [[91.01316193150518 53] 144.01316193150518]
Test Case: 342 | Input/Output: [[-85.16818020309513 -83] -168.16818020309512]
Test Case: 343 | Input/Output: [[-54.029816739094436 57] 2.9701832609055643]
Test Case: 344 | Input/Output: [[-48.14554313919825 9] -39.14554313919825]
Test Case: 345 | Input/Output: [[-29.932526853219883 54] 24.067473146780117]
Test Case: 346 | Input/Output: [[98.96791393799342 4] 102.96791393799342]
Test Case: 347 | Input/Output: [[-28.1937167776468 -59] -87.1937167776468]
Test Case: 348 | Input/Output: [[-96.64275562092651 -97] -193.6427556209265]
Test Case: 349 | Input/Output: [[32.597750069902304 -9] 23.597750069902304]
Test Case: 350 | Input/Output: [[-93.46052229607284 -71] -164.46052229607284]
Test Case: 351 | Input/Output: [[-98.12603378635578 85] -13.126033786355777]
Test Case: 352 | Input/Output: [[-14.951576153058625 -39] -53.951576153058625]
Test Case: 353 | Input/Output: [[-36.932299149265525 89] 52.067700850734475]
Test Case: 354 | Input/Output: [[-96.18401181788971 -42] -138.1840118178897]
Test Case: 355 | Input/Output: [[44.830875077840346 -60] -15.169124922159654]
Test Case: 356 | Input/Output: [[96.4457519431869 -50] 46.445751943186906]
Test Case: 357 | Input/Output: [[3.8498096343587633 58] 61.84980963435876]
Test Case: 358 | Input/Output: [[-65.76030846144326 61] -4.760308461443259]
Test Case: 359 | Input/Output: [[-6.298539747637591 85] 78.70146025236241]
Test Case: 360 | Input/Output: [[-55.0429919242879 -27] -82.04299192428789]
Test Case: 361 | Input/Output: [[-53.51081398337354 100] 46.48918601662646]
Test Case: 362 | Input/Output: [[56.7387658633026 15] 71.7387658633026]
Test Case: 363 | Input/Output: [[-60.64154794253438 -78] -138.64154794253437]
Test Case: 364 | Input/Output: [[-17.319052177020254 -58] -75.31905217702025]
Test Case: 365 | Input/Output: [[-15.873370585305821 27] 11.126629414694179]
Test Case: 366 | Input/Output: [[-98.05291945182124 88] -10.05291945182124]
Test Case: 367 | Input/Output: [[-0.3034418148847351 78] 77.69655818511526]
Test Case: 368 | Input/Output: [[64.16498394540986 82] 146.16498394540986]
Test Case: 369 | Input/Output: [[-17.668688727416466 81] 63.331311272583534]
Test Case: 370 | Input/Output: [[-39.82567571197559 -55] -94.82567571197559]
Test Case: 371 | Input/Output: [[98.16745228304376 12] 110.16745228304376]
Test Case: 372 | Input/Output: [[11.496261320608653 7] 18.496261320608653]
Test Case: 373 | Input/Output: [[-8.346405516644666 6] -2.3464055166446656]
Test Case: 374 | Input/Output: [[83.06413723031298 -44] 39.06413723031298]
Test Case: 375 | Input/Output: [[-39.75805261878698 -49] -88.75805261878698]
Test Case: 376 | Input/Output: [[-62.33991227516162 -44] -106.33991227516162]
Test Case: 377 | Input/Output: [[37.61519984678759 50] 87.61519984678759]
Test Case: 378 | Input/Output: [[43.87394117582315 -83] -39.12605882417685]
Test Case: 379 | Input/Output: [[-26.886213226884962 47] 20.113786773115038]
Test Case: 380 | Input/Output: [[-13.093015012893133 -23] -36.09301501289313]
Test Case: 381 | Input/Output: [[-55.86084063550205 -57] -112.86084063550206]
Test Case: 382 | Input/Output: [[95.56148999924594 -100] -4.438510000754064]
Test Case: 383 | Input/Output: [[-68.45359123954857 -46] -114.45359123954857]
Test Case: 384 | Input/Output: [[69.23413960576875 77] 146.23413960576875]
Test Case: 385 | Input/Output: [[-70.5129140173577 83] 12.487085982642299]
Test Case: 386 | Input/Output: [[3.6239262464244177 46] 49.62392624642442]
Test Case: 387 | Input/Output: [[-30.988283910141476 -66] -96.98828391014148]
Test Case: 388 | Input/Output: [[25.757050128431302 37] 62.7570501284313]
Test Case: 389 | Input/Output: [[13.569355043644606 18] 31.569355043644606]
Test Case: 390 | Input/Output: [[88.63741727966692 -47] 41.63741727966692]
Test Case: 391 | Input/Output: [[-83.01661259983248 5] -78.01661259983248]
Test Case: 392 | Input/Output: [[15.058279942876936 -75] -59.941720057123064]
Test Case: 393 | Input/Output: [[-41.38348304333122 -83] -124.38348304333121]
Test Case: 394 | Input/Output: [[-49.98303924017884 3] -46.98303924017884]
Test Case: 395 | Input/Output: [[-37.046488259210264 -97] -134.04648825921026]
Test Case: 396 | Input/Output: [[13.149797060342479 -93] -79.85020293965752]
Test Case: 397 | Input/Output: [[-94.14905594618534 -52] -146.14905594618534]
Test Case: 398 | Input/Output: [[-74.71301152894921 4] -70.71301152894921]
Test Case: 399 | Input/Output: [[80.25522096517639 -2] 78.25522096517639]
Test Case: 400 | Input/Output: [[45.460825843972486 -26] 19.460825843972486]
Test Case: 401 | Input/Output: [[-63.075752727404556 -11] -74.07575272740456]
Test Case: 402 | Input/Output: [[-73.01262753816842 62] -11.012627538168417]
Test Case: 403 | Input/Output: [[99.9247562447108 -72] 27.924756244710807]
Test Case: 404 | Input/Output: [[-54.50715229178304 -41] -95.50715229178304]
Test Case: 405 | Input/Output: [[46.538219401113565 -38] 8.538219401113565]
Test Case: 406 | Input/Output: [[-39.19143071465192 88] 48.80856928534808]
Test Case: 407 | Input/Output: [[-76.90723915877501 -46] -122.90723915877501]
Test Case: 408 | Input/Output: [[54.492208129417634 44] 98.49220812941763]
Test Case: 409 | Input/Output: [[-20.164301242167 -14] -34.164301242167]
Test Case: 410 | Input/Output: [[37.38855140317236 7] 44.38855140317236]
Test Case: 411 | Input/Output: [[-33.68448136843145 -85] -118.68448136843145]
Test Case: 412 | Input/Output: [[42.771904495009494 -95] -52.228095504990506]
Test Case: 413 | Input/Output: [[55.34291232965242 32] 87.34291232965242]
Test Case: 414 | Input/Output: [[97.73646262694857 -65] 32.736462626948565]
Test Case: 415 | Input/Output: [[23.68185441347346 -71] -47.31814558652654]
Test Case: 416 | Input/Output: [[-5.285942553135811 85] 79.71405744686419]
Test Case: 417 | Input/Output: [[-75.21498309921336 -100] -175.21498309921336]
Test Case: 418 | Input/Output: [[13.414226110965032 33] 46.41422611096503]
Test Case: 419 | Input/Output: [[70.30990783885704 23] 93.30990783885704]
Test Case: 420 | Input/Output: [[86.26073630822148 25] 111.26073630822148]
Test Case: 421 | Input/Output: [[-24.07924550804607 70] 45.92075449195393]
Test Case: 422 | Input/Output: [[-75.88007265600345 -25] -100.88007265600345]
Test Case: 423 | Input/Output: [[-86.97948652300353 -7] -93.97948652300353]
Test Case: 424 | Input/Output: [[-94.72308119201156 -1] -95.72308119201156]
Test Case: 425 | Input/Output: [[74.88801547427917 -45] 29.88801547427917]
Test Case: 426 | Input/Output: [[-97.58453745342362 -55] -152.58453745342362]
Test Case: 427 | Input/Output: [[-16.192554261613765 -47] -63.192554261613765]
Test Case: 428 | Input/Output: [[25.231505273141792 1] 26.231505273141792]
Test Case: 429 | Input/Output: [[3.5282201726920164 60] 63.528220172692016]
Test Case: 430 | Input/Output: [[-80.39925160404223 32] -48.399251604042234]
Test Case: 431 | Input/Output: [[13.31080249245538 -81] -67.68919750754462]
Test Case: 432 | Input/Output: [[-10.881899249391978 10] -0.881899249391978]
Test Case: 433 | Input/Output: [[62.68673304468078 -40] 22.68673304468078]
Test Case: 434 | Input/Output: [[85.74737150643216 5] 90.74737150643216]
Test Case: 435 | Input/Output: [[-8.062714141180251 -81] -89.06271414118025]
Test Case: 436 | Input/Output: [[-73.34794933504556 -26] -99.34794933504556]
Test Case: 437 | Input/Output: [[19.056335039380315 -75] -55.943664960619685]
Test Case: 438 | Input/Output: [[-38.707487114283865 -34] -72.70748711428386]
Test Case: 439 | Input/Output: [[28.601078728405753 -29] -0.3989212715942472]
Test Case: 440 | Input/Output: [[-55.2691557494162 -97] -152.2691557494162]
Test Case: 441 | Input/Output: [[-57.248585461229304 -10] -67.24858546122931]
Test Case: 442 | Input/Output: [[-67.27031344520859 -33] -100.27031344520859]
Test Case: 443 | Input/Output: [[-16.539839125641493 34] 17.460160874358507]
Test Case: 444 | Input/Output: [[48.166051505691655 -63] -14.833948494308345]
Test Case: 445 | Input/Output: [[-31.246374122458903 55] 23.753625877541097]
Test Case: 446 | Input/Output: [[-16.414587668767155 -45] -61.414587668767155]
Test Case: 447 | Input/Output: [[-4.146094863780462 84] 79.85390513621954]
Test Case: 448 | Input/Output: [[98.31667176183498 66] 164.31667176183498]
Test Case: 449 | Input/Output: [[84.02375848952201 -99] -14.97624151047799]
Test Case: 450 | Input/Output: [[-77.89820498780055 -69] -146.89820498780057]
Test Case: 451 | Input/Output: [[-67.6009238587262 -14] -81.6009238587262]
Test Case: 452 | Input/Output: [[-37.646942999418975 -6] -43.646942999418975]
Test Case: 453 | Input/Output: [[-91.01255637502084 -24] -115.01255637502084]
Test Case: 454 | Input/Output: [[-35.421526589716734 86] 50.578473410283266]
Test Case: 455 | Input/Output: [[-4.78647577977263 74] 69.21352422022737]
Test Case: 456 | Input/Output: [[49.46418372460366 -33] 16.464183724603657]
Test Case: 457 | Input/Output: [[-46.84683123178086 99] 52.15316876821914]
Test Case: 458 | Input/Output: [[-45.10537814117577 64] 18.89462185882423]
Test Case: 459 | Input/Output: [[66.95784651796103 49] 115.95784651796103]
Test Case: 460 | Input/Output: [[16.48209098856799 34] 50.48209098856799]
Test Case: 461 | Input/Output: [[16.523979923457972 34] 50.52397992345797]
Test Case: 462 | Input/Output: [[-83.41133523769626 -2] -85.41133523769626]
Test Case: 463 | Input/Output: [[-68.72331962159346 -82] -150.72331962159348]
Test Case: 464 | Input/Output: [[94.09659013145995 86] 180.09659013145995]
Test Case: 465 | Input/Output: [[-1.3438619286787201 -81] -82.34386192867872]
Test Case: 466 | Input/Output: [[-47.664586123055706 27] -20.664586123055706]
Test Case: 467 | Input/Output: [[-39.91325598650659 -94] -133.91325598650658]
Test Case: 468 | Input/Output: [[43.027413835715436 -57] -13.972586164284564]
Test Case: 469 | Input/Output: [[26.850968664361858 -30] -3.149031335638142]
Test Case: 470 | Input/Output: [[-78.71104440936476 92] 13.28895559063524]
Test Case: 471 | Input/Output: [[70.47619488028454 -57] 13.476194880284538]
Test Case: 472 | Input/Output: [[70.59671514925225 53] 123.59671514925225]
Test Case: 473 | Input/Output: [[67.26130790534276 48] 115.26130790534276]
Test Case: 474 | Input/Output: [[14.755577156556399 -49] -34.2444228434436]
Test Case: 475 | Input/Output: [[-44.718656244875476 -93] -137.7186562448755]
Test Case: 476 | Input/Output: [[-65.48495499160026 14] -51.48495499160026]
Test Case: 477 | Input/Output: [[-23.298143567502464 17] -6.298143567502464]
Test Case: 478 | Input/Output: [[-81.53465343996109 -15] -96.53465343996109]
Test Case: 479 | Input/Output: [[22.00587789353125 81] 103.00587789353125]
Test Case: 480 | Input/Output: [[20.210038993227016 -53] -32.789961006772984]
Test Case: 481 | Input/Output: [[86.0495609312402 15] 101.0495609312402]
Test Case: 482 | Input/Output: [[27.922317748616493 31] 58.92231774861649]
Test Case: 483 | Input/Output: [[57.825111022599685 -90] -32.174888977400315]
Test Case: 484 | Input/Output: [[-65.75611727131127 -19] -84.75611727131127]
Test Case: 485 | Input/Output: [[0.6033076430528723 -97] -96.39669235694713]
Test Case: 486 | Input/Output: [[16.18604498250724 -32] -15.81395501749276]
Test Case: 487 | Input/Output: [[68.92001621356158 22] 90.92001621356158]
Test Case: 488 | Input/Output: [[12.206564184976614 -10] 2.2065641849766138]
Test Case: 489 | Input/Output: [[93.16434171181777 42] 135.16434171181777]
Test Case: 490 | Input/Output: [[-91.26607859482596 -15] -106.26607859482596]
Test Case: 491 | Input/Output: [[-86.41216053377624 3] -83.41216053377624]
Test Case: 492 | Input/Output: [[-55.98618166952958 65] 9.013818330470421]
Test Case: 493 | Input/Output: [[-81.29995468967132 17] -64.29995468967132]
Test Case: 494 | Input/Output: [[40.87508470448205 99] 139.87508470448205]
Test Case: 495 | Input/Output: [[-14.53007555581695 78] 63.46992444418305]
Test Case: 496 | Input/Output: [[93.6763633828113 65] 158.6763633828113]
Test Case: 497 | Input/Output: [[76.23491005728437 14] 90.23491005728437]
Test Case: 498 | Input/Output: [[-16.059381107772097 45] 28.940618892227903]
Test Case: 499 | Input/Output: [[-54.163946099965024 62] 7.836053900034976]
Test Case: 500 | Input/Output: [[91.31707795346765 -54] 37.317077953467646]
Test Case: 501 | Input/Output: [[70.66889328759589 -25] 45.66889328759589]
Test Case: 502 | Input/Output: [[6.352149615652152 -97] -90.64785038434785]
Test Case: 503 | Input/Output: [[-79.10844482742655 -27] -106.10844482742655]
Test Case: 504 | Input/Output: [[-45.30000661897267 30] -15.300006618972667]
Test Case: 505 | Input/Output: [[62.09087969830466 -20] 42.09087969830466]
Test Case: 506 | Input/Output: [[65.74560842703536 -19] 46.745608427035364]
Test Case: 507 | Input/Output: [[-56.86937014026219 100] 43.13062985973781]
Test Case: 508 | Input/Output: [[80.79934933268859 16] 96.79934933268859]
Test Case: 509 | Input/Output: [[80.79232320013386 -49] 31.792323200133865]
Test Case: 510 | Input/Output: [[15.428108669039233 -37] -21.571891330960767]
Test Case: 511 | Input/Output: [[86.44297183231399 62] 148.442971832314]
Test Case: 512 | Input/Output: [[25.640372728269952 -1] 24.640372728269952]
Test Case: 513 | Input/Output: [[-59.82298888864344 -50] -109.82298888864344]
Test Case: 514 | Input/Output: [[-13.880652898004442 -55] -68.88065289800444]
Test Case: 515 | Input/Output: [[71.06068714691423 22] 93.06068714691423]
Test Case: 516 | Input/Output: [[-43.34090058007769 18] -25.340900580077687]
Test Case: 517 | Input/Output: [[-58.527525203561325 -54] -112.52752520356132]
Test Case: 518 | Input/Output: [[89.73971055728245 -83] 6.73971055728245]
Test Case: 519 | Input/Output: [[-91.6094380044044 -26] -117.6094380044044]
Test Case: 520 | Input/Output: [[92.47020222829761 -86] 6.470202228297609]
Test Case: 521 | Input/Output: [[-66.66380758148698 68] 1.336192418513022]
Test Case: 522 | Input/Output: [[26.258260299685475 39] 65.25826029968547]
Test Case: 523 | Input/Output: [[42.382998270537996 -39] 3.382998270537996]
Test Case: 524 | Input/Output: [[11.519519587907851 -85] -73.48048041209215]
Test Case: 525 | Input/Output: [[83.92858548680658 81] 164.92858548680658]
Test Case: 526 | Input/Output: [[48.29231283417022 -70] -21.707687165829782]
Test Case: 527 | Input/Output: [[-19.44831254814781 -53] -72.44831254814781]
Test Case: 528 | Input/Output: [[74.5496096686536 -100] -25.450390331346398]
Test Case: 529 | Input/Output: [[71.62894702369718 -80] -8.37105297630282]
Test Case: 530 | Input/Output: [[-83.71473475160369 93] 9.285265248396314]
Test Case: 531 | Input/Output: [[2.9794584323364006 -75] -72.0205415676636]
Test Case: 532 | Input/Output: [[81.08449194470529 -62] 19.08449194470529]
Test Case: 533 | Input/Output: [[-22.909357947956593 69] 46.09064205204341]
Test Case: 534 | Input/Output: [[3.8498189076871796 51] 54.84981890768718]
Test Case: 535 | Input/Output: [[78.0197154496988 93] 171.0197154496988]
Test Case: 536 | Input/Output: [[-93.27436710982988 27] -66.27436710982988]
Test Case: 537 | Input/Output: [[-40.18643034481646 89] 48.81356965518354]
Test Case: 538 | Input/Output: [[-74.35179582200497 -65] -139.351795822005]
Test Case: 539 | Input/Output: [[33.75706176222292 49] 82.75706176222292]
Test Case: 540 | Input/Output: [[81.33580032280722 35] 116.33580032280722]
Test Case: 541 | Input/Output: [[-93.11292383998442 32] -61.11292383998442]
Test Case: 542 | Input/Output: [[-62.29439978609375 -35] -97.29439978609375]
Test Case: 543 | Input/Output: [[34.622196674356644 -32] 2.622196674356644]
Test Case: 544 | Input/Output: [[-45.62953671846219 96] 50.37046328153781]
Test Case: 545 | Input/Output: [[27.165631447174235 -4] 23.165631447174235]
Test Case: 546 | Input/Output: [[68.62025812373324 -81] -12.379741876266763]
Test Case: 547 | Input/Output: [[24.764642529750944 -78] -53.235357470249056]
Test Case: 548 | Input/Output: [[-86.13390795800741 -77] -163.1339079580074]
Test Case: 549 | Input/Output: [[-5.264742453143484 -72] -77.26474245314348]
Test Case: 550 | Input/Output: [[-60.64374154937686 -97] -157.64374154937687]
Test Case: 551 | Input/Output: [[43.89414801968269 -76] -32.10585198031731]
Test Case: 552 | Input/Output: [[82.16646584082008 10] 92.16646584082008]
Test Case: 553 | Input/Output: [[-75.20527450854071 -20] -95.20527450854071]
Test Case: 554 | Input/Output: [[-80.93799490091777 -47] -127.93799490091777]
Test Case: 555 | Input/Output: [[94.79570211563018 -72] 22.795702115630178]
Test Case: 556 | Input/Output: [[-49.27213030250523 -45] -94.27213030250523]
Test Case: 557 | Input/Output: [[48.45676210352997 -62] -13.543237896470032]
Test Case: 558 | Input/Output: [[-48.327913955928594 -88] -136.32791395592858]
Test Case: 559 | Input/Output: [[-95.63080493624842 -9] -104.63080493624842]
Test Case: 560 | Input/Output: [[-45.149078646476056 -85] -130.14907864647606]
Test Case: 561 | Input/Output: [[17.403406309095132 57] 74.40340630909513]
Test Case: 562 | Input/Output: [[-83.6627465911141 94] 10.3372534088859]
Test Case: 563 | Input/Output: [[-27.28732592512158 81] 53.71267407487842]
Test Case: 564 | Input/Output: [[-57.10765415945724 -59] -116.10765415945724]
Test Case: 565 | Input/Output: [[33.17130916192576 -94] -60.82869083807424]
Test Case: 566 | Input/Output: [[-81.45844755446801 67] -14.458447554468009]
Test Case: 567 | Input/Output: [[45.719248238525864 -56] -10.280751761474136]
Test Case: 568 | Input/Output: [[96.58648944519717 -81] 15.586489445197174]
Test Case: 569 | Input/Output: [[-54.626194432972206 93] 38.373805567027794]
Test Case: 570 | Input/Output: [[-15.14931207380343 -94] -109.14931207380343]
Test Case: 571 | Input/Output: [[-7.049437411369411 -17] -24.04943741136941]
Test Case: 572 | Input/Output: [[-42.432294004489115 -85] -127.43229400448911]
Test Case: 573 | Input/Output: [[-94.11833403153366 -27] -121.11833403153366]
Test Case: 574 | Input/Output: [[-77.04581215398574 62] -15.045812153985736]
Test Case: 575 | Input/Output: [[-89.51555908311806 82] -7.515559083118063]
Test Case: 576 | Input/Output: [[-42.471501080029924 42] -0.47150108002992397]
Test Case: 577 | Input/Output: [[-59.03560529694698 -80] -139.03560529694698]
Test Case: 578 | Input/Output: [[-35.74797456068215 44] 8.252025439317848]
Test Case: 579 | Input/Output: [[91.95541655449816 34] 125.95541655449816]
Test Case: 580 | Input/Output: [[-2.9572013766053544 -20] -22.957201376605354]
Test Case: 581 | Input/Output: [[-17.28547699860843 0] -17.28547699860843]
Test Case: 582 | Input/Output: [[-70.37674153720197 -73] -143.37674153720195]
Test Case: 583 | Input/Output: [[25.879194255737985 -20] 5.8791942557379855]
Test Case: 584 | Input/Output: [[-18.737059623745452 -71] -89.73705962374545]
Test Case: 585 | Input/Output: [[74.97982643463499 -82] -7.020173565365013]
Test Case: 586 | Input/Output: [[-48.322145363821335 24] -24.322145363821335]
Test Case: 587 | Input/Output: [[14.259376018867528 -7] 7.259376018867528]
Test Case: 588 | Input/Output: [[-53.8706855312872 87] 33.1293144687128]
Test Case: 589 | Input/Output: [[-95.482122570605 5] -90.482122570605]
Test Case: 590 | Input/Output: [[-77.91661165956563 10] -67.91661165956563]
Test Case: 591 | Input/Output: [[-39.82008698617252 58] 18.17991301382748]
Test Case: 592 | Input/Output: [[37.765655995458104 30] 67.7656559954581]
Test Case: 593 | Input/Output: [[-77.13342355494888 29] -48.13342355494888]
Test Case: 594 | Input/Output: [[-43.39323754033233 7] -36.39323754033233]
Test Case: 595 | Input/Output: [[49.409598695055934 4] 53.409598695055934]
Test Case: 596 | Input/Output: [[97.48016045511878 96] 193.48016045511878]
Test Case: 597 | Input/Output: [[11.023540455289776 72] 83.02354045528978]
Test Case: 598 | Input/Output: [[62.71001920589504 -16] 46.71001920589504]
Test Case: 599 | Input/Output: [[-18.9388452877473 100] 81.0611547122527]
Test Case: 600 | Input/Output: [[60.404933650096524 62] 122.40493365009652]
Test Case: 601 | Input/Output: [[-80.03431784207042 -37] -117.03431784207042]
Test Case: 602 | Input/Output: [[41.970305215603815 37] 78.97030521560382]
Test Case: 603 | Input/Output: [[-46.19227555662708 -96] -142.19227555662707]
Test Case: 604 | Input/Output: [[36.76541894185971 28] 64.7654189418597]
Test Case: 605 | Input/Output: [[33.92544432314247 89] 122.92544432314247]
Test Case: 606 | Input/Output: [[26.771863679736413 -27] -0.22813632026358732]
Test Case: 607 | Input/Output: [[-86.4121902438373 -85] -171.4121902438373]
Test Case: 608 | Input/Output: [[96.60766325628765 65] 161.60766325628765]
Test Case: 609 | Input/Output: [[-65.59402592083907 -98] -163.59402592083907]
Test Case: 610 | Input/Output: [[69.1604938316558 57] 126.1604938316558]
Test Case: 611 | Input/Output: [[40.355250554505915 -4] 36.355250554505915]
Test Case: 612 | Input/Output: [[-53.04082024245189 24] -29.040820242451893]
Test Case: 613 | Input/Output: [[11.639180084953637 61] 72.63918008495364]
Test Case: 614 | Input/Output: [[32.98719416526663 -21] 11.98719416526663]
Test Case: 615 | Input/Output: [[48.125903958930934 19] 67.12590395893093]
Test Case: 616 | Input/Output: [[96.82376817821773 -38] 58.82376817821773]
Test Case: 617 | Input/Output: [[57.210361959517286 56] 113.21036195951729]
Test Case: 618 | Input/Output: [[-56.97003314153726 -88] -144.97003314153727]
Test Case: 619 | Input/Output: [[-68.90563865749522 -39] -107.90563865749522]
Test Case: 620 | Input/Output: [[50.52914158275243 -86] -35.47085841724757]
Test Case: 621 | Input/Output: [[-53.8940410680234 -60] -113.8940410680234]
Test Case: 622 | Input/Output: [[-53.928589691970366 17] -36.928589691970366]
Test Case: 623 | Input/Output: [[-88.94866190257686 -3] -91.94866190257686]
Test Case: 624 | Input/Output: [[-76.97493271733845 22] -54.97493271733845]
Test Case: 625 | Input/Output: [[-58.089095401031756 -67] -125.08909540103176]
Test Case: 626 | Input/Output: [[-80.1395072764838 92] 11.860492723516202]
Test Case: 627 | Input/Output: [[50.01190879652384 -26] 24.01190879652384]
Test Case: 628 | Input/Output: [[68.51064127339012 -4] 64.51064127339012]
Test Case: 629 | Input/Output: [[62.98013416534246 -100] -37.01986583465754]
Test Case: 630 | Input/Output: [[94.49264122510664 2] 96.49264122510664]
Test Case: 631 | Input/Output: [[1.5567795777824216 -51] -49.44322042221758]
Test Case: 632 | Input/Output: [[61.94380669374732 -10] 51.94380669374732]
Test Case: 633 | Input/Output: [[91.66309965535555 55] 146.66309965535555]
Test Case: 634 | Input/Output: [[-82.51295290146963 -43] -125.51295290146963]
Test Case: 635 | Input/Output: [[-24.14472517941077 -83] -107.14472517941077]
Test Case: 636 | Input/Output: [[47.758973601951766 -61] -13.241026398048234]
Test Case: 637 | Input/Output: [[-57.616304539176035 -99] -156.61630453917604]
Test Case: 638 | Input/Output: [[-57.19802910074374 -23] -80.19802910074374]
Test Case: 639 | Input/Output: [[28.94128239296367 -70] -41.05871760703633]
Test Case: 640 | Input/Output: [[25.001855959822763 76] 101.00185595982276]
Test Case: 641 | Input/Output: [[75.95059653825194 70] 145.95059653825194]
Test Case: 642 | Input/Output: [[64.39798405206702 -24] 40.39798405206702]
Test Case: 643 | Input/Output: [[-40.237536945010575 -89] -129.23753694501056]
Test Case: 644 | Input/Output: [[64.81669839564745 27] 91.81669839564745]
Test Case: 645 | Input/Output: [[-78.53978742376205 70] -8.53978742376205]
Test Case: 646 | Input/Output: [[-90.63399948380895 -5] -95.63399948380895]
Test Case: 647 | Input/Output: [[-82.55058148162476 56] -26.55058148162476]
Test Case: 648 | Input/Output: [[90.50376578810082 59] 149.50376578810082]
Test Case: 649 | Input/Output: [[84.43099444744334 -34] 50.43099444744334]
Test Case: 650 | Input/Output: [[60.0286496958293 -44] 16.0286496958293]
Test Case: 651 | Input/Output: [[69.90373611362608 69] 138.90373611362608]
Test Case: 652 | Input/Output: [[-42.22721092172041 -67] -109.22721092172041]
Test Case: 653 | Input/Output: [[-48.65280473977418 -83] -131.65280473977418]
Test Case: 654 | Input/Output: [[-7.864381631881059 40] 32.13561836811894]
Test Case: 655 | Input/Output: [[99.08679281635656 -85] 14.086792816356564]
Test Case: 656 | Input/Output: [[-24.005701501483998 -99] -123.005701501484]
Test Case: 657 | Input/Output: [[-85.4494299170672 -43] -128.44942991706722]
Test Case: 658 | Input/Output: [[-85.72336252993308 57] -28.723362529933084]
Test Case: 659 | Input/Output: [[-42.77205453537605 -74] -116.77205453537604]
Test Case: 660 | Input/Output: [[29.470063555899003 -33] -3.529936444100997]
Test Case: 661 | Input/Output: [[-13.971955514663989 -81] -94.97195551466399]
Test Case: 662 | Input/Output: [[26.48190141890862 -82] -55.51809858109138]
Test Case: 663 | Input/Output: [[-14.067908686205826 49] 34.932091313794174]
Test Case: 664 | Input/Output: [[62.50216675211752 -97] -34.49783324788248]
Test Case: 665 | Input/Output: [[-23.00593518420051 3] -20.00593518420051]
Test Case: 666 | Input/Output: [[-36.09527698408217 -55] -91.09527698408218]
Test Case: 667 | Input/Output: [[-22.984961947239782 -87] -109.98496194723978]
Test Case: 668 | Input/Output: [[-49.48501611067064 22] -27.485016110670642]
Test Case: 669 | Input/Output: [[28.951962213167093 40] 68.95196221316709]
Test Case: 670 | Input/Output: [[72.1311557704393 36] 108.1311557704393]
Test Case: 671 | Input/Output: [[39.13921009858191 51] 90.13921009858191]
Test Case: 672 | Input/Output: [[55.22904484629268 19] 74.22904484629268]
Test Case: 673 | Input/Output: [[-21.154620154043727 -91] -112.15462015404373]
Test Case: 674 | Input/Output: [[-83.82822931876197 16] -67.82822931876197]
Test Case: 675 | Input/Output: [[-67.77417677303526 9] -58.774176773035265]
Test Case: 676 | Input/Output: [[-44.686613982921045 -96] -140.68661398292105]
Test Case: 677 | Input/Output: [[48.403749886865256 47] 95.40374988686526]
Test Case: 678 | Input/Output: [[-3.0039156916809304 10] 6.99608430831907]
Test Case: 679 | Input/Output: [[57.08336103220506 35] 92.08336103220506]
Test Case: 680 | Input/Output: [[-36.04913124518485 -78] -114.04913124518485]
Test Case: 681 | Input/Output: [[32.89672707712586 25] 57.89672707712586]
Test Case: 682 | Input/Output: [[99.2985542520658 6] 105.2985542520658]
Test Case: 683 | Input/Output: [[26.364389836658546 38] 64.36438983665855]
Test Case: 684 | Input/Output: [[-41.951158422427156 -19] -60.951158422427156]
Test Case: 685 | Input/Output: [[-83.02409475905623 -88] -171.02409475905623]
Test Case: 686 | Input/Output: [[33.79527707195061 28] 61.79527707195061]
Test Case: 687 | Input/Output: [[-77.5680139205444 26] -51.5680139205444]
Test Case: 688 | Input/Output: [[33.08203745722227 -1] 32.08203745722227]
Test Case: 689 | Input/Output: [[-74.5126954223128 -32] -106.5126954223128]
Test Case: 690 | Input/Output: [[9.949301147182894 -47] -37.050698852817106]
Test Case: 691 | Input/Output: [[-19.836489708514037 16] -3.836489708514037]
Test Case: 692 | Input/Output: [[-7.20376513225591 81] 73.79623486774409]
Test Case: 693 | Input/Output: [[-41.46811072446555 27] -14.468110724465546]
Test Case: 694 | Input/Output: [[36.421273134807535 31] 67.42127313480754]
Test Case: 695 | Input/Output: [[-98.89106114111357 69] -29.891061141113568]
Test Case: 696 | Input/Output: [[39.6182018144637 -75] -35.3817981855363]
Test Case: 697 | Input/Output: [[-74.02887880173874 -73] -147.02887880173876]
Test Case: 698 | Input/Output: [[-82.96094052673993 1] -81.96094052673993]
Test Case: 699 | Input/Output: [[5.178883975792004 65] 70.178883975792]
Test Case: 700 | Input/Output: [[-7.065504537046593 35] 27.934495462953407]
Test Case: 701 | Input/Output: [[-17.95285990058413 5] -12.95285990058413]
Test Case: 702 | Input/Output: [[40.22541558498048 -93] -52.77458441501952]
Test Case: 703 | Input/Output: [[84.21071988886752 0] 84.21071988886752]
Test Case: 704 | Input/Output: [[26.431230327943283 80] 106.43123032794328]
Test Case: 705 | Input/Output: [[76.1171297010865 0] 76.1171297010865]
Test Case: 706 | Input/Output: [[23.732423523221357 4] 27.732423523221357]
Test Case: 707 | Input/Output: [[-93.80026662720446 -47] -140.80026662720445]
Test Case: 708 | Input/Output: [[1.122100056838434 89] 90.12210005683843]
Test Case: 709 | Input/Output: [[-70.43839897142931 74] 3.561601028570692]
Test Case: 710 | Input/Output: [[48.332427577954206 24] 72.3324275779542]
Test Case: 711 | Input/Output: [[-90.52991583267197 9] -81.52991583267197]
Test Case: 712 | Input/Output: [[-32.99466902838917 28] -4.994669028389168]
Test Case: 713 | Input/Output: [[-14.898916755070573 14] -0.898916755070573]
Test Case: 714 | Input/Output: [[-29.318363440187653 -11] -40.31836344018765]
Test Case: 715 | Input/Output: [[80.10477669482106 68] 148.10477669482106]
Test Case: 716 | Input/Output: [[-25.644398863119108 8] -17.644398863119108]
Test Case: 717 | Input/Output: [[-71.37877623469976 -65] -136.37877623469976]
Test Case: 718 | Input/Output: [[14.713209881976795 -82] -67.2867901180232]
Test Case: 719 | Input/Output: [[14.136411530652353 34] 48.13641153065235]
Test Case: 720 | Input/Output: [[-44.24218633964168 64] 19.757813660358323]
Test Case: 721 | Input/Output: [[-20.46290262931491 -72] -92.46290262931491]
Test Case: 722 | Input/Output: [[-32.13878061914947 32] -0.13878061914947182]
Test Case: 723 | Input/Output: [[-63.3198330526878 91] 27.680166947312202]
Test Case: 724 | Input/Output: [[-8.78678146688921 -90] -98.78678146688921]
Test Case: 725 | Input/Output: [[59.65489004852262 94] 153.65489004852262]
Test Case: 726 | Input/Output: [[-1.5168849294483948 -45] -46.516884929448395]
Test Case: 727 | Input/Output: [[13.11129978731158 1] 14.11129978731158]
Test Case: 728 | Input/Output: [[15.635783882178274 35] 50.63578388217827]
Test Case: 729 | Input/Output: [[72.69936862817971 -79] -6.3006313718202875]
Test Case: 730 | Input/Output: [[58.63317206386361 -97] -38.36682793613639]
Test Case: 731 | Input/Output: [[-39.71184839673816 85] 45.28815160326184]
Test Case: 732 | Input/Output: [[46.45493303711737 95] 141.45493303711737]
Test Case: 733 | Input/Output: [[38.1331288421749 -5] 33.1331288421749]
Test Case: 734 | Input/Output: [[29.324358281774238 61] 90.32435828177424]
Test Case: 735 | Input/Output: [[8.518337280857736 -52] -43.481662719142264]
Test Case: 736 | Input/Output: [[46.36007868568112 2] 48.36007868568112]
Test Case: 737 | Input/Output: [[33.558452322415974 47] 80.55845232241597]
Test Case: 738 | Input/Output: [[85.8348175906236 -10] 75.8348175906236]
Test Case: 739 | Input/Output: [[96.19357057813903 -11] 85.19357057813903]
Test Case: 740 | Input/Output: [[-64.94099653235654 -7] -71.94099653235654]
Test Case: 741 | Input/Output: [[-7.7281202288911715 10] 2.2718797711088285]
Test Case: 742 | Input/Output: [[-60.582504915905886 -87] -147.58250491590587]
Test Case: 743 | Input/Output: [[19.905526576614434 21] 40.905526576614434]
Test Case: 744 | Input/Output: [[55.910619390822944 -45] 10.910619390822944]
Test Case: 745 | Input/Output: [[-68.61397208904398 -51] -119.61397208904398]
Test Case: 746 | Input/Output: [[-44.270044391076844 -66] -110.27004439107685]
Test Case: 747 | Input/Output: [[-79.40632562144587 -98] -177.4063256214459]
Test Case: 748 | Input/Output: [[26.332011346647306 -12] 14.332011346647306]
Test Case: 749 | Input/Output: [[-7.321204858133797 -8] -15.321204858133797]
Test Case: 750 | Input/Output: [[88.21094313826109 -56] 32.21094313826109]
Test Case: 751 | Input/Output: [[-39.576647685946064 12] -27.576647685946064]
Test Case: 752 | Input/Output: [[-55.54526466260394 78] 22.45473533739606]
Test Case: 753 | Input/Output: [[-53.190037284339994 37] -16.190037284339994]
Test Case: 754 | Input/Output: [[-58.152782587493455 79] 20.847217412506545]
Test Case: 755 | Input/Output: [[67.41193165871476 64] 131.41193165871476]
Test Case: 756 | Input/Output: [[1.1535308351168254 94] 95.15353083511683]
Test Case: 757 | Input/Output: [[-16.042213505628155 94] 77.95778649437185]
Test Case: 758 | Input/Output: [[46.1054799115343 -59] -12.894520088465697]
Test Case: 759 | Input/Output: [[75.55208227857906 -57] 18.552082278579064]
Test Case: 760 | Input/Output: [[38.1534107317444 -65] -26.8465892682556]
Test Case: 761 | Input/Output: [[24.994436669127424 -82] -57.005563330872576]
Test Case: 762 | Input/Output: [[9.544167946180863 54] 63.54416794618086]
Test Case: 763 | Input/Output: [[72.17037423014662 -56] 16.17037423014662]
Test Case: 764 | Input/Output: [[-78.2051423833635 36] -42.205142383363494]
Test Case: 765 | Input/Output: [[-42.5843842045744 57] 14.415615795425602]
Test Case: 766 | Input/Output: [[-86.63786122477934 2] -84.63786122477934]
Test Case: 767 | Input/Output: [[-85.37724640198954 9] -76.37724640198954]
Test Case: 768 | Input/Output: [[90.98951791368097 49] 139.98951791368097]
Test Case: 769 | Input/Output: [[-68.18422188866873 76] 7.815778111331269]
Test Case: 770 | Input/Output: [[79.65415083990203 6] 85.65415083990203]
Test Case: 771 | Input/Output: [[56.98629547231161 -53] 3.9862954723116104]
Test Case: 772 | Input/Output: [[17.423121047715128 -53] -35.57687895228487]
Test Case: 773 | Input/Output: [[15.483792993744999 69] 84.483792993745]
Test Case: 774 | Input/Output: [[51.780808583400756 -97] -45.219191416599244]
Test Case: 775 | Input/Output: [[-54.42431427927863 0] -54.42431427927863]
Test Case: 776 | Input/Output: [[47.7945828838665 -75] -27.205417116133503]
Test Case: 777 | Input/Output: [[-60.8109133578445 72] 11.189086642155502]
Test Case: 778 | Input/Output: [[14.637372724244685 24] 38.637372724244685]
Test Case: 779 | Input/Output: [[-4.838325632904429 -97] -101.83832563290443]
Test Case: 780 | Input/Output: [[-61.37215108527592 -8] -69.37215108527592]
Test Case: 781 | Input/Output: [[-58.12565880443521 49] -9.125658804435211]
Test Case: 782 | Input/Output: [[-59.76353609322167 -3] -62.76353609322167]
Test Case: 783 | Input/Output: [[38.308569174027554 -31] 7.308569174027554]
Test Case: 784 | Input/Output: [[-88.54557102006517 81] -7.545571020065168]
Test Case: 785 | Input/Output: [[46.93592594113008 79] 125.93592594113008]
Test Case: 786 | Input/Output: [[-40.420644652492754 -19] -59.420644652492754]
Test Case: 787 | Input/Output: [[73.58133743058045 0] 73.58133743058045]
Test Case: 788 | Input/Output: [[-80.04438532702252 55] -25.044385327022525]
Test Case: 789 | Input/Output: [[-83.61803860132831 90] 6.381961398671692]
Test Case: 790 | Input/Output: [[-75.27217514024841 40] -35.27217514024841]
Test Case: 791 | Input/Output: [[-70.33459723773423 -34] -104.33459723773423]
Test Case: 792 | Input/Output: [[-92.9831311273147 2] -90.9831311273147]
Test Case: 793 | Input/Output: [[-77.48446239313506 85] 7.515537606864939]
Test Case: 794 | Input/Output: [[12.71983536024159 56] 68.71983536024159]
Test Case: 795 | Input/Output: [[-72.91051566572521 88] 15.089484334274786]
Test Case: 796 | Input/Output: [[16.736631790246093 -28] -11.263368209753907]
Test Case: 797 | Input/Output: [[-96.92534932456505 -72] -168.92534932456505]
Test Case: 798 | Input/Output: [[66.59326774058235 97] 163.59326774058235]
Test Case: 799 | Input/Output: [[26.83967332469544 60] 86.83967332469544]
Test Case: 800 | Input/Output: [[-4.168025821747207 -92] -96.16802582174721]
Test Case: 801 | Input/Output: [[-7.96361160787049 40] 32.03638839212951]
Test Case: 802 | Input/Output: [[84.2802966687702 -39] 45.280296668770205]
Test Case: 803 | Input/Output: [[94.71312049434039 -23] 71.71312049434039]
Test Case: 804 | Input/Output: [[8.177292512070437 34] 42.17729251207044]
Test Case: 805 | Input/Output: [[-84.80819168727523 -51] -135.8081916872752]
Test Case: 806 | Input/Output: [[-90.13765014144843 81] -9.137650141448432]
Test Case: 807 | Input/Output: [[20.750546102041056 7] 27.750546102041056]
Test Case: 808 | Input/Output: [[80.87318147023797 -11] 69.87318147023797]
Test Case: 809 | Input/Output: [[-51.40442103160778 56] 4.595578968392218]
Test Case: 810 | Input/Output: [[-38.06282120867106 -94] -132.06282120867107]
Test Case: 811 | Input/Output: [[-65.00208822399271 30] -35.002088223992715]
Test Case: 812 | Input/Output: [[70.12570370721966 -86] -15.874296292780343]
Test Case: 813 | Input/Output: [[-6.176575313975533 -7] -13.176575313975533]
Test Case: 814 | Input/Output: [[-72.99808334991569 -12] -84.99808334991569]
Test Case: 815 | Input/Output: [[-19.378758919285687 -51] -70.37875891928569]
Test Case: 816 | Input/Output: [[-25.482098798796656 59] 33.517901201203344]
Test Case: 817 | Input/Output: [[23.305335909675293 -84] -60.69466409032471]
Test Case: 818 | Input/Output: [[-62.34981830993205 84] 21.650181690067953]
Test Case: 819 | Input/Output: [[97.41587616324693 -39] 58.415876163246935]
Test Case: 820 | Input/Output: [[77.32083401670474 55] 132.32083401670474]
Test Case: 821 | Input/Output: [[66.60520352587639 -2] 64.60520352587639]
Test Case: 822 | Input/Output: [[79.72077055469185 15] 94.72077055469185]
Test Case: 823 | Input/Output: [[-35.140305727530034 -15] -50.140305727530034]
Test Case: 824 | Input/Output: [[-30.548557761421975 90] 59.451442238578025]
Test Case: 825 | Input/Output: [[-39.85699504253917 -26] -65.85699504253917]
Test Case: 826 | Input/Output: [[46.4082957019435 -13] 33.4082957019435]
Test Case: 827 | Input/Output: [[42.78692250765741 74] 116.78692250765741]
Test Case: 828 | Input/Output: [[-43.74030166812992 -13] -56.74030166812992]
Test Case: 829 | Input/Output: [[30.061091520717838 30] 60.06109152071784]
Test Case: 830 | Input/Output: [[-75.48393758113889 -75] -150.4839375811389]
Test Case: 831 | Input/Output: [[-87.24266239173342 68] -19.24266239173342]
Test Case: 832 | Input/Output: [[85.3320037375558 78] 163.3320037375558]
Test Case: 833 | Input/Output: [[31.43303290720567 23] 54.43303290720567]
Test Case: 834 | Input/Output: [[46.04143648371979 -81] -34.95856351628021]
Test Case: 835 | Input/Output: [[87.48074689199083 23] 110.48074689199083]
Test Case: 836 | Input/Output: [[-27.056818047570403 -82] -109.0568180475704]
Test Case: 837 | Input/Output: [[-50.44796241023095 -82] -132.44796241023096]
Test Case: 838 | Input/Output: [[-12.974410939697094 -73] -85.9744109396971]
Test Case: 839 | Input/Output: [[39.51558904537839 -11] 28.51558904537839]
Test Case: 840 | Input/Output: [[-54.062393934572725 63] 8.937606065427275]
Test Case: 841 | Input/Output: [[54.05488727041208 -34] 20.05488727041208]
Test Case: 842 | Input/Output: [[67.84750401645857 -75] -7.152495983541428]
Test Case: 843 | Input/Output: [[-18.74681405641489 -59] -77.74681405641489]
Test Case: 844 | Input/Output: [[96.92161372236555 37] 133.92161372236555]
Test Case: 845 | Input/Output: [[52.673518578499966 -58] -5.326481421500034]
Test Case: 846 | Input/Output: [[-60.246515703557904 66] 5.753484296442096]
Test Case: 847 | Input/Output: [[47.67184628246528 -35] 12.671846282465282]
Test Case: 848 | Input/Output: [[-18.122133766969625 -9] -27.122133766969625]
Test Case: 849 | Input/Output: [[-83.83688181223472 61] -22.836881812234722]
Test Case: 850 | Input/Output: [[-78.594518346471 -51] -129.594518346471]
Test Case: 851 | Input/Output: [[2.221532720373105 -23] -20.778467279626895]
Test Case: 852 | Input/Output: [[89.3916386004365 63] 152.3916386004365]
Test Case: 853 | Input/Output: [[61.891962937604404 -12] 49.891962937604404]
Test Case: 854 | Input/Output: [[-90.14219010050364 -66] -156.14219010050363]
Test Case: 855 | Input/Output: [[32.8826325306936 -92] -59.1173674693064]
Test Case: 856 | Input/Output: [[20.503906966550403 31] 51.5039069665504]
Test Case: 857 | Input/Output: [[-35.75554356755761 -40] -75.75554356755761]
Test Case: 858 | Input/Output: [[-57.44277297870033 -31] -88.44277297870033]
Test Case: 859 | Input/Output: [[42.659829991441455 93] 135.65982999144146]
Test Case: 860 | Input/Output: [[97.46449345149719 72] 169.4644934514972]
Test Case: 861 | Input/Output: [[19.54414352575897 35] 54.54414352575897]
Test Case: 862 | Input/Output: [[-51.8195049418871 63] 11.180495058112903]
Test Case: 863 | Input/Output: [[-52.409618769246705 13] -39.409618769246705]
Test Case: 864 | Input/Output: [[47.60880094186075 24] 71.60880094186075]
Test Case: 865 | Input/Output: [[91.66297562255014 -36] 55.662975622550135]
Test Case: 866 | Input/Output: [[-20.27919445056729 17] -3.2791944505672888]
Test Case: 867 | Input/Output: [[-16.20300778893062 -16] -32.20300778893062]
Test Case: 868 | Input/Output: [[83.6138615930299 -9] 74.6138615930299]
Test Case: 869 | Input/Output: [[7.879990125475686 -90] -82.12000987452431]
Test Case: 870 | Input/Output: [[20.25147691410622 68] 88.25147691410622]
Test Case: 871 | Input/Output: [[44.47465279240052 -13] 31.47465279240052]
Test Case: 872 | Input/Output: [[-43.987293439789866 -65] -108.98729343978987]
Test Case: 873 | Input/Output: [[-48.244039504968384 -17] -65.24403950496838]
Test Case: 874 | Input/Output: [[-66.15995171371964 -50] -116.15995171371964]
Test Case: 875 | Input/Output: [[-60.37701601275949 -98] -158.3770160127595]
Test Case: 876 | Input/Output: [[99.1242499406845 2] 101.1242499406845]
Test Case: 877 | Input/Output: [[-72.73249554669768 -37] -109.73249554669768]
Test Case: 878 | Input/Output: [[71.1333257469214 28] 99.1333257469214]
Test Case: 879 | Input/Output: [[62.18628863461652 72] 134.18628863461652]
Test Case: 880 | Input/Output: [[5.075637799626563 41] 46.07563779962656]
Test Case: 881 | Input/Output: [[-37.616336324513114 10] -27.616336324513114]
Test Case: 882 | Input/Output: [[-69.67822726571569 -38] -107.67822726571569]
Test Case: 883 | Input/Output: [[-92.13875450243643 -16] -108.13875450243643]
Test Case: 884 | Input/Output: [[99.43673750867151 15] 114.43673750867151]
Test Case: 885 | Input/Output: [[-33.20853013231908 30] -3.2085301323190834]
Test Case: 886 | Input/Output: [[59.387172741550614 14] 73.38717274155061]
Test Case: 887 | Input/Output: [[-84.4582731153108 -48] -132.45827311531082]
Test Case: 888 | Input/Output: [[-99.21285075661817 -45] -144.21285075661817]
Test Case: 889 | Input/Output: [[30.507441915099434 10] 40.507441915099434]
Test Case: 890 | Input/Output: [[92.67397279662111 51] 143.67397279662111]
Test Case: 891 | Input/Output: [[55.1702617927715 41] 96.1702617927715]
Test Case: 892 | Input/Output: [[-18.430554385130264 -5] -23.430554385130264]
Test Case: 893 | Input/Output: [[-55.52434164985143 39] -16.52434164985143]
Test Case: 894 | Input/Output: [[86.17733924816628 -23] 63.17733924816628]
Test Case: 895 | Input/Output: [[73.04927419216497 -73] 0.04927419216497242]
Test Case: 896 | Input/Output: [[-94.11085801807985 -37] -131.11085801807985]
Test Case: 897 | Input/Output: [[-2.1806214302104223 100] 97.81937856978958]
Test Case: 898 | Input/Output: [[34.57675497855058 58] 92.57675497855058]
Test Case: 899 | Input/Output: [[38.759036266155704 73] 111.7590362661557]
Test Case: 900 | Input/Output: [[73.9072578145379 -74] -0.09274218546210022]
Test Case: 901 | Input/Output: [[19.71778722417443 -81] -61.28221277582557]
Test Case: 902 | Input/Output: [[26.238707579031527 -18] 8.238707579031527]
Test Case: 903 | Input/Output: [[2.3871981543687895 -12] -9.61280184563121]
Test Case: 904 | Input/Output: [[97.72740983756859 67] 164.7274098375686]
Test Case: 905 | Input/Output: [[25.90335177399939 -24] 1.9033517739993897]
Test Case: 906 | Input/Output: [[35.79489337363344 -95] -59.20510662636656]
Test Case: 907 | Input/Output: [[21.521520353968683 13] 34.52152035396868]
Test Case: 908 | Input/Output: [[83.55509961320163 47] 130.55509961320163]
Test Case: 909 | Input/Output: [[48.89529365146973 98] 146.89529365146973]
Test Case: 910 | Input/Output: [[-94.71803450396392 -100] -194.7180345039639]
Test Case: 911 | Input/Output: [[62.77588362418345 99] 161.77588362418345]
Test Case: 912 | Input/Output: [[95.86462647221683 81] 176.86462647221683]
Test Case: 913 | Input/Output: [[51.09114553247403 -50] 1.0911455324740302]
Test Case: 914 | Input/Output: [[-94.38554219534383 51] -43.38554219534383]
Test Case: 915 | Input/Output: [[-6.628371490606398 52] 45.3716285093936]
Test Case: 916 | Input/Output: [[-67.20875822810532 -79] -146.20875822810532]
Test Case: 917 | Input/Output: [[-56.0155749132663 74] 17.9844250867337]
Test Case: 918 | Input/Output: [[20.766136897356333 -60] -39.23386310264367]
Test Case: 919 | Input/Output: [[-30.043748418250942 -13] -43.04374841825094]
Test Case: 920 | Input/Output: [[-64.87545650009704 -41] -105.87545650009704]
Test Case: 921 | Input/Output: [[40.871858168224975 73] 113.87185816822497]
Test Case: 922 | Input/Output: [[1.5134887072391763 84] 85.51348870723918]
Test Case: 923 | Input/Output: [[26.643842975322187 87] 113.64384297532219]
Test Case: 924 | Input/Output: [[-76.85457301428468 -51] -127.85457301428468]
Test Case: 925 | Input/Output: [[-11.095174415746769 97] 85.90482558425323]
Test Case: 926 | Input/Output: [[77.99900021932777 -57] 20.99900021932777]
Test Case: 927 | Input/Output: [[-77.41190233839741 -65] -142.4119023383974]
Test Case: 928 | Input/Output: [[15.29374909529568 -91] -75.70625090470432]
Test Case: 929 | Input/Output: [[7.290370421872126 -81] -73.70962957812787]
Test Case: 930 | Input/Output: [[92.55161480685669 -55] 37.55161480685669]
Test Case: 931 | Input/Output: [[21.75853827992013 80] 101.75853827992013]
Test Case: 932 | Input/Output: [[69.71001153365316 73] 142.71001153365316]
Test Case: 933 | Input/Output: [[-68.8133343390889 -10] -78.8133343390889]
Test Case: 934 | Input/Output: [[-97.37982162510541 -52] -149.37982162510542]
Test Case: 935 | Input/Output: [[71.73113036202702 80] 151.73113036202702]
Test Case: 936 | Input/Output: [[-68.12324647194832 -22] -90.12324647194832]
Test Case: 937 | Input/Output: [[-44.75892482543422 -68] -112.75892482543422]
Test Case: 938 | Input/Output: [[86.03729016491778 -7] 79.03729016491778]
Test Case: 939 | Input/Output: [[22.34315263623654 13] 35.34315263623654]
Test Case: 940 | Input/Output: [[53.25871183968681 -52] 1.2587118396868107]
Test Case: 941 | Input/Output: [[-42.13394012726006 -28] -70.13394012726006]
Test Case: 942 | Input/Output: [[91.2060628487572 -45] 46.2060628487572]
Test Case: 943 | Input/Output: [[97.03807541095642 18] 115.03807541095642]
Test Case: 944 | Input/Output: [[-37.3215736757498 -16] -53.3215736757498]
Test Case: 945 | Input/Output: [[8.163958956696703 -40] -31.836041043303297]
Test Case: 946 | Input/Output: [[-24.067407491967074 20] -4.067407491967074]
Test Case: 947 | Input/Output: [[-36.07580628151818 -68] -104.07580628151818]
Test Case: 948 | Input/Output: [[4.838456954766855 90] 94.83845695476685]
Test Case: 949 | Input/Output: [[39.39067562396443 -99] -59.60932437603557]
Test Case: 950 | Input/Output: [[47.51238743900683 38] 85.51238743900683]
Test Case: 951 | Input/Output: [[30.968417874437307 -53] -22.031582125562693]
Test Case: 952 | Input/Output: [[-88.1431238637661 -100] -188.1431238637661]
Test Case: 953 | Input/Output: [[-87.16521799483013 -60] -147.16521799483013]
Test Case: 954 | Input/Output: [[-36.204002595391515 16] -20.204002595391515]
Test Case: 955 | Input/Output: [[-61.255669257142785 44] -17.255669257142785]
Test Case: 956 | Input/Output: [[97.61687558880843 46] 143.61687558880843]
Test Case: 957 | Input/Output: [[-92.51529833714238 -100] -192.51529833714238]
Test Case: 958 | Input/Output: [[7.247295737789614 -96] -88.75270426221039]
Test Case: 959 | Input/Output: [[-99.94872140100601 24] -75.94872140100601]
Test Case: 960 | Input/Output: [[-0.7027225985013104 39] 38.29727740149869]
Test Case: 961 | Input/Output: [[-25.999293432814596 -28] -53.999293432814596]
Test Case: 962 | Input/Output: [[-50.906213403018484 -26] -76.90621340301848]
Test Case: 963 | Input/Output: [[15.009806244465636 -24] -8.990193755534364]
Test Case: 964 | Input/Output: [[4.541348859463312 61] 65.54134885946331]
Test Case: 965 | Input/Output: [[-49.361945107022166 -36] -85.36194510702217]
Test Case: 966 | Input/Output: [[65.26491849511166 56] 121.26491849511166]
Test Case: 967 | Input/Output: [[-65.12685630909266 -68] -133.12685630909266]
Test Case: 968 | Input/Output: [[49.445223048012764 99] 148.44522304801276]
Test Case: 969 | Input/Output: [[-57.42942593798341 37] -20.42942593798341]
Test Case: 970 | Input/Output: [[92.08515329921326 -72] 20.08515329921326]
Test Case: 971 | Input/Output: [[5.832999588008377 -68] -62.16700041199162]
Test Case: 972 | Input/Output: [[18.66348503944191 69] 87.66348503944191]
Test Case: 973 | Input/Output: [[72.41742719720062 5] 77.41742719720062]
Test Case: 974 | Input/Output: [[15.159941245953362 100] 115.15994124595336]
Test Case: 975 | Input/Output: [[-42.73029694951418 44] 1.2697030504858233]
Test Case: 976 | Input/Output: [[22.66902679672293 -71] -48.33097320327707]
Test Case: 977 | Input/Output: [[-26.265834052435196 -97] -123.2658340524352]
Test Case: 978 | Input/Output: [[99.81939672685297 11] 110.81939672685297]
Test Case: 979 | Input/Output: [[-60.639043118797844 -12] -72.63904311879784]
Test Case: 980 | Input/Output: [[-43.6026395734364 87] 43.3973604265636]
Test Case: 981 | Input/Output: [[-35.43372900744302 56] 20.56627099255698]
Test Case: 982 | Input/Output: [[66.35137671992862 -97] -30.648623280071376]
Test Case: 983 | Input/Output: [[56.16087629775467 84] 140.16087629775467]
Test Case: 984 | Input/Output: [[-97.50059253963602 65] -32.50059253963602]
Test Case: 985 | Input/Output: [[71.18742453501275 -9] 62.18742453501275]
Test Case: 986 | Input/Output: [[89.84003017072274 16] 105.84003017072274]
Test Case: 987 | Input/Output: [[-43.5695189936989 76] 32.4304810063011]
Test Case: 988 | Input/Output: [[56.65148218969196 -17] 39.65148218969196]
Test Case: 989 | Input/Output: [[-26.077891620397395 -56] -82.0778916203974]
Test Case: 990 | Input/Output: [[84.88207066617491 59] 143.8820706661749]
Test Case: 991 | Input/Output: [[-88.86026266130627 63] -25.860262661306265]
Test Case: 992 | Input/Output: [[-50.00235636782611 -19] -69.00235636782611]
Test Case: 993 | Input/Output: [[0.23936217625524137 -23] -22.76063782374476]
Test Case: 994 | Input/Output: [[-34.89320747944646 -51] -85.89320747944646]
Test Case: 995 | Input/Output: [[55.34529640552478 -98] -42.65470359447522]
Test Case: 996 | Input/Output: [[-95.89849520046269 16] -79.89849520046269]
Test Case: 997 | Input/Output: [[46.57921614338201 -40] 6.579216143382013]
Test Case: 998 | Input/Output: [[89.77227380737997 57] 146.77227380737997]
Test Case: 999 | Input/Output: [[-15.745845316737132 -75] -90.74584531673713]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -9 71 -10 36 -113 -128 87 -64 -72 81 60 -3 -11 40 88 -102
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 63035.57869999991
Test mean error for best: 31.51779
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 95.3692371802

Correct output: 71.9246550776  | Program output: 8.160667766
  
Correct output: -71.7136417398 | Program output: -86.7284260471

Correct output: -86.3636978789 | Program output: -89.0605451111

Correct output: -175.789814475 | Program output: -93.2480487003

Correct output: -67.4831289413 | Program output: -61.6722080714

Correct output: -23.3513071934 | Program output: -10.8344196557

Correct output: -123.1447619871 | Program output: -90.7522801053

Correct output: 24.0076171492  | Program output: 70.3034172242

Correct output: -50.6702678178 | Program output: -4.8079211765

Correct output: -128.7993219642 | Program output: -75.7517943351

Correct output: 41.7575748041  | Program output: 100.2834702447

Correct output: 173.057045519  | Program output: 85.2715739529

Correct output: -110.0264496737 | Program output: -30.66914956
 
Correct output: 11.9743638411  | Program output: 88.9394548889

Correct output: -2.4287759947  | Program output: 95.158037999
 
Correct output: -60.8453890801 | Program output: -42.7347698502

Correct output: -119.1994005588 | Program output: -93.2480487003

Correct output: -1.7396856728  | Program output: 28.1760028123

Correct output: 51.2300489273  | Program output: -6.8189200418

Correct output: 185.9904753477 | Program output: 95.3692371802

Correct output: 42.4470677171  | Program output: -11.5111935507

Correct output: 53.3134494099  | Program output: 33.1647669744

Correct output: -33.8727861409 | Program output: 63.3924388611

Correct output: 127.8115346332 | Program output: 96.1600452331

;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction float_sub} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction print_newline} {:instruction integer_mult} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_fromfloat})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_fromfloat float_div float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup integer_dup_items integer_dec float_sub print_float float_sin integer_sub float_frominteger print_newline integer_mult integer_swap integer_dup_times float_max float_inc integer_yankdup integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank float_sin print_integer integer_stackdepth tag_float_475 print_float float_cos float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_fromfloat)
Errors: [96.153 10 63.764 10 15.0148 11 2.6968 11 82.5418 12 5.8109 10 12.5169 12 32.3925 13 46.2958 9 45.8623 11 53.0475 13 58.5259 12 87.7855 11 79.3573 10 76.9651 10 97.5868 9 18.1106 11 25.9514 13 29.9157 12 58.049 12 90.6212 11 53.9583 13 20.1487 10 97.2652 10 31.6515 11]
Total: 1558.9885
Mean: 31.17977
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 18440.658440400002
Median total errors in population: 25343.0
Error averages by case: (745.812192400001 12.586 707.9178683999975 12.515 721.182578200001 14.087 718.381621599999 13.904 753.2288095000031 13.479 722.7987694999985 13.255 711.5673718999985 13.258 738.4542693000013 14.184 713.5995093000007 13.28 717.6947538999997 13.262 740.9360165999987 14.148 719.1738656000009 13.355 740.6285072999997 12.611 733.4637353999971 14.151 714.8037618999992 13.377 714.7438744999993 12.635 722.675723199999 13.269 739.1372518000015 14.238 706.8964972000003 12.545 712.9597533999985 12.521 744.4121505999994 13.345 711.7184124999989 12.624 709.052945999999 12.578 717.7840869000013 13.314 729.6271134999987 13.486)
Error minima by case: (0.4778 2 0.9247 1 1.8096 8 0.3637 8 3.2714 3 0.5169 1 0.6487 1 24.1448 2 0.0076 8 1.4385 2 25.2007 2 1.5709 9 1.057 2 11.0264 2 1.8039 7 0.4288 2 1.1145 2 20.1994 3 0.2603 1 0.23 1 4.0 2 2.2604 1 0.6866 2 3.0681 2 3.0 2)
Average genome size in population (length): 52.265
Average program size in population (points): 53.265
Average percent parens in population: 0.040
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.997
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.997
Total error diversity:				 0.326
Error (vector) diversity:			 0.347
Behavioral diversity:				 0.364
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1310885
--- Timings ---
Current time: 1529615933844 milliseconds
Total Time:           4.0 seconds
Initialization:       0.1 seconds,  2.8%
Reproduction:         0.6 seconds, 14.0%
Fitness Testing:      3.3 seconds, 83.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 63035.57869999991
Test mean error for best: 31.51779
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 95.3692371802

Correct output: 71.9246550776  | Program output: 8.160667766
  
Correct output: -71.7136417398 | Program output: -86.7284260471

Correct output: -86.3636978789 | Program output: -89.0605451111

Correct output: -175.789814475 | Program output: -93.2480487003

Correct output: -67.4831289413 | Program output: -61.6722080714

Correct output: -23.3513071934 | Program output: -10.8344196557

Correct output: -123.1447619871 | Program output: -90.7522801053

Correct output: 24.0076171492  | Program output: 70.3034172242

Correct output: -50.6702678178 | Program output: -4.8079211765

Correct output: -128.7993219642 | Program output: -75.7517943351

Correct output: 41.7575748041  | Program output: 100.2834702447

Correct output: 173.057045519  | Program output: 85.2715739529

Correct output: -110.0264496737 | Program output: -30.66914956
 
Correct output: 11.9743638411  | Program output: 88.9394548889

Correct output: -2.4287759947  | Program output: 95.158037999
 
Correct output: -60.8453890801 | Program output: -42.7347698502

Correct output: -119.1994005588 | Program output: -93.2480487003

Correct output: -1.7396856728  | Program output: 28.1760028123

Correct output: 51.2300489273  | Program output: -6.8189200418

Correct output: 185.9904753477 | Program output: 95.3692371802

Correct output: 42.4470677171  | Program output: -11.5111935507

Correct output: 53.3134494099  | Program output: 33.1647669744

Correct output: -33.8727861409 | Program output: 63.3924388611

Correct output: 127.8115346332 | Program output: 96.1600452331

;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction float_sub} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction print_newline} {:instruction integer_mult} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction float_flush} {:instruction print_float} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_fromfloat})
Best program: (integer_inc float_sub integer_pop integer_mult float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup integer_dup_items integer_dec float_sub print_float float_sin integer_sub float_frominteger print_newline integer_mult integer_swap integer_dup_times float_max float_inc integer_yankdup integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank float_sin print_integer integer_stackdepth float_flush print_float float_cos float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_fromfloat)
Errors: [96.153 10 63.764 10 15.0148 11 2.6968 11 82.5418 12 5.8109 10 12.5169 12 32.3925 13 46.2958 9 45.8623 11 53.0475 13 58.5259 12 87.7855 11 79.3573 10 76.9651 10 97.5868 9 18.1106 11 25.9514 13 29.9157 12 58.049 12 90.6212 11 53.9583 13 20.1487 10 97.2652 10 31.6515 11]
Total: 1558.9885
Mean: 31.17977
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 6809.0556084999935
Median total errors in population: 2330.4644
Error averages by case: (317.3476489000025 10.629 237.50363130000116 10.477 254.87706319999998 12.967 256.0179093999997 12.44 318.2973058000017 11.426 249.99712430000196 10.892 221.88863670000066 10.845 285.12358060000156 11.9 238.7701353 12.182 238.09971609999903 11.05 288.85984940000304 11.722 253.44009230000015 12.327 306.5634424999984 10.818 276.0073142000002 11.805 244.75299809999996 12.363 245.60048409999854 10.733 246.24650179999887 10.973 283.5528727000011 11.996 217.62548920000106 10.572 236.75663560000135 10.461 313.9477787000032 11.19 235.22676789999866 10.591 230.05802030000174 10.521 250.13048000000194 11.159 278.74613010000184 11.579)
Error minima by case: (1.5222 2 0.9247 1 1.2864 8 0.3637 8 10.2102 3 1.4302 1 0.6487 1 24.1448 2 0.0076 8 1.4385 2 23.2007 2 1.5709 9 3.057 2 11.0264 2 1.8039 7 0.4288 2 2.8454 2 20.1994 3 0.2603 1 0.23 1 4.0 2 2.2604 1 2.3134 2 3.2917 2 3.0 2)
Average genome size in population (length): 60.793
Average program size in population (points): 61.793
Average percent parens in population: 0.020
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.503
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.789
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.789
Total error diversity:				 0.28
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2834935
--- Timings ---
Current time: 1529615938547 milliseconds
Total Time:           9.1 seconds
Initialization:       0.1 seconds,  1.2%
Reproduction:         3.2 seconds, 35.3%
Fitness Testing:      4.9 seconds, 53.7%
Report:               0.9 seconds,  9.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 62431.57869999991
Test mean error for best: 31.21579
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 95.3692371802 
Correct output: 71.9246550776  | Program output: 8.160667766   
Correct output: -71.7136417398 | Program output: -86.7284260471
Correct output: -86.3636978789 | Program output: -89.0605451111
Correct output: -175.789814475 | Program output: -93.2480487003
Correct output: -67.4831289413 | Program output: -61.6722080714
Correct output: -23.3513071934 | Program output: -10.8344196557
Correct output: -123.1447619871 | Program output: -90.7522801053
Correct output: 24.0076171492  | Program output: 70.3034172242 
Correct output: -50.6702678178 | Program output: -4.8079211765 
Correct output: -128.7993219642 | Program output: -75.7517943351
Correct output: 41.7575748041  | Program output: 100.2834702447
Correct output: 173.057045519  | Program output: 85.2715739529 
Correct output: -110.0264496737 | Program output: -30.66914956  
Correct output: 11.9743638411  | Program output: 88.9394548889 
Correct output: -2.4287759947  | Program output: 95.158037999  
Correct output: -60.8453890801 | Program output: -42.7347698502
Correct output: -119.1994005588 | Program output: -93.2480487003
Correct output: -1.7396856728  | Program output: 28.1760028123 
Correct output: 51.2300489273  | Program output: -6.8189200418 
Correct output: 185.9904753477 | Program output: 95.3692371802 
Correct output: 42.4470677171  | Program output: -11.5111935507
Correct output: 53.3134494099  | Program output: 33.1647669744 
Correct output: -33.8727861409 | Program output: 63.3924388611 
Correct output: 127.8115346332 | Program output: 96.1600452331 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction float_sub} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dec})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_fromfloat float_div float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup integer_dup_items integer_dec float_sub print_float float_sin integer_sub float_frominteger integer_mult float_dup_times integer_dup_times float_pop float_mult integer_dec)
Errors: [96.153 10 63.764 9 15.0148 11 2.6968 10 82.5418 11 5.8109 9 12.5169 11 32.3925 13 46.2958 8 45.8623 10 53.0475 12 58.5259 11 87.7855 10 79.3573 10 76.9651 10 97.5868 9 18.1106 10 25.9514 13 29.9157 11 58.049 12 90.6212 11 53.9583 13 20.1487 10 97.2652 10 31.6515 10]
Total: 1545.9885
Mean: 30.91977
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 4895.435569899989
Median total errors in population: 1587.8306000000002
Error averages by case: (222.69022570000274 10.546 167.51049000000143 10.654 167.95101870000067 12.586 161.20946600000073 11.578 221.73596779999932 11.217 159.22790510000078 10.356 152.2121794999997 10.414 184.9263813000006 11.957 174.895783299999 11.543 175.0634895999991 11.48 196.1858099000022 11.464 189.82441599999865 11.835 214.07032880000037 11.169 205.58982920000122 11.841 196.05296539999773 12.082 209.43350409999783 10.755 164.07638049999966 10.862 180.5483717000014 11.896 155.6215742000015 10.767 182.30043500000124 10.646 218.90037200000353 11.35 179.90108829999903 10.552 152.55869620000072 10.098 206.46764620000206 11.378 175.78524540000146 11.67)
Error minima by case: (1.5222 2 7.0 1 1.8096 8 0.3637 9 12.2102 3 5.4831 1 0.6487 1 32.1448 2 3.7998 8 1.4385 2 25.2007 2 3.5101 7 3.057 2 28.4385 2 1.9744 8 0.5712 2 15.8454 2 25.1994 3 0.8306 1 2.0794 1 3.9905 2 2.8206 1 6.8367 2 5.8381 2 18.3348 2)
Average genome size in population (length): 54.078
Average program size in population (points): 55.078
Average percent parens in population: 0.022
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.925
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 31
Genome diversity (% unique Plush genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 31
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.147
Error (vector) diversity:			 0.151
Behavioral diversity:				 0.165
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4190709
--- Timings ---
Current time: 1529615941510 milliseconds
Total Time:          12.2 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         4.6 seconds, 37.6%
Fitness Testing:      6.1 seconds, 50.2%
Report:               1.4 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 62431.57869999991
Test mean error for best: 31.21579
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 95.3692371802 
Correct output: 71.9246550776  | Program output: 8.160667766   
Correct output: -71.7136417398 | Program output: -86.7284260471
Correct output: -86.3636978789 | Program output: -89.0605451111
Correct output: -175.789814475 | Program output: -93.2480487003
Correct output: -67.4831289413 | Program output: -61.6722080714
Correct output: -23.3513071934 | Program output: -10.8344196557
Correct output: -123.1447619871 | Program output: -90.7522801053
Correct output: 24.0076171492  | Program output: 70.3034172242 
Correct output: -50.6702678178 | Program output: -4.8079211765 
Correct output: -128.7993219642 | Program output: -75.7517943351
Correct output: 41.7575748041  | Program output: 100.2834702447
Correct output: 173.057045519  | Program output: 85.2715739529 
Correct output: -110.0264496737 | Program output: -30.66914956  
Correct output: 11.9743638411  | Program output: 88.9394548889 
Correct output: -2.4287759947  | Program output: 95.158037999  
Correct output: -60.8453890801 | Program output: -42.7347698502
Correct output: -119.1994005588 | Program output: -93.2480487003
Correct output: -1.7396856728  | Program output: 28.1760028123 
Correct output: 51.2300489273  | Program output: -6.8189200418 
Correct output: 185.9904753477 | Program output: 95.3692371802 
Correct output: 42.4470677171  | Program output: -11.5111935507
Correct output: 53.3134494099  | Program output: 33.1647669744 
Correct output: -33.8727861409 | Program output: 63.3924388611 
Correct output: 127.8115346332 | Program output: 96.1600452331 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction float_sub} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction float_pop} {:instruction float_mult} {:instruction integer_dec})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_fromfloat float_div float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup integer_dup_items integer_dec float_sub print_float float_sin integer_sub float_frominteger integer_mult float_dup_times integer_dup_times float_pop float_mult integer_dec)
Errors: [96.153 10 63.764 9 15.0148 11 2.6968 10 82.5418 11 5.8109 9 12.5169 11 32.3925 13 46.2958 8 45.8623 10 53.0475 12 58.5259 11 87.7855 10 79.3573 10 76.9651 10 97.5868 9 18.1106 10 25.9514 13 29.9157 11 58.049 12 90.6212 11 53.9583 13 20.1487 10 97.2652 10 31.6515 10]
Total: 1545.9885
Mean: 30.91977
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 4949.106405299987
Median total errors in population: 1581.8306000000002
Error averages by case: (224.08928830000343 11.24 167.4513336000017 11.832 160.29229310000073 12.111 151.00684340000066 11.516 219.0022414999994 11.954 152.31594700000036 11.198 154.79437329999953 11.363 177.03260940000004 13.114 179.67032619999893 11.199 180.87359629999864 12.18 192.9248310000025 12.73 192.46161959999802 11.758 216.74819510000043 12.093 210.91146150000182 12.486 205.6771037999968 11.924 222.96115019999684 11.712 160.86509480000024 11.588 171.1571534000014 12.704 163.6028391000024 11.97 192.42234770000175 11.839 219.38731020000418 12.421 189.3878446999988 11.997 154.56767110000123 10.856 221.3998306000026 12.343 169.33010040000147 12.645)
Error minima by case: (4.4778 2 9.0 2 2.7136 10 0.3637 9 81.7898 3 1.5169 1 0.3513 1 32.1448 2 5.7998 8 4.0 2 51.7993 2 11.2424 10 12.943 2 31.0 3 10.2885 8 2.2707 2 8.1546 2 25.1994 3 0.1926 2 1.77 1 10.0095 2 10.5529 2 0.3134 2 9.8728 2 26.8115 3)
Average genome size in population (length): 54.935
Average program size in population (points): 55.935
Average percent parens in population: 0.021
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.421
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.091
Error (vector) diversity:			 0.095
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5568909
--- Timings ---
Current time: 1529615944627 milliseconds
Total Time:          15.3 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.2 seconds, 40.6%
Fitness Testing:      7.2 seconds, 47.1%
Report:               1.8 seconds, 11.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 62341.45080000004
Test mean error for best: 31.17073
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 95.1674104787 
Correct output: 71.9246550776  | Program output: 8.4247964092  
Correct output: -71.7136417398 | Program output: -86.7999947442
Correct output: -86.3636978789 | Program output: -89.7660402256
Correct output: -175.789814475 | Program output: -93.8134394251
Correct output: -67.4831289413 | Program output: -61.823115848 
Correct output: -23.3513071934 | Program output: -10.6195379303
Correct output: -123.1447619871 | Program output: -90.7841240023
Correct output: 24.0076171492  | Program output: 70.1850567648 
Correct output: -50.6702678178 | Program output: -4.7130742458 
Correct output: -128.7993219642 | Program output: -76.6280524768
Correct output: 41.7575748041  | Program output: 99.3942736898 
Correct output: 173.057045519  | Program output: 85.2000052558 
Correct output: -110.0264496737 | Program output: -31.5728631592
Correct output: 11.9743638411  | Program output: 88.2339597744 
Correct output: -2.4287759947  | Program output: 94.3219850789 
Correct output: -60.8453890801 | Program output: -42.7962474032
Correct output: -119.1994005588 | Program output: -93.8134394251
Correct output: -1.7396856728  | Program output: 28.330889262  
Correct output: 51.2300489273  | Program output: -7.6661415626 
Correct output: 185.9904753477 | Program output: 95.1674104787 
Correct output: 42.4470677171  | Program output: -11.8414656934
Correct output: 53.3134494099  | Program output: 33.3860487882 
Correct output: -33.8727861409 | Program output: 62.4755101744 
Correct output: 127.8115346332 | Program output: 96.4339414562 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction integer_mult} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction float_sub} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_fromfloat})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_fromfloat float_div float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 integer_mult float_cos float_sin print_integer float_yankdup integer_dup_items integer_dec float_sub print_float float_sin integer_sub float_frominteger integer_sub float_min integer_shove float_frominteger float_mult integer_swap integer_dup_items integer_flush integer_dup_times integer_dup_times float_max float_inc integer_yankdup integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank float_sin print_integer integer_stackdepth tag_float_475 print_float float_shove float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_fromfloat)
Errors: [96.3548 10 63.4999 10 15.0864 10 3.4023 10 81.9764 11 5.66 8 12.7318 10 32.3606 12 46.1774 10 45.9572 10 52.1713 12 57.6367 11 87.857 10 78.4536 12 76.2596 12 96.7508 10 18.0491 12 25.386 12 30.0706 9 58.8962 11 90.8231 9 54.2885 11 19.9274 9 96.3483 11 31.3776 12]
Total: 1541.5026
Mean: 30.830051
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4796.653596699989
Median total errors in population: 1566.8306000000002
Error averages by case: (219.34736510000158 10.683 170.21345890000057 11.134 155.13992330000067 11.964 146.98829020000073 11.547 214.48876460000082 12.148 145.9095357999996 10.977 146.2331856999995 11.676 171.6549411999996 13.257 172.14402709999973 10.743 173.9441589999992 11.465 187.9293408000004 13.028 184.87596549999913 11.933 211.0825391999998 11.42 205.52162080000187 11.463 199.33289609999844 11.591 216.30690419999726 11.056 154.30337890000106 11.343 166.50014080000054 12.779 154.79611380000148 11.996 185.63071390000064 11.783 214.60730440000165 11.955 181.053647199999 12.654 147.57972150000043 10.6 214.3601729000008 11.363 164.10048580000176 12.051)
Error minima by case: (39.3255 5 2.2456 5 6.9477 9 0.3637 9 81.4724 7 2.7172 5 0.6487 7 3.5085 6 14.0076 8 0.266 5 50.975 7 26.3249 9 54.9943 6 45.2605 5 1.9744 9 2.2707 6 3.6846 6 24.882 7 0.7517 6 12.5731 5 33.7938 6 25.3905 7 12.6062 6 3.5624 6 12.3291 6)
Average genome size in population (length): 67.044
Average program size in population (points): 68.044
Average percent parens in population: 0.017
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.942125
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.778
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.778
Total error diversity:				 0.119
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 7255109
--- Timings ---
Current time: 1529615948437 milliseconds
Total Time:          18.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.9 seconds, 41.9%
Fitness Testing:      8.7 seconds, 46.1%
Report:               2.1 seconds, 11.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 62341.45080000004
Test mean error for best: 31.17073
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 95.1674104787 
Correct output: 71.9246550776  | Program output: 8.4247964092  
Correct output: -71.7136417398 | Program output: -86.7999947442
Correct output: -86.3636978789 | Program output: -89.7660402256
Correct output: -175.789814475 | Program output: -93.8134394251
Correct output: -67.4831289413 | Program output: -61.823115848 
Correct output: -23.3513071934 | Program output: -10.6195379303
Correct output: -123.1447619871 | Program output: -90.7841240023
Correct output: 24.0076171492  | Program output: 70.1850567648 
Correct output: -50.6702678178 | Program output: -4.7130742458 
Correct output: -128.7993219642 | Program output: -76.6280524768
Correct output: 41.7575748041  | Program output: 99.3942736898 
Correct output: 173.057045519  | Program output: 85.2000052558 
Correct output: -110.0264496737 | Program output: -31.5728631592
Correct output: 11.9743638411  | Program output: 88.2339597744 
Correct output: -2.4287759947  | Program output: 94.3219850789 
Correct output: -60.8453890801 | Program output: -42.7962474032
Correct output: -119.1994005588 | Program output: -93.8134394251
Correct output: -1.7396856728  | Program output: 28.330889262  
Correct output: 51.2300489273  | Program output: -7.6661415626 
Correct output: 185.9904753477 | Program output: 95.1674104787 
Correct output: 42.4470677171  | Program output: -11.8414656934
Correct output: 53.3134494099  | Program output: 33.3860487882 
Correct output: -33.8727861409 | Program output: 62.4755101744 
Correct output: 127.8115346332 | Program output: 96.4339414562 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction integer_mult} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction integer_dup_items} {:instruction integer_dec} {:instruction float_sub} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction float_flush} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_fromfloat})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_fromfloat float_div float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 integer_mult float_cos float_sin print_integer float_yankdup integer_dup_items integer_dec float_sub print_float float_sin integer_sub float_frominteger integer_sub float_min integer_shove float_frominteger float_mult integer_swap integer_dup_items integer_flush integer_dup_times integer_dup_times float_max float_inc integer_yankdup integer_add print_float in2 float_flush integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank float_sin print_integer integer_stackdepth integer_add print_float float_shove float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_fromfloat)
Errors: [96.3548 10 63.4999 10 15.0864 10 3.4023 10 81.9764 11 5.66 8 12.7318 10 32.3606 12 46.1774 10 45.9572 10 52.1713 12 57.6367 11 87.857 10 78.4536 12 76.2596 12 96.7508 10 18.0491 12 25.386 12 30.0706 9 58.8962 11 90.8231 9 54.2885 11 19.9274 9 96.3483 11 31.3776 12]
Total: 1541.5026
Mean: 30.830051
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4207.310277699985
Median total errors in population: 1558.9885
Error averages by case: (196.55938199999952 10.62 145.77788179999905 10.316 134.856199500001 11.45 126.19331140000125 11.084 196.8859418000025 11.94 125.49222649999832 10.22 124.62587870000095 11.716 151.6953613999994 13.226 143.15729300000137 9.639 151.43033999999906 10.992 169.8529146999979 12.713 157.3135107999993 11.738 187.00860659999924 11.026 185.63092460000198 10.75 169.60222710000053 10.791 189.06152429999833 9.965 133.67222230000047 10.964 147.53919950000042 13.11 124.67794009999899 11.732 164.30563629999955 11.968 191.62907649999818 11.522 158.88672979999902 12.985 121.9049573000011 10.548 186.52048299999808 10.734 140.01950870000252 11.262)
Error minima by case: (39.3255 9 8.0753 9 9.069 10 1.2326 7 81.4724 9 5.4831 8 11.3669 8 3.5085 10 8.9343 8 0.6703 8 50.975 10 8.8157 8 54.9943 9 77.1117 9 0.8329 7 1.5195 8 3.6846 8 24.882 10 0.8304 8 1.23 9 33.7938 9 30.9105 9 12.6062 8 9.1491 9 12.3291 9)
Average genome size in population (length): 69.748
Average program size in population (points): 70.748
Average percent parens in population: 0.015
Minimum age in population: 5.4375
Maximum age in population: 9.5625
Average age in population: 7.4588125
Median age in population: 7.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.781
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.781
Total error diversity:				 0.156
Error (vector) diversity:			 0.163
Behavioral diversity:				 0.169
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 9016534
--- Timings ---
Current time: 1529615952295 milliseconds
Total Time:          22.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.2 seconds, 40.6%
Fitness Testing:     10.6 seconds, 46.6%
Report:               2.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 62419.763299999904
Test mean error for best: 31.20988
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 94.3692371802 
Correct output: 71.9246550776  | Program output: 7.160667766   
Correct output: -71.7136417398 | Program output: -87.7284260471
Correct output: -86.3636978789 | Program output: -90.0605451111
Correct output: -175.789814475 | Program output: -94.2480487003
Correct output: -67.4831289413 | Program output: -62.6722080714
Correct output: -23.3513071934 | Program output: -11.8344196557
Correct output: -123.1447619871 | Program output: -91.7522801053
Correct output: 24.0076171492  | Program output: 69.3034172242 
Correct output: -50.6702678178 | Program output: -5.8079211765 
Correct output: -128.7993219642 | Program output: -76.7517943351
Correct output: 41.7575748041  | Program output: 99.2834702447 
Correct output: 173.057045519  | Program output: 84.2715739529 
Correct output: -110.0264496737 | Program output: -31.66914956  
Correct output: 11.9743638411  | Program output: 87.9394548889 
Correct output: -2.4287759947  | Program output: 94.158037999  
Correct output: -60.8453890801 | Program output: -43.7347698502
Correct output: -119.1994005588 | Program output: -94.2480487003
Correct output: -1.7396856728  | Program output: 27.1760028123 
Correct output: 51.2300489273  | Program output: -7.8189200418 
Correct output: 185.9904753477 | Program output: 94.3692371802 
Correct output: 42.4470677171  | Program output: -12.5111935507
Correct output: 53.3134494099  | Program output: 32.1647669744 
Correct output: -33.8727861409 | Program output: 62.3924388611 
Correct output: 127.8115346332 | Program output: 95.1600452331 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dec} {:instruction float_sub} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_div})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_fromfloat float_div float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc integer_dec float_sub print_float float_sin integer_sub float_frominteger integer_sub float_min integer_shove float_frominteger float_mult integer_swap integer_dup_items integer_flush integer_dup_times integer_dup_times float_max float_inc integer_yankdup integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank float_sin print_integer integer_stackdepth tag_float_475 print_float float_shove float_frominteger float_div)
Errors: [97.153 10 64.764 8 16.0148 11 3.6968 11 81.5418 11 4.8109 9 11.5169 11 31.3925 13 45.2958 8 44.8623 9 52.0475 12 57.5259 10 88.7855 10 78.3573 10 75.9651 10 96.5868 9 17.1106 10 24.9514 13 28.9157 11 59.049 12 91.6212 12 54.9583 12 21.1487 11 96.2652 11 32.6515 10]
Total: 1540.9885
Mean: 30.81977
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3986.671167199986
Median total errors in population: 1545.9885
Error averages by case: (186.72780599999948 10.497 141.28646609999868 9.76 124.28774090000118 11.311 118.3154984000014 10.612 186.38286140000258 11.506 115.0187518999985 9.709 117.42594260000097 11.319 143.8934081000002 13.179 133.28717830000215 9.005 145.3286056999985 10.521 162.88902959999842 12.312 151.95445359999886 11.31 177.34366999999907 10.541 178.25022630000197 10.628 159.82270990000077 10.566 178.01970069999913 9.669 123.4640389 10.538 136.41353580000157 13.135 119.1513315999991 11.26 157.73056599999947 11.929 181.792749499998 11.333 151.1296015999988 12.943 113.92289340000083 10.435 176.4780269999981 10.558 131.07237390000233 10.706)
Error minima by case: (3.847 9 16.236 8 9.069 8 1.2326 8 81.4724 10 4.8109 8 11.3669 8 3.5085 9 14.0076 8 9.7008 9 50.975 9 31.7576 8 12.2145 9 77.1117 9 1.9744 8 2.0451 8 3.6846 8 24.882 9 0.8984 9 12.5731 8 9.3788 9 32.4471 9 12.6062 8 9.1491 7 12.3291 9)
Average genome size in population (length): 66.492
Average program size in population (points): 67.492
Average percent parens in population: 0.016
Minimum age in population: 6.5
Maximum age in population: 10.96875
Average age in population: 8.944875
Median age in population: 9.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.118
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 10693434
--- Timings ---
Current time: 1529615956063 milliseconds
Total Time:          26.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.7 seconds, 40.3%
Fitness Testing:     12.3 seconds, 46.6%
Report:               3.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 62419.763299999904
Test mean error for best: 31.20988
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 94.3692371802 
Correct output: 71.9246550776  | Program output: 7.160667766   
Correct output: -71.7136417398 | Program output: -87.7284260471
Correct output: -86.3636978789 | Program output: -90.0605451111
Correct output: -175.789814475 | Program output: -94.2480487003
Correct output: -67.4831289413 | Program output: -62.6722080714
Correct output: -23.3513071934 | Program output: -11.8344196557
Correct output: -123.1447619871 | Program output: -91.7522801053
Correct output: 24.0076171492  | Program output: 69.3034172242 
Correct output: -50.6702678178 | Program output: -5.8079211765 
Correct output: -128.7993219642 | Program output: -76.7517943351
Correct output: 41.7575748041  | Program output: 99.2834702447 
Correct output: 173.057045519  | Program output: 84.2715739529 
Correct output: -110.0264496737 | Program output: -31.66914956  
Correct output: 11.9743638411  | Program output: 87.9394548889 
Correct output: -2.4287759947  | Program output: 94.158037999  
Correct output: -60.8453890801 | Program output: -43.7347698502
Correct output: -119.1994005588 | Program output: -94.2480487003
Correct output: -1.7396856728  | Program output: 27.1760028123 
Correct output: 51.2300489273  | Program output: -7.8189200418 
Correct output: 185.9904753477 | Program output: 94.3692371802 
Correct output: 42.4470677171  | Program output: -12.5111935507
Correct output: 53.3134494099  | Program output: 32.1647669744 
Correct output: -33.8727861409 | Program output: 62.3924388611 
Correct output: 127.8115346332 | Program output: 95.1600452331 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dec} {:instruction float_sub} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_fromfloat})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_fromfloat float_div float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc integer_dec float_sub print_float float_sin integer_sub float_frominteger integer_sub float_min integer_shove float_frominteger float_mult integer_swap integer_dup_items integer_flush integer_dup_times integer_dup_times float_max float_inc integer_yankdup integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank float_sin print_integer integer_stackdepth tag_float_475 print_float float_cos float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_fromfloat)
Errors: [97.153 10 64.764 8 16.0148 11 3.6968 11 81.5418 11 4.8109 9 11.5169 11 31.3925 13 45.2958 8 44.8623 9 52.0475 12 57.5259 10 88.7855 10 78.3573 10 75.9651 10 96.5868 9 17.1106 10 24.9514 13 28.9157 11 59.049 12 91.6212 12 54.9583 12 21.1487 11 96.2652 11 32.6515 10]
Total: 1540.9885
Mean: 30.81977
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4278.230828399985
Median total errors in population: 1545.9885
Error averages by case: (202.01837169999914 10.604 148.65287829999866 9.932 133.66105250000106 11.246 125.91686200000143 10.628 195.24976160000264 11.529 125.02188439999898 9.709 123.62446700000075 11.307 153.4320298999997 13.078 149.0047606000007 9.287 152.32886039999946 10.574 172.39317949999793 12.357 166.34924710000007 11.387 195.21568009999893 10.641 188.7689331000017 10.892 172.86962620000054 10.813 193.41147309999914 9.874 133.80653990000016 10.801 145.2803805000003 13.102 134.62660289999948 11.081 167.44202059999927 11.847 197.105381699998 11.211 157.88145869999875 12.772 128.31482460000143 10.43 194.26540679999846 10.818 144.72814520000296 10.941)
Error minima by case: (92.0029 8 5.6393 8 13.2864 8 1.6363 7 81.4724 9 4.8109 8 1.8243 9 31.3033 9 22.0799 8 9.7008 8 50.975 9 16.2014 8 73.44 9 77.1117 9 9.4658 8 0.4288 8 17.1106 8 24.882 10 0.2603 8 9.3165 9 86.4711 9 30.9359 9 18.3134 7 8.6971 7 28.083 9)
Average genome size in population (length): 67.249
Average program size in population (points): 68.249
Average percent parens in population: 0.016
Minimum age in population: 7.5
Maximum age in population: 12.453125
Average age in population: 10.45021875
Median age in population: 10.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.113
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 12390434
--- Timings ---
Current time: 1529615959844 milliseconds
Total Time:          30.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        12.0 seconds, 39.7%
Fitness Testing:     14.2 seconds, 46.9%
Report:               4.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 62385.560200000036
Test mean error for best: 31.19278
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 94.1674104787 
Correct output: 71.9246550776  | Program output: 7.4247964092  
Correct output: -71.7136417398 | Program output: -87.7999947442
Correct output: -86.3636978789 | Program output: -90.7660402256
Correct output: -175.789814475 | Program output: -94.8134394251
Correct output: -67.4831289413 | Program output: -62.823115848 
Correct output: -23.3513071934 | Program output: -11.6195379303
Correct output: -123.1447619871 | Program output: -91.7841240023
Correct output: 24.0076171492  | Program output: 69.1850567648 
Correct output: -50.6702678178 | Program output: -5.7130742458 
Correct output: -128.7993219642 | Program output: -77.6280524768
Correct output: 41.7575748041  | Program output: 98.3942736898 
Correct output: 173.057045519  | Program output: 84.2000052558 
Correct output: -110.0264496737 | Program output: -32.5728631592
Correct output: 11.9743638411  | Program output: 87.2339597744 
Correct output: -2.4287759947  | Program output: 93.3219850789 
Correct output: -60.8453890801 | Program output: -43.7962474032
Correct output: -119.1994005588 | Program output: -94.8134394251
Correct output: -1.7396856728  | Program output: 27.330889262  
Correct output: 51.2300489273  | Program output: -8.6661415626 
Correct output: 185.9904753477 | Program output: 94.1674104787 
Correct output: 42.4470677171  | Program output: -12.8414656934
Correct output: 53.3134494099  | Program output: 32.3860487882 
Correct output: -33.8727861409 | Program output: 61.4755101744 
Correct output: 127.8115346332 | Program output: 95.4339414562 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction print_float} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_dec} {:instruction float_sub} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_div})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_dec float_flush integer_dup_items float_dup_times print_float float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_cos float_sin print_integer float_yankdup float_inc integer_dec float_sub print_float float_sin integer_sub float_frominteger integer_sub float_min integer_shove float_frominteger float_mult integer_swap integer_dup_items integer_flush integer_dup_times integer_dup_times float_max float_inc integer_yankdup integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank float_sin print_integer integer_stackdepth tag_float_475 print_float float_shove float_frominteger float_div)
Errors: [97.3548 10 64.4999 9 16.0864 10 4.4023 11 80.9764 11 4.66 8 11.7318 10 31.3606 12 45.1774 10 44.9572 9 51.1713 12 56.6367 11 88.857 10 77.4536 13 75.2596 12 95.7508 10 17.0491 12 24.386 12 29.0706 9 59.8962 11 91.8231 10 55.2885 10 20.9274 10 95.3483 11 32.3776 12]
Total: 1537.5026
Mean: 30.750051
Genome size: 81
Size: 82
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4158.546758999994
Median total errors in population: 1542.5675999999999
Error averages by case: (196.51858389999964 10.711 149.4523854999986 10.377 129.7414378000006 10.852 121.89192920000121 10.551 190.42129190000244 11.461 120.6430230000005 9.375 121.3796376999993 10.98 148.9330261000007 12.583 144.19381430000038 10.105 150.22140800000025 10.542 164.99911309999897 12.345 157.5434469000006 11.395 189.4986793999992 10.845 181.60171910000068 11.526 168.70369970000004 11.559 186.7068287999996 10.403 129.52522090000068 11.433 140.56518109999976 12.644 129.0460188000005 10.486 162.93225889999957 11.47 191.61295139999942 10.675 155.95937499999874 11.997 122.51701390000079 10.166 186.41215610000017 11.324 140.05255850000233 11.669)
Error minima by case: (94.7235 9 9.5175 7 10.069 8 1.6363 8 80.9764 9 4.66 8 9.3111 9 31.3606 9 4.0076 8 3.4169 7 50.9581 10 21.7576 7 86.1336 9 30.4075 8 1.9744 6 1.5195 8 17.0491 8 24.386 9 0.315 8 6.1618 9 89.1918 9 10.485 8 18.4649 7 10.1491 9 29.8864 9)
Average genome size in population (length): 74.198
Average program size in population (points): 75.198
Average percent parens in population: 0.014
Minimum age in population: 8.875
Maximum age in population: 13.75
Average age in population: 12.082953125
Median age in population: 12.109375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.145
Error (vector) diversity:			 0.151
Behavioral diversity:				 0.152
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 14265659
--- Timings ---
Current time: 1529615963704 milliseconds
Total Time:          34.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.6 seconds, 39.7%
Fitness Testing:     16.0 seconds, 46.8%
Report:               4.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 67307.1315
Test mean error for best: 33.65357
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 156.5532307011
Correct output: 71.9246550776  | Program output: 16.5539901056 
Correct output: -71.7136417398 | Program output: -148.6446400531
Correct output: -86.3636978789 | Program output: -94.3885148905
Correct output: -175.789814475 | Program output: -116.0685291269
Correct output: -67.4831289413 | Program output: -102.0046923561
Correct output: -23.3513071934 | Program output: -18.3441965569
Correct output: -123.1447619871 | Program output: -157.7052094743
Correct output: 24.0076171492  | Program output: 120.4573770814
Correct output: -50.6702678178 | Program output: -7.2316847061 
Correct output: -128.7993219642 | Program output: -57.1363694684
Correct output: 41.7575748041  | Program output: 71.6529755259 
Correct output: 173.057045519  | Program output: 148.6446400531
Correct output: -110.0264496737 | Program output: -20.7436363592
Correct output: 11.9743638411  | Program output: 94.3885148905 
Correct output: -2.4287759947  | Program output: 79.9863900974 
Correct output: -60.8453890801 | Program output: -72.8603337093
Correct output: -119.1994005588 | Program output: -116.0685291269
Correct output: -1.7396856728  | Program output: 52.8959184433 
Correct output: 51.2300489273  | Program output: -5.7324402928 
Correct output: 185.9904753477 | Program output: 156.5532307011
Correct output: 42.4470677171  | Program output: -16.6231290574
Correct output: 53.3134494099  | Program output: 62.3979228718 
Correct output: -33.8727861409 | Program output: 38.2763517492 
Correct output: 127.8115346332 | Program output: 178.4756123941
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_sub} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_fromfloat float_div float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_mult float_sub print_float float_sin integer_sub float_frominteger integer_sub float_min integer_shove float_frominteger float_mult integer_swap integer_dup_items integer_flush integer_dup_times integer_dup_times float_max float_inc integer_yankdup integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank float_sin print_integer integer_stackdepth tag_float_475 print_float float_cos float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [34.969 9 55.3707 11 76.931 11 8.0248 10 59.7213 11 34.5216 12 5.0071 11 34.5604 11 96.4498 10 43.4386 11 71.663 11 29.8954 9 24.4124 10 89.2828 12 82.4142 11 82.4152 11 12.0149 10 3.1309 11 54.6356 11 56.9625 9 29.4372 12 59.0702 12 9.0845 11 72.1491 10 50.6641 11]
Total: 1444.2263000000003
Mean: 28.884525
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4245.698928300007
Median total errors in population: 1541.5026
Error averages by case: (196.62077830000035 10.653 150.91602039999853 10.264 136.5032710000004 10.799 127.83683460000117 10.823 196.4012898000036 11.482 127.54061100000123 9.13 129.9388514999985 10.769 154.34927780000154 12.53 144.30564319999945 10.342 157.58748270000115 10.43 170.51426189999773 12.378 157.66620010000113 11.327 188.9939450999986 10.614 188.54329190000115 11.938 168.13383979999904 11.946 184.84703750000065 10.465 136.58802810000105 11.871 146.82809549999934 12.504 129.23409960000143 10.021 168.5894988999985 11.486 191.72989910000052 10.38 163.4930586999983 11.651 124.18663280000057 10.106 186.49899250000146 11.521 140.38498650000278 12.037)
Error minima by case: (3.6452 8 9.5175 7 2.9141 8 1.6363 7 59.7213 8 4.6444 7 5.0071 8 8.367 9 14.0076 8 3.4169 9 7.7903 9 17.0906 7 12.143 7 30.4075 8 0.1143 7 0.9144 8 8.098 8 3.1309 9 0.2253 7 6.1618 8 9.1769 8 10.485 9 2.0655 7 30.5197 9 29.8115 9)
Average genome size in population (length): 80.979
Average program size in population (points): 81.979
Average percent parens in population: 0.013
Minimum age in population: 11.515625
Maximum age in population: 15.6484375
Average age in population: 13.65091796875
Median age in population: 13.6953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.133
Error (vector) diversity:			 0.146
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 16315984
--- Timings ---
Current time: 1529615967909 milliseconds
Total Time:          38.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.0 seconds, 39.1%
Fitness Testing:     18.2 seconds, 47.5%
Report:               5.0 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 67307.1315
Test mean error for best: 33.65357
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 156.5532307011
Correct output: 71.9246550776  | Program output: 16.5539901056 
Correct output: -71.7136417398 | Program output: -148.6446400531
Correct output: -86.3636978789 | Program output: -94.3885148905
Correct output: -175.789814475 | Program output: -116.0685291269
Correct output: -67.4831289413 | Program output: -102.0046923561
Correct output: -23.3513071934 | Program output: -18.3441965569
Correct output: -123.1447619871 | Program output: -157.7052094743
Correct output: 24.0076171492  | Program output: 120.4573770814
Correct output: -50.6702678178 | Program output: -7.2316847061 
Correct output: -128.7993219642 | Program output: -57.1363694684
Correct output: 41.7575748041  | Program output: 71.6529755259 
Correct output: 173.057045519  | Program output: 148.6446400531
Correct output: -110.0264496737 | Program output: -20.7436363592
Correct output: 11.9743638411  | Program output: 94.3885148905 
Correct output: -2.4287759947  | Program output: 79.9863900974 
Correct output: -60.8453890801 | Program output: -72.8603337093
Correct output: -119.1994005588 | Program output: -116.0685291269
Correct output: -1.7396856728  | Program output: 52.8959184433 
Correct output: 51.2300489273  | Program output: -5.7324402928 
Correct output: 185.9904753477 | Program output: 156.5532307011
Correct output: 42.4470677171  | Program output: -16.6231290574
Correct output: 53.3134494099  | Program output: 62.3979228718 
Correct output: -33.8727861409 | Program output: 38.2763517492 
Correct output: 127.8115346332 | Program output: 178.4756123941
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_fromfloat})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_fromfloat float_div float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger float_dec float_flush float_flush float_swap float_dup_items integer_yank float_sin print_integer integer_stackdepth tag_float_475 print_float float_shove float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_fromfloat)
Errors: [34.969 9 55.3707 11 76.931 11 8.0248 10 59.7213 11 34.5216 12 5.0071 11 34.5604 11 96.4498 10 43.4386 11 71.663 11 29.8954 9 24.4124 10 89.2828 12 82.4142 11 82.4152 11 12.0149 10 3.1309 11 54.6356 11 56.9625 9 29.4372 12 59.0702 12 9.0845 11 72.1491 10 50.6641 11]
Total: 1444.2263000000003
Mean: 28.884525
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4339.7071513999945
Median total errors in population: 1540.9885
Error averages by case: (199.57877589999964 10.603 148.92298259999865 9.64 142.75502170000067 11.034 132.4614364000012 11.163 200.99325140000317 11.462 133.1105632999998 9.458 133.53089409999976 11.062 158.27314370000013 12.817 149.1387848000004 9.722 160.82201290000023 10.044 173.25336349999776 12.355 160.4764819000003 10.968 191.36889389999874 10.618 192.82245080000155 11.369 172.65279989999985 11.296 190.7057930999993 10.178 142.36150280000095 11.257 151.70301059999994 12.796 132.00738220000028 10.677 171.26097839999923 11.744 194.69976889999893 11.326 168.8180566999987 11.872 127.009527800001 10.753 190.9385270999997 11.479 142.94474700000262 11.404)
Error minima by case: (3.6452 9 9.0753 8 3.9141 8 1.6363 8 59.7213 8 4.5855 7 5.0071 8 8.367 9 14.0076 8 0.3297 9 7.7903 9 19.8151 7 10.4124 7 55.9123 8 1.9744 7 1.4288 8 8.098 8 3.1309 9 0.2485 7 2.23 8 9.1769 8 32.4471 10 2.0655 8 28.6027 10 29.8115 8)
Average genome size in population (length): 81.247
Average program size in population (points): 82.247
Average percent parens in population: 0.012
Minimum age in population: 12.65625
Maximum age in population: 16.814453125
Average age in population: 15.181697265625
Median age in population: 15.263671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.141
Error (vector) diversity:			 0.146
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 18374809
--- Timings ---
Current time: 1529615971882 milliseconds
Total Time:          42.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.4 seconds, 38.7%
Fitness Testing:     20.2 seconds, 47.6%
Report:               5.7 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 67307.1315
Test mean error for best: 33.65357
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 156.5532307011
Correct output: 71.9246550776  | Program output: 16.5539901056 
Correct output: -71.7136417398 | Program output: -148.6446400531
Correct output: -86.3636978789 | Program output: -94.3885148905
Correct output: -175.789814475 | Program output: -116.0685291269
Correct output: -67.4831289413 | Program output: -102.0046923561
Correct output: -23.3513071934 | Program output: -18.3441965569
Correct output: -123.1447619871 | Program output: -157.7052094743
Correct output: 24.0076171492  | Program output: 120.4573770814
Correct output: -50.6702678178 | Program output: -7.2316847061 
Correct output: -128.7993219642 | Program output: -57.1363694684
Correct output: 41.7575748041  | Program output: 71.6529755259 
Correct output: 173.057045519  | Program output: 148.6446400531
Correct output: -110.0264496737 | Program output: -20.7436363592
Correct output: 11.9743638411  | Program output: 94.3885148905 
Correct output: -2.4287759947  | Program output: 79.9863900974 
Correct output: -60.8453890801 | Program output: -72.8603337093
Correct output: -119.1994005588 | Program output: -116.0685291269
Correct output: -1.7396856728  | Program output: 52.8959184433 
Correct output: 51.2300489273  | Program output: -5.7324402928 
Correct output: 185.9904753477 | Program output: 156.5532307011
Correct output: 42.4470677171  | Program output: -16.6231290574
Correct output: 53.3134494099  | Program output: 62.3979228718 
Correct output: -33.8727861409 | Program output: 38.2763517492 
Correct output: 127.8115346332 | Program output: 178.4756123941
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_sub} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_fromfloat float_div float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_mult float_sub print_float float_sin integer_sub float_frominteger print_float float_min integer_shove float_frominteger float_mult integer_swap integer_dup_items integer_flush integer_dup_times integer_dup_times float_max float_inc integer_yankdup integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank float_sin float_dup_times integer_stackdepth tag_float_475 print_float float_cos float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [34.969 9 55.3707 11 76.931 11 8.0248 10 59.7213 11 34.5216 12 5.0071 11 34.5604 11 96.4498 10 43.4386 11 71.663 11 29.8954 9 24.4124 10 89.2828 12 82.4142 11 82.4152 11 12.0149 10 3.1309 11 54.6356 11 56.9625 9 29.4372 12 59.0702 12 9.0845 11 72.1491 10 50.6641 11]
Total: 1444.2263000000003
Mean: 28.884525
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4027.8612428999954
Median total errors in population: 1540.9885
Error averages by case: (186.1707887999998 10.7 143.8387456999989 9.663 129.0076575000004 10.823 118.78311640000096 11.36 187.77717820000294 11.387 119.15128569999995 9.607 122.07554459999983 11.183 143.74840910000015 12.634 135.2558833000011 9.795 151.37220619999945 9.866 161.28441579999898 12.233 145.72189099999994 10.934 177.92861429999903 10.724 182.12006140000133 11.629 159.53604849999982 11.253 176.18721139999894 10.246 128.52371330000062 11.343 137.52497840000044 12.649 119.78172340000017 10.591 163.28016919999925 11.6 181.17525729999892 11.52 159.25246039999865 11.628 114.69214190000092 10.915 177.20569929999982 11.542 129.19304180000202 11.448)
Error minima by case: (4.4778 9 10.8393 8 2.5358 8 1.6363 8 59.7213 9 3.66 7 5.0071 8 28.1448 9 12.0076 8 2.1921 8 33.7993 9 29.7576 7 12.943 9 15.0264 9 0.0256 7 0.9138 8 12.0149 8 3.1309 9 0.0871 8 6.1811 8 10.0095 9 9.4888 8 9.0845 7 9.466 10 29.8115 7)
Average genome size in population (length): 83.076
Average program size in population (points): 84.076
Average percent parens in population: 0.012
Minimum age in population: 14.296875
Maximum age in population: 18.595703125
Average age in population: 16.7066669921875
Median age in population: 16.7626953125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.159
Error (vector) diversity:			 0.165
Behavioral diversity:				 0.166
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 20481384
--- Timings ---
Current time: 1529615975775 milliseconds
Total Time:          46.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        17.8 seconds, 38.5%
Fitness Testing:     22.1 seconds, 47.8%
Report:               6.2 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 67307.1315
Test mean error for best: 33.65357
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 156.5532307011
Correct output: 71.9246550776  | Program output: 16.5539901056 
Correct output: -71.7136417398 | Program output: -148.6446400531
Correct output: -86.3636978789 | Program output: -94.3885148905
Correct output: -175.789814475 | Program output: -116.0685291269
Correct output: -67.4831289413 | Program output: -102.0046923561
Correct output: -23.3513071934 | Program output: -18.3441965569
Correct output: -123.1447619871 | Program output: -157.7052094743
Correct output: 24.0076171492  | Program output: 120.4573770814
Correct output: -50.6702678178 | Program output: -7.2316847061 
Correct output: -128.7993219642 | Program output: -57.1363694684
Correct output: 41.7575748041  | Program output: 71.6529755259 
Correct output: 173.057045519  | Program output: 148.6446400531
Correct output: -110.0264496737 | Program output: -20.7436363592
Correct output: 11.9743638411  | Program output: 94.3885148905 
Correct output: -2.4287759947  | Program output: 79.9863900974 
Correct output: -60.8453890801 | Program output: -72.8603337093
Correct output: -119.1994005588 | Program output: -116.0685291269
Correct output: -1.7396856728  | Program output: 52.8959184433 
Correct output: 51.2300489273  | Program output: -5.7324402928 
Correct output: 185.9904753477 | Program output: 156.5532307011
Correct output: 42.4470677171  | Program output: -16.6231290574
Correct output: 53.3134494099  | Program output: 62.3979228718 
Correct output: -33.8727861409 | Program output: 38.2763517492 
Correct output: 127.8115346332 | Program output: 178.4756123941
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_sub} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_fromfloat float_div float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_mult float_sub print_float float_sin integer_sub float_frominteger print_float float_min integer_shove float_frominteger float_min integer_shove float_frominteger float_mult integer_swap integer_dup_items integer_flush integer_dup_times integer_dup_times float_max float_inc integer_yankdup integer_add print_float in2 float_tan float_dup integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank float_sin float_dup_times integer_stackdepth tag_float_475 print_float float_cos float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [34.969 9 55.3707 11 76.931 11 8.0248 10 59.7213 11 34.5216 12 5.0071 11 34.5604 11 96.4498 10 43.4386 11 71.663 11 29.8954 9 24.4124 10 89.2828 12 82.4142 11 82.4152 11 12.0149 10 3.1309 11 54.6356 11 56.9625 9 29.4372 12 59.0702 12 9.0845 11 72.1491 10 50.6641 11]
Total: 1444.2263000000003
Mean: 28.884525
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4044.8602344000005
Median total errors in population: 1537.5026
Error averages by case: (184.13849540000075 10.52 144.37487079999877 9.991 134.44765309999988 10.602 120.1938752000007 11.265 186.56581740000283 11.347 121.8903893000012 9.585 119.94677149999877 10.882 144.90829450000072 12.18 142.7853468999998 10.457 148.94954630000043 9.997 163.12735969999926 12.127 144.67605270000124 11.024 175.72273189999976 10.605 183.00326659999996 12.714 161.85751189999976 11.876 176.40153449999983 10.621 127.98130010000058 11.892 136.51139629999932 12.164 124.37762750000137 9.95 161.02865829999953 11.07 179.2378079999994 10.959 157.6290967999983 11.034 116.3506742000002 10.648 176.8861616000011 11.369 134.98699390000183 12.002)
Error minima by case: (2.494 8 3.756 8 2.9141 6 1.1219 8 7.1399 8 3.66 7 2.8441 8 30.3606 9 15.1121 8 39.818 8 5.0673 8 13.4106 7 11.0157 8 30.2677 8 6.5858 7 0.5712 9 11.0149 8 3.1309 9 0.0791 8 1.23 8 8.0258 9 18.8049 8 1.5609 7 9.1491 8 24.0961 8)
Average genome size in population (length): 85.9
Average program size in population (points): 86.9
Average percent parens in population: 0.012
Minimum age in population: 15.296875
Maximum age in population: 20.16796875
Average age in population: 18.22379052734375
Median age in population: 18.26513671875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.835
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.835
Total error diversity:				 0.157
Error (vector) diversity:			 0.165
Behavioral diversity:				 0.168
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 22660884
--- Timings ---
Current time: 1529615979906 milliseconds
Total Time:          50.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.4 seconds, 38.4%
Fitness Testing:     24.2 seconds, 47.9%
Report:               6.8 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 67307.1315
Test mean error for best: 33.65357
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 156.5532307011
Correct output: 71.9246550776  | Program output: 16.5539901056 
Correct output: -71.7136417398 | Program output: -148.6446400531
Correct output: -86.3636978789 | Program output: -94.3885148905
Correct output: -175.789814475 | Program output: -116.0685291269
Correct output: -67.4831289413 | Program output: -102.0046923561
Correct output: -23.3513071934 | Program output: -18.3441965569
Correct output: -123.1447619871 | Program output: -157.7052094743
Correct output: 24.0076171492  | Program output: 120.4573770814
Correct output: -50.6702678178 | Program output: -7.2316847061 
Correct output: -128.7993219642 | Program output: -57.1363694684
Correct output: 41.7575748041  | Program output: 71.6529755259 
Correct output: 173.057045519  | Program output: 148.6446400531
Correct output: -110.0264496737 | Program output: -20.7436363592
Correct output: 11.9743638411  | Program output: 94.3885148905 
Correct output: -2.4287759947  | Program output: 79.9863900974 
Correct output: -60.8453890801 | Program output: -72.8603337093
Correct output: -119.1994005588 | Program output: -116.0685291269
Correct output: -1.7396856728  | Program output: 52.8959184433 
Correct output: 51.2300489273  | Program output: -5.7324402928 
Correct output: 185.9904753477 | Program output: 156.5532307011
Correct output: 42.4470677171  | Program output: -16.6231290574
Correct output: 53.3134494099  | Program output: 62.3979228718 
Correct output: -33.8727861409 | Program output: 38.2763517492 
Correct output: 127.8115346332 | Program output: 178.4756123941
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_sub} {:instruction print_float} {:instruction float_sin} {:instruction integer_sub} {:instruction float_frominteger} {:instruction print_float} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_max} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_cos} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_fromfloat float_div float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_mult float_sub print_float float_sin integer_sub float_frominteger print_float float_min integer_shove float_frominteger float_mult integer_swap integer_dup_items integer_flush integer_dup_times integer_dup_times float_max float_inc integer_yankdup integer_add print_float in2 integer_max integer_flush float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank integer_inc tagged_159 float_inc float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank integer_stackdepth tag_float_475 print_float float_cos float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [34.969 9 55.3707 11 76.931 11 8.0248 10 59.7213 11 34.5216 12 5.0071 11 34.5604 11 96.4498 10 43.4386 11 71.663 11 29.8954 9 24.4124 10 89.2828 12 82.4142 11 82.4152 11 12.0149 10 3.1309 11 54.6356 11 56.9625 9 29.4372 12 59.0702 12 9.0845 11 72.1491 10 50.6641 11]
Total: 1444.2263000000003
Mean: 28.884525
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3232.762251299996
Median total errors in population: 1536.4795999999997
Error averages by case: (139.1794832999997 10.081 113.43969009999954 10.429 119.07167259999926 10.831 89.6907538000001 10.829 148.0523848000011 11.199 95.56054929999961 10.523 81.5395187000006 10.965 113.26534490000031 11.706 127.84946220000066 10.321 113.51118669999913 10.412 135.55054510000048 11.605 110.39717899999944 10.347 129.73913210000094 10.431 151.2494124999991 12.379 137.25494119999993 11.494 146.29366999999968 10.819 90.62426439999955 11.112 96.91020789999978 11.728 100.50997269999984 10.382 125.06541249999901 10.309 134.11702749999912 11.366 123.47441899999978 11.429 81.7584959999995 10.85 141.53262109999923 10.965 113.03190389999996 11.581)
Error minima by case: (2.4776 8 10.5175 7 0.8416 8 0.6381 8 6.1413 8 3.66 8 4.1796 7 3.5085 9 11.4639 8 2.4169 8 2.0909 6 8.0132 8 1.1461 7 29.4075 9 6.522 8 0.8281 7 3.6846 7 2.8057 9 0.0365 7 1.23 8 3.0542 7 9.485 9 0.792 8 8.0628 9 12.3291 8)
Average genome size in population (length): 87.421
Average program size in population (points): 88.421
Average percent parens in population: 0.011
Minimum age in population: 16.8369140625
Maximum age in population: 21.754150390625
Average age in population: 19.57565161132812
Median age in population: 19.5872802734375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.155
Error (vector) diversity:			 0.162
Behavioral diversity:				 0.164
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 24881659
--- Timings ---
Current time: 1529615983868 milliseconds
Total Time:          54.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.6 seconds, 38.0%
Fitness Testing:     26.2 seconds, 48.2%
Report:               7.3 seconds, 13.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 67307.1315
Test mean error for best: 33.65357
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 156.5532307011
Correct output: 71.9246550776  | Program output: 16.5539901056 
Correct output: -71.7136417398 | Program output: -148.6446400531
Correct output: -86.3636978789 | Program output: -94.3885148905
Correct output: -175.789814475 | Program output: -116.0685291269
Correct output: -67.4831289413 | Program output: -102.0046923561
Correct output: -23.3513071934 | Program output: -18.3441965569
Correct output: -123.1447619871 | Program output: -157.7052094743
Correct output: 24.0076171492  | Program output: 120.4573770814
Correct output: -50.6702678178 | Program output: -7.2316847061 
Correct output: -128.7993219642 | Program output: -57.1363694684
Correct output: 41.7575748041  | Program output: 71.6529755259 
Correct output: 173.057045519  | Program output: 148.6446400531
Correct output: -110.0264496737 | Program output: -20.7436363592
Correct output: 11.9743638411  | Program output: 94.3885148905 
Correct output: -2.4287759947  | Program output: 79.9863900974 
Correct output: -60.8453890801 | Program output: -72.8603337093
Correct output: -119.1994005588 | Program output: -116.0685291269
Correct output: -1.7396856728  | Program output: 52.8959184433 
Correct output: 51.2300489273  | Program output: -5.7324402928 
Correct output: 185.9904753477 | Program output: 156.5532307011
Correct output: 42.4470677171  | Program output: -16.6231290574
Correct output: 53.3134494099  | Program output: 62.3979228718 
Correct output: -33.8727861409 | Program output: 38.2763517492 
Correct output: 127.8115346332 | Program output: 178.4756123941
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_fromfloat})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_fromfloat float_div float_tan float_flush float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger float_dec float_flush float_flush float_swap float_dup_items integer_yank float_sin print_integer integer_stackdepth tag_float_475 print_float float_shove float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_fromfloat)
Errors: [34.969 9 55.3707 11 76.931 11 8.0248 10 59.7213 11 34.5216 12 5.0071 11 34.5604 11 96.4498 10 43.4386 11 71.663 11 29.8954 9 24.4124 10 89.2828 12 82.4142 11 82.4152 11 12.0149 10 3.1309 11 54.6356 11 56.9625 9 29.4372 12 59.0702 12 9.0845 11 72.1491 10 50.6641 11]
Total: 1444.2263000000003
Mean: 28.884525
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3714.339253299986
Median total errors in population: 1444.2263000000003
Error averages by case: (138.07217259999902 9.593 124.50733929999969 11.117 165.02365100000003 11.281 112.70006849999949 10.576 161.4779048000017 11.326 129.9668617999974 11.997 96.34271650000107 11.227 136.79137440000068 11.479 171.23394590000112 10.374 129.01127329999804 11.122 164.3469015000003 11.404 122.88484999999818 9.641 127.3016236000006 10.354 174.5401981999981 12.049 162.3239654999995 11.265 163.56564239999983 11.248 111.38933279999867 10.401 111.86257220000053 11.471 127.95908019999818 11.122 140.2242682999979 9.578 133.1229614999999 12.1 141.5602966000003 12.068 95.3031390999988 11.187 154.39646409999946 10.453 142.67664919999822 11.321)
Error minima by case: (1.0978 7 7.369 8 0.647 6 1.6363 8 6.1413 7 3.66 8 0.1255 7 4.8956 8 11.4639 8 9.0745 8 1.9898 8 7.6059 7 15.8792 8 19.6694 8 1.2476 8 0.2261 8 4.8701 8 2.5862 9 0.463 7 9.23 8 4.4339 9 32.4426 9 1.3246 8 0.9721 7 6.0104 8)
Average genome size in population (length): 89.025
Average program size in population (points): 90.025
Average percent parens in population: 0.011
Minimum age in population: 18.376953125
Maximum age in population: 22.89697265625
Average age in population: 21.02264343261719
Median age in population: 21.045166015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.864
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.864
Total error diversity:				 0.12
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.127
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 27145234
--- Timings ---
Current time: 1529615988108 milliseconds
Total Time:          58.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.0 seconds, 37.6%
Fitness Testing:     28.5 seconds, 48.6%
Report:               8.0 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 65474.23310000005
Test mean error for best: 32.73712
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 149.3892735772
Correct output: 71.9246550776  | Program output: 15.0821724818 
Correct output: -71.7136417398 | Program output: -139.0812477957
Correct output: -86.3636978789 | Program output: -96.3170225392
Correct output: -175.789814475 | Program output: -116.0907843937
Correct output: -67.4831289413 | Program output: -96.5710780616
Correct output: -23.3513071934 | Program output: -16.7344546772
Correct output: -123.1447619871 | Program output: -146.7716514259
Correct output: 24.0076171492  | Program output: 113.4774926906
Correct output: -50.6702678178 | Program output: -6.6415037241 
Correct output: -128.7993219642 | Program output: -63.9675486455
Correct output: 41.7575748041  | Program output: 81.873904991  
Correct output: 173.057045519  | Program output: 139.0812477957
Correct output: -110.0264496737 | Program output: -24.4791279468
Correct output: 11.9743638411  | Program output: 96.3170225392 
Correct output: -2.4287759947  | Program output: 85.9828502001 
Correct output: -60.8453890801 | Program output: -68.0771890578
Correct output: -119.1994005588 | Program output: -116.0907843937
Correct output: -1.7396856728  | Program output: 48.3830986335 
Correct output: 51.2300489273  | Program output: -6.2177859592 
Correct output: 185.9904753477 | Program output: 149.3892735772
Correct output: 42.4470677171  | Program output: -16.1695976239
Correct output: 53.3134494099  | Program output: 56.9104354802 
Correct output: -33.8727861409 | Program output: 47.5574875548 
Correct output: 127.8115346332 | Program output: 162.5810537164
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_pop} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction float_cos} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_max} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_fromfloat})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_mod integer_flush integer_add integer_pop float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float float_cos float_min integer_shove float_frominteger float_mult integer_sub integer_stackdepth float_stackdepth integer_max print_float in2 integer_max integer_shove float_tan float_dup tag_float_475 print_float float_shove float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_fromfloat)
Errors: [42.1329 11 56.8425 12 67.3676 11 9.9533 10 59.699 11 29.0879 10 6.6169 12 23.6269 11 89.4699 12 44.0288 11 64.8318 11 40.1163 9 33.9758 10 85.5473 13 84.3427 12 88.4116 11 7.2318 8 3.1086 10 50.1228 10 57.4478 10 36.6012 9 58.6167 12 3.597 8 81.4303 12 34.7695 9]
Total: 1423.9769000000003
Mean: 28.479538
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3732.2373028999855
Median total errors in population: 1444.2263000000003
Error averages by case: (133.50562419999875 9.646 126.21606019999976 11.222 167.33144949999976 11.346 114.84860899999937 10.633 164.8098266000018 11.38 133.83070369999734 12.131 103.03083570000126 11.29 138.92804120000034 11.559 167.7126615000012 10.444 135.9533666999979 11.236 169.3048002000004 11.46 119.01745699999813 9.687 122.10167520000068 10.422 181.28226189999822 12.14 155.92418669999944 11.314 160.16442109999997 11.337 115.37644139999831 10.46 115.71278970000063 11.534 124.79925409999818 11.221 147.22345319999778 9.594 128.53811920000018 12.165 147.39792649999978 12.156 92.06217019999866 11.261 150.9950496999992 10.52 138.61811849999788 11.394)
Error minima by case: (1.0978 7 7.369 8 0.647 6 1.5757 7 7.1399 8 4.8109 9 3.4805 7 10.8051 8 3.1616 8 9.6398 8 2.0909 6 7.6059 7 16.8792 6 49.7077 9 0.1143 8 1.4365 9 1.329 8 2.8057 9 0.2346 7 9.23 6 4.4339 9 20.4374 9 1.3246 8 7.7965 9 6.0104 8)
Average genome size in population (length): 88.44
Average program size in population (points): 89.44
Average percent parens in population: 0.011
Minimum age in population: 19.970703125
Maximum age in population: 24.44073486328125
Average age in population: 22.51349169921875
Median age in population: 22.56021118164062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.132
Error (vector) diversity:			 0.137
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 29393784
--- Timings ---
Current time: 1529615992003 milliseconds
Total Time:          62.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.3 seconds, 37.3%
Fitness Testing:     30.6 seconds, 49.0%
Report:               8.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 65474.23310000005
Test mean error for best: 32.73712
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 149.3892735772
Correct output: 71.9246550776  | Program output: 15.0821724818 
Correct output: -71.7136417398 | Program output: -139.0812477957
Correct output: -86.3636978789 | Program output: -96.3170225392
Correct output: -175.789814475 | Program output: -116.0907843937
Correct output: -67.4831289413 | Program output: -96.5710780616
Correct output: -23.3513071934 | Program output: -16.7344546772
Correct output: -123.1447619871 | Program output: -146.7716514259
Correct output: 24.0076171492  | Program output: 113.4774926906
Correct output: -50.6702678178 | Program output: -6.6415037241 
Correct output: -128.7993219642 | Program output: -63.9675486455
Correct output: 41.7575748041  | Program output: 81.873904991  
Correct output: 173.057045519  | Program output: 139.0812477957
Correct output: -110.0264496737 | Program output: -24.4791279468
Correct output: 11.9743638411  | Program output: 96.3170225392 
Correct output: -2.4287759947  | Program output: 85.9828502001 
Correct output: -60.8453890801 | Program output: -68.0771890578
Correct output: -119.1994005588 | Program output: -116.0907843937
Correct output: -1.7396856728  | Program output: 48.3830986335 
Correct output: 51.2300489273  | Program output: -6.2177859592 
Correct output: 185.9904753477 | Program output: 149.3892735772
Correct output: 42.4470677171  | Program output: -16.1695976239
Correct output: 53.3134494099  | Program output: 56.9104354802 
Correct output: -33.8727861409 | Program output: 47.5574875548 
Correct output: 127.8115346332 | Program output: 162.5810537164
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction float_cos} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_max} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_fromfloat})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_mod integer_flush integer_dup_items integer_pop float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float float_cos float_min integer_shove float_frominteger float_mult integer_sub integer_stackdepth float_stackdepth integer_max print_float in2 integer_max integer_shove float_tan float_dup tag_float_475 print_float float_shove float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_fromfloat)
Errors: [42.1329 11 56.8425 12 67.3676 11 9.9533 10 59.699 11 29.0879 10 6.6169 12 23.6269 11 89.4699 12 44.0288 11 64.8318 11 40.1163 9 33.9758 10 85.5473 13 84.3427 12 88.4116 11 7.2318 8 3.1086 10 50.1228 10 57.4478 10 36.6012 9 58.6167 12 3.597 8 81.4303 12 34.7695 9]
Total: 1423.9769000000003
Mean: 28.479538
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3646.988569799985
Median total errors in population: 1444.2263000000003
Error averages by case: (129.26817479999858 9.603 121.65260869999969 11.154 165.50746990000084 11.323 112.19619739999948 10.578 159.18354250000186 11.327 128.66279439999693 12.094 96.82500910000124 11.216 134.90475570000098 11.472 167.31049330000118 10.401 129.7152197999977 11.216 163.1133894000004 11.368 120.42950499999786 9.611 118.15306480000078 10.376 173.3964310999972 12.112 159.20012559999952 11.3 161.3714180999992 11.302 108.67577869999825 10.368 110.4118414000008 11.434 124.71421159999797 11.178 141.5158182999976 9.538 124.30492630000013 12.145 142.9161283000002 12.116 89.28663499999861 11.184 150.33747159999967 10.478 137.69555899999787 11.346)
Error minima by case: (0.3052 4 18.0753 5 0.8416 7 1.5758 8 5.4084 5 4.8109 3 0.1255 5 10.8051 4 8.7387 8 8.761 4 0.8951 5 13.4106 7 2.1233 5 49.7723 4 5.5858 9 2.2701 4 4.8701 5 2.3867 5 1.1788 4 9.23 4 5.837 5 36.8239 5 0.617 5 8.466 4 21.8261 5)
Average genome size in population (length): 87.903
Average program size in population (points): 88.903
Average percent parens in population: 0.011
Minimum age in population: 21.6494140625
Maximum age in population: 25.98974609375
Average age in population: 23.97583450317383
Median age in population: 24.00544738769531
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.122
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 31628434
--- Timings ---
Current time: 1529615995865 milliseconds
Total Time:          66.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.7 seconds, 37.2%
Fitness Testing:     32.6 seconds, 49.0%
Report:               9.1 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 65474.23310000005
Test mean error for best: 32.73712
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 149.3892735772
Correct output: 71.9246550776  | Program output: 15.0821724818 
Correct output: -71.7136417398 | Program output: -139.0812477957
Correct output: -86.3636978789 | Program output: -96.3170225392
Correct output: -175.789814475 | Program output: -116.0907843937
Correct output: -67.4831289413 | Program output: -96.5710780616
Correct output: -23.3513071934 | Program output: -16.7344546772
Correct output: -123.1447619871 | Program output: -146.7716514259
Correct output: 24.0076171492  | Program output: 113.4774926906
Correct output: -50.6702678178 | Program output: -6.6415037241 
Correct output: -128.7993219642 | Program output: -63.9675486455
Correct output: 41.7575748041  | Program output: 81.873904991  
Correct output: 173.057045519  | Program output: 139.0812477957
Correct output: -110.0264496737 | Program output: -24.4791279468
Correct output: 11.9743638411  | Program output: 96.3170225392 
Correct output: -2.4287759947  | Program output: 85.9828502001 
Correct output: -60.8453890801 | Program output: -68.0771890578
Correct output: -119.1994005588 | Program output: -116.0907843937
Correct output: -1.7396856728  | Program output: 48.3830986335 
Correct output: 51.2300489273  | Program output: -6.2177859592 
Correct output: 185.9904753477 | Program output: 149.3892735772
Correct output: 42.4470677171  | Program output: -16.1695976239
Correct output: 53.3134494099  | Program output: 56.9104354802 
Correct output: -33.8727861409 | Program output: 47.5574875548 
Correct output: 127.8115346332 | Program output: 162.5810537164
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction float_cos} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_max} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_fromfloat})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_mod integer_flush integer_dup_items integer_pop float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float float_cos float_min integer_shove float_frominteger float_mult integer_sub integer_stackdepth float_stackdepth integer_max print_float in2 integer_max integer_shove float_tan float_dup tag_float_475 print_float float_shove float_frominteger float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_fromfloat)
Errors: [42.1329 11 56.8425 12 67.3676 11 9.9533 10 59.699 11 29.0879 10 6.6169 12 23.6269 11 89.4699 12 44.0288 11 64.8318 11 40.1163 9 33.9758 10 85.5473 13 84.3427 12 88.4116 11 7.2318 8 3.1086 10 50.1228 10 57.4478 10 36.6012 9 58.6167 12 3.597 8 81.4303 12 34.7695 9]
Total: 1423.9769000000003
Mean: 28.479538
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3687.5983496999856
Median total errors in population: 1444.2263000000003
Error averages by case: (134.17066099999872 9.701 125.34249139999977 11.144 164.390331 11.349 113.78905309999945 10.577 160.48239220000158 11.352 127.44559119999752 12.031 95.2585419000011 11.298 135.0687441000008 11.494 168.26058360000118 10.464 127.26362309999833 11.225 164.62281520000025 11.425 126.24232319999834 9.706 123.74782830000058 10.407 173.1966763999982 12.079 162.1170465999995 11.255 164.83855449999965 11.288 107.24426059999894 10.374 111.95893470000014 11.476 125.92287879999843 11.159 142.06407969999796 9.626 129.24183640000018 12.134 141.77633990000047 12.128 92.21817799999894 11.182 154.36755369999958 10.551 139.77903109999826 11.363)
Error minima by case: (4.4778 7 18.0753 6 0.647 6 1.6363 9 6.1769 7 3.8109 7 3.4805 7 10.8051 8 11.4639 8 9.2096 7 1.0512 8 13.4106 7 12.943 8 19.6694 8 1.153 8 0.8975 8 3.6298 8 2.1309 8 0.974 8 11.7863 7 7.3024 8 23.9777 8 1.5609 8 8.0628 6 13.6246 8)
Average genome size in population (length): 87.169
Average program size in population (points): 88.169
Average percent parens in population: 0.012
Minimum age in population: 23.17767333984375
Maximum age in population: 27.36178588867188
Average age in population: 25.45926097106934
Median age in population: 25.49101257324219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 3
Genome diversity (% unique Plush genomes):	 0.951
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 3
Syntactic diversity (% unique Push programs):	 0.951
Total error diversity:				 0.132
Error (vector) diversity:			 0.137
Behavioral diversity:				 0.139
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 33844134
--- Timings ---
Current time: 1529616000023 milliseconds
Total Time:          70.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.2 seconds, 37.2%
Fitness Testing:     34.6 seconds, 49.1%
Report:               9.5 seconds, 13.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 65865.7063
Test mean error for best: 32.93285
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 149.3915888474
Correct output: 71.9246550776  | Program output: 15.096433469  
Correct output: -71.7136417398 | Program output: -139.1141701952
Correct output: -86.3636978789 | Program output: -94.3819378794
Correct output: -175.789814475 | Program output: -115.6040060683
Correct output: -67.4831289413 | Program output: -96.577814686 
Correct output: -23.3513071934 | Program output: -16.7495733129
Correct output: -123.1447619871 | Program output: -146.8223736111
Correct output: 24.0076171492  | Program output: 113.4919568083
Correct output: -50.6702678178 | Program output: -6.6461053438 
Correct output: -128.7993219642 | Program output: -57.5166920409
Correct output: 41.7575748041  | Program output: 72.3943180536 
Correct output: 173.057045519  | Program output: 139.1141701952
Correct output: -110.0264496737 | Program output: -21.1059088478
Correct output: 11.9743638411  | Program output: 94.3819378794 
Correct output: -2.4287759947  | Program output: 80.1104528101 
Correct output: -60.8453890801 | Program output: -68.0951174818
Correct output: -119.1994005588 | Program output: -115.6040060683
Correct output: -1.7396856728  | Program output: 48.4226395784 
Correct output: 51.2300489273  | Program output: -5.7461595417 
Correct output: 185.9904753477 | Program output: 149.3915888474
Correct output: 42.4470677171  | Program output: -16.1692988339
Correct output: 53.3134494099  | Program output: 56.9622439279 
Correct output: -33.8727861409 | Program output: 39.4891500506 
Correct output: 127.8115346332 | Program output: 162.7356610776
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_min} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction -33} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_cos} {:instruction integer_mod} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (float_min float_min integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush tagged_313 float_dup_times integer_dup integer_dup integer_fromfloat float_div float_tan float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger float_dec float_flush float_flush float_swap float_dup_items integer_yank float_sin print_integer -33 tag_float_475 print_float float_shove float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_swap float_dup_items integer_yank float_sin float_dup_times integer_stackdepth tag_float_475 print_float float_cos integer_mod float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [42.1306 11 56.8282 11 67.4005 10 8.0182 8 60.1858 11 29.0947 11 6.6017 11 23.6776 10 89.4843 13 44.0242 10 71.2826 13 30.6367 11 33.9429 10 88.9205 11 82.4076 11 82.5392 12 7.2497 9 3.5954 8 50.1623 10 56.9762 12 36.5989 9 58.6164 13 3.6488 9 73.3619 11 34.9241 12]
Total: 1409.3089999999997
Mean: 28.18618
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3907.7379156999864
Median total errors in population: 1444.2263000000003
Error averages by case: (145.3808661999995 9.893 137.25388849999962 11.15 170.4614361000009 11.468 117.78612489999946 10.641 166.46566970000154 11.39 136.96544649999757 11.949 105.69035480000112 11.402 141.87999460000054 11.461 177.23229610000107 10.686 138.161897199998 11.332 170.3197321000004 11.496 131.9915659999981 9.887 134.33035610000044 10.457 182.4858433999976 12.098 167.85800509999947 11.297 171.62616429999878 11.299 118.92950889999848 10.296 117.35495960000043 11.457 139.0014101999988 11.245 148.26501179999798 9.803 140.53777789999967 12.085 148.55200669999965 12.234 108.0270263999986 11.085 164.43418950000083 10.75 148.5283830999982 11.357)
Error minima by case: (0.3052 7 15.8056 8 0.0819 6 1.5758 7 5.4084 7 1.7839 9 3.4805 7 10.8051 8 11.4639 8 10.4122 9 0.8951 6 0.7576 7 1.4909 6 49.7077 8 1.9102 8 1.4365 8 3.6298 8 1.3215 8 1.1512 7 7.5557 6 5.837 7 1.2272 9 0.4908 8 9.1491 9 12.4897 8)
Average genome size in population (length): 85.989
Average program size in population (points): 86.989
Average percent parens in population: 0.012
Minimum age in population: 24.295166015625
Maximum age in population: 28.72962951660156
Average age in population: 26.90890915679932
Median age in population: 26.96271514892578
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.147
Error (vector) diversity:			 0.153
Behavioral diversity:				 0.154
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 36029534
--- Timings ---
Current time: 1529616003942 milliseconds
Total Time:          74.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        27.6 seconds, 37.1%
Fitness Testing:     36.5 seconds, 49.1%
Report:              10.2 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 65865.7063
Test mean error for best: 32.93285
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 149.3915888474
Correct output: 71.9246550776  | Program output: 15.096433469  
Correct output: -71.7136417398 | Program output: -139.1141701952
Correct output: -86.3636978789 | Program output: -94.3819378794
Correct output: -175.789814475 | Program output: -115.6040060683
Correct output: -67.4831289413 | Program output: -96.577814686 
Correct output: -23.3513071934 | Program output: -16.7495733129
Correct output: -123.1447619871 | Program output: -146.8223736111
Correct output: 24.0076171492  | Program output: 113.4919568083
Correct output: -50.6702678178 | Program output: -6.6461053438 
Correct output: -128.7993219642 | Program output: -57.5166920409
Correct output: 41.7575748041  | Program output: 72.3943180536 
Correct output: 173.057045519  | Program output: 139.1141701952
Correct output: -110.0264496737 | Program output: -21.1059088478
Correct output: 11.9743638411  | Program output: 94.3819378794 
Correct output: -2.4287759947  | Program output: 80.1104528101 
Correct output: -60.8453890801 | Program output: -68.0951174818
Correct output: -119.1994005588 | Program output: -115.6040060683
Correct output: -1.7396856728  | Program output: 48.4226395784 
Correct output: 51.2300489273  | Program output: -5.7461595417 
Correct output: 185.9904753477 | Program output: 149.3915888474
Correct output: 42.4470677171  | Program output: -16.1692988339
Correct output: 53.3134494099  | Program output: 56.9622439279 
Correct output: -33.8727861409 | Program output: 39.4891500506 
Correct output: 127.8115346332 | Program output: 162.7356610776
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_min} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction -33} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items})
Best program: (float_min float_min integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush tagged_313 float_dup_times integer_dup integer_dup integer_fromfloat float_div float_tan float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger float_dec float_flush float_flush float_swap float_dup_items integer_yank float_sin print_integer -33 tag_float_475 print_float float_shove float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_swap float_dup_items)
Errors: [42.1306 11 56.8282 11 67.4005 10 8.0182 8 60.1858 11 29.0947 11 6.6017 11 23.6776 10 89.4843 13 44.0242 10 71.2826 13 30.6367 11 33.9429 10 88.9205 11 82.4076 11 82.5392 12 7.2497 9 3.5954 8 50.1623 10 56.9762 12 36.5989 9 58.6164 13 3.6488 9 73.3619 11 34.9241 12]
Total: 1409.3089999999997
Mean: 28.18618
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4099.083422899992
Median total errors in population: 1444.2263000000003
Error averages by case: (150.83507399999925 10.648 143.49535829999942 11.016 177.29241050000024 11.84 128.91010659999964 10.714 176.00003350000034 11.238 144.57978309999905 11.492 118.03837780000069 11.726 148.50435660000085 11.179 180.59633220000055 11.25 150.42746279999932 11.517 178.63868060000013 11.521 138.05805859999867 10.414 140.96548960000007 10.557 192.30011129999863 11.914 172.7376072999995 11.323 176.76506330000018 11.151 126.64873769999859 9.861 127.82094290000046 11.219 144.80470949999946 11.301 162.23298789999865 10.267 145.9449857999997 11.813 162.1440949000003 12.427 110.93205609999939 10.693 170.51620260000107 11.304 150.36839939999916 11.141)
Error minima by case: (0.3052 2 9.0 2 0.647 6 1.6363 7 5.4084 3 4.8109 1 2.3195 1 9.079 2 3.1616 8 4.0 2 0.8951 2 13.4106 7 1.1497 2 31.0 3 5.4994 8 1.4307 2 2.5724 2 0.8057 3 0.0389 2 7.0 1 5.837 2 11.0 2 0.274 2 8.466 2 12.5985 3)
Average genome size in population (length): 84.978
Average program size in population (points): 85.978
Average percent parens in population: 0.012
Minimum age in population: 25.53956604003906
Maximum age in population: 30.08325576782227
Average age in population: 28.36108308029175
Median age in population: 28.38820457458496
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.165
Error (vector) diversity:			 0.177
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 38187084
--- Timings ---
Current time: 1529616008241 milliseconds
Total Time:          78.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        29.1 seconds, 37.0%
Fitness Testing:     38.6 seconds, 49.1%
Report:              10.8 seconds, 13.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 65865.7063
Test mean error for best: 32.93285
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 149.3915888474
Correct output: 71.9246550776  | Program output: 15.096433469  
Correct output: -71.7136417398 | Program output: -139.1141701952
Correct output: -86.3636978789 | Program output: -94.3819378794
Correct output: -175.789814475 | Program output: -115.6040060683
Correct output: -67.4831289413 | Program output: -96.577814686 
Correct output: -23.3513071934 | Program output: -16.7495733129
Correct output: -123.1447619871 | Program output: -146.8223736111
Correct output: 24.0076171492  | Program output: 113.4919568083
Correct output: -50.6702678178 | Program output: -6.6461053438 
Correct output: -128.7993219642 | Program output: -57.5166920409
Correct output: 41.7575748041  | Program output: 72.3943180536 
Correct output: 173.057045519  | Program output: 139.1141701952
Correct output: -110.0264496737 | Program output: -21.1059088478
Correct output: 11.9743638411  | Program output: 94.3819378794 
Correct output: -2.4287759947  | Program output: 80.1104528101 
Correct output: -60.8453890801 | Program output: -68.0951174818
Correct output: -119.1994005588 | Program output: -115.6040060683
Correct output: -1.7396856728  | Program output: 48.4226395784 
Correct output: 51.2300489273  | Program output: -5.7461595417 
Correct output: 185.9904753477 | Program output: 149.3915888474
Correct output: 42.4470677171  | Program output: -16.1692988339
Correct output: 53.3134494099  | Program output: 56.9622439279 
Correct output: -33.8727861409 | Program output: 39.4891500506 
Correct output: 127.8115346332 | Program output: 162.7356610776
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_min} {:instruction integer_yankdup} {:instruction float_div} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction -33} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_flush} {:instruction float_flush} {:instruction float_swap} {:instruction integer_stackdepth})
Best program: (float_min float_min integer_yankdup float_div integer_pop integer_mult integer_add integer_mult integer_add integer_flush tagged_313 float_dup_times integer_dup integer_dup integer_fromfloat float_div float_tan float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger float_dec float_flush float_flush float_swap float_dup_items integer_yank float_sin print_integer -33 tag_float_475 print_float float_shove float_frominteger integer_div float_flush float_frominteger integer_min float_flush float_flush float_swap integer_stackdepth)
Errors: [42.1306 11 56.8282 11 67.4005 10 8.0182 8 60.1858 11 29.0947 11 6.6017 11 23.6776 10 89.4843 13 44.0242 10 71.2826 13 30.6367 11 33.9429 10 88.9205 11 82.4076 11 82.5392 12 7.2497 9 3.5954 8 50.1623 10 56.9762 12 36.5989 9 58.6164 13 3.6488 9 73.3619 11 34.9241 12]
Total: 1409.3089999999997
Mean: 28.18618
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4499.893142300004
Median total errors in population: 1427.2676
Error averages by case: (173.26461389999935 11.581 158.11765429999963 11.304 188.3909349999999 11.988 150.30423899999928 10.849 193.6645107999986 11.298 157.87820260000098 10.873 132.38260049999937 12.078 163.32670700000062 11.177 192.08368069999946 12.129 163.3958183000004 11.623 192.5041592000014 11.67 161.07684959999895 10.791 164.31823359999876 10.695 203.1762079000002 12.184 190.70231610000008 11.633 194.84057439999995 11.313 140.936296899999 9.368 147.64255130000154 10.947 155.5092063000001 11.161 175.14657339999923 10.858 168.56236650000105 11.011 174.78945880000134 12.515 124.62631459999925 9.888 188.22910720000257 12.16 163.14196439999924 10.788)
Error minima by case: (0.3052 7 9.0753 8 0.5721 5 1.6363 8 5.3333 7 1.2998 8 3.4805 7 7.5537 9 5.0799 8 7.3204 7 0.7542 8 12.1512 7 1.444 8 19.6694 8 4.5751 7 0.8975 7 2.2327 8 1.6927 8 0.7759 7 2.23 6 0.2562 8 32.5633 8 0.54 7 9.1491 9 10.7206 8)
Average genome size in population (length): 82.176
Average program size in population (points): 83.176
Average percent parens in population: 0.012
Minimum age in population: 27.54833221435547
Maximum age in population: 31.60081672668457
Average age in population: 29.78984254074097
Median age in population: 29.85912418365479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.211
Error (vector) diversity:			 0.224
Behavioral diversity:				 0.224
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 40265159
--- Timings ---
Current time: 1529616012058 milliseconds
Total Time:          82.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.4 seconds, 36.9%
Fitness Testing:     40.6 seconds, 49.2%
Report:              11.4 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 64481.15229999998
Test mean error for best: 32.24058
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 142.3396708097
Correct output: 71.9246550776  | Program output: 13.9735169204 
Correct output: -71.7136417398 | Program output: -130.7307637577
Correct output: -86.3636978789 | Program output: -97.9884609365
Correct output: -175.789814475 | Program output: -115.9002146512
Correct output: -67.4831289413 | Program output: -91.4807856483
Correct output: -23.3513071934 | Program output: -15.5137261831
Correct output: -123.1447619871 | Program output: -137.5154130126
Correct output: 24.0076171492  | Program output: 107.1320913112
Correct output: -50.6702678178 | Program output: -6.1775262266 
Correct output: -128.7993219642 | Program output: -68.8074560943
Correct output: 41.7575748041  | Program output: 88.8839588456 
Correct output: 173.057045519  | Program output: 130.7307637577
Correct output: -110.0264496737 | Program output: -26.9256072902
Correct output: 11.9743638411  | Program output: 97.9884609365 
Correct output: -2.4287759947  | Program output: 90.5655648002 
Correct output: -60.8453890801 | Program output: -63.934649436 
Correct output: -119.1994005588 | Program output: -115.9002146512
Correct output: -1.7396856728  | Program output: 44.911836597  
Correct output: 51.2300489273  | Program output: -6.5819663672 
Correct output: 185.9904753477 | Program output: 142.3396708097
Correct output: 42.4470677171  | Program output: -15.6632188919
Correct output: 53.3134494099  | Program output: 52.7536916321 
Correct output: -33.8727861409 | Program output: 53.2586539274 
Correct output: 127.8115346332 | Program output: 150.6185889683
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_add} {:instruction integer_pop} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_mult} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_inc} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_mult} {:instruction float_sub} {:instruction print_float} {:instruction float_div} {:instruction integer_sub} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_dup} {:instruction print_float} {:instruction in2} {:instruction float_sin} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush})
Best program: (integer_mod integer_flush tagged_313 float_dup_times integer_dup integer_mod integer_flush integer_add integer_pop float_sub integer_pop integer_mult integer_add integer_dup_items print_float float_mult in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_sin print_integer float_inc float_cos tag_integer_147 float_inc float_cos float_sin print_integer float_yankdup float_inc float_mult float_sub print_float float_div integer_sub float_frominteger integer_sub float_min integer_shove float_frominteger float_mult integer_swap float_min integer_shove float_frominteger float_mult integer_swap integer_dup_items integer_flush integer_dup_times float_inc float_max float_inc integer_yankdup float_dup print_float in2 float_sin integer_flush float_tan float_dup integer_inc tagged_159 float_inc integer_dup_items integer_div float_flush float_flush)
Errors: [49.1825 11 57.9511 11 59.0171 11 11.6248 12 59.8896 9 23.9977 8 7.8376 8 14.3707 11 83.1245 11 44.4927 10 59.9919 11 47.1264 11 42.3263 10 83.1008 12 86.0141 10 92.9943 12 3.0893 10 3.2992 10 46.6515 10 57.812 11 43.6508 10 58.1103 13 0.5598 10 87.1314 11 22.8071 9]
Total: 1408.1535
Mean: 28.16307
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4224.8877184
Median total errors in population: 1423.9769000000003
Error averages by case: (161.1880774999989 11.477 149.40449649999974 11.759 178.49854219999895 11.373 141.92091349999865 10.578 185.4035115999982 11.523 150.3662771000004 10.847 125.49086549999839 11.955 153.6607911000009 11.399 176.23265829999866 12.227 156.03094510000028 11.202 180.9259590000026 11.809 147.55815849999877 10.389 151.75192209999867 10.629 194.6153208000017 12.625 176.2192874000004 11.908 181.84171730000003 11.526 132.5680050999988 9.424 139.79700790000203 10.661 140.7043327999993 10.668 165.1751338999987 10.852 156.32309430000112 10.305 166.4145899000006 12.296 112.0413754999988 9.474 175.38983160000248 12.114 145.85390389999907 10.491)
Error minima by case: (0.2621 7 7.0 2 0.647 5 1.7185 8 5.1182 3 1.4632 2 2.8685 1 7.5537 3 0.5356 7 4.0 2 0.3582 2 19.1728 7 1.0809 7 23.1965 3 1.2542 8 1.512 2 0.8991 2 1.892 3 0.7878 2 9.0 2 5.7938 8 13.0 2 0.274 2 9.1491 2 10.7206 3)
Average genome size in population (length): 80.591
Average program size in population (points): 81.591
Average percent parens in population: 0.013
Minimum age in population: 28.95306015014648
Maximum age in population: 32.9454460144043
Average age in population: 31.28192352485657
Median age in population: 31.33601140975952
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.215
Error (vector) diversity:			 0.222
Behavioral diversity:				 0.223
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 42298109
--- Timings ---
Current time: 1529616016327 milliseconds
Total Time:          86.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.0 seconds, 36.9%
Fitness Testing:     42.6 seconds, 49.1%
Report:              12.0 seconds, 13.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 65146.57149999997
Test mean error for best: 32.57329
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 144.3597107467
Correct output: 71.9246550776  | Program output: 14.278675     
Correct output: -71.7136417398 | Program output: -133.0642597858
Correct output: -86.3636978789 | Program output: -94.3753849042
Correct output: -175.789814475 | Program output: -115.1666658498
Correct output: -67.4831289413 | Program output: -92.9220617259
Correct output: -23.3513071934 | Program output: -15.8498698011
Correct output: -123.1447619871 | Program output: -140.090655292
Correct output: 24.0076171492  | Program output: 108.9176813523
Correct output: -50.6702678178 | Program output: -6.3056182433 
Correct output: -128.7993219642 | Program output: -57.8747322047
Correct output: 41.7575748041  | Program output: 73.0798435508 
Correct output: 173.057045519  | Program output: 133.0642597858
Correct output: -110.0264496737 | Program output: -21.4318588394
Correct output: 11.9743638411  | Program output: 94.3753849042 
Correct output: -2.4287759947  | Program output: 80.2314801935 
Correct output: -60.8453890801 | Program output: -65.09082631  
Correct output: -119.1994005588 | Program output: -115.1666658498
Correct output: -1.7396856728  | Program output: 45.868590223  
Correct output: 51.2300489273  | Program output: -5.7594409232 
Correct output: 185.9904753477 | Program output: 144.3597107467
Correct output: 42.4470677171  | Program output: -15.8126271935
Correct output: 53.3134494099  | Program output: 53.8982265174 
Correct output: -33.8727861409 | Program output: 40.5365639083 
Correct output: 127.8115346332 | Program output: 153.9110984817
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_max} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_cos} {:instruction integer_mod} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush tagged_313 float_dup_times integer_dup integer_dup integer_fromfloat float_div float_tan float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_yankdup float_inc float_frominteger float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_stackdepth float_stackdepth integer_max print_float in2 integer_max integer_shove float_tan float_dup tag_float_475 float_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items integer_yank float_sin float_dup_times integer_stackdepth tag_float_475 print_float float_cos integer_mod float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [47.1625 11 57.646 10 61.3506 10 8.0117 11 60.6231 10 25.4389 12 7.5014 12 16.9459 11 84.9101 10 44.3646 10 70.9246 10 31.3223 11 39.9928 10 88.5946 12 82.401 10 82.6603 11 4.2454 9 4.0327 9 47.6083 9 56.9895 9 41.6308 10 58.2597 11 0.5848 10 74.4094 12 26.0996 10]
Total: 1383.7106
Mean: 27.674212
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4131.039333600003
Median total errors in population: 1412.1786
Error averages by case: (157.89026600000054 11.277 147.6230473000001 11.23 174.0422461999994 10.965 133.71913380000032 9.738 180.41605530000095 11.433 145.43107760000015 11.068 122.46419179999897 11.544 148.03782529999953 10.952 177.108536 12.449 153.76251740000103 10.836 180.16445700000233 12.284 141.53444180000028 10.81 147.73413829999845 10.419 191.91735180000072 11.94 173.5544569000012 11.378 178.44461549999957 11.762 128.57477989999956 9.701 133.54831100000166 9.835 139.34657609999942 10.51 160.50402890000055 11.348 153.04533100000054 10.086 162.16878490000005 12.565 107.35431449999902 9.594 171.3198789000008 11.642 144.6969704000002 11.27)
Error minima by case: (1.0978 2 9.0 2 0.4983 8 1.6363 7 6.1769 3 4.9834 1 0.1533 1 2.2472 2 3.9635 9 4.0 2 1.281 2 7.6059 5 5.1324 2 15.3655 3 1.9139 8 2.0544 2 1.6563 2 0.1548 3 0.5409 2 7.0 1 0.2562 2 9.8446 2 0.548 2 7.9823 2 3.644 3)
Average genome size in population (length): 83.613
Average program size in population (points): 84.613
Average percent parens in population: 0.012
Minimum age in population: 30.812744140625
Maximum age in population: 34.68837308883667
Average age in population: 32.85008639383316
Median age in population: 32.84862422943115
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.842
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.842
Total error diversity:				 0.195
Error (vector) diversity:			 0.196
Behavioral diversity:				 0.198
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 44410484
--- Timings ---
Current time: 1529616020230 milliseconds
Total Time:          90.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.4 seconds, 36.8%
Fitness Testing:     44.6 seconds, 49.1%
Report:              12.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 65146.57149999997
Test mean error for best: 32.57329
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 144.3597107467
Correct output: 71.9246550776  | Program output: 14.278675     
Correct output: -71.7136417398 | Program output: -133.0642597858
Correct output: -86.3636978789 | Program output: -94.3753849042
Correct output: -175.789814475 | Program output: -115.1666658498
Correct output: -67.4831289413 | Program output: -92.9220617259
Correct output: -23.3513071934 | Program output: -15.8498698011
Correct output: -123.1447619871 | Program output: -140.090655292
Correct output: 24.0076171492  | Program output: 108.9176813523
Correct output: -50.6702678178 | Program output: -6.3056182433 
Correct output: -128.7993219642 | Program output: -57.8747322047
Correct output: 41.7575748041  | Program output: 73.0798435508 
Correct output: 173.057045519  | Program output: 133.0642597858
Correct output: -110.0264496737 | Program output: -21.4318588394
Correct output: 11.9743638411  | Program output: 94.3753849042 
Correct output: -2.4287759947  | Program output: 80.2314801935 
Correct output: -60.8453890801 | Program output: -65.09082631  
Correct output: -119.1994005588 | Program output: -115.1666658498
Correct output: -1.7396856728  | Program output: 45.868590223  
Correct output: 51.2300489273  | Program output: -5.7594409232 
Correct output: 185.9904753477 | Program output: 144.3597107467
Correct output: 42.4470677171  | Program output: -15.8126271935
Correct output: 53.3134494099  | Program output: 53.8982265174 
Correct output: -33.8727861409 | Program output: 40.5365639083 
Correct output: 127.8115346332 | Program output: 153.9110984817
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_max} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_cos} {:instruction integer_mod} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush tagged_313 float_dup_times integer_dup integer_dup integer_fromfloat float_div float_tan float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_yankdup float_inc float_frominteger float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_stackdepth float_stackdepth integer_max print_float in2 integer_max integer_shove float_tan float_dup tag_float_475 float_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items integer_yank float_sin float_dup_times integer_stackdepth tag_float_475 print_float float_cos integer_mod float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [47.1625 11 57.646 10 61.3506 10 8.0117 11 60.6231 10 25.4389 12 7.5014 12 16.9459 11 84.9101 10 44.3646 10 70.9246 10 31.3223 11 39.9928 10 88.5946 12 82.401 10 82.6603 11 4.2454 9 4.0327 9 47.6083 9 56.9895 9 41.6308 10 58.2597 11 0.5848 10 74.4094 12 26.0996 10]
Total: 1383.7106
Mean: 27.674212
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3797.8553552000067
Median total errors in population: 1409.3089999999997
Error averages by case: (144.42166150000097 11.209 131.94601130000157 11.076 163.04486160000005 10.65 120.56372870000139 9.372 168.2417047000022 11.227 132.47957060000084 11.114 107.1461329999995 11.173 135.74233019999895 10.741 162.64154969999996 12.551 138.65894310000033 10.537 170.9001509000018 12.727 126.6021249000011 11.24 135.8845731999984 10.358 181.9379316999992 11.481 158.5617941000018 11.134 162.94165449999937 11.898 114.50482480000022 9.781 120.4657050000011 9.381 126.33844889999983 10.434 149.7878732000014 11.75 139.5639825999992 9.959 149.38595149999946 12.725 94.88064719999983 9.759 155.23538690000052 11.359 130.47681140000083 11.865)
Error minima by case: (0.3052 7 6.9612 8 0.4983 8 0.5135 8 5.2599 8 4.6241 8 0.9884 8 6.9615 8 0.5356 8 9.5917 8 0.6179 9 7.6059 8 1.1513 7 0.7261 9 4.663 8 2.1628 7 0.8528 7 0.9124 8 0.9916 7 2.3642 8 4.4339 8 11.1472 8 0.2808 8 8.36 9 4.3155 8)
Average genome size in population (length): 85.414
Average program size in population (points): 86.414
Average percent parens in population: 0.012
Minimum age in population: 31.86864280700684
Maximum age in population: 36.17682886123657
Average age in population: 34.46605385875702
Median age in population: 34.49296128749847
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.872
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.872
Total error diversity:				 0.173
Error (vector) diversity:			 0.176
Behavioral diversity:				 0.178
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 46570984
--- Timings ---
Current time: 1529616024389 milliseconds
Total Time:          94.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.9 seconds, 36.8%
Fitness Testing:     46.5 seconds, 49.1%
Report:              13.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 65146.57149999997
Test mean error for best: 32.57329
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 144.3597107467
Correct output: 71.9246550776  | Program output: 14.278675     
Correct output: -71.7136417398 | Program output: -133.0642597858
Correct output: -86.3636978789 | Program output: -94.3753849042
Correct output: -175.789814475 | Program output: -115.1666658498
Correct output: -67.4831289413 | Program output: -92.9220617259
Correct output: -23.3513071934 | Program output: -15.8498698011
Correct output: -123.1447619871 | Program output: -140.090655292
Correct output: 24.0076171492  | Program output: 108.9176813523
Correct output: -50.6702678178 | Program output: -6.3056182433 
Correct output: -128.7993219642 | Program output: -57.8747322047
Correct output: 41.7575748041  | Program output: 73.0798435508 
Correct output: 173.057045519  | Program output: 133.0642597858
Correct output: -110.0264496737 | Program output: -21.4318588394
Correct output: 11.9743638411  | Program output: 94.3753849042 
Correct output: -2.4287759947  | Program output: 80.2314801935 
Correct output: -60.8453890801 | Program output: -65.09082631  
Correct output: -119.1994005588 | Program output: -115.1666658498
Correct output: -1.7396856728  | Program output: 45.868590223  
Correct output: 51.2300489273  | Program output: -5.7594409232 
Correct output: 185.9904753477 | Program output: 144.3597107467
Correct output: 42.4470677171  | Program output: -15.8126271935
Correct output: 53.3134494099  | Program output: 53.8982265174 
Correct output: -33.8727861409 | Program output: 40.5365639083 
Correct output: 127.8115346332 | Program output: 153.9110984817
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_min} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_max} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_cos} {:instruction integer_mod} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (float_min float_min integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush integer_fromfloat float_div float_tan float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_yankdup float_inc float_frominteger float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_stackdepth float_stackdepth integer_max print_float in2 integer_max integer_shove float_tan float_dup tag_float_475 float_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items integer_yank float_sin float_dup_times integer_stackdepth tag_float_475 print_float float_cos integer_mod float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [47.1625 11 57.646 10 61.3506 10 8.0117 11 60.6231 10 25.4389 12 7.5014 12 16.9459 11 84.9101 10 44.3646 10 70.9246 10 31.3223 11 39.9928 10 88.5946 12 82.401 10 82.6603 11 4.2454 9 4.0327 9 47.6083 9 56.9895 9 41.6308 10 58.2597 11 0.5848 10 74.4094 12 26.0996 10]
Total: 1383.7106
Mean: 27.674212
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4148.435651000004
Median total errors in population: 1409.3089999999997
Error averages by case: (155.98400310000065 11.171 147.27911840000067 11.043 178.4935584999993 10.874 139.47747950000067 10.043 184.65846870000124 10.896 147.77769040000013 10.961 124.61323849999962 11.006 150.3957409999992 10.96 173.54375000000067 12.048 156.5459649000012 10.534 185.02536170000067 12.318 136.65408900000062 11.264 147.50160779999877 10.262 196.35905399999933 11.674 171.4253092000015 10.933 173.6739967999992 11.803 129.6532988000006 9.949 137.76706810000036 9.799 137.6141875000001 10.402 167.33629260000154 11.495 151.38958500000044 10.209 167.5733439999995 12.575 105.4506119999998 9.964 167.9302439000005 11.458 139.37958760000103 11.292)
Error minima by case: (0.3052 2 9.0 2 0.4983 7 1.5759 8 5.1882 3 4.8999 1 0.9884 1 5.6557 2 0.5356 7 4.0 2 0.486 2 3.8332 7 1.06 2 31.0 3 0.5373 8 2.0057 2 0.1406 2 1.725 3 1.4747 2 3.4302 1 3.1485 2 4.5227 2 0.5093 2 3.1798 2 9.4744 3)
Average genome size in population (length): 86.167
Average program size in population (points): 87.167
Average percent parens in population: 0.012
Minimum age in population: 32.88638019561768
Maximum age in population: 37.87767958641052
Average age in population: 35.97173930239677
Median age in population: 36.0563143491745
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.866
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.866
Total error diversity:				 0.184
Error (vector) diversity:			 0.189
Behavioral diversity:				 0.192
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 48748934
--- Timings ---
Current time: 1529616028597 milliseconds
Total Time:          99.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.3 seconds, 36.6%
Fitness Testing:     48.8 seconds, 49.2%
Report:              13.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 65146.57149999997
Test mean error for best: 32.57329
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 144.3597107467
Correct output: 71.9246550776  | Program output: 14.278675     
Correct output: -71.7136417398 | Program output: -133.0642597858
Correct output: -86.3636978789 | Program output: -94.3753849042
Correct output: -175.789814475 | Program output: -115.1666658498
Correct output: -67.4831289413 | Program output: -92.9220617259
Correct output: -23.3513071934 | Program output: -15.8498698011
Correct output: -123.1447619871 | Program output: -140.090655292
Correct output: 24.0076171492  | Program output: 108.9176813523
Correct output: -50.6702678178 | Program output: -6.3056182433 
Correct output: -128.7993219642 | Program output: -57.8747322047
Correct output: 41.7575748041  | Program output: 73.0798435508 
Correct output: 173.057045519  | Program output: 133.0642597858
Correct output: -110.0264496737 | Program output: -21.4318588394
Correct output: 11.9743638411  | Program output: 94.3753849042 
Correct output: -2.4287759947  | Program output: 80.2314801935 
Correct output: -60.8453890801 | Program output: -65.09082631  
Correct output: -119.1994005588 | Program output: -115.1666658498
Correct output: -1.7396856728  | Program output: 45.868590223  
Correct output: 51.2300489273  | Program output: -5.7594409232 
Correct output: 185.9904753477 | Program output: 144.3597107467
Correct output: 42.4470677171  | Program output: -15.8126271935
Correct output: 53.3134494099  | Program output: 53.8982265174 
Correct output: -33.8727861409 | Program output: 40.5365639083 
Correct output: 127.8115346332 | Program output: 153.9110984817
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_max} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction float_div} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_max} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction float_mod} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_cos} {:instruction integer_mod} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush tagged_313 float_dup_times integer_dup integer_dup float_max float_div float_tan float_flush integer_pop in2 integer_dup print_float integer_stackdepth integer_shove float_yankdup float_frominteger float_div tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_yankdup float_inc float_frominteger float_mult integer_swap integer_add float_min integer_shove integer_yankdup integer_sub integer_stackdepth float_stackdepth integer_max print_float in2 integer_max float_mod float_tan float_dup tag_float_475 float_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items integer_yank float_sin float_dup_times integer_stackdepth tag_float_475 print_float float_cos integer_mod float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [47.1625 11 57.646 10 61.3506 10 8.0117 11 60.6231 10 25.4389 12 7.5014 12 16.9459 11 84.9101 10 44.3646 10 70.9246 10 31.3223 11 39.9928 10 88.5946 12 82.401 10 82.6603 11 4.2454 9 4.0327 9 47.6083 9 56.9895 9 41.6308 10 58.2597 11 0.5848 10 74.4094 12 26.0996 10]
Total: 1383.7106
Mean: 27.674212
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 4158.130571799996
Median total errors in population: 1408.1535
Error averages by case: (165.32402270000105 11.083 145.20609210000018 10.919 173.42156870000053 11.038 137.47802820000075 10.916 185.9654951999999 10.446 145.79045580000044 11.178 122.7440032999995 11.29 149.2704917 11.241 171.86383160000054 11.087 153.04059420000053 10.487 183.3229464999993 11.457 142.81050750000026 11.289 156.68035130000024 10.072 194.1693596999996 11.928 170.5479581000006 10.633 174.76807129999926 11.464 128.65662700000067 10.05 138.54988799999998 10.333 138.2506773000003 10.314 163.52316200000075 10.739 160.4677271000014 10.73 161.57788429999925 11.975 109.01225669999945 10.307 170.28396520000152 11.672 142.23060630000072 10.526)
Error minima by case: (4.077 2 9.0 2 0.3539 8 1.5543 7 6.1769 3 4.3826 1 2.8855 1 3.8443 2 0.8855 7 2.3297 2 1.8926 2 7.4516 6 12.4837 2 7.9841 3 2.1481 8 1.4288 2 0.1546 2 1.0028 3 0.7765 2 3.3745 1 7.0604 2 11.0 2 0.4402 2 9.7789 2 4.3155 3)
Average genome size in population (length): 85.727
Average program size in population (points): 86.727
Average percent parens in population: 0.012
Minimum age in population: 35.05923771858215
Maximum age in population: 39.57161378860474
Average age in population: 37.45507477611303
Median age in population: 37.48753756284714
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.825
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.825
Total error diversity:				 0.256
Error (vector) diversity:			 0.259
Behavioral diversity:				 0.26
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 50910059
--- Timings ---
Current time: 1529616032674 milliseconds
Total Time:         103.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.8 seconds, 36.6%
Fitness Testing:     50.9 seconds, 49.3%
Report:              14.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 64570.268899999945
Test mean error for best: 32.28513
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 140.5614371384
Correct output: 71.9246550776  | Program output: 13.7307467536 
Correct output: -71.7136417398 | Program output: -128.757688035
Correct output: -86.3636978789 | Program output: -94.368855819 
Correct output: -175.789814475 | Program output: -114.7539456637
Correct output: -67.4831289413 | Program output: -90.2316833806
Correct output: -23.3513071934 | Program output: -15.2455174901
Correct output: -123.1447619871 | Program output: -135.363664492
Correct output: 24.0076171492  | Program output: 105.6001614207
Correct output: -50.6702678178 | Program output: -6.0737166591 
Correct output: -128.7993219642 | Program output: -58.2125931973
Correct output: 41.7575748041  | Program output: 73.7162585829 
Correct output: 173.057045519  | Program output: 128.757688035 
Correct output: -110.0264496737 | Program output: -21.7272167014
Correct output: 11.9743638411  | Program output: 94.368855819  
Correct output: -2.4287759947  | Program output: 80.3495942645 
Correct output: -60.8453890801 | Program output: -62.9600581454
Correct output: -119.1994005588 | Program output: -114.7539456637
Correct output: -1.7396856728  | Program output: 44.1437033957 
Correct output: 51.2300489273  | Program output: -5.7723073003 
Correct output: 185.9904753477 | Program output: 140.5614371384
Correct output: 42.4470677171  | Program output: -15.5223638651
Correct output: 53.3134494099  | Program output: 51.8409120303 
Correct output: -33.8727861409 | Program output: 41.4533737943 
Correct output: 127.8115346332 | Program output: 148.0001940192
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction float_min} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_stackdepth} {:instruction float_stackdepth} {:instruction integer_max} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_yank} {:instruction integer_mod} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap})
Best program: (float_min float_min integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush integer_fromfloat float_div float_tan float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_yankdup float_inc float_frominteger float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_stackdepth float_stackdepth integer_max print_float in2 integer_max integer_shove float_tan float_dup tag_float_475 float_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items integer_yank float_sin float_dup_times integer_stackdepth tag_float_475 print_float float_yank integer_mod float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_max integer_swap)
Errors: [50.9608 9 58.1939 10 57.044 10 8.0052 8 61.0359 10 22.7486 10 8.1058 10 12.2189 11 81.5925 10 44.5966 10 70.5867 10 31.9587 10 44.2994 9 88.2992 10 82.3945 10 82.7784 11 2.1147 11 4.4455 10 45.8834 12 57.0024 10 45.429 10 57.9694 11 1.4725 10 75.3262 12 20.1887 10]
Total: 1368.6509
Mean: 27.373018
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3924.980353099989
Median total errors in population: 1383.7106
Error averages by case: (153.67623980000192 11.028 132.28292119999819 10.472 166.1762662000017 10.702 131.02333880000106 11.08 179.2406606999991 10.449 138.74103729999888 11.76 117.29228269999892 11.892 140.03942820000114 11.37 159.39173869999934 10.559 148.40980550000032 10.387 180.32882729999915 10.854 127.63533060000015 11.232 145.29138400000207 10.168 191.74414420000085 12.058 156.60717980000004 10.486 162.10885189999962 11.127 122.21865440000013 9.809 131.42484199999953 10.108 123.89474320000144 9.803 159.57848569999942 9.949 148.77016860000057 10.706 158.3384361999987 11.298 94.59889289999902 10.298 157.1190805000013 11.867 129.03361270000084 10.552)
Error minima by case: (0.0496 2 6.9316 2 0.64 8 2.6363 8 5.1182 3 3.5884 1 2.4986 1 4.9358 2 0.5356 7 4.0 2 0.3582 2 9.7422 8 1.0809 2 23.7116 3 0.5633 7 1.4361 2 0.1797 2 0.8613 3 0.9916 2 1.7324 1 0.2562 2 10.5154 2 0.351 2 8.466 2 3.5527 3)
Average genome size in population (length): 83.349
Average program size in population (points): 84.349
Average percent parens in population: 0.012
Minimum age in population: 36.70441842079163
Maximum age in population: 40.71693661808968
Average age in population: 38.76432734405994
Median age in population: 38.77496986091137
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.198
Error (vector) diversity:			 0.199
Behavioral diversity:				 0.201
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 53003159
--- Timings ---
Current time: 1529616036903 milliseconds
Total Time:         107.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.2 seconds, 36.5%
Fitness Testing:     53.1 seconds, 49.5%
Report:              14.9 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 64204.86129999999
Test mean error for best: 32.10243
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 135.1004513536
Correct output: 71.9246550776  | Program output: 13.0168332544 
Correct output: -71.7136417398 | Program output: -122.8731364589
Correct output: -86.3636978789 | Program output: -94.35586874  
Correct output: -175.789814475 | Program output: -113.9936970673
Correct output: -67.4831289413 | Program output: -86.450121839 
Correct output: -23.3513071934 | Program output: -14.4566030206
Correct output: -123.1447619871 | Program output: -128.976212003
Correct output: 24.0076171492  | Program output: 100.9954926658
Correct output: -50.6702678178 | Program output: -5.7677971456 
Correct output: -128.7993219642 | Program output: -58.8348901475
Correct output: 41.7575748041  | Program output: 74.8633959248 
Correct output: 173.057045519  | Program output: 122.8731364589
Correct output: -110.0264496737 | Program output: -22.243400578 
Correct output: 11.9743638411  | Program output: 94.35586874   
Correct output: -2.4287759947  | Program output: 80.5775371757 
Correct output: -60.8453890801 | Program output: -60.0573086236
Correct output: -119.1994005588 | Program output: -113.9936970673
Correct output: -1.7396856728  | Program output: 41.8828908893 
Correct output: 51.2300489273  | Program output: -5.7968784414 
Correct output: 185.9904753477 | Program output: 135.1004513536
Correct output: 42.4470677171  | Program output: -15.073417849 
Correct output: 53.3134494099  | Program output: 49.1561585968 
Correct output: -33.8727861409 | Program output: 42.9898994366 
Correct output: 127.8115346332 | Program output: 140.3005112652
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_flush} {:instruction float_flush} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction -33} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush tagged_313 float_dup_times integer_dup integer_dup integer_fromfloat float_div float_tan float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_yankdup float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger float_dec float_flush float_flush integer_max float_dup_items integer_yank float_sin float_shove float_frominteger integer_div float_flush float_frominteger float_dup tag_float_475 float_dup_items integer_yank float_sin print_integer -33 tag_float_475 print_float float_shove float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [56.4218 11 58.9078 12 51.1595 9 7.9922 9 61.7961 11 18.967 9 8.8947 10 5.8315 9 76.9879 12 44.9025 9 69.9644 11 33.1058 11 50.1839 10 87.783 11 82.3815 10 83.0063 10 0.7881 9 5.2057 10 43.6226 11 57.0269 11 50.89 8 57.5205 11 4.1573 11 76.8627 12 12.489 10]
Total: 1363.8487000000002
Mean: 27.276974
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3549.9205135999923
Median total errors in population: 1383.7106
Error averages by case: (144.04541480000174 11.108 120.49676399999844 10.391 148.2819566000013 10.676 111.91398210000105 11.052 162.15099949999868 10.576 119.79328619999873 11.681 98.00380209999926 11.84 122.3175997000011 11.331 147.19422789999933 10.456 129.43901480000048 10.428 161.9684706999995 10.712 117.02018079999996 11.143 134.944334700002 10.401 172.31509130000043 11.982 146.27384010000029 10.364 149.50850060000002 11.174 102.75870509999997 9.701 113.37532469999965 10.111 112.0476709000015 9.744 140.73672839999963 9.86 139.09457070000005 10.574 140.667671599999 11.341 83.48245059999904 10.417 144.65785850000054 12.027 117.76506720000057 10.577)
Error minima by case: (4.4778 2 9.0 2 1.0565 8 1.0091 8 6.1769 3 3.5931 1 0.1669 1 4.9358 2 5.7087 8 4.0 2 1.9073 2 0.207 8 12.943 2 10.513 3 1.9744 7 0.8961 2 0.1797 2 1.0605 3 0.9916 2 7.0 1 9.2569 2 9.4471 2 0.5318 2 7.5775 2 8.3004 3)
Average genome size in population (length): 82.782
Average program size in population (points): 83.782
Average percent parens in population: 0.012
Minimum age in population: 37.70441842079163
Maximum age in population: 42.20087273418903
Average age in population: 40.15903523632884
Median age in population: 40.19466719776392
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.179
Error (vector) diversity:			 0.181
Behavioral diversity:				 0.183
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 55077359
--- Timings ---
Current time: 1529616040962 milliseconds
Total Time:         111.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.6 seconds, 36.4%
Fitness Testing:     55.2 seconds, 49.5%
Report:              15.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 64204.86129999999
Test mean error for best: 32.10243
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 135.1004513536
Correct output: 71.9246550776  | Program output: 13.0168332544 
Correct output: -71.7136417398 | Program output: -122.8731364589
Correct output: -86.3636978789 | Program output: -94.35586874  
Correct output: -175.789814475 | Program output: -113.9936970673
Correct output: -67.4831289413 | Program output: -86.450121839 
Correct output: -23.3513071934 | Program output: -14.4566030206
Correct output: -123.1447619871 | Program output: -128.976212003
Correct output: 24.0076171492  | Program output: 100.9954926658
Correct output: -50.6702678178 | Program output: -5.7677971456 
Correct output: -128.7993219642 | Program output: -58.8348901475
Correct output: 41.7575748041  | Program output: 74.8633959248 
Correct output: 173.057045519  | Program output: 122.8731364589
Correct output: -110.0264496737 | Program output: -22.243400578 
Correct output: 11.9743638411  | Program output: 94.35586874   
Correct output: -2.4287759947  | Program output: 80.5775371757 
Correct output: -60.8453890801 | Program output: -60.0573086236
Correct output: -119.1994005588 | Program output: -113.9936970673
Correct output: -1.7396856728  | Program output: 41.8828908893 
Correct output: 51.2300489273  | Program output: -5.7968784414 
Correct output: 185.9904753477 | Program output: 135.1004513536
Correct output: 42.4470677171  | Program output: -15.073417849 
Correct output: 53.3134494099  | Program output: 49.1561585968 
Correct output: -33.8727861409 | Program output: 42.9898994366 
Correct output: 127.8115346332 | Program output: 140.3005112652
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_tan} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_flush} {:instruction float_flush} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction -33} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush tagged_313 float_dup_times integer_dup integer_dup integer_fromfloat float_div float_tan float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_yankdup float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_inc float_frominteger float_dec float_flush float_flush integer_max float_dup_items integer_yank float_sin float_shove float_frominteger integer_div float_flush float_frominteger float_dup tag_float_475 float_dup_items integer_yank float_sin print_integer -33 tag_float_475 print_float float_shove float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [56.4218 11 58.9078 12 51.1595 9 7.9922 9 61.7961 11 18.967 9 8.8947 10 5.8315 9 76.9879 12 44.9025 9 69.9644 11 33.1058 11 50.1839 10 87.783 11 82.3815 10 83.0063 10 0.7881 9 5.2057 10 43.6226 11 57.0269 11 50.89 8 57.5205 11 4.1573 11 76.8627 12 12.489 10]
Total: 1363.8487000000002
Mean: 27.276974
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3942.4478999999933
Median total errors in population: 1383.7106
Error averages by case: (159.77655350000174 11.015 139.86616209999877 10.62 161.53916670000146 10.855 126.54578740000099 10.74 175.66392099999922 10.719 133.8193259999987 11.218 114.59630979999903 11.639 135.17556090000159 11.141 163.62944629999953 10.538 145.5122082000003 10.466 175.09704519999977 10.777 133.4430939000003 11.172 152.0847348000021 10.422 185.85776340000052 11.732 164.67346060000085 10.423 166.10292419999948 11.105 117.23464320000012 9.952 127.46473369999921 10.348 130.7079248000016 10.244 155.8115867999994 10.273 154.85248570000056 10.701 155.82207279999898 11.582 102.4195608999991 10.46 161.4601672000006 12.02 132.39026089999982 10.739)
Error minima by case: (0.2621 2 9.0 2 1.0565 8 1.5759 8 5.1182 3 4.9598 1 3.3523 1 3.8097 2 5.7087 8 4.0 2 0.3582 2 3.4104 8 1.0809 2 31.0 3 6.5485 8 1.512 2 0.1375 2 0.1324 3 0.7416 2 7.0 1 4.9594 2 11.0 2 0.3134 2 9.1491 2 4.3155 3)
Average genome size in population (length): 82.532
Average program size in population (points): 83.532
Average percent parens in population: 0.012
Minimum age in population: 39.11465501785278
Maximum age in population: 43.80664567649364
Average age in population: 41.67364740651101
Median age in population: 41.74363787844777
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.879
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.879
Total error diversity:				 0.193
Error (vector) diversity:			 0.195
Behavioral diversity:				 0.197
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 57145434
--- Timings ---
Current time: 1529616045076 milliseconds
Total Time:         115.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.9 seconds, 36.3%
Fitness Testing:     57.3 seconds, 49.6%
Report:              16.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 64035.127200000046
Test mean error for best: 32.01756
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 134.0283184515
Correct output: 71.9246550776  | Program output: 12.8847983927 
Correct output: -71.7136417398 | Program output: -121.7537260573
Correct output: -86.3636978789 | Program output: -94.3526366766
Correct output: -175.789814475 | Program output: -113.8158515078
Correct output: -67.4831289413 | Program output: -85.7181775132
Correct output: -23.3513071934 | Program output: -14.310537821 
Correct output: -123.1447619871 | Program output: -127.7692623842
Correct output: 24.0076171492  | Program output: 100.1111439792
Correct output: -50.6702678178 | Program output: -5.7108090994 
Correct output: -128.7993219642 | Program output: -58.9804540077
Correct output: 41.7575748041  | Program output: 75.127269814  
Correct output: 173.057045519  | Program output: 121.7537260573
Correct output: -110.0264496737 | Program output: -22.3593848317
Correct output: 11.9743638411  | Program output: 94.3526366766 
Correct output: -2.4287759947  | Program output: 80.6328746497 
Correct output: -60.8453890801 | Program output: -59.5061272971
Correct output: -119.1994005588 | Program output: -113.8158515078
Correct output: -1.7396856728  | Program output: 41.4633189837 
Correct output: 51.2300489273  | Program output: -5.8027932364 
Correct output: 185.9904753477 | Program output: 134.0283184515
Correct output: 42.4470677171  | Program output: -14.9809561137
Correct output: 53.3134494099  | Program output: 48.6591746247 
Correct output: -33.8727861409 | Program output: 43.3246524986 
Correct output: 127.8115346332 | Program output: 138.8766875172
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_dup} {:instruction tagged_313} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_rot} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_yank} {:instruction integer_mod} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap})
Best program: (integer_mod float_dup tagged_313 integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush tagged_313 float_dup_times integer_dup integer_dup integer_fromfloat integer_dup float_tan integer_rot integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup tag_float_475 float_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items integer_yank float_sin float_dup_times integer_stackdepth tag_float_475 print_float float_yank integer_mod float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_max integer_swap)
Errors: [57.4939 10 59.0399 11 50.0401 9 7.9889 9 61.974 9 18.235 10 9.0408 10 4.6245 9 76.1035 9 44.9595 10 69.8189 12 33.3697 9 51.3033 9 87.6671 12 82.3783 11 83.0617 8 1.3393 11 5.3835 9 43.203 10 57.0328 11 51.9622 12 57.428 12 4.6543 11 77.1974 11 11.0652 10]
Total: 1360.3647999999996
Mean: 27.207296
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4046.0460875999966
Median total errors in population: 1379.1971
Error averages by case: (164.89343650000094 10.695 146.1994052999997 10.84 164.28537839999984 10.963 130.23624100000032 9.8 179.0831146999997 10.886 137.60554090000005 10.586 119.75739459999993 11.108 137.76798140000167 10.932 166.69925049999978 10.682 150.44095470000005 10.437 181.19635880000124 10.801 136.58144090000042 10.972 158.34651050000085 10.277 191.29016529999993 11.269 166.46307469999988 10.615 169.44515289999939 10.995 121.65928840000048 10.456 130.28026070000007 10.647 136.4215025000009 11.267 161.4719862999999 10.825 159.98681500000097 10.838 159.55539510000008 11.783 107.01064740000052 10.506 165.25683139999975 11.968 133.05495969999933 10.909)
Error minima by case: (4.4778 8 18.0753 7 0.2124 8 1.6363 8 6.0435 7 3.5942 8 0.2324 8 1.5933 7 9.2392 8 9.6398 6 2.9629 7 6.1169 7 12.943 7 5.5433 8 0.4529 7 0.1339 8 0.1797 6 0.3166 8 0.9916 8 10.914 8 9.5051 8 31.3084 8 0.4725 8 10.3619 8 5.1324 8)
Average genome size in population (length): 83.265
Average program size in population (points): 84.265
Average percent parens in population: 0.012
Minimum age in population: 40.91090705990791
Maximum age in population: 45.3945527151227
Average age in population: 43.17183064742014
Median age in population: 43.20788721553981
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.196
Error (vector) diversity:			 0.198
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 59230634
--- Timings ---
Current time: 1529616049270 milliseconds
Total Time:         119.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.4 seconds, 36.2%
Fitness Testing:     59.4 seconds, 49.6%
Report:              16.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 64035.127200000046
Test mean error for best: 32.01756
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 134.0283184515
Correct output: 71.9246550776  | Program output: 12.8847983927 
Correct output: -71.7136417398 | Program output: -121.7537260573
Correct output: -86.3636978789 | Program output: -94.3526366766
Correct output: -175.789814475 | Program output: -113.8158515078
Correct output: -67.4831289413 | Program output: -85.7181775132
Correct output: -23.3513071934 | Program output: -14.310537821 
Correct output: -123.1447619871 | Program output: -127.7692623842
Correct output: 24.0076171492  | Program output: 100.1111439792
Correct output: -50.6702678178 | Program output: -5.7108090994 
Correct output: -128.7993219642 | Program output: -58.9804540077
Correct output: 41.7575748041  | Program output: 75.127269814  
Correct output: 173.057045519  | Program output: 121.7537260573
Correct output: -110.0264496737 | Program output: -22.3593848317
Correct output: 11.9743638411  | Program output: 94.3526366766 
Correct output: -2.4287759947  | Program output: 80.6328746497 
Correct output: -60.8453890801 | Program output: -59.5061272971
Correct output: -119.1994005588 | Program output: -113.8158515078
Correct output: -1.7396856728  | Program output: 41.4633189837 
Correct output: 51.2300489273  | Program output: -5.8027932364 
Correct output: 185.9904753477 | Program output: 134.0283184515
Correct output: 42.4470677171  | Program output: -14.9809561137
Correct output: 53.3134494099  | Program output: 48.6591746247 
Correct output: -33.8727861409 | Program output: 43.3246524986 
Correct output: 127.8115346332 | Program output: 138.8766875172
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction float_dup} {:instruction tagged_313} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction tagged_313} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_dup} {:instruction integer_fromfloat} {:instruction integer_dup} {:instruction float_tan} {:instruction integer_rot} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_yank} {:instruction integer_mod} {:instruction float_div} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_max} {:instruction integer_swap})
Best program: (integer_mod float_dup tagged_313 integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush tagged_313 float_dup_times integer_dup integer_dup integer_fromfloat integer_dup float_tan integer_rot integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup tag_float_475 float_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items integer_yank float_sin float_dup_times integer_stackdepth tag_float_475 print_float float_yank integer_mod float_div integer_dec float_dup_items float_dup_items integer_yank integer_mod integer_max integer_swap)
Errors: [57.4939 10 59.0399 11 50.0401 9 7.9889 9 61.974 9 18.235 10 9.0408 10 4.6245 9 76.1035 9 44.9595 10 69.8189 12 33.3697 9 51.3033 9 87.6671 12 82.3783 11 83.0617 8 1.3393 11 5.3835 9 43.203 10 57.0328 11 51.9622 12 57.428 12 4.6543 11 77.1974 11 11.0652 10]
Total: 1360.3647999999996
Mean: 27.207296
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3333.8861353000016
Median total errors in population: 1368.6509
Error averages by case: (137.34551730000055 9.975 120.11008779999933 10.491 134.79759799999874 10.581 100.58289049999975 9.163 150.21580349999988 10.689 107.25348920000087 10.475 89.84900040000012 10.582 106.93162370000141 11.135 139.87224549999922 10.477 120.89840630000046 10.401 152.10056320000123 10.679 111.08036510000112 10.534 131.0019934000015 9.723 162.3479101999998 10.752 140.82828499999894 10.42 144.07840709999985 11.036 90.78350740000027 10.874 99.6923232000007 10.624 109.16912060000105 11.663 131.98916319999904 10.533 132.28108740000047 10.51 131.0479634000008 11.367 78.6594638000009 10.436 140.50164649999954 11.975 104.74867359999955 10.624)
Error minima by case: (4.4778 7 18.1058 7 0.2137 6 1.576 8 15.4447 8 3.5953 8 0.8225 9 0.9597 8 0.5244 8 9.6398 8 1.8522 8 3.5976 8 12.943 7 19.6694 8 1.3421 8 1.4572 8 0.1147 7 0.1324 8 0.9916 8 23.6828 7 10.0095 8 31.9488 8 0.4725 8 1.4183 8 2.8384 8)
Average genome size in population (length): 83.194
Average program size in population (points): 84.194
Average percent parens in population: 0.012
Minimum age in population: 42.04027803242207
Maximum age in population: 46.4822130408138
Average age in population: 44.55060948342457
Median age in population: 44.58271225169301
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.179
Error (vector) diversity:			 0.182
Behavioral diversity:				 0.184
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 61312584
--- Timings ---
Current time: 1529616053161 milliseconds
Total Time:         123.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.8 seconds, 36.2%
Fitness Testing:     61.4 seconds, 49.7%
Report:              17.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 64493.37970000011
Test mean error for best: 32.24669
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 138.7549651018
Correct output: 71.9246550776  | Program output: 13.4759016424 
Correct output: -71.7136417398 | Program output: -126.7320262376
Correct output: -86.3636978789 | Program output: -94.3655930716
Correct output: -175.789814475 | Program output: -114.5494760958
Correct output: -67.4831289413 | Program output: -88.9582621533
Correct output: -23.3513071934 | Program output: -14.9642993636
Correct output: -123.1447619871 | Program output: -133.1459260254
Correct output: 24.0076171492  | Program output: 104.0342244497
Correct output: -50.6702678178 | Program output: -5.9655322376 
Correct output: -128.7993219642 | Program output: -58.3799741448
Correct output: 41.7575748041  | Program output: 74.030680342  
Correct output: 173.057045519  | Program output: 126.7320262376
Correct output: -110.0264496737 | Program output: -21.8725284831
Correct output: 11.9743638411  | Program output: 94.3655930716 
Correct output: -2.4287759947  | Program output: 80.4084301827 
Correct output: -60.8453890801 | Program output: -61.9585062888
Correct output: -119.1994005588 | Program output: -114.5494760958
Correct output: -1.7396856728  | Program output: 43.3402804779 
Correct output: 51.2300489273  | Program output: -5.7787088954 
Correct output: 185.9904753477 | Program output: 138.7549651018
Correct output: 42.4470677171  | Program output: -15.3823357832
Correct output: 53.3134494099  | Program output: 50.8836727679 
Correct output: -33.8727861409 | Program output: 41.9016557053 
Correct output: 127.8115346332 | Program output: 145.2511527526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_76} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_flush} {:instruction float_flush} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction -33} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan print_integer float_sin print_integer float_sin float_sin float_yankdup float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_76 float_inc float_frominteger float_dec float_flush float_flush integer_max float_dup_items integer_yank float_sin float_shove float_frominteger integer_div float_flush float_frominteger float_dup tag_float_475 float_dup_items integer_yank float_sin print_integer -33 tag_float_475 print_float float_shove float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [52.7672 8 58.4488 11 55.0184 11 8.0019 8 61.2403 10 21.4751 10 8.387 11 10.0012 9 80.0266 9 44.7047 10 70.4193 8 32.2731 10 46.325 11 88.1539 11 82.3912 10 82.8372 9 1.1131 9 4.6499 7 45.08 10 57.0088 10 47.2355 11 57.8294 12 2.4298 9 75.7744 13 17.4396 10]
Total: 1358.0314000000003
Mean: 27.160627
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3602.457368000001
Median total errors in population: 1368.6509
Error averages by case: (147.84789840000045 10.098 126.52675249999953 10.62 145.36581889999835 10.461 113.77577029999942 9.364 164.4890058999996 10.741 119.49595620000143 10.406 102.00286480000078 10.568 120.01874880000166 11.069 144.36335569999926 10.636 133.39390130000052 10.342 168.37099480000165 10.939 119.58210480000128 10.612 139.6395684000011 9.858 178.53997560000028 10.947 145.71343309999878 10.474 152.88991410000014 10.931 105.07253700000118 10.777 114.85899710000086 10.69 113.09625360000139 11.489 146.76076369999873 10.565 142.82652640000072 10.428 142.72700740000076 11.269 86.93339120000125 10.563 149.90157860000005 11.974 111.84724939999955 10.596)
Error minima by case: (4.4778 2 6.1945 2 0.055 6 1.576 7 6.1769 3 4.9598 1 1.8942 1 0.0575 2 2.4875 7 2.9528 2 3.0538 2 0.2282 7 12.943 2 29.9529 3 1.9106 8 1.2035 2 0.1147 2 3.3215 3 0.1903 2 5.9742 1 9.5051 2 9.7946 2 0.4725 2 9.3619 2 3.5527 3)
Average genome size in population (length): 85.253
Average program size in population (points): 86.253
Average percent parens in population: 0.012
Minimum age in population: 43.04027803242207
Maximum age in population: 47.87410465069115
Average age in population: 45.96430322139524
Median age in population: 45.99793142080307
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.208
Error (vector) diversity:			 0.21
Behavioral diversity:				 0.213
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 63447934
--- Timings ---
Current time: 1529616057567 milliseconds
Total Time:         127.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.4 seconds, 36.3%
Fitness Testing:     63.5 seconds, 49.6%
Report:              17.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 64493.37970000011
Test mean error for best: 32.24669
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 138.7549651018
Correct output: 71.9246550776  | Program output: 13.4759016424 
Correct output: -71.7136417398 | Program output: -126.7320262376
Correct output: -86.3636978789 | Program output: -94.3655930716
Correct output: -175.789814475 | Program output: -114.5494760958
Correct output: -67.4831289413 | Program output: -88.9582621533
Correct output: -23.3513071934 | Program output: -14.9642993636
Correct output: -123.1447619871 | Program output: -133.1459260254
Correct output: 24.0076171492  | Program output: 104.0342244497
Correct output: -50.6702678178 | Program output: -5.9655322376 
Correct output: -128.7993219642 | Program output: -58.3799741448
Correct output: 41.7575748041  | Program output: 74.030680342  
Correct output: 173.057045519  | Program output: 126.7320262376
Correct output: -110.0264496737 | Program output: -21.8725284831
Correct output: 11.9743638411  | Program output: 94.3655930716 
Correct output: -2.4287759947  | Program output: 80.4084301827 
Correct output: -60.8453890801 | Program output: -61.9585062888
Correct output: -119.1994005588 | Program output: -114.5494760958
Correct output: -1.7396856728  | Program output: 43.3402804779 
Correct output: 51.2300489273  | Program output: -5.7787088954 
Correct output: 185.9904753477 | Program output: 138.7549651018
Correct output: 42.4470677171  | Program output: -15.3823357832
Correct output: 53.3134494099  | Program output: 50.8836727679 
Correct output: -33.8727861409 | Program output: 41.9016557053 
Correct output: 127.8115346332 | Program output: 145.2511527526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_76} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_stackdepth} {:instruction tag_float_475} {:instruction print_float} {:instruction float_cos} {:instruction integer_mod} {:instruction float_div} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_max} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_dup} {:instruction print_float} {:instruction in2} {:instruction float_sin} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan print_integer float_sin print_integer float_sin float_sin float_yankdup float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_76 float_inc float_frominteger float_dup tag_float_475 float_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items integer_yank float_sin float_dup_times integer_stackdepth tag_float_475 print_float float_cos integer_mod float_div integer_dec integer_dup_items integer_flush integer_dup_times float_inc float_max float_inc integer_yankdup float_dup print_float in2 float_sin integer_flush float_tan float_dup integer_inc float_flush float_swap float_dup_items)
Errors: [52.7672 8 58.4488 11 55.0184 11 8.0019 8 61.2403 10 21.4751 10 8.387 11 10.0012 9 80.0266 9 44.7047 10 70.4193 8 32.2731 10 46.325 11 88.1539 11 82.3912 10 82.8372 9 1.1131 9 4.6499 7 45.08 10 57.0088 10 47.2355 11 57.8294 12 2.4298 9 75.7744 13 17.4396 10]
Total: 1358.0314000000003
Mean: 27.160627
Genome size: 97
Size: 98
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3971.5926095999926
Median total errors in population: 1366.6509
Error averages by case: (163.1790099000003 10.65 141.72153180000004 11.193 160.68960769999958 10.217 129.30802429999895 9.667 177.372104300001 10.869 134.1084695000008 10.266 118.08471520000047 10.563 131.60494500000064 10.494 163.94910269999926 11.052 147.77561459999885 10.158 177.59446560000006 11.381 134.88528650000077 10.795 156.81320790000095 10.181 187.16188709999946 11.424 165.24004129999923 10.581 169.0122825999998 10.576 118.91877300000097 10.414 129.25351500000087 10.578 130.67953630000096 11.148 158.77074449999884 10.926 158.34809400000103 10.18 157.88812530000067 11.475 103.16823280000068 10.9 162.02981189999963 11.929 125.81448080000001 10.604)
Error minima by case: (0.8025 8 6.3366 8 0.055 6 1.6363 7 4.7284 7 5.4831 8 0.596 8 0.0575 5 2.7945 8 8.6398 8 0.3326 8 5.7564 7 1.9231 7 53.966 8 5.6185 8 1.2752 7 0.1147 7 0.91 7 0.1089 6 9.4007 8 4.4339 8 21.2339 8 0.4725 8 6.3327 8 1.6096 8)
Average genome size in population (length): 89.8
Average program size in population (points): 90.8
Average percent parens in population: 0.011
Minimum age in population: 44.66277388297021
Maximum age in population: 49.21966708777472
Average age in population: 47.31726122514624
Median age in population: 47.34798333444633
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.867
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.867
Total error diversity:				 0.217
Error (vector) diversity:			 0.222
Behavioral diversity:				 0.223
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 65702584
--- Timings ---
Current time: 1529616061984 milliseconds
Total Time:         132.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.8 seconds, 36.1%
Fitness Testing:     66.0 seconds, 49.8%
Report:              18.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 64493.37970000011
Test mean error for best: 32.24669
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 138.7549651018
Correct output: 71.9246550776  | Program output: 13.4759016424 
Correct output: -71.7136417398 | Program output: -126.7320262376
Correct output: -86.3636978789 | Program output: -94.3655930716
Correct output: -175.789814475 | Program output: -114.5494760958
Correct output: -67.4831289413 | Program output: -88.9582621533
Correct output: -23.3513071934 | Program output: -14.9642993636
Correct output: -123.1447619871 | Program output: -133.1459260254
Correct output: 24.0076171492  | Program output: 104.0342244497
Correct output: -50.6702678178 | Program output: -5.9655322376 
Correct output: -128.7993219642 | Program output: -58.3799741448
Correct output: 41.7575748041  | Program output: 74.030680342  
Correct output: 173.057045519  | Program output: 126.7320262376
Correct output: -110.0264496737 | Program output: -21.8725284831
Correct output: 11.9743638411  | Program output: 94.3655930716 
Correct output: -2.4287759947  | Program output: 80.4084301827 
Correct output: -60.8453890801 | Program output: -61.9585062888
Correct output: -119.1994005588 | Program output: -114.5494760958
Correct output: -1.7396856728  | Program output: 43.3402804779 
Correct output: 51.2300489273  | Program output: -5.7787088954 
Correct output: 185.9904753477 | Program output: 138.7549651018
Correct output: 42.4470677171  | Program output: -15.3823357832
Correct output: 53.3134494099  | Program output: 50.8836727679 
Correct output: -33.8727861409 | Program output: 41.9016557053 
Correct output: 127.8115346332 | Program output: 145.2511527526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_76} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_flush} {:instruction float_flush} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction -33} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (integer_shove float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan print_integer float_sin print_integer float_sin float_sin float_yankdup float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_76 float_inc float_frominteger float_dec float_flush float_flush integer_max float_dup_items integer_yank float_sin float_shove float_frominteger integer_div float_flush float_frominteger float_dup tag_float_475 float_dup_items integer_yank float_sin print_integer -33 tag_float_475 print_float float_shove float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [52.7672 8 58.4488 11 55.0184 11 8.0019 8 61.2403 10 21.4751 10 8.387 11 10.0012 9 80.0266 9 44.7047 10 70.4193 8 32.2731 10 46.325 11 88.1539 11 82.3912 10 82.8372 9 1.1131 9 4.6499 7 45.08 10 57.0088 10 47.2355 11 57.8294 12 2.4298 9 75.7744 13 17.4396 10]
Total: 1358.0314000000003
Mean: 27.160627
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4369.092635899992
Median total errors in population: 1363.8487000000002
Error averages by case: (178.29846210000113 10.733 151.06636650000024 11.179 175.4608223000006 10.338 148.13996589999928 10.015 197.24027279999999 10.863 151.32157930000005 10.594 137.4376206000004 10.613 150.6406578000005 10.307 167.9017656999994 10.789 166.53164459999877 10.391 202.60153380000023 11.867 149.20572959999998 10.716 171.50786760000025 10.373 212.21778519999955 11.905 170.84247839999964 10.901 180.16042430000005 10.181 138.99285890000104 10.727 149.5036718999998 10.424 138.66557770000009 10.706 183.62714849999855 11.079 173.44402690000118 10.883 174.53685320000088 11.701 115.40486890000007 11.085 178.42899350000056 11.687 135.12665989999988 10.73)
Error minima by case: (1.0978 2 5.1254 2 0.055 6 1.6363 8 5.4004 3 5.4831 1 0.596 1 0.0575 2 3.5511 8 0.6337 2 1.9073 2 2.7576 8 12.943 2 3.097 3 6.6055 8 0.2035 2 0.0896 2 0.91 3 0.2908 2 7.0 1 4.4339 2 3.4471 2 0.4152 2 12.3262 2 0.2722 3)
Average genome size in population (length): 92.315
Average program size in population (points): 93.315
Average percent parens in population: 0.011
Minimum age in population: 46.51653031259775
Maximum age in population: 50.89940154273063
Average age in population: 48.82754766353732
Median age in population: 48.88302671874408
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.258
Error (vector) diversity:			 0.264
Behavioral diversity:				 0.266
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 68019909
--- Timings ---
Current time: 1529616066067 milliseconds
Total Time:         136.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.0 seconds, 35.9%
Fitness Testing:     68.1 seconds, 49.9%
Report:              19.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 64493.37970000011
Test mean error for best: 32.24669
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 138.7549651018
Correct output: 71.9246550776  | Program output: 13.4759016424 
Correct output: -71.7136417398 | Program output: -126.7320262376
Correct output: -86.3636978789 | Program output: -94.3655930716
Correct output: -175.789814475 | Program output: -114.5494760958
Correct output: -67.4831289413 | Program output: -88.9582621533
Correct output: -23.3513071934 | Program output: -14.9642993636
Correct output: -123.1447619871 | Program output: -133.1459260254
Correct output: 24.0076171492  | Program output: 104.0342244497
Correct output: -50.6702678178 | Program output: -5.9655322376 
Correct output: -128.7993219642 | Program output: -58.3799741448
Correct output: 41.7575748041  | Program output: 74.030680342  
Correct output: 173.057045519  | Program output: 126.7320262376
Correct output: -110.0264496737 | Program output: -21.8725284831
Correct output: 11.9743638411  | Program output: 94.3655930716 
Correct output: -2.4287759947  | Program output: 80.4084301827 
Correct output: -60.8453890801 | Program output: -61.9585062888
Correct output: -119.1994005588 | Program output: -114.5494760958
Correct output: -1.7396856728  | Program output: 43.3402804779 
Correct output: 51.2300489273  | Program output: -5.7787088954 
Correct output: 185.9904753477 | Program output: 138.7549651018
Correct output: 42.4470677171  | Program output: -15.3823357832
Correct output: 53.3134494099  | Program output: 50.8836727679 
Correct output: -33.8727861409 | Program output: 41.9016557053 
Correct output: 127.8115346332 | Program output: 145.2511527526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction tag_float_329} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_76} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_flush} {:instruction float_flush} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction -33} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan print_integer float_sin print_integer float_sin float_sin float_yankdup float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 tag_float_329 integer_flush float_tan float_dup integer_inc tagged_76 float_inc float_frominteger float_dec float_flush float_flush integer_max float_dup_items integer_yank float_sin float_shove float_frominteger integer_div float_flush float_frominteger float_dup tag_float_475 float_dup_items integer_yank float_sin print_integer -33 tag_float_475 print_float float_shove float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [52.7672 8 58.4488 11 55.0184 11 8.0019 8 61.2403 10 21.4751 10 8.387 11 10.0012 9 80.0266 9 44.7047 10 70.4193 8 32.2731 10 46.325 11 88.1539 11 82.3912 10 82.8372 9 1.1131 9 4.6499 7 45.08 10 57.0088 10 47.2355 11 57.8294 12 2.4298 9 75.7744 13 17.4396 10]
Total: 1358.0314000000003
Mean: 27.160627
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 4766.045040299993
Median total errors in population: 1360.3647999999996
Error averages by case: (191.484157000001 10.296 163.040002200001 11.01 192.48518280000104 10.466 165.78324909999884 10.01 214.67843839999864 10.702 168.46657959999885 10.813 157.6104144999995 10.571 167.15985640000073 10.35 182.6988901999993 10.323 185.7491366999992 10.721 214.51160970000112 11.892 161.72808120000028 10.57 185.7443533000003 10.389 226.0955274000002 12.016 188.98206960000087 10.937 193.86347319999967 9.949 157.51580400000088 11.105 167.88449999999946 10.081 156.4749646999998 10.742 197.32714079999812 11.093 186.70339380000053 11.517 194.42647100000113 12.0 133.49562959999935 11.005 192.17129300000113 11.495 149.16882209999963 10.743)
Error minima by case: (1.0978 3 18.3864 3 0.1199 8 1.5762 8 4.4385 3 5.4831 1 0.9592 1 0.0575 2 1.2273 8 4.0 2 0.8256 2 2.5812 8 2.7229 4 31.0 3 5.1528 7 0.6914 2 0.1797 2 0.91 3 0.0727 2 11.5219 3 3.5488 4 6.0005 5 0.5235 4 0.8728 2 0.2722 4)
Average genome size in population (length): 93.213
Average program size in population (points): 94.213
Average percent parens in population: 0.011
Minimum age in population: 48.11176250874996
Maximum age in population: 52.1633241471136
Average age in population: 50.31105073767528
Median age in population: 50.36515779106412
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.875
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.875
Total error diversity:				 0.242
Error (vector) diversity:			 0.247
Behavioral diversity:				 0.248
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 70358284
--- Timings ---
Current time: 1529616070512 milliseconds
Total Time:         141.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.6 seconds, 35.9%
Fitness Testing:     70.4 seconds, 49.9%
Report:              19.8 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 64493.37970000011
Test mean error for best: 32.24669
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 138.7549651018
Correct output: 71.9246550776  | Program output: 13.4759016424 
Correct output: -71.7136417398 | Program output: -126.7320262376
Correct output: -86.3636978789 | Program output: -94.3655930716
Correct output: -175.789814475 | Program output: -114.5494760958
Correct output: -67.4831289413 | Program output: -88.9582621533
Correct output: -23.3513071934 | Program output: -14.9642993636
Correct output: -123.1447619871 | Program output: -133.1459260254
Correct output: 24.0076171492  | Program output: 104.0342244497
Correct output: -50.6702678178 | Program output: -5.9655322376 
Correct output: -128.7993219642 | Program output: -58.3799741448
Correct output: 41.7575748041  | Program output: 74.030680342  
Correct output: 173.057045519  | Program output: 126.7320262376
Correct output: -110.0264496737 | Program output: -21.8725284831
Correct output: 11.9743638411  | Program output: 94.3655930716 
Correct output: -2.4287759947  | Program output: 80.4084301827 
Correct output: -60.8453890801 | Program output: -61.9585062888
Correct output: -119.1994005588 | Program output: -114.5494760958
Correct output: -1.7396856728  | Program output: 43.3402804779 
Correct output: 51.2300489273  | Program output: -5.7787088954 
Correct output: 185.9904753477 | Program output: 138.7549651018
Correct output: 42.4470677171  | Program output: -15.3823357832
Correct output: 53.3134494099  | Program output: 50.8836727679 
Correct output: -33.8727861409 | Program output: 41.9016557053 
Correct output: 127.8115346332 | Program output: 145.2511527526
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction tagged_159} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_flush} {:instruction float_flush} {:instruction integer_max} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction print_integer} {:instruction -33} {:instruction tag_float_475} {:instruction print_float} {:instruction float_shove} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction integer_swap})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan print_integer float_sin print_integer float_sin float_sin float_yankdup float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_swap integer_add print_float in2 integer_max integer_flush float_tan float_dup integer_inc tagged_159 float_mod float_frominteger float_dec float_flush float_flush integer_max float_dup_items integer_yank float_sin float_shove float_frominteger integer_div float_dup tag_float_475 float_dup_items integer_yank float_sin print_integer -33 tag_float_475 print_float float_shove float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush integer_swap)
Errors: [52.7672 8 58.4488 11 55.0184 11 8.0019 8 61.2403 10 21.4751 10 8.387 11 10.0012 9 80.0266 9 44.7047 10 70.4193 8 32.2731 10 46.325 11 88.1539 11 82.3912 10 82.8372 9 1.1131 9 4.6499 7 45.08 10 57.0088 10 47.2355 11 57.8294 12 2.4298 9 75.7744 13 17.4396 10]
Total: 1358.0314000000003
Mean: 27.160627
Genome size: 106
Size: 107
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4356.942367899995
Median total errors in population: 1360.3647999999996
Error averages by case: (182.86514890000115 9.75 150.6876105000009 10.902 174.5669532000004 10.769 149.12082449999954 9.846 197.2586167000002 10.895 149.3955836999995 10.879 132.30638709999997 10.646 152.29819319999962 10.378 171.10669610000016 10.414 161.56102880000014 10.885 197.0148359999999 11.32 152.44536570000002 10.865 176.32207040000105 10.7 203.33903380000132 11.759 175.8261381000011 10.642 179.90165780000063 10.259 135.6961677000011 10.817 149.88520449999965 9.63 140.6447558000002 10.927 175.05545349999954 10.865 178.1163731000002 11.327 169.6027201999996 11.934 116.02192609999985 10.606 176.59800589999992 11.694 139.99461659999972 10.602)
Error minima by case: (0.2764 7 18.0753 7 0.1439 8 1.6363 8 4.9148 7 3.3517 8 1.613 8 0.0575 7 2.2273 7 7.3297 7 0.0063 8 2.9722 8 1.4627 8 1.0939 8 1.2682 8 0.3115 8 0.1797 8 0.0784 7 0.7397 7 13.6422 8 3.3549 8 4.8592 8 0.1033 7 3.9917 7 0.1395 7)
Average genome size in population (length): 94.016
Average program size in population (points): 95.016
Average percent parens in population: 0.011
Minimum age in population: 49.16210241336375
Maximum age in population: 53.93659821443725
Average age in population: 51.67299654182955
Median age in population: 51.71254043094814
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.265
Error (vector) diversity:			 0.268
Behavioral diversity:				 0.27
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 72723359
--- Timings ---
Current time: 1529616074634 milliseconds
Total Time:         145.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.0 seconds, 35.9%
Fitness Testing:     72.6 seconds, 50.0%
Report:              20.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 63699.082200000084
Test mean error for best: 31.84954
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 128.6492286715
Correct output: 71.9246550776  | Program output: 11.3633737423 
Correct output: -71.7136417398 | Program output: -118.265314587
Correct output: -86.3636978789 | Program output: -95.336556711 
Correct output: -175.789814475 | Program output: -113.9849044801
Correct output: -67.4831289413 | Program output: -83.7539529721
Correct output: -23.3513071934 | Program output: -14.7333787692
Correct output: -123.1447619871 | Program output: -123.9478787396
Correct output: 24.0076171492  | Program output: 95.5459192464 
Correct output: -50.6702678178 | Program output: -6.4849034878 
Correct output: -128.7993219642 | Program output: -60.6605249487
Correct output: 41.7575748041  | Program output: 75.341175114  
Correct output: 173.057045519  | Program output: 116.265314587 
Correct output: -110.0264496737 | Program output: -23.882056314 
Correct output: 11.9743638411  | Program output: 93.336556711  
Correct output: -2.4287759947  | Program output: 79.9010404568 
Correct output: -60.8453890801 | Program output: -58.2983517628
Correct output: -119.1994005588 | Program output: -113.9849044801
Correct output: -1.7396856728  | Program output: 38.8033895632 
Correct output: 51.2300489273  | Program output: -6.8312101955 
Correct output: 185.9904753477 | Program output: 128.6492286715
Correct output: 42.4470677171  | Program output: -15.5913461473
Correct output: 53.3134494099  | Program output: 45.695587519  
Correct output: -33.8727861409 | Program output: 43.7952821981 
Correct output: 127.8115346332 | Program output: 132.2542025765
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan float_dup tag_float_475 float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush)
Errors: [62.873 10 60.5613 11 46.5517 11 8.9729 8 61.8049 9 16.2708 10 8.6179 10 0.8031 8 71.5383 10 44.1854 10 68.1388 11 33.5836 10 56.7917 9 86.1444 12 81.3622 9 82.3298 12 2.547 11 5.2145 8 40.5431 9 58.0613 11 57.3412 12 58.0384 12 7.6179 11 77.6681 10 4.4427 12]
Total: 1358.0040000000004
Mean: 27.16008
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3976.970298199993
Median total errors in population: 1358.0314000000003
Error averages by case: (160.2559486000011 9.269 139.18725579999975 10.913 165.50364620000045 11.167 132.25797990000092 9.341 181.55304500000142 10.701 138.6221161999993 10.642 123.90407210000077 11.091 137.21564469999942 10.156 157.92577820000045 10.113 154.23984630000078 10.671 182.13687620000007 9.94 129.18415230000159 10.556 153.74072510000042 11.043 192.7855063000017 11.509 157.3220346000007 10.464 161.1353994000003 10.001 124.49241830000098 10.077 133.23490800000047 8.859 126.05886590000104 10.61 163.71121430000085 10.532 155.32306330000011 11.225 162.14870059999916 11.933 100.60697989999967 10.018 157.33451879999865 12.354 123.32560219999927 10.579)
Error minima by case: (0.2764 7 18.8317 7 1.4089 8 1.576 8 4.9148 8 2.605 8 1.613 8 0.0575 7 5.1035 8 9.6398 7 0.0063 8 7.6128 7 1.4627 7 12.1151 8 6.6023 8 1.2025 7 0.102 7 0.0336 6 0.7397 6 47.6525 8 4.0369 8 24.634 8 0.0847 8 0.8728 9 0.5207 8)
Average genome size in population (length): 94.226
Average program size in population (points): 95.226
Average percent parens in population: 0.011
Minimum age in population: 50.16210241336375
Maximum age in population: 55.06090655687149
Average age in population: 52.87392964975216
Median age in population: 52.87333158677211
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.885
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.885
Total error diversity:				 0.231
Error (vector) diversity:			 0.233
Behavioral diversity:				 0.234
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 75102484
--- Timings ---
Current time: 1529616079103 milliseconds
Total Time:         149.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.6 seconds, 35.9%
Fitness Testing:     74.7 seconds, 50.0%
Report:              20.9 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 63699.082200000084
Test mean error for best: 31.84954
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 128.6492286715
Correct output: 71.9246550776  | Program output: 11.3633737423 
Correct output: -71.7136417398 | Program output: -118.265314587
Correct output: -86.3636978789 | Program output: -95.336556711 
Correct output: -175.789814475 | Program output: -113.9849044801
Correct output: -67.4831289413 | Program output: -83.7539529721
Correct output: -23.3513071934 | Program output: -14.7333787692
Correct output: -123.1447619871 | Program output: -123.9478787396
Correct output: 24.0076171492  | Program output: 95.5459192464 
Correct output: -50.6702678178 | Program output: -6.4849034878 
Correct output: -128.7993219642 | Program output: -60.6605249487
Correct output: 41.7575748041  | Program output: 75.341175114  
Correct output: 173.057045519  | Program output: 116.265314587 
Correct output: -110.0264496737 | Program output: -23.882056314 
Correct output: 11.9743638411  | Program output: 93.336556711  
Correct output: -2.4287759947  | Program output: 79.9010404568 
Correct output: -60.8453890801 | Program output: -58.2983517628
Correct output: -119.1994005588 | Program output: -113.9849044801
Correct output: -1.7396856728  | Program output: 38.8033895632 
Correct output: 51.2300489273  | Program output: -6.8312101955 
Correct output: 185.9904753477 | Program output: 128.6492286715
Correct output: 42.4470677171  | Program output: -15.5913461473
Correct output: 53.3134494099  | Program output: 45.695587519  
Correct output: -33.8727861409 | Program output: 43.7952821981 
Correct output: 127.8115346332 | Program output: 132.2542025765
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan float_dup tag_float_475 float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush)
Errors: [62.873 10 60.5613 11 46.5517 11 8.9729 8 61.8049 9 16.2708 10 8.6179 10 0.8031 8 71.5383 10 44.1854 10 68.1388 11 33.5836 10 56.7917 9 86.1444 12 81.3622 9 82.3298 12 2.547 11 5.2145 8 40.5431 9 58.0613 11 57.3412 12 58.0384 12 7.6179 11 77.6681 10 4.4427 12]
Total: 1358.0040000000004
Mean: 27.16008
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3927.7469219999894
Median total errors in population: 1358.0314000000003
Error averages by case: (157.62842180000123 9.252 141.3090961000001 11.086 160.35884030000048 11.405 128.4463796000015 9.253 179.45471620000194 10.681 134.45200449999928 10.577 118.54373190000106 11.31 132.82047279999918 10.144 157.77730080000066 9.942 149.42755750000097 10.599 177.26534690000045 9.55 131.25536910000181 10.517 150.90658360000018 11.205 189.40193980000208 11.454 160.5902498000009 10.524 163.1914263 9.898 118.60698270000105 9.857 130.58814920000083 8.766 128.8463422000012 10.516 158.43710220000074 10.469 152.68535639999993 11.318 159.81566859999887 11.903 100.59315949999929 9.864 159.7797128999978 12.728 122.08801129999908 10.659)
Error minima by case: (4.4778 2 9.0 2 0.1439 8 1.6966 8 5.9294 3 4.6256 1 0.2198 1 0.0575 2 9.0266 8 4.0 2 5.5807 2 1.9186 6 12.943 2 5.5433 3 0.9141 8 0.9416 2 0.0344 2 0.0756 3 0.6495 2 7.0 1 10.0095 2 11.0 2 0.1316 2 10.9434 2 1.49 3)
Average genome size in population (length): 94.347
Average program size in population (points): 95.347
Average percent parens in population: 0.011
Minimum age in population: 51.61854125675745
Maximum age in population: 56.48779018994537
Average age in population: 54.16323817386859
Median age in population: 54.21973591149435
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.908
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.908
Total error diversity:				 0.182
Error (vector) diversity:			 0.185
Behavioral diversity:				 0.187
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 77488709
--- Timings ---
Current time: 1529616083623 milliseconds
Total Time:         154.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.1 seconds, 35.7%
Fitness Testing:     77.3 seconds, 50.1%
Report:              21.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 63699.082200000084
Test mean error for best: 31.84954
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 128.6492286715
Correct output: 71.9246550776  | Program output: 11.3633737423 
Correct output: -71.7136417398 | Program output: -118.265314587
Correct output: -86.3636978789 | Program output: -95.336556711 
Correct output: -175.789814475 | Program output: -113.9849044801
Correct output: -67.4831289413 | Program output: -83.7539529721
Correct output: -23.3513071934 | Program output: -14.7333787692
Correct output: -123.1447619871 | Program output: -123.9478787396
Correct output: 24.0076171492  | Program output: 95.5459192464 
Correct output: -50.6702678178 | Program output: -6.4849034878 
Correct output: -128.7993219642 | Program output: -60.6605249487
Correct output: 41.7575748041  | Program output: 75.341175114  
Correct output: 173.057045519  | Program output: 116.265314587 
Correct output: -110.0264496737 | Program output: -23.882056314 
Correct output: 11.9743638411  | Program output: 93.336556711  
Correct output: -2.4287759947  | Program output: 79.9010404568 
Correct output: -60.8453890801 | Program output: -58.2983517628
Correct output: -119.1994005588 | Program output: -113.9849044801
Correct output: -1.7396856728  | Program output: 38.8033895632 
Correct output: 51.2300489273  | Program output: -6.8312101955 
Correct output: 185.9904753477 | Program output: 128.6492286715
Correct output: 42.4470677171  | Program output: -15.5913461473
Correct output: 53.3134494099  | Program output: 45.695587519  
Correct output: -33.8727861409 | Program output: 43.7952821981 
Correct output: 127.8115346332 | Program output: 132.2542025765
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan float_dup tag_float_475 float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush)
Errors: [62.873 10 60.5613 11 46.5517 11 8.9729 8 61.8049 9 16.2708 10 8.6179 10 0.8031 8 71.5383 10 44.1854 10 68.1388 11 33.5836 10 56.7917 9 86.1444 12 81.3622 9 82.3298 12 2.547 11 5.2145 8 40.5431 9 58.0613 11 57.3412 12 58.0384 12 7.6179 11 77.6681 10 4.4427 12]
Total: 1358.0040000000004
Mean: 27.16008
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3832.2169813999894
Median total errors in population: 1358.0314000000003
Error averages by case: (154.63339620000121 9.198 136.1175363999995 11.035 158.61861900000054 11.362 125.53504540000127 9.206 174.2341513000017 10.631 132.39884019999917 10.522 114.25761800000086 11.333 132.56262869999924 10.063 155.80367220000042 9.896 144.48001780000092 10.549 174.19932510000046 9.487 125.16081980000143 10.458 148.21310359999995 11.188 185.0857179000018 11.45 156.69624750000037 10.493 157.89729969999968 9.873 116.23995310000096 9.847 125.92586170000068 8.71 124.4029061000011 10.49 153.72211120000054 10.479 149.70488179999998 11.286 152.45781519999983 11.923 96.34164039999924 9.89 154.63160289999794 12.739 120.1391701999992 10.649)
Error minima by case: (0.0968 7 18.0753 7 0.1439 8 1.6363 7 4.9803 9 2.7998 8 1.613 8 0.8031 7 0.5383 8 9.6398 7 0.1101 8 4.4956 7 1.1665 8 8.28 8 6.6088 8 1.5303 8 0.0344 7 0.0756 6 1.1935 6 8.0088 7 4.2553 8 5.1851 8 0.2052 6 12.7744 8 2.1167 8)
Average genome size in population (length): 94.576
Average program size in population (points): 95.576
Average percent parens in population: 0.011
Minimum age in population: 52.61854125675745
Maximum age in population: 57.5497046114906
Average age in population: 55.59352374066893
Median age in population: 55.63082221032892
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.935
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.935
Total error diversity:				 0.202
Error (vector) diversity:			 0.203
Behavioral diversity:				 0.205
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 79879534
--- Timings ---
Current time: 1529616087627 milliseconds
Total Time:         158.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.3 seconds, 35.6%
Fitness Testing:     79.4 seconds, 50.2%
Report:              22.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 63699.082200000084
Test mean error for best: 31.84954
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 128.6492286715
Correct output: 71.9246550776  | Program output: 11.3633737423 
Correct output: -71.7136417398 | Program output: -118.265314587
Correct output: -86.3636978789 | Program output: -95.336556711 
Correct output: -175.789814475 | Program output: -113.9849044801
Correct output: -67.4831289413 | Program output: -83.7539529721
Correct output: -23.3513071934 | Program output: -14.7333787692
Correct output: -123.1447619871 | Program output: -123.9478787396
Correct output: 24.0076171492  | Program output: 95.5459192464 
Correct output: -50.6702678178 | Program output: -6.4849034878 
Correct output: -128.7993219642 | Program output: -60.6605249487
Correct output: 41.7575748041  | Program output: 75.341175114  
Correct output: 173.057045519  | Program output: 116.265314587 
Correct output: -110.0264496737 | Program output: -23.882056314 
Correct output: 11.9743638411  | Program output: 93.336556711  
Correct output: -2.4287759947  | Program output: 79.9010404568 
Correct output: -60.8453890801 | Program output: -58.2983517628
Correct output: -119.1994005588 | Program output: -113.9849044801
Correct output: -1.7396856728  | Program output: 38.8033895632 
Correct output: 51.2300489273  | Program output: -6.8312101955 
Correct output: 185.9904753477 | Program output: 128.6492286715
Correct output: 42.4470677171  | Program output: -15.5913461473
Correct output: 53.3134494099  | Program output: 45.695587519  
Correct output: -33.8727861409 | Program output: 43.7952821981 
Correct output: 127.8115346332 | Program output: 132.2542025765
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_mult} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction -6.151601546247008} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction in2} {:instruction float_sin} {:instruction integer_flush} {:instruction float_tan} {:instruction float_dup} {:instruction integer_inc} {:instruction float_flush} {:instruction float_swap} {:instruction float_dup_items})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan integer_mult tag_float_475 float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div -6.151601546247008 float_frominteger integer_div float_flush float_frominteger integer_div in2 float_sin integer_flush float_tan float_dup integer_inc float_flush float_swap float_dup_items)
Errors: [62.873 10 60.5613 11 46.5517 11 8.9729 8 61.8049 9 16.2708 10 8.6179 10 0.8031 8 71.5383 10 44.1854 10 68.1388 11 33.5836 10 56.7917 9 86.1444 12 81.3622 9 82.3298 12 2.547 11 5.2145 8 40.5431 9 58.0613 11 57.3412 12 58.0384 12 7.6179 11 77.6681 10 4.4427 12]
Total: 1358.0040000000004
Mean: 27.16008
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4345.067881199988
Median total errors in population: 1358.0314000000003
Error averages by case: (175.9778354000012 9.382 150.56773890000025 11.182 180.3015196000005 11.484 147.85014000000137 9.365 195.61438120000162 10.742 154.55112780000044 10.681 135.10001500000067 11.401 153.49552709999924 10.188 175.31273210000077 10.076 166.0003244000009 10.629 195.69826140000086 9.737 145.48032060000085 10.634 167.53465860000068 11.223 205.23052020000176 11.578 175.1965429000013 10.594 177.73690580000064 10.066 138.73936910000094 10.033 148.08149120000002 8.896 142.7681107000004 10.581 173.46593060000163 10.604 171.1400192000004 11.388 172.29338069999872 12.025 116.39976379999914 10.025 174.11066649999827 12.666 140.45659839999945 10.784)
Error minima by case: (0.2764 4 6.6233 5 1.2007 9 1.576 8 4.9148 6 5.26 4 1.613 4 0.1969 5 2.1243 8 9.1726 5 0.0063 5 2.0111 8 1.4627 5 8.28 6 1.9819 8 0.8291 5 0.0344 5 0.0784 6 0.7397 5 9.7426 4 3.3549 4 5.4817 5 0.1145 5 1.7034 5 1.9882 5)
Average genome size in population (length): 95.132
Average program size in population (points): 96.132
Average percent parens in population: 0.010
Minimum age in population: 53.61854125675745
Maximum age in population: 59.10726210993016
Average age in population: 57.04551194879527
Median age in population: 57.09551185315286
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.21
Error (vector) diversity:			 0.216
Behavioral diversity:				 0.217
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 82284384
--- Timings ---
Current time: 1529616091908 milliseconds
Total Time:         162.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.8 seconds, 35.6%
Fitness Testing:     81.7 seconds, 50.3%
Report:              22.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 63712.34319999997
Test mean error for best: 31.85617
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 127.9547724591
Correct output: 71.9246550776  | Program output: 11.283526811  
Correct output: -71.7136417398 | Program output: -117.567403361
Correct output: -86.3636978789 | Program output: -95.3333594712
Correct output: -175.789814475 | Program output: -113.8313471447
Correct output: -67.4831289413 | Program output: -83.2881716902
Correct output: -23.3513071934 | Program output: -14.6449486065
Correct output: -123.1447619871 | Program output: -123.2010733441
Correct output: 24.0076171492  | Program output: 94.9883920655 
Correct output: -50.6702678178 | Program output: -6.4501819732 
Correct output: -128.7993219642 | Program output: -60.7861907396
Correct output: 41.7575748041  | Program output: 75.5615070425 
Correct output: 173.057045519  | Program output: 115.567403361 
Correct output: -110.0264496737 | Program output: -23.9746929983
Correct output: 11.9743638411  | Program output: 93.3333594712 
Correct output: -2.4287759947  | Program output: 79.9527458023 
Correct output: -60.8453890801 | Program output: -57.9554234278
Correct output: -119.1994005588 | Program output: -113.8313471447
Correct output: -1.7396856728  | Program output: 38.5487561567 
Correct output: 51.2300489273  | Program output: -6.8366344843 
Correct output: 185.9904753477 | Program output: 127.9547724591
Correct output: 42.4470677171  | Program output: -15.5273877356
Correct output: 53.3134494099  | Program output: 45.3947615515 
Correct output: -33.8727861409 | Program output: 44.0484228636 
Correct output: 127.8115346332 | Program output: 131.3932779967
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction float_cos} {:instruction float_pop} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max float_cos float_pop integer_shove float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan float_dup tag_float_475 float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush)
Errors: [63.5674 11 60.6411 9 45.8538 9 8.9697 9 61.9585 9 15.805 10 8.7064 12 0.0563 9 70.9808 11 44.2201 10 68.0131 11 33.8039 10 57.4896 9 86.0518 11 81.359 10 82.3815 10 2.89 11 5.3681 11 40.2884 10 58.0667 10 58.0357 9 57.9745 10 7.9187 11 77.9212 11 3.5817 12]
Total: 1356.903
Mean: 27.13806
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4325.118529699987
Median total errors in population: 1358.0314000000003
Error averages by case: (171.12514270000102 9.519 144.60339239999982 11.077 180.78009520000072 11.359 154.02993440000094 9.39 199.50044620000122 10.598 154.84502410000022 10.634 131.94119390000063 11.216 156.35638269999947 10.179 169.11339300000012 10.088 160.50585900000053 10.627 199.98855760000046 9.955 149.13382990000076 10.527 164.62422980000045 10.987 207.24743320000132 11.562 174.978674500001 10.463 177.56134770000043 10.219 138.95560370000095 10.116 153.22074330000015 9.028 138.94501830000047 10.479 173.50653520000085 10.605 166.41415410000005 11.392 172.2372617999991 11.909 111.79484069999926 10.119 172.67676669999875 12.396 135.69566959999938 10.893)
Error minima by case: (0.0804 7 15.1625 8 1.0973 7 0.5095 7 4.8507 8 4.9708 6 0.975 8 0.0563 7 0.7557 8 0.6703 7 0.1194 7 6.6692 8 1.1861 8 12.3914 8 0.9141 7 1.2798 8 0.1131 7 0.0592 6 0.7397 7 6.1867 8 4.2553 9 19.3156 8 0.2052 7 2.2704 7 1.1589 8)
Average genome size in population (length): 95.988
Average program size in population (points): 96.988
Average percent parens in population: 0.010
Minimum age in population: 55.91615248076232
Maximum age in population: 60.25206763430469
Average age in population: 58.52894644083563
Median age in population: 58.61122306321795
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.237
Error (vector) diversity:			 0.24
Behavioral diversity:				 0.241
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 84707059
--- Timings ---
Current time: 1529616096221 milliseconds
Total Time:         166.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.2 seconds, 35.6%
Fitness Testing:     83.9 seconds, 50.4%
Report:              23.4 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 63712.34319999997
Test mean error for best: 31.85617
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 127.9547724591
Correct output: 71.9246550776  | Program output: 11.283526811  
Correct output: -71.7136417398 | Program output: -117.567403361
Correct output: -86.3636978789 | Program output: -95.3333594712
Correct output: -175.789814475 | Program output: -113.8313471447
Correct output: -67.4831289413 | Program output: -83.2881716902
Correct output: -23.3513071934 | Program output: -14.6449486065
Correct output: -123.1447619871 | Program output: -123.2010733441
Correct output: 24.0076171492  | Program output: 94.9883920655 
Correct output: -50.6702678178 | Program output: -6.4501819732 
Correct output: -128.7993219642 | Program output: -60.7861907396
Correct output: 41.7575748041  | Program output: 75.5615070425 
Correct output: 173.057045519  | Program output: 115.567403361 
Correct output: -110.0264496737 | Program output: -23.9746929983
Correct output: 11.9743638411  | Program output: 93.3333594712 
Correct output: -2.4287759947  | Program output: 79.9527458023 
Correct output: -60.8453890801 | Program output: -57.9554234278
Correct output: -119.1994005588 | Program output: -113.8313471447
Correct output: -1.7396856728  | Program output: 38.5487561567 
Correct output: 51.2300489273  | Program output: -6.8366344843 
Correct output: 185.9904753477 | Program output: 127.9547724591
Correct output: 42.4470677171  | Program output: -15.5273877356
Correct output: 53.3134494099  | Program output: 45.3947615515 
Correct output: -33.8727861409 | Program output: 44.0484228636 
Correct output: 127.8115346332 | Program output: 131.3932779967
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction float_cos} {:instruction float_pop} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_div} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max float_cos float_pop integer_shove float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan float_dup tag_float_475 float_dup_items float_div integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush)
Errors: [63.5674 11 60.6411 9 45.8538 9 8.9697 9 61.9585 9 15.805 10 8.7064 12 0.0563 9 70.9808 11 44.2201 10 68.0131 11 33.8039 10 57.4896 9 86.0518 11 81.359 10 82.3815 10 2.89 11 5.3681 11 40.2884 10 58.0667 10 58.0357 9 57.9745 10 7.9187 11 77.9212 11 3.5817 12]
Total: 1356.903
Mean: 27.13806
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4704.398496499987
Median total errors in population: 1358.0314000000003
Error averages by case: (195.34844200000074 10.066 166.4156069000009 11.095 190.1020599000006 11.406 163.63634009999996 9.568 212.12222670000023 10.629 166.36935930000038 10.75 147.99101639999986 11.143 170.88377319999947 10.227 183.56643559999978 10.385 176.90584279999973 10.704 211.8329102999998 10.699 159.1886648000004 10.642 189.7375741000011 10.81 218.96627360000033 11.86 183.54674150000125 10.482 188.03114580000098 10.772 155.2023099999997 10.564 164.74149460000004 9.498 155.56435579999982 10.428 189.15890230000133 10.859 190.3153456000002 11.596 184.25566299999883 11.948 131.90812989999924 10.561 185.08747719999968 11.965 153.54640510000095 11.317)
Error minima by case: (4.4778 8 6.1506 7 0.7098 7 1.6363 7 13.4243 6 3.5964 7 3.4341 8 0.0102 6 0.1957 7 3.5932 7 1.9007 8 2.781 8 12.943 7 37.2152 9 1.9744 7 0.4388 8 0.0344 6 0.0592 6 0.2954 6 6.6915 7 10.0095 7 2.0915 8 0.2052 7 12.3602 7 0.0171 6)
Average genome size in population (length): 97.389
Average program size in population (points): 98.389
Average percent parens in population: 0.010
Minimum age in population: 57.24430801851304
Maximum age in population: 62.03820038536196
Average age in population: 60.07463343451085
Median age in population: 60.1083843871138
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.912
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.912
Total error diversity:				 0.273
Error (vector) diversity:			 0.276
Behavioral diversity:				 0.278
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 87156459
--- Timings ---
Current time: 1529616100294 milliseconds
Total Time:         170.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.6 seconds, 35.5%
Fitness Testing:     86.0 seconds, 50.4%
Report:              24.1 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 63742.17479999999
Test mean error for best: 31.87109
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 128.5448311369
Correct output: 71.9246550776  | Program output: 11.3475363758 
Correct output: -71.7136417398 | Program output: -118.1430235879
Correct output: -86.3636978789 | Program output: -95.3365497079
Correct output: -175.789814475 | Program output: -113.9796307734
Correct output: -67.4831289413 | Program output: -83.6787755776
Correct output: -23.3513071934 | Program output: -14.7159193753
Correct output: -123.1447619871 | Program output: -123.8129595994
Correct output: 24.0076171492  | Program output: 95.452496243  
Correct output: -50.6702678178 | Program output: -6.4782247631 
Correct output: -128.7993219642 | Program output: -60.6648458183
Correct output: 41.7575748041  | Program output: 75.350834921  
Correct output: 173.057045519  | Program output: 116.1430235879
Correct output: -110.0264496737 | Program output: -23.8873964273
Correct output: 11.9743638411  | Program output: 93.3365497079 
Correct output: -2.4287759947  | Program output: 79.9017933569 
Correct output: -60.8453890801 | Program output: -58.2377579073
Correct output: -119.1994005588 | Program output: -113.9796307734
Correct output: -1.7396856728  | Program output: 38.753615582  
Correct output: 51.2300489273  | Program output: -6.8313129428 
Correct output: 185.9904753477 | Program output: 128.5448311369
Correct output: 42.4470677171  | Program output: -15.5840012131
Correct output: 53.3134494099  | Program output: 45.6361478004 
Correct output: -33.8727861409 | Program output: 43.8147328345 
Correct output: 127.8115346332 | Program output: 132.0833425323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction float_cos} {:instruction float_pop} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_mult} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max float_cos float_pop integer_shove float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan integer_mult tag_float_475 float_dup_items float_frominteger float_flush integer_div float_dup_items float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush)
Errors: [62.9774 9 60.5771 9 46.4294 11 8.9729 7 61.8102 10 16.1956 12 8.6354 10 0.6682 9 71.4449 11 44.192 10 68.1345 13 33.5933 9 56.914 9 86.1391 11 81.3622 12 82.3306 11 2.6076 11 5.2198 9 40.4933 8 58.0614 10 57.4456 12 58.0311 10 7.6773 10 77.6875 10 4.2718 9]
Total: 1353.8722000000002
Mean: 27.077444
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4147.139076299994
Median total errors in population: 1358.0314000000003
Error averages by case: (172.32645150000036 10.404 143.7245041000004 10.983 166.40160770000065 11.269 144.63360139999904 9.304 190.60495329999918 10.254 142.71836219999943 10.616 126.49200549999937 10.78 144.0593777000002 9.768 157.07923879999916 10.452 156.04022729999988 10.592 192.8872128999987 11.223 138.35496600000005 10.543 168.34025650000066 10.191 197.98076899999947 11.975 162.87470620000113 10.144 166.47959140000142 11.312 130.88732530000132 10.864 142.04233590000067 9.447 133.17761589999952 10.122 172.2639202000005 11.023 167.4218262999993 11.682 166.19748359999977 11.868 108.87482509999914 10.852 163.02794619999986 11.177 123.7299662999996 11.673)
Error minima by case: (4.4778 8 18.0753 8 1.4324 7 1.576 7 20.3102 8 1.9724 7 1.3821 7 0.0563 7 0.0093 6 10.6399 7 2.0526 8 1.9909 7 12.943 7 17.8711 8 1.9744 8 0.4388 8 0.0199 6 0.6462 7 0.0465 6 11.4116 7 10.0095 7 32.4471 7 0.2052 7 1.1219 9 0.0476 8)
Average genome size in population (length): 99.628
Average program size in population (points): 100.628
Average percent parens in population: 0.010
Minimum age in population: 58.88073470421932
Maximum age in population: 63.47516005741772
Average age in population: 61.52169345597357
Median age in population: 61.58599049746022
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.249
Error (vector) diversity:			 0.25
Behavioral diversity:				 0.252
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 89652659
--- Timings ---
Current time: 1529616104647 milliseconds
Total Time:         175.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.1 seconds, 35.5%
Fitness Testing:     88.3 seconds, 50.4%
Report:              24.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 63550.88769999995
Test mean error for best: 31.77544
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 124.5964406877
Correct output: 71.9246550776  | Program output: 10.0218085024 
Correct output: -71.7136417398 | Program output: -116.2398679775
Correct output: -86.3636978789 | Program output: -96.3206278076
Correct output: -175.789814475 | Program output: -114.2513633171
Correct output: -67.4831289413 | Program output: -82.7190669715
Correct output: -23.3513071934 | Program output: -15.3548938424
Correct output: -123.1447619871 | Program output: -121.7204219794
Correct output: 24.0076171492  | Program output: 92.1186126052 
Correct output: -50.6702678178 | Program output: -7.335851418  
Correct output: -128.7993219642 | Program output: -62.2608027999
Correct output: 41.7575748041  | Program output: 75.3835817041 
Correct output: 173.057045519  | Program output: 112.2398679775
Correct output: -110.0264496737 | Program output: -25.3148678195
Correct output: 11.9743638411  | Program output: 92.3206278076 
Correct output: -2.4287759947  | Program output: 79.1539760145 
Correct output: -60.8453890801 | Program output: -57.8129906917
Correct output: -119.1994005588 | Program output: -114.2513633171
Correct output: -1.7396856728  | Program output: 36.7122905922 
Correct output: 51.2300489273  | Program output: -7.8575924519 
Correct output: 185.9904753477 | Program output: 124.5964406877
Correct output: 42.4470677171  | Program output: -16.304350479 
Correct output: 53.3134494099  | Program output: 43.4081540015 
Correct output: -33.8727861409 | Program output: 43.9601613763 
Correct output: 127.8115346332 | Program output: 127.5716309689
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction integer_yank} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_dup} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod})
Best program: (integer_yankdup float_rot integer_pop integer_mod integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin float_sin print_integer float_sin float_sin float_sin integer_yank float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub float_dec float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan float_dup tag_float_475 float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod)
Errors: [66.9258 10 61.9028 10 44.5262 11 9.9569 7 61.5385 11 15.2359 10 7.9964 9 1.4243 9 68.111 9 43.3344 10 66.5385 11 33.626 8 60.8172 12 84.7116 12 80.3463 11 81.5828 10 3.0324 9 4.948 11 38.452 10 59.0876 12 61.394 8 58.7514 12 9.9053 10 77.8329 11 0.2399 8]
Total: 1353.2181
Mean: 27.064362
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4106.146657399994
Median total errors in population: 1358.0040000000004
Error averages by case: (168.7385095000004 10.622 130.62979210000051 10.863 169.94595820000086 11.151 149.5292090999984 9.274 194.33666399999876 10.053 146.14786509999914 10.601 123.58157019999894 10.582 148.90231799999995 9.729 149.187979199999 10.519 151.45768819999978 10.49 196.4071081999982 11.492 138.14272909999974 10.532 164.71190080000082 9.915 200.43696939999867 11.919 157.7014736000012 10.021 164.3639758000018 11.465 135.08375320000093 10.963 146.66664190000083 9.577 125.6667427999991 9.882 169.01411250000046 11.074 163.85357099999894 11.669 162.3691991999995 11.779 102.1974705999991 10.992 162.3036149000007 10.816 117.01684079999974 11.773)
Error minima by case: (4.4778 2 18.1058 7 0.7325 7 2.6363 7 6.7348 7 5.4831 8 0.9978 7 0.0419 7 0.5319 8 3.0 2 2.6563 8 0.5685 8 8.678 3 20.8606 2 0.9558 8 0.2804 2 0.0277 7 1.5234 7 0.0311 1 1.2388 8 1.8276 2 14.0145 8 0.9521 2 11.7837 2 0.1162 2)
Average genome size in population (length): 101.22
Average program size in population (points): 102.22
Average percent parens in population: 0.010
Minimum age in population: 60.15745431463438
Maximum age in population: 64.981640158255
Average age in population: 62.97589983362883
Median age in population: 63.00829489912121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.899
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.899
Total error diversity:				 0.278
Error (vector) diversity:			 0.28
Behavioral diversity:				 0.28
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 92184984
--- Timings ---
Current time: 1529616108901 milliseconds
Total Time:         179.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        63.4 seconds, 35.4%
Fitness Testing:     90.6 seconds, 50.5%
Report:              25.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 63762.0462
Test mean error for best: 31.88102
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 127.5448311369
Correct output: 71.9246550776  | Program output: 10.3475363758 
Correct output: -71.7136417398 | Program output: -119.1430235879
Correct output: -86.3636978789 | Program output: -96.3365497079
Correct output: -175.789814475 | Program output: -114.9796307734
Correct output: -67.4831289413 | Program output: -84.6787755776
Correct output: -23.3513071934 | Program output: -15.7159193753
Correct output: -123.1447619871 | Program output: -124.8129595994
Correct output: 24.0076171492  | Program output: 94.452496243  
Correct output: -50.6702678178 | Program output: -7.4782247631 
Correct output: -128.7993219642 | Program output: -61.6648458183
Correct output: 41.7575748041  | Program output: 74.350834921  
Correct output: 173.057045519  | Program output: 115.1430235879
Correct output: -110.0264496737 | Program output: -24.8873964273
Correct output: 11.9743638411  | Program output: 92.3365497079 
Correct output: -2.4287759947  | Program output: 78.9017933569 
Correct output: -60.8453890801 | Program output: -59.2377579073
Correct output: -119.1994005588 | Program output: -114.9796307734
Correct output: -1.7396856728  | Program output: 37.753615582  
Correct output: 51.2300489273  | Program output: -7.8313129428 
Correct output: 185.9904753477 | Program output: 127.5448311369
Correct output: 42.4470677171  | Program output: -16.5840012131
Correct output: 53.3134494099  | Program output: 44.6361478004 
Correct output: -33.8727861409 | Program output: 42.8147328345 
Correct output: 127.8115346332 | Program output: 131.0833425323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_yankdup} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_swap})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult float_mult integer_swap integer_add float_dec integer_shove float_frominteger integer_sub integer_div float_frominteger float_mult float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan float_yankdup tag_float_475 float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items float_frominteger integer_swap)
Errors: [63.9774 9 61.5771 10 47.4294 11 9.9729 6 60.8102 10 17.1956 12 7.6354 10 1.6682 10 70.4449 10 43.192 10 67.1345 13 32.5933 9 57.914 9 85.1391 11 80.3622 12 81.3306 11 1.6076 11 4.2198 9 39.4933 8 59.0614 10 58.4456 12 59.0311 10 8.6773 10 76.6875 11 3.2718 9]
Total: 1351.8722000000002
Mean: 27.037443
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3878.236927399992
Median total errors in population: 1358.0040000000004
Error averages by case: (168.5493860000008 10.678 141.16962170000028 10.775 148.42291259999993 11.052 127.98322639999894 9.267 175.77129939999972 10.116 126.54238619999937 10.716 112.31347409999903 10.746 126.95575310000015 9.888 145.5969747999998 10.596 141.35846480000052 10.529 180.39621999999886 11.657 134.3602290999992 10.485 161.94832520000062 9.955 186.19738449999917 11.928 153.0758467000009 10.215 161.62944390000135 11.397 115.68624740000081 11.025 125.94488060000077 9.859 123.24321649999966 9.945 160.17359700000057 11.032 163.57244839999922 11.549 151.7052293000001 11.61 102.10588289999905 10.989 159.7849444000002 10.924 115.03753239999973 11.779)
Error minima by case: (4.4778 2 10.0 1 0.5399 7 1.3637 6 6.8012 3 0.009 1 4.0333 2 0.0168 3 0.1927 7 3.0 2 2.5122 3 1.5065 6 12.943 3 25.0264 2 4.472 8 0.2064 2 0.0975 2 0.2242 3 0.0623 1 6.0 1 10.0095 2 10.0 1 2.4298 2 0.5079 2 0.0569 2)
Average genome size in population (length): 101.475
Average program size in population (points): 102.475
Average percent parens in population: 0.010
Minimum age in population: 61.78923046027421
Maximum age in population: 66.62671455039106
Average age in population: 64.31866755108987
Median age in population: 64.30599396081573
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.274
Error (vector) diversity:			 0.276
Behavioral diversity:				 0.276
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 94722909
--- Timings ---
Current time: 1529616113248 milliseconds
Total Time:         183.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.7 seconds, 35.2%
Fitness Testing:     93.0 seconds, 50.6%
Report:              25.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 63770.2316
Test mean error for best: 31.88512
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 126.5448311369
Correct output: 71.9246550776  | Program output: 9.3475363758  
Correct output: -71.7136417398 | Program output: -120.1430235879
Correct output: -86.3636978789 | Program output: -97.3365497079
Correct output: -175.789814475 | Program output: -115.9796307734
Correct output: -67.4831289413 | Program output: -85.6787755776
Correct output: -23.3513071934 | Program output: -16.7159193753
Correct output: -123.1447619871 | Program output: -125.8129595994
Correct output: 24.0076171492  | Program output: 93.452496243  
Correct output: -50.6702678178 | Program output: -8.4782247631 
Correct output: -128.7993219642 | Program output: -62.6648458183
Correct output: 41.7575748041  | Program output: 73.350834921  
Correct output: 173.057045519  | Program output: 114.1430235879
Correct output: -110.0264496737 | Program output: -25.8873964273
Correct output: 11.9743638411  | Program output: 91.3365497079 
Correct output: -2.4287759947  | Program output: 77.9017933569 
Correct output: -60.8453890801 | Program output: -60.2377579073
Correct output: -119.1994005588 | Program output: -115.9796307734
Correct output: -1.7396856728  | Program output: 36.753615582  
Correct output: 51.2300489273  | Program output: -8.8313129428 
Correct output: 185.9904753477 | Program output: 126.5448311369
Correct output: 42.4470677171  | Program output: -17.5840012131
Correct output: 53.3134494099  | Program output: 43.6361478004 
Correct output: -33.8727861409 | Program output: 41.8147328345 
Correct output: 127.8115346332 | Program output: 130.0833425323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction float_cos} {:instruction float_pop} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction print_integer} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_div} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max float_cos float_pop integer_shove float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_div print_integer float_dec float_frominteger integer_sub integer_div float_stackdepth float_dec integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items float_rot integer_mod integer_div float_flush)
Errors: [64.9774 9 62.5771 10 48.4294 12 10.9729 7 59.8102 9 18.1956 12 6.6354 10 2.6682 10 69.4449 11 42.192 10 66.1345 12 31.5933 9 58.914 9 84.1391 11 79.3622 11 80.3306 11 0.6076 9 3.2198 9 38.4933 8 60.0614 10 59.4456 12 60.0311 10 9.6773 9 75.6875 11 2.2718 9]
Total: 1345.8722
Mean: 26.917444
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4480.624355699999
Median total errors in population: 1358.0040000000004
Error averages by case: (189.27696440000025 10.594 155.53323269999981 10.598 176.98318630000014 11.041 157.56579139999855 9.154 203.53007309999973 10.316 153.5012668999998 10.931 136.10894609999946 10.784 159.66298079999896 10.212 168.3304872999991 10.66 166.09418189999923 10.572 203.82021529999832 11.886 159.3981248000002 10.421 187.8328798000002 10.009 207.40422259999886 11.746 173.58532110000095 10.634 182.56611700000022 11.194 144.27993730000043 11.022 155.20578870000074 10.169 146.96010840000048 9.826 180.4015886000005 10.89 184.48484020000024 11.424 174.5421621999989 11.325 124.38496949999912 10.912 182.24403680000106 11.102 138.15193250000002 11.353)
Error minima by case: (1.842 2 10.0 1 0.0973 6 2.5763 6 4.382 3 3.6262 1 1.3646 2 0.0168 3 0.1272 6 3.0 2 0.9198 3 4.8672 7 2.8973 3 30.0 2 1.9744 8 0.2081 2 0.0092 2 0.3568 3 0.0699 1 6.0 1 0.9754 2 10.0 1 2.4725 2 0.1483 2 0.0171 2)
Average genome size in population (length): 103.174
Average program size in population (points): 104.174
Average percent parens in population: 0.010
Minimum age in population: 63.51220343074237
Maximum age in population: 67.73603286018027
Average age in population: 65.74279390369495
Median age in population: 65.82270827446254
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.333
Error (vector) diversity:			 0.335
Behavioral diversity:				 0.336
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 97302934
--- Timings ---
Current time: 1529616117495 milliseconds
Total Time:         188.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.2 seconds, 35.2%
Fitness Testing:     95.3 seconds, 50.7%
Report:              26.4 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 63770.2316
Test mean error for best: 31.88512
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 126.5448311369
Correct output: 71.9246550776  | Program output: 9.3475363758  
Correct output: -71.7136417398 | Program output: -120.1430235879
Correct output: -86.3636978789 | Program output: -97.3365497079
Correct output: -175.789814475 | Program output: -115.9796307734
Correct output: -67.4831289413 | Program output: -85.6787755776
Correct output: -23.3513071934 | Program output: -16.7159193753
Correct output: -123.1447619871 | Program output: -125.8129595994
Correct output: 24.0076171492  | Program output: 93.452496243  
Correct output: -50.6702678178 | Program output: -8.4782247631 
Correct output: -128.7993219642 | Program output: -62.6648458183
Correct output: 41.7575748041  | Program output: 73.350834921  
Correct output: 173.057045519  | Program output: 114.1430235879
Correct output: -110.0264496737 | Program output: -25.8873964273
Correct output: 11.9743638411  | Program output: 91.3365497079 
Correct output: -2.4287759947  | Program output: 77.9017933569 
Correct output: -60.8453890801 | Program output: -60.2377579073
Correct output: -119.1994005588 | Program output: -115.9796307734
Correct output: -1.7396856728  | Program output: 36.753615582  
Correct output: 51.2300489273  | Program output: -8.8313129428 
Correct output: 185.9904753477 | Program output: 126.5448311369
Correct output: 42.4470677171  | Program output: -17.5840012131
Correct output: 53.3134494099  | Program output: 43.6361478004 
Correct output: -33.8727861409 | Program output: 41.8147328345 
Correct output: 127.8115346332 | Program output: 130.0833425323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction float_cos} {:instruction float_pop} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction print_integer} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_div} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max float_cos float_pop integer_shove float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_div print_integer float_dec float_frominteger integer_sub integer_div float_stackdepth float_dec integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items float_rot integer_mod integer_div float_flush)
Errors: [64.9774 9 62.5771 10 48.4294 12 10.9729 7 59.8102 9 18.1956 12 6.6354 10 2.6682 10 69.4449 11 42.192 10 66.1345 12 31.5933 9 58.914 9 84.1391 11 79.3622 11 80.3306 11 0.6076 9 3.2198 9 38.4933 8 60.0614 10 59.4456 12 60.0311 10 9.6773 9 75.6875 11 2.2718 9]
Total: 1345.8722
Mean: 26.917444
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4439.3949615999945
Median total errors in population: 1358.0040000000004
Error averages by case: (190.29064100000082 10.438 155.42065859999929 10.38 173.893326999999 11.201 153.07741379999842 9.054 200.36933480000113 10.547 153.0122690000008 11.272 134.12809089999948 10.6 152.68230889999919 10.379 169.15071660000012 10.77 162.06653739999985 10.588 200.85181269999782 12.221 154.07844689999942 10.249 183.70557309999958 10.181 206.22466319999972 11.719 175.47978650000115 11.168 184.49391449999928 11.116 143.19973940000034 11.009 152.80671710000058 10.259 144.68014010000041 9.702 176.41011770000125 10.81 185.47666190000135 11.544 173.64859829999844 11.143 126.74948449999914 10.718 181.36212770000049 11.028 137.3398800000002 10.7)
Error minima by case: (3.8649 2 4.6867 1 1.763 8 2.6363 6 6.3802 3 2.6282 1 1.3646 2 0.0168 3 0.0093 7 2.0 2 2.9228 3 4.8221 7 4.9226 3 29.0 2 1.9144 7 0.1968 2 0.0093 1 0.6432 3 0.0483 1 4.6504 1 1.6669 2 4.1326 1 0.0574 2 1.044 2 0.0349 2)
Average genome size in population (length): 103.194
Average program size in population (points): 104.194
Average percent parens in population: 0.010
Minimum age in population: 64.9138212250873
Maximum age in population: 69.06678865904675
Average age in population: 67.15063628029706
Median age in population: 67.17974409244005
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.347
Error (vector) diversity:			 0.349
Behavioral diversity:				 0.35
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 99883359
--- Timings ---
Current time: 1529616121548 milliseconds
Total Time:         192.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.5 seconds, 35.1%
Fitness Testing:     97.5 seconds, 50.8%
Report:              27.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 63770.2316
Test mean error for best: 31.88512
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 126.5448311369
Correct output: 71.9246550776  | Program output: 9.3475363758  
Correct output: -71.7136417398 | Program output: -120.1430235879
Correct output: -86.3636978789 | Program output: -97.3365497079
Correct output: -175.789814475 | Program output: -115.9796307734
Correct output: -67.4831289413 | Program output: -85.6787755776
Correct output: -23.3513071934 | Program output: -16.7159193753
Correct output: -123.1447619871 | Program output: -125.8129595994
Correct output: 24.0076171492  | Program output: 93.452496243  
Correct output: -50.6702678178 | Program output: -8.4782247631 
Correct output: -128.7993219642 | Program output: -62.6648458183
Correct output: 41.7575748041  | Program output: 73.350834921  
Correct output: 173.057045519  | Program output: 114.1430235879
Correct output: -110.0264496737 | Program output: -25.8873964273
Correct output: 11.9743638411  | Program output: 91.3365497079 
Correct output: -2.4287759947  | Program output: 77.9017933569 
Correct output: -60.8453890801 | Program output: -60.2377579073
Correct output: -119.1994005588 | Program output: -115.9796307734
Correct output: -1.7396856728  | Program output: 36.753615582  
Correct output: 51.2300489273  | Program output: -8.8313129428 
Correct output: 185.9904753477 | Program output: 126.5448311369
Correct output: 42.4470677171  | Program output: -17.5840012131
Correct output: 53.3134494099  | Program output: 43.6361478004 
Correct output: -33.8727861409 | Program output: 41.8147328345 
Correct output: 127.8115346332 | Program output: 130.0833425323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction float_cos} {:instruction float_pop} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_shove} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction print_integer} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_div} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max float_cos float_pop integer_shove float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc integer_shove float_mult float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_div print_integer float_dec float_frominteger integer_sub integer_div float_stackdepth float_dec integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items float_rot integer_mod integer_div float_flush)
Errors: [64.9774 9 62.5771 10 48.4294 12 10.9729 7 59.8102 9 18.1956 12 6.6354 10 2.6682 10 69.4449 11 42.192 10 66.1345 12 31.5933 9 58.914 9 84.1391 11 79.3622 11 80.3306 11 0.6076 9 3.2198 9 38.4933 8 60.0614 10 59.4456 12 60.0311 10 9.6773 9 75.6875 11 2.2718 9]
Total: 1345.8722
Mean: 26.917444
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4508.625040199997
Median total errors in population: 1359.7383
Error averages by case: (190.16699870000102 10.318 155.5200022999994 10.204 179.02124369999876 11.147 157.0311301999988 8.926 204.43522980000122 10.683 157.59898640000102 11.311 139.54853159999985 10.548 157.8501525999991 10.442 173.76541250000028 10.781 168.95835880000004 10.593 202.54751169999807 12.164 155.98069159999986 10.137 185.21745109999924 10.199 209.38986270000046 11.664 178.38370210000105 11.257 182.00186949999892 10.977 146.26169780000015 10.91 156.92570130000038 10.398 148.31941220000058 9.723 180.90698470000126 10.76 185.39236170000135 11.367 177.9758446999987 11.11 128.48929059999935 10.596 181.10996960000028 11.035 138.21964229999998 10.357)
Error minima by case: (2.8649 7 18.1627 8 0.1058 8 1.3898 6 5.3802 7 1.009 8 0.6703 6 0.0168 6 0.3153 7 10.1405 7 0.2912 7 13.8621 8 3.9226 6 33.7614 9 3.3013 7 0.277 7 0.0093 7 0.2228 7 0.1105 6 1.2681 6 1.6669 7 4.9483 9 0.9672 8 0.3183 7 0.0323 8)
Average genome size in population (length): 103.512
Average program size in population (points): 104.512
Average percent parens in population: 0.010
Minimum age in population: 66.17476830543592
Maximum age in population: 70.77542277532372
Average age in population: 68.61063261884694
Median age in population: 68.66771855681093
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.356
Error (vector) diversity:			 0.359
Behavioral diversity:				 0.36
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 102471784
--- Timings ---
Current time: 1529616125971 milliseconds
Total Time:         196.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.0 seconds, 35.1%
Fitness Testing:     99.9 seconds, 50.8%
Report:              27.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 63770.2316
Test mean error for best: 31.88512
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 126.5448311369
Correct output: 71.9246550776  | Program output: 9.3475363758  
Correct output: -71.7136417398 | Program output: -120.1430235879
Correct output: -86.3636978789 | Program output: -97.3365497079
Correct output: -175.789814475 | Program output: -115.9796307734
Correct output: -67.4831289413 | Program output: -85.6787755776
Correct output: -23.3513071934 | Program output: -16.7159193753
Correct output: -123.1447619871 | Program output: -125.8129595994
Correct output: 24.0076171492  | Program output: 93.452496243  
Correct output: -50.6702678178 | Program output: -8.4782247631 
Correct output: -128.7993219642 | Program output: -62.6648458183
Correct output: 41.7575748041  | Program output: 73.350834921  
Correct output: 173.057045519  | Program output: 114.1430235879
Correct output: -110.0264496737 | Program output: -25.8873964273
Correct output: 11.9743638411  | Program output: 91.3365497079 
Correct output: -2.4287759947  | Program output: 77.9017933569 
Correct output: -60.8453890801 | Program output: -60.2377579073
Correct output: -119.1994005588 | Program output: -115.9796307734
Correct output: -1.7396856728  | Program output: 36.753615582  
Correct output: 51.2300489273  | Program output: -8.8313129428 
Correct output: 185.9904753477 | Program output: 126.5448311369
Correct output: 42.4470677171  | Program output: -17.5840012131
Correct output: 53.3134494099  | Program output: 43.6361478004 
Correct output: -33.8727861409 | Program output: 41.8147328345 
Correct output: 127.8115346332 | Program output: 130.0833425323
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction float_cos} {:instruction float_pop} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction float_mult} {:instruction integer_swap} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction print_integer} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction float_frominteger} {:instruction integer_div} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max float_cos float_pop integer_shove float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult float_mult integer_swap integer_add float_min integer_shove float_frominteger integer_sub integer_div print_integer float_dec float_frominteger integer_sub integer_div float_stackdepth float_dec integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan float_frominteger integer_div integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_dup_items float_frominteger integer_div)
Errors: [64.9774 9 62.5771 10 48.4294 12 10.9729 7 59.8102 9 18.1956 12 6.6354 10 2.6682 10 69.4449 11 42.192 10 66.1345 12 31.5933 9 58.914 9 84.1391 11 79.3622 11 80.3306 11 0.6076 9 3.2198 9 38.4933 8 60.0614 10 59.4456 12 60.0311 10 9.6773 9 75.6875 11 2.2718 9]
Total: 1345.8722
Mean: 26.917444
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4301.592102099998
Median total errors in population: 1353.8722000000002
Error averages by case: (181.0916140000011 10.297 150.94736819999937 10.471 171.5418769999986 11.13 149.59969249999884 8.781 197.43664690000077 10.561 148.86873220000103 11.219 129.8826303999999 10.402 148.4540594999994 10.463 159.84170080000024 10.617 159.19189440000014 10.612 193.67286109999782 11.984 152.06009469999964 10.111 174.70083179999907 10.229 202.5473678000002 11.662 169.48167660000118 11.151 180.55970689999893 10.899 138.1309395000002 10.728 149.3938855000007 10.371 132.7928356000003 9.725 175.1889592000012 10.775 176.27691960000135 11.359 171.38574639999877 11.138 115.85222929999938 10.561 178.52749990000055 11.161 127.48333230000043 10.274)
Error minima by case: (4.4778 2 9.5385 1 0.3268 7 2.6363 6 5.7869 3 0.7672 1 1.3646 2 0.0297 3 0.0242 7 3.0 2 7.8655 3 1.5712 7 12.943 3 27.2261 2 5.399 8 0.0119 2 0.0107 2 0.0902 3 0.0263 1 2.74 1 10.0095 2 8.0772 1 0.1025 2 1.2678 2 0.025 2)
Average genome size in population (length): 104.492
Average program size in population (points): 105.492
Average percent parens in population: 0.010
Minimum age in population: 67.42268778803532
Maximum age in population: 72.00562802634734
Average age in population: 70.05378603114713
Median age in population: 70.10650987670574
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.904
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.904
Total error diversity:				 0.356
Error (vector) diversity:			 0.362
Behavioral diversity:				 0.362
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 105084734
--- Timings ---
Current time: 1529616130057 milliseconds
Total Time:         200.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.2 seconds, 35.0%
Fitness Testing:    102.2 seconds, 51.0%
Report:              28.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 63732.42420000006
Test mean error for best: 31.86621
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 126.4232386495
Correct output: 71.9246550776  | Program output: 9.3281622143  
Correct output: -71.7136417398 | Program output: -119.9969692515
Correct output: -86.3636978789 | Program output: -97.3365426878
Correct output: -175.789814475 | Program output: -115.974159645
Correct output: -67.4831289413 | Program output: -85.5902391323
Correct output: -23.3513071934 | Program output: -16.6945814555
Correct output: -123.1447619871 | Program output: -125.6509229765
Correct output: 24.0076171492  | Program output: 93.3417848721 
Correct output: -50.6702678178 | Program output: -8.470105878  
Correct output: -128.7993219642 | Program output: -62.669328627 
Correct output: 41.7575748041  | Program output: 73.36095492   
Correct output: 173.057045519  | Program output: 113.9969692515
Correct output: -110.0264496737 | Program output: -25.8930699791
Correct output: 11.9743638411  | Program output: 91.3365426878 
Correct output: -2.4287759947  | Program output: 77.9025583192 
Correct output: -60.8453890801 | Program output: -60.165280679 
Correct output: -119.1994005588 | Program output: -115.974159645
Correct output: -1.7396856728  | Program output: 36.6929102274 
Correct output: 51.2300489273  | Program output: -8.8314178263 
Correct output: 185.9904753477 | Program output: 126.4232386495
Correct output: 42.4470677171  | Program output: -17.5757418451
Correct output: 53.3134494099  | Program output: 43.5634922184 
Correct output: -33.8727861409 | Program output: 41.8357989611 
Correct output: 127.8115346332 | Program output: 129.8743007887
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction integer_mult} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_div} {:instruction float_mult} {:instruction float_mult} {:instruction float_dec} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_mult} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer integer_mult print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_tan print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin float_dup_items float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc integer_div float_mult float_mult float_dec integer_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan integer_mult tag_float_475 float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger)
Errors: [65.099 10 62.5965 11 48.2833 12 10.9728 8 59.8157 8 18.1071 10 6.6567 12 2.5062 10 69.3342 10 42.2002 7 66.13 8 31.6034 11 59.0601 9 84.1334 11 79.3622 10 80.3313 11 0.6801 7 3.2252 9 38.4326 11 60.0615 9 59.5672 11 60.0228 11 9.75 9 75.7086 10 2.0628 10]
Total: 1340.7029
Mean: 26.814058
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4341.821205000002
Median total errors in population: 1353.83335
Error averages by case: (190.12347030000083 10.217 159.9915035999998 10.716 168.79168539999915 11.151 145.89542369999918 8.89 195.2335034000009 10.246 146.17862670000056 11.096 130.45928359999954 10.326 145.33570309999973 10.543 167.27493810000016 10.649 159.50018899999995 10.676 190.81727879999843 11.727 146.2260431999998 10.223 182.95228969999962 10.039 202.04090900000017 11.6 173.67856570000106 10.8 176.17031909999943 10.955 135.55619420000062 10.422 147.18785970000056 10.159 141.81438120000027 9.761 174.08360860000096 10.74 185.25058910000098 11.448 173.9623955999991 11.191 126.78810599999947 10.391 175.0488521000006 11.235 135.7874861000001 10.471)
Error minima by case: (3.8649 1 6.0683 2 0.079 6 2.6363 2 4.7672 3 0.2206 2 0.5491 2 0.0268 3 0.4449 7 0.0 0 0.5857 3 2.5362 8 4.9226 2 27.0 3 3.8609 7 0.0966 3 0.0093 2 0.131 3 0.0266 2 3.0 1 0.6669 1 7.0 1 1.571 2 0.8157 3 0.0254 2)
Average genome size in population (length): 105.175
Average program size in population (points): 106.175
Average percent parens in population: 0.010
Minimum age in population: 68.42268778803532
Maximum age in population: 73.51652336711015
Average age in population: 71.37689360082437
Median age in population: 71.41467282388574
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.88
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.88
Total error diversity:				 0.369
Error (vector) diversity:			 0.377
Behavioral diversity:				 0.377
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 107714809
--- Timings ---
Current time: 1529616134201 milliseconds
Total Time:         204.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.6 seconds, 35.0%
Fitness Testing:    104.5 seconds, 51.0%
Report:              28.5 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 63732.42420000006
Test mean error for best: 31.86621
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 126.4232386495
Correct output: 71.9246550776  | Program output: 9.3281622143  
Correct output: -71.7136417398 | Program output: -119.9969692515
Correct output: -86.3636978789 | Program output: -97.3365426878
Correct output: -175.789814475 | Program output: -115.974159645
Correct output: -67.4831289413 | Program output: -85.5902391323
Correct output: -23.3513071934 | Program output: -16.6945814555
Correct output: -123.1447619871 | Program output: -125.6509229765
Correct output: 24.0076171492  | Program output: 93.3417848721 
Correct output: -50.6702678178 | Program output: -8.470105878  
Correct output: -128.7993219642 | Program output: -62.669328627 
Correct output: 41.7575748041  | Program output: 73.36095492   
Correct output: 173.057045519  | Program output: 113.9969692515
Correct output: -110.0264496737 | Program output: -25.8930699791
Correct output: 11.9743638411  | Program output: 91.3365426878 
Correct output: -2.4287759947  | Program output: 77.9025583192 
Correct output: -60.8453890801 | Program output: -60.165280679 
Correct output: -119.1994005588 | Program output: -115.974159645
Correct output: -1.7396856728  | Program output: 36.6929102274 
Correct output: 51.2300489273  | Program output: -8.8314178263 
Correct output: 185.9904753477 | Program output: 126.4232386495
Correct output: 42.4470677171  | Program output: -17.5757418451
Correct output: 53.3134494099  | Program output: 43.5634922184 
Correct output: -33.8727861409 | Program output: 41.8357989611 
Correct output: 127.8115346332 | Program output: 129.8743007887
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction integer_mult} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_div} {:instruction float_mult} {:instruction float_mult} {:instruction float_dec} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_mult} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer integer_mult print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_tan print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin float_dup_items float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc integer_div float_mult float_mult float_dec integer_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan integer_mult tag_float_475 float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger)
Errors: [65.099 10 62.5965 11 48.2833 12 10.9728 8 59.8157 8 18.1071 10 6.6567 12 2.5062 10 69.3342 10 42.2002 7 66.13 8 31.6034 11 59.0601 9 84.1334 11 79.3622 10 80.3313 11 0.6801 7 3.2252 9 38.4326 11 60.0615 9 59.5672 11 60.0228 11 9.75 9 75.7086 10 2.0628 10]
Total: 1340.7029
Mean: 26.814058
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4424.135942599999
Median total errors in population: 1351.8722000000002
Error averages by case: (188.69183020000142 10.274 152.2677132999993 10.669 177.02380469999855 11.491 153.23062489999842 9.108 201.44424980000144 10.159 154.20544280000087 11.315 136.37454969999953 10.474 154.09121489999896 10.632 166.33679890000047 10.893 166.30924489999995 10.698 195.86955009999795 11.799 152.15125249999937 10.29 181.37329529999946 9.987 204.98550309999993 11.631 173.17030260000115 10.732 182.45201959999926 11.002 141.70390330000052 10.14 154.28280190000066 10.179 138.13814710000023 9.619 181.0954648000017 10.73 183.8959703000018 11.604 179.3630440999986 11.022 123.90894029999929 10.257 181.2485342000003 11.28 134.09073930000025 10.446)
Error minima by case: (4.8649 2 6.0753 2 0.0948 7 2.6363 6 7.3802 3 0.606 2 0.4544 2 0.0151 3 0.0242 6 2.0 2 3.9228 3 1.2424 8 5.9226 3 29.0 2 1.9744 7 2.0E-4 2 0.0709 1 0.0816 3 0.0032 2 3.472 1 0.3103 2 0.5529 2 0.3072 2 0.3207 2 0.0314 2)
Average genome size in population (length): 103.233
Average program size in population (points): 104.233
Average percent parens in population: 0.010
Minimum age in population: 70.32072064256248
Maximum age in population: 74.7338875616548
Average age in population: 72.70699027811006
Median age in population: 72.73393794848312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.881
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.881
Total error diversity:				 0.33
Error (vector) diversity:			 0.337
Behavioral diversity:				 0.337
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 110296434
--- Timings ---
Current time: 1529616138520 milliseconds
Total Time:         209.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.9 seconds, 34.9%
Fitness Testing:    106.8 seconds, 51.1%
Report:              29.1 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 63732.42420000006
Test mean error for best: 31.86621
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 126.4232386495
Correct output: 71.9246550776  | Program output: 9.3281622143  
Correct output: -71.7136417398 | Program output: -119.9969692515
Correct output: -86.3636978789 | Program output: -97.3365426878
Correct output: -175.789814475 | Program output: -115.974159645
Correct output: -67.4831289413 | Program output: -85.5902391323
Correct output: -23.3513071934 | Program output: -16.6945814555
Correct output: -123.1447619871 | Program output: -125.6509229765
Correct output: 24.0076171492  | Program output: 93.3417848721 
Correct output: -50.6702678178 | Program output: -8.470105878  
Correct output: -128.7993219642 | Program output: -62.669328627 
Correct output: 41.7575748041  | Program output: 73.36095492   
Correct output: 173.057045519  | Program output: 113.9969692515
Correct output: -110.0264496737 | Program output: -25.8930699791
Correct output: 11.9743638411  | Program output: 91.3365426878 
Correct output: -2.4287759947  | Program output: 77.9025583192 
Correct output: -60.8453890801 | Program output: -60.165280679 
Correct output: -119.1994005588 | Program output: -115.974159645
Correct output: -1.7396856728  | Program output: 36.6929102274 
Correct output: 51.2300489273  | Program output: -8.8314178263 
Correct output: 185.9904753477 | Program output: 126.4232386495
Correct output: 42.4470677171  | Program output: -17.5757418451
Correct output: 53.3134494099  | Program output: 43.5634922184 
Correct output: -33.8727861409 | Program output: 41.8357989611 
Correct output: 127.8115346332 | Program output: 129.8743007887
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction integer_min} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_div} {:instruction float_mult} {:instruction float_mult} {:instruction float_dec} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_mult} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer integer_min print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_tan print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin float_dup_items float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc integer_div float_mult float_mult float_dec integer_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan integer_mult tag_float_475 float_dup_items float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod)
Errors: [65.099 10 62.5965 11 48.2833 12 10.9728 8 59.8157 8 18.1071 10 6.6567 12 2.5062 10 69.3342 10 42.2002 7 66.13 8 31.6034 11 59.0601 9 84.1334 11 79.3622 10 80.3313 11 0.6801 7 3.2252 9 38.4326 11 60.0615 9 59.5672 11 60.0228 11 9.75 9 75.7086 10 2.0628 10]
Total: 1340.7029
Mean: 26.814058
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4124.015675399997
Median total errors in population: 1348.91
Error averages by case: (179.02951430000144 10.22 152.63686179999905 10.497 162.56425849999846 11.666 139.8515145999985 8.906 187.20988640000218 10.164 140.55260470000132 11.525 125.05427469999948 10.534 137.63036439999954 10.724 154.66491750000074 10.985 155.98352570000014 10.568 183.6943353999983 11.967 135.43979619999877 10.156 171.07317019999908 9.885 195.40811580000008 11.565 161.3174412000012 10.867 164.74642079999907 10.973 127.45536080000088 9.944 138.94239960000075 10.111 128.3436572000006 9.351 171.07342420000163 10.586 174.13161150000204 11.659 170.27722669999807 10.846 114.0221781999993 10.15 163.46765910000013 11.293 124.1691559000006 10.134)
Error minima by case: (4.4778 7 8.7998 8 0.7182 7 2.6363 6 2.612 6 0.364 8 0.0655 7 0.0151 6 0.3153 7 10.2036 7 1.3511 7 5.7576 7 6.3564 7 45.1067 7 2.1528 7 0.0067 7 0.004 7 0.0474 6 0.0818 6 4.3366 7 0.2094 7 6.4471 8 0.5472 7 0.694 7 0.0182 7)
Average genome size in population (length): 102.731
Average program size in population (points): 103.731
Average percent parens in population: 0.010
Minimum age in population: 71.32072064256248
Maximum age in population: 76.03634770565051
Average age in population: 74.03433390190676
Median age in population: 74.05038716259754
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.302
Error (vector) diversity:			 0.306
Behavioral diversity:				 0.307
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 112865109
--- Timings ---
Current time: 1529616142713 milliseconds
Total Time:         213.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.4 seconds, 34.9%
Fitness Testing:    109.1 seconds, 51.1%
Report:              29.7 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 63732.42420000006
Test mean error for best: 31.86621
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 126.4232386495
Correct output: 71.9246550776  | Program output: 9.3281622143  
Correct output: -71.7136417398 | Program output: -119.9969692515
Correct output: -86.3636978789 | Program output: -97.3365426878
Correct output: -175.789814475 | Program output: -115.974159645
Correct output: -67.4831289413 | Program output: -85.5902391323
Correct output: -23.3513071934 | Program output: -16.6945814555
Correct output: -123.1447619871 | Program output: -125.6509229765
Correct output: 24.0076171492  | Program output: 93.3417848721 
Correct output: -50.6702678178 | Program output: -8.470105878  
Correct output: -128.7993219642 | Program output: -62.669328627 
Correct output: 41.7575748041  | Program output: 73.36095492   
Correct output: 173.057045519  | Program output: 113.9969692515
Correct output: -110.0264496737 | Program output: -25.8930699791
Correct output: 11.9743638411  | Program output: 91.3365426878 
Correct output: -2.4287759947  | Program output: 77.9025583192 
Correct output: -60.8453890801 | Program output: -60.165280679 
Correct output: -119.1994005588 | Program output: -115.974159645
Correct output: -1.7396856728  | Program output: 36.6929102274 
Correct output: 51.2300489273  | Program output: -8.8314178263 
Correct output: 185.9904753477 | Program output: 126.4232386495
Correct output: 42.4470677171  | Program output: -17.5757418451
Correct output: 53.3134494099  | Program output: 43.5634922184 
Correct output: -33.8727861409 | Program output: 41.8357989611 
Correct output: 127.8115346332 | Program output: 129.8743007887
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction integer_mult} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_tan} {:instruction float_frominteger} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_div} {:instruction float_mult} {:instruction float_mult} {:instruction float_dec} {:instruction integer_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_flush} {:instruction integer_mult} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer integer_mult print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_tan float_frominteger float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin float_dup_items float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc integer_div float_mult float_mult float_dec integer_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec integer_div float_stackdepth float_dec print_float in2 integer_max integer_shove integer_flush integer_mult tag_float_475 float_dup_items float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger)
Errors: [65.099 10 62.5965 11 48.2833 12 10.9728 8 59.8157 8 18.1071 10 6.6567 12 2.5062 10 69.3342 10 42.2002 7 66.13 8 31.6034 11 59.0601 9 84.1334 11 79.3622 10 80.3313 11 0.6801 7 3.2252 9 38.4326 11 60.0615 9 59.5672 11 60.0228 11 9.75 9 75.7086 10 2.0628 10]
Total: 1340.7029
Mean: 26.814058
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4356.5410914999975
Median total errors in population: 1351.8722000000002
Error averages by case: (190.46466990000127 10.268 151.73636819999908 10.391 173.32570509999857 11.552 148.93689739999837 8.962 196.63099690000217 10.243 151.53581520000128 11.419 134.84213299999965 10.584 147.82595019999914 10.703 163.07666170000076 10.932 164.34442580000007 10.515 193.22665869999832 12.087 144.96485039999928 10.17 184.4137122999991 9.774 204.15846640000015 11.593 171.67479550000138 11.013 173.76594279999904 10.961 138.22426070000023 10.018 148.38340220000052 10.141 137.77374190000046 9.387 177.88726620000193 10.557 185.61798420000179 11.471 177.67521689999813 10.898 123.10017059999923 10.266 171.64915100000022 11.218 136.13684830000028 10.046)
Error minima by case: (4.8649 2 6.2747 2 0.1101 7 2.6363 6 7.3802 3 2.2608 2 0.4892 2 0.0322 3 0.0242 6 2.0 2 3.9228 3 7.1751 7 5.9226 3 29.0 2 7.6378 7 0.0335 2 0.0093 1 0.1177 3 0.0539 2 5.0 1 0.003 2 9.0 2 0.1759 2 1.9028 2 0.0228 2)
Average genome size in population (length): 103.843
Average program size in population (points): 104.843
Average percent parens in population: 0.010
Minimum age in population: 72.43689983659576
Maximum age in population: 77.46964491320483
Average age in population: 75.36582448965241
Median age in population: 75.4380497787581
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.322
Error (vector) diversity:			 0.331
Behavioral diversity:				 0.331
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 115461784
--- Timings ---
Current time: 1529616147032 milliseconds
Total Time:         217.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.7 seconds, 34.8%
Fitness Testing:    111.3 seconds, 51.2%
Report:              30.2 seconds, 13.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 63807.756000000074
Test mean error for best: 31.90388
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 124.4232386495
Correct output: 71.9246550776  | Program output: 7.3281622143  
Correct output: -71.7136417398 | Program output: -121.9969692515
Correct output: -86.3636978789 | Program output: -99.3365426878
Correct output: -175.789814475 | Program output: -117.974159645
Correct output: -67.4831289413 | Program output: -87.5902391323
Correct output: -23.3513071934 | Program output: -18.6945814555
Correct output: -123.1447619871 | Program output: -127.6509229765
Correct output: 24.0076171492  | Program output: 91.3417848721 
Correct output: -50.6702678178 | Program output: -10.470105878 
Correct output: -128.7993219642 | Program output: -64.669328627 
Correct output: 41.7575748041  | Program output: 71.36095492   
Correct output: 173.057045519  | Program output: 111.9969692515
Correct output: -110.0264496737 | Program output: -27.8930699791
Correct output: 11.9743638411  | Program output: 89.3365426878 
Correct output: -2.4287759947  | Program output: 75.9025583192 
Correct output: -60.8453890801 | Program output: -62.165280679 
Correct output: -119.1994005588 | Program output: -117.974159645
Correct output: -1.7396856728  | Program output: 34.6929102274 
Correct output: 51.2300489273  | Program output: -10.8314178263
Correct output: 185.9904753477 | Program output: 124.4232386495
Correct output: 42.4470677171  | Program output: -19.5757418451
Correct output: 53.3134494099  | Program output: 41.5634922184 
Correct output: -33.8727861409 | Program output: 39.8357989611 
Correct output: 127.8115346332 | Program output: 127.8743007887
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_yankdup} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction tagged_566} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction integer_mult} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction integer_div} {:instruction float_mult} {:instruction float_mult} {:instruction float_dec} {:instruction integer_add} {:instruction float_min} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_sub} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_shove} {:instruction tag_float_475} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_min} {:instruction integer_div} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_dup_items} {:instruction float_rot} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_swap} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction integer_swap} {:instruction integer_div} {:instruction in2} {:instruction float_sin} {:instruction integer_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_yankdup float_frominteger integer_stackdepth tagged_566 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer integer_mult print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_tan print_integer float_sin float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin float_dup_items float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc integer_div float_mult float_mult float_dec integer_add float_min float_swap float_frominteger integer_sub float_dec float_stackdepth float_dec float_stackdepth float_dec float_stackdepth float_dec print_float in2 integer_max integer_shove float_tan integer_shove tag_float_475 float_dup_items float_frominteger integer_div float_flush float_min integer_div float_flush float_yankdup float_dup_items float_rot integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_swap float_frominteger integer_div float_flush integer_swap integer_div in2 float_sin integer_flush)
Errors: [67.099 10 64.5965 10 50.2833 12 12.9728 8 57.8157 9 20.1071 9 4.6567 12 4.5062 10 67.3342 10 40.2002 6 64.13 9 29.6034 10 61.0601 10 82.1334 11 77.3622 11 78.3313 11 1.3199 8 1.2252 9 36.4326 11 62.0615 9 61.5672 11 62.0228 11 11.75 10 73.7086 9 0.0628 9]
Total: 1337.3427
Mean: 26.746855
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4612.7614772000015
Median total errors in population: 1348.88135
Error averages by case: (199.6398898000008 10.239 161.15488229999914 10.514 184.93138409999875 11.434 162.12201529999837 9.088 209.54784160000216 10.347 162.531102600001 11.256 142.54827139999978 10.681 161.4234426999991 10.694 173.42953020000073 10.925 173.8521676000004 10.375 205.46719259999858 12.014 151.04099489999933 10.201 193.06367199999897 9.715 215.72816350000022 11.663 180.21073720000132 11.132 181.92806679999842 11.039 149.80886619999973 10.107 161.86035960000012 10.18 146.47893720000044 9.649 188.0319852000019 10.468 194.86634580000157 11.397 188.3297786999983 10.998 132.79707689999913 10.37 181.2805274000003 11.167 144.95824560000017 10.077)
Error minima by case: (5.8649 7 1.8394 7 0.2413 7 2.4963 6 8.3802 7 2.4831 8 0.0942 7 0.0147 6 0.29 6 13.8009 6 2.253 7 0.5713 7 6.9226 7 31.2979 9 1.9744 7 0.0102 6 0.0075 7 0.131 7 0.0032 6 5.3343 8 0.3331 7 3.4487 8 1.0853 7 1.176 7 0.0478 7)
Average genome size in population (length): 107.589
Average program size in population (points): 108.589
Average percent parens in population: 0.009
Minimum age in population: 73.43689983659576
Maximum age in population: 79.03605646972893
Average age in population: 76.64381141533234
Median age in population: 76.64158811307671
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.886
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.886
Total error diversity:				 0.347
Error (vector) diversity:			 0.356
Behavioral diversity:				 0.357
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 118153134
--- Timings ---
Current time: 1529616151515 milliseconds
Total Time:         221.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        77.1 seconds, 34.8%
Fitness Testing:    113.7 seconds, 51.2%
Report:              31.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 25731.20040000003
Test mean error for best: 12.86560
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 209.4511037814
Correct output: 71.9246550776  | Program output: 49.5628985431 
Correct output: -71.7136417398 | Program output: -70.764142221 
Correct output: -86.3636978789 | Program output: -89.3835291067
Correct output: -175.789814475 | Program output: -189.6622062136
Correct output: -67.4831289413 | Program output: -69.6242528792
Correct output: -23.3513071934 | Program output: -25.6217640646
Correct output: -123.1447619871 | Program output: -138.6560425687
Correct output: 24.0076171492  | Program output: 2.5217362648  
Correct output: -50.6702678178 | Program output: -72.0270755302
Correct output: -128.7993219642 | Program output: -152.4125509713
Correct output: 41.7575748041  | Program output: 17.737303922  
Correct output: 173.057045519  | Program output: 165.1730938027
Correct output: -110.0264496737 | Program output: -143.4115708421
Correct output: 11.9743638411  | Program output: -17.8693549467
Correct output: -2.4287759947  | Program output: -42.682194081 
Correct output: -60.8453890801 | Program output: -59.3209139334
Correct output: -119.1994005588 | Program output: -125.4468243409
Correct output: -1.7396856728  | Program output: -0.0242823027 
Correct output: 51.2300489273  | Program output: 67.165898554  
Correct output: 185.9904753477 | Program output: 214.7733873879
Correct output: 42.4470677171  | Program output: 58.3348151301 
Correct output: 53.3134494099  | Program output: 44.4374373787 
Correct output: -33.8727861409 | Program output: -73.8870759731
Correct output: 127.8115346332 | Program output: 117.216800652 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_cos} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction tagged_408} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec float_stackdepth float_dec integer_flush in2 integer_max integer_shove integer_yankdup float_stackdepth integer_sub integer_div float_dec float_dec print_float in2 integer_max integer_max integer_shove float_tan integer_shove integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_cos integer_div float_dup_items float_frominteger integer_div float_flush float_frominteger tagged_408 float_flush)
Errors: [17.9289 11 22.3618 11 0.9495 8 3.0198 9 13.8724 12 2.1411 10 2.2705 10 15.5113 11 21.4859 10 21.3568 11 23.6132 11 24.0203 10 7.884 11 33.3851 12 29.8437 10 40.2534 10 1.5245 12 6.2474 12 1.7154 9 15.9358 11 28.7829 11 15.8877 11 8.876 11 40.0143 9 10.5947 8]
Total: 670.4764000000001
Mean: 13.409528
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4103.5428169000015
Median total errors in population: 1350.0281
Error averages by case: (180.14246760000032 10.333 143.5860979999995 10.614 160.73501839999915 11.357 138.0161375999992 9.337 186.9001994000012 10.133 139.51756810000015 10.824 119.00799800000003 10.887 138.64890439999988 10.577 156.17103770000028 10.718 150.02512940000003 9.975 182.7931283999997 11.487 138.0642647999998 10.48 173.1018685999994 9.783 193.66892160000046 11.691 165.3077333000013 11.036 168.85423369999924 11.034 127.18733419999938 9.81 138.3152254000005 10.133 129.60604560000047 10.0 164.77953130000174 10.288 175.23971130000075 11.155 163.28330989999947 11.133 113.7840986999994 10.349 168.13225130000035 11.024 124.26760020000003 10.249)
Error minima by case: (4.3843 2 8.7998 1 0.2414 7 2.6363 6 0.7275 3 1.2608 1 0.3447 2 0.3318 3 0.0047 7 3.0 2 3.6429 3 2.0745 6 5.4718 3 30.0 2 0.2803 7 0.0331 2 0.0196 2 0.2057 3 0.0107 1 5.0 1 1.1474 2 9.0 1 1.0574 2 0.89 2 0.0312 2)
Average genome size in population (length): 109.352
Average program size in population (points): 110.352
Average percent parens in population: 0.009
Minimum age in population: 74.43689983659576
Maximum age in population: 80.16437578641109
Average age in population: 77.97324667752122
Median age in population: 77.968607364168
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.894
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.894
Total error diversity:				 0.375
Error (vector) diversity:			 0.383
Behavioral diversity:				 0.384
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 120889159
--- Timings ---
Current time: 1529616155760 milliseconds
Total Time:         226.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        78.5 seconds, 34.7%
Fitness Testing:    116.0 seconds, 51.3%
Report:              31.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 25731.20040000003
Test mean error for best: 12.86560
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 209.4511037814
Correct output: 71.9246550776  | Program output: 49.5628985431 
Correct output: -71.7136417398 | Program output: -70.764142221 
Correct output: -86.3636978789 | Program output: -89.3835291067
Correct output: -175.789814475 | Program output: -189.6622062136
Correct output: -67.4831289413 | Program output: -69.6242528792
Correct output: -23.3513071934 | Program output: -25.6217640646
Correct output: -123.1447619871 | Program output: -138.6560425687
Correct output: 24.0076171492  | Program output: 2.5217362648  
Correct output: -50.6702678178 | Program output: -72.0270755302
Correct output: -128.7993219642 | Program output: -152.4125509713
Correct output: 41.7575748041  | Program output: 17.737303922  
Correct output: 173.057045519  | Program output: 165.1730938027
Correct output: -110.0264496737 | Program output: -143.4115708421
Correct output: 11.9743638411  | Program output: -17.8693549467
Correct output: -2.4287759947  | Program output: -42.682194081 
Correct output: -60.8453890801 | Program output: -59.3209139334
Correct output: -119.1994005588 | Program output: -125.4468243409
Correct output: -1.7396856728  | Program output: -0.0242823027 
Correct output: 51.2300489273  | Program output: 67.165898554  
Correct output: 185.9904753477 | Program output: 214.7733873879
Correct output: 42.4470677171  | Program output: 58.3348151301 
Correct output: 53.3134494099  | Program output: 44.4374373787 
Correct output: -33.8727861409 | Program output: -73.8870759731
Correct output: 127.8115346332 | Program output: 117.216800652 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_cos} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction tagged_408} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec float_stackdepth float_dec integer_flush in2 integer_max integer_shove integer_yankdup float_stackdepth integer_sub integer_div float_dec float_dec print_float in2 integer_max integer_max integer_shove float_tan integer_shove integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_cos integer_div float_dup_items float_frominteger integer_div float_flush float_frominteger tagged_408 float_flush)
Errors: [17.9289 11 22.3618 11 0.9495 8 3.0198 9 13.8724 12 2.1411 10 2.2705 10 15.5113 11 21.4859 10 21.3568 11 23.6132 11 24.0203 10 7.884 11 33.3851 12 29.8437 10 40.2534 10 1.5245 12 6.2474 12 1.7154 9 15.9358 11 28.7829 11 15.8877 11 8.876 11 40.0143 9 10.5947 8]
Total: 670.4764000000001
Mean: 13.409528
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4461.0326067999995
Median total errors in population: 1349.50305
Error averages by case: (191.25479909999913 10.424 142.24410790000033 10.71 182.54613730000028 11.523 157.93146959999956 9.456 204.75272040000166 9.817 158.69124089999903 10.563 137.2859736000008 11.249 158.21622950000062 10.53 168.00335120000074 10.55 164.9389358000002 9.399 202.14070640000105 10.614 150.67824170000077 10.786 183.8744550000005 9.937 209.6184834999998 11.553 174.969958500001 10.661 179.42423409999964 11.001 145.92191219999967 9.309 157.43700149999947 10.094 140.32743430000022 10.497 179.61212110000142 10.076 186.54039099999983 11.159 180.83575350000103 11.256 126.05191239999974 10.165 177.90802940000103 10.78 137.16000689999998 10.558)
Error minima by case: (4.4778 1 10.0 1 0.9495 7 2.6016 6 7.3783 3 1.4831 1 0.0338 2 0.0549 3 0.4815 6 0.0 0 3.926 3 4.2691 7 5.953 2 27.0 2 9.2662 7 0.019 2 0.0072 1 0.0153 3 0.0774 1 5.0 1 0.6401 1 9.0 1 6.8632 2 0.5752 2 0.0332 2)
Average genome size in population (length): 109.041
Average program size in population (points): 110.041
Average percent parens in population: 0.009
Minimum age in population: 77.0079204787642
Maximum age in population: 81.6951264737831
Average age in population: 79.32522195223666
Median age in population: 79.34642424016852
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.365
Error (vector) diversity:			 0.369
Behavioral diversity:				 0.37
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 123617884
--- Timings ---
Current time: 1529616160321 milliseconds
Total Time:         230.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        79.8 seconds, 34.6%
Fitness Testing:    118.5 seconds, 51.4%
Report:              32.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 25537.28460000001
Test mean error for best: 12.76864
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 221.6728635404
Correct output: 71.9246550776  | Program output: 91.3390076348 
Correct output: -71.7136417398 | Program output: -71.5572231187
Correct output: -86.3636978789 | Program output: -91.0045022023
Correct output: -175.789814475 | Program output: -209.9684042599
Correct output: -67.4831289413 | Program output: -73.8954630015
Correct output: -23.3513071934 | Program output: -32.2957604305
Correct output: -123.1447619871 | Program output: -136.6937834281
Correct output: 24.0076171492  | Program output: 33.6555344654 
Correct output: -50.6702678178 | Program output: -42.7886880563
Correct output: -128.7993219642 | Program output: -121.5602439886
Correct output: 41.7575748041  | Program output: 20.3547561436 
Correct output: 173.057045519  | Program output: 201.1721133152
Correct output: -110.0264496737 | Program output: -94.4688873391
Correct output: 11.9743638411  | Program output: -16.3236095508
Correct output: -2.4287759947  | Program output: 22.1090057506 
Correct output: -60.8453890801 | Program output: -71.8577915627
Correct output: -119.1994005588 | Program output: -132.7808005951
Correct output: -1.7396856728  | Program output: -17.1481409327
Correct output: 51.2300489273  | Program output: 64.8296318834 
Correct output: 185.9904753477 | Program output: 193.2331959269
Correct output: 42.4470677171  | Program output: 22.7923197374 
Correct output: 53.3134494099  | Program output: 56.4958207826 
Correct output: -33.8727861409 | Program output: -14.5991033432
Correct output: 127.8115346332 | Program output: 135.2574426279
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_dec} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_cos} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction tagged_408} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos tag_integer_147 float_dec float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec float_stackdepth float_dec integer_flush in2 integer_max integer_shove integer_yankdup float_stackdepth integer_sub integer_div float_dec float_dec print_float in2 integer_max integer_max integer_shove float_tan integer_shove integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_cos integer_div float_dup_items float_frominteger integer_div float_flush float_frominteger tagged_408 float_flush)
Errors: [30.1507 11 19.4144 11 0.1564 10 4.6408 12 34.1786 11 6.4123 11 8.9445 11 13.549 10 9.6479 12 7.8816 10 7.2391 10 21.4028 10 28.1151 12 15.5576 12 28.298 11 24.5378 10 11.0124 10 13.5814 9 15.4085 10 13.5996 11 7.2427 11 19.6547 9 3.1824 11 19.2737 11 7.4459 11]
Total: 637.5279
Mean: 12.750558
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4713.301367899998
Median total errors in population: 1350.7919
Error averages by case: (204.42428359999863 10.676 155.36241940000113 10.833 190.45035090000098 11.632 162.51815489999976 9.642 212.5734636000016 9.858 164.69827099999867 10.599 144.39612200000082 11.455 167.80499780000108 10.628 179.79008980000086 10.584 173.56236289999987 9.161 208.6123115000012 10.281 160.31248620000048 11.005 198.042894700001 10.25 218.72780019999988 11.534 186.5404249000012 10.523 189.5950032999999 11.09 155.2202414999997 9.29 166.5739951999989 10.349 152.31312780000025 10.864 189.25683070000136 10.172 199.8857112999996 11.268 190.24783790000166 11.377 136.6779498 10.166 189.1461331000013 10.71 151.91610390000042 10.705)
Error minima by case: (4.4778 2 11.0 2 0.1564 7 2.0198 7 2.8358 3 0.2608 2 0.0474 2 0.0147 3 0.0943 7 2.0 2 1.5618 3 6.1238 7 5.953 3 2.3851 2 5.2265 7 0.001 2 0.0072 1 0.2243 3 0.0718 2 5.0 1 0.6401 2 9.0 2 1.0975 2 0.943 2 0.0014 2)
Average genome size in population (length): 109.684
Average program size in population (points): 110.684
Average percent parens in population: 0.009
Minimum age in population: 78.1541729897904
Maximum age in population: 83.2020942993327
Average age in population: 80.71443163304656
Median age in population: 80.7302705440721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.381
Error (vector) diversity:			 0.39
Behavioral diversity:				 0.39
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 126362834
--- Timings ---
Current time: 1529616164913 milliseconds
Total Time:         235.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        81.3 seconds, 34.6%
Fitness Testing:    120.9 seconds, 51.4%
Report:              33.0 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 24136.323099999965
Test mean error for best: 12.06816
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 208.2042088937
Correct output: 71.9246550776  | Program output: 51.1756240254 
Correct output: -71.7136417398 | Program output: -71.3493975757
Correct output: -86.3636978789 | Program output: -89.513963527 
Correct output: -175.789814475 | Program output: -189.5019542923
Correct output: -67.4831289413 | Program output: -69.7825126872
Correct output: -23.3513071934 | Program output: -25.6547673558
Correct output: -123.1447619871 | Program output: -137.2892095053
Correct output: 24.0076171492  | Program output: 4.8517843586  
Correct output: -50.6702678178 | Program output: -69.7162557473
Correct output: -128.7993219642 | Program output: -149.8063751961
Correct output: 41.7575748041  | Program output: 20.0733415245 
Correct output: 173.057045519  | Program output: 165.1820851102
Correct output: -110.0264496737 | Program output: -139.500457278
Correct output: 11.9743638411  | Program output: -14.9754898409
Correct output: -2.4287759947  | Program output: -37.8512825768
Correct output: -60.8453890801 | Program output: -59.8100861757
Correct output: -119.1994005588 | Program output: -125.427747929
Correct output: -1.7396856728  | Program output: -0.2431007008 
Correct output: 51.2300489273  | Program output: 64.8554971184 
Correct output: 185.9904753477 | Program output: 210.5559980833
Correct output: 42.4470677171  | Program output: 55.6846940508 
Correct output: 53.3134494099  | Program output: 44.7675862095 
Correct output: -33.8727861409 | Program output: -69.0951262089
Correct output: 127.8115346332 | Program output: 117.5459777983
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_dup_items} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_cos} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction tagged_408} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_dup_items integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin float_dup_items float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec float_stackdepth float_dec integer_flush in2 integer_max integer_shove integer_yankdup float_stackdepth integer_sub integer_div float_dec float_dec print_float in2 integer_max integer_max integer_shove float_tan integer_shove integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_cos integer_div float_dup_items float_frominteger integer_div float_flush float_frominteger tagged_408 float_flush)
Errors: [16.682 11 20.749 9 0.3642 9 3.1503 9 13.7121 11 2.2994 9 2.3035 9 14.1444 12 19.1558 10 19.046 10 21.0071 9 21.6842 10 7.875 9 29.474 10 26.9499 8 35.4225 11 1.0353 10 6.2283 12 1.4966 10 13.6254 12 24.5655 12 13.2376 12 8.5459 10 35.2223 10 10.2656 11]
Total: 623.2419
Mean: 12.464838
Genome size: 129
Size: 130
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4331.996378999998
Median total errors in population: 1349.54515
Error averages by case: (189.6230708999986 10.663 140.5058494000004 10.638 173.80751750000024 11.456 143.52571230000015 9.581 197.91477760000149 10.065 145.55012259999816 10.376 122.84889880000098 11.292 156.955966500001 10.667 167.2430668000007 10.514 150.95110210000058 9.081 195.85402380000124 10.402 150.92859200000123 10.821 183.02193070000072 10.334 204.14721740000007 11.52 174.02754940000125 10.622 178.33933319999966 11.016 138.5693333000001 9.423 152.8214950999991 10.391 138.42082310000012 10.778 167.23568870000076 10.168 185.78032139999945 11.212 171.22188730000167 11.285 121.69047359999996 10.252 178.5547218000013 10.515 138.8969037000002 10.488)
Error minima by case: (4.4112 2 9.3929 1 0.0505 7 0.9802 7 1.5385 3 0.1386 1 0.2705 2 0.4938 3 0.0943 7 0.4441 2 3.6463 3 2.8881 7 3.884 3 2.3851 2 0.3241 7 0.0132 2 0.0157 2 0.0423 3 0.0102 1 0.5453 1 0.6401 2 2.9158 1 0.1213 2 2.7355 2 0.0628 1)
Average genome size in population (length): 111.356
Average program size in population (points): 112.356
Average percent parens in population: 0.009
Minimum age in population: 79.5321374404977
Maximum age in population: 84.1896420791329
Average age in population: 82.15432707334986
Median age in population: 82.1971939673278
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.919
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.919
Total error diversity:				 0.383
Error (vector) diversity:			 0.391
Behavioral diversity:				 0.392
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 129150759
--- Timings ---
Current time: 1529616169496 milliseconds
Total Time:         239.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        82.6 seconds, 34.5%
Fitness Testing:    123.5 seconds, 51.5%
Report:              33.6 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 16018.928299999998
Test mean error for best: 8.00946
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 175.9882950481
Correct output: 71.9246550776  | Program output: 62.0611370867 
Correct output: -71.7136417398 | Program output: -77.5043334693
Correct output: -86.3636978789 | Program output: -90.611416194 
Correct output: -175.789814475 | Program output: -170.3998429465
Correct output: -67.4831289413 | Program output: -70.879650357 
Correct output: -23.3513071934 | Program output: -26.0200863072
Correct output: -123.1447619871 | Program output: -122.9970083888
Correct output: 24.0076171492  | Program output: 24.3849264125 
Correct output: -50.6702678178 | Program output: -50.3044619353
Correct output: -128.7993219642 | Program output: -127.7660196152
Correct output: 41.7575748041  | Program output: 45.0890617046 
Correct output: 173.057045519  | Program output: 159.9805291633
Correct output: -110.0264496737 | Program output: -106.6142001474
Correct output: 11.9743638411  | Program output: 17.740413753  
Correct output: -2.4287759947  | Program output: 2.6529884     
Correct output: -60.8453890801 | Program output: -63.0885910815
Correct output: -119.1994005588 | Program output: -120.2796415535
Correct output: -1.7396856728  | Program output: -2.7671056984 
Correct output: 51.2300489273  | Program output: 39.8873618225 
Correct output: 185.9904753477 | Program output: 171.7528031749
Correct output: 42.4470677171  | Program output: 33.4650432949 
Correct output: 53.3134494099  | Program output: 47.5053934826 
Correct output: -33.8727861409 | Program output: -28.7591875481
Correct output: 127.8115346332 | Program output: 120.8760725742
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction integer_inc} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction integer_min} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_yank} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos float_cos tag_integer_147 float_inc integer_inc float_sin float_sin print_integer integer_min float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_mult integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec float_stackdepth float_dec integer_flush in2 integer_max integer_shove integer_yankdup float_stackdepth integer_sub integer_div float_dec float_dec print_float in2 integer_max integer_max integer_shove float_tan integer_shove integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_yank float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger)
Errors: [15.5339 9 9.8635 11 5.7907 10 4.2477 11 5.39 7 3.3965 11 2.6688 11 0.1478 10 0.3773 9 0.3658 9 1.0333 7 3.3315 9 13.0765 11 3.4122 11 5.766 9 5.0818 10 2.2432 8 1.0802 9 1.0274 8 11.3427 11 14.2377 11 8.982 10 5.8081 11 5.1136 10 6.9355 9]
Total: 378.2537000000001
Mean: 7.565074
Genome size: 116
Size: 117
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 5052.796979699995
Median total errors in population: 1344.3427
Error averages by case: (215.69250369999924 10.909 160.27491710000072 10.72 199.64407630000034 11.154 162.34296429999978 9.867 224.41857280000107 10.581 168.24638329999925 10.413 144.85003110000045 11.068 194.04709840000115 10.986 198.92099660000076 10.679 172.9876512 9.613 221.1206484000009 10.859 190.56429870000068 10.868 208.6499779 10.681 228.3917318000001 11.647 211.7722499000007 11.007 216.0233865999991 11.025 170.4723990000002 10.073 189.62939869999897 10.873 171.7124084999999 10.648 185.93369950000098 10.538 213.6548416999999 11.275 192.7880436000006 11.295 149.29115919999964 10.638 215.6725055000014 10.47 177.41903590000058 10.389)
Error minima by case: (0.4778 1 0.9247 2 0.0505 7 0.0198 2 5.39 2 0.0579 2 0.0139 2 0.0568 3 0.3773 6 0.0 0 1.0333 3 3.3315 8 3.884 3 0.573 2 1.9744 7 0.19 2 0.0075 1 0.0423 2 0.0048 2 0.5453 1 0.067 1 2.9158 1 0.1027 2 1.2058 2 0.0628 1)
Average genome size in population (length): 113.578
Average program size in population (points): 114.578
Average percent parens in population: 0.009
Minimum age in population: 81.19626012404215
Maximum age in population: 85.47617401412457
Average age in population: 83.57393512492253
Median age in population: 83.574918989725
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.913
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.913
Total error diversity:				 0.415
Error (vector) diversity:			 0.42
Behavioral diversity:				 0.421
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 131997559
--- Timings ---
Current time: 1529616173889 milliseconds
Total Time:         244.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        84.0 seconds, 34.4%
Fitness Testing:    126.0 seconds, 51.6%
Report:              34.2 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 14127.15840000002
Test mean error for best: 7.06358
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 185.0161545439
Correct output: 71.9246550776  | Program output: 65.2645810429 
Correct output: -71.7136417398 | Program output: -76.5624757256
Correct output: -86.3636978789 | Program output: -90.5438203758
Correct output: -175.789814475 | Program output: -179.2018878  
Correct output: -67.4831289413 | Program output: -71.2184564245
Correct output: -23.3513071934 | Program output: -27.2394402936
Correct output: -123.1447619871 | Program output: -125.1658220273
Correct output: 24.0076171492  | Program output: 23.2235042071 
Correct output: -50.6702678178 | Program output: -51.4797735867
Correct output: -128.7993219642 | Program output: -129.1981807849
Correct output: 41.7575748041  | Program output: 41.1647147663 
Correct output: 173.057045519  | Program output: 168.97042083  
Correct output: -110.0264496737 | Program output: -108.6258401878
Correct output: 11.9743638411  | Program output: 12.2693987065 
Correct output: -2.4287759947  | Program output: 0.2387368051  
Correct output: -60.8453890801 | Program output: -64.041428768 
Correct output: -119.1994005588 | Program output: -123.103065966
Correct output: -1.7396856728  | Program output: -5.2098845464 
Correct output: 51.2300489273  | Program output: 43.8505981729 
Correct output: 185.9904753477 | Program output: 176.0849263638
Correct output: 42.4470677171  | Program output: 34.7894316324 
Correct output: 53.3134494099  | Program output: 48.7011953794 
Correct output: -33.8727861409 | Program output: -31.2550402495
Correct output: 127.8115346332 | Program output: 123.108474202 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_cos} {:instruction float_swap} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_cos} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_flush float_tan float_flush float_flush integer_pop integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_cos float_swap float_mult integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec float_stackdepth float_dec integer_flush in2 integer_max integer_shove integer_yankdup float_stackdepth integer_sub integer_div float_dec float_dec print_float in2 integer_max integer_max integer_shove float_tan integer_shove integer_mod integer_flush float_frominteger integer_div float_flush float_flush integer_div float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_cos integer_div float_dup_items float_frominteger integer_div)
Errors: [6.5061 12 6.6601 10 4.8488 10 4.1801 10 3.4121 8 3.7353 11 3.8881 8 2.0211 9 0.7841 11 0.8095 9 0.3989 9 0.5929 9 4.0866 8 1.4006 10 0.295 10 2.6675 10 3.196 9 3.9037 9 3.4702 9 7.3795 10 9.9055 11 7.6576 12 4.6123 11 2.6177 10 4.7031 9]
Total: 337.7324
Mean: 6.754648
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4212.0165657
Median total errors in population: 682.5774000000001
Error averages by case: (167.9376545999998 11.024 140.25926319999982 10.78 156.82479 10.377 144.19541029999954 10.251 181.76728229999964 11.121 145.4213074999995 10.447 133.5952346999999 10.53 166.66658360000073 11.105 152.8383015 10.786 149.7899127999994 10.477 175.97607070000072 11.164 158.9777124000006 10.843 161.9860453999999 10.866 180.88114410000057 11.644 170.50887150000014 10.975 175.6227144999993 10.905 150.43515030000012 10.908 161.03937119999904 11.391 142.40395230000007 10.274 147.06593260000062 10.865 169.20388530000028 11.345 150.2036401000007 11.07 130.7478736000003 10.758 179.05586750000063 10.54 147.93959370000022 10.227)
Error minima by case: (1.0948 1 1.7095 2 0.0467 5 0.0198 3 1.6386 3 0.001 2 0.0139 2 0.1125 3 0.11 7 0.0 0 0.288 3 0.5032 8 1.3522 2 0.0628 3 0.0108 7 0.0756 3 0.0333 2 0.0177 3 0.0201 2 0.4818 1 1.263 1 0.0427 2 0.1452 2 1.0245 3 0.0628 2)
Average genome size in population (length): 115.177
Average program size in population (points): 116.177
Average percent parens in population: 0.009
Minimum age in population: 82.58796211034885
Maximum age in population: 87.19553383735433
Average age in population: 84.95905364674768
Median age in population: 84.96288477609826
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.487
Error (vector) diversity:			 0.492
Behavioral diversity:				 0.492
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 134887934
--- Timings ---
Current time: 1529616178483 milliseconds
Total Time:         248.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        85.5 seconds, 34.3%
Fitness Testing:    128.5 seconds, 51.6%
Report:              34.8 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 5593.0
Test mean error for best: 2.79650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 187.522211088 
Correct output: 71.9246550776  | Program output: 67.9246550776 
Correct output: -71.7136417398 | Program output: -75.7136417398
Correct output: -86.3636978789 | Program output: -90.3636978789
Correct output: -175.789814475 | Program output: -179.789814475
Correct output: -67.4831289413 | Program output: -71.4831289413
Correct output: -23.3513071934 | Program output: -27.3513071934
Correct output: -123.1447619871 | Program output: -127.1447619871
Correct output: 24.0076171492  | Program output: 20.0076171492 
Correct output: -50.6702678178 | Program output: -54.6702678178
Correct output: -128.7993219642 | Program output: -132.7993219642
Correct output: 41.7575748041  | Program output: 37.7575748041 
Correct output: 173.057045519  | Program output: 169.057045519 
Correct output: -110.0264496737 | Program output: -114.0264496737
Correct output: 11.9743638411  | Program output: 7.9743638411  
Correct output: -2.4287759947  | Program output: -6.4287759947 
Correct output: -60.8453890801 | Program output: -64.8453890801
Correct output: -119.1994005588 | Program output: -123.1994005588
Correct output: -1.7396856728  | Program output: -5.7396856728 
Correct output: 51.2300489273  | Program output: 47.2300489273 
Correct output: 185.9904753477 | Program output: 181.9904753477
Correct output: 42.4470677171  | Program output: 38.4470677171 
Correct output: 53.3134494099  | Program output: 49.3134494099 
Correct output: -33.8727861409 | Program output: -37.8727861409
Correct output: 127.8115346332 | Program output: 123.8115346332
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction print_float} {:instruction float_flush} {:instruction integer_div} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_cos} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction tagged_408} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_pop integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec float_stackdepth float_dec integer_flush in2 integer_max integer_shove integer_yankdup float_stackdepth integer_sub integer_div float_dec float_dec print_float in2 integer_max integer_max integer_shove float_tan integer_shove integer_mod integer_flush float_frominteger integer_div print_float float_flush integer_div float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_cos integer_div float_dup_items float_frominteger integer_div float_flush float_frominteger tagged_408 float_flush)
Errors: [4.0 2 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 1 4.0 1 4.0 1 4.0 2 4.0 2 4.0 2 4.0 1 4.0 2 4.0 1 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 2 4.0 1 4.0 1]
Total: 137.0
Mean: 2.74
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4222.174598499999
Median total errors in population: 648.4764000000001
Error averages by case: (163.06298500000008 11.067 132.66372589999966 10.772 159.06811740000015 10.359 154.64806409999957 10.653 183.93820600000006 11.131 155.50947039999977 10.484 149.76220899999998 10.337 171.1936593000001 11.056 144.03533769999999 10.869 162.1978963999996 10.519 174.85056610000026 11.014 154.52817880000015 10.898 157.81974439999968 10.955 178.58037060000015 11.39 162.55624629999986 10.84 166.6230963000001 10.852 157.6847859000002 10.85 167.54374619999928 11.359 140.8116177000001 10.241 154.2307624000002 10.952 160.83689670000024 11.383 155.9098327 10.906 128.36169380000007 10.85 167.77859329999995 10.723 146.97879610000018 10.54)
Error minima by case: (0.0 0 1.6707 2 0.0382 1 0.0043 2 2.4093 1 0.0581 2 0.0086 1 0.0165 1 0.11 1 0.0 0 0.0409 2 0.5032 2 1.3522 2 0.0539 1 0.295 2 0.0756 1 0.0333 1 0.0177 2 0.0201 1 0.4818 1 0.0 0 0.0427 1 0.1824 1 1.0245 1 0.1928 1)
Average genome size in population (length): 116.588
Average program size in population (points): 117.588
Average percent parens in population: 0.009
Minimum age in population: 84.48965750227477
Maximum age in population: 87.96264444637023
Average age in population: 86.34707903495396
Median age in population: 86.35959073147319
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.915
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.915
Total error diversity:				 0.568
Error (vector) diversity:			 0.572
Behavioral diversity:				 0.573
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 137814359
--- Timings ---
Current time: 1529616183020 milliseconds
Total Time:         253.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        86.9 seconds, 34.3%
Fitness Testing:    130.9 seconds, 51.7%
Report:              35.5 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 5593.0
Test mean error for best: 2.79650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 187.522211088 
Correct output: 71.9246550776  | Program output: 67.9246550776 
Correct output: -71.7136417398 | Program output: -75.7136417398
Correct output: -86.3636978789 | Program output: -90.3636978789
Correct output: -175.789814475 | Program output: -179.789814475
Correct output: -67.4831289413 | Program output: -71.4831289413
Correct output: -23.3513071934 | Program output: -27.3513071934
Correct output: -123.1447619871 | Program output: -127.1447619871
Correct output: 24.0076171492  | Program output: 20.0076171492 
Correct output: -50.6702678178 | Program output: -54.6702678178
Correct output: -128.7993219642 | Program output: -132.7993219642
Correct output: 41.7575748041  | Program output: 37.7575748041 
Correct output: 173.057045519  | Program output: 169.057045519 
Correct output: -110.0264496737 | Program output: -114.0264496737
Correct output: 11.9743638411  | Program output: 7.9743638411  
Correct output: -2.4287759947  | Program output: -6.4287759947 
Correct output: -60.8453890801 | Program output: -64.8453890801
Correct output: -119.1994005588 | Program output: -123.1994005588
Correct output: -1.7396856728  | Program output: -5.7396856728 
Correct output: 51.2300489273  | Program output: 47.2300489273 
Correct output: 185.9904753477 | Program output: 181.9904753477
Correct output: 42.4470677171  | Program output: 38.4470677171 
Correct output: 53.3134494099  | Program output: 49.3134494099 
Correct output: -33.8727861409 | Program output: -37.8727861409
Correct output: 127.8115346332 | Program output: 123.8115346332
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_add} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction print_float} {:instruction float_flush} {:instruction integer_div} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_cos} {:instruction integer_div} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction tagged_408} {:instruction float_flush})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_add integer_mult integer_add integer_flush float_tan float_flush float_flush integer_pop integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_pop integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec float_stackdepth float_dec integer_flush in2 integer_max integer_shove integer_yankdup float_stackdepth integer_sub integer_div float_dec float_dec print_float in2 integer_max integer_max integer_shove float_tan integer_shove integer_mod integer_flush float_frominteger integer_div print_float float_flush integer_div float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div float_flush float_cos integer_div float_dup_items float_frominteger integer_div float_flush float_frominteger tagged_408 float_flush)
Errors: [4.0 2 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 1 4.0 1 4.0 1 4.0 2 4.0 2 4.0 2 4.0 1 4.0 2 4.0 1 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 2 4.0 1 4.0 1]
Total: 137.0
Mean: 2.74
Genome size: 121
Size: 122
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 4396.514188900001
Median total errors in population: 631.5064
Error averages by case: (175.77026600000022 11.025 138.42623920000014 10.756 168.85475389999993 10.421 164.44579299999998 10.651 189.76842239999996 10.769 163.32818179999995 10.439 158.4156951 10.237 175.5405129000001 10.848 146.5709789 10.65 166.80198189999976 10.499 179.0725467000003 10.748 156.8606398000001 10.939 172.19960439999969 10.823 181.66105279999996 11.182 164.64589779999997 10.807 168.08430010000038 10.833 165.4613428999998 10.675 173.6976627 11.133 149.4683231000001 10.111 160.8286040000001 10.927 173.09804700000012 11.408 160.65350309999988 11.012 140.93896829999989 10.96 172.75171900000024 10.727 159.91015210000003 10.679)
Error minima by case: (0.0661 1 1.9138 1 0.0059 1 0.0198 2 0.0977 1 0.0377 1 0.0086 1 0.0153 1 0.0834 1 0.0 0 0.0257 2 0.128 2 0.5742 2 0.0318 1 0.295 2 0.0058 1 0.0333 1 0.0047 2 0.0087 1 0.4818 1 1.0161 1 0.0427 1 0.5874 2 0.2755 1 0.4481 1)
Average genome size in population (length): 116.928
Average program size in population (points): 117.928
Average percent parens in population: 0.009
Minimum age in population: 85.55295333841327
Maximum age in population: 89.63769334589905
Average age in population: 87.76006294586004
Median age in population: 87.83637154862383
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.942
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.942
Total error diversity:				 0.642
Error (vector) diversity:			 0.65
Behavioral diversity:				 0.651
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 140747334
--- Timings ---
Current time: 1529616187747 milliseconds
Total Time:         258.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        88.3 seconds, 34.2%
Fitness Testing:    133.5 seconds, 51.8%
Report:              36.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 4407.0
Test mean error for best: 2.20350
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 188.522211088 
Correct output: 71.9246550776  | Program output: 68.9246550776 
Correct output: -71.7136417398 | Program output: -74.7136417398
Correct output: -86.3636978789 | Program output: -89.3636978789
Correct output: -175.789814475 | Program output: -178.789814475
Correct output: -67.4831289413 | Program output: -70.4831289413
Correct output: -23.3513071934 | Program output: -26.3513071934
Correct output: -123.1447619871 | Program output: -126.1447619871
Correct output: 24.0076171492  | Program output: 21.0076171492 
Correct output: -50.6702678178 | Program output: -53.6702678178
Correct output: -128.7993219642 | Program output: -131.7993219642
Correct output: 41.7575748041  | Program output: 38.7575748041 
Correct output: 173.057045519  | Program output: 170.057045519 
Correct output: -110.0264496737 | Program output: -113.0264496737
Correct output: 11.9743638411  | Program output: 8.9743638411  
Correct output: -2.4287759947  | Program output: -5.4287759947 
Correct output: -60.8453890801 | Program output: -63.8453890801
Correct output: -119.1994005588 | Program output: -122.1994005588
Correct output: -1.7396856728  | Program output: -4.7396856728 
Correct output: 51.2300489273  | Program output: 48.2300489273 
Correct output: 185.9904753477 | Program output: 182.9904753477
Correct output: 42.4470677171  | Program output: 39.4470677171 
Correct output: 53.3134494099  | Program output: 50.3134494099 
Correct output: -33.8727861409 | Program output: -36.8727861409
Correct output: 127.8115346332 | Program output: 124.8115346332
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_stackdepth} {:instruction float_dec} {:instruction integer_flush} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_flush float_tan float_flush float_flush integer_pop integer_pop in2 integer_dup integer_max integer_inc integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos tag_integer_147 float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_pop integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec float_stackdepth float_dec integer_flush in2 integer_max integer_shove integer_yankdup float_stackdepth integer_sub integer_div float_dec float_dec print_float float_dec float_dec print_float in2 integer_max)
Errors: [3.0 2 3.0 2 3.0 1 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 1 3.0 1 3.0 2 3.0 2 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 2 3.0 1 3.0 2 3.0 1 3.0 2 3.0 1 3.0 1 3.0 1]
Total: 109.0
Mean: 2.18
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 4822.4560360999985
Median total errors in population: 535.3877000000001
Error averages by case: (187.71786500000044 10.893 156.00000370000078 10.703 191.15377120000025 10.446 185.12559280000045 10.769 208.49990780000016 10.377 184.26714919999978 10.505 175.82477560000027 10.252 195.9594959000004 10.679 165.61919199999969 10.444 182.5521511000001 10.339 198.04328880000034 10.524 171.2500329999999 10.849 185.61291149999994 10.605 198.42902599999977 11.108 176.5092839999999 10.726 180.58493110000066 10.643 186.26001799999958 10.442 195.02267020000005 10.887 168.36142610000016 9.819 175.89069880000034 10.832 186.3960367999997 11.2 177.66081880000024 10.905 159.41189129999952 10.962 189.2295902000004 10.713 175.05050720000003 10.401)
Error minima by case: (0.0916 1 0.0868 1 0.0551 1 0.0802 1 0.1532 1 0.0157 1 0.0139 1 0.0153 1 0.0419 1 0.0 0 0.0333 2 0.0396 2 0.3494 1 0.05 1 0.0084 2 0.0125 1 5.0E-4 1 0.0047 2 0.0087 1 0.2295 1 0.2601 1 0.0427 1 0.5874 1 0.0245 1 0.9371 1)
Average genome size in population (length): 115.612
Average program size in population (points): 116.612
Average percent parens in population: 0.009
Minimum age in population: 86.77189685440493
Maximum age in population: 91.00749213260963
Average age in population: 89.12221657978435
Median age in population: 89.1731061844415
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.938
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.938
Total error diversity:				 0.618
Error (vector) diversity:			 0.626
Behavioral diversity:				 0.626
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 143645934
--- Timings ---
Current time: 1529616192213 milliseconds
Total Time:         262.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        89.6 seconds, 34.1%
Fitness Testing:    135.9 seconds, 51.8%
Report:              36.9 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 4407.0
Test mean error for best: 2.20350
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 188.522211088 
Correct output: 71.9246550776  | Program output: 68.9246550776 
Correct output: -71.7136417398 | Program output: -74.7136417398
Correct output: -86.3636978789 | Program output: -89.3636978789
Correct output: -175.789814475 | Program output: -178.789814475
Correct output: -67.4831289413 | Program output: -70.4831289413
Correct output: -23.3513071934 | Program output: -26.3513071934
Correct output: -123.1447619871 | Program output: -126.1447619871
Correct output: 24.0076171492  | Program output: 21.0076171492 
Correct output: -50.6702678178 | Program output: -53.6702678178
Correct output: -128.7993219642 | Program output: -131.7993219642
Correct output: 41.7575748041  | Program output: 38.7575748041 
Correct output: 173.057045519  | Program output: 170.057045519 
Correct output: -110.0264496737 | Program output: -113.0264496737
Correct output: 11.9743638411  | Program output: 8.9743638411  
Correct output: -2.4287759947  | Program output: -5.4287759947 
Correct output: -60.8453890801 | Program output: -63.8453890801
Correct output: -119.1994005588 | Program output: -122.1994005588
Correct output: -1.7396856728  | Program output: -4.7396856728 
Correct output: 51.2300489273  | Program output: 48.2300489273 
Correct output: 185.9904753477 | Program output: 182.9904753477
Correct output: 42.4470677171  | Program output: 39.4470677171 
Correct output: 53.3134494099  | Program output: 50.3134494099 
Correct output: -33.8727861409 | Program output: -36.8727861409
Correct output: 127.8115346332 | Program output: 124.8115346332
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction integer_inc} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction float_stackdepth} {:instruction integer_rot} {:instruction integer_flush} {:instruction in2} {:instruction integer_max} {:instruction integer_shove} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_sub} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_flush float_tan float_flush float_flush integer_pop integer_pop in2 integer_dup integer_max integer_stackdepth integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos float_cos tag_integer_147 float_inc integer_inc float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_pop integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec float_stackdepth integer_rot integer_flush in2 integer_max integer_shove integer_yankdup float_stackdepth integer_sub integer_div float_dec float_dec print_float float_dec float_dec print_float in2 integer_max)
Errors: [3.0 2 3.0 2 3.0 1 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 1 3.0 1 3.0 2 3.0 2 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 2 3.0 1 3.0 2 3.0 1 3.0 2 3.0 1 3.0 1 3.0 1]
Total: 109.0
Mean: 2.18
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3940.1375322000004
Median total errors in population: 379.1183500000001
Error averages by case: (151.11433220000004 10.332 121.11534820000038 10.332 155.44181560000007 9.893 153.9439817000004 10.314 172.01695669999984 9.825 152.33999029999967 10.032 147.03572909999983 9.533 161.45331150000035 9.988 128.06958119999993 9.971 152.6864549000001 9.735 163.6482389000003 10.158 133.40242429999986 10.285 148.38126259999999 9.981 163.75425859999976 10.497 135.5003526999999 10.225 146.24631000000002 9.971 153.24945119999995 9.855 160.21790219999977 10.402 140.96573210000008 9.287 137.12719620000001 10.34 150.25860409999996 10.461 138.29493480000042 10.573 124.1854474999998 10.564 158.61302920000003 10.017 138.7368864000002 9.767)
Error minima by case: (0.0912 1 0.0862 2 0.1659 1 0.0801 1 0.0114 1 0.0296 2 0.0682 1 0.0141 1 0.0377 1 0.0 0 0.0563 2 0.0408 2 0.0866 1 0.05 1 0.0084 1 0.0269 1 0.0034 1 0.0047 2 9.0E-4 1 0.229 1 0.0321 1 0.1242 1 0.5871 1 0.0404 1 0.7031 1)
Average genome size in population (length): 116.039
Average program size in population (points): 117.039
Average percent parens in population: 0.009
Minimum age in population: 87.93966530006549
Maximum age in population: 92.25112393172627
Average age in population: 90.51594359025015
Median age in population: 90.56697703426318
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.927
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.927
Total error diversity:				 0.573
Error (vector) diversity:			 0.578
Behavioral diversity:				 0.579
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 146556984
--- Timings ---
Current time: 1529616196717 milliseconds
Total Time:         267.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        91.0 seconds, 34.1%
Fitness Testing:    138.5 seconds, 51.8%
Report:              37.6 seconds, 14.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 2113.0
Test mean error for best: 1.05650
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 190.522211088 
Correct output: 71.9246550776  | Program output: 70.9246550776 
Correct output: -71.7136417398 | Program output: -72.7136417398
Correct output: -86.3636978789 | Program output: -87.3636978789
Correct output: -175.789814475 | Program output: -176.789814475
Correct output: -67.4831289413 | Program output: -68.4831289413
Correct output: -23.3513071934 | Program output: -24.3513071934
Correct output: -123.1447619871 | Program output: -124.1447619871
Correct output: 24.0076171492  | Program output: 23.0076171492 
Correct output: -50.6702678178 | Program output: -51.6702678178
Correct output: -128.7993219642 | Program output: -129.7993219642
Correct output: 41.7575748041  | Program output: 40.7575748041 
Correct output: 173.057045519  | Program output: 172.057045519 
Correct output: -110.0264496737 | Program output: -111.0264496737
Correct output: 11.9743638411  | Program output: 10.9743638411 
Correct output: -2.4287759947  | Program output: -3.4287759947 
Correct output: -60.8453890801 | Program output: -61.8453890801
Correct output: -119.1994005588 | Program output: -120.1994005588
Correct output: -1.7396856728  | Program output: -2.7396856728 
Correct output: 51.2300489273  | Program output: 50.2300489273 
Correct output: 185.9904753477 | Program output: 184.9904753477
Correct output: 42.4470677171  | Program output: 41.4470677171 
Correct output: 53.3134494099  | Program output: 52.3134494099 
Correct output: -33.8727861409 | Program output: -34.8727861409
Correct output: 127.8115346332 | Program output: 126.8115346332
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_dec} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_max} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_flush float_tan float_flush float_flush integer_pop integer_pop in2 integer_dup integer_max integer_inc integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos tag_integer_147 float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_pop integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_dec float_dec print_float in2 integer_max integer_max integer_rot integer_dup_times integer_shove integer_mod integer_flush float_frominteger integer_div float_flush float_flush float_frominteger integer_div float_flush float_frominteger integer_div float_flush float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger)
Errors: [1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 51.0
Mean: 1.02
Genome size: 111
Size: 112
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3766.3399703999994
Median total errors in population: 342.34040000000005
Error averages by case: (144.05681710000007 9.153 120.83034049999989 8.942 149.13276100000027 8.652 147.07066579999994 8.944 163.27484189999973 8.581 145.01056029999967 8.722 139.71113259999956 8.138 153.86590560000025 8.578 129.5592283000003 8.676 143.81932929999994 8.319 155.25621970000014 9.206 134.41926859999995 9.088 141.8632643000001 8.541 153.59528519999986 8.968 132.53428069999975 9.122 142.06366509999978 8.438 146.96417850000017 8.589 153.7529618999997 9.211 134.96005109999996 8.171 133.6789228999996 8.973 144.4692172999998 8.911 133.40824920000037 9.33 120.72275719999968 9.15 148.13784499999994 8.587 134.59822129999998 8.594)
Error minima by case: (0.0912 1 0.085 1 0.4218 1 0.0546 1 0.0114 1 0.0745 1 0.0138 1 0.0153 1 0.0227 1 0.0 0 0.0265 1 0.0377 1 0.0866 1 0.0856 1 0.0094 1 0.0259 1 0.1721 1 0.0047 2 0.0087 1 0.2279 1 0.085 1 0.3735 1 0.0586 1 0.0404 1 0.1246 1)
Average genome size in population (length): 116.733
Average program size in population (points): 117.733
Average percent parens in population: 0.009
Minimum age in population: 89.52216714013632
Maximum age in population: 94.1465111964965
Average age in population: 92.01481654881997
Median age in population: 92.05733393405787
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.911
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.911
Total error diversity:				 0.509
Error (vector) diversity:			 0.513
Behavioral diversity:				 0.516
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 149487659
--- Timings ---
Current time: 1529616201355 milliseconds
Total Time:         271.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        92.4 seconds, 34.0%
Fitness Testing:    141.2 seconds, 52.0%
Report:              38.1 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 191.522211088 
Correct output: 71.9246550776  | Program output: 71.9246550776 
Correct output: -71.7136417398 | Program output: -71.7136417398
Correct output: -86.3636978789 | Program output: -86.3636978789
Correct output: -175.789814475 | Program output: -175.789814475
Correct output: -67.4831289413 | Program output: -67.4831289413
Correct output: -23.3513071934 | Program output: -23.3513071934
Correct output: -123.1447619871 | Program output: -123.1447619871
Correct output: 24.0076171492  | Program output: 24.0076171492 
Correct output: -50.6702678178 | Program output: -50.6702678178
Correct output: -128.7993219642 | Program output: -128.7993219642
Correct output: 41.7575748041  | Program output: 41.7575748041 
Correct output: 173.057045519  | Program output: 173.057045519 
Correct output: -110.0264496737 | Program output: -110.0264496737
Correct output: 11.9743638411  | Program output: 11.9743638411 
Correct output: -2.4287759947  | Program output: -2.4287759947 
Correct output: -60.8453890801 | Program output: -60.8453890801
Correct output: -119.1994005588 | Program output: -119.1994005588
Correct output: -1.7396856728  | Program output: -1.7396856728 
Correct output: 51.2300489273  | Program output: 51.2300489273 
Correct output: 185.9904753477 | Program output: 185.9904753477
Correct output: 42.4470677171  | Program output: 42.4470677171 
Correct output: 53.3134494099  | Program output: 53.3134494099 
Correct output: -33.8727861409 | Program output: -33.8727861409
Correct output: 127.8115346332 | Program output: 127.8115346332
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_pop} {:instruction integer_mult} {:instruction integer_flush} {:instruction float_tan} {:instruction float_flush} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_pop} {:instruction in2} {:instruction integer_dup} {:instruction integer_max} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_sub} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_30} {:instruction float_dup_items} {:instruction float_cos} {:instruction tag_integer_147} {:instruction float_inc} {:instruction float_cos} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction float_sin} {:instruction float_sin} {:instruction float_tan} {:instruction print_integer} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction integer_flush} {:instruction float_sin} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction integer_mod} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction float_sin} {:instruction print_integer} {:instruction float_sin} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_pop} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_add} {:instruction float_min} {:instruction integer_shove} {:instruction float_frominteger} {:instruction integer_sub} {:instruction integer_div} {:instruction float_stackdepth} {:instruction float_dec} {:instruction print_float} {:instruction in2} {:instruction integer_max} {:instruction integer_max} {:instruction integer_shove} {:instruction float_tan} {:instruction integer_shove} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_yank} {:instruction integer_div} {:instruction float_flush} {:instruction float_flush} {:instruction integer_div} {:instruction float_flush} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_mod} {:instruction integer_flush} {:instruction float_frominteger} {:instruction integer_div})
Best program: (integer_yankdup float_rot integer_pop integer_mult integer_flush float_tan float_flush float_flush integer_pop integer_pop in2 integer_dup integer_max integer_inc integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos tag_integer_30 float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_pop integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec print_float in2 integer_max integer_max integer_shove float_tan integer_shove integer_mod integer_flush float_yank integer_div float_flush float_flush integer_div float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 107
Size: 108
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 4276.717754099999
Median total errors in population: 244.44165
Error averages by case: (166.03287240000026 5.984 136.96895880000014 6.042 174.15150370000012 5.997 173.02211260000007 6.034 185.25462049999987 5.698 171.61696790000013 5.936 168.50466759999983 5.337 177.71559480000016 5.804 149.75893330000014 5.943 172.34805269999998 5.35 179.69104880000037 6.499 153.37127480000004 6.621 163.4508084000002 5.744 178.64629180000014 5.772 150.5428758999998 6.551 167.7266956999995 5.475 172.14009949999996 5.584 176.8882370000003 6.433 154.91452160000026 5.393 160.1555064 6.08 165.14753080000017 5.712 162.45779719999996 6.221 143.9006895 5.851 168.0817125000001 5.574 156.9073799 5.686)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 116.19
Average program size in population (points): 117.19
Average percent parens in population: 0.009
Minimum age in population: 91.61096430503436
Maximum age in population: 95.4171343173603
Average age in population: 93.46690549985532
Median age in population: 93.47909966441343
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.931
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.931
Total error diversity:				 0.319
Error (vector) diversity:			 0.321
Behavioral diversity:				 0.322
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 152403559
--- Timings ---
Current time: 1529616205718 milliseconds
Total Time:         276.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        93.7 seconds, 33.9%
Fitness Testing:    143.7 seconds, 52.0%
Report:              38.7 seconds, 14.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 65
Successful program: (integer_yankdup float_rot integer_pop integer_mult integer_flush float_tan float_flush float_flush integer_pop integer_pop in2 integer_dup integer_max integer_inc integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos tag_integer_30 float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_pop integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec print_float in2 integer_max integer_max integer_shove float_tan integer_shove integer_mod integer_flush float_yank integer_div float_flush float_flush integer_div float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 108


Auto-simplifying with starting size: 108
step: 0
program: (integer_yankdup float_rot integer_pop integer_mult integer_flush float_tan float_flush float_flush integer_pop integer_pop in2 integer_dup integer_max integer_inc integer_shove float_sub float_frominteger integer_stackdepth in1 integer_stackdepth float_dup_items float_cos tag_integer_30 float_dup_items float_cos tag_integer_147 float_inc float_cos float_sin float_sin print_integer float_sin print_integer float_sin float_sin float_sin float_tan float_sin float_sin float_tan print_integer float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin integer_flush float_sin float_sin float_yankdup float_sin print_integer float_sin float_sin float_sin print_integer float_sin float_sin print_integer float_sin integer_mod float_sin float_sin float_sin float_sin print_integer float_sin print_integer float_yankdup float_inc float_frominteger float_pop integer_yank integer_swap float_add float_min integer_shove float_frominteger integer_sub integer_div float_stackdepth float_dec print_float in2 integer_max integer_max integer_shove float_tan integer_shove integer_mod integer_flush float_yank integer_div float_flush float_flush integer_div float_flush float_dup_items integer_yank integer_mod integer_flush float_frominteger integer_div)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 108

step: 500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: 191.522211088  | Program output: 191.522211088 
Correct output: 71.9246550776  | Program output: 71.9246550776 
Correct output: -71.7136417398 | Program output: -71.7136417398
Correct output: -86.3636978789 | Program output: -86.3636978789
Correct output: -175.789814475 | Program output: -175.789814475
Correct output: -67.4831289413 | Program output: -67.4831289413
Correct output: -23.3513071934 | Program output: -23.3513071934
Correct output: -123.1447619871 | Program output: -123.1447619871
Correct output: 24.0076171492  | Program output: 24.0076171492 
Correct output: -50.6702678178 | Program output: -50.6702678178
Correct output: -128.7993219642 | Program output: -128.7993219642
Correct output: 41.7575748041  | Program output: 41.7575748041 
Correct output: 173.057045519  | Program output: 173.057045519 
Correct output: -110.0264496737 | Program output: -110.0264496737
Correct output: 11.9743638411  | Program output: 11.9743638411 
Correct output: -2.4287759947  | Program output: -2.4287759947 
Correct output: -60.8453890801 | Program output: -60.8453890801
Correct output: -119.1994005588 | Program output: -119.1994005588
Correct output: -1.7396856728  | Program output: -1.7396856728 
Correct output: 51.2300489273  | Program output: 51.2300489273 
Correct output: 185.9904753477 | Program output: 185.9904753477
Correct output: 42.4470677171  | Program output: 42.4470677171 
Correct output: 53.3134494099  | Program output: 53.3134494099 
Correct output: -33.8727861409 | Program output: -33.8727861409
Correct output: 127.8115346332 | Program output: 127.8115346332
;;******************************
