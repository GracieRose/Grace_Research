Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[83.62029152814497 -75] 8.620291528144975]
Train Case:   1 | Input/Output: [[-90.88404301719235 -7] -97.88404301719235]
Train Case:   2 | Input/Output: [[-80.59638048064633 81] 0.40361951935366847]
Train Case:   3 | Input/Output: [[-46.01470586955527 47] 0.9852941304447285]
Train Case:   4 | Input/Output: [[11.935402215912518 -91] -79.06459778408748]
Train Case:   5 | Input/Output: [[-39.7521921729139 -91] -130.7521921729139]
Train Case:   6 | Input/Output: [[-55.74738346651098 -42] -97.74738346651098]
Train Case:   7 | Input/Output: [[-22.60275843539847 5] -17.60275843539847]
Train Case:   8 | Input/Output: [[-87.53685086461356 59] -28.536850864613555]
Train Case:   9 | Input/Output: [[44.30173666345678 72] 116.30173666345678]
Train Case:  10 | Input/Output: [[-29.126621299846136 -30] -59.126621299846136]
Train Case:  11 | Input/Output: [[60.080622003741865 63] 123.08062200374187]
Train Case:  12 | Input/Output: [[-5.012535179551563 -9] -14.012535179551563]
Train Case:  13 | Input/Output: [[-67.77382898310401 1] -66.77382898310401]
Train Case:  14 | Input/Output: [[-50.895117451008986 83] 32.104882548991014]
Train Case:  15 | Input/Output: [[-31.860911137919672 -67] -98.86091113791967]
Train Case:  16 | Input/Output: [[-64.91532500547899 98] 33.08467499452101]
Train Case:  17 | Input/Output: [[-85.71792854436218 36] -49.71792854436218]
Train Case:  18 | Input/Output: [[14.021032836192958 95] 109.02103283619296]
Train Case:  19 | Input/Output: [[-57.11699164645283 30] -27.11699164645283]
Train Case:  20 | Input/Output: [[-27.6656770862201 -78] -105.6656770862201]
Train Case:  21 | Input/Output: [[22.364624872556234 48] 70.36462487255623]
Train Case:  22 | Input/Output: [[72.492851320321 61] 133.492851320321]
Train Case:  23 | Input/Output: [[-53.03999675355491 -8] -61.03999675355491]
Train Case:  24 | Input/Output: [[7.965366116747845 -73] -65.03463388325216]
Test Case:   0 | Input/Output: [[-25.97275871728442 -86] -111.97275871728442]
Test Case:   1 | Input/Output: [[36.72061036652886 48] 84.72061036652886]
Test Case:   2 | Input/Output: [[-92.95690138584493 -73] -165.95690138584493]
Test Case:   3 | Input/Output: [[-56.365330873197216 82] 25.634669126802784]
Test Case:   4 | Input/Output: [[6.947284757357991 77] 83.94728475735799]
Test Case:   5 | Input/Output: [[29.07535177567027 -45] -15.92464822432973]
Test Case:   6 | Input/Output: [[72.51359928254172 66] 138.51359928254172]
Test Case:   7 | Input/Output: [[-2.1468063082231907 -54] -56.14680630822319]
Test Case:   8 | Input/Output: [[-25.403844441221366 -92] -117.40384444122137]
Test Case:   9 | Input/Output: [[-94.45533928290808 67] -27.455339282908085]
Test Case:  10 | Input/Output: [[34.29911503256761 53] 87.29911503256761]
Test Case:  11 | Input/Output: [[26.567333505078366 -53] -26.432666494921634]
Test Case:  12 | Input/Output: [[-79.75750688252438 -14] -93.75750688252438]
Test Case:  13 | Input/Output: [[36.71281622639319 89] 125.71281622639319]
Test Case:  14 | Input/Output: [[-68.86021682884655 -3] -71.86021682884655]
Test Case:  15 | Input/Output: [[-83.00180212769992 48] -35.00180212769992]
Test Case:  16 | Input/Output: [[52.11086728126199 -98] -45.88913271873801]
Test Case:  17 | Input/Output: [[76.39875128116293 -53] 23.39875128116293]
Test Case:  18 | Input/Output: [[68.18925414705183 -40] 28.189254147051827]
Test Case:  19 | Input/Output: [[3.881867282375893 -40] -36.11813271762411]
Test Case:  20 | Input/Output: [[-76.06012197668906 -15] -91.06012197668906]
Test Case:  21 | Input/Output: [[-42.12371369991808 18] -24.123713699918078]
Test Case:  22 | Input/Output: [[-0.2865278702793006 -58] -58.2865278702793]
Test Case:  23 | Input/Output: [[67.67730439752086 68] 135.67730439752086]
Test Case:  24 | Input/Output: [[-19.363487193592093 89] 69.63651280640791]
Test Case:  25 | Input/Output: [[47.724929417495616 -73] -25.275070582504384]
Test Case:  26 | Input/Output: [[-59.95883275132865 -34] -93.95883275132866]
Test Case:  27 | Input/Output: [[-35.26442099232226 -20] -55.26442099232226]
Test Case:  28 | Input/Output: [[-14.313141954889929 37] 22.68685804511007]
Test Case:  29 | Input/Output: [[-17.258348497189502 -12] -29.258348497189502]
Test Case:  30 | Input/Output: [[-40.39838619261948 29] -11.398386192619483]
Test Case:  31 | Input/Output: [[-27.094241387339622 -90] -117.09424138733962]
Test Case:  32 | Input/Output: [[66.72883243253423 -53] 13.728832432534233]
Test Case:  33 | Input/Output: [[-55.51648813436066 53] -2.5164881343606567]
Test Case:  34 | Input/Output: [[38.80535122895449 48] 86.80535122895449]
Test Case:  35 | Input/Output: [[-56.119927659079984 14] -42.119927659079984]
Test Case:  36 | Input/Output: [[57.555234093260026 -65] -7.444765906739974]
Test Case:  37 | Input/Output: [[39.158198015660474 -36] 3.1581980156604743]
Test Case:  38 | Input/Output: [[-68.32939362159166 -74] -142.32939362159166]
Test Case:  39 | Input/Output: [[14.061407791262127 59] 73.06140779126213]
Test Case:  40 | Input/Output: [[98.23954384224245 66] 164.23954384224245]
Test Case:  41 | Input/Output: [[-72.07358699097308 -79] -151.07358699097307]
Test Case:  42 | Input/Output: [[54.07575329535615 -66] -11.92424670464385]
Test Case:  43 | Input/Output: [[34.77194970413743 -15] 19.771949704137427]
Test Case:  44 | Input/Output: [[-95.84431144173749 94] -1.8443114417374886]
Test Case:  45 | Input/Output: [[31.359018182680813 14] 45.35901818268081]
Test Case:  46 | Input/Output: [[28.37541131193683 90] 118.37541131193683]
Test Case:  47 | Input/Output: [[72.2853793600523 39] 111.2853793600523]
Test Case:  48 | Input/Output: [[18.95392264740208 91] 109.95392264740208]
Test Case:  49 | Input/Output: [[97.46266928255437 -94] 3.462669282554373]
Test Case:  50 | Input/Output: [[-60.188935765067654 -73] -133.18893576506764]
Test Case:  51 | Input/Output: [[72.07866594955675 51] 123.07866594955675]
Test Case:  52 | Input/Output: [[55.18038622428233 89] 144.18038622428233]
Test Case:  53 | Input/Output: [[35.96729305687779 92] 127.96729305687779]
Test Case:  54 | Input/Output: [[84.56285523944771 -31] 53.562855239447714]
Test Case:  55 | Input/Output: [[83.63964415080903 22] 105.63964415080903]
Test Case:  56 | Input/Output: [[60.07188462049214 79] 139.07188462049214]
Test Case:  57 | Input/Output: [[-61.84360528227235 -79] -140.84360528227234]
Test Case:  58 | Input/Output: [[97.26453153142376 -60] 37.264531531423756]
Test Case:  59 | Input/Output: [[2.502392061598968 -48] -45.49760793840103]
Test Case:  60 | Input/Output: [[13.988368168285348 -20] -6.011631831714652]
Test Case:  61 | Input/Output: [[61.56713527357678 0] 61.56713527357678]
Test Case:  62 | Input/Output: [[-90.63271316412448 -36] -126.63271316412448]
Test Case:  63 | Input/Output: [[-44.0306012590328 -47] -91.0306012590328]
Test Case:  64 | Input/Output: [[-46.226027414512515 -69] -115.22602741451252]
Test Case:  65 | Input/Output: [[-38.339015671807864 57] 18.660984328192136]
Test Case:  66 | Input/Output: [[78.5670711721809 -59] 19.567071172180903]
Test Case:  67 | Input/Output: [[64.34122912953566 11] 75.34122912953566]
Test Case:  68 | Input/Output: [[64.57795616224098 -75] -10.42204383775902]
Test Case:  69 | Input/Output: [[19.382663740800183 -84] -64.61733625919982]
Test Case:  70 | Input/Output: [[79.70269416767911 -99] -19.297305832320887]
Test Case:  71 | Input/Output: [[50.924969226462025 62] 112.92496922646203]
Test Case:  72 | Input/Output: [[10.71815451069699 -13] -2.2818454893030093]
Test Case:  73 | Input/Output: [[-98.33029152871002 56] -42.33029152871002]
Test Case:  74 | Input/Output: [[93.01164882743163 -91] 2.011648827431628]
Test Case:  75 | Input/Output: [[-94.24819694130149 -78] -172.2481969413015]
Test Case:  76 | Input/Output: [[87.82707627833219 -5] 82.82707627833219]
Test Case:  77 | Input/Output: [[78.38798537192343 -9] 69.38798537192343]
Test Case:  78 | Input/Output: [[73.66430132756244 -45] 28.66430132756244]
Test Case:  79 | Input/Output: [[48.797647472052375 -11] 37.797647472052375]
Test Case:  80 | Input/Output: [[87.0452363059122 41] 128.0452363059122]
Test Case:  81 | Input/Output: [[-31.731974142308488 18] -13.731974142308488]
Test Case:  82 | Input/Output: [[81.83443129239964 55] 136.83443129239964]
Test Case:  83 | Input/Output: [[52.28300185552234 -47] 5.283001855522343]
Test Case:  84 | Input/Output: [[40.49229333342012 -78] -37.50770666657988]
Test Case:  85 | Input/Output: [[-73.70874556712735 59] -14.708745567127352]
Test Case:  86 | Input/Output: [[-65.70919162147695 -76] -141.70919162147695]
Test Case:  87 | Input/Output: [[93.89770178446412 -100] -6.102298215535882]
Test Case:  88 | Input/Output: [[-72.69498361905457 50] -22.694983619054568]
Test Case:  89 | Input/Output: [[-63.02504480623574 82] 18.97495519376426]
Test Case:  90 | Input/Output: [[-58.469379387603595 20] -38.469379387603595]
Test Case:  91 | Input/Output: [[72.83000196500168 -7] 65.83000196500168]
Test Case:  92 | Input/Output: [[-45.16282101305209 -34] -79.16282101305208]
Test Case:  93 | Input/Output: [[81.76493652339539 -88] -6.2350634766046085]
Test Case:  94 | Input/Output: [[13.300423684901801 37] 50.3004236849018]
Test Case:  95 | Input/Output: [[-36.90976663962404 -79] -115.90976663962404]
Test Case:  96 | Input/Output: [[10.82515936457122 -59] -48.17484063542878]
Test Case:  97 | Input/Output: [[42.792757758559986 96] 138.79275775856]
Test Case:  98 | Input/Output: [[61.325607977535554 95] 156.32560797753555]
Test Case:  99 | Input/Output: [[98.05656514442623 97] 195.05656514442623]
Test Case: 100 | Input/Output: [[-20.582718750179296 -78] -98.5827187501793]
Test Case: 101 | Input/Output: [[-91.91829168454584 81] -10.918291684545835]
Test Case: 102 | Input/Output: [[20.748987334726607 -2] 18.748987334726607]
Test Case: 103 | Input/Output: [[-56.82834764221483 -40] -96.82834764221482]
Test Case: 104 | Input/Output: [[37.03029820535397 7] 44.03029820535397]
Test Case: 105 | Input/Output: [[-4.881956748905878 -2] -6.881956748905878]
Test Case: 106 | Input/Output: [[-4.713245636441272 35] 30.286754363558728]
Test Case: 107 | Input/Output: [[-38.227110824313556 -22] -60.227110824313556]
Test Case: 108 | Input/Output: [[19.840382295480396 -76] -56.159617704519604]
Test Case: 109 | Input/Output: [[26.916964933986947 63] 89.91696493398695]
Test Case: 110 | Input/Output: [[59.6762710607876 47] 106.6762710607876]
Test Case: 111 | Input/Output: [[53.001753146110474 21] 74.00175314611047]
Test Case: 112 | Input/Output: [[-94.87689969813951 -10] -104.87689969813951]
Test Case: 113 | Input/Output: [[-42.76645838142228 56] 13.233541618577718]
Test Case: 114 | Input/Output: [[62.59139964577233 44] 106.59139964577233]
Test Case: 115 | Input/Output: [[-52.471470948946134 38] -14.471470948946134]
Test Case: 116 | Input/Output: [[36.10255032463584 -37] -0.8974496753641574]
Test Case: 117 | Input/Output: [[-97.79855605012746 -14] -111.79855605012746]
Test Case: 118 | Input/Output: [[57.16045762212602 -35] 22.160457622126017]
Test Case: 119 | Input/Output: [[61.06038217184516 -84] -22.939617828154837]
Test Case: 120 | Input/Output: [[-89.05615367495754 40] -49.05615367495754]
Test Case: 121 | Input/Output: [[35.846766374624735 18] 53.846766374624735]
Test Case: 122 | Input/Output: [[-87.92936854226932 84] -3.929368542269316]
Test Case: 123 | Input/Output: [[-13.36387589958305 34] 20.63612410041695]
Test Case: 124 | Input/Output: [[51.215692910954715 19] 70.21569291095471]
Test Case: 125 | Input/Output: [[-71.72190331514412 93] 21.278096684855882]
Test Case: 126 | Input/Output: [[-59.795489020559714 -77] -136.79548902055973]
Test Case: 127 | Input/Output: [[-86.82954942565537 51] -35.82954942565537]
Test Case: 128 | Input/Output: [[-98.92759150475095 -27] -125.92759150475095]
Test Case: 129 | Input/Output: [[13.988879863895434 -75] -61.011120136104566]
Test Case: 130 | Input/Output: [[71.53582851987449 -88] -16.464171480125515]
Test Case: 131 | Input/Output: [[-46.08638698180203 65] 18.91361301819797]
Test Case: 132 | Input/Output: [[66.08129741666701 -18] 48.08129741666701]
Test Case: 133 | Input/Output: [[87.76438449482282 -40] 47.76438449482282]
Test Case: 134 | Input/Output: [[64.4055271732413 -22] 42.405527173241296]
Test Case: 135 | Input/Output: [[35.43967771513192 -97] -61.56032228486808]
Test Case: 136 | Input/Output: [[-83.12303461284037 90] 6.876965387159629]
Test Case: 137 | Input/Output: [[21.20421885891855 -46] -24.79578114108145]
Test Case: 138 | Input/Output: [[17.02420187734519 -11] 6.024201877345192]
Test Case: 139 | Input/Output: [[-40.28010564326716 -10] -50.28010564326716]
Test Case: 140 | Input/Output: [[48.33463058079923 8] 56.33463058079923]
Test Case: 141 | Input/Output: [[0.856836235368803 1] 1.856836235368803]
Test Case: 142 | Input/Output: [[-87.2058811935305 50] -37.2058811935305]
Test Case: 143 | Input/Output: [[51.309459635366295 -23] 28.309459635366295]
Test Case: 144 | Input/Output: [[92.14274114165192 44] 136.14274114165192]
Test Case: 145 | Input/Output: [[-9.779537699073984 96] 86.22046230092602]
Test Case: 146 | Input/Output: [[-49.30314551215638 -20] -69.30314551215638]
Test Case: 147 | Input/Output: [[47.712537515288034 -16] 31.712537515288034]
Test Case: 148 | Input/Output: [[73.97273755408924 44] 117.97273755408924]
Test Case: 149 | Input/Output: [[74.39600996366246 59] 133.39600996366246]
Test Case: 150 | Input/Output: [[-18.69898863088622 -22] -40.69898863088622]
Test Case: 151 | Input/Output: [[61.20194599778 4] 65.20194599778]
Test Case: 152 | Input/Output: [[-55.355532386002146 -54] -109.35553238600215]
Test Case: 153 | Input/Output: [[-66.6493668896937 -38] -104.6493668896937]
Test Case: 154 | Input/Output: [[-84.05971460657 63] -21.059714606569997]
Test Case: 155 | Input/Output: [[31.585584833180917 45] 76.58558483318092]
Test Case: 156 | Input/Output: [[-44.88727391028788 40] -4.887273910287881]
Test Case: 157 | Input/Output: [[3.0665550823949275 -74] -70.93344491760507]
Test Case: 158 | Input/Output: [[-39.205124854906835 60] 20.794875145093165]
Test Case: 159 | Input/Output: [[-30.195749163067973 25] -5.195749163067973]
Test Case: 160 | Input/Output: [[-93.29416452738857 44] -49.294164527388574]
Test Case: 161 | Input/Output: [[50.42682163982482 -22] 28.426821639824823]
Test Case: 162 | Input/Output: [[46.567489823336786 43] 89.56748982333679]
Test Case: 163 | Input/Output: [[-90.83657324839115 85] -5.836573248391147]
Test Case: 164 | Input/Output: [[-36.87331922217931 -56] -92.8733192221793]
Test Case: 165 | Input/Output: [[78.12103326515057 79] 157.12103326515057]
Test Case: 166 | Input/Output: [[-41.38021701257208 76] 34.61978298742792]
Test Case: 167 | Input/Output: [[97.49641484344991 56] 153.4964148434499]
Test Case: 168 | Input/Output: [[1.678230541544366 -79] -77.32176945845563]
Test Case: 169 | Input/Output: [[-14.18238133249244 67] 52.81761866750756]
Test Case: 170 | Input/Output: [[11.351347742037092 95] 106.35134774203709]
Test Case: 171 | Input/Output: [[86.68588531055147 5] 91.68588531055147]
Test Case: 172 | Input/Output: [[-67.55242986579816 5] -62.55242986579816]
Test Case: 173 | Input/Output: [[-69.93890300885485 -47] -116.93890300885485]
Test Case: 174 | Input/Output: [[18.31776948893355 53] 71.31776948893355]
Test Case: 175 | Input/Output: [[41.50922280196713 -88] -46.49077719803287]
Test Case: 176 | Input/Output: [[-4.1921670971353535 3] -1.1921670971353535]
Test Case: 177 | Input/Output: [[26.450612544334277 20] 46.45061254433428]
Test Case: 178 | Input/Output: [[-11.669999928473061 -74] -85.66999992847306]
Test Case: 179 | Input/Output: [[-55.730860280237906 -21] -76.7308602802379]
Test Case: 180 | Input/Output: [[43.286629804406004 -1] 42.286629804406004]
Test Case: 181 | Input/Output: [[-25.764017372661712 26] 0.2359826273382879]
Test Case: 182 | Input/Output: [[-54.58148478855034 -43] -97.58148478855034]
Test Case: 183 | Input/Output: [[-25.446264376067518 99] 73.55373562393248]
Test Case: 184 | Input/Output: [[-26.08452000575201 -69] -95.08452000575201]
Test Case: 185 | Input/Output: [[60.47591057273027 -33] 27.47591057273027]
Test Case: 186 | Input/Output: [[10.308501819233953 52] 62.30850181923395]
Test Case: 187 | Input/Output: [[-25.630242120374703 98] 72.3697578796253]
Test Case: 188 | Input/Output: [[-23.88478628241701 -44] -67.88478628241701]
Test Case: 189 | Input/Output: [[84.39658014825 -17] 67.39658014825]
Test Case: 190 | Input/Output: [[59.282352743596505 5] 64.2823527435965]
Test Case: 191 | Input/Output: [[-84.40778956772274 -94] -178.40778956772274]
Test Case: 192 | Input/Output: [[-37.70248776835308 95] 57.29751223164692]
Test Case: 193 | Input/Output: [[-72.76717811421508 -10] -82.76717811421508]
Test Case: 194 | Input/Output: [[17.8194168498311 87] 104.8194168498311]
Test Case: 195 | Input/Output: [[90.12131895256533 -16] 74.12131895256533]
Test Case: 196 | Input/Output: [[76.00547750625194 53] 129.00547750625194]
Test Case: 197 | Input/Output: [[35.81575167538645 100] 135.81575167538645]
Test Case: 198 | Input/Output: [[63.739958090078744 73] 136.73995809007874]
Test Case: 199 | Input/Output: [[-54.25686853584186 53] -1.2568685358418605]
Test Case: 200 | Input/Output: [[-34.21561499235348 64] 29.78438500764652]
Test Case: 201 | Input/Output: [[47.78661083330147 -96] -48.21338916669853]
Test Case: 202 | Input/Output: [[0.42977877309493806 38] 38.42977877309494]
Test Case: 203 | Input/Output: [[-56.47438225462766 84] 27.525617745372337]
Test Case: 204 | Input/Output: [[-85.29055830370508 -22] -107.29055830370508]
Test Case: 205 | Input/Output: [[-42.581245204142014 29] -13.581245204142014]
Test Case: 206 | Input/Output: [[38.38553476803179 -33] 5.385534768031789]
Test Case: 207 | Input/Output: [[84.72137069443392 93] 177.72137069443392]
Test Case: 208 | Input/Output: [[97.99695576273365 70] 167.99695576273365]
Test Case: 209 | Input/Output: [[-16.93291953845116 -52] -68.93291953845116]
Test Case: 210 | Input/Output: [[-61.398476829749505 -46] -107.39847682974951]
Test Case: 211 | Input/Output: [[24.181519776683842 80] 104.18151977668384]
Test Case: 212 | Input/Output: [[-49.520600583488815 -28] -77.52060058348881]
Test Case: 213 | Input/Output: [[24.8824741281138 12] 36.8824741281138]
Test Case: 214 | Input/Output: [[-3.163150956261916 -12] -15.163150956261916]
Test Case: 215 | Input/Output: [[-80.50769231089072 -75] -155.50769231089072]
Test Case: 216 | Input/Output: [[71.46371179110176 61] 132.46371179110176]
Test Case: 217 | Input/Output: [[-21.100116333977283 -50] -71.10011633397728]
Test Case: 218 | Input/Output: [[2.7380572821845703 9] 11.73805728218457]
Test Case: 219 | Input/Output: [[98.52232072422981 -79] 19.522320724229814]
Test Case: 220 | Input/Output: [[-28.235811520032556 31] 2.7641884799674443]
Test Case: 221 | Input/Output: [[18.30840681741701 75] 93.30840681741701]
Test Case: 222 | Input/Output: [[14.739566054951169 -90] -75.26043394504883]
Test Case: 223 | Input/Output: [[-71.78573447578188 -28] -99.78573447578188]
Test Case: 224 | Input/Output: [[67.75480805666129 -89] -21.24519194333871]
Test Case: 225 | Input/Output: [[66.6111653814014 40] 106.6111653814014]
Test Case: 226 | Input/Output: [[-1.3449776575731107 54] 52.65502234242689]
Test Case: 227 | Input/Output: [[-0.6762843973536832 -58] -58.67628439735368]
Test Case: 228 | Input/Output: [[32.176164554873 88] 120.176164554873]
Test Case: 229 | Input/Output: [[89.22699045913248 -70] 19.22699045913248]
Test Case: 230 | Input/Output: [[96.7321125655906 -60] 36.7321125655906]
Test Case: 231 | Input/Output: [[-38.049836749733835 -9] -47.049836749733835]
Test Case: 232 | Input/Output: [[35.75053867817519 89] 124.75053867817519]
Test Case: 233 | Input/Output: [[-56.775673386399525 81] 24.224326613600475]
Test Case: 234 | Input/Output: [[97.57352545463621 -61] 36.57352545463621]
Test Case: 235 | Input/Output: [[69.02419032099485 -51] 18.024190320994848]
Test Case: 236 | Input/Output: [[71.0862481609789 26] 97.0862481609789]
Test Case: 237 | Input/Output: [[-25.484834012575135 20] -5.484834012575135]
Test Case: 238 | Input/Output: [[-55.766359629004825 43] -12.766359629004825]
Test Case: 239 | Input/Output: [[-2.860864086033189 14] 11.139135913966811]
Test Case: 240 | Input/Output: [[97.20337931282111 -67] 30.203379312821113]
Test Case: 241 | Input/Output: [[-7.289314590567457 90] 82.71068540943254]
Test Case: 242 | Input/Output: [[74.2565563919311 31] 105.2565563919311]
Test Case: 243 | Input/Output: [[-43.385347827944656 -80] -123.38534782794466]
Test Case: 244 | Input/Output: [[-95.03399760328828 60] -35.033997603288284]
Test Case: 245 | Input/Output: [[-33.25200679957638 -12] -45.25200679957638]
Test Case: 246 | Input/Output: [[-21.916445765533354 28] 6.0835542344666464]
Test Case: 247 | Input/Output: [[5.603370372305221 -1] 4.603370372305221]
Test Case: 248 | Input/Output: [[-10.68394658991916 -15] -25.68394658991916]
Test Case: 249 | Input/Output: [[44.687680382819536 -46] -1.3123196171804636]
Test Case: 250 | Input/Output: [[-20.096035163106933 81] 60.90396483689307]
Test Case: 251 | Input/Output: [[85.42560732156446 10] 95.42560732156446]
Test Case: 252 | Input/Output: [[-41.78064080476616 38] -3.7806408047661577]
Test Case: 253 | Input/Output: [[27.641593796593583 -36] -8.358406203406417]
Test Case: 254 | Input/Output: [[64.28970083322397 -42] 22.289700833223975]
Test Case: 255 | Input/Output: [[60.63081688076443 -47] 13.630816880764428]
Test Case: 256 | Input/Output: [[-55.165041833040384 4] -51.165041833040384]
Test Case: 257 | Input/Output: [[-1.7676640667759926 -74] -75.76766406677599]
Test Case: 258 | Input/Output: [[11.598927829538283 -11] 0.5989278295382832]
Test Case: 259 | Input/Output: [[0.8204604779541285 16] 16.82046047795413]
Test Case: 260 | Input/Output: [[-83.67880010118057 89] 5.32119989881943]
Test Case: 261 | Input/Output: [[-39.64306623091576 77] 37.35693376908424]
Test Case: 262 | Input/Output: [[98.86185557629864 39] 137.86185557629864]
Test Case: 263 | Input/Output: [[37.41543990654432 90] 127.41543990654432]
Test Case: 264 | Input/Output: [[-37.13118907820212 67] 29.86881092179788]
Test Case: 265 | Input/Output: [[-20.65736862932357 31] 10.342631370676429]
Test Case: 266 | Input/Output: [[5.227826664744882 22] 27.22782666474488]
Test Case: 267 | Input/Output: [[-90.72408822270611 -34] -124.72408822270611]
Test Case: 268 | Input/Output: [[-64.00047903760236 5] -59.00047903760236]
Test Case: 269 | Input/Output: [[96.91718274470708 94] 190.91718274470708]
Test Case: 270 | Input/Output: [[-10.421668664420864 -57] -67.42166866442086]
Test Case: 271 | Input/Output: [[-86.36759332348691 -18] -104.36759332348691]
Test Case: 272 | Input/Output: [[-66.44389935065318 87] 20.556100649346817]
Test Case: 273 | Input/Output: [[10.695378080181484 -96] -85.30462191981852]
Test Case: 274 | Input/Output: [[19.520449915937334 97] 116.52044991593733]
Test Case: 275 | Input/Output: [[-31.78797752584981 90] 58.21202247415019]
Test Case: 276 | Input/Output: [[77.57889759425413 67] 144.57889759425413]
Test Case: 277 | Input/Output: [[96.22307260233367 -99] -2.776927397666327]
Test Case: 278 | Input/Output: [[-65.80933733327436 12] -53.80933733327436]
Test Case: 279 | Input/Output: [[59.74893128555695 39] 98.74893128555695]
Test Case: 280 | Input/Output: [[35.316294910715214 28] 63.316294910715214]
Test Case: 281 | Input/Output: [[90.88890025096643 -52] 38.88890025096643]
Test Case: 282 | Input/Output: [[-81.5574362904172 -76] -157.5574362904172]
Test Case: 283 | Input/Output: [[16.141264618046037 -57] -40.85873538195396]
Test Case: 284 | Input/Output: [[-42.100024358975574 94] 51.899975641024426]
Test Case: 285 | Input/Output: [[-69.06134662342032 99] 29.93865337657968]
Test Case: 286 | Input/Output: [[-84.68727927668152 -64] -148.68727927668152]
Test Case: 287 | Input/Output: [[74.03419076371964 63] 137.03419076371964]
Test Case: 288 | Input/Output: [[66.17435923200222 58] 124.17435923200222]
Test Case: 289 | Input/Output: [[-58.199458550568785 91] 32.800541449431215]
Test Case: 290 | Input/Output: [[27.99490882452578 27] 54.99490882452578]
Test Case: 291 | Input/Output: [[65.46704286649984 75] 140.46704286649984]
Test Case: 292 | Input/Output: [[65.2264948548322 -15] 50.2264948548322]
Test Case: 293 | Input/Output: [[54.8302750262599 22] 76.8302750262599]
Test Case: 294 | Input/Output: [[77.96820523582912 70] 147.96820523582912]
Test Case: 295 | Input/Output: [[-91.3844078859992 2] -89.3844078859992]
Test Case: 296 | Input/Output: [[-98.98308892555947 3] -95.98308892555947]
Test Case: 297 | Input/Output: [[14.671516005209156 -38] -23.328483994790844]
Test Case: 298 | Input/Output: [[81.55919775621177 -49] 32.55919775621177]
Test Case: 299 | Input/Output: [[-89.44775218574694 75] -14.447752185746936]
Test Case: 300 | Input/Output: [[66.94313558501449 -26] 40.94313558501449]
Test Case: 301 | Input/Output: [[19.402018570097155 -99] -79.59798142990284]
Test Case: 302 | Input/Output: [[28.635367144010615 -100] -71.36463285598938]
Test Case: 303 | Input/Output: [[-99.08583192447816 -1] -100.08583192447816]
Test Case: 304 | Input/Output: [[31.38934240818668 -64] -32.61065759181332]
Test Case: 305 | Input/Output: [[-60.79250159522902 -24] -84.79250159522903]
Test Case: 306 | Input/Output: [[61.092651773127386 68] 129.0926517731274]
Test Case: 307 | Input/Output: [[7.528589847585195 -67] -59.471410152414805]
Test Case: 308 | Input/Output: [[-39.93018048504244 -42] -81.93018048504244]
Test Case: 309 | Input/Output: [[-99.17041014181365 58] -41.17041014181365]
Test Case: 310 | Input/Output: [[49.573461709835556 -73] -23.426538290164444]
Test Case: 311 | Input/Output: [[46.88127777102193 -68] -21.118722228978072]
Test Case: 312 | Input/Output: [[41.177154084082076 74] 115.17715408408208]
Test Case: 313 | Input/Output: [[-84.55924307854514 67] -17.559243078545137]
Test Case: 314 | Input/Output: [[77.37614173123407 61] 138.37614173123407]
Test Case: 315 | Input/Output: [[-36.60428251128292 -57] -93.60428251128292]
Test Case: 316 | Input/Output: [[-87.81911532668691 61] -26.819115326686912]
Test Case: 317 | Input/Output: [[66.23362592953436 -40] 26.233625929534355]
Test Case: 318 | Input/Output: [[-81.73415521554388 -51] -132.73415521554386]
Test Case: 319 | Input/Output: [[5.789520837242819 -12] -6.210479162757181]
Test Case: 320 | Input/Output: [[44.60989706330594 0] 44.60989706330594]
Test Case: 321 | Input/Output: [[-35.04814901737747 15] -20.04814901737747]
Test Case: 322 | Input/Output: [[87.55409764760168 80] 167.55409764760168]
Test Case: 323 | Input/Output: [[83.51816877140186 -71] 12.51816877140186]
Test Case: 324 | Input/Output: [[33.67099719672407 59] 92.67099719672407]
Test Case: 325 | Input/Output: [[83.99173746277259 -4] 79.99173746277259]
Test Case: 326 | Input/Output: [[13.315339325247109 -73] -59.68466067475289]
Test Case: 327 | Input/Output: [[67.27965250206049 -73] -5.720347497939514]
Test Case: 328 | Input/Output: [[62.55952442946574 55] 117.55952442946574]
Test Case: 329 | Input/Output: [[7.459044755661594 -69] -61.540955244338406]
Test Case: 330 | Input/Output: [[-93.49227608575808 -51] -144.49227608575808]
Test Case: 331 | Input/Output: [[28.328779404543695 -67] -38.671220595456305]
Test Case: 332 | Input/Output: [[35.37639976396429 -25] 10.376399763964287]
Test Case: 333 | Input/Output: [[19.911287282215028 -24] -4.088712717784972]
Test Case: 334 | Input/Output: [[-73.36274078753384 -66] -139.36274078753382]
Test Case: 335 | Input/Output: [[-83.60756483789547 94] 10.392435162104533]
Test Case: 336 | Input/Output: [[2.1422276979795782 59] 61.14222769797958]
Test Case: 337 | Input/Output: [[-43.97590375190552 40] -3.97590375190552]
Test Case: 338 | Input/Output: [[34.518218496645545 37] 71.51821849664555]
Test Case: 339 | Input/Output: [[81.39065595023916 -58] 23.390655950239164]
Test Case: 340 | Input/Output: [[-87.59672152191995 -63] -150.59672152191996]
Test Case: 341 | Input/Output: [[73.73363867258135 -37] 36.73363867258135]
Test Case: 342 | Input/Output: [[-23.6648544283792 69] 45.3351455716208]
Test Case: 343 | Input/Output: [[-42.86331849424576 61] 18.13668150575424]
Test Case: 344 | Input/Output: [[-95.99756598512197 38] -57.997565985121966]
Test Case: 345 | Input/Output: [[-82.43577850865091 91] 8.564221491349088]
Test Case: 346 | Input/Output: [[32.81234882410479 61] 93.81234882410479]
Test Case: 347 | Input/Output: [[-6.612133350913396 59] 52.387866649086604]
Test Case: 348 | Input/Output: [[-71.13919644601074 22] -49.13919644601074]
Test Case: 349 | Input/Output: [[62.271289106688585 -15] 47.271289106688585]
Test Case: 350 | Input/Output: [[73.27797515481655 51] 124.27797515481655]
Test Case: 351 | Input/Output: [[-35.562381486806174 -50] -85.56238148680617]
Test Case: 352 | Input/Output: [[55.389565859101026 -72] -16.610434140898974]
Test Case: 353 | Input/Output: [[98.67547627484862 9] 107.67547627484862]
Test Case: 354 | Input/Output: [[-18.822734574243 -14] -32.822734574243]
Test Case: 355 | Input/Output: [[-75.54989604856577 6] -69.54989604856577]
Test Case: 356 | Input/Output: [[16.511552402117673 18] 34.51155240211767]
Test Case: 357 | Input/Output: [[-20.77972859454158 -38] -58.77972859454158]
Test Case: 358 | Input/Output: [[49.64284765961685 -54] -4.357152340383152]
Test Case: 359 | Input/Output: [[-59.13219618710694 -15] -74.13219618710694]
Test Case: 360 | Input/Output: [[78.27982085098444 -24] 54.279820850984436]
Test Case: 361 | Input/Output: [[-62.642968285959874 -29] -91.64296828595988]
Test Case: 362 | Input/Output: [[89.88642379912696 58] 147.88642379912696]
Test Case: 363 | Input/Output: [[-12.914789987204614 -20] -32.914789987204614]
Test Case: 364 | Input/Output: [[-67.4845703314848 27] -40.484570331484804]
Test Case: 365 | Input/Output: [[42.813044234182456 57] 99.81304423418246]
Test Case: 366 | Input/Output: [[-80.47416060017731 100] 19.525839399822686]
Test Case: 367 | Input/Output: [[-87.58155832097869 -78] -165.58155832097867]
Test Case: 368 | Input/Output: [[-78.85314521999933 60] -18.853145219999334]
Test Case: 369 | Input/Output: [[26.804828507375888 -72] -45.19517149262411]
Test Case: 370 | Input/Output: [[5.5902842277939016 -36] -30.4097157722061]
Test Case: 371 | Input/Output: [[62.27538395746271 29] 91.27538395746271]
Test Case: 372 | Input/Output: [[-61.749202770321475 -95] -156.74920277032146]
Test Case: 373 | Input/Output: [[68.87451375246926 47] 115.87451375246926]
Test Case: 374 | Input/Output: [[33.44733695375089 -100] -66.55266304624911]
Test Case: 375 | Input/Output: [[25.614696729907124 48] 73.61469672990712]
Test Case: 376 | Input/Output: [[-55.55061378388801 -100] -155.55061378388802]
Test Case: 377 | Input/Output: [[-8.283753996253807 41] 32.71624600374619]
Test Case: 378 | Input/Output: [[14.779214302878913 -33] -18.220785697121087]
Test Case: 379 | Input/Output: [[-80.43495050108065 26] -54.43495050108065]
Test Case: 380 | Input/Output: [[78.16635730133316 -38] 40.166357301333164]
Test Case: 381 | Input/Output: [[56.37581850043 56] 112.37581850043]
Test Case: 382 | Input/Output: [[5.524649564704404 -44] -38.475350435295596]
Test Case: 383 | Input/Output: [[-90.16004282571318 10] -80.16004282571318]
Test Case: 384 | Input/Output: [[-78.3785126029889 -94] -172.3785126029889]
Test Case: 385 | Input/Output: [[-54.17453305774209 -27] -81.17453305774208]
Test Case: 386 | Input/Output: [[18.993185568920396 -50] -31.006814431079604]
Test Case: 387 | Input/Output: [[23.98877126087828 20] 43.98877126087828]
Test Case: 388 | Input/Output: [[75.46683167607418 -26] 49.46683167607418]
Test Case: 389 | Input/Output: [[-39.69685296303549 -12] -51.69685296303549]
Test Case: 390 | Input/Output: [[-33.23578542002437 15] -18.23578542002437]
Test Case: 391 | Input/Output: [[-30.599799684161596 42] 11.400200315838404]
Test Case: 392 | Input/Output: [[36.20853296611233 4] 40.20853296611233]
Test Case: 393 | Input/Output: [[-85.15651269392306 -33] -118.15651269392306]
Test Case: 394 | Input/Output: [[-55.80784359712958 -28] -83.80784359712959]
Test Case: 395 | Input/Output: [[-36.482819210242454 -53] -89.48281921024245]
Test Case: 396 | Input/Output: [[51.87136284138708 -54] -2.128637158612918]
Test Case: 397 | Input/Output: [[32.54550085892646 70] 102.54550085892646]
Test Case: 398 | Input/Output: [[-9.96116624765753 53] 43.03883375234247]
Test Case: 399 | Input/Output: [[-60.90614660596554 86] 25.09385339403446]
Test Case: 400 | Input/Output: [[73.9130456399152 20] 93.9130456399152]
Test Case: 401 | Input/Output: [[-77.67557160626674 -7] -84.67557160626674]
Test Case: 402 | Input/Output: [[-69.19516441945113 -30] -99.19516441945113]
Test Case: 403 | Input/Output: [[81.08144368652987 -25] 56.081443686529866]
Test Case: 404 | Input/Output: [[-75.9804558177106 44] -31.980455817710606]
Test Case: 405 | Input/Output: [[32.322728228621344 76] 108.32272822862134]
Test Case: 406 | Input/Output: [[-26.965570856638422 -19] -45.96557085663842]
Test Case: 407 | Input/Output: [[-45.471272258041196 -3] -48.471272258041196]
Test Case: 408 | Input/Output: [[7.0610021444550455 -85] -77.93899785554495]
Test Case: 409 | Input/Output: [[-93.2227462284958 -30] -123.2227462284958]
Test Case: 410 | Input/Output: [[-35.37050922213206 -85] -120.37050922213206]
Test Case: 411 | Input/Output: [[90.94019862082794 58] 148.94019862082794]
Test Case: 412 | Input/Output: [[-50.75637701053486 6] -44.75637701053486]
Test Case: 413 | Input/Output: [[16.886848952859395 82] 98.8868489528594]
Test Case: 414 | Input/Output: [[-97.32638172222838 -74] -171.32638172222838]
Test Case: 415 | Input/Output: [[97.34314893679127 -63] 34.343148936791266]
Test Case: 416 | Input/Output: [[62.83309091198677 -67] -4.166909088013227]
Test Case: 417 | Input/Output: [[-5.036933089085167 -18] -23.036933089085167]
Test Case: 418 | Input/Output: [[-9.76441333491826 -74] -83.76441333491826]
Test Case: 419 | Input/Output: [[48.35358349659094 -25] 23.353583496590943]
Test Case: 420 | Input/Output: [[49.95136532336531 -67] -17.04863467663469]
Test Case: 421 | Input/Output: [[73.8824215783871 18] 91.8824215783871]
Test Case: 422 | Input/Output: [[-94.56295983979508 17] -77.56295983979508]
Test Case: 423 | Input/Output: [[-83.96708125634757 68] -15.96708125634757]
Test Case: 424 | Input/Output: [[-29.925966261184243 44] 14.074033738815757]
Test Case: 425 | Input/Output: [[23.872318836480517 -87] -63.12768116351948]
Test Case: 426 | Input/Output: [[60.89155770021145 67] 127.89155770021145]
Test Case: 427 | Input/Output: [[-38.53029710476081 0] -38.53029710476081]
Test Case: 428 | Input/Output: [[-39.30298489622543 29] -10.302984896225432]
Test Case: 429 | Input/Output: [[-1.9528155950013542 -21] -22.952815595001354]
Test Case: 430 | Input/Output: [[61.22402641000616 -16] 45.22402641000616]
Test Case: 431 | Input/Output: [[-46.223933730727154 -93] -139.22393373072714]
Test Case: 432 | Input/Output: [[64.62135852042047 61] 125.62135852042047]
Test Case: 433 | Input/Output: [[-11.297589247575374 -58] -69.29758924757537]
Test Case: 434 | Input/Output: [[99.90618145000866 22] 121.90618145000866]
Test Case: 435 | Input/Output: [[35.89350912889162 -66] -30.106490871108377]
Test Case: 436 | Input/Output: [[76.31141621960884 -100] -23.688583780391156]
Test Case: 437 | Input/Output: [[9.803067501132261 23] 32.80306750113226]
Test Case: 438 | Input/Output: [[55.59649846094993 0] 55.59649846094993]
Test Case: 439 | Input/Output: [[33.41937376812126 53] 86.41937376812126]
Test Case: 440 | Input/Output: [[-47.625115621786065 -53] -100.62511562178607]
Test Case: 441 | Input/Output: [[-46.429643177196134 -35] -81.42964317719614]
Test Case: 442 | Input/Output: [[-32.10487518403171 -72] -104.10487518403171]
Test Case: 443 | Input/Output: [[80.48603294031997 -78] 2.486032940319973]
Test Case: 444 | Input/Output: [[-18.440201477549877 -73] -91.44020147754988]
Test Case: 445 | Input/Output: [[-66.33037491523224 21] -45.33037491523224]
Test Case: 446 | Input/Output: [[-33.18975849639074 -72] -105.18975849639074]
Test Case: 447 | Input/Output: [[59.170602706580496 53] 112.1706027065805]
Test Case: 448 | Input/Output: [[91.45353260462065 -80] 11.453532604620648]
Test Case: 449 | Input/Output: [[-30.0884733269573 66] 35.9115266730427]
Test Case: 450 | Input/Output: [[37.19359341969911 29] 66.19359341969911]
Test Case: 451 | Input/Output: [[-11.548898987643781 -96] -107.54889898764378]
Test Case: 452 | Input/Output: [[80.14549359469584 -62] 18.145493594695836]
Test Case: 453 | Input/Output: [[53.071087959751935 -69] -15.928912040248065]
Test Case: 454 | Input/Output: [[64.76223121334576 -17] 47.76223121334576]
Test Case: 455 | Input/Output: [[74.38960950498532 64] 138.38960950498532]
Test Case: 456 | Input/Output: [[16.492944535552212 -77] -60.50705546444779]
Test Case: 457 | Input/Output: [[-12.923475907469765 86] 73.07652409253024]
Test Case: 458 | Input/Output: [[2.1899593306829956 62] 64.189959330683]
Test Case: 459 | Input/Output: [[33.04731133418818 -48] -14.95268866581182]
Test Case: 460 | Input/Output: [[98.31635339049893 -29] 69.31635339049893]
Test Case: 461 | Input/Output: [[-63.15923398329073 49] -14.159233983290733]
Test Case: 462 | Input/Output: [[-6.223868271495078 -67] -73.22386827149508]
Test Case: 463 | Input/Output: [[32.94814210609462 29] 61.94814210609462]
Test Case: 464 | Input/Output: [[66.570517787683 -52] 14.570517787683002]
Test Case: 465 | Input/Output: [[99.32126064693475 -23] 76.32126064693475]
Test Case: 466 | Input/Output: [[-62.93590562051059 84] 21.06409437948941]
Test Case: 467 | Input/Output: [[-68.4262254078603 12] -56.4262254078603]
Test Case: 468 | Input/Output: [[5.671326416228723 26] 31.671326416228723]
Test Case: 469 | Input/Output: [[89.82767065650012 -67] 22.827670656500118]
Test Case: 470 | Input/Output: [[-68.94575490410737 -43] -111.94575490410737]
Test Case: 471 | Input/Output: [[13.463369181633993 92] 105.463369181634]
Test Case: 472 | Input/Output: [[-78.62561349874863 -67] -145.62561349874863]
Test Case: 473 | Input/Output: [[73.62847329530834 8] 81.62847329530834]
Test Case: 474 | Input/Output: [[-83.05394074525059 -98] -181.0539407452506]
Test Case: 475 | Input/Output: [[90.98881605275653 -33] 57.98881605275653]
Test Case: 476 | Input/Output: [[-7.259561497696993 86] 78.74043850230301]
Test Case: 477 | Input/Output: [[16.502693451925182 45] 61.50269345192518]
Test Case: 478 | Input/Output: [[77.88909228200609 -11] 66.88909228200609]
Test Case: 479 | Input/Output: [[-44.73500855057573 -11] -55.73500855057573]
Test Case: 480 | Input/Output: [[-77.00134559555734 78] 0.9986544044426608]
Test Case: 481 | Input/Output: [[-92.2389809692395 -73] -165.2389809692395]
Test Case: 482 | Input/Output: [[-82.77328949513718 -92] -174.7732894951372]
Test Case: 483 | Input/Output: [[55.727036779128724 78] 133.72703677912872]
Test Case: 484 | Input/Output: [[-40.211873445719434 -48] -88.21187344571943]
Test Case: 485 | Input/Output: [[11.261889030433949 -93] -81.73811096956605]
Test Case: 486 | Input/Output: [[-79.42382650822286 -15] -94.42382650822286]
Test Case: 487 | Input/Output: [[-6.17993070269236 12] 5.82006929730764]
Test Case: 488 | Input/Output: [[64.51879962295655 63] 127.51879962295655]
Test Case: 489 | Input/Output: [[-72.33788520069689 53] -19.33788520069689]
Test Case: 490 | Input/Output: [[26.450564146234655 66] 92.45056414623465]
Test Case: 491 | Input/Output: [[-55.26059623197413 12] -43.26059623197413]
Test Case: 492 | Input/Output: [[-53.45267006846435 14] -39.45267006846435]
Test Case: 493 | Input/Output: [[63.39644476187166 8] 71.39644476187166]
Test Case: 494 | Input/Output: [[-33.35605866075642 21] -12.356058660756418]
Test Case: 495 | Input/Output: [[82.11200570045281 87] 169.1120057004528]
Test Case: 496 | Input/Output: [[-76.01574017917328 32] -44.01574017917328]
Test Case: 497 | Input/Output: [[-81.09158788821989 -31] -112.09158788821989]
Test Case: 498 | Input/Output: [[-59.52524813841291 -58] -117.5252481384129]
Test Case: 499 | Input/Output: [[89.45139210506122 98] 187.45139210506122]
Test Case: 500 | Input/Output: [[-51.18787564026699 24] -27.187875640266988]
Test Case: 501 | Input/Output: [[27.11948166678455 -83] -55.88051833321545]
Test Case: 502 | Input/Output: [[-57.41557006627511 -59] -116.41557006627511]
Test Case: 503 | Input/Output: [[83.93489917432686 60] 143.93489917432686]
Test Case: 504 | Input/Output: [[-92.25551762144804 84] -8.255517621448035]
Test Case: 505 | Input/Output: [[2.5679380427549887 49] 51.56793804275499]
Test Case: 506 | Input/Output: [[-25.292350294167846 77] 51.707649705832154]
Test Case: 507 | Input/Output: [[1.9847967138816074 -47] -45.01520328611839]
Test Case: 508 | Input/Output: [[27.315310452104697 96] 123.3153104521047]
Test Case: 509 | Input/Output: [[70.96978312814147 59] 129.96978312814147]
Test Case: 510 | Input/Output: [[-5.394334380995858 77] 71.60566561900414]
Test Case: 511 | Input/Output: [[94.77343016357426 24] 118.77343016357426]
Test Case: 512 | Input/Output: [[33.79759173269781 -100] -66.20240826730219]
Test Case: 513 | Input/Output: [[-11.334666184604131 74] 62.66533381539587]
Test Case: 514 | Input/Output: [[-14.735553695940155 -100] -114.73555369594015]
Test Case: 515 | Input/Output: [[-82.71888848936256 -37] -119.71888848936256]
Test Case: 516 | Input/Output: [[-70.32378129194979 -78] -148.32378129194979]
Test Case: 517 | Input/Output: [[5.446879829129813 12] 17.446879829129813]
Test Case: 518 | Input/Output: [[-62.660343890788475 -88] -150.66034389078848]
Test Case: 519 | Input/Output: [[31.61861848877055 -83] -51.38138151122945]
Test Case: 520 | Input/Output: [[54.421922847023865 -86] -31.578077152976135]
Test Case: 521 | Input/Output: [[64.21275681492455 -19] 45.212756814924546]
Test Case: 522 | Input/Output: [[37.4360439637384 -60] -22.5639560362616]
Test Case: 523 | Input/Output: [[84.65571957839023 -20] 64.65571957839023]
Test Case: 524 | Input/Output: [[71.93021023638914 6] 77.93021023638914]
Test Case: 525 | Input/Output: [[-65.0016790872923 -59] -124.0016790872923]
Test Case: 526 | Input/Output: [[67.17307869421137 57] 124.17307869421137]
Test Case: 527 | Input/Output: [[-15.922921054379131 -48] -63.92292105437913]
Test Case: 528 | Input/Output: [[-57.58443766614882 54] -3.5844376661488226]
Test Case: 529 | Input/Output: [[4.538978989348436 17] 21.538978989348436]
Test Case: 530 | Input/Output: [[76.09896094739196 34] 110.09896094739196]
Test Case: 531 | Input/Output: [[30.38016444771921 77] 107.38016444771921]
Test Case: 532 | Input/Output: [[-73.68886049941742 -36] -109.68886049941742]
Test Case: 533 | Input/Output: [[-10.487991171750522 61] 50.51200882824948]
Test Case: 534 | Input/Output: [[22.73896662657296 -95] -72.26103337342704]
Test Case: 535 | Input/Output: [[-19.469442570892383 7] -12.469442570892383]
Test Case: 536 | Input/Output: [[15.555691853719523 -86] -70.44430814628048]
Test Case: 537 | Input/Output: [[11.708919096077807 -34] -22.291080903922193]
Test Case: 538 | Input/Output: [[84.35449758365309 84] 168.35449758365309]
Test Case: 539 | Input/Output: [[20.15795849174644 23] 43.15795849174644]
Test Case: 540 | Input/Output: [[-25.463998671701276 96] 70.53600132829872]
Test Case: 541 | Input/Output: [[-97.78984397331527 -36] -133.78984397331527]
Test Case: 542 | Input/Output: [[84.75100177195108 -64] 20.75100177195108]
Test Case: 543 | Input/Output: [[25.434514133558935 -65] -39.565485866441065]
Test Case: 544 | Input/Output: [[41.57751234953392 100] 141.57751234953392]
Test Case: 545 | Input/Output: [[-30.832963453356868 99] 68.16703654664313]
Test Case: 546 | Input/Output: [[79.52935755087643 -18] 61.529357550876426]
Test Case: 547 | Input/Output: [[78.55483646062225 -43] 35.554836460622255]
Test Case: 548 | Input/Output: [[-99.51407630755173 -8] -107.51407630755173]
Test Case: 549 | Input/Output: [[-24.70955947501308 62] 37.29044052498692]
Test Case: 550 | Input/Output: [[57.19231719019683 -22] 35.19231719019683]
Test Case: 551 | Input/Output: [[-82.11174565602906 -54] -136.11174565602906]
Test Case: 552 | Input/Output: [[-48.55876900891567 31] -17.558769008915668]
Test Case: 553 | Input/Output: [[59.57867972524585 25] 84.57867972524585]
Test Case: 554 | Input/Output: [[-46.40025878741938 8] -38.40025878741938]
Test Case: 555 | Input/Output: [[52.30794299321252 51] 103.30794299321252]
Test Case: 556 | Input/Output: [[15.66621386328066 -39] -23.33378613671934]
Test Case: 557 | Input/Output: [[2.1801995206536446 -11] -8.819800479346355]
Test Case: 558 | Input/Output: [[-97.2702795551316 21] -76.2702795551316]
Test Case: 559 | Input/Output: [[-94.55227498286429 44] -50.55227498286429]
Test Case: 560 | Input/Output: [[-87.79712396084494 99] 11.202876039155058]
Test Case: 561 | Input/Output: [[-98.31668467997036 25] -73.31668467997036]
Test Case: 562 | Input/Output: [[83.41469149191101 -50] 33.414691491911015]
Test Case: 563 | Input/Output: [[5.646183443768223 100] 105.64618344376822]
Test Case: 564 | Input/Output: [[54.668373673826835 36] 90.66837367382684]
Test Case: 565 | Input/Output: [[68.07567780441315 -73] -4.9243221955868535]
Test Case: 566 | Input/Output: [[-57.92621742106097 88] 30.07378257893903]
Test Case: 567 | Input/Output: [[77.41510146699909 -74] 3.41510146699909]
Test Case: 568 | Input/Output: [[4.2373732995207405 51] 55.23737329952074]
Test Case: 569 | Input/Output: [[-61.338772803177186 34] -27.338772803177186]
Test Case: 570 | Input/Output: [[-21.494241142133234 -37] -58.494241142133234]
Test Case: 571 | Input/Output: [[-39.5041139948352 51] 11.495886005164799]
Test Case: 572 | Input/Output: [[-63.49652099188447 45] -18.496520991884474]
Test Case: 573 | Input/Output: [[-61.207325355274044 95] 33.792674644725956]
Test Case: 574 | Input/Output: [[30.06989957864144 -52] -21.93010042135856]
Test Case: 575 | Input/Output: [[46.122614890115585 -60] -13.877385109884415]
Test Case: 576 | Input/Output: [[-4.264106031441244 -25] -29.264106031441244]
Test Case: 577 | Input/Output: [[64.41677061143349 -19] 45.41677061143349]
Test Case: 578 | Input/Output: [[0.851853561852181 53] 53.85185356185218]
Test Case: 579 | Input/Output: [[-30.819755463827065 97] 66.18024453617294]
Test Case: 580 | Input/Output: [[36.34597383076999 -77] -40.65402616923001]
Test Case: 581 | Input/Output: [[60.3309441785789 -24] 36.3309441785789]
Test Case: 582 | Input/Output: [[-81.94085170240244 -94] -175.94085170240243]
Test Case: 583 | Input/Output: [[88.22594824339768 31] 119.22594824339768]
Test Case: 584 | Input/Output: [[41.37696310773518 -4] 37.37696310773518]
Test Case: 585 | Input/Output: [[51.216662656478405 98] 149.2166626564784]
Test Case: 586 | Input/Output: [[-49.10385502252019 -70] -119.1038550225202]
Test Case: 587 | Input/Output: [[87.8274263162254 -96] -8.172573683774601]
Test Case: 588 | Input/Output: [[-54.21247500570043 -86] -140.21247500570044]
Test Case: 589 | Input/Output: [[63.70248623229338 -99] -35.29751376770662]
Test Case: 590 | Input/Output: [[-60.34310838630725 -37] -97.34310838630725]
Test Case: 591 | Input/Output: [[-58.77736505099249 6] -52.77736505099249]
Test Case: 592 | Input/Output: [[-83.02581773278985 -2] -85.02581773278985]
Test Case: 593 | Input/Output: [[-95.62591078823294 -64] -159.62591078823294]
Test Case: 594 | Input/Output: [[48.70955037555123 43] 91.70955037555123]
Test Case: 595 | Input/Output: [[-84.463549548883 -50] -134.463549548883]
Test Case: 596 | Input/Output: [[-60.931802427647085 94] 33.068197572352915]
Test Case: 597 | Input/Output: [[-27.793192756755275 68] 40.206807243244725]
Test Case: 598 | Input/Output: [[-7.271894201149436 33] 25.728105798850564]
Test Case: 599 | Input/Output: [[-91.5656600835584 9] -82.5656600835584]
Test Case: 600 | Input/Output: [[-32.83567780155113 -40] -72.83567780155113]
Test Case: 601 | Input/Output: [[98.78525011191158 -97] 1.78525011191158]
Test Case: 602 | Input/Output: [[79.02140084740637 71] 150.02140084740637]
Test Case: 603 | Input/Output: [[43.19685579079376 100] 143.19685579079376]
Test Case: 604 | Input/Output: [[86.31600801247549 -50] 36.31600801247549]
Test Case: 605 | Input/Output: [[99.08908910157857 58] 157.08908910157857]
Test Case: 606 | Input/Output: [[-57.116397800524645 9] -48.116397800524645]
Test Case: 607 | Input/Output: [[32.62122233624268 2] 34.62122233624268]
Test Case: 608 | Input/Output: [[65.7774395129122 82] 147.7774395129122]
Test Case: 609 | Input/Output: [[25.959364094658028 -84] -58.04063590534197]
Test Case: 610 | Input/Output: [[79.80839615538304 -31] 48.808396155383036]
Test Case: 611 | Input/Output: [[-92.08663050375246 94] 1.9133694962475403]
Test Case: 612 | Input/Output: [[94.97232399269546 -27] 67.97232399269546]
Test Case: 613 | Input/Output: [[-91.77470447385438 50] -41.774704473854385]
Test Case: 614 | Input/Output: [[80.31533812210185 82] 162.31533812210185]
Test Case: 615 | Input/Output: [[-11.865896886281575 3] -8.865896886281575]
Test Case: 616 | Input/Output: [[10.029598373796446 -28] -17.970401626203554]
Test Case: 617 | Input/Output: [[39.64581844978869 75] 114.64581844978869]
Test Case: 618 | Input/Output: [[59.77903714779188 89] 148.77903714779188]
Test Case: 619 | Input/Output: [[95.27200516949551 58] 153.27200516949551]
Test Case: 620 | Input/Output: [[69.41618806746428 -80] -10.583811932535724]
Test Case: 621 | Input/Output: [[-70.36640701136845 -45] -115.36640701136845]
Test Case: 622 | Input/Output: [[43.80302786662514 -78] -34.19697213337486]
Test Case: 623 | Input/Output: [[46.338120201064925 -60] -13.661879798935075]
Test Case: 624 | Input/Output: [[-93.99630726078331 -40] -133.9963072607833]
Test Case: 625 | Input/Output: [[25.62729685648182 82] 107.62729685648182]
Test Case: 626 | Input/Output: [[35.542810481853195 45] 80.5428104818532]
Test Case: 627 | Input/Output: [[-43.269487935621044 -56] -99.26948793562104]
Test Case: 628 | Input/Output: [[26.057056711280893 -48] -21.942943288719107]
Test Case: 629 | Input/Output: [[18.346141796528755 43] 61.346141796528755]
Test Case: 630 | Input/Output: [[-2.025182409483307 67] 64.9748175905167]
Test Case: 631 | Input/Output: [[-74.57573266302005 -26] -100.57573266302005]
Test Case: 632 | Input/Output: [[-41.63076068064382 -10] -51.63076068064382]
Test Case: 633 | Input/Output: [[94.51263314980912 -48] 46.51263314980912]
Test Case: 634 | Input/Output: [[-80.8396510483293 -81] -161.8396510483293]
Test Case: 635 | Input/Output: [[10.765373421307928 54] 64.76537342130793]
Test Case: 636 | Input/Output: [[-8.916219003356687 -69] -77.91621900335669]
Test Case: 637 | Input/Output: [[79.40411712475 92] 171.40411712475]
Test Case: 638 | Input/Output: [[-16.200410164721177 57] 40.79958983527882]
Test Case: 639 | Input/Output: [[-51.778184717620036 -62] -113.77818471762004]
Test Case: 640 | Input/Output: [[-29.82762763358666 -1] -30.82762763358666]
Test Case: 641 | Input/Output: [[14.989203964599113 -52] -37.01079603540089]
Test Case: 642 | Input/Output: [[79.89300210186579 -98] -18.10699789813421]
Test Case: 643 | Input/Output: [[-84.4836721792933 -51] -135.4836721792933]
Test Case: 644 | Input/Output: [[2.26855251001183 1] 3.26855251001183]
Test Case: 645 | Input/Output: [[52.79087349395169 -79] -26.209126506048307]
Test Case: 646 | Input/Output: [[-36.76218910379079 48] 11.237810896209211]
Test Case: 647 | Input/Output: [[98.52198250491574 33] 131.52198250491574]
Test Case: 648 | Input/Output: [[-49.073792531489936 -89] -138.07379253148994]
Test Case: 649 | Input/Output: [[-58.506565943758226 -10] -68.50656594375823]
Test Case: 650 | Input/Output: [[30.120255939622893 68] 98.1202559396229]
Test Case: 651 | Input/Output: [[-39.088579547994144 2] -37.088579547994144]
Test Case: 652 | Input/Output: [[97.73913042780342 16] 113.73913042780342]
Test Case: 653 | Input/Output: [[-5.3407284927071 25] 19.6592715072929]
Test Case: 654 | Input/Output: [[96.5590046555655 -38] 58.5590046555655]
Test Case: 655 | Input/Output: [[-94.47495867563846 -52] -146.47495867563845]
Test Case: 656 | Input/Output: [[-26.876237126687116 41] 14.123762873312884]
Test Case: 657 | Input/Output: [[8.577245493731738 99] 107.57724549373174]
Test Case: 658 | Input/Output: [[-1.7831945958249662 -12] -13.783194595824966]
Test Case: 659 | Input/Output: [[-19.186336729461246 -25] -44.186336729461246]
Test Case: 660 | Input/Output: [[27.23029638518311 87] 114.23029638518311]
Test Case: 661 | Input/Output: [[41.079923928027995 -72] -30.920076071972005]
Test Case: 662 | Input/Output: [[59.45948724252804 -95] -35.54051275747196]
Test Case: 663 | Input/Output: [[-87.62950759797101 -36] -123.62950759797101]
Test Case: 664 | Input/Output: [[-21.476205402809853 -88] -109.47620540280985]
Test Case: 665 | Input/Output: [[56.44432617082728 -54] 2.4443261708272814]
Test Case: 666 | Input/Output: [[-99.10635361212483 80] -19.106353612124835]
Test Case: 667 | Input/Output: [[59.94228618848919 91] 150.9422861884892]
Test Case: 668 | Input/Output: [[-55.81468205014652 93] 37.18531794985348]
Test Case: 669 | Input/Output: [[86.84909893136174 46] 132.84909893136174]
Test Case: 670 | Input/Output: [[-31.404712631030932 28] -3.4047126310309324]
Test Case: 671 | Input/Output: [[-49.62653180583805 -58] -107.62653180583806]
Test Case: 672 | Input/Output: [[87.96578716943426 -11] 76.96578716943426]
Test Case: 673 | Input/Output: [[-80.42071584062647 -62] -142.42071584062649]
Test Case: 674 | Input/Output: [[-25.21390068078047 -87] -112.21390068078047]
Test Case: 675 | Input/Output: [[27.36024602539699 68] 95.36024602539699]
Test Case: 676 | Input/Output: [[29.555899632773645 80] 109.55589963277365]
Test Case: 677 | Input/Output: [[-81.53685779561195 50] -31.53685779561195]
Test Case: 678 | Input/Output: [[21.52964126855798 79] 100.52964126855798]
Test Case: 679 | Input/Output: [[-61.28417708600418 -92] -153.28417708600418]
Test Case: 680 | Input/Output: [[91.04645646244009 -31] 60.04645646244009]
Test Case: 681 | Input/Output: [[-85.92492480576676 5] -80.92492480576676]
Test Case: 682 | Input/Output: [[-20.270432582814067 50] 29.729567417185933]
Test Case: 683 | Input/Output: [[-49.36688699770513 -75] -124.36688699770514]
Test Case: 684 | Input/Output: [[-11.95959927508892 -38] -49.95959927508892]
Test Case: 685 | Input/Output: [[-73.83306637647964 -18] -91.83306637647964]
Test Case: 686 | Input/Output: [[-80.54160409170454 -62] -142.54160409170453]
Test Case: 687 | Input/Output: [[58.2854255589763 -32] 26.2854255589763]
Test Case: 688 | Input/Output: [[-23.881577582660938 -15] -38.88157758266094]
Test Case: 689 | Input/Output: [[-10.636569406810125 -41] -51.636569406810125]
Test Case: 690 | Input/Output: [[-87.69036304054552 -52] -139.69036304054552]
Test Case: 691 | Input/Output: [[-23.479340976362437 -59] -82.47934097636244]
Test Case: 692 | Input/Output: [[51.71948392848748 9] 60.71948392848748]
Test Case: 693 | Input/Output: [[84.44185678848467 -58] 26.44185678848467]
Test Case: 694 | Input/Output: [[-23.55767263601149 -40] -63.55767263601149]
Test Case: 695 | Input/Output: [[11.88853364143543 -83] -71.11146635856457]
Test Case: 696 | Input/Output: [[-62.55653384986437 12] -50.55653384986437]
Test Case: 697 | Input/Output: [[14.268516243279649 68] 82.26851624327965]
Test Case: 698 | Input/Output: [[-54.4137152033912 84] 29.5862847966088]
Test Case: 699 | Input/Output: [[31.778581932721977 49] 80.77858193272198]
Test Case: 700 | Input/Output: [[-56.57305732738933 -2] -58.57305732738933]
Test Case: 701 | Input/Output: [[-3.338815618059712 -38] -41.33881561805971]
Test Case: 702 | Input/Output: [[-30.323215365343486 84] 53.676784634656514]
Test Case: 703 | Input/Output: [[78.8961747182409 -55] 23.8961747182409]
Test Case: 704 | Input/Output: [[29.120280627421238 87] 116.12028062742124]
Test Case: 705 | Input/Output: [[-66.39793458591512 -69] -135.39793458591512]
Test Case: 706 | Input/Output: [[81.8603257990448 -100] -18.1396742009552]
Test Case: 707 | Input/Output: [[-14.957045646305005 19] 4.042954353694995]
Test Case: 708 | Input/Output: [[-15.016858548006724 -95] -110.01685854800672]
Test Case: 709 | Input/Output: [[28.775517095915916 7] 35.775517095915916]
Test Case: 710 | Input/Output: [[59.25372976625013 100] 159.25372976625013]
Test Case: 711 | Input/Output: [[-92.17651882801097 -91] -183.17651882801096]
Test Case: 712 | Input/Output: [[43.636409581038265 0] 43.636409581038265]
Test Case: 713 | Input/Output: [[42.331341428403874 -100] -57.668658571596126]
Test Case: 714 | Input/Output: [[-2.3740876910332247 -2] -4.374087691033225]
Test Case: 715 | Input/Output: [[37.96030042963909 70] 107.96030042963909]
Test Case: 716 | Input/Output: [[-83.18403599383322 -60] -143.18403599383322]
Test Case: 717 | Input/Output: [[49.2056238044172 64] 113.2056238044172]
Test Case: 718 | Input/Output: [[-47.339209348711805 96] 48.660790651288195]
Test Case: 719 | Input/Output: [[-75.22191303349545 17] -58.221913033495454]
Test Case: 720 | Input/Output: [[21.59058251433568 27] 48.59058251433568]
Test Case: 721 | Input/Output: [[79.37814906952775 97] 176.37814906952775]
Test Case: 722 | Input/Output: [[83.0145354288606 0] 83.0145354288606]
Test Case: 723 | Input/Output: [[-41.162762091268945 25] -16.162762091268945]
Test Case: 724 | Input/Output: [[-80.23286070668368 -3] -83.23286070668368]
Test Case: 725 | Input/Output: [[10.475778754181974 84] 94.47577875418197]
Test Case: 726 | Input/Output: [[-23.180697580022283 -1] -24.180697580022283]
Test Case: 727 | Input/Output: [[-64.55758102688077 87] 22.44241897311923]
Test Case: 728 | Input/Output: [[58.62567541586799 -17] 41.62567541586799]
Test Case: 729 | Input/Output: [[-77.11827916056271 30] -47.11827916056271]
Test Case: 730 | Input/Output: [[-49.58900653179421 45] -4.589006531794212]
Test Case: 731 | Input/Output: [[-54.65084482657645 14] -40.65084482657645]
Test Case: 732 | Input/Output: [[91.90706165172176 -31] 60.90706165172176]
Test Case: 733 | Input/Output: [[-72.79668457883216 -8] -80.79668457883216]
Test Case: 734 | Input/Output: [[-3.9221883291375264 33] 29.077811670862474]
Test Case: 735 | Input/Output: [[8.505584019326193 76] 84.5055840193262]
Test Case: 736 | Input/Output: [[-64.36171087434472 26] -38.36171087434472]
Test Case: 737 | Input/Output: [[72.54059512696347 -28] 44.54059512696347]
Test Case: 738 | Input/Output: [[-77.77665813251843 7] -70.77665813251843]
Test Case: 739 | Input/Output: [[41.14322471441258 69] 110.14322471441258]
Test Case: 740 | Input/Output: [[-98.69192151642511 26] -72.69192151642511]
Test Case: 741 | Input/Output: [[18.994087183125515 17] 35.994087183125515]
Test Case: 742 | Input/Output: [[10.965768297604782 -91] -80.03423170239522]
Test Case: 743 | Input/Output: [[8.976027284227285 57] 65.97602728422729]
Test Case: 744 | Input/Output: [[-80.91823655137851 -17] -97.91823655137851]
Test Case: 745 | Input/Output: [[71.30806971890226 -82] -10.69193028109774]
Test Case: 746 | Input/Output: [[41.336868173608906 97] 138.3368681736089]
Test Case: 747 | Input/Output: [[15.468346031590414 20] 35.468346031590414]
Test Case: 748 | Input/Output: [[19.61006265575429 -18] 1.610062655754291]
Test Case: 749 | Input/Output: [[-41.63797126872171 -91] -132.6379712687217]
Test Case: 750 | Input/Output: [[33.0913355475661 -66] -32.9086644524339]
Test Case: 751 | Input/Output: [[56.01372997359647 38] 94.01372997359647]
Test Case: 752 | Input/Output: [[-50.55852334639799 95] 44.44147665360201]
Test Case: 753 | Input/Output: [[-62.507894870712335 -72] -134.50789487071233]
Test Case: 754 | Input/Output: [[88.20713643869593 52] 140.20713643869593]
Test Case: 755 | Input/Output: [[61.96506555250042 -47] 14.96506555250042]
Test Case: 756 | Input/Output: [[78.1684692869037 65] 143.1684692869037]
Test Case: 757 | Input/Output: [[-77.93083814725432 -49] -126.93083814725432]
Test Case: 758 | Input/Output: [[16.85502143647652 51] 67.85502143647652]
Test Case: 759 | Input/Output: [[29.904966281565294 31] 60.904966281565294]
Test Case: 760 | Input/Output: [[-97.67050431545653 -32] -129.67050431545653]
Test Case: 761 | Input/Output: [[-31.41093467498648 7] -24.41093467498648]
Test Case: 762 | Input/Output: [[-10.658432867181062 87] 76.34156713281894]
Test Case: 763 | Input/Output: [[18.806115132393032 -88] -69.19388486760697]
Test Case: 764 | Input/Output: [[5.218529071540189 79] 84.21852907154019]
Test Case: 765 | Input/Output: [[92.45076876725943 0] 92.45076876725943]
Test Case: 766 | Input/Output: [[-23.346889090527995 92] 68.653110909472]
Test Case: 767 | Input/Output: [[84.67553965960121 69] 153.6755396596012]
Test Case: 768 | Input/Output: [[-49.14463801429696 66] 16.85536198570304]
Test Case: 769 | Input/Output: [[48.062566252616506 -80] -31.937433747383494]
Test Case: 770 | Input/Output: [[81.9640206110789 89] 170.9640206110789]
Test Case: 771 | Input/Output: [[-38.350887115302676 -5] -43.350887115302676]
Test Case: 772 | Input/Output: [[-43.62205171707012 -21] -64.62205171707012]
Test Case: 773 | Input/Output: [[-27.33605231912584 11] -16.33605231912584]
Test Case: 774 | Input/Output: [[-89.93679053273966 -69] -158.93679053273968]
Test Case: 775 | Input/Output: [[-80.40044099520671 -77] -157.4004409952067]
Test Case: 776 | Input/Output: [[-77.5719310859516 -58] -135.5719310859516]
Test Case: 777 | Input/Output: [[-67.1858442876416 -8] -75.1858442876416]
Test Case: 778 | Input/Output: [[62.622519097229116 5] 67.62251909722912]
Test Case: 779 | Input/Output: [[3.418533375026641 71] 74.41853337502664]
Test Case: 780 | Input/Output: [[40.335203914142795 -32] 8.335203914142795]
Test Case: 781 | Input/Output: [[-78.25978652446635 6] -72.25978652446635]
Test Case: 782 | Input/Output: [[72.98435901280209 -72] 0.9843590128020878]
Test Case: 783 | Input/Output: [[20.132311679679816 14] 34.132311679679816]
Test Case: 784 | Input/Output: [[-93.54410788917211 -61] -154.5441078891721]
Test Case: 785 | Input/Output: [[-20.960398394979293 21] 0.03960160502070664]
Test Case: 786 | Input/Output: [[-31.391561498920368 37] 5.6084385010796325]
Test Case: 787 | Input/Output: [[-18.967214742933976 -16] -34.967214742933976]
Test Case: 788 | Input/Output: [[38.90820053105705 16] 54.90820053105705]
Test Case: 789 | Input/Output: [[87.32191634331406 -50] 37.32191634331406]
Test Case: 790 | Input/Output: [[-81.1365670391641 79] -2.136567039164106]
Test Case: 791 | Input/Output: [[-11.219450902639466 -36] -47.219450902639466]
Test Case: 792 | Input/Output: [[-76.81322313500239 15] -61.81322313500239]
Test Case: 793 | Input/Output: [[66.58437806581418 -68] -1.4156219341858218]
Test Case: 794 | Input/Output: [[21.695887305397136 -88] -66.30411269460286]
Test Case: 795 | Input/Output: [[-83.26710818783332 -18] -101.26710818783332]
Test Case: 796 | Input/Output: [[-2.1914320192997394 3] 0.8085679807002606]
Test Case: 797 | Input/Output: [[-53.54688093338582 52] -1.5468809333858218]
Test Case: 798 | Input/Output: [[44.97164318580752 -42] 2.9716431858075225]
Test Case: 799 | Input/Output: [[-17.33635648339427 -23] -40.33635648339427]
Test Case: 800 | Input/Output: [[27.8920130925233 86] 113.8920130925233]
Test Case: 801 | Input/Output: [[74.75116848652118 77] 151.75116848652118]
Test Case: 802 | Input/Output: [[62.71947631751189 86] 148.7194763175119]
Test Case: 803 | Input/Output: [[-44.7766715026207 91] 46.2233284973793]
Test Case: 804 | Input/Output: [[-29.724336243451475 -41] -70.72433624345148]
Test Case: 805 | Input/Output: [[-24.30780622766204 21] -3.3078062276620415]
Test Case: 806 | Input/Output: [[-44.812661705006576 -64] -108.81266170500658]
Test Case: 807 | Input/Output: [[-85.80009437831839 91] 5.199905621681609]
Test Case: 808 | Input/Output: [[23.02022674460234 -1] 22.02022674460234]
Test Case: 809 | Input/Output: [[-37.60232734847766 54] 16.397672651522342]
Test Case: 810 | Input/Output: [[36.84255462044075 -11] 25.84255462044075]
Test Case: 811 | Input/Output: [[51.96168010165016 60] 111.96168010165016]
Test Case: 812 | Input/Output: [[-36.67814055898715 -36] -72.67814055898715]
Test Case: 813 | Input/Output: [[-89.68849263910641 -73] -162.6884926391064]
Test Case: 814 | Input/Output: [[-13.401808402135785 -64] -77.40180840213579]
Test Case: 815 | Input/Output: [[10.211922471680609 98] 108.21192247168061]
Test Case: 816 | Input/Output: [[62.6676109230481 94] 156.6676109230481]
Test Case: 817 | Input/Output: [[-1.8591063703609336 44] 42.140893629639066]
Test Case: 818 | Input/Output: [[-76.65213389262455 -4] -80.65213389262455]
Test Case: 819 | Input/Output: [[-37.80752593408856 -5] -42.80752593408856]
Test Case: 820 | Input/Output: [[-60.745655214138324 85] 24.254344785861676]
Test Case: 821 | Input/Output: [[45.95600648825001 -54] -8.043993511749989]
Test Case: 822 | Input/Output: [[3.944772935498264 -38] -34.055227064501736]
Test Case: 823 | Input/Output: [[64.11671122900705 -61] 3.116711229007052]
Test Case: 824 | Input/Output: [[-18.983356786004663 -56] -74.98335678600466]
Test Case: 825 | Input/Output: [[44.187246783798315 -94] -49.812753216201685]
Test Case: 826 | Input/Output: [[-80.98750579736807 98] 17.012494202631927]
Test Case: 827 | Input/Output: [[40.81464697084817 42] 82.81464697084817]
Test Case: 828 | Input/Output: [[-1.7760501865222267 -95] -96.77605018652223]
Test Case: 829 | Input/Output: [[47.67068834269378 30] 77.67068834269378]
Test Case: 830 | Input/Output: [[43.05771779436384 -2] 41.05771779436384]
Test Case: 831 | Input/Output: [[93.38073445075955 88] 181.38073445075955]
Test Case: 832 | Input/Output: [[60.83477422641445 -44] 16.834774226414453]
Test Case: 833 | Input/Output: [[-72.78429122194143 -11] -83.78429122194143]
Test Case: 834 | Input/Output: [[10.232109890971458 -25] -14.767890109028542]
Test Case: 835 | Input/Output: [[30.756500018681464 60] 90.75650001868146]
Test Case: 836 | Input/Output: [[-58.97628398418131 89] 30.023716015818692]
Test Case: 837 | Input/Output: [[-53.535102892527696 -12] -65.5351028925277]
Test Case: 838 | Input/Output: [[-17.145316198418413 -44] -61.14531619841841]
Test Case: 839 | Input/Output: [[-25.69974525662073 9] -16.69974525662073]
Test Case: 840 | Input/Output: [[63.31254966024892 44] 107.31254966024892]
Test Case: 841 | Input/Output: [[-74.39826915633809 -6] -80.39826915633809]
Test Case: 842 | Input/Output: [[20.483017280652433 -15] 5.483017280652433]
Test Case: 843 | Input/Output: [[-76.9012116432636 57] -19.901211643263593]
Test Case: 844 | Input/Output: [[-9.862027873367538 18] 8.137972126632462]
Test Case: 845 | Input/Output: [[82.20239292752106 -79] 3.2023929275210605]
Test Case: 846 | Input/Output: [[86.20752206596961 -53] 33.20752206596961]
Test Case: 847 | Input/Output: [[62.86096615657422 56] 118.86096615657422]
Test Case: 848 | Input/Output: [[-20.293013090674833 23] 2.706986909325167]
Test Case: 849 | Input/Output: [[-37.24534764833709 -83] -120.24534764833709]
Test Case: 850 | Input/Output: [[-64.27939752435425 -59] -123.27939752435425]
Test Case: 851 | Input/Output: [[-94.21295384319926 20] -74.21295384319926]
Test Case: 852 | Input/Output: [[98.70764743046661 2] 100.70764743046661]
Test Case: 853 | Input/Output: [[-30.63103177747466 18] -12.63103177747466]
Test Case: 854 | Input/Output: [[1.4593067147599328 43] 44.45930671475993]
Test Case: 855 | Input/Output: [[38.0945149804603 -7] 31.094514980460303]
Test Case: 856 | Input/Output: [[-99.68721688158402 64] -35.68721688158402]
Test Case: 857 | Input/Output: [[38.10839746822165 -56] -17.891602531778346]
Test Case: 858 | Input/Output: [[88.70617977349698 52] 140.70617977349698]
Test Case: 859 | Input/Output: [[-93.04598108187523 70] -23.045981081875226]
Test Case: 860 | Input/Output: [[-10.11924437866709 86] 75.88075562133291]
Test Case: 861 | Input/Output: [[-43.22724514943486 -18] -61.22724514943486]
Test Case: 862 | Input/Output: [[80.17295492406512 -71] 9.172954924065124]
Test Case: 863 | Input/Output: [[60.70558539003986 -91] -30.294414609960143]
Test Case: 864 | Input/Output: [[-74.8935618221897 -33] -107.8935618221897]
Test Case: 865 | Input/Output: [[65.40653666335692 96] 161.40653666335692]
Test Case: 866 | Input/Output: [[84.07997818842605 14] 98.07997818842605]
Test Case: 867 | Input/Output: [[7.241042973804454 4] 11.241042973804454]
Test Case: 868 | Input/Output: [[89.17072928854384 -100] -10.82927071145616]
Test Case: 869 | Input/Output: [[-79.23022956718135 -13] -92.23022956718135]
Test Case: 870 | Input/Output: [[-23.999569309722887 39] 15.000430690277113]
Test Case: 871 | Input/Output: [[-95.03070775610634 34] -61.03070775610634]
Test Case: 872 | Input/Output: [[0.567605566819168 -60] -59.43239443318083]
Test Case: 873 | Input/Output: [[-8.408520016788941 -26] -34.40852001678894]
Test Case: 874 | Input/Output: [[27.95063929870105 -44] -16.04936070129895]
Test Case: 875 | Input/Output: [[-76.25036765423236 -97] -173.25036765423238]
Test Case: 876 | Input/Output: [[79.04662564221329 77] 156.0466256422133]
Test Case: 877 | Input/Output: [[-7.036637771122827 -86] -93.03663777112283]
Test Case: 878 | Input/Output: [[55.89007264715099 -99] -43.10992735284901]
Test Case: 879 | Input/Output: [[-77.10521028652411 36] -41.10521028652411]
Test Case: 880 | Input/Output: [[27.505035274623694 53] 80.5050352746237]
Test Case: 881 | Input/Output: [[-64.12776602597049 -93] -157.1277660259705]
Test Case: 882 | Input/Output: [[34.63057208910783 -21] 13.63057208910783]
Test Case: 883 | Input/Output: [[64.45041659343221 15] 79.45041659343221]
Test Case: 884 | Input/Output: [[39.637706588489806 41] 80.6377065884898]
Test Case: 885 | Input/Output: [[83.1080277112743 34] 117.1080277112743]
Test Case: 886 | Input/Output: [[-42.61761521192704 83] 40.38238478807296]
Test Case: 887 | Input/Output: [[90.36221494493236 -7] 83.36221494493236]
Test Case: 888 | Input/Output: [[80.28529846395222 55] 135.28529846395222]
Test Case: 889 | Input/Output: [[89.05573061108123 -2] 87.05573061108123]
Test Case: 890 | Input/Output: [[-31.922293858743984 -75] -106.92229385874398]
Test Case: 891 | Input/Output: [[89.7300383278133 20] 109.7300383278133]
Test Case: 892 | Input/Output: [[14.823388305392712 69] 83.82338830539271]
Test Case: 893 | Input/Output: [[-64.47112205738259 -22] -86.47112205738259]
Test Case: 894 | Input/Output: [[-28.086380659859756 -2] -30.086380659859756]
Test Case: 895 | Input/Output: [[-42.887260543743544 20] -22.887260543743544]
Test Case: 896 | Input/Output: [[69.72164127341534 -30] 39.721641273415344]
Test Case: 897 | Input/Output: [[28.61188745752571 11] 39.61188745752571]
Test Case: 898 | Input/Output: [[-34.75094720542258 55] 20.249052794577423]
Test Case: 899 | Input/Output: [[-26.39136181318331 -30] -56.39136181318331]
Test Case: 900 | Input/Output: [[-21.165383225662367 -43] -64.16538322566237]
Test Case: 901 | Input/Output: [[-93.91720112625428 -64] -157.91720112625427]
Test Case: 902 | Input/Output: [[-53.475212937880066 81] 27.524787062119934]
Test Case: 903 | Input/Output: [[-30.82588402918593 27] -3.8258840291859286]
Test Case: 904 | Input/Output: [[-31.879955447747065 -92] -123.87995544774707]
Test Case: 905 | Input/Output: [[35.81332531171873 -31] 4.813325311718728]
Test Case: 906 | Input/Output: [[2.9503933347719453 -43] -40.049606665228055]
Test Case: 907 | Input/Output: [[-74.22281744114903 -32] -106.22281744114903]
Test Case: 908 | Input/Output: [[-33.61793819702615 73] 39.38206180297385]
Test Case: 909 | Input/Output: [[-9.82422535566954 71] 61.17577464433046]
Test Case: 910 | Input/Output: [[17.488540317604603 -48] -30.511459682395397]
Test Case: 911 | Input/Output: [[10.51689774333255 30] 40.51689774333255]
Test Case: 912 | Input/Output: [[1.445458656559964 -58] -56.554541343440036]
Test Case: 913 | Input/Output: [[72.69570939734285 94] 166.69570939734285]
Test Case: 914 | Input/Output: [[-40.559814666715454 -55] -95.55981466671545]
Test Case: 915 | Input/Output: [[54.08913321043062 -44] 10.089133210430617]
Test Case: 916 | Input/Output: [[32.73460162341203 -53] -20.265398376587967]
Test Case: 917 | Input/Output: [[-10.673225468163167 -2] -12.673225468163167]
Test Case: 918 | Input/Output: [[15.192451339976671 59] 74.19245133997667]
Test Case: 919 | Input/Output: [[36.731579290500264 79] 115.73157929050026]
Test Case: 920 | Input/Output: [[79.53321793300793 -89] -9.466782066992067]
Test Case: 921 | Input/Output: [[42.12599268642586 91] 133.12599268642586]
Test Case: 922 | Input/Output: [[78.43526522492996 -73] 5.435265224929964]
Test Case: 923 | Input/Output: [[-51.93260314478352 -85] -136.9326031447835]
Test Case: 924 | Input/Output: [[-92.77099843538777 24] -68.77099843538777]
Test Case: 925 | Input/Output: [[-5.21786753414473 -35] -40.21786753414473]
Test Case: 926 | Input/Output: [[42.5181461915885 88] 130.5181461915885]
Test Case: 927 | Input/Output: [[95.50620637538034 -37] 58.506206375380344]
Test Case: 928 | Input/Output: [[65.53370626073146 -7] 58.53370626073146]
Test Case: 929 | Input/Output: [[-60.20363310374255 88] 27.796366896257453]
Test Case: 930 | Input/Output: [[71.41747167860694 -91] -19.582528321393056]
Test Case: 931 | Input/Output: [[-65.23993919274662 99] 33.76006080725338]
Test Case: 932 | Input/Output: [[-68.47543719058768 34] -34.475437190587684]
Test Case: 933 | Input/Output: [[-74.84741543246218 68] -6.847415432462185]
Test Case: 934 | Input/Output: [[-88.78208337206866 83] -5.782083372068655]
Test Case: 935 | Input/Output: [[48.04572785873728 -51] -2.95427214126272]
Test Case: 936 | Input/Output: [[-81.03904680464422 -35] -116.03904680464422]
Test Case: 937 | Input/Output: [[31.612971238731888 -78] -46.38702876126811]
Test Case: 938 | Input/Output: [[-6.670883142671016 27] 20.329116857328984]
Test Case: 939 | Input/Output: [[-16.916832650705487 -81] -97.91683265070549]
Test Case: 940 | Input/Output: [[42.07782578166902 98] 140.07782578166902]
Test Case: 941 | Input/Output: [[57.78939211524542 -18] 39.78939211524542]
Test Case: 942 | Input/Output: [[83.9699529355002 57] 140.9699529355002]
Test Case: 943 | Input/Output: [[-45.961818825125825 -4] -49.961818825125825]
Test Case: 944 | Input/Output: [[-42.279815090877705 17] -25.279815090877705]
Test Case: 945 | Input/Output: [[36.42313470963305 -80] -43.57686529036695]
Test Case: 946 | Input/Output: [[16.731275186054148 82] 98.73127518605415]
Test Case: 947 | Input/Output: [[39.89984227062439 -1] 38.89984227062439]
Test Case: 948 | Input/Output: [[-84.65089873160525 53] -31.650898731605253]
Test Case: 949 | Input/Output: [[8.295725344694489 -97] -88.70427465530551]
Test Case: 950 | Input/Output: [[28.25883771844218 9] 37.25883771844218]
Test Case: 951 | Input/Output: [[74.68071595856193 -49] 25.680715958561933]
Test Case: 952 | Input/Output: [[27.913802433117056 -25] 2.9138024331170556]
Test Case: 953 | Input/Output: [[78.70340764129921 32] 110.70340764129921]
Test Case: 954 | Input/Output: [[-15.16885425553373 57] 41.83114574446627]
Test Case: 955 | Input/Output: [[26.299784369465144 -2] 24.299784369465144]
Test Case: 956 | Input/Output: [[80.09094454633464 -35] 45.09094454633464]
Test Case: 957 | Input/Output: [[-53.95719791588511 -26] -79.9571979158851]
Test Case: 958 | Input/Output: [[-51.678062490706075 83] 31.321937509293925]
Test Case: 959 | Input/Output: [[76.59381835229871 51] 127.59381835229871]
Test Case: 960 | Input/Output: [[24.115858204521487 56] 80.11585820452149]
Test Case: 961 | Input/Output: [[29.726421475483363 6] 35.72642147548336]
Test Case: 962 | Input/Output: [[-99.5155643814781 7] -92.5155643814781]
Test Case: 963 | Input/Output: [[28.204030200419055 -85] -56.795969799580945]
Test Case: 964 | Input/Output: [[-10.89331503360114 -67] -77.89331503360114]
Test Case: 965 | Input/Output: [[99.83952014309517 76] 175.83952014309517]
Test Case: 966 | Input/Output: [[-94.64347914586418 25] -69.64347914586418]
Test Case: 967 | Input/Output: [[70.3031533677287 96] 166.3031533677287]
Test Case: 968 | Input/Output: [[8.743491764371896 57] 65.7434917643719]
Test Case: 969 | Input/Output: [[-19.08748522542045 -33] -52.08748522542045]
Test Case: 970 | Input/Output: [[8.606391659227697 18] 26.606391659227697]
Test Case: 971 | Input/Output: [[-80.22516522280733 71] -9.225165222807334]
Test Case: 972 | Input/Output: [[0.6536674986882645 99] 99.65366749868826]
Test Case: 973 | Input/Output: [[-36.994167794341834 -13] -49.994167794341834]
Test Case: 974 | Input/Output: [[-25.32383264624245 -4] -29.32383264624245]
Test Case: 975 | Input/Output: [[-19.88188599414336 -23] -42.88188599414336]
Test Case: 976 | Input/Output: [[-16.615740096238014 71] 54.384259903761986]
Test Case: 977 | Input/Output: [[-79.3970751785524 -41] -120.3970751785524]
Test Case: 978 | Input/Output: [[-47.7155012500712 20] -27.7155012500712]
Test Case: 979 | Input/Output: [[-75.53087456367511 -60] -135.53087456367513]
Test Case: 980 | Input/Output: [[-71.6470605530656 -27] -98.6470605530656]
Test Case: 981 | Input/Output: [[90.26494389121285 -49] 41.26494389121285]
Test Case: 982 | Input/Output: [[13.852167256179442 45] 58.85216725617944]
Test Case: 983 | Input/Output: [[68.65946586146941 93] 161.6594658614694]
Test Case: 984 | Input/Output: [[-73.58804601478847 -40] -113.58804601478847]
Test Case: 985 | Input/Output: [[-76.64811612452505 11] -65.64811612452505]
Test Case: 986 | Input/Output: [[59.481139046053414 -16] 43.481139046053414]
Test Case: 987 | Input/Output: [[28.51524300021123 -7] 21.51524300021123]
Test Case: 988 | Input/Output: [[6.103174046378427 -12] -5.896825953621573]
Test Case: 989 | Input/Output: [[-45.56666973139938 43] -2.5666697313993794]
Test Case: 990 | Input/Output: [[-79.7999633104673 37] -42.799963310467305]
Test Case: 991 | Input/Output: [[37.3617889413847 -31] 6.361788941384702]
Test Case: 992 | Input/Output: [[16.672178464981187 -12] 4.672178464981187]
Test Case: 993 | Input/Output: [[-83.45381004961465 -67] -150.45381004961465]
Test Case: 994 | Input/Output: [[-6.346275025549588 63] 56.65372497445041]
Test Case: 995 | Input/Output: [[58.01060665032708 -57] 1.0106066503270767]
Test Case: 996 | Input/Output: [[-61.34294707340666 -29] -90.34294707340666]
Test Case: 997 | Input/Output: [[-16.209640219268564 84] 67.79035978073144]
Test Case: 998 | Input/Output: [[-32.67182735036552 -3] -35.67182735036552]
Test Case: 999 | Input/Output: [[-26.378037235679756 -20] -46.378037235679756]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -73 -47 -106 -65 75 -126 7 -112 -89 112 2 -47 -128 46 75 91
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 54883.0
Test mean error for best: 27.44150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 83.6202915281 
Correct output: -97.8840430172 | Program output: -90.8840430172
Correct output: 0.4036195194   | Program output: -80.5963804806
Correct output: 0.9852941304   | Program output: -46.0147058696
Correct output: -79.0645977841 | Program output: 11.9354022159 
Correct output: -130.7521921729 | Program output: -39.7521921729
Correct output: -97.7473834665 | Program output: -55.7473834665
Correct output: -17.6027584354 | Program output: -22.6027584354
Correct output: -28.5368508646 | Program output: -87.5368508646
Correct output: 116.3017366635 | Program output: 44.3017366635 
Correct output: -59.1266212998 | Program output: -29.1266212998
Correct output: 123.0806220037 | Program output: 60.0806220037 
Correct output: -14.0125351796 | Program output: -5.0125351796 
Correct output: -66.7738289831 | Program output: -67.7738289831
Correct output: 32.104882549   | Program output: -50.895117451 
Correct output: -98.8609111379 | Program output: -31.8609111379
Correct output: 33.0846749945  | Program output: -64.9153250055
Correct output: -49.7179285444 | Program output: -85.7179285444
Correct output: 109.0210328362 | Program output: 14.0210328362 
Correct output: -27.1169916465 | Program output: -57.1169916465
Correct output: -105.6656770862 | Program output: -27.6656770862
Correct output: 70.3646248726  | Program output: 22.3646248726 
Correct output: 133.4928513203 | Program output: 72.4928513203 
Correct output: -61.0399967536 | Program output: -53.0399967536
Correct output: -65.0346338833 | Program output: 7.9653661167  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_stackdepth} {:instruction float_swap} {:instruction in1} {:instruction float_div} {:instruction tag_float_238} {:instruction in2} {:instruction float_rot} {:instruction float_frominteger} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_inc} {:instruction -70.88004469186748} {:instruction integer_shove} {:instruction tagged_490} {:instruction integer_swap} {:instruction print_float} {:instruction float_dec} {:instruction float_min} {:instruction float_shove} {:instruction float_swap} {:instruction integer_rot})
Best program: (integer_stackdepth float_swap in1 float_div tag_float_238 in2 float_rot float_frominteger integer_shove float_yank integer_inc -70.88004469186748 integer_shove tagged_490 integer_swap print_float float_dec float_min float_shove float_swap integer_rot)
Errors: [75.0 1 7.0 1 81.0 12 47.0 13 91.0 13 91.0 2 42.0 2 5.0 2 59.0 2 72.0 3 30.0 1 63.0 3 9.0 2 1.0 1 83.0 12 67.0 2 98.0 12 36.0 2 95.0 2 30.0 1 78.0 3 48.0 2 61.0 3 8.0 2 73.0 12]
Total: 1461.0
Mean: 29.22
Genome size: 21
Size: 22
Percent parens: 0.045
--- Population Statistics ---
Average total errors in population: 18076.0183744
Median total errors in population: 25342.0
Error averages by case: (707.4786933999993 11.665 716.2330244999999 13.209 702.9635726999998 12.253 696.4501881000001 12.252 715.6080258999996 13.738 727.3085818999983 13.994 718.8518409999987 13.414 690.4273374999992 13.244 704.7166947999987 13.32 716.8683544999998 13.385 708.6374096999996 13.365 720.6959774999981 13.313 697.8056519999998 13.151 697.9248645000004 13.323 705.5806989999992 12.203 720.0398099000012 13.258 706.3772881000006 13.189 706.471751000001 13.439 717.552430399999 13.251 700.9743649000009 13.405 720.2559950000018 14.064 705.937706599997 12.437 723.3435796999993 13.335 708.0419848999995 13.264 710.1705469000007 13.831)
Error minima by case: (0.2723 1 0.884 1 0.0633 8 6.0E-4 7 0.0646 8 15.9207 2 0.7474 2 0.3972 2 0.4631 1 1.6983 3 0.1266 1 2.9194 3 0.0125 2 0.2262 1 2.8951 8 1.8609 2 1.9153 9 0.1287 2 8.021 2 1.2411 1 5.0312 3 1.0054 2 11.4929 2 2.04 2 0.0346 8)
Average genome size in population (length): 49.181
Average program size in population (points): 50.181
Average percent parens in population: 0.043
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.306
Error (vector) diversity:			 0.335
Behavioral diversity:				 0.351
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1233651
--- Timings ---
Current time: 1529614892088 milliseconds
Total Time:           3.5 seconds
Initialization:       0.1 seconds,  3.2%
Reproduction:         0.5 seconds, 15.5%
Fitness Testing:      2.8 seconds, 81.2%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 54883.0
Test mean error for best: 27.44150
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 83.6202915281 
Correct output: -97.8840430172 | Program output: -90.8840430172
Correct output: 0.4036195194   | Program output: -80.5963804806
Correct output: 0.9852941304   | Program output: -46.0147058696
Correct output: -79.0645977841 | Program output: 11.9354022159 
Correct output: -130.7521921729 | Program output: -39.7521921729
Correct output: -97.7473834665 | Program output: -55.7473834665
Correct output: -17.6027584354 | Program output: -22.6027584354
Correct output: -28.5368508646 | Program output: -87.5368508646
Correct output: 116.3017366635 | Program output: 44.3017366635 
Correct output: -59.1266212998 | Program output: -29.1266212998
Correct output: 123.0806220037 | Program output: 60.0806220037 
Correct output: -14.0125351796 | Program output: -5.0125351796 
Correct output: -66.7738289831 | Program output: -67.7738289831
Correct output: 32.104882549   | Program output: -50.895117451 
Correct output: -98.8609111379 | Program output: -31.8609111379
Correct output: 33.0846749945  | Program output: -64.9153250055
Correct output: -49.7179285444 | Program output: -85.7179285444
Correct output: 109.0210328362 | Program output: 14.0210328362 
Correct output: -27.1169916465 | Program output: -57.1169916465
Correct output: -105.6656770862 | Program output: -27.6656770862
Correct output: 70.3646248726  | Program output: 22.3646248726 
Correct output: 133.4928513203 | Program output: 72.4928513203 
Correct output: -61.0399967536 | Program output: -53.0399967536
Correct output: -65.0346338833 | Program output: 7.9653661167  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_pop} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_swap} {:instruction float_dup} {:instruction float_inc} {:instruction float_yank} {:instruction integer_shove} {:instruction float_div} {:instruction in1} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_yankdup} {:instruction float_cos} {:instruction integer_yank} {:instruction float_tan} {:instruction integer_inc} {:instruction float_mod} {:instruction integer_yank} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_div} {:instruction float_dup_times} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction print_float} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction float_sin} {:instruction print_float} {:instruction float_cos} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_rot} {:instruction float_shove} {:instruction float_add} {:instruction float_yankdup} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction in1} {:instruction float_mult} {:instruction tagged_723} {:instruction integer_stackdepth} {:instruction print_float} {:instruction integer_inc} {:instruction integer_yank} {:instruction print_float} {:instruction float_min} {:instruction 69} {:instruction in1} {:instruction integer_max} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction float_add} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction float_stackdepth} {:instruction float_mult} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_frominteger} {:instruction float_min} {:instruction float_pop} {:instruction integer_dup} {:instruction float_add} {:instruction float_mod} {:instruction 88} {:instruction integer_pop} {:instruction integer_shove} {:instruction integer_sub} {:instruction float_shove} {:instruction 85} {:instruction -25.319278508367105} {:instruction float_yank} {:instruction float_frominteger} {:instruction integer_dup} {:instruction float_yank} {:instruction float_add} {:instruction 98.43123106227415} {:instruction integer_mod} {:instruction integer_min} {:instruction integer_dup} {:instruction float_flush} {:instruction integer_flush} {:instruction integer_dec} {:instruction 1.8339071515526655} {:instruction print_integer} {:instruction float_div} {:instruction integer_yankdup} {:instruction float_mod})
Best program: (float_mod integer_pop float_pop integer_dup_times float_swap float_dup float_inc float_yank integer_shove float_div in1 float_frominteger float_add integer_yankdup float_cos integer_yank float_tan integer_inc float_mod integer_yank integer_add integer_fromfloat float_div float_dup_times integer_add integer_fromfloat integer_inc print_float integer_stackdepth integer_rot float_sin print_float float_cos integer_add integer_mod integer_rot float_shove float_add float_yankdup integer_stackdepth float_swap in1 float_mult tagged_723 integer_stackdepth print_float integer_inc integer_yank print_float float_min 69 in1 integer_max integer_stackdepth integer_inc integer_fromfloat float_add integer_mult integer_dup_items integer_dup_items integer_dup float_stackdepth float_mult integer_dup_times float_yankdup float_mod float_frominteger float_min float_pop integer_dup float_add float_mod 88 integer_pop integer_shove integer_sub float_shove 85 -25.319278508367105 float_yank float_frominteger integer_dup float_yank float_add 98.43123106227415 integer_mod integer_min integer_dup float_flush integer_flush integer_dec 1.8339071515526655 print_integer float_div integer_yankdup float_mod)
Errors: [75.0 1 7.0 1 81.0 12 47.0 13 91.0 13 91.0 2 42.0 2 5.0 2 59.0 2 72.0 3 30.0 1 63.0 3 9.0 2 1.0 1 83.0 12 67.0 2 98.0 12 36.0 2 95.0 2 30.0 1 78.0 3 48.0 2 61.0 3 8.0 2 73.0 12]
Total: 1461.0
Mean: 29.22
Genome size: 96
Size: 97
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 5906.8347338
Median total errors in population: 1900.48135
Error averages by case: (223.77632550000052 9.431 234.8587636999989 10.341 213.60112320000005 11.485 197.68931779999994 11.641 236.43833750000042 12.497 262.62644449999806 11.007 238.83023029999765 10.865 182.7479317999989 10.662 215.07953980000156 10.722 249.14305910000178 11.028 215.71792519999929 10.697 253.40876599999723 10.847 191.90802180000074 10.462 201.67081779999876 10.754 218.87430790000036 11.394 241.2135751999996 10.516 225.62739370000043 12.259 216.95722759999927 10.967 247.53287810000072 10.773 201.48224559999946 10.864 246.41087670000212 11.241 220.4839059000003 9.966 259.5982275000022 10.996 213.78651160000007 10.685 222.6099800000006 12.661)
Error minima by case: (0.2723 1 0.884 1 0.0633 7 6.0E-4 7 0.0646 8 20.2478 2 0.7474 2 0.3972 2 0.4631 1 2.3017 3 0.1266 1 2.9194 3 0.0125 2 0.2262 1 1.1049 8 1.8609 2 1.9153 9 0.1287 2 8.021 2 1.2411 1 8.6657 3 1.2512 2 11.4929 3 2.04 2 0.0346 8)
Average genome size in population (length): 56.216
Average program size in population (points): 57.216
Average percent parens in population: 0.023
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.473
Median age in population: 1.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.735
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.735
Total error diversity:				 0.255
Error (vector) diversity:			 0.273
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2644051
--- Timings ---
Current time: 1529614897518 milliseconds
Total Time:           8.9 seconds
Initialization:       0.1 seconds,  1.3%
Reproduction:         3.9 seconds, 43.2%
Fitness Testing:      4.4 seconds, 49.1%
Report:               0.6 seconds,  6.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 64929.55000000009
Test mean error for best: 32.46478
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 
0            
Correct output: -97.8840430172 | Program output: 
-60          
Correct output: 0.4036195194   | Program output: 
21           
Correct output: 0.9852941304   | Program output: 
-13          
Correct output: -79.0645977841 | Program output: 
0            
Correct output: -130.7521921729 | Program output: 
-60          
Correct output: -97.7473834665 | Program output: 
-60          
Correct output: -17.6027584354 | Program output: 
-55          
Correct output: -28.5368508646 | Program output: 
-1           
Correct output: 116.3017366635 | Program output: 
0            
Correct output: -59.1266212998 | Program output: 
-60          
Correct output: 123.0806220037 | Program output: 
0            
Correct output: -14.0125351796 | Program output: 
-60          
Correct output: -66.7738289831 | Program output: 
-59          
Correct output: 32.104882549   | Program output: 
23           
Correct output: -98.8609111379 | Program output: 
-60          
Correct output: 33.0846749945  | Program output: 
38           
Correct output: -49.7179285444 | Program output: 
-24          
Correct output: 109.0210328362 | Program output: 
0            
Correct output: -27.1169916465 | Program output: 
-30          
Correct output: -105.6656770862 | Program output: 
-60          
Correct output: 70.3646248726  | Program output: 
0            
Correct output: 133.4928513203 | Program output: 
0            
Correct output: -61.0399967536 | Program output: 
-60          
Correct output: -65.0346338833 | Program output: 
0            
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction float_sub} {:instruction integer_add} {:instruction integer_max} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dup} {:instruction integer_add} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_pop} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_shove} {:instruction float_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_max} {:instruction in2} {:instruction print_newline} {:instruction float_flush} {:instruction float_flush} {:instruction float_cos} {:instruction float_swap} {:instruction tag_integer_284} {:instruction float_sub} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction 36.60143393103917} {:instruction print_integer})
Best program: (print_integer float_sub integer_add integer_max integer_div integer_dup_times integer_dup_times integer_mult float_rot float_dup integer_add float_mult float_stackdepth float_frominteger integer_add in2 float_pop float_stackdepth -94 float_add in1 integer_rot integer_fromfloat integer_rot float_shove integer_dec float_sin float_dup integer_dup_items integer_dup integer_dup float_shove float_add float_dec float_dup integer_mod integer_max in2 print_newline float_flush float_flush float_cos float_swap tag_integer_284 float_sub float_sin float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup 36.60143393103917 print_integer)
Errors: [8.6203 11 37.884 13 20.5964 11 13.9853 10 79.0646 13 70.7522 14 37.7474 13 37.3972 12 27.5369 14 116.3017 13 0.8734 13 123.0806 13 45.9875 13 7.7738 13 9.1049 11 38.8609 12 4.9153 11 25.7179 12 109.021 13 2.883 14 45.6657 13 70.3646 12 133.4929 13 1.04 12 65.0346 13]
Total: 1445.7021000000002
Mean: 28.914042
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4183.204479200005
Median total errors in population: 1481.0
Error averages by case: (182.22427490000035 4.955 138.53018520000023 5.329 179.79887080000037 12.254 150.81769339999997 12.929 180.37598309999936 12.965 186.98820319999962 6.094 155.3854820999993 6.036 117.6869539999996 6.132 166.83045340000066 6.103 173.47153250000042 6.662 141.62889910000018 5.518 170.70804109999938 6.496 121.34227769999966 5.937 123.87319569999975 5.538 176.89855179999964 12.014 168.34089849999992 5.89 189.40354459999935 12.622 151.6745775999999 6.291 182.04823310000015 6.141 141.60133119999986 5.646 175.32698670000036 6.829 151.12854030000017 5.681 172.1748487000004 6.635 130.76213249999952 6.12 164.81178799999944 12.554)
Error minima by case: (7.6873 1 3.884 1 0.0209 8 0.009 7 8.1846 8 6.2478 2 3.7474 2 4.3972 2 1.4645 1 42.3017 3 0.8734 1 58.0806 3 4.0125 2 0.2262 1 0.6783 8 4.8609 2 0.3015 8 0.1287 2 12.021 2 1.2411 1 11.6657 3 20.3646 2 61.0 3 1.04 2 0.7437 8)
Average genome size in population (length): 49.099
Average program size in population (points): 50.099
Average percent parens in population: 0.027
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.9155
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 41
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 41
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.107
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 3875987
--- Timings ---
Current time: 1529614900933 milliseconds
Total Time:          12.5 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.3 seconds, 42.6%
Fitness Testing:      5.9 seconds, 47.5%
Report:               1.1 seconds,  9.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 73267.14800000003
Test mean error for best: 36.63357
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: -60           
Correct output: -97.8840430172 | Program output: -60           
Correct output: 0.4036195194   | Program output: 21            
Correct output: 0.9852941304   | Program output: -13           
Correct output: -79.0645977841 | Program output: -60           
Correct output: -130.7521921729 | Program output: -60           
Correct output: -97.7473834665 | Program output: -60           
Correct output: -17.6027584354 | Program output: -55           
Correct output: -28.5368508646 | Program output: -1            
Correct output: 116.3017366635 | Program output: 12            
Correct output: -59.1266212998 | Program output: -60           
Correct output: 123.0806220037 | Program output: 3             
Correct output: -14.0125351796 | Program output: -60           
Correct output: -66.7738289831 | Program output: -59           
Correct output: 32.104882549   | Program output: 23            
Correct output: -98.8609111379 | Program output: -60           
Correct output: 33.0846749945  | Program output: 38            
Correct output: -49.7179285444 | Program output: -24           
Correct output: 109.0210328362 | Program output: 35            
Correct output: -27.1169916465 | Program output: -30           
Correct output: -105.6656770862 | Program output: -60           
Correct output: 70.3646248726  | Program output: -12           
Correct output: 133.4928513203 | Program output: 1             
Correct output: -61.0399967536 | Program output: -60           
Correct output: -65.0346338833 | Program output: -60           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction integer_min} {:instruction float_stackdepth} {:instruction float_dup} {:instruction float_shove} {:instruction float_yankdup} {:instruction float_min} {:instruction float_dup_items} {:instruction float_flush} {:instruction float_div} {:instruction -46} {:instruction integer_mod} {:instruction integer_stackdepth} {:instruction float_min} {:instruction integer_yank} {:instruction print_float} {:instruction -16} {:instruction in2} {:instruction integer_rot} {:instruction integer_inc} {:instruction -3.5343336839641353} {:instruction float_dup_times} {:instruction float_rot} {:instruction float_mod} {:instruction float_shove} {:instruction float_shove} {:instruction integer_dec} {:instruction float_sin} {:instruction float_div} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_shove} {:instruction float_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_max} {:instruction in2} {:instruction float_rot} {:instruction float_flush} {:instruction float_flush} {:instruction float_cos} {:instruction float_swap} {:instruction tag_integer_284} {:instruction float_sub} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction 36.60143393103917} {:instruction print_integer} {:instruction float_min} {:instruction float_rot} {:instruction 58} {:instruction integer_dec} {:instruction float_stackdepth} {:instruction integer_pop} {:instruction float_shove} {:instruction float_sub} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_shove} {:instruction float_dup_items} {:instruction float_rot} {:instruction float_dup_times} {:instruction in1} {:instruction float_inc} {:instruction integer_fromfloat} {:instruction float_min})
Best program: (print_integer integer_min float_stackdepth float_dup float_shove float_yankdup float_min float_dup_items float_flush float_div -46 integer_mod integer_stackdepth float_min integer_yank print_float -16 in2 integer_rot integer_inc -3.5343336839641353 float_dup_times float_rot float_mod float_shove float_shove integer_dec float_sin float_div integer_dup_items integer_dup integer_dup float_shove float_add float_dec float_dup integer_mod integer_max in2 float_rot float_flush float_flush float_cos float_swap tag_integer_284 float_sub float_sin float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup 36.60143393103917 print_integer float_min float_rot 58 integer_dec float_stackdepth integer_pop float_shove float_sub float_mult integer_stackdepth float_shove float_dup_items float_rot float_dup_times in1 float_inc integer_fromfloat float_min)
Errors: [68.6203 10 37.884 12 20.5964 11 13.9853 10 19.0646 12 70.7522 13 37.7474 12 37.3972 11 27.5369 13 104.3017 13 0.8734 12 120.0806 13 45.9875 12 7.7738 12 9.1049 11 38.8609 11 4.9153 11 25.7179 11 74.021 13 2.883 13 45.6657 12 82.3646 12 132.4929 13 1.04 11 5.0346 11]
Total: 1329.7020999999997
Mean: 26.594042
Genome size: 80
Size: 81
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3841.8365878000004
Median total errors in population: 1461.0
Error averages by case: (165.1997448 2.385 107.6604027 2.558 171.4194375 12.233 141.56435660000002 13.108 179.56770060000002 13.232 181.7686865 3.526 138.17324059999996 3.477 105.1669117 3.446 152.45620020000004 3.471 164.0512575 4.298 127.02252429999996 2.588 156.3611421 4.289 108.7419323 3.412 101.7346086 2.562 173.43700410000008 12.186 160.17728529999997 3.446 186.52232619999998 12.345 132.45428460000005 3.463 183.77497109999993 3.426 126.79058330000002 2.601 169.888601 4.421 142.0904179 3.35 154.87704369999997 4.277 107.73667259999998 3.457 163.284252 12.358)
Error minima by case: (6.6203 1 6.0 1 0.0705 7 0.0147 7 4.9354 9 20.2478 2 4.2526 2 4.0 2 27.5369 1 28.0 2 0.1266 1 37.0 2 5.0125 1 0.0 0 9.1049 9 14.8609 2 4.9153 9 21.1621 2 5.0 2 2.883 1 21.6657 3 22.3646 2 39.0 2 1.04 2 5.0346 10)
Average genome size in population (length): 39.014
Average program size in population (points): 40.014
Average percent parens in population: 0.036
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.37175
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 89
Genome diversity (% unique Plush genomes):	 0.528
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.528
Total error diversity:				 0.041
Error (vector) diversity:			 0.041
Behavioral diversity:				 0.041
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 4857137
--- Timings ---
Current time: 1529614904690 milliseconds
Total Time:          16.2 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         7.1 seconds, 43.7%
Fitness Testing:      7.5 seconds, 46.3%
Report:               1.5 seconds,  9.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 56459.189800000044
Test mean error for best: 28.22959
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 
-75          
Correct output: -97.8840430172 | Program output: 
-60          
Correct output: 0.4036195194   | Program output: 
21           
Correct output: 0.9852941304   | Program output: 
-13          
Correct output: -79.0645977841 | Program output: 
-91          
Correct output: -130.7521921729 | Program output: 
-60          
Correct output: -97.7473834665 | Program output: 
-60          
Correct output: -17.6027584354 | Program output: 
-55          
Correct output: -28.5368508646 | Program output: 
-1           
Correct output: 116.3017366635 | Program output: 
72           
Correct output: -59.1266212998 | Program output: 
-60          
Correct output: 123.0806220037 | Program output: 
63           
Correct output: -14.0125351796 | Program output: 
-60          
Correct output: -66.7738289831 | Program output: 
-59          
Correct output: 32.104882549   | Program output: 
23           
Correct output: -98.8609111379 | Program output: 
-60          
Correct output: 33.0846749945  | Program output: 
38           
Correct output: -49.7179285444 | Program output: 
-24          
Correct output: 109.0210328362 | Program output: 
95           
Correct output: -27.1169916465 | Program output: 
-30          
Correct output: -105.6656770862 | Program output: 
-60          
Correct output: 70.3646248726  | Program output: 
48           
Correct output: 133.4928513203 | Program output: 
61           
Correct output: -61.0399967536 | Program output: 
-60          
Correct output: -65.0346338833 | Program output: 
-73          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_add} {:instruction in2} {:instruction float_pop} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_shove} {:instruction float_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_max} {:instruction in2} {:instruction print_newline} {:instruction float_flush} {:instruction float_flush} {:instruction float_cos} {:instruction float_swap} {:instruction tag_integer_284} {:instruction float_sub} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc integer_add in2 float_pop float_stackdepth -94 float_add in1 integer_rot integer_fromfloat integer_rot float_shove integer_dec float_sin float_dup integer_dup_items integer_dup integer_dup float_shove float_add float_dec float_dup integer_mod integer_max in2 print_newline float_flush float_flush float_cos float_swap tag_integer_284 float_sub float_sin float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [83.6203 11 37.884 13 20.5964 11 13.9853 10 11.9354 12 70.7522 14 37.7474 13 37.3972 12 27.5369 14 44.3017 13 0.8734 13 60.0806 12 45.9875 13 7.7738 13 9.1049 11 38.8609 12 4.9153 11 25.7179 12 14.021 13 2.883 14 45.6657 13 22.3646 11 72.4929 13 1.04 12 7.9654 13]
Total: 1054.5037
Mean: 21.090075
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3970.8656661000005
Median total errors in population: 1461.0
Error averages by case: (169.90620719999998 2.627 113.93038190000007 2.842 175.1491602 12.213 145.8951561 13.033 184.19267570000005 13.215 186.73001589999987 3.804 143.70522189999988 3.72 110.60854130000008 3.681 156.61740470000012 3.73 169.35335110000003 4.557 132.24784319999995 2.87 162.33146539999993 4.555 115.36110870000005 3.656 106.62953539999994 2.818 177.02761190000007 12.163 165.11035009999995 3.676 189.7811531999999 12.29 137.0175254000001 3.697 188.5757564 3.711 131.2138038 2.904 174.75901910000005 4.658 147.4343871 3.588 161.1101036 4.531 113.4496440999999 3.689 168.13724270000006 12.363)
Error minima by case: (8.6203 1 6.0 1 0.0633 8 0.9853 9 6.9167 8 20.2478 2 4.2526 2 0.5493 2 11.4834 1 28.0 2 0.8734 1 37.0 2 3.0409 1 0.0 0 9.1049 9 26.7131 2 4.9153 10 4.9689 2 5.0 2 2.883 1 27.6657 3 22.3646 2 39.0 2 1.04 2 5.0346 8)
Average genome size in population (length): 36.778
Average program size in population (points): 37.778
Average percent parens in population: 0.038
Minimum age in population: 4.0
Maximum age in population: 7.625
Average age in population: 5.843375
Median age in population: 5.875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.578
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.578
Total error diversity:				 0.037
Error (vector) diversity:			 0.037
Behavioral diversity:				 0.039
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 5781987
--- Timings ---
Current time: 1529614908155 milliseconds
Total Time:          19.8 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         8.7 seconds, 43.8%
Fitness Testing:      9.0 seconds, 45.6%
Report:               2.0 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 56459.189800000044
Test mean error for best: 28.22959
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 
-75          
Correct output: -97.8840430172 | Program output: 
-60          
Correct output: 0.4036195194   | Program output: 
21           
Correct output: 0.9852941304   | Program output: 
-13          
Correct output: -79.0645977841 | Program output: 
-91          
Correct output: -130.7521921729 | Program output: 
-60          
Correct output: -97.7473834665 | Program output: 
-60          
Correct output: -17.6027584354 | Program output: 
-55          
Correct output: -28.5368508646 | Program output: 
-1           
Correct output: 116.3017366635 | Program output: 
72           
Correct output: -59.1266212998 | Program output: 
-60          
Correct output: 123.0806220037 | Program output: 
63           
Correct output: -14.0125351796 | Program output: 
-60          
Correct output: -66.7738289831 | Program output: 
-59          
Correct output: 32.104882549   | Program output: 
23           
Correct output: -98.8609111379 | Program output: 
-60          
Correct output: 33.0846749945  | Program output: 
38           
Correct output: -49.7179285444 | Program output: 
-24          
Correct output: 109.0210328362 | Program output: 
95           
Correct output: -27.1169916465 | Program output: 
-30          
Correct output: -105.6656770862 | Program output: 
-60          
Correct output: 70.3646248726  | Program output: 
48           
Correct output: 133.4928513203 | Program output: 
61           
Correct output: -61.0399967536 | Program output: 
-60          
Correct output: -65.0346338833 | Program output: 
-73          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_add} {:instruction in2} {:instruction float_pop} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_shove} {:instruction float_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_max} {:instruction in2} {:instruction print_newline} {:instruction float_flush} {:instruction float_flush} {:instruction float_cos} {:instruction float_swap} {:instruction tag_integer_284} {:instruction float_sub} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc integer_add in2 float_pop float_stackdepth -94 float_add in1 integer_rot integer_fromfloat integer_rot float_shove integer_dec float_sin float_dup integer_dup_items integer_dup integer_dup float_shove float_add float_dec float_dup integer_mod integer_max in2 print_newline float_flush float_flush float_cos float_swap tag_integer_284 float_sub float_sin float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [83.6203 11 37.884 13 20.5964 11 13.9853 10 11.9354 12 70.7522 14 37.7474 13 37.3972 12 27.5369 14 44.3017 13 0.8734 13 60.0806 12 45.9875 13 7.7738 13 9.1049 11 38.8609 12 4.9153 11 25.7179 12 14.021 13 2.883 14 45.6657 13 22.3646 11 72.4929 13 1.04 12 7.9654 13]
Total: 1054.5037
Mean: 21.090075
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 4591.807329900002
Median total errors in population: 1461.0
Error averages by case: (191.38672410000018 3.653 141.95729090000015 4.14 193.9908580000001 12.106 168.11067950000006 12.676 205.39270600000032 13.124 207.76294839999971 5.002 167.5483410999997 4.877 139.02080160000014 4.757 178.5811990000004 4.913 197.87915430000032 5.599 155.32587239999992 4.189 192.36711429999963 5.579 143.3475904 4.713 133.8661198999998 3.989 195.5620771000003 11.998 186.67003019999993 4.73 206.40089329999975 12.065 161.65326149999999 4.785 213.73726350000007 4.856 154.88125260000004 4.287 195.63282210000023 5.71 175.12913410000007 4.616 192.3275261000002 5.506 138.58856869999974 4.759 189.68410080000024 12.374)
Error minima by case: (4.12 1 6.0 1 0.4036 9 0.7142 8 8.0112 9 10.7522 2 4.2526 2 0.5493 2 11.4834 1 44.3017 3 0.1266 1 60.0806 3 2.9875 1 0.0 0 2.1049 10 21.1391 2 4.9153 8 10.2821 2 14.021 2 2.883 1 14.3343 3 16.3646 2 60.0 2 1.04 2 5.0346 8)
Average genome size in population (length): 36.359
Average program size in population (points): 37.359
Average percent parens in population: 0.039
Minimum age in population: 5.0
Maximum age in population: 9.125
Average age in population: 7.2609375
Median age in population: 7.3125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.615
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.615
Total error diversity:				 0.058
Error (vector) diversity:			 0.058
Behavioral diversity:				 0.06
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 6694787
--- Timings ---
Current time: 1529614911192 milliseconds
Total Time:          22.8 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.1 seconds, 44.1%
Fitness Testing:     10.3 seconds, 45.3%
Report:               2.3 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 51954.410200000035
Test mean error for best: 25.97721
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 

-75         
Correct output: -97.8840430172 | Program output: 

-67         
Correct output: 0.4036195194   | Program output: 

21          
Correct output: 0.9852941304   | Program output: 

-13         
Correct output: -79.0645977841 | Program output: 

-91         
Correct output: -130.7521921729 | Program output: 

-151        
Correct output: -97.7473834665 | Program output: 

-102        
Correct output: -17.6027584354 | Program output: 

-55         
Correct output: -28.5368508646 | Program output: 

-1          
Correct output: 116.3017366635 | Program output: 

72          
Correct output: -59.1266212998 | Program output: 

-90         
Correct output: 123.0806220037 | Program output: 

63          
Correct output: -14.0125351796 | Program output: 

-69         
Correct output: -66.7738289831 | Program output: 

-59         
Correct output: 32.104882549   | Program output: 

23          
Correct output: -98.8609111379 | Program output: 

-127        
Correct output: 33.0846749945  | Program output: 

38          
Correct output: -49.7179285444 | Program output: 

-24         
Correct output: 109.0210328362 | Program output: 

95          
Correct output: -27.1169916465 | Program output: 

-30         
Correct output: -105.6656770862 | Program output: 

-138        
Correct output: 70.3646248726  | Program output: 

48          
Correct output: 133.4928513203 | Program output: 

61          
Correct output: -61.0399967536 | Program output: 

-68         
Correct output: -65.0346338833 | Program output: 

-73         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction float_sub} {:instruction integer_add} {:instruction integer_max} {:instruction integer_div} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dup} {:instruction integer_add} {:instruction float_mult} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_sub} {:instruction float_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_max} {:instruction in2} {:instruction print_newline} {:instruction float_flush} {:instruction float_flush} {:instruction float_cos} {:instruction float_swap} {:instruction tag_integer_284} {:instruction float_sub} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction print_newline} {:instruction float_yankdup} {:instruction 36.60143393103917} {:instruction print_integer})
Best program: (print_integer float_sub integer_add integer_max integer_div integer_dup_times integer_dup_times integer_mult float_rot float_dup integer_add float_mult float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot integer_fromfloat integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_dup integer_dup float_sub float_add float_dec float_dup integer_mod integer_max in2 print_newline float_flush float_flush float_cos float_swap tag_integer_284 float_sub float_sin float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup print_newline float_yankdup 36.60143393103917 print_integer)
Errors: [83.6203 11 30.884 13 20.5964 11 13.9853 10 11.9354 12 20.2478 13 4.2526 14 37.3972 12 27.5369 14 44.3017 13 30.8734 13 60.0806 12 54.9875 13 7.7738 13 9.1049 11 28.1391 12 4.9153 12 25.7179 12 14.021 13 2.883 14 32.3343 14 22.3646 11 72.4929 13 6.96 13 7.9654 13]
Total: 987.3713
Mean: 19.747425
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 4260.9544031000005
Median total errors in population: 1458.0
Error averages by case: (174.34725610000035 6.249 140.13851880000036 7.543 161.30329570000015 11.906 144.44304600000012 11.797 185.92798230000074 12.935 189.63863649999934 8.064 154.54978989999915 7.889 133.2701359000007 7.426 156.77767960000133 8.061 191.62780580000123 8.316 139.37818789999957 7.566 190.79850209999853 8.273 141.10958280000025 7.445 125.01899799999936 7.026 160.6866891000011 11.63 168.9893031999999 7.403 166.87527289999898 11.577 147.01782490000025 7.526 197.8821223000004 7.83 135.07235570000034 7.947 176.72047920000063 8.393 167.2826449000003 7.291 194.37972040000113 8.035 126.77406269999939 7.485 172.92351040000082 12.408)
Error minima by case: (3.3797 1 7.0 1 0.0209 9 0.0147 8 3.0646 11 20.2478 2 4.2526 2 4.0 2 17.5369 2 4.6983 3 0.1266 1 60.0806 3 5.0125 1 0.0 0 2.1049 9 22.8609 2 4.9153 11 10.2821 2 14.021 2 1.883 1 27.6657 3 17.3646 2 60.0 2 1.04 2 5.0346 10)
Average genome size in population (length): 42.7
Average program size in population (points): 43.7
Average percent parens in population: 0.032
Minimum age in population: 6.5
Maximum age in population: 10.28125
Average age in population: 8.63325
Median age in population: 8.6875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 89
Genome diversity (% unique Plush genomes):	 0.583
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 89
Syntactic diversity (% unique Push programs):	 0.583
Total error diversity:				 0.082
Error (vector) diversity:			 0.084
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 7763762
--- Timings ---
Current time: 1529614914444 milliseconds
Total Time:          26.0 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.7 seconds, 45.0%
Fitness Testing:     11.5 seconds, 44.3%
Report:               2.7 seconds, 10.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 54097.37180000003
Test mean error for best: 27.04869
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 
-60          
Correct output: -97.8840430172 | Program output: 
-67          
Correct output: 0.4036195194   | Program output: 
21           
Correct output: 0.9852941304   | Program output: 
-13          
Correct output: -79.0645977841 | Program output: 
-60          
Correct output: -130.7521921729 | Program output: 
-151         
Correct output: -97.7473834665 | Program output: 
-102         
Correct output: -17.6027584354 | Program output: 
-55          
Correct output: -28.5368508646 | Program output: 
-1           
Correct output: 116.3017366635 | Program output: 
72           
Correct output: -59.1266212998 | Program output: 
-90          
Correct output: 123.0806220037 | Program output: 
63           
Correct output: -14.0125351796 | Program output: 
-69          
Correct output: -66.7738289831 | Program output: 
-59          
Correct output: 32.104882549   | Program output: 
23           
Correct output: -98.8609111379 | Program output: 
-127         
Correct output: 33.0846749945  | Program output: 
38           
Correct output: -49.7179285444 | Program output: 
-24          
Correct output: 109.0210328362 | Program output: 
95           
Correct output: -27.1169916465 | Program output: 
-30          
Correct output: -105.6656770862 | Program output: 
-138         
Correct output: 70.3646248726  | Program output: 
48           
Correct output: 133.4928513203 | Program output: 
61           
Correct output: -61.0399967536 | Program output: 
-68          
Correct output: -65.0346338833 | Program output: 
-60          
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_integer} {:instruction float_sub} {:instruction integer_add} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_add} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_shove} {:instruction float_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_max} {:instruction in2} {:instruction print_newline} {:instruction float_flush} {:instruction float_flush} {:instruction float_cos} {:instruction float_swap} {:instruction tag_integer_284} {:instruction float_sub} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (print_integer float_sub integer_add integer_pop integer_div float_swap float_sub integer_mult integer_inc integer_add in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove integer_dec float_sin float_dup integer_dup_items integer_dup_items integer_dup integer_dup float_shove float_add float_dec float_dup integer_mod integer_max in2 print_newline float_flush float_flush float_cos float_swap tag_integer_284 float_sub float_sin float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [68.6203 10 30.884 13 20.5964 11 13.9853 10 19.0646 13 20.2478 12 4.2526 14 37.3972 12 27.5369 14 44.3017 13 30.8734 13 60.0806 12 54.9875 13 7.7738 13 9.1049 11 28.1391 12 4.9153 11 25.7179 12 14.021 13 2.883 14 32.3343 13 22.3646 11 72.4929 13 6.96 13 5.0346 12]
Total: 972.5696999999999
Mean: 19.451393
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3125.5241557000018
Median total errors in population: 1445.7021000000002
Error averages by case: (128.21508709999867 10.206 107.58910700000094 12.078 92.5040451999995 11.172 88.36529700000023 10.517 116.45792689999966 12.458 129.7201066000007 12.521 102.75177129999929 12.41 103.32976560000111 11.427 102.6189998000013 12.758 159.97259680000116 12.446 86.02469379999891 12.137 168.32967009999805 12.272 111.4080374000012 11.994 87.7310209999998 12.033 90.85917030000056 11.124 110.6981190999999 11.329 89.3143535999993 11.368 103.07246940000164 11.62 152.80108319999866 12.353 83.73645430000059 12.944 116.50187979999946 12.315 132.50183550000062 11.287 177.7379565000015 12.36 79.12276069999984 11.562 107.11694769999984 12.352)
Error minima by case: (0.6203 1 7.884 2 0.4036 8 0.0147 9 3.0646 9 10.7522 2 1.2526 2 0.6028 2 0.5369 2 44.3017 3 0.1266 2 60.0806 3 5.0125 1 0.0 0 8.1049 9 7.1391 2 2.9153 10 0.7179 2 14.021 2 0.117 2 0.3343 3 22.3646 2 60.0 2 0.96 2 5.0346 9)
Average genome size in population (length): 62.295
Average program size in population (points): 63.295
Average percent parens in population: 0.018
Minimum age in population: 7.5
Maximum age in population: 11.8125
Average age in population: 9.98571875
Median age in population: 10.015625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 48
Genome diversity (% unique Plush genomes):	 0.702
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 48
Syntactic diversity (% unique Push programs):	 0.702
Total error diversity:				 0.153
Error (vector) diversity:			 0.155
Behavioral diversity:				 0.159
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 9321187
--- Timings ---
Current time: 1529614917936 milliseconds
Total Time:          29.5 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.3 seconds, 45.1%
Fitness Testing:     13.0 seconds, 44.2%
Report:               3.0 seconds, 10.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 50902.407000000014
Test mean error for best: 25.45120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: -75           
Correct output: -97.8840430172 | Program output: -67           
Correct output: 0.4036195194   | Program output: 21            
Correct output: 0.9852941304   | Program output: -13           
Correct output: -79.0645977841 | Program output: -91           
Correct output: -130.7521921729 | Program output: -120          
Correct output: -97.7473834665 | Program output: -102          
Correct output: -17.6027584354 | Program output: -55           
Correct output: -28.5368508646 | Program output: -1            
Correct output: 116.3017366635 | Program output: 72            
Correct output: -59.1266212998 | Program output: -90           
Correct output: 123.0806220037 | Program output: 63            
Correct output: -14.0125351796 | Program output: -69           
Correct output: -66.7738289831 | Program output: -59           
Correct output: 32.104882549   | Program output: 23            
Correct output: -98.8609111379 | Program output: -120          
Correct output: 33.0846749945  | Program output: 38            
Correct output: -49.7179285444 | Program output: -24           
Correct output: 109.0210328362 | Program output: 95            
Correct output: -27.1169916465 | Program output: -30           
Correct output: -105.6656770862 | Program output: -120          
Correct output: 70.3646248726  | Program output: 48            
Correct output: 133.4928513203 | Program output: 61            
Correct output: -61.0399967536 | Program output: -68           
Correct output: -65.0346338833 | Program output: -73           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_add} {:instruction in2} {:instruction float_pop} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_shove} {:instruction float_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction tag_integer_284} {:instruction float_sub} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc integer_add in2 float_pop float_stackdepth -94 float_add in1 integer_rot integer_fromfloat integer_rot float_shove integer_dec float_sin float_dup integer_dup_items integer_dup integer_dup float_shove float_add float_dec float_dup integer_mod tag_integer_284 float_sub float_sin float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [83.6203 11 30.884 12 20.5964 11 13.9853 10 11.9354 11 10.7522 12 4.2526 13 37.3972 11 27.5369 13 44.3017 13 30.8734 12 60.0806 12 54.9875 12 7.7738 12 9.1049 11 21.1391 12 4.9153 11 25.7179 11 14.021 13 2.883 13 14.3343 12 22.3646 11 72.4929 13 6.96 12 7.9654 12]
Total: 936.8756999999999
Mean: 18.737514
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2761.9731823000006
Median total errors in population: 1329.7020999999997
Error averages by case: (127.48234519999825 10.867 100.33900400000083 12.814 81.83283999999986 11.026 76.68728450000022 10.314 83.00985260000024 12.201 121.70704580000101 13.447 94.75078619999896 13.086 96.02558160000102 12.079 89.37493510000111 13.547 130.76899459999896 13.067 72.87955779999882 12.902 141.11868339999992 12.54 100.66621250000125 12.78 78.84734840000039 12.909 78.7979483000001 11.038 101.37168669999983 12.022 75.3990269999997 11.347 93.40993100000176 12.275 124.52169799999734 13.027 73.04360800000067 13.72 105.13612049999924 13.009 107.12063020000065 11.549 151.26783310000002 13.027 70.76312000000004 12.233 76.26210780000012 12.563)
Error minima by case: (3.3797 9 3.884 10 0.4036 9 0.0147 9 3.0646 10 10.7522 11 1.2526 11 1.6028 9 12.5369 11 15.6983 11 0.1266 11 0.0806 10 1.9875 10 0.2262 10 8.1049 10 4.8609 10 2.9153 10 3.7179 10 14.021 11 1.883 11 0.3343 10 22.3646 9 12.4929 11 0.04 10 4.0346 11)
Average genome size in population (length): 61.336
Average program size in population (points): 62.336
Average percent parens in population: 0.016
Minimum age in population: 9.25
Maximum age in population: 13.2734375
Average age in population: 11.4364609375
Median age in population: 11.484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 115
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 115
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.185
Error (vector) diversity:			 0.189
Behavioral diversity:				 0.201
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 10854737
--- Timings ---
Current time: 1529614921146 milliseconds
Total Time:          32.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.8 seconds, 45.1%
Fitness Testing:     14.4 seconds, 43.9%
Report:               3.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 50902.407000000014
Test mean error for best: 25.45120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: -75           
Correct output: -97.8840430172 | Program output: -67           
Correct output: 0.4036195194   | Program output: 21            
Correct output: 0.9852941304   | Program output: -13           
Correct output: -79.0645977841 | Program output: -91           
Correct output: -130.7521921729 | Program output: -120          
Correct output: -97.7473834665 | Program output: -102          
Correct output: -17.6027584354 | Program output: -55           
Correct output: -28.5368508646 | Program output: -1            
Correct output: 116.3017366635 | Program output: 72            
Correct output: -59.1266212998 | Program output: -90           
Correct output: 123.0806220037 | Program output: 63            
Correct output: -14.0125351796 | Program output: -69           
Correct output: -66.7738289831 | Program output: -59           
Correct output: 32.104882549   | Program output: 23            
Correct output: -98.8609111379 | Program output: -120          
Correct output: 33.0846749945  | Program output: 38            
Correct output: -49.7179285444 | Program output: -24           
Correct output: 109.0210328362 | Program output: 95            
Correct output: -27.1169916465 | Program output: -30           
Correct output: -105.6656770862 | Program output: -120          
Correct output: 70.3646248726  | Program output: 48            
Correct output: 133.4928513203 | Program output: 61            
Correct output: -61.0399967536 | Program output: -68           
Correct output: -65.0346338833 | Program output: -73           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction in2} {:instruction float_pop} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_shove} {:instruction float_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction tag_integer_284} {:instruction float_sub} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult in2 float_pop float_stackdepth -94 float_add in1 integer_rot integer_fromfloat integer_rot float_shove integer_dec float_sin float_dup integer_dup_items integer_dup integer_dup float_shove float_add float_dec float_dup integer_mod tag_integer_284 float_sub float_sin float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [83.6203 11 30.884 12 20.5964 11 13.9853 10 11.9354 11 10.7522 12 4.2526 13 37.3972 11 27.5369 13 44.3017 13 30.8734 12 60.0806 12 54.9875 12 7.7738 12 9.1049 11 21.1391 12 4.9153 11 25.7179 11 14.021 13 2.883 13 14.3343 12 22.3646 11 72.4929 13 6.96 12 7.9654 12]
Total: 936.8756999999999
Mean: 18.737514
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2525.3099632000008
Median total errors in population: 1054.5037
Error averages by case: (123.67972489999819 10.975 98.00477200000095 12.967 78.2657859999997 11.021 71.14016690000021 10.292 68.9390126000006 12.173 117.30590500000093 13.593 91.41846819999928 13.272 88.11767520000102 12.238 85.51704950000087 13.713 104.8304251999998 13.111 71.49548099999875 13.058 117.65105360000092 12.338 100.02996250000139 12.971 72.46957460000046 13.061 73.49515809999988 11.044 96.92414549999984 12.147 71.72817999999968 11.352 86.04980450000171 12.379 88.73107599999858 13.035 65.85004500000078 13.851 102.28952149999937 13.195 80.27855760000065 11.317 128.41721239999825 13.031 66.89200000000038 12.41 64.38020540000043 12.865)
Error minima by case: (3.3797 10 2.884 10 0.4036 10 0.0147 9 3.0646 10 10.7522 11 1.2526 11 1.6028 11 6.4631 11 44.3017 11 0.1266 11 58.0806 11 5.0125 11 0.2262 11 8.1049 10 3.8609 10 2.9153 10 8.2821 10 13.021 12 1.883 11 10.6657 12 22.3646 10 56.4929 12 0.04 11 4.0346 11)
Average genome size in population (length): 56.091
Average program size in population (points): 57.091
Average percent parens in population: 0.018
Minimum age in population: 10.25
Maximum age in population: 14.7734375
Average age in population: 12.835765625
Median age in population: 12.85546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 207
Genome diversity (% unique Plush genomes):	 0.619
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 207
Syntactic diversity (% unique Push programs):	 0.619
Total error diversity:				 0.182
Error (vector) diversity:			 0.183
Behavioral diversity:				 0.192
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 12257112
--- Timings ---
Current time: 1529614924394 milliseconds
Total Time:          36.1 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.4 seconds, 45.5%
Fitness Testing:     15.7 seconds, 43.4%
Report:               3.9 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 50902.407000000014
Test mean error for best: 25.45120
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: -75           
Correct output: -97.8840430172 | Program output: -67           
Correct output: 0.4036195194   | Program output: 21            
Correct output: 0.9852941304   | Program output: -13           
Correct output: -79.0645977841 | Program output: -91           
Correct output: -130.7521921729 | Program output: -120          
Correct output: -97.7473834665 | Program output: -102          
Correct output: -17.6027584354 | Program output: -55           
Correct output: -28.5368508646 | Program output: -1            
Correct output: 116.3017366635 | Program output: 72            
Correct output: -59.1266212998 | Program output: -90           
Correct output: 123.0806220037 | Program output: 63            
Correct output: -14.0125351796 | Program output: -69           
Correct output: -66.7738289831 | Program output: -59           
Correct output: 32.104882549   | Program output: 23            
Correct output: -98.8609111379 | Program output: -120          
Correct output: 33.0846749945  | Program output: 38            
Correct output: -49.7179285444 | Program output: -24           
Correct output: 109.0210328362 | Program output: 95            
Correct output: -27.1169916465 | Program output: -30           
Correct output: -105.6656770862 | Program output: -120          
Correct output: 70.3646248726  | Program output: 48            
Correct output: 133.4928513203 | Program output: 61            
Correct output: -61.0399967536 | Program output: -68           
Correct output: -65.0346338833 | Program output: -73           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction in2} {:instruction float_pop} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_shove} {:instruction float_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction tag_integer_284} {:instruction float_sub} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult in2 float_pop float_stackdepth -94 float_add in1 integer_rot integer_fromfloat integer_rot float_shove integer_dec float_sin float_dup integer_dup_items integer_dup integer_dup float_shove float_add float_dec float_dup integer_mod tag_integer_284 float_sub float_sin float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [83.6203 11 30.884 12 20.5964 11 13.9853 10 11.9354 11 10.7522 12 4.2526 13 37.3972 11 27.5369 13 44.3017 13 30.8734 12 60.0806 12 54.9875 12 7.7738 12 9.1049 11 21.1391 12 4.9153 11 25.7179 11 14.021 13 2.883 13 14.3343 12 22.3646 11 72.4929 13 6.96 12 7.9654 12]
Total: 936.8756999999999
Mean: 18.737514
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2490.4745592000013
Median total errors in population: 1054.5037
Error averages by case: (120.7287774999985 10.943 98.27993200000063 12.989 80.5862383999999 11.023 73.95341680000021 10.273 63.07172060000031 12.171 105.96987540000015 13.243 84.95330460000005 13.534 91.5185912000009 12.229 87.62343880000078 13.741 96.57283880000021 13.096 81.30968299999869 13.063 110.0426984000009 12.299 105.88353750000141 12.978 75.36361040000038 13.053 75.32521399999966 11.048 96.06119930000001 12.167 72.90996140000006 11.497 87.59621500000156 12.355 73.29424400000016 13.034 67.83095000000074 13.863 100.36768889999993 13.345 72.79674520000067 11.281 121.32915559999837 13.017 70.67875999999991 12.666 64.68876240000029 12.83)
Error minima by case: (0.6203 10 2.884 11 0.4036 8 0.0147 8 4.9354 11 1.2478 11 2.7474 11 4.3972 11 25.5369 11 21.3017 12 0.1266 10 28.0806 11 3.9875 11 0.2262 12 8.1049 9 3.8609 10 2.9153 11 10.2821 10 13.021 10 1.883 11 10.6657 12 21.3646 10 38.4929 12 0.04 11 5.0346 11)
Average genome size in population (length): 58.418
Average program size in population (points): 59.418
Average percent parens in population: 0.017
Minimum age in population: 11.421875
Maximum age in population: 16.328125
Average age in population: 14.464595703125
Median age in population: 14.5224609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 82
Genome diversity (% unique Plush genomes):	 0.669
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 82
Syntactic diversity (% unique Push programs):	 0.669
Total error diversity:				 0.215
Error (vector) diversity:			 0.218
Behavioral diversity:				 0.23
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 13717562
--- Timings ---
Current time: 1529614927572 milliseconds
Total Time:          39.2 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.9 seconds, 45.7%
Fitness Testing:     17.0 seconds, 43.3%
Report:               4.2 seconds, 10.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 26127.4102
Test mean error for best: 13.06371
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 

8           
Correct output: -97.8840430172 | Program output: 

-67         
Correct output: 0.4036195194   | Program output: 

21          
Correct output: 0.9852941304   | Program output: 

-13         
Correct output: -79.0645977841 | Program output: 

-80         
Correct output: -130.7521921729 | Program output: 

-151        
Correct output: -97.7473834665 | Program output: 

-102        
Correct output: -17.6027584354 | Program output: 

-55         
Correct output: -28.5368508646 | Program output: 

-1          
Correct output: 116.3017366635 | Program output: 

116         
Correct output: -59.1266212998 | Program output: 

-90         
Correct output: 123.0806220037 | Program output: 

123         
Correct output: -14.0125351796 | Program output: 

-69         
Correct output: -66.7738289831 | Program output: 

-59         
Correct output: 32.104882549   | Program output: 

23          
Correct output: -98.8609111379 | Program output: 

-127        
Correct output: 33.0846749945  | Program output: 

38          
Correct output: -49.7179285444 | Program output: 

-24         
Correct output: 109.0210328362 | Program output: 

109         
Correct output: -27.1169916465 | Program output: 

-30         
Correct output: -105.6656770862 | Program output: 

-138        
Correct output: 70.3646248726  | Program output: 

70          
Correct output: 133.4928513203 | Program output: 

133         
Correct output: -61.0399967536 | Program output: 

-68         
Correct output: -65.0346338833 | Program output: 

-66         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_dup} {:instruction integer_dup} {:instruction float_sub} {:instruction float_add} {:instruction float_dec} {:instruction float_dup} {:instruction integer_mod} {:instruction integer_max} {:instruction in2} {:instruction print_newline} {:instruction float_flush} {:instruction float_flush} {:instruction float_cos} {:instruction float_swap} {:instruction tag_integer_284} {:instruction float_sub} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction print_newline} {:instruction float_yankdup} {:instruction 36.60143393103917} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot integer_fromfloat integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_dup integer_dup float_sub float_add float_dec float_dup integer_mod integer_max in2 print_newline float_flush float_flush float_cos float_swap tag_integer_284 float_sub float_sin float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup print_newline float_yankdup 36.60143393103917 print_integer)
Errors: [0.6203 11 30.884 13 20.5964 11 13.9853 10 0.9354 13 20.2478 13 4.2526 14 37.3972 12 27.5369 14 0.3017 12 30.8734 13 0.0806 12 54.9875 13 7.7738 13 9.1049 11 28.1391 12 4.9153 12 25.7179 12 0.021 12 2.883 14 32.3343 14 0.3646 12 0.4929 11 6.96 13 0.9654 13]
Total: 672.3713
Mean: 13.447426
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3033.5424553000007
Median total errors in population: 987.3713
Error averages by case: (131.79529629999806 10.908 121.43694800000159 13.022 111.74217919999874 11.08 105.11276960000022 10.3 76.20179560000044 12.263 115.69696019999947 12.811 100.8088022000013 13.798 124.702984000002 12.221 117.87599600000202 13.778 106.54131329999956 13.065 115.29112539999848 13.048 119.59940880000089 12.296 136.05701250000112 13.001 101.9599081999991 13.052 104.57685720000113 11.08 117.50848630000017 12.265 102.11869359999842 11.541 117.08960020000178 12.323 80.6449289999993 13.049 97.58022800000087 13.873 120.16523990000073 13.381 83.96427620000067 11.302 130.7452691999983 13.038 98.02504000000094 12.94 84.06333640000021 12.803)
Error minima by case: (0.6203 10 7.884 10 0.4036 10 0.0147 10 0.9354 11 8.7522 11 3.2526 12 4.3972 11 26.5369 11 0.3017 12 0.1266 11 0.0806 11 4.0125 11 0.2262 11 0.8951 10 7.8609 11 0.9153 11 10.2821 11 0.021 12 1.883 11 13.3343 12 0.3646 10 0.4929 11 0.04 11 0.9654 11)
Average genome size in population (length): 61.426
Average program size in population (points): 62.426
Average percent parens in population: 0.016
Minimum age in population: 13.05078125
Maximum age in population: 17.8232421875
Average age in population: 16.1069892578125
Median age in population: 16.18310546875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.218
Error (vector) diversity:			 0.222
Behavioral diversity:				 0.232
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 15253312
--- Timings ---
Current time: 1529614931222 milliseconds
Total Time:          42.6 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        19.4 seconds, 45.4%
Fitness Testing:     18.6 seconds, 43.7%
Report:               4.5 seconds, 10.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 26078.893199999995
Test mean error for best: 13.03945
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -67           
Correct output: 0.4036195194   | Program output: 21            
Correct output: 0.9852941304   | Program output: -13           
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -120          
Correct output: -97.7473834665 | Program output: -102          
Correct output: -17.6027584354 | Program output: -55           
Correct output: -28.5368508646 | Program output: -1            
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -90           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -69           
Correct output: -66.7738289831 | Program output: -59           
Correct output: 32.104882549   | Program output: 23            
Correct output: -98.8609111379 | Program output: -120          
Correct output: 33.0846749945  | Program output: 38            
Correct output: -49.7179285444 | Program output: -24           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -30           
Correct output: -105.6656770862 | Program output: -120          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -68           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_flush} {:instruction float_flush} {:instruction float_cos} {:instruction float_swap} {:instruction tag_integer_284} {:instruction float_sub} {:instruction float_sin} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction 36.60143393103917} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot integer_fromfloat integer_rot float_shove integer_dec integer_dup_times float_flush float_flush float_cos float_swap tag_integer_284 float_sub float_sin integer_max -60 float_shove integer_add float_dup_times float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_yank integer_yankdup float_inc float_yankdup 36.60143393103917 print_integer)
Errors: [0.6203 11 30.884 12 20.5964 11 13.9853 10 0.9354 12 10.7522 12 4.2526 13 37.3972 11 27.5369 13 0.3017 11 30.8734 12 0.0806 11 54.9875 12 7.7738 12 9.1049 11 21.1391 12 4.9153 11 25.7179 11 0.021 11 2.883 13 14.3343 12 0.3646 11 0.4929 11 6.96 12 0.9654 11]
Total: 616.8757
Mean: 12.337514
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2819.2649413999998
Median total errors in population: 982.4404999999999
Error averages by case: (139.78340909999895 10.822 105.9439760000011 12.933 95.80873959999899 11.058 89.11013750000023 10.256 85.4301936000005 12.291 96.43228439999994 12.62 83.80637720000145 13.787 108.00628320000168 12.113 102.17071370000173 13.742 114.35689969999964 13.065 102.2434411999983 12.97 127.7818446000009 12.309 122.62865000000163 12.92 84.91106279999941 12.976 88.65436790000103 11.056 101.05926480000022 12.353 85.76374549999873 11.341 101.63472670000183 12.236 89.57971899999845 13.03 81.51106900000094 13.842 101.547370400001 13.138 91.92608860000065 11.315 138.77781889999898 13.033 82.97664000000088 12.904 86.67711800000014 12.633)
Error minima by case: (0.6203 9 7.884 9 0.4036 9 0.0147 9 0.9354 10 0.2478 10 3.2526 12 0.6028 9 11.5369 11 0.3017 11 0.1266 11 0.0806 11 2.9875 9 0.2262 11 8.1049 8 10.8609 9 3.9153 9 8.2821 10 0.021 9 1.883 11 13.3343 11 0.3646 10 0.4929 11 1.04 9 0.9654 10)
Average genome size in population (length): 60.344
Average program size in population (points): 61.344
Average percent parens in population: 0.017
Minimum age in population: 14.720703125
Maximum age in population: 19.6142578125
Average age in population: 17.67831103515625
Median age in population: 17.730712890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.217
Error (vector) diversity:			 0.221
Behavioral diversity:				 0.226
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 16762012
--- Timings ---
Current time: 1529614934648 milliseconds
Total Time:          46.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.9 seconds, 45.1%
Fitness Testing:     20.2 seconds, 43.6%
Report:               5.1 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2626.3669899999954
Median total errors in population: 953.8756999999999
Error averages by case: (128.6702323999983 10.929 100.77155600000081 12.76 90.48672679999962 11.052 81.52688760000022 10.261 74.35165600000057 12.017 89.80279940000072 12.698 79.36702060000088 13.601 102.50279240000144 11.974 94.18117680000111 13.554 102.81131329999992 13.045 96.63287219999842 12.823 115.82748940000083 12.247 115.41518750000144 12.749 82.36196759999999 12.84 84.49678750000047 11.051 94.5780129000002 12.454 81.78514989999934 11.343 94.74029090000165 12.095 79.04992899999931 13.002 74.64134500000075 13.666 92.16036170000092 12.965 79.45737000000065 11.264 126.6287478999984 12.988 77.72932000000053 12.72 77.6439972000002 12.648)
Error minima by case: (0.6203 6 0.884 5 0.4036 9 0.0147 9 0.9354 10 0.7522 7 0.7474 7 0.6028 6 0.5369 6 0.3017 7 0.1266 5 0.0806 7 0.0125 6 0.2262 5 0.8951 10 0.8609 7 0.9153 11 0.7179 6 0.021 6 0.117 5 0.6657 8 0.3646 6 0.4929 7 0.04 6 0.9654 11)
Average genome size in population (length): 60.629
Average program size in population (points): 61.629
Average percent parens in population: 0.016
Minimum age in population: 16.03369140625
Maximum age in population: 21.01611328125
Average age in population: 19.25714990234375
Median age in population: 19.3084716796875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.214
Error (vector) diversity:			 0.218
Behavioral diversity:				 0.226
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 18277912
--- Timings ---
Current time: 1529614937939 milliseconds
Total Time:          49.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.4 seconds, 45.2%
Fitness Testing:     21.5 seconds, 43.5%
Report:               5.5 seconds, 11.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3224.714460699997
Median total errors in population: 949.9448999999998
Error averages by case: (147.92404069999967 11.027 126.36599200000187 12.573 115.11217969999875 11.079 108.25141680000024 10.337 97.14448540000085 11.798 115.38441680000116 12.639 106.3253624000015 13.293 127.37193240000205 11.819 121.01155320000241 13.314 123.17703729999896 13.015 119.77387359999844 12.634 135.15432090000064 12.278 137.97405000000097 12.548 109.93007499999882 12.652 109.77251800000177 11.079 119.30358040000021 12.353 107.18637899999834 11.395 121.07242120000197 11.952 101.43061079999775 12.959 102.0140140000009 13.418 116.25028920000094 12.809 102.85539680000066 11.338 144.93519909999947 12.929 103.37700000000125 12.514 99.39431600000039 12.47)
Error minima by case: (0.6203 9 0.884 10 0.4036 10 0.0147 9 0.9354 9 0.7522 10 0.7474 11 0.6028 8 0.5369 11 0.3017 10 0.1266 10 0.0806 9 0.0125 9 0.2262 11 0.8951 9 0.8609 10 0.9153 11 0.7179 10 0.021 11 0.117 11 0.6657 11 0.3646 8 0.4929 11 0.04 9 0.9654 10)
Average genome size in population (length): 58.596
Average program size in population (points): 59.596
Average percent parens in population: 0.017
Minimum age in population: 18.646484375
Maximum age in population: 22.6497802734375
Average age in population: 20.80091174316406
Median age in population: 20.8262939453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.207
Error (vector) diversity:			 0.209
Behavioral diversity:				 0.216
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 19742912
--- Timings ---
Current time: 1529614941272 milliseconds
Total Time:          52.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.0 seconds, 45.4%
Fitness Testing:     22.8 seconds, 43.2%
Report:               5.9 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3509.6611217999944
Median total errors in population: 936.8756999999999
Error averages by case: (148.80401439999957 11.027 134.96157200000104 12.575 132.53804559999887 11.087 123.61424000000022 10.365 107.76890660000082 11.999 124.936161600001 12.685 117.38372800000059 13.067 140.3340444000018 11.859 134.4789222000022 13.326 135.75973679999979 12.787 125.37657059999847 12.644 145.11494299999956 12.219 145.2024375000007 12.554 122.7696583999989 12.67 126.36776610000157 11.089 128.4230164000002 12.283 123.96970729999829 11.488 134.42760020000136 11.992 118.86194199999775 12.757 115.36610900000086 13.442 126.04124860000091 12.889 118.50086920000064 11.435 152.9800745000002 12.651 111.61564000000101 12.547 108.19416740000045 12.433)
Error minima by case: (0.3797 9 0.884 10 0.4036 10 0.0147 10 0.0646 10 0.7522 9 0.7474 11 0.6028 9 0.5369 11 0.3017 10 0.1266 10 0.0806 10 0.0125 10 0.7738 10 0.8951 9 0.8609 9 0.9153 11 0.7179 9 0.021 10 0.117 11 0.6657 10 0.3646 10 0.4929 9 0.04 10 0.9654 9)
Average genome size in population (length): 61.76
Average program size in population (points): 62.76
Average percent parens in population: 0.016
Minimum age in population: 19.832275390625
Maximum age in population: 24.19586181640625
Average age in population: 22.21346844482422
Median age in population: 22.27447509765625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 43
Genome diversity (% unique Plush genomes):	 0.704
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 43
Syntactic diversity (% unique Push programs):	 0.704
Total error diversity:				 0.223
Error (vector) diversity:			 0.226
Behavioral diversity:				 0.233
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 21287362
--- Timings ---
Current time: 1529614944819 milliseconds
Total Time:          56.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.6 seconds, 45.5%
Fitness Testing:     24.2 seconds, 43.1%
Report:               6.3 seconds, 11.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_rot} {:instruction tag_integer_999} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_dup_times} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction 36.60143393103917} {:instruction print_integer})
Best program: (integer_pop integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_rot tag_integer_999 float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_dup_times float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_yank integer_yankdup float_inc float_yankdup 36.60143393103917 print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3288.2984374000016
Median total errors in population: 931.3705
Error averages by case: (117.18122869999816 10.966 133.68145600000182 12.517 123.43507119999822 11.072 117.5785924000002 10.328 99.84410040000098 12.302 123.88208380000069 12.597 116.10007420000112 13.032 134.95535760000237 11.777 130.48435210000252 13.25 113.80962489999908 12.262 126.47346959999845 12.524 116.79105640000084 11.976 147.22852500000013 12.496 118.12637279999836 12.551 117.04226230000181 11.073 127.92498250000018 12.166 114.8497454999976 11.499 128.61078110000196 11.839 104.98279499999761 12.209 110.45289700000093 13.32 126.29854810000087 12.888 100.91541080000066 11.475 121.12062419999835 12.024 111.89872000000156 12.495 101.72330580000049 12.269)
Error minima by case: (0.3797 2 0.116 4 0.4036 8 0.0147 8 0.0646 9 0.2478 6 0.2526 6 0.3972 5 0.4631 4 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 6 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 68.169
Average program size in population (points): 69.169
Average percent parens in population: 0.015
Minimum age in population: 20.832275390625
Maximum age in population: 25.66360473632812
Average age in population: 23.59038186645508
Median age in population: 23.63087463378906
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.282
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.293
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 22992237
--- Timings ---
Current time: 1529614948412 milliseconds
Total Time:          59.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        27.1 seconds, 45.2%
Fitness Testing:     25.8 seconds, 43.1%
Report:               6.9 seconds, 11.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction 36.60143393103917} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_yank integer_yankdup float_inc float_yankdup 36.60143393103917 print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 68
Size: 69
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2814.2227424000007
Median total errors in population: 616.8757
Error averages by case: (90.80477379999925 11.019 114.15422400000143 12.045 105.22804499999877 11.048 101.95782560000009 10.464 86.88051380000088 12.142 104.61745200000114 12.109 98.10555120000036 12.597 114.56382840000082 11.494 112.09679490000177 12.689 91.84125030000014 11.768 110.15998159999938 12.079 94.10104140000071 11.64 124.87172500000061 12.043 98.52895619999931 12.104 96.60973410000042 11.069 107.92683520000008 11.849 95.00998069999875 11.32 110.39883170000172 11.551 87.81320099999886 11.727 95.93740100000042 12.738 105.68359240000031 12.289 85.29497360000065 11.346 96.46496509999857 11.63 97.67400000000046 12.066 92.90226440000042 11.769)
Error minima by case: (0.3797 9 0.116 10 0.3826 7 0.0147 8 0.0646 10 0.2478 9 0.2526 11 0.3972 9 0.4631 11 0.3017 9 0.1266 10 0.0806 9 0.0125 10 0.2262 10 0.1049 9 0.1391 9 0.0847 9 0.2821 9 0.021 9 0.117 10 0.3343 10 0.3646 10 0.4929 8 0.04 10 0.0346 11)
Average genome size in population (length): 65.848
Average program size in population (points): 66.848
Average percent parens in population: 0.015
Minimum age in population: 22.96337890625
Maximum age in population: 27.38360595703125
Average age in population: 25.00687715148926
Median age in population: 25.04173278808594
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 81
Genome diversity (% unique Plush genomes):	 0.71
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 81
Syntactic diversity (% unique Push programs):	 0.71
Total error diversity:				 0.197
Error (vector) diversity:			 0.198
Behavioral diversity:				 0.2
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 24638612
--- Timings ---
Current time: 1529614952050 milliseconds
Total Time:          63.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.7 seconds, 45.2%
Fitness Testing:     27.3 seconds, 43.0%
Report:               7.4 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_sub} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items integer_fromfloat 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_sub integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3111.1088043
Median total errors in population: 289.0410999999999
Error averages by case: (107.45352159999868 11.049 118.3222240000016 11.587 118.53596369999856 11.058 113.57597749999987 10.933 105.94938920000101 12.145 117.21338760000161 11.796 113.73525279999816 11.729 116.66537039999854 11.598 121.32498860000202 11.861 108.15932379999956 11.728 113.18092160000133 11.694 110.12092100000085 11.585 114.41714999999881 11.636 116.73427619999899 11.725 111.28992509999921 11.095 115.0872541999998 11.524 112.54590459999805 11.322 121.33702330000187 11.655 105.76722069999782 11.665 114.65067799999926 11.921 114.83671659999902 11.889 101.97919620000062 11.267 112.2082391999984 11.639 111.50835999999886 11.678 105.11861840000059 11.612)
Error minima by case: (0.3797 2 0.116 4 0.3226 8 0.0147 9 0.0646 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 62.101
Average program size in population (points): 63.101
Average percent parens in population: 0.016
Minimum age in population: 24.1734619140625
Maximum age in population: 28.66155242919922
Average age in population: 26.50643878173828
Median age in population: 26.54449462890625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 64
Genome diversity (% unique Plush genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 64
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.126
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 26191487
--- Timings ---
Current time: 1529614955709 milliseconds
Total Time:          67.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        30.1 seconds, 44.9%
Fitness Testing:     29.0 seconds, 43.2%
Report:               7.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 68} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_dup_times} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction 36.60143393103917} {:instruction print_integer})
Best program: (integer_pop integer_div float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -94 float_add in1 integer_rot 68 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin integer_dup_items integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_dup_times float_dup integer_dup_times float_rot in2 float_tan integer_max -60 float_shove integer_add float_yank integer_yankdup float_inc float_yankdup 36.60143393103917 print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3023.8254606000005
Median total errors in population: 289.0410999999999
Error averages by case: (106.59150269999886 11.059 115.0182761000012 11.436 108.55283899999891 11.062 104.45990349999978 11.056 111.1520097000008 12.17 116.90421600000143 11.689 114.05910159999787 11.502 107.91468119999837 11.567 111.81566510000137 11.595 106.95057259999987 11.662 111.15974880000151 11.53 108.15343390000075 11.532 107.96465169999871 11.485 113.53715389999917 11.559 103.30541399999929 11.086 113.69741109999974 11.438 104.87665269999876 11.325 111.45274540000163 11.585 104.7271412999985 11.59 108.33211999999898 11.62 114.12884109999892 11.739 100.32987630000063 11.275 110.19964619999861 11.574 111.44230489999853 11.522 109.86655180000054 11.575)
Error minima by case: (0.6203 4 0.884 4 0.4807 9 0.0147 9 0.9354 9 0.7522 5 0.7474 5 0.6028 5 0.5369 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.8951 9 0.8609 5 0.9153 10 0.7179 5 0.021 5 0.117 4 0.3343 6 0.3646 5 0.4929 6 0.04 5 0.9654 11)
Average genome size in population (length): 60.758
Average program size in population (points): 61.758
Average percent parens in population: 0.016
Minimum age in population: 25.8115234375
Maximum age in population: 29.99239730834961
Average age in population: 27.98794494628906
Median age in population: 28.01262092590332
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.749
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.749
Total error diversity:				 0.07
Error (vector) diversity:			 0.07
Behavioral diversity:				 0.07
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 27710937
--- Timings ---
Current time: 1529614959512 milliseconds
Total Time:          71.0 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        31.6 seconds, 44.5%
Fitness Testing:     30.9 seconds, 43.5%
Report:               8.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_shove} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_yank integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_shove integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3117.3528103
Median total errors in population: 289.0410999999999
Error averages by case: (107.43908539999882 11.064 114.24016550000148 11.403 118.89912979999859 11.069 114.92124669999978 11.068 112.03583090000097 12.14 115.14013510000159 11.624 112.79890649999739 11.464 113.650418499998 11.535 121.09296660000196 11.558 111.72775569999962 11.636 110.26398930000181 11.508 112.84656210000085 11.519 108.36501649999843 11.45 118.0684840999989 11.535 109.44385739999882 11.073 112.45884389999974 11.394 110.90877119999817 11.299 119.57242490000185 11.566 109.60146689999793 11.57 117.98821819999888 11.593 112.78728649999876 11.672 108.77222140000063 11.248 114.69542769999858 11.562 110.93736879999807 11.489 112.1512307000006 11.507)
Error minima by case: (0.3797 4 0.116 3 0.4036 8 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 9 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 60.409
Average program size in population (points): 61.409
Average percent parens in population: 0.016
Minimum age in population: 27.20047760009766
Maximum age in population: 31.40464210510254
Average age in population: 29.46489791297913
Median age in population: 29.49653148651123
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.079
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 29221662
--- Timings ---
Current time: 1529614962973 milliseconds
Total Time:          74.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        33.1 seconds, 44.4%
Fitness Testing:     32.4 seconds, 43.5%
Report:               8.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction print_integer} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction float_dup_items} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction integer_mod} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank print_integer float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_sub integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove float_dup_items float_dup_times integer_yankdup integer_mod float_yankdup integer_swap integer_mod in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2897.8488210999994
Median total errors in population: 289.0410999999999
Error averages by case: (104.74598789999875 11.066 108.42469970000138 11.414 103.9520322999988 11.06 98.3397665999998 11.052 105.73070170000096 12.116 109.42503250000152 11.641 106.71246139999747 11.492 102.75724799999809 11.588 108.23750270000171 11.61 104.05466739999963 11.691 103.29883080000178 11.54 104.43344850000086 11.517 100.15233029999847 11.471 108.57640719999911 11.58 100.80763519999893 11.077 106.29155259999973 11.392 102.90730359999827 11.321 107.43304860000183 11.635 101.41940679999793 11.622 103.6966289999989 11.685 106.65358719999878 11.693 97.51202270000064 11.234 106.5108518999985 11.612 104.13776109999829 11.522 104.44690540000057 11.56)
Error minima by case: (0.3797 9 0.884 10 0.3226 8 0.0147 9 0.0646 10 0.7522 10 0.7474 10 0.6028 10 0.5369 10 0.3017 9 0.1266 10 0.0806 9 0.0125 10 0.2262 11 0.8951 9 0.8609 10 0.9153 10 0.7179 10 0.021 9 0.117 10 0.6657 10 0.3646 7 0.4929 8 0.04 10 0.0346 11)
Average genome size in population (length): 60.35
Average program size in population (points): 61.35
Average percent parens in population: 0.017
Minimum age in population: 28.51162719726562
Maximum age in population: 32.86246967315674
Average age in population: 30.91561717414856
Median age in population: 30.99104881286621
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.068
Error (vector) diversity:			 0.068
Behavioral diversity:				 0.068
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 30730812
--- Timings ---
Current time: 1529614966662 milliseconds
Total Time:          78.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.7 seconds, 44.4%
Fitness Testing:     34.0 seconds, 43.5%
Report:               9.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_rot} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction integer_mod} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_times float_rot float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup float_stackdepth integer_mod integer_add integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3088.8016870999995
Median total errors in population: 289.0410999999999
Error averages by case: (104.58217119999912 11.047 116.43123570000137 11.424 116.90396329999886 11.065 111.9855474999998 11.064 110.7601875000011 12.153 117.7950325000017 11.653 115.73170359999753 11.51 110.51174409999811 11.581 120.870344400002 11.595 107.2154478999998 11.676 111.26432440000195 11.543 109.46737740000076 11.521 107.77129279999828 11.475 117.27904959999914 11.574 107.23109939999884 11.084 114.48327439999971 11.412 109.18719189999815 11.323 119.1972033000019 11.63 104.62747159999805 11.614 116.53048779999897 11.672 114.94091859999858 11.716 102.08356080000064 11.221 110.88422749999836 11.609 112.28892109999816 11.518 111.5159088000005 11.582)
Error minima by case: (0.3797 2 0.116 3 0.4036 7 0.0147 8 0.0646 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 9 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 11)
Average genome size in population (length): 59.784
Average program size in population (points): 60.784
Average percent parens in population: 0.017
Minimum age in population: 29.51162719726562
Maximum age in population: 34.19994306564331
Average age in population: 32.39916524267197
Median age in population: 32.42997741699219
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.092
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 32225712
--- Timings ---
Current time: 1529614970158 milliseconds
Total Time:          81.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.2 seconds, 44.3%
Fitness Testing:     35.6 seconds, 43.5%
Report:               9.9 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_stackdepth integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2954.855648200001
Median total errors in population: 289.0410999999999
Error averages by case: (100.18802399999912 11.047 109.48855510000148 11.404 109.05031359999872 11.068 102.9979898999998 11.059 108.61229330000101 12.157 111.8849236000016 11.654 108.35372389999743 11.489 106.99238749999813 11.567 113.92211390000199 11.588 105.25709199999979 11.695 104.24046720000183 11.527 106.55259680000086 11.531 100.70509989999842 11.471 112.55562879999884 11.555 101.3893403999991 11.073 108.44090749999972 11.412 103.3749630999984 11.311 113.37206750000176 11.611 102.9491294999981 11.612 109.89936959999898 11.651 109.01308729999867 11.718 98.51088500000063 11.237 108.70675549999852 11.607 104.74372059999835 11.497 106.53921270000058 11.574)
Error minima by case: (0.3797 2 0.116 4 0.4036 9 0.0147 9 0.0646 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 8 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 59.917
Average program size in population (points): 60.917
Average percent parens in population: 0.017
Minimum age in population: 30.56866455078125
Maximum age in population: 35.73884296417236
Average age in population: 33.85195074796677
Median age in population: 33.89874053001404
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.086
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 33724062
--- Timings ---
Current time: 1529614973779 milliseconds
Total Time:          85.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.9 seconds, 44.4%
Fitness Testing:     37.1 seconds, 43.5%
Report:              10.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction integer_mult} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction 36.60143393103917} {:instruction print_integer})
Best program: (integer_pop integer_div integer_mult integer_div float_swap float_sub integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_rot integer_fromfloat integer_add float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_max -60 float_shove integer_add float_yank integer_yankdup float_inc float_yankdup 36.60143393103917 print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 69
Size: 70
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2670.443847599999
Median total errors in population: 289.0410999999999
Error averages by case: (99.34212719999847 11.068 99.14083200000144 11.398 94.79411999999856 11.065 89.8947893999998 11.052 97.4925474000007 12.134 99.63195360000132 11.581 97.47620679999754 11.452 91.14006239999844 11.526 95.9153521000017 11.541 96.11483169999936 11.634 94.4813568000015 11.49 97.51362060000075 11.492 91.86057499999872 11.442 97.97519459999873 11.516 91.6784857999989 11.069 97.01075739999973 11.372 93.51911979999831 11.283 95.41896010000151 11.563 93.43792099999806 11.58 91.819652999999 11.603 97.26081019999906 11.643 90.11350460000061 11.239 99.5070886999988 11.573 95.18099999999818 11.48 96.42197740000051 11.505)
Error minima by case: (0.3797 10 0.116 10 0.4036 9 0.0147 9 0.0646 10 0.2478 11 0.2526 10 0.3972 11 0.4631 11 0.3017 10 0.1266 10 0.0806 11 0.0125 10 0.2262 10 0.1049 9 0.1391 11 0.0847 9 0.2821 10 0.021 11 0.117 10 0.3343 11 0.3646 10 0.4929 10 0.04 10 0.0346 11)
Average genome size in population (length): 59.835
Average program size in population (points): 60.835
Average percent parens in population: 0.017
Minimum age in population: 31.56866455078125
Maximum age in population: 37.4224978685379
Average age in population: 35.30400290822983
Median age in population: 35.38295060396194
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.829
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.829
Total error diversity:				 0.08
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 35220412
--- Timings ---
Current time: 1529614977467 milliseconds
Total Time:          88.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.4 seconds, 44.4%
Fitness Testing:     38.7 seconds, 43.5%
Report:              10.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dec integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3086.214384
Median total errors in population: 289.0410999999999
Error averages by case: (112.91546849999835 11.062 116.79789200000201 11.444 115.58916399999823 11.083 110.77055889999977 11.061 112.94746190000119 12.151 118.3886266000018 11.676 115.46604779999684 11.509 110.16402039999733 11.58 116.80729860000247 11.609 108.31904779999923 11.686 112.13141940000202 11.541 109.67475150000084 11.539 107.71408749999823 11.478 112.64981379999853 11.574 106.68560669999832 11.077 115.28134769999973 11.429 108.55635629999769 11.339 116.39175580000206 11.632 105.85278759999743 11.616 112.75936599999885 11.664 115.74584209999853 11.72 102.60187860000066 11.255 111.73652669999836 11.612 112.12335999999749 11.531 110.72189780000058 11.554)
Error minima by case: (0.3797 4 0.884 3 0.3936 8 0.0147 9 0.0646 9 0.7522 5 0.7474 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 10 0.8609 5 0.9153 9 0.7179 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.0346 11)
Average genome size in population (length): 59.802
Average program size in population (points): 60.802
Average percent parens in population: 0.017
Minimum age in population: 33.50852108001709
Maximum age in population: 39.08490437269211
Average age in population: 36.75553977555037
Median age in population: 36.77691951394081
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.088
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 36716112
--- Timings ---
Current time: 1529614981096 milliseconds
Total Time:          92.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.9 seconds, 44.2%
Fitness Testing:     40.4 seconds, 43.6%
Report:              11.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_tan} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_yank} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction integer_swap} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_cos} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction float_dup_items} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_tan integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times integer_dec float_yank float_inc float_dup_items float_tan 48 integer_swap tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_cos float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan float_dup_items -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2812.93389
Median total errors in population: 289.0410999999999
Error averages by case: (96.75713579999926 11.053 106.32088770000102 11.404 101.17061329999898 11.043 96.81277469999978 11.038 101.988937500001 12.111 108.05029790000154 11.642 105.26718799999796 11.473 98.5174528999985 11.551 105.48699380000156 11.568 98.73762860000014 11.655 102.05455200000178 11.525 100.24370930000083 11.514 98.39611779999845 11.46 102.59321419999938 11.556 95.86849149999922 11.058 104.64230069999974 11.397 97.5940010999986 11.296 105.02657200000179 11.602 95.86693369999848 11.589 101.66109179999886 11.629 105.06457849999876 11.692 92.98157480000066 11.219 102.4629610999985 11.586 102.14732109999868 11.507 100.52356020000059 11.529)
Error minima by case: (0.3797 8 0.116 10 0.0676 7 0.0147 8 0.0646 10 0.2478 10 0.2526 10 0.3972 10 0.4631 10 0.3017 9 0.1266 10 0.0806 9 0.0125 10 0.2262 10 0.1049 9 0.1391 10 0.0847 9 0.2821 10 0.021 9 0.117 10 0.3343 10 0.3646 5 0.4929 8 0.04 10 0.0346 11)
Average genome size in population (length): 59.88
Average program size in population (points): 60.88
Average percent parens in population: 0.017
Minimum age in population: 34.50852108001709
Maximum age in population: 40.60959759354591
Average age in population: 38.23132875540853
Median age in population: 38.27913922071457
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.081
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 38213837
--- Timings ---
Current time: 1529614984635 milliseconds
Total Time:          96.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.4 seconds, 44.2%
Fitness Testing:     41.9 seconds, 43.6%
Report:              11.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction print_float} {:instruction float_frominteger} {:instruction integer_dec} {:instruction float_yank} {:instruction tag_integer_999} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction float_yank} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc print_float float_frominteger integer_dec float_yank tag_integer_999 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_frominteger float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup float_dup_items integer_yankdup integer_yankdup in2 float_tan float_yank -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2549.7376106
Median total errors in population: 289.0410999999999
Error averages by case: (87.4150774999995 11.025 95.8423400000007 11.362 88.97692669999924 11.056 83.8159540999998 11.047 93.69587300000082 12.121 97.65216620000142 11.584 94.36497499999811 11.453 87.71766519999868 11.519 94.52911040000141 11.553 88.32709880000039 11.622 91.64982480000172 11.479 89.68716950000086 11.475 88.41129999999859 11.418 93.78042079999946 11.518 83.90453339999982 11.059 94.16184389999972 11.36 85.77273089999912 11.3 94.21080640000177 11.567 85.83341759999895 11.553 90.39523799999884 11.613 94.70682469999888 11.643 81.23054580000064 11.221 91.89129949999862 11.554 92.40427999999868 11.464 93.26718840000059 11.527)
Error minima by case: (0.6203 2 0.116 2 0.3936 8 0.0147 9 0.9354 10 0.2478 3 0.2526 3 0.3972 3 0.4631 3 0.3017 4 0.1266 2 0.0806 4 0.0125 3 0.2262 2 0.1049 10 0.1391 3 0.0847 10 0.2821 3 0.021 3 0.117 2 0.3343 4 0.3646 3 0.4929 4 0.04 3 0.9654 11)
Average genome size in population (length): 59.686
Average program size in population (points): 60.686
Average percent parens in population: 0.017
Minimum age in population: 37.25838986039162
Maximum age in population: 41.512720733881
Average age in population: 39.65381434595585
Median age in population: 39.69559159129858
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.084
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 39707062
--- Timings ---
Current time: 1529614988227 milliseconds
Total Time:          99.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.1 seconds, 44.2%
Fitness Testing:     43.4 seconds, 43.5%
Report:              12.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_max} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_pop} {:instruction integer_yank} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_mod} {:instruction float_sub} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_stackdepth integer_add integer_mult integer_inc float_max float_inc integer_dec float_yank float_dup_items float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_pop integer_yank in2 float_tan integer_max -60 float_sin float_dup integer_dup_items integer_mod float_sub integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3082.1135717999996
Median total errors in population: 289.0410999999999
Error averages by case: (111.44319229999861 11.057 115.93538400000162 11.418 113.68515959999853 11.069 108.49373359999979 11.058 112.90051640000094 12.127 116.97591840000139 11.661 114.22175359999723 11.483 112.2214955999979 11.571 117.72382070000207 11.584 109.06387399999964 11.686 111.23953320000162 11.534 110.68418510000078 11.546 109.03002499999866 11.479 116.92558759999869 11.571 104.49032779999888 11.081 113.67298299999973 11.408 105.19086099999836 11.323 117.4569455000017 11.615 105.10200349999813 11.61 114.21974699999897 11.642 114.06915899999882 11.718 103.14495910000062 11.239 112.96460119999868 11.603 112.1022399999981 11.524 111.98956560000053 11.559)
Error minima by case: (0.3797 2 0.884 4 0.3226 8 0.0147 9 0.0646 10 0.7522 5 0.7474 5 0.6028 5 0.5369 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.8951 9 0.8609 5 0.9153 9 0.7179 5 0.021 5 0.117 4 0.6657 6 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 60.024
Average program size in population (points): 61.024
Average percent parens in population: 0.017
Minimum age in population: 38.56254328787327
Maximum age in population: 42.87630213052034
Average age in population: 41.08364635897428
Median age in population: 41.14706537500024
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.859
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.859
Total error diversity:				 0.071
Error (vector) diversity:			 0.072
Behavioral diversity:				 0.072
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 41208862
--- Timings ---
Current time: 1529614991919 milliseconds
Total Time:         103.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.7 seconds, 44.2%
Fitness Testing:     45.1 seconds, 43.6%
Report:              12.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_sub} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_flush} {:instruction integer_min} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_shove} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -59} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop float_sub float_swap float_sub integer_mult integer_inc float_inc float_inc float_flush integer_min integer_dup_times float_dup_items float_shove 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_inc float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -59 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3149.7025709
Median total errors in population: 289.0410999999999
Error averages by case: (107.87736609999887 11.026 120.42449390000166 11.413 113.96962609999865 11.081 109.95867229999979 11.087 113.29588400000102 12.162 121.48932410000162 11.641 119.03077549999713 11.493 114.80347629999781 11.531 120.31429900000208 11.555 109.82730239999954 11.614 116.27842800000194 11.533 111.24723820000087 11.498 112.27455609999829 11.469 121.04556539999876 11.529 110.20234499999873 11.107 118.36678429999974 11.397 111.74232179999802 11.333 120.16292140000195 11.594 107.17380589999806 11.561 116.87365209999882 11.607 118.67252449999869 11.684 103.41011150000065 11.207 113.27340319999857 11.567 116.74858449999783 11.506 114.48310930000065 11.561)
Error minima by case: (0.3797 1 0.884 1 0.3936 8 0.0147 9 0.0646 9 0.7522 2 0.7474 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.8951 10 0.8609 2 0.9153 10 0.2821 2 0.021 2 0.117 1 0.6657 3 0.3646 2 0.4929 3 0.04 2 0.0346 11)
Average genome size in population (length): 59.647
Average program size in population (points): 60.647
Average percent parens in population: 0.017
Minimum age in population: 40.14675754308701
Maximum age in population: 44.45452754199505
Average age in population: 42.56970375584438
Median age in population: 42.63609276153147
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.079
Error (vector) diversity:			 0.079
Behavioral diversity:				 0.08
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 42701187
--- Timings ---
Current time: 1529614995635 milliseconds
Total Time:         107.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.4 seconds, 44.3%
Fitness Testing:     46.6 seconds, 43.5%
Report:              13.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_cos} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_cos integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_inc float_inc integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3069.7006632000007
Median total errors in population: 289.0410999999999
Error averages by case: (104.41508199999897 11.063 121.34485610000156 11.473 111.56562549999875 11.065 107.26665329999979 11.054 115.37817250000106 12.168 122.89642860000164 11.715 119.90938539999729 11.547 109.04098979999802 11.604 115.86379140000193 11.635 104.02166569999986 11.71 116.19511580000193 11.608 105.60833610000084 11.592 112.13456419999837 11.52 114.27198139999894 11.608 99.45412549999905 11.072 119.36721939999973 11.457 100.28520709999837 11.322 115.8201308000019 11.662 100.03431789999809 11.65 111.92545059999888 11.7 119.82418699999867 11.753 96.15929990000065 11.266 107.99361389999837 11.637 116.66218489999798 11.575 114.2142784000006 11.592)
Error minima by case: (0.6203 1 0.116 2 0.0131 8 0.0147 9 0.9354 9 0.2478 2 0.2526 2 0.3972 11 0.4631 11 0.3017 10 0.1266 2 0.0806 9 0.0125 1 0.2262 10 0.1049 9 0.1391 2 0.0847 10 0.2821 10 0.021 10 0.117 10 0.3343 3 0.3646 9 0.4929 9 0.04 2 0.9654 11)
Average genome size in population (length): 59.657
Average program size in population (points): 60.657
Average percent parens in population: 0.017
Minimum age in population: 41.46022470295429
Maximum age in population: 45.95146919973195
Average age in population: 44.00469788848795
Median age in population: 44.0310171674937
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.871
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.871
Total error diversity:				 0.09
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 44193762
--- Timings ---
Current time: 1529614999468 milliseconds
Total Time:         110.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.0 seconds, 44.1%
Fitness Testing:     48.4 seconds, 43.6%
Report:              13.4 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_yankdup} {:instruction float_yank} {:instruction integer_inc} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc float_yankdup float_yank integer_inc float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_pop float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2741.3086368999993
Median total errors in population: 289.0410999999999
Error averages by case: (94.70530389999911 11.031 102.03264400000107 11.39 100.21934029999883 11.075 95.5389199999998 11.067 97.79493760000095 12.136 103.0496882000015 11.607 100.09295419999782 11.462 95.23090079999851 11.531 103.61840310000164 11.572 96.84130019999998 11.634 97.24758440000163 11.496 98.36769820000079 11.494 94.11839999999862 11.442 99.20153469999924 11.534 95.87573409999918 11.079 99.72273109999975 11.371 97.63696979999844 11.321 102.32051390000164 11.603 93.94226049999844 11.573 99.46293899999898 11.635 100.1581502999988 11.653 90.55442820000059 11.217 100.41434119999855 11.57 98.26383999999854 11.475 98.38811920000055 11.541)
Error minima by case: (0.3797 2 0.116 3 0.4036 10 0.0147 9 0.0646 11 0.2478 5 0.2526 5 0.3972 2 0.4631 2 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 1 0.1049 10 0.1391 5 0.0847 10 0.2821 2 0.021 4 0.117 1 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 11)
Average genome size in population (length): 59.434
Average program size in population (points): 60.434
Average percent parens in population: 0.017
Minimum age in population: 43.04686943255365
Maximum age in population: 47.32438167650253
Average age in population: 45.42912143679895
Median age in population: 45.43173874914646
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.853
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.853
Total error diversity:				 0.081
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.081
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 45680612
--- Timings ---
Current time: 1529615002985 milliseconds
Total Time:         114.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.5 seconds, 44.0%
Fitness Testing:     50.0 seconds, 43.7%
Report:              13.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction float_mod} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction tag_integer_803} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_mult integer_div float_swap float_sub integer_mult tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add float_mod integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max tag_integer_803 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3141.5062041
Median total errors in population: 289.0410999999999
Error averages by case: (109.3196490999989 11.041 121.34938400000159 11.42 111.98967269999876 11.052 106.94728779999978 11.059 114.88838980000102 12.148 123.04342280000165 11.656 120.20323799999721 11.502 108.19340359999823 11.559 118.19483550000184 11.589 111.21850069999965 11.661 116.57219180000183 11.541 112.74019510000088 11.531 111.84124999999847 11.47 114.77717099999906 11.57 111.08622159999895 11.08 119.59442659999972 11.414 112.6442097999983 11.331 117.05701260000191 11.62 108.47175979999804 11.602 114.43542999999889 11.648 120.0208217999987 11.717 104.98285890000065 11.243 114.92042209999846 11.6 116.65487999999812 11.511 113.22556900000062 11.569)
Error minima by case: (0.3797 1 0.884 1 0.4036 9 0.0147 9 0.0646 10 0.7522 2 0.7474 2 0.6028 3 0.5369 4 0.3017 5 0.1266 1 0.0806 5 0.0125 2 0.2262 2 0.8951 10 0.8609 2 0.9153 9 0.7179 4 0.021 4 0.117 3 0.6657 3 0.3646 4 0.4929 5 0.04 2 0.0346 11)
Average genome size in population (length): 59.189
Average program size in population (points): 60.189
Average percent parens in population: 0.017
Minimum age in population: 44.1765512553975
Maximum age in population: 48.79636834794655
Average age in population: 46.87882545678737
Median age in population: 46.91975774150342
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.857
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.857
Total error diversity:				 0.081
Error (vector) diversity:			 0.081
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 47161687
--- Timings ---
Current time: 1529615006530 milliseconds
Total Time:         118.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.1 seconds, 44.1%
Fitness Testing:     51.6 seconds, 43.6%
Report:              14.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction integer_pop} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_dup_items} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_min} {:instruction float_inc} {:instruction integer_dec} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction 70} {:instruction tagged_363} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap integer_pop integer_div integer_dup_times float_sub integer_mult integer_dup_items float_swap float_sub integer_mult integer_inc integer_min float_inc integer_dec tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items 70 tagged_363 integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3134.8980396
Median total errors in population: 289.0410999999999
Error averages by case: (109.78718569999859 11.075 120.56896400000167 11.435 114.09391989999854 11.069 109.37970859999979 11.057 117.23580840000099 12.162 121.61567060000162 11.689 118.8305009999972 11.502 112.74452559999787 11.575 118.50155620000214 11.597 108.87497379999951 11.666 115.99592580000188 11.557 110.27443630000084 11.548 113.14914999999834 11.494 117.8301996999988 11.575 106.07481369999866 11.084 118.47056569999972 11.437 107.61622489999803 11.305 118.37478140000186 11.624 106.20764929999775 11.605 114.98891599999887 11.656 118.91115609999866 11.737 102.45265950000066 11.244 112.35334819999842 11.597 116.96727999999794 11.525 116.2321192000006 11.551)
Error minima by case: (0.3797 8 0.884 10 0.3226 8 0.0147 9 0.0646 10 0.7522 10 0.7474 10 0.6028 10 0.5369 10 0.3017 10 0.1266 10 0.0806 10 0.0125 10 0.2262 10 0.8951 8 0.8609 10 0.9153 9 0.7179 10 0.021 10 0.117 10 0.6657 10 0.3646 9 0.4929 10 0.04 10 0.0346 10)
Average genome size in population (length): 59.135
Average program size in population (points): 60.135
Average percent parens in population: 0.017
Minimum age in population: 45.71207063877955
Maximum age in population: 50.20377503708005
Average age in population: 48.3324299983473
Median age in population: 48.37634597544093
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.072
Error (vector) diversity:			 0.073
Behavioral diversity:				 0.073
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 48641262
--- Timings ---
Current time: 1529615010303 milliseconds
Total Time:         121.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.7 seconds, 44.1%
Fitness Testing:     53.2 seconds, 43.7%
Report:              14.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_stackdepth} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction float_tan} {:instruction in2} {:instruction float_tan} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_stackdepth integer_inc float_inc float_inc integer_dec float_yank integer_dup_times integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items float_tan in2 float_tan integer_yankdup in2 integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2965.8202995
Median total errors in population: 289.0410999999999
Error averages by case: (105.2604531999993 11.065 112.34360990000089 11.42 106.09372839999918 11.079 102.0895976999998 11.064 107.92030260000082 12.161 112.57158070000148 11.636 110.78727029999793 11.478 105.50470219999865 11.529 110.15932230000116 11.554 105.28105160000017 11.642 106.68755460000165 11.505 106.29073970000086 11.513 104.05254359999859 11.46 112.15167609999928 11.535 103.83319579999949 11.073 109.52708879999973 11.412 104.43819339999892 11.294 110.56776550000161 11.553 103.39799259999873 11.564 106.56170439999893 11.589 109.97485299999882 11.686 100.18707980000063 11.246 108.15295629999872 11.562 108.48050449999877 11.489 106.8628325000006 11.533)
Error minima by case: (0.3797 1 0.116 1 0.4036 9 0.0147 10 0.0646 8 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 10 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.0346 10)
Average genome size in population (length): 59.21
Average program size in population (points): 60.21
Average percent parens in population: 0.017
Minimum age in population: 47.48533784225583
Maximum age in population: 51.62136100919452
Average age in population: 49.80108148614096
Median age in population: 49.85145806969376
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.081
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 50122787
--- Timings ---
Current time: 1529615014182 milliseconds
Total Time:         125.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.2 seconds, 44.0%
Fitness Testing:     55.0 seconds, 43.8%
Report:              15.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_sub} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_flush} {:instruction integer_min} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_shove} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_inc} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction -21} {:instruction integer_max} {:instruction -59} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop float_sub float_swap float_sub integer_mult integer_inc float_inc float_inc float_flush integer_min integer_dup_times float_dup_items float_shove 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_inc float_dup integer_dup_items integer_yankdup in2 -21 integer_max -59 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2626.8558924
Median total errors in population: 289.0410999999999
Error averages by case: (89.45425959999942 11.04 97.21794800000065 11.381 96.66672809999916 11.056 92.3058826999998 11.044 93.1737748000009 12.101 98.53821020000152 11.616 95.50293339999834 11.454 92.54544559999877 11.515 100.66698310000126 11.557 91.47166760000019 11.638 92.00345780000173 11.503 92.8189991000008 11.51 89.24133749999858 11.44 96.46577799999955 11.522 89.6333134999995 11.076 94.87006189999971 11.374 91.34056179999894 11.289 99.11819160000171 11.57 89.06071659999886 11.569 96.8494829999989 11.604 95.30713869999879 11.669 86.39245850000066 11.221 94.98252649999857 11.562 93.00039999999909 11.476 91.92063480000054 11.52)
Error minima by case: (0.3797 4 0.884 3 0.3936 8 0.0147 9 0.0646 11 0.7522 5 0.7474 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 10 0.8609 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.0346 11)
Average genome size in population (length): 59.01
Average program size in population (points): 60.01
Average percent parens in population: 0.017
Minimum age in population: 48.49513878021389
Maximum age in population: 52.97104200400645
Average age in population: 51.18322333694599
Median age in population: 51.24326961365296
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.08
Error (vector) diversity:			 0.08
Behavioral diversity:				 0.082
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 51599387
--- Timings ---
Current time: 1529615017588 milliseconds
Total Time:         129.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.7 seconds, 43.9%
Fitness Testing:     56.5 seconds, 43.7%
Report:              15.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction tag_integer_800} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction float_mod} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction float_cos} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction float_stackdepth} {:instruction -60} {:instruction float_shove} {:instruction integer_dup} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec tag_integer_800 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add float_mod integer_rot 70 integer_rot float_shove float_cos integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan float_dup integer_dup_items integer_yankdup in2 float_tan float_shove integer_dec integer_dup_times integer_yank float_sin float_dup float_stackdepth -60 float_shove integer_dup float_dup_times integer_yankdup integer_mod float_yankdup integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 65
Size: 66
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2871.452866400001
Median total errors in population: 289.0410999999999
Error averages by case: (97.27022869999911 11.071 106.2811520000012 11.434 105.1045595999989 11.063 101.57765709999978 11.046 99.867420800001 12.146 106.22442280000155 11.662 104.73622759999769 11.49 100.7792539999985 11.548 107.33013070000169 11.591 104.95009939999971 11.666 100.68591300000176 11.525 106.41508920000084 11.563 98.32006249999846 11.475 108.72045659999915 11.569 101.9091641999989 11.079 103.55156569999971 11.429 103.29798319999827 11.311 107.19334530000178 11.58 102.53852199999807 11.596 104.32418499999893 11.614 103.1328217999987 11.717 99.37938960000062 11.29 108.47070939999851 11.592 102.49455999999843 11.511 99.79494620000055 11.535)
Error minima by case: (0.3797 10 0.116 10 0.4036 10 0.0147 10 0.0646 9 0.2478 10 0.2526 10 0.3972 10 0.4631 10 0.3017 9 0.1266 10 0.0806 9 0.0125 10 0.2262 10 0.1049 10 0.1391 10 0.0847 10 0.2821 10 0.021 9 0.117 11 0.3343 10 0.3646 10 0.4929 8 0.04 10 0.0346 11)
Average genome size in population (length): 58.756
Average program size in population (points): 59.756
Average percent parens in population: 0.017
Minimum age in population: 49.49513878021389
Maximum age in population: 54.48503226361936
Average age in population: 52.60356284969993
Median age in population: 52.63547382694378
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.85
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.85
Total error diversity:				 0.091
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 53069737
--- Timings ---
Current time: 1529615021232 milliseconds
Total Time:         132.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.3 seconds, 43.9%
Fitness Testing:     58.0 seconds, 43.7%
Report:              16.3 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction print_float} {:instruction float_frominteger} {:instruction integer_dec} {:instruction float_yank} {:instruction tag_integer_999} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction float_yank} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc print_float float_frominteger integer_dec float_yank tag_integer_999 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_frominteger float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup float_dup_items integer_yankdup integer_yankdup in2 float_tan float_yank -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3252.1308856
Median total errors in population: 289.0410999999999
Error averages by case: (110.0724247999995 11.058 123.85597570000104 11.478 120.9548222999989 11.074 115.6373703999998 11.074 119.40118160000084 12.175 124.30037680000143 11.738 122.1579665999978 11.554 116.51045009999835 11.617 126.55428140000157 11.648 116.74033499999965 11.737 117.11844420000166 11.609 118.21190560000076 11.6 112.38518559999865 11.539 122.21434319999919 11.612 111.6761884999992 11.077 120.63509589999974 11.471 113.36549319999855 11.349 126.61480230000171 11.659 114.19401569999819 11.664 122.69677699999889 11.696 121.11635549999886 11.776 110.17700050000063 11.274 120.44437359999857 11.655 118.74964109999844 11.585 118.00907900000054 11.618)
Error minima by case: (0.3797 2 0.116 4 0.4036 9 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 6 0.3646 5 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 58.215
Average program size in population (points): 59.215
Average percent parens in population: 0.017
Minimum age in population: 51.28157385461964
Maximum age in population: 55.91158092302794
Average age in population: 54.05880343969278
Median age in population: 54.09179075975408
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.087
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.088
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 54526687
--- Timings ---
Current time: 1529615024891 milliseconds
Total Time:         136.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        59.8 seconds, 43.9%
Fitness Testing:     59.7 seconds, 43.8%
Report:              16.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction tagged_925} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_div float_swap integer_dup_times float_dup_items float_tan 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times tagged_925 float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3034.2191207999995
Median total errors in population: 289.0410999999999
Error averages by case: (103.83450209999933 11.044 114.37310800000118 11.428 111.12539279999888 11.072 107.1294118999998 11.068 107.84319600000092 12.143 113.53968820000155 11.663 112.60596459999807 11.494 108.63882879999868 11.561 116.0349831000016 11.597 107.43040649999998 11.667 109.78931840000166 11.541 108.97096350000074 11.535 106.9502749999986 11.478 114.20755179999918 11.564 107.64234099999925 11.096 111.02759199999973 11.41 109.20277979999868 11.344 115.9079095000017 11.616 104.6407420999985 11.605 112.53524899999897 11.651 110.50348169999876 11.703 101.52360100000064 11.242 111.14411799999854 11.6 111.73231999999877 11.519 108.6893960000005 11.555)
Error minima by case: (0.3797 2 0.884 4 0.3936 7 0.0147 8 0.0646 10 0.7522 6 0.7474 5 0.6028 5 0.5369 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.8951 9 0.8609 5 0.9153 9 0.7179 5 0.021 5 0.117 4 0.6657 7 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 57.074
Average program size in population (points): 58.074
Average percent parens in population: 0.018
Minimum age in population: 53.27864599799796
Maximum age in population: 57.290831295315
Average age in population: 55.43463761524796
Median age in population: 55.50862350502575
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.827
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.827
Total error diversity:				 0.085
Error (vector) diversity:			 0.085
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 55954487
--- Timings ---
Current time: 1529615028622 milliseconds
Total Time:         140.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.4 seconds, 43.8%
Fitness Testing:     61.5 seconds, 43.9%
Report:              17.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_inc} {:instruction float_dup} {:instruction float_flush} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction integer_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction float_rot} {:instruction -60} {:instruction float_shove} {:instruction integer_shove} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap integer_shove integer_mult float_inc float_dup float_flush integer_dup_times float_dup_items float_tan 48 float_dup_items float_tan 48 integer_yank tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan float_rot -60 float_shove integer_shove float_dup_times integer_yankdup integer_mod float_yankdup integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2742.487170899999
Median total errors in population: 289.0410999999999
Error averages by case: (95.16752359999933 11.045 103.1302960000011 11.418 95.00150359999924 11.066 90.02860769999981 11.052 99.92500220000096 12.13 103.79943160000153 11.641 100.96720679999783 11.493 98.32226799999823 11.554 102.43318420000165 11.577 98.08111020000011 11.654 96.63283760000174 11.539 99.62167660000082 11.51 92.7634249999986 11.465 103.68915879999922 11.567 93.6677344999992 11.064 100.22714839999975 11.391 95.56830589999859 11.316 102.21467800000183 11.617 95.17792019999845 11.586 98.17876999999893 11.661 100.66215319999876 11.67 92.20754160000062 11.224 101.85155499999853 11.59 97.77983999999847 11.515 98.49929220000051 11.544)
Error minima by case: (0.3797 2 0.884 4 0.3936 8 0.0147 9 0.0646 11 0.7522 6 0.7474 5 0.6028 5 0.5369 5 0.3017 5 0.1266 4 0.0806 5 0.0125 5 0.2262 4 0.8951 9 0.8609 5 0.9153 10 0.7179 5 0.021 5 0.117 4 0.6657 6 0.3646 4 0.4929 6 0.04 4 0.0346 11)
Average genome size in population (length): 57.826
Average program size in population (points): 58.826
Average percent parens in population: 0.017
Minimum age in population: 54.41554349151556
Maximum age in population: 58.86767738514027
Average age in population: 56.89006348781342
Median age in population: 56.94978440777049
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.083
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.084
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 57401412
--- Timings ---
Current time: 1529615031991 milliseconds
Total Time:         143.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.8 seconds, 43.7%
Fitness Testing:     63.0 seconds, 43.9%
Report:              17.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_shove} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_yank} {:instruction float_inc} {:instruction integer_yank} {:instruction in2} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction float_inc} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc integer_shove float_yank integer_dup_times integer_inc float_inc float_inc integer_dec float_yank integer_dup_times integer_dec float_yank integer_dup_times float_dup_times float_yank float_inc integer_yank in2 integer_fromfloat in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup float_inc integer_yankdup integer_dup_items integer_dup_items integer_yankdup integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2803.2388738
Median total errors in population: 289.0410999999999
Error averages by case: (96.54512049999892 11.039 103.13114750000102 11.387 101.01910729999881 11.056 97.05466039999979 11.057 100.84069090000091 12.148 104.8605573000014 11.596 102.26278489999775 11.45 98.56456659999827 11.508 104.90318870000168 11.528 101.51099159999973 11.593 98.83606890000168 11.495 102.66945210000087 11.482 95.62530149999861 11.434 102.45615129999906 11.502 98.14351829999895 11.08 101.74746979999972 11.371 99.63764449999833 11.292 104.52366860000186 11.555 99.36690069999811 11.537 101.53430049999885 11.584 102.1133272999989 11.642 96.39144140000066 11.221 104.54666999999846 11.538 99.14369149999858 11.469 99.7324517000006 11.514)
Error minima by case: (0.3797 2 0.884 3 0.3226 8 0.0147 9 0.0646 10 0.7522 4 0.7474 4 0.3972 5 0.4631 5 0.3017 6 0.1266 3 0.0806 6 0.0125 4 0.2262 4 0.1049 9 0.8609 4 0.0847 9 0.2821 5 0.021 5 0.117 4 0.6657 5 0.3646 4 0.4929 6 0.04 4 0.0346 11)
Average genome size in population (length): 57.543
Average program size in population (points): 58.543
Average percent parens in population: 0.017
Minimum age in population: 55.60797820825974
Maximum age in population: 60.09334171516093
Average age in population: 58.33790122743583
Median age in population: 58.36974648418891
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.818
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.818
Total error diversity:				 0.078
Error (vector) diversity:			 0.078
Behavioral diversity:				 0.078
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 58841262
--- Timings ---
Current time: 1529615035567 milliseconds
Total Time:         147.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.4 seconds, 43.8%
Fitness Testing:     64.5 seconds, 43.8%
Report:              18.1 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_div} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction print_float} {:instruction tag_integer_1084} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_add} {:instruction float_dup_times} {:instruction -60} {:instruction float_shove} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div integer_pop integer_div integer_dec float_yank integer_dup_times print_float tag_integer_1084 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank integer_add float_dup_times -60 float_shove float_yankdup integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3383.0846781
Median total errors in population: 289.0410999999999
Error averages by case: (116.40372429999854 11.053 127.93900800000218 11.462 126.58004549999836 11.084 121.5696850999998 11.075 124.06461720000114 12.172 129.44388320000178 11.733 126.34177439999668 11.538 122.19670279999758 11.59 129.6989905000025 11.619 122.12325989999944 11.721 122.907520400002 11.576 123.2392607000009 11.578 120.01689999999824 11.522 126.14976659999867 11.58 120.07336169999849 11.101 125.82393039999972 11.46 121.71402129999784 11.341 129.18357870000196 11.614 119.74221379999747 11.631 126.20163299999886 11.659 126.28483919999852 11.785 115.76128550000065 11.271 125.1875640999983 11.63 123.7729199999977 11.561 122.68419180000063 11.624)
Error minima by case: (0.3797 2 0.116 4 0.4036 7 0.0147 8 0.0646 10 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 3 0.1049 9 0.1391 5 0.0847 9 0.2821 5 0.021 4 0.117 4 0.3343 6 0.3646 4 0.4929 5 0.04 5 0.0346 11)
Average genome size in population (length): 56.82
Average program size in population (points): 57.82
Average percent parens in population: 0.018
Minimum age in population: 57.22218799601069
Maximum age in population: 61.73899286437063
Average age in population: 59.79007638095612
Median age in population: 59.85879086558225
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.094
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 60263287
--- Timings ---
Current time: 1529615039067 milliseconds
Total Time:         150.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.0 seconds, 43.8%
Fitness Testing:     66.0 seconds, 43.8%
Report:              18.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_dup_times} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan float_dup_times integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup in1 integer_rot 70 integer_rot integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3038.4129581999996
Median total errors in population: 289.0410999999999
Error averages by case: (107.11431739999884 11.084 112.87492000000145 11.456 111.76126659999875 11.076 107.0344542999998 11.063 108.9611960000008 12.158 114.42142280000144 11.688 111.3002171999975 11.509 104.97200639999828 11.583 114.13754030000163 11.611 111.07266729999958 11.715 106.85668540000154 11.565 112.37162010000074 11.567 103.04917499999873 11.508 113.610885399999 11.592 110.11192719999877 11.083 110.87870479999974 11.455 111.94598209999825 11.327 113.6937052000016 11.636 108.55813529999814 11.641 110.04131299999901 11.676 111.33849039999885 11.745 105.49226180000062 11.259 114.3075189999985 11.63 107.73707999999833 11.545 107.02146520000052 11.576)
Error minima by case: (0.3797 9 0.884 11 0.4036 9 0.0147 10 0.0646 10 0.7522 11 0.7474 11 0.3972 11 0.4631 11 0.3017 11 0.1266 10 0.0806 11 0.0125 11 0.2262 11 0.1049 8 0.8609 11 0.0847 9 0.2821 10 0.021 11 0.117 10 0.6657 11 0.3646 10 0.4929 9 0.04 11 0.0346 11)
Average genome size in population (length): 56.332
Average program size in population (points): 57.332
Average percent parens in population: 0.018
Minimum age in population: 58.22218799601069
Maximum age in population: 63.20663382116118
Average age in population: 61.27848508761128
Median age in population: 61.30477597370623
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.092
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 61672837
--- Timings ---
Current time: 1529615042414 milliseconds
Total Time:         154.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.5 seconds, 43.8%
Fitness Testing:     67.5 seconds, 43.8%
Report:              18.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_rot} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_shove} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_mult integer_inc float_inc float_inc integer_dec float_rot float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_shove in2 float_tan integer_max -60 float_shove integer_add integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2957.5616132
Median total errors in population: 289.0410999999999
Error averages by case: (104.69233419999883 11.072 114.44842800000127 11.428 104.19374989999888 11.069 100.51243199999979 11.055 109.80509780000101 12.161 113.49315740000159 11.641 112.56851139999756 11.497 103.62961719999842 11.543 109.87561960000171 11.566 103.09421619999978 11.666 108.50979920000184 11.518 104.22960520000088 11.503 105.1991624999984 11.47 111.02993119999908 11.537 100.94982409999902 11.073 111.27453939999975 11.412 102.78889939999836 11.314 109.21097270000182 11.57 101.01017249999813 11.587 105.79535399999888 11.623 110.74116189999874 11.697 98.73028640000062 11.239 106.13529859999849 11.583 110.51259999999833 11.506 108.24484240000064 11.556)
Error minima by case: (0.3797 4 0.116 4 0.3226 8 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 8 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 6 0.3646 5 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 55.942
Average program size in population (points): 56.942
Average percent parens in population: 0.018
Minimum age in population: 60.11995525045131
Maximum age in population: 64.68244678701785
Average age in population: 62.75475729298745
Median age in population: 62.76072983471636
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.089
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 63072587
--- Timings ---
Current time: 1529615045804 milliseconds
Total Time:         157.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        69.1 seconds, 43.9%
Fitness Testing:     69.0 seconds, 43.8%
Report:              19.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction float_tan} {:instruction in2} {:instruction float_tan} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_pop integer_inc float_inc float_inc integer_dec float_yank in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items float_tan in2 float_tan integer_yankdup in2 integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2657.7880891000004
Median total errors in population: 289.0410999999999
Error averages by case: (94.1474429999992 11.045 97.67180400000055 11.367 93.13250739999906 11.062 88.65253599999981 11.047 96.63432520000049 12.13 100.84369700000109 11.616 97.28246979999842 11.451 90.24444689999898 11.503 97.07176440000104 11.528 95.78449469999997 11.638 94.81869820000115 11.49 96.85948170000067 11.495 90.00531249999909 11.433 93.2217110999994 11.501 91.58726009999951 11.055 97.21117469999975 11.398 93.22289039999899 11.289 97.72365400000112 11.542 93.82941429999887 11.551 94.20811379999908 11.585 97.69981309999926 11.675 89.88679310000059 11.212 98.83408229999897 11.547 94.43583999999906 11.47 96.60536140000046 11.543)
Error minima by case: (0.3797 2 0.116 1 0.4036 9 0.0147 9 0.0646 10 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 5 0.1266 1 0.0806 5 0.0125 2 0.2262 1 0.1049 8 0.1391 2 0.0847 10 0.2821 2 0.021 4 0.117 1 0.3343 3 0.3646 4 0.4929 5 0.04 2 0.0346 11)
Average genome size in population (length): 55.657
Average program size in population (points): 56.657
Average percent parens in population: 0.018
Minimum age in population: 61.95607845300469
Maximum age in population: 66.21233857732352
Average age in population: 64.20530030675987
Median age in population: 64.23324575633472
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.819
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.819
Total error diversity:				 0.098
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 64465337
--- Timings ---
Current time: 1529615049230 milliseconds
Total Time:         160.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.6 seconds, 43.9%
Fitness Testing:     70.5 seconds, 43.8%
Report:              19.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_pop} {:instruction integer_div} {:instruction float_div} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_sin} {:instruction float_dup} {:instruction in1} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_pop integer_div float_div float_sub integer_mult integer_inc integer_inc float_inc integer_dec float_yank tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank integer_dup_times float_dup_items float_sin float_dup in1 integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2842.2060612
Median total errors in population: 289.0410999999999
Error averages by case: (106.16601679999913 11.052 105.77040480000113 11.424 104.10083209999901 11.05 99.53768119999978 11.041 102.61635200000104 12.135 107.07459310000164 11.659 103.91917249999779 11.496 95.52363669999856 11.545 104.61972350000158 11.571 103.28241659999998 11.674 100.16952860000184 11.555 103.66726280000081 11.537 96.36238899999844 11.481 102.15101039999931 11.557 100.64609979999906 11.066 103.3957859999997 11.416 102.41193469999843 11.313 104.25687890000187 11.602 100.93034349999824 11.598 100.6973877999989 11.635 103.86429729999865 11.706 96.47431780000066 11.239 105.73495539999838 11.586 100.92460199999857 11.523 100.90743790000059 11.54)
Error minima by case: (0.3797 1 0.116 1 0.3699 9 0.0147 8 0.0646 8 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 10 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.0346 8)
Average genome size in population (length): 56.075
Average program size in population (points): 57.075
Average percent parens in population: 0.018
Minimum age in population: 62.95607845300469
Maximum age in population: 67.51766131771416
Average age in population: 65.65789686564285
Median age in population: 65.69041770850822
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.841
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.841
Total error diversity:				 0.102
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 65868712
--- Timings ---
Current time: 1529615052556 milliseconds
Total Time:         164.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.1 seconds, 43.9%
Fitness Testing:     71.9 seconds, 43.8%
Report:              20.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction integer_pop} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_pop} {:instruction integer_div} {:instruction integer_dec} {:instruction integer_yank} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_mod} {:instruction float_sin} {:instruction integer_max} {:instruction float_dup} {:instruction -70} {:instruction float_rot} {:instruction in2} {:instruction float_sin} {:instruction integer_max} {:instruction -60} {:instruction float_dup} {:instruction integer_add} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction 36.60143393103917} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap integer_pop integer_div integer_dup_times float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan integer_pop integer_div integer_dec integer_yank integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_mod float_sin integer_max float_dup -70 float_rot in2 float_sin integer_max -60 float_dup integer_add float_yank integer_yankdup float_inc float_yankdup 36.60143393103917 print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2994.3761414
Median total errors in population: 289.0410999999999
Error averages by case: (106.2966035999992 11.068 113.0484560000009 11.425 107.50015619999918 11.065 103.33147339999978 11.059 112.76493760000096 12.167 115.5831838000016 11.65 112.68997499999792 11.484 105.66029729999856 11.526 110.08502620000145 11.545 106.58679690000011 11.62 109.48407800000179 11.52 107.6719338000008 11.516 105.96423749999859 11.468 109.99625229999945 11.53 100.91750919999924 11.072 112.47073109999972 11.423 102.23248729999868 11.294 109.86363160000178 11.566 104.54331249999846 11.563 106.92831009999894 11.598 112.9261502999987 11.696 100.71681530000066 11.24 109.44513419999849 11.562 109.31335999999868 11.505 111.66229220000055 11.531)
Error minima by case: (0.3797 2 0.116 4 0.0372 8 0.0147 8 0.0646 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 56.115
Average program size in population (points): 57.115
Average percent parens in population: 0.018
Minimum age in population: 64.52066133963422
Maximum age in population: 69.09937969237541
Average age in population: 67.06902026294846
Median age in population: 67.10949109008823
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.811
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.811
Total error diversity:				 0.075
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.075
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 67272937
--- Timings ---
Current time: 1529615056007 milliseconds
Total Time:         167.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.6 seconds, 43.9%
Fitness Testing:     73.5 seconds, 43.9%
Report:              20.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_frominteger} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank integer_dup_times integer_yank integer_min float_dup integer_dup_items integer_yankdup float_shove integer_dec integer_dup_times integer_yank float_sin integer_rot float_shove integer_dec integer_dup_times float_frominteger integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3122.9657648999996
Median total errors in population: 289.0410999999999
Error averages by case: (110.31004719999879 11.009 118.96342800000113 11.38 110.49663059999897 11.06 105.93885039999981 11.055 116.21151640000093 12.132 120.5393964000015 11.621 117.8982587999977 11.448 108.15776679999856 11.506 117.76095540000154 11.532 111.88661919999969 11.633 114.82888740000166 11.506 113.1360139000008 11.492 110.95279999999858 11.439 112.43651459999928 11.501 108.8479294999991 11.086 117.14837399999973 11.368 110.7178156999985 11.315 116.88076840000167 11.552 109.62445809999808 11.555 113.81913099999898 11.587 117.52950199999886 11.678 106.87600080000064 11.202 115.2216492999986 11.561 114.18591999999843 11.485 116.33853100000059 11.555)
Error minima by case: (0.6203 1 0.116 1 0.3226 7 0.0147 8 0.9354 10 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 9 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.9654 10)
Average genome size in population (length): 56.017
Average program size in population (points): 57.017
Average percent parens in population: 0.018
Minimum age in population: 65.52066133963422
Maximum age in population: 70.63917018157062
Average age in population: 68.48285130383881
Median age in population: 68.52484697729103
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.098
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 68674737
--- Timings ---
Current time: 1529615059364 milliseconds
Total Time:         170.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        75.0 seconds, 43.9%
Fitness Testing:     74.9 seconds, 43.9%
Report:              20.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dec} {:instruction float_dup_items} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_min} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_sub} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction in1} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction in1} {:instruction integer_yankdup} {:instruction float_sin} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap integer_dec float_dup_items integer_yank in2 float_pop in1 integer_rot integer_fromfloat float_min integer_swap float_stackdepth float_frominteger integer_add in2 float_frominteger integer_add integer_sub integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin in1 integer_dup_items integer_yankdup in2 float_tan integer_max -60 in1 integer_yankdup float_sin float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2980.2668720999995
Median total errors in population: 289.0410999999999
Error averages by case: (110.64599119999872 11.045 113.81061600000133 11.39 104.90182949999877 11.068 100.75752299999978 11.07 109.43493500000108 12.131 113.21691840000163 11.592 111.55574319999745 11.446 104.53706239999802 11.5 109.09196280000182 11.523 106.79888029999968 11.605 108.27731840000193 11.504 108.26322790000081 11.489 105.55724999999835 11.428 110.69532559999897 11.499 103.38807459999863 11.082 110.49926119999974 11.356 104.99132999999804 11.308 108.66180640000194 11.558 104.15950779999791 11.552 105.49000399999885 11.583 110.64782759999868 11.637 100.69684830000064 11.218 110.25850729999848 11.552 109.57103999999809 11.488 108.21808120000064 11.516)
Error minima by case: (0.3797 2 0.116 1 0.4036 9 0.0147 10 0.0646 10 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 4 0.1266 1 0.0806 4 0.0125 2 0.2262 1 0.1049 10 0.1391 2 0.0847 10 0.2821 2 0.021 3 0.117 1 0.3343 3 0.3646 3 0.4929 4 0.04 2 0.0346 11)
Average genome size in population (length): 55.249
Average program size in population (points): 56.249
Average percent parens in population: 0.018
Minimum age in population: 66.52066133963422
Maximum age in population: 71.91199324247007
Average age in population: 69.8892879178593
Median age in population: 69.95808560675214
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.09
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 70057687
--- Timings ---
Current time: 1529615062866 milliseconds
Total Time:         174.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        76.5 seconds, 43.9%
Fitness Testing:     76.6 seconds, 43.9%
Report:              21.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction integer_dup_items} {:instruction float_sin} {:instruction integer_yank} {:instruction float_inc} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction tag_integer_999} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_flush} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction float_tan} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_max} {:instruction float_mult} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_mult} {:instruction integer_mod} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_div} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_sub integer_dup_items integer_inc float_inc float_inc integer_dec integer_dup_items float_sin integer_yank float_inc float_pop in1 integer_rot integer_fromfloat integer_flush tag_integer_999 integer_dup_times integer_yank in2 float_pop in1 integer_fromfloat integer_rot float_flush float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items float_tan integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_max float_mult float_shove integer_add float_dup_times integer_mult integer_mod float_yankdup float_dec float_dup_items float_mult float_div print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 67
Size: 68
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3464.733935200001
Median total errors in population: 289.0410999999999
Error averages by case: (121.20816449999866 11.053 130.81151600000206 11.464 128.0461041999983 11.089 123.7911258999998 11.072 125.30861720000111 12.179 131.97235240000165 11.736 128.95655299999692 11.534 124.49968879999746 11.591 132.03435950000247 11.63 127.92249449999892 11.723 125.1973682000019 11.59 129.13213590000083 11.591 122.31161249999836 11.514 129.0670879999985 11.604 124.52918289999819 11.096 128.32101689999973 11.463 126.31050209999763 11.361 131.43588610000194 11.634 125.80721289999701 11.65 128.37010099999895 11.679 128.8458536999986 11.787 120.90379230000066 11.285 131.24664949999834 11.641 126.3413999999978 11.564 124.22315720000056 11.61)
Error minima by case: (0.6203 3 0.116 3 0.4036 9 0.0147 9 0.9354 9 0.2478 4 0.2526 4 0.3972 3 0.4631 4 0.3017 5 0.1266 3 0.0806 5 0.0125 4 0.2262 2 0.1049 10 0.1391 4 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 5 0.3646 4 0.4929 5 0.04 4 0.9654 10)
Average genome size in population (length): 54.67
Average program size in population (points): 55.67
Average percent parens in population: 0.018
Minimum age in population: 68.6089377704563
Maximum age in population: 73.27526538651588
Average age in population: 71.29149834255033
Median age in population: 71.32723886432235
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.844
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.844
Total error diversity:				 0.106
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 71426512
--- Timings ---
Current time: 1529615066247 milliseconds
Total Time:         177.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        78.0 seconds, 43.9%
Fitness Testing:     78.0 seconds, 43.9%
Report:              21.6 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_cos} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_yankdup} {:instruction float_rot} {:instruction integer_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_swap} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_min} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_max} {:instruction -60} {:instruction integer_mult} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction in1} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_cos float_sub integer_mult integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan integer_yankdup float_rot integer_yank tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_swap float_sin float_dup integer_dup_times integer_yank integer_min integer_dec integer_dup_times integer_rot float_shove integer_max -60 integer_mult float_dup_times integer_yankdup in1 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2776.2567653
Median total errors in population: 289.0410999999999
Error averages by case: (93.81000149999896 11.037 106.48029600000113 11.407 99.91029229999874 11.063 95.0570378999998 11.058 102.47267920000075 12.137 106.88571460000138 11.631 104.49744899999784 11.471 98.0494735999985 11.541 107.0194997000015 11.563 92.9631986999999 11.639 101.69834400000153 11.533 94.64491100000076 11.498 96.59549999999874 11.455 105.90228979999912 11.546 93.08034309999917 11.066 103.59506189999972 11.38 95.06485249999862 11.301 106.59608850000156 11.614 89.81616169999853 11.571 102.62476999999897 11.638 103.87613869999893 11.673 87.30158520000066 11.204 96.90328259999873 11.57 102.46963999999858 11.519 102.28015380000049 11.547)
Error minima by case: (0.3797 2 0.116 4 0.3936 8 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 4 0.1049 10 0.1391 5 0.0847 9 0.2821 5 0.021 4 0.117 4 0.3343 6 0.3646 4 0.4929 5 0.04 5 0.0346 11)
Average genome size in population (length): 55.055
Average program size in population (points): 56.055
Average percent parens in population: 0.018
Minimum age in population: 69.6089377704563
Maximum age in population: 74.89332024916348
Average age in population: 72.68746391182584
Median age in population: 72.73141072013922
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.824
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.824
Total error diversity:				 0.092
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 72804812
--- Timings ---
Current time: 1529615069685 milliseconds
Total Time:         181.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        79.4 seconds, 43.8%
Fitness Testing:     79.5 seconds, 43.9%
Report:              22.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction in2} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div integer_pop integer_div float_swap float_sub integer_mult integer_mult float_sub integer_mult integer_inc float_inc float_inc in2 float_pop in1 integer_rot integer_fromfloat integer_fromfloat integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times in2 integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3074.4279171000003
Median total errors in population: 289.0410999999999
Error averages by case: (109.760384199999 11.029 117.34800800000107 11.372 109.6500162999989 11.076 104.26061869999978 11.065 113.45806680000096 12.145 118.93989200000149 11.616 115.84526919999774 11.461 104.96237559999851 11.51 114.99224510000157 11.535 109.32772130000006 11.658 112.88328000000166 11.502 110.48167350000078 11.492 108.95499999999859 11.443 110.03365919999929 11.498 108.63503189999903 11.085 115.60165219999973 11.391 110.4365271999984 11.317 114.47367990000174 11.552 106.28000369999842 11.579 110.89714299999893 11.585 116.1205019999988 11.686 103.96419860000064 11.206 113.69652729999851 11.575 113.73407999999843 11.472 113.28236140000055 11.558)
Error minima by case: (0.3797 2 0.116 3 0.3927 9 0.0147 10 0.0646 10 0.2478 5 0.2526 5 0.6028 2 0.5369 2 0.2901 5 0.1266 4 0.0683 5 0.0125 4 0.2262 1 0.8951 8 0.1391 5 0.9153 9 0.7179 2 0.0101 4 0.117 1 0.3343 6 0.2946 4 0.4796 5 0.04 4 0.0346 9)
Average genome size in population (length): 54.833
Average program size in population (points): 55.833
Average percent parens in population: 0.018
Minimum age in population: 70.98873225061739
Maximum age in population: 76.14964331999758
Average age in population: 74.12857473949968
Median age in population: 74.17680761097749
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.101
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 74177462
--- Timings ---
Current time: 1529615072973 milliseconds
Total Time:         184.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        80.9 seconds, 43.8%
Fitness Testing:     80.9 seconds, 43.9%
Report:              22.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction integer_mult} {:instruction integer_inc} {:instruction integer_fromfloat} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_div} {:instruction integer_mod} {:instruction float_tan} {:instruction 48} {:instruction float_rot} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_add} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in1} {:instruction float_sin} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction float_frominteger} {:instruction tag_float_596} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yank} {:instruction integer_mod} {:instruction float_yankdup} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap integer_mult integer_inc integer_fromfloat float_inc float_inc integer_dec integer_dec float_div integer_mod float_tan 48 float_rot float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times float_add float_sin float_dup integer_dup_items integer_yankdup in2 integer_yank integer_dup_items float_dup integer_dup_items integer_yankdup in1 float_sin integer_mod float_yankdup integer_swap float_dup integer_dup_items integer_yankdup in2 float_tan float_frominteger tag_float_596 -60 float_shove integer_add float_dup_times integer_yank integer_mod float_yankdup print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2944.9356173
Median total errors in population: 289.0410999999999
Error averages by case: (104.03123689999906 11.057 112.16210800000124 11.432 105.45347719999901 11.063 100.5225546999998 11.053 107.95322700000084 12.136 115.50692720000141 11.655 112.04544899999767 11.478 98.88584279999871 11.534 109.69859380000159 11.559 103.96918329999971 11.632 108.4653184000016 11.543 105.18019420000081 11.511 102.43226249999863 11.473 106.62981379999916 11.542 101.17612179999917 11.071 112.23614839999973 11.416 102.70255439999855 11.289 109.43219160000169 11.583 101.66061089999835 11.575 106.15195099999895 11.608 112.6121531999988 11.699 97.5645042000006 11.243 107.28217979999863 11.566 107.45823999999855 11.515 106.94877320000057 11.541)
Error minima by case: (0.3797 2 0.884 4 0.4036 8 0.0147 9 0.0646 10 0.7522 6 0.7474 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 5 0.2262 2 0.8951 9 0.8609 5 0.9153 9 0.7179 4 0.021 4 0.117 3 0.6657 7 0.3646 4 0.4929 5 0.04 5 0.0346 11)
Average genome size in population (length): 54.946
Average program size in population (points): 55.946
Average percent parens in population: 0.018
Minimum age in population: 73.16595182284051
Maximum age in population: 77.42219920154938
Average age in population: 75.53597677812931
Median age in population: 75.58659813991504
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.087
Error (vector) diversity:			 0.087
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 75552687
--- Timings ---
Current time: 1529615076596 milliseconds
Total Time:         187.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        82.4 seconds, 43.9%
Fitness Testing:     82.4 seconds, 43.8%
Report:              23.0 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_flush} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items integer_flush 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add integer_yank integer_shove float_stackdepth -94 integer_rot 70 integer_rot float_shove float_min integer_dup_times integer_yank float_sin float_dup float_yankdup float_shove integer_dec integer_dup_times integer_yank float_sin integer_dup_times integer_yank float_sin float_dup_times integer_dup_times float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 61
Size: 62
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2717.3603053
Median total errors in population: 289.0410999999999
Error averages by case: (93.87306329999923 11.056 104.35203600000094 11.421 98.51975239999908 11.068 93.86462769999977 11.054 97.42916240000076 12.121 104.42017500000124 11.633 102.06346979999788 11.48 92.31741759999899 11.547 101.60776170000128 11.571 94.04251300000007 11.659 97.36883760000151 11.526 95.40073400000077 11.497 93.40838749999878 11.47 100.20190899999928 11.549 93.84542989999943 11.068 101.29556569999973 11.391 95.78105149999887 11.299 100.40203790000145 11.596 91.51060599999877 11.577 97.37254699999895 11.64 101.60715609999909 11.672 88.42303560000065 11.233 97.49560999999879 11.574 98.72767999999867 11.515 95.28473860000048 11.528)
Error minima by case: (0.3797 9 0.116 10 0.4036 9 0.0147 10 0.0646 10 0.2478 10 0.2526 10 0.3972 10 0.4631 10 0.3017 9 0.1266 10 0.0806 9 0.0125 10 0.2262 11 0.1049 8 0.1391 10 0.0847 10 0.2821 10 0.021 9 0.117 11 0.3343 10 0.3646 10 0.4929 8 0.04 10 0.0346 11)
Average genome size in population (length): 54.478
Average program size in population (points): 55.478
Average percent parens in population: 0.019
Minimum age in population: 74.16595182284051
Maximum age in population: 78.94912142866349
Average age in population: 76.98626002903698
Median age in population: 76.99188776585088
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.098
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 76916062
--- Timings ---
Current time: 1529615080005 milliseconds
Total Time:         191.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        83.9 seconds, 43.8%
Fitness Testing:     83.8 seconds, 43.7%
Report:              23.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction float_cos} {:instruction integer_div} {:instruction float_swap} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction in1} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_inc float_cos integer_div float_swap float_swap float_inc float_inc in1 float_inc float_inc in2 float_pop in1 integer_rot integer_fromfloat integer_fromfloat integer_add in2 integer_shove float_stackdepth -94 float_add integer_add integer_yank integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank integer_dup_items float_dup integer_dup_items integer_yankdup integer_dec integer_dup_times float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2820.4294883
Median total errors in population: 289.0410999999999
Error averages by case: (101.14962989999881 11.046 102.06588770000124 11.379 103.14274749999873 11.067 98.91677759999976 11.059 99.33860350000106 12.13 103.3488111000017 11.573 101.11041979999753 11.443 96.89367849999795 11.499 106.11489420000193 11.525 104.95440649999966 11.587 98.11461600000197 11.493 106.06596350000085 11.47 93.72560529999829 11.414 99.26877539999906 11.503 101.52045969999865 11.063 100.43860519999973 11.354 103.011984699998 11.294 106.26320140000205 11.552 102.72272109999781 11.527 102.58322079999881 11.589 100.76990699999868 11.604 99.87033020000067 11.204 107.95811799999832 11.515 97.45684109999812 11.464 97.78328260000059 11.486)
Error minima by case: (0.3797 4 0.116 4 0.3936 8 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 9 0.2821 5 0.021 4 0.117 4 0.3343 6 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 54.358
Average program size in population (points): 55.358
Average percent parens in population: 0.019
Minimum age in population: 76.13513328771458
Maximum age in population: 80.28318080629117
Average age in population: 78.41910151283116
Median age in population: 78.43884261742035
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.091
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 78276337
--- Timings ---
Current time: 1529615083232 milliseconds
Total Time:         194.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        85.4 seconds, 43.8%
Fitness Testing:     85.2 seconds, 43.7%
Report:              24.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction 48} {:instruction float_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yank} {:instruction float_sin} {:instruction -51.4258989461776} {:instruction integer_dup_items} {:instruction float_yank} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction print_integer})
Best program: (integer_pop integer_div integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items float_tan 48 float_yank tag_integer_999 in1 in2 float_pop in1 integer_rot integer_fromfloat integer_rot integer_swap float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank integer_mult float_dup integer_dup_items integer_yank float_sin -51.4258989461776 integer_dup_items float_yank -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3641.1587497
Median total errors in population: 289.0410999999999
Error averages by case: (132.03968979999811 11.075 140.1172840000011 11.493 133.67435139999827 11.075 129.3293304999998 11.072 135.58526060000074 12.171 141.40509580000057 11.751 138.3043003999967 11.556 130.66846919999756 11.619 139.40084290000237 11.646 130.0067390999988 11.743 136.99822880000158 11.615 131.11731880000082 11.603 134.19053749999853 11.547 134.9762547999984 11.621 127.69648189999818 11.106 137.70815599999972 11.482 129.37436809999755 11.336 138.58539970000132 11.644 127.57413659999703 11.663 135.45211199999898 11.689 138.51252229999932 11.804 123.94965040000064 11.278 133.37581229999853 11.659 137.67207999999786 11.583 134.9943268000004 11.619)
Error minima by case: (0.3797 4 0.884 3 0.4036 9 0.0147 9 0.0646 10 0.7522 5 0.7474 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 10 0.8609 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.0346 11)
Average genome size in population (length): 54.646
Average program size in population (points): 55.646
Average percent parens in population: 0.018
Minimum age in population: 77.2040114979629
Maximum age in population: 81.67203544319244
Average age in population: 79.83975208293238
Median age in population: 79.88480841776204
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.094
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 79643837
--- Timings ---
Current time: 1529615086956 milliseconds
Total Time:         198.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        86.9 seconds, 43.8%
Fitness Testing:     86.8 seconds, 43.8%
Report:              24.5 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_stackdepth} {:instruction float_swap} {:instruction float_sub} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_dup_times} {:instruction float_swap} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction 48} {:instruction float_min} {:instruction tag_integer_999} {:instruction float_dup_times} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_max} {:instruction -59} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction print_integer})
Best program: (integer_div float_stackdepth float_swap float_sub float_inc float_inc integer_dec float_dup_times float_swap integer_inc float_inc float_inc float_dup_items float_yank integer_dup_times integer_dec float_tan 48 float_min tag_integer_999 float_dup_times integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -94 float_add in1 integer_rot 70 integer_rot integer_shove integer_max -59 float_shove integer_add float_dup_times print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3093.6604960000004
Median total errors in population: 289.0410999999999
Error averages by case: (106.04694879999911 11.049 115.51673200000154 11.414 115.23724339999865 11.07 111.0888008999998 11.062 111.99180840000102 12.155 118.22115740000157 11.643 114.32575359999736 11.488 108.03596439999814 11.544 118.11870820000195 11.575 111.31747139999965 11.666 112.36554600000176 11.522 112.54185020000077 11.524 109.29212499999848 11.466 112.49352819999899 11.552 109.08234249999872 11.074 115.08240029999973 11.406 110.70759929999814 11.31 117.44939780000173 11.591 107.20853559999821 11.596 114.467557999999 11.629 115.55116189999875 11.703 105.07948400000062 11.249 113.49067029999843 11.588 111.65051999999815 11.494 110.37018840000054 11.557)
Error minima by case: (0.3797 3 0.116 4 0.4036 9 0.0147 10 0.0646 10 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 4 0.117 4 0.3343 6 0.3646 4 0.4929 5 0.04 5 0.0346 11)
Average genome size in population (length): 54.272
Average program size in population (points): 55.272
Average percent parens in population: 0.019
Minimum age in population: 78.59531339624975
Maximum age in population: 83.21231983794576
Average age in population: 81.32045577925551
Median age in population: 81.3907294101576
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.83
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.83
Total error diversity:				 0.09
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 81001987
--- Timings ---
Current time: 1529615090171 milliseconds
Total Time:         201.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        88.3 seconds, 43.8%
Fitness Testing:     88.2 seconds, 43.7%
Report:              25.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_flush} {:instruction 48} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction float_sin} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_dup_items integer_flush 48 float_rot tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add integer_yank integer_shove float_stackdepth -94 float_add float_sin integer_rot 70 integer_rot float_shove integer_dec integer_dup_times float_dec integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank integer_yankdup float_shove integer_dec integer_add integer_fromfloat integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3010.1110424000003
Median total errors in population: 289.0410999999999
Error averages by case: (101.91465689999904 11.053 115.86437220000117 11.442 108.61828569999892 11.062 103.6601354999998 11.054 108.82114070000088 12.142 117.58377520000145 11.672 114.52347449999776 11.517 105.87220249999838 11.545 113.60923480000159 11.577 105.86388949999969 11.675 109.32625940000159 11.559 107.29641900000072 11.533 103.9727524999986 11.479 113.42553149999914 11.571 105.38800159999903 11.062 113.98504009999974 11.421 107.07590309999846 11.32 113.5841392000016 11.611 103.25006089999826 11.608 108.93267839999903 11.639 114.46383699999883 11.718 98.73591830000058 11.251 109.33589509999862 11.593 109.8961806999984 11.521 107.93625810000047 11.55)
Error minima by case: (0.3797 4 0.116 4 0.4036 9 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 8 0.1391 5 0.0847 9 0.2821 5 0.021 5 0.117 4 0.3343 6 0.3646 5 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 53.693
Average program size in population (points): 54.693
Average percent parens in population: 0.019
Minimum age in population: 80.44070299639868
Maximum age in population: 84.5966129684873
Average age in population: 82.7764860779473
Median age in population: 82.79286029363118
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.12
Error (vector) diversity:			 0.122
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 82345412
--- Timings ---
Current time: 1529615093666 milliseconds
Total Time:         205.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        89.8 seconds, 43.8%
Fitness Testing:     89.8 seconds, 43.8%
Report:              25.5 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction integer_add} {:instruction tagged_996} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction 51} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_flush} {:instruction float_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_yankdup} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction tagged_873} {:instruction float_sin} {:instruction float_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div integer_add tagged_996 integer_pop integer_div float_swap 51 float_sub integer_dup_items integer_pop float_yank integer_dup_times float_dup_items float_dup_items float_flush float_rot tag_integer_999 in1 integer_yank in2 in1 integer_rot integer_fromfloat integer_rot float_min integer_stackdepth float_frominteger integer_add integer_yankdup integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times tagged_873 float_sin float_dup float_yankdup integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3206.7020935000005
Median total errors in population: 289.0410999999999
Error averages by case: (115.01804829999855 11.044 120.59324000000161 11.438 115.98768559999849 11.075 111.7630837999998 11.065 116.83871540000081 12.191 122.54689200000146 11.695 119.30377439999735 11.525 112.81416999999803 11.57 120.06963440000193 11.592 117.07459089999917 11.701 115.60755880000158 11.536 118.26268620000074 11.549 112.22622499999868 11.488 116.10133779999883 11.568 115.16231119999851 11.081 119.07037399999973 11.455 116.77318539999804 11.322 119.8523978000016 11.612 114.88641699999766 11.629 116.51979199999903 11.65 119.60350199999883 11.755 111.42702500000061 11.255 120.23024489999861 11.609 116.36555999999808 11.518 115.07664160000046 11.604)
Error minima by case: (0.3797 1 0.884 1 0.4036 9 0.0147 10 0.0646 10 0.7522 2 0.7474 2 0.6028 2 0.5369 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.8951 9 0.8609 2 0.9153 9 0.7179 2 0.021 2 0.117 1 0.6657 3 0.3646 2 0.4929 3 0.04 2 0.0346 10)
Average genome size in population (length): 53.245
Average program size in population (points): 54.245
Average percent parens in population: 0.019
Minimum age in population: 81.9193722371562
Maximum age in population: 86.0942707402419
Average age in population: 84.23769752156797
Median age in population: 84.27735013282101
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.82
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.82
Total error diversity:				 0.099
Error (vector) diversity:			 0.099
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 83677837
--- Timings ---
Current time: 1529615097084 milliseconds
Total Time:         208.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        91.3 seconds, 43.8%
Fitness Testing:     91.3 seconds, 43.7%
Report:              26.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_pop} {:instruction integer_pop} {:instruction integer_div} {:instruction float_rot} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_sub} {:instruction float_dup_items} {:instruction float_tan} {:instruction float_dec} {:instruction float_rot} {:instruction tag_integer_999} {:instruction float_sin} {:instruction integer_yank} {:instruction float_inc} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction tag_integer_999} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction in2} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction tagged_925} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_pop} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_pop integer_pop integer_div float_rot float_inc float_frominteger float_sub float_dup_items float_tan float_dec float_rot tag_integer_999 float_sin integer_yank float_inc float_pop in1 integer_rot integer_fromfloat integer_flush tag_integer_999 integer_dup_times integer_yank in2 in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times tagged_925 float_sin float_dup integer_dup_items integer_yankdup in2 integer_pop integer_max -60 float_shove integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3577.8971047
Median total errors in population: 289.0410999999999
Error averages by case: (129.02079949999842 11.079 135.62199170000167 11.486 133.39941309999838 11.074 129.1837438999998 11.074 132.99270430000092 12.179 136.6764665000012 11.718 134.14830239999714 11.548 127.7338936999977 11.591 133.71377430000217 11.615 131.5099411999992 11.71 130.07650080000175 11.583 132.7365353000007 11.599 127.50068029999855 11.519 133.54357359999864 11.593 128.27510979999835 11.091 133.58558649999975 11.467 129.74722619999778 11.324 133.42466630000166 11.618 129.2349197999974 11.652 130.41056279999896 11.651 133.97628189999884 11.786 126.84327490000061 11.304 134.66014219999863 11.64 130.81300109999788 11.554 131.01901260000056 11.594)
Error minima by case: (0.3797 9 0.116 9 0.4036 9 0.0147 10 0.0646 10 0.2478 10 0.2526 10 0.6028 10 0.5369 10 0.3017 9 0.1266 10 0.0806 9 0.0125 10 0.2262 9 0.8951 9 0.1391 9 0.9153 9 0.7179 9 0.021 9 0.117 9 0.3343 10 0.3646 7 0.4929 8 0.04 9 0.0346 10)
Average genome size in population (length): 52.348
Average program size in population (points): 53.348
Average percent parens in population: 0.019
Minimum age in population: 82.9193722371562
Maximum age in population: 87.58785852136421
Average age in population: 85.74865516697753
Median age in population: 85.79169849948133
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.099
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 84987537
--- Timings ---
Current time: 1529615100228 milliseconds
Total Time:         211.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        92.7 seconds, 43.8%
Fitness Testing:     92.6 seconds, 43.7%
Report:              26.4 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 60
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 60
;;******************************
;; -*- Number IO problem report - generation 60
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_div} {:instruction float_frominteger} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction print_float} {:instruction tag_integer_1084} {:instruction print_integer} {:instruction integer_yank} {:instruction float_pop} {:instruction float_inc} {:instruction in1} {:instruction tag_integer_1084} {:instruction float_max} {:instruction float_add} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_dec} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_div float_frominteger integer_dec float_yank integer_dup_times print_float tag_integer_1084 print_integer integer_yank float_pop float_inc in1 tag_integer_1084 float_max float_add in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_dec integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank integer_yankdup integer_mod integer_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3099.8380184
Median total errors in population: 289.0410999999999
Error averages by case: (110.35370819999888 11.042 119.56135600000154 11.423 108.36480669999906 11.078 104.30268979999981 11.065 114.73003580000116 12.169 121.61038760000176 11.671 118.19002699999739 11.514 104.99171679999834 11.53 112.93611780000164 11.57 112.18785169999988 11.676 114.39488740000196 11.542 113.46740960000083 11.552 110.35087499999827 11.476 112.40518319999936 11.538 107.69217479999897 11.09 117.72179129999974 11.431 109.28822499999839 11.335 112.67547560000195 11.574 109.97122389999797 11.601 109.52968599999896 11.615 118.28450489999852 11.741 105.45376770000063 11.255 115.50955079999832 11.601 115.20071999999809 11.515 113.46484580000059 11.595)
Error minima by case: (0.3797 2 0.116 1 0.3936 8 0.0147 9 0.0646 10 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 5 0.1266 1 0.0806 5 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 10 0.2821 2 0.021 4 0.117 1 0.3343 3 0.3646 4 0.4929 5 0.04 2 0.0346 10)
Average genome size in population (length): 52.195
Average program size in population (points): 53.195
Average percent parens in population: 0.020
Minimum age in population: 84.71136993291776
Maximum age in population: 89.20068076607265
Average age in population: 87.24390875581649
Median age in population: 87.27425473965262
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.089
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 61000
Number of point (instruction) evaluations so far: 86293137
--- Timings ---
Current time: 1529615103688 milliseconds
Total Time:         215.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        94.3 seconds, 43.8%
Fitness Testing:     94.0 seconds, 43.7%
Report:              26.8 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 60
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 61
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 61
;;******************************
;; -*- Number IO problem report - generation 61
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_swap} {:instruction integer_dec} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction -2.9950873249428014} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -58} {:instruction float_shove} {:instruction integer_add} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_dup_items} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop float_swap integer_dec integer_mult integer_inc float_sub integer_mult integer_inc float_inc float_inc in2 float_pop in1 integer_rot integer_fromfloat integer_fromfloat integer_add in2 integer_shove float_stackdepth -94 float_add -2.9950873249428014 integer_rot 70 integer_rot float_shove float_min integer_dup_times integer_yank float_sin float_dup float_yankdup integer_yankdup in2 float_tan integer_max -58 float_shove integer_add integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dec integer_dup_items integer_yankdup in2 integer_dup_items float_dup_times float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2938.5259888000005
Median total errors in population: 289.0410999999999
Error averages by case: (107.13029879999867 11.068 114.27080400000156 11.453 100.11310549999892 11.05 96.69549269999979 11.038 109.57519600000099 12.149 115.25268820000161 11.684 112.37896459999725 11.517 98.64648509999836 11.562 105.61175830000155 11.575 104.0790238999996 11.665 108.6949386000017 11.575 105.57531630000084 11.538 105.67121249999852 11.5 107.75599819999904 11.583 100.246232999999 11.067 111.71673109999972 11.439 101.93529909999842 11.309 105.25632080000172 11.616 101.2431352999981 11.609 101.92879669999888 11.641 112.15215029999868 11.738 98.82667030000069 11.243 108.60093889999857 11.586 109.85199999999827 11.541 108.00343060000056 11.567)
Error minima by case: (0.3797 9 0.116 10 0.3226 8 0.0147 9 0.0646 9 0.2478 9 0.2526 10 0.3972 10 0.4631 10 0.3017 10 0.1266 10 0.0806 9 0.0125 10 0.2262 10 0.1049 9 0.1391 9 0.0847 10 0.2821 11 0.021 10 0.117 11 0.3343 9 0.3646 7 0.4929 9 0.04 10 0.0346 10)
Average genome size in population (length): 52.043
Average program size in population (points): 53.043
Average percent parens in population: 0.020
Minimum age in population: 85.97654250949935
Maximum age in population: 90.68998090718094
Average age in population: 88.67307345934897
Median age in population: 88.68258489604413
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.81
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.81
Total error diversity:				 0.105
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 62000
Number of point (instruction) evaluations so far: 87595112
--- Timings ---
Current time: 1529615106951 milliseconds
Total Time:         218.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        95.7 seconds, 43.8%
Fitness Testing:     95.4 seconds, 43.7%
Report:              27.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 61
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 62
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 62
;;******************************
;; -*- Number IO problem report - generation 62
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_inc} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_inc} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div integer_pop integer_div float_swap float_sub float_yankdup integer_inc integer_mult integer_inc float_inc float_inc in2 float_pop in1 integer_rot integer_fromfloat integer_fromfloat integer_add in2 integer_shove float_stackdepth -94 integer_inc in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_dup_items float_dup integer_dup_items integer_yankdup integer_dec integer_dup_times float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 2972.6679995000004
Median total errors in population: 289.0410999999999
Error averages by case: (103.32275879999918 11.027 108.60347200000109 11.401 110.56358439999886 11.061 105.83687149999979 11.033 105.01838980000096 12.12 110.66138760000153 11.656 107.32127959999778 11.467 103.37167479999853 11.536 114.11106430000164 11.572 109.32634649999969 11.703 104.15176080000172 11.511 110.51848740000082 11.547 100.44682499999851 11.45 107.44621899999923 11.538 107.16981739999883 11.064 107.11165219999972 11.398 109.07657819999828 11.316 113.31257870000165 11.561 107.23621139999803 11.609 110.177398999999 11.604 107.70117059999876 11.71 103.22514580000062 11.265 112.69623569999854 11.594 104.40451999999847 11.485 103.08756900000053 11.541)
Error minima by case: (0.3797 1 0.116 1 0.4036 9 0.0147 9 0.0646 10 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 9 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.0346 10)
Average genome size in population (length): 52.224
Average program size in population (points): 53.224
Average percent parens in population: 0.020
Minimum age in population: 86.97654250949935
Maximum age in population: 92.28135915487604
Average age in population: 90.13900106609597
Median age in population: 90.16924304960212
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.807
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.807
Total error diversity:				 0.111
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 63000
Number of point (instruction) evaluations so far: 88901837
--- Timings ---
Current time: 1529615110185 milliseconds
Total Time:         221.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        97.2 seconds, 43.8%
Fitness Testing:     96.8 seconds, 43.6%
Report:              27.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 62
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 63
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 63
;;******************************
;; -*- Number IO problem report - generation 63
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_inc} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_mult} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dup} {:instruction float_shove} {:instruction integer_add} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dup} {:instruction float_shove} {:instruction integer_add} {:instruction integer_max} {:instruction float_shove} {:instruction float_shove} {:instruction integer_yankdup} {:instruction float_sin} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_inc integer_mult integer_inc float_inc integer_inc float_inc float_inc integer_dec float_yank integer_dup_times float_inc in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_mult in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank integer_dup_items float_dup float_shove integer_add integer_yank integer_dup_items float_dup float_shove integer_add integer_max float_shove float_shove integer_yankdup float_sin float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 54
Size: 55
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 2881.3135624
Median total errors in population: 289.0410999999999
Error averages by case: (98.53561969999902 11.032 108.99889200000098 11.383 102.1360351999989 11.074 97.91731899999978 11.059 105.05855000000092 12.138 110.34616620000152 11.625 107.45451139999784 11.456 101.44818399999842 11.475 109.54678200000161 11.513 101.31528919999992 11.608 104.38316620000171 11.493 102.34360560000083 11.483 101.98708749999854 11.44 104.81643299999921 11.485 99.69579359999902 11.07 107.01712209999971 11.387 101.28766079999842 11.295 108.87739780000173 11.51 99.39939599999823 11.537 106.06349399999891 11.541 107.45549329999882 11.67 95.87166040000066 11.225 104.28383719999854 11.529 105.30511999999851 11.468 103.74094620000058 11.532)
Error minima by case: (0.3797 2 0.116 4 0.4036 10 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 2 0.4631 2 0.3017 3 0.1266 4 0.0806 3 0.0125 5 0.2262 1 0.1049 9 0.1391 5 0.0847 10 0.2821 2 0.021 2 0.117 1 0.3343 6 0.3646 2 0.4929 3 0.04 5 0.0346 10)
Average genome size in population (length): 52.019
Average program size in population (points): 53.019
Average percent parens in population: 0.020
Minimum age in population: 89.35919526919044
Maximum age in population: 93.39768999126683
Average age in population: 91.60836704876218
Median age in population: 91.66179512866299
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.1
Error (vector) diversity:			 0.101
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 64000
Number of point (instruction) evaluations so far: 90203520
--- Timings ---
Current time: 1529615113682 milliseconds
Total Time:         225.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:        98.6 seconds, 43.8%
Fitness Testing:     98.4 seconds, 43.7%
Report:              28.1 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 63
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 64
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 64
;;******************************
;; -*- Number IO problem report - generation 64
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_inc} {:instruction print_integer} {:instruction integer_dec} {:instruction integer_max} {:instruction integer_dup_times} {:instruction integer_dup_items} {:instruction float_dup_items} {:instruction float_dec} {:instruction 48} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_yankdup} {:instruction float_shove} {:instruction float_mod} {:instruction integer_dup_times} {:instruction float_sin} {:instruction in1} {:instruction integer_dup_items} {:instruction integer_shove} {:instruction in2} {:instruction float_yankdup} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_mult} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div integer_pop integer_div float_swap float_sub integer_mult integer_inc float_sub integer_mult integer_inc print_integer integer_dec integer_max integer_dup_times integer_dup_items float_dup_items float_dec 48 float_dup_items float_tan integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add float_dup_times float_yankdup float_shove float_mod integer_dup_times float_sin in1 integer_dup_items integer_shove in2 float_yankdup float_dec float_frominteger float_mult integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 71
Size: 72
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 3403.8506165999993
Median total errors in population: 289.0410999999999
Error averages by case: (119.40974859999842 11.067 128.98309600000186 11.476 123.3086287999985 11.073 119.2555204999998 11.061 124.61529680000092 12.173 131.16086560000153 11.757 127.79582639999705 11.573 118.22626359999789 11.596 128.77137980000214 11.629 125.70056229999912 11.736 123.95488740000172 11.611 126.94086790000081 11.589 119.2968499999985 11.532 123.7127665999986 11.604 121.78485489999858 11.086 127.46759959999974 11.486 123.35403089999804 11.34 128.5299892000017 11.633 123.15119609999745 11.67 125.186462999999 11.68 128.01185079999874 11.798 119.43212140000058 11.285 128.97937359999855 11.657 124.09751999999773 11.571 124.41905680000055 11.621)
Error minima by case: (0.3797 9 0.116 10 0.4036 9 0.0147 9 0.0646 10 0.2478 9 0.2526 10 0.3972 10 0.4631 10 0.3017 10 0.1266 9 0.0806 9 0.0125 10 0.2262 10 0.1049 10 0.1391 9 0.0847 9 0.2821 9 0.021 10 0.117 9 0.3343 9 0.3646 9 0.4929 10 0.04 9 0.0346 10)
Average genome size in population (length): 51.88
Average program size in population (points): 52.88
Average percent parens in population: 0.020
Minimum age in population: 90.77723435718765
Maximum age in population: 94.99044303559805
Average age in population: 93.04352934852612
Median age in population: 93.08366885050361
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.821
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.821
Total error diversity:				 0.113
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 65000
Number of point (instruction) evaluations so far: 91501511
--- Timings ---
Current time: 1529615117063 milliseconds
Total Time:         228.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       100.1 seconds, 43.8%
Fitness Testing:     99.8 seconds, 43.7%
Report:              28.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 64
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 65
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 65
;;******************************
;; -*- Number IO problem report - generation 65
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_add} {:instruction integer_div} {:instruction integer_pop} {:instruction print_float} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_max} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction float_sin} {:instruction float_sub} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -95} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction tagged_873} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_shove} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_dup_items} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_dec float_add integer_div integer_pop print_float integer_mult integer_inc float_inc integer_max integer_dec float_yank integer_pop integer_dup_times float_sin float_sub integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -95 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times tagged_873 float_sin integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_pop float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_yank float_sin float_shove integer_yankdup integer_mod float_dup_items integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 66
Size: 67
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 2846.255709100001
Median total errors in population: 289.0410999999999
Error averages by case: (96.41243819999909 11.029 106.06499200000111 11.373 100.56842079999892 11.057 95.7153042999998 11.06 104.31106050000089 12.168 109.43793600000153 11.598 105.43894379999779 11.446 98.8979923999983 11.474 105.83400340000162 11.504 101.87479149999977 11.601 102.95747060000177 11.475 102.74495120000076 11.479 98.48545079999849 11.428 104.01539719999919 11.482 100.54710829999892 11.071 106.29359199999972 11.395 102.04757609999838 11.287 105.4042694000017 11.491 100.07298929999808 11.529 102.50549399999902 11.529 106.77881599999876 11.634 95.83071860000064 11.217 103.65259759999842 11.525 102.12591999999847 11.462 102.38947510000048 11.534)
Error minima by case: (0.6203 2 0.116 4 0.3936 8 0.0147 9 0.9354 10 0.2478 6 0.2526 5 0.3972 4 0.4631 5 0.3017 5 0.1266 4 0.0806 5 0.0125 5 0.2262 3 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 6 0.3646 4 0.4929 6 0.04 4 0.9654 10)
Average genome size in population (length): 51.109
Average program size in population (points): 52.109
Average percent parens in population: 0.020
Minimum age in population: 92.16796030590771
Maximum age in population: 96.46363281075374
Average age in population: 94.51752540508596
Median age in population: 94.55493864789538
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.088
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 66000
Number of point (instruction) evaluations so far: 92780186
--- Timings ---
Current time: 1529615120458 milliseconds
Total Time:         231.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       101.6 seconds, 43.8%
Fitness Testing:    101.1 seconds, 43.6%
Report:              29.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 65
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 66
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 66
;;******************************
;; -*- Number IO problem report - generation 66
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_yank} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction integer_dec} {:instruction float_sub} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -93} {:instruction float_dec} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction float_sin} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_shove} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_dec integer_div float_sub float_yank integer_pop integer_div float_swap integer_dec float_sub tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_fromfloat integer_fromfloat integer_add in2 integer_shove float_stackdepth integer_add integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -93 float_dec integer_rot 70 integer_rot float_shove float_sin integer_dup_times integer_yank float_shove integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 2753.2730275
Median total errors in population: 289.0410999999999
Error averages by case: (97.1554429999995 11.048 103.26710000000061 11.372 95.18564469999951 11.044 92.0805967999998 11.033 99.37347180000106 12.104 105.32118620000158 11.608 101.83026839999823 11.442 91.52160469999912 11.482 100.01505510000112 11.513 101.79659500000032 11.616 97.73454040000176 11.503 103.06708690000083 11.49 93.52295749999863 11.423 96.54966319999976 11.504 96.2756697999994 11.051 101.37928119999972 11.374 97.98780729999879 11.279 99.79279310000179 11.542 98.62479669999854 11.545 96.41844669999891 11.563 102.11884759999873 11.658 94.67896730000066 11.226 105.10470229999841 11.546 98.61401999999887 11.467 97.9214818000006 11.502)
Error minima by case: (0.3797 4 0.116 3 0.3836 8 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 8 0.1391 5 0.0847 9 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 50.918
Average program size in population (points): 51.918
Average percent parens in population: 0.020
Minimum age in population: 93.54035300331805
Maximum age in population: 98.07294602694363
Average age in population: 95.98645103408394
Median age in population: 96.04245706003135
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.093
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 67000
Number of point (instruction) evaluations so far: 94054036
--- Timings ---
Current time: 1529615123809 milliseconds
Total Time:         235.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       103.1 seconds, 43.8%
Fitness Testing:    102.6 seconds, 43.6%
Report:              29.6 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 66
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 67
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 67
;;******************************
;; -*- Number IO problem report - generation 67
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_inc} {:instruction float_mult} {:instruction float_inc} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_dup} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_yankdup} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div float_swap float_inc integer_mult integer_inc float_inc integer_inc float_inc float_frominteger integer_inc float_mult float_inc in2 float_pop in1 integer_rot in1 integer_fromfloat integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_dup float_shove integer_dec integer_dup_times integer_yank float_sin float_dup integer_dup_items integer_yankdup in2 float_yankdup integer_add integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 3097.8731423000004
Median total errors in population: 289.0410999999999
Error averages by case: (107.32032649999918 11.018 118.93635600000115 11.404 109.33931799999901 11.074 104.92901029999979 11.069 113.62745700000093 12.174 120.78865300000156 11.643 117.38876399999772 11.492 106.91234759999845 11.518 115.5308023000015 11.538 112.1523670999998 11.641 112.3814322000017 11.504 113.02171900000081 11.5 107.00816249999856 11.456 115.03024259999933 11.509 109.55615729999903 11.073 116.93937399999972 11.403 111.05693129999841 11.322 115.44550090000175 11.558 110.29708099999824 11.568 111.73997299999895 11.583 117.6775019999987 11.689 104.97982680000061 11.225 115.02235849999859 11.558 112.98207999999842 11.484 111.23339940000054 11.573)
Error minima by case: (0.3797 1 0.884 1 0.4036 9 0.0147 9 0.0646 10 0.7522 2 0.7474 2 0.6028 2 0.5369 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.8951 9 0.8609 2 0.9153 10 0.7179 2 0.021 2 0.117 1 0.6657 3 0.3646 2 0.4929 3 0.04 2 0.0346 10)
Average genome size in population (length): 50.81
Average program size in population (points): 51.81
Average percent parens in population: 0.020
Minimum age in population: 95.11226039752674
Maximum age in population: 99.48761221155611
Average age in population: 97.44595137211908
Median age in population: 97.49512835365009
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.795
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.795
Total error diversity:				 0.111
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 68000
Number of point (instruction) evaluations so far: 95325511
--- Timings ---
Current time: 1529615126926 milliseconds
Total Time:         238.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       104.6 seconds, 43.8%
Fitness Testing:    103.9 seconds, 43.6%
Report:              29.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 67
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 68
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 68
;;******************************
;; -*- Number IO problem report - generation 68
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction integer_pop} {:instruction float_cos} {:instruction float_swap} {:instruction float_yankdup} {:instruction integer_mult} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_sub} {:instruction tag_integer_1124} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_dup} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_min} {:instruction 78} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_sub} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div integer_pop float_cos float_swap float_yankdup integer_mult integer_inc float_inc integer_inc float_inc float_inc float_sub tag_integer_1124 in1 integer_yank in2 float_pop in1 integer_fromfloat integer_rot float_dup float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_min 78 integer_mod float_yankdup integer_sub integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 3469.7990127000003
Median total errors in population: 289.0410999999999
Error averages by case: (118.39773489999892 11.028 132.9432237000013 11.442 123.69002549999871 11.068 118.6496356999998 11.063 127.61196270000104 12.176 135.11822750000096 11.706 131.49928159999732 11.529 124.18829089999807 11.552 130.436311200002 11.583 129.55260479999953 11.678 126.27399440000174 11.562 130.9292567000008 11.576 122.68660529999846 11.486 128.8982521999989 11.564 123.08610979999884 11.092 131.03130829999975 11.444 124.64332739999833 11.351 130.11123050000174 11.611 127.08788719999805 11.606 126.28703079999899 11.636 131.70061329999868 11.761 121.8183367000006 11.27 133.0706094999988 11.618 127.24000109999808 11.526 125.32415100000054 11.595)
Error minima by case: (0.3797 1 0.884 1 0.3936 7 0.0147 8 0.0646 9 0.7522 2 0.7474 2 0.6028 2 0.5369 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.8951 9 0.8609 2 0.9153 9 0.7179 2 0.021 2 0.117 1 0.6657 3 0.3646 2 0.4929 3 0.04 2 0.0346 11)
Average genome size in population (length): 50.663
Average program size in population (points): 51.663
Average percent parens in population: 0.020
Minimum age in population: 96.11226039752674
Maximum age in population: 100.8807282477323
Average age in population: 98.86248038866314
Median age in population: 98.9249798968957
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.096
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 69000
Number of point (instruction) evaluations so far: 96593436
--- Timings ---
Current time: 1529615130156 milliseconds
Total Time:         241.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       105.9 seconds, 43.8%
Fitness Testing:    105.4 seconds, 43.6%
Report:              30.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 68
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 69
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 69
;;******************************
;; -*- Number IO problem report - generation 69
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_pop} {:instruction integer_div} {:instruction integer_inc} {:instruction float_inc} {:instruction integer_dup_times} {:instruction tag_integer_999} {:instruction in1} {:instruction float_flush} {:instruction in2} {:instruction tagged_688} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_tan} {:instruction integer_yank} {:instruction -60} {:instruction integer_min} {:instruction integer_add} {:instruction float_yank} {:instruction in2} {:instruction float_inc} {:instruction float_yankdup} {:instruction 36.60143393103917} {:instruction print_integer})
Best program: (integer_pop integer_div integer_inc float_inc float_yank integer_yankdup float_dup_items float_yank integer_pop integer_div integer_inc float_inc integer_dup_times tag_integer_999 in1 float_flush in2 tagged_688 in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 integer_shove float_stackdepth -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times float_dup_items float_tan integer_yank -60 integer_min integer_add float_yank in2 float_inc float_yankdup 36.60143393103917 print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2681.9469424
Median total errors in population: 289.0410999999999
Error averages by case: (91.76154569999944 11.02 102.9278460000011 11.364 93.07742299999927 11.069 88.17188329999979 11.048 98.96836160000092 12.124 104.82295320000146 11.589 101.57883399999773 11.439 91.08181479999868 11.477 98.81694610000147 11.507 92.30790300000028 11.604 98.28735000000167 11.478 93.26721870000074 11.461 95.79501999999854 11.42 98.08150299999922 11.487 89.59788969999957 11.063 101.41200039999973 11.363 91.3763238999989 11.281 97.93413510000165 11.506 90.63305249999881 11.526 95.01280899999897 11.554 101.95390919999885 11.642 86.4928974000006 11.208 96.0668711999987 11.532 99.03846999999843 11.45 97.75298160000058 11.517)
Error minima by case: (0.3797 1 0.116 1 0.3936 8 0.0147 9 0.0646 9 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 10 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.0346 10)
Average genome size in population (length): 50.299
Average program size in population (points): 51.299
Average percent parens in population: 0.020
Minimum age in population: 97.11226039752674
Maximum age in population: 102.2458825772309
Average age in population: 100.2680913531658
Median age in population: 100.2917264684334
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.768
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.768
Total error diversity:				 0.103
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 70000
Number of point (instruction) evaluations so far: 97851886
--- Timings ---
Current time: 1529615133755 milliseconds
Total Time:         245.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       107.4 seconds, 43.8%
Fitness Testing:    107.0 seconds, 43.6%
Report:              30.7 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 69
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 70
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 70
;;******************************
;; -*- Number IO problem report - generation 70
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction integer_add} {:instruction tagged_996} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction 51} {:instruction float_sub} {:instruction integer_div} {:instruction float_swap} {:instruction integer_min} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dec} {:instruction float_sub} {:instruction tag_integer_832} {:instruction in1} {:instruction float_dup_items} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction -94} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_sin} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div integer_add tagged_996 integer_pop integer_div float_swap 51 float_sub integer_div float_swap integer_min integer_inc float_inc float_inc integer_dec float_yank integer_dec float_sub tag_integer_832 in1 float_dup_items in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 -94 float_add in1 integer_rot 70 integer_rot float_shove integer_dup_times integer_yank integer_swap float_sin float_dup integer_dup_items integer_yankdup in2 float_tan integer_max -60 float_shove integer_add integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 3137.7102605
Median total errors in population: 289.0410999999999
Error averages by case: (112.04796179999889 11.058 120.3767040000012 11.451 115.3523336999987 11.081 110.3831454999998 11.073 112.03235620000098 12.151 119.32738760000163 11.676 117.32827959999763 11.518 111.06718329999809 11.561 119.62717650000185 11.592 111.99715339999977 11.676 113.30230560000183 11.557 113.21649020000085 11.531 110.05417499999841 11.488 115.00223999999912 11.568 111.92955919999879 11.078 116.16665219999972 11.42 113.14741349999814 11.339 119.1335107000019 11.628 109.34926589999809 11.608 115.18477479999889 11.664 116.47817059999865 11.712 106.07349690000063 11.244 115.45297269999845 11.601 115.2476399999982 11.532 111.06791160000057 11.557)
Error minima by case: (0.3797 2 0.116 4 0.3936 8 0.0147 9 0.0646 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 49.722
Average program size in population (points): 50.722
Average percent parens in population: 0.021
Minimum age in population: 99.26859818856009
Maximum age in population: 103.8651929450372
Average age in population: 101.7038205693406
Median age in population: 101.7613361634268
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.767
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.767
Total error diversity:				 0.106
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 71000
Number of point (instruction) evaluations so far: 99095736
--- Timings ---
Current time: 1529615136864 milliseconds
Total Time:         248.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       108.9 seconds, 43.8%
Fitness Testing:    108.3 seconds, 43.6%
Report:              31.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 70
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 71
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 71
;;******************************
;; -*- Number IO problem report - generation 71
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction integer_mult} {:instruction float_yankdup} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_sin} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction in2} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction -60} {:instruction float_shove} {:instruction integer_add} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction 36.60143393103917} {:instruction float_shove} {:instruction integer_add} {:instruction float_yank} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_yankdup} {:instruction 36.60143393103917} {:instruction print_integer})
Best program: (float_inc float_flush integer_pop integer_div float_swap integer_mult float_yankdup float_inc float_frominteger integer_rot float_shove tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_fromfloat integer_fromfloat integer_add float_stackdepth -94 integer_fromfloat in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times float_inc float_sin integer_dec integer_dup_times integer_yank integer_dup_times integer_yank in2 in2 float_tan integer_max -60 float_shove integer_add float_yank integer_yankdup float_inc float_yankdup 36.60143393103917 float_shove integer_add float_yank integer_yankdup float_inc float_yankdup 36.60143393103917 print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 3278.4162112000004
Median total errors in population: 289.0410999999999
Error averages by case: (117.04448269999882 11.057 122.89242800000162 11.435 117.97932429999854 11.065 114.03194469999978 11.051 120.20019600000097 12.157 125.90740520000156 11.674 122.84177439999726 11.521 113.2365811999981 11.548 123.23124510000218 11.573 120.35304669999942 11.654 119.38255880000187 11.555 121.93721000000086 11.531 114.76321249999839 11.484 117.53539719999878 11.558 117.71822459999882 11.086 122.60753939999972 11.434 119.28041629999798 11.327 123.0169620000018 11.604 118.13908949999791 11.596 119.90225999999888 11.632 123.08849619999873 11.719 115.31592530000064 11.254 123.74257509999852 11.59 119.1195199999979 11.529 117.95839600000059 11.556)
Error minima by case: (0.3797 5 0.884 3 0.3936 8 0.0147 9 0.0646 10 0.7522 5 0.7474 5 0.6028 3 0.5369 4 0.3017 6 0.1266 4 0.0806 6 0.0125 4 0.2262 2 0.8951 9 0.8609 5 0.9153 9 0.2821 4 0.021 5 0.117 3 0.6657 6 0.3646 4 0.4929 6 0.04 4 0.0346 10)
Average genome size in population (length): 49.297
Average program size in population (points): 50.297
Average percent parens in population: 0.021
Minimum age in population: 100.2685981885601
Maximum age in population: 105.2366482330202
Average age in population: 103.0869149193635
Median age in population: 103.1330666636608
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.779
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.779
Total error diversity:				 0.087
Error (vector) diversity:			 0.089
Behavioral diversity:				 0.09
--- Run Statistics ---
Number of program evaluations used so far: 72000
Number of point (instruction) evaluations so far: 100328961
--- Timings ---
Current time: 1529615140174 milliseconds
Total Time:         251.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       110.5 seconds, 43.9%
Fitness Testing:    109.6 seconds, 43.5%
Report:              31.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 71
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 72
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 72
;;******************************
;; -*- Number IO problem report - generation 72
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_stackdepth} {:instruction integer_div} {:instruction float_shove} {:instruction float_sub} {:instruction float_pop} {:instruction print_float} {:instruction integer_min} {:instruction integer_div} {:instruction float_rot} {:instruction tag_integer_999} {:instruction print_float} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -95} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction tagged_873} {:instruction integer_dec} {:instruction float_dup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction float_tan} {:instruction float_max} {:instruction -60} {:instruction float_pop} {:instruction integer_add} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_stackdepth integer_div float_shove float_sub float_pop print_float integer_min integer_div float_rot tag_integer_999 print_float integer_yank in2 float_pop in1 integer_rot integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add in2 float_dup_times float_stackdepth -95 float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times tagged_873 integer_dec float_dup float_yankdup integer_yankdup in2 float_tan float_max -60 float_pop integer_add float_dup_times integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2823.5686821000004
Median total errors in population: 289.0410999999999
Error averages by case: (97.8347328999992 11.073 108.21877600000174 11.416 100.90579989999893 11.066 96.75006549999979 11.05 98.52187040000089 12.121 108.8569096000015 11.629 106.3867535999972 11.48 97.45671519999856 11.519 105.14548490000207 11.554 98.11233930000007 11.619 102.63606520000171 11.525 99.43389480000084 11.494 99.72429999999854 11.449 104.26629979999879 11.542 100.30603649999924 11.067 105.74326119999972 11.403 101.8704832999985 11.305 104.95125290000178 11.59 95.74776479999846 11.572 101.64091699999885 11.622 106.1018275999988 11.665 92.65923660000064 11.243 101.49159009999859 11.568 103.82211999999812 11.496 98.4171850000006 11.499)
Error minima by case: (0.3797 9 0.116 10 0.3226 8 0.0147 8 0.0646 9 0.2478 9 0.2526 10 0.3972 10 0.4631 10 0.3017 10 0.1266 10 0.0806 9 0.0125 10 0.2262 10 0.1049 9 0.1391 9 0.0847 10 0.2821 11 0.021 10 0.117 11 0.3343 9 0.3646 9 0.4929 10 0.04 10 0.0346 9)
Average genome size in population (length): 49.263
Average program size in population (points): 50.263
Average percent parens in population: 0.021
Minimum age in population: 102.0161825559227
Maximum age in population: 106.5637826078406
Average age in population: 104.5312670667216
Median age in population: 104.5577912279217
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.094
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.096
--- Run Statistics ---
Number of program evaluations used so far: 73000
Number of point (instruction) evaluations so far: 101561261
--- Timings ---
Current time: 1529615143340 milliseconds
Total Time:         254.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       112.0 seconds, 43.9%
Fitness Testing:    110.8 seconds, 43.5%
Report:              32.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 72
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 73
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 73
;;******************************
;; -*- Number IO problem report - generation 73
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction float_sub} {:instruction float_yank} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_shove} {:instruction integer_dec} {:instruction tag_integer_999} {:instruction in1} {:instruction float_yankdup} {:instruction integer_dec} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_sub} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction float_tan} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_min} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_integer})
Best program: (integer_pop integer_div float_sub float_yank integer_pop integer_div float_swap float_shove integer_dec tag_integer_999 in1 float_yankdup integer_dec integer_stackdepth float_swap float_sub float_dup_items integer_fromfloat integer_dec float_tan float_flush integer_shove integer_min in1 integer_yank in2 integer_rot integer_fromfloat float_sin integer_fromfloat integer_add print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 2900.3133482000007
Median total errors in population: 289.0410999999999
Error averages by case: (96.04566959999875 11.02 108.00319600000155 11.382 105.02957039999865 11.053 101.0979597999998 11.053 99.67301520000098 12.133 111.63215740000162 11.613 108.07225879999721 11.459 101.63073809999807 11.497 109.68383330000191 11.522 104.43119889999936 11.623 104.5549258000018 11.473 104.3655645000009 11.496 100.47113749999842 11.436 104.7221931999989 11.478 105.35109869999864 11.078 109.02023489999972 11.399 106.91968709999803 11.297 110.13598440000173 11.508 102.01231209999771 11.548 107.22429479999892 11.549 108.72783339999867 11.674 96.82037940000062 11.225 106.1450426999985 11.541 104.11567999999795 11.464 98.35538220000059 11.551)
Error minima by case: (0.3797 1 0.116 1 0.3226 8 0.0147 9 0.0646 10 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 10 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.0346 10)
Average genome size in population (length): 48.38
Average program size in population (points): 49.38
Average percent parens in population: 0.021
Minimum age in population: 103.5787304709602
Maximum age in population: 108.0602418993885
Average age in population: 105.9651128326472
Median age in population: 106.00544610986
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.096
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 74000
Number of point (instruction) evaluations so far: 102771336
--- Timings ---
Current time: 1529615146583 milliseconds
Total Time:         258.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       113.5 seconds, 43.9%
Fitness Testing:    112.3 seconds, 43.5%
Report:              32.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 73
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 74
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 74
;;******************************
;; -*- Number IO problem report - generation 74
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction integer_pop} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_yankdup} {:instruction float_inc} {:instruction integer_inc} {:instruction integer_dup} {:instruction 48} {:instruction integer_flush} {:instruction integer_dup_times} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_swap} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction float_sin} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction float_dec} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction float_sin} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_inc float_flush integer_pop integer_div float_swap integer_pop in2 float_pop in1 integer_yankdup float_inc integer_inc integer_dup 48 integer_flush integer_dup_times in2 float_pop in1 integer_rot float_swap integer_fromfloat integer_fromfloat integer_add in2 integer_shove float_stackdepth integer_add integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger float_sin in2 integer_shove float_stackdepth -94 float_dec integer_rot 70 integer_rot float_shove float_sin integer_dup_times integer_yank integer_yankdup integer_mod float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2868.970502
Median total errors in population: 289.0410999999999
Error averages by case: (98.8217881999993 11.01 108.35096400000135 11.343 98.74562159999921 11.064 95.7653089999998 11.064 103.04451640000113 12.142 109.2476794000017 11.553 106.88499579999751 11.418 101.5003895999981 11.442 107.44446650000174 11.463 102.51988099999981 11.544 104.05320460000198 11.435 103.30875450000084 11.435 101.72436249999826 11.388 105.78939719999916 11.435 100.90913119999871 11.074 106.51228749999973 11.341 102.43594919999809 11.284 107.27742310000194 11.464 100.96540609999815 11.491 103.48396199999891 11.493 106.84648749999859 11.607 97.57886120000063 11.194 104.0733167999984 11.482 104.87691999999822 11.418 101.7254271000006 11.5)
Error minima by case: (0.3797 1 0.116 1 0.3936 8 0.0147 9 0.0646 9 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 10 0.1391 2 0.0847 9 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.0346 10)
Average genome size in population (length): 47.735
Average program size in population (points): 48.735
Average percent parens in population: 0.022
Minimum age in population: 105.1009514651025
Maximum age in population: 109.8696935940199
Average age in population: 107.3843196404765
Median age in population: 107.4230049444861
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.783
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.783
Total error diversity:				 0.088
Error (vector) diversity:			 0.088
Behavioral diversity:				 0.089
--- Run Statistics ---
Number of program evaluations used so far: 75000
Number of point (instruction) evaluations so far: 103965361
--- Timings ---
Current time: 1529615149720 milliseconds
Total Time:         261.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       114.9 seconds, 44.0%
Fitness Testing:    113.7 seconds, 43.5%
Report:              32.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 74
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 75
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 75
;;******************************
;; -*- Number IO problem report - generation 75
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_swap} {:instruction float_cos} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dec} {:instruction float_sub} {:instruction tag_integer_999} {:instruction float_max} {:instruction integer_yank} {:instruction in2} {:instruction float_dup} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_dup} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction -25.65635614898955} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_fromfloat} {:instruction float_add} {:instruction in1} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_add} {:instruction float_tan} {:instruction integer_rot} {:instruction 70} {:instruction integer_rot} {:instruction integer_shove} {:instruction integer_dec} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_dup_items} {:instruction float_dup} {:instruction integer_dup_items} {:instruction integer_yankdup} {:instruction float_shove} {:instruction integer_add} {:instruction float_dup_times} {:instruction float_add} {:instruction integer_swap} {:instruction in2} {:instruction float_tan} {:instruction integer_max} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_swap float_cos integer_inc float_inc float_inc integer_dec float_yank integer_dec float_sub tag_integer_999 float_max integer_yank in2 float_dup in1 integer_rot integer_fromfloat integer_rot float_dup float_stackdepth float_frominteger integer_add -25.65635614898955 integer_shove float_stackdepth integer_fromfloat float_add in1 integer_rot 70 integer_rot float_shove integer_dec integer_dup_times integer_add float_tan integer_rot 70 integer_rot integer_shove integer_dec integer_dup_times integer_yank integer_dup_items float_dup integer_dup_items integer_yankdup float_shove integer_add float_dup_times float_add integer_swap in2 float_tan integer_max integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2531.0196243
Median total errors in population: 289.0410999999999
Error averages by case: (88.72342389999916 11.027 94.89108000000067 11.328 89.35494519999912 11.054 85.59571589999977 11.048 90.75107520000078 12.138 95.34219260000135 11.513 93.09125879999826 11.406 84.206587599999 11.422 91.50276530000119 11.451 89.33808430000003 11.528 90.0131036000015 11.402 90.1313334000008 11.412 86.46956249999876 11.358 90.8186211999994 11.423 87.17316589999945 11.053 92.86759199999972 11.332 88.59933089999879 11.257 91.42533950000156 11.46 87.79868899999886 11.474 88.41511699999889 11.482 93.26781599999899 11.565 83.39731480000069 11.2 91.92900929999874 11.457 90.98127999999888 11.381 90.30822040000054 11.456)
Error minima by case: (0.3797 2 0.116 4 0.3226 8 0.0147 9 0.0646 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 2 0.1049 9 0.1391 5 0.0847 9 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 47.976
Average program size in population (points): 48.976
Average percent parens in population: 0.022
Minimum age in population: 106.1279138397246
Maximum age in population: 110.4601836420934
Average age in population: 108.7880847756696
Median age in population: 108.8280357526528
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.086
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 76000
Number of point (instruction) evaluations so far: 105165286
--- Timings ---
Current time: 1529615152798 milliseconds
Total Time:         264.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       116.3 seconds, 44.0%
Fitness Testing:    114.9 seconds, 43.5%
Report:              33.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 75
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 76
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 76
;;******************************
;; -*- Number IO problem report - generation 76
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_dec} {:instruction integer_pop} {:instruction float_pop} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction float_flush} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_yank} {:instruction float_yank} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction print_integer} {:instruction integer_shove} {:instruction float_div} {:instruction float_sin} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_dec} {:instruction float_add} {:instruction float_add} {:instruction float_frominteger} {:instruction 70})
Best program: (integer_pop integer_dec integer_pop float_pop float_swap float_inc float_inc float_flush integer_yank integer_dec float_yank float_yank integer_rot integer_fromfloat integer_rot in2 float_pop in1 integer_stackdepth integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add print_integer integer_shove float_div float_sin integer_add in2 integer_shove float_stackdepth integer_dec float_add float_add float_frominteger 70)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 2748.2286205
Median total errors in population: 289.0410999999999
Error averages by case: (93.77604239999953 11.025 103.4235000000011 11.338 97.34676839999922 11.055 92.4575047999998 11.039 100.99209780000103 12.154 105.38543160000165 11.534 102.44422759999773 11.414 93.6840343999985 11.438 102.67790930000167 11.46 97.08086940000022 11.534 98.6764706000019 11.417 97.65106460000082 11.413 94.62548749999836 11.38 98.51345659999951 11.449 95.2103148999993 11.049 102.47714839999973 11.341 96.79747529999854 11.254 102.5930379000019 11.47 95.94829019999852 11.464 99.3174829999989 11.505 103.04915319999868 11.576 92.14579120000063 11.209 99.2476827999984 11.465 99.06463999999852 11.4 98.78173860000058 11.478)
Error minima by case: (0.3797 2 0.116 4 0.3936 7 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.6028 5 0.5369 5 0.3017 6 0.1266 4 0.0806 6 0.0125 4 0.2262 3 0.8951 9 0.1391 5 0.9153 9 0.7179 5 0.021 5 0.117 5 0.3343 6 0.3646 4 0.4929 5 0.04 5 0.0346 10)
Average genome size in population (length): 47.153
Average program size in population (points): 48.153
Average percent parens in population: 0.022
Minimum age in population: 107.1279138397246
Maximum age in population: 112.2431178843665
Average age in population: 110.2063415261835
Median age in population: 110.2192321082908
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.096
Error (vector) diversity:			 0.097
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 77000
Number of point (instruction) evaluations so far: 106344711
--- Timings ---
Current time: 1529615156063 milliseconds
Total Time:         267.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       117.7 seconds, 44.0%
Fitness Testing:    116.4 seconds, 43.5%
Report:              33.5 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 76
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 77
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 77
;;******************************
;; -*- Number IO problem report - generation 77
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_996} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_min} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_integer})
Best program: (integer_pop tag_float_996 integer_pop integer_div float_swap float_sub float_yankdup float_flush integer_shove integer_min in1 integer_yank in2 integer_rot integer_fromfloat float_sin integer_fromfloat integer_add print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 2969.1930718999997
Median total errors in population: 289.0410999999999
Error averages by case: (107.82328239999867 11.038 108.81182000000088 11.361 106.99473159999866 11.076 102.7770496999998 11.053 108.6310978000011 12.147 111.51812220000161 11.59 107.26304779999805 11.443 101.45433359999844 11.477 109.32026540000194 11.508 111.15416569999941 11.618 103.49615340000159 11.464 111.65070670000084 11.494 101.18286249999865 11.409 106.00033779999946 11.486 107.81592459999864 11.079 107.69390409999974 11.374 109.57938879999793 11.306 108.55334720000182 11.497 110.1762590999976 11.542 104.65362199999892 11.549 108.55017929999875 11.643 105.19248600000061 11.232 113.45933099999847 11.532 103.71587999999865 11.42 105.86377320000064 11.523)
Error minima by case: (0.3797 2 0.116 3 0.4036 10 0.0147 10 0.0646 10 0.2478 4 0.2526 4 0.3972 3 0.4631 4 0.3017 5 0.1266 3 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 4 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 5 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 46.968
Average program size in population (points): 47.968
Average percent parens in population: 0.022
Minimum age in population: 108.9373878052187
Maximum age in population: 113.7537219681355
Average age in population: 111.6076860339182
Median age in population: 111.703582815318
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.784
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.784
Total error diversity:				 0.11
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 78000
Number of point (instruction) evaluations so far: 107519511
--- Timings ---
Current time: 1529615159023 milliseconds
Total Time:         270.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       119.2 seconds, 44.0%
Fitness Testing:    117.7 seconds, 43.5%
Report:              33.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 77
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 78
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 78
;;******************************
;; -*- Number IO problem report - generation 78
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction tag_float_996} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_flush} {:instruction integer_shove} {:instruction integer_min} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction print_integer})
Best program: (integer_pop tag_float_996 integer_pop integer_div float_swap float_sub float_yankdup float_flush integer_shove integer_min in1 integer_yank in2 integer_rot integer_fromfloat float_sin integer_fromfloat integer_add print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 2687.5437777000006
Median total errors in population: 289.0410999999999
Error averages by case: (93.6646083999995 11.016 97.48245600000034 11.315 95.77559559999949 11.044 92.21748069999981 11.03 97.01199960000066 12.132 101.0306882000011 11.544 97.6729645999987 11.386 88.71000639999944 11.414 98.51768790000071 11.438 99.6290045000002 11.544 94.50392580000117 11.409 100.39949220000071 11.439 89.42214999999905 11.376 92.02917099999975 11.42 95.30532499999971 11.053 97.64773109999975 11.35 96.6733055999991 11.247 98.34329470000128 11.431 98.21058499999896 11.463 95.2785469999991 11.457 98.25915029999912 11.597 94.37484800000054 11.204 101.93918809999896 11.464 93.37155999999936 11.398 95.42501200000052 11.477)
Error minima by case: (0.6203 1 0.884 1 0.4036 9 0.0147 9 0.9354 10 0.7522 2 0.7474 2 0.6028 2 0.5369 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.8951 8 0.8609 2 0.9153 9 0.7179 2 0.021 2 0.117 1 0.6657 3 0.3646 2 0.4929 3 0.04 2 0.9654 10)
Average genome size in population (length): 45.762
Average program size in population (points): 46.762
Average percent parens in population: 0.023
Minimum age in population: 110.3499221869828
Maximum age in population: 115.1780507622406
Average age in population: 113.0681888414011
Median age in population: 113.1319121730511
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.78
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.78
Total error diversity:				 0.092
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 79000
Number of point (instruction) evaluations so far: 108664011
--- Timings ---
Current time: 1529615161815 milliseconds
Total Time:         273.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       120.6 seconds, 44.1%
Fitness Testing:    118.9 seconds, 43.4%
Report:              34.0 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 78
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 79
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 79
;;******************************
;; -*- Number IO problem report - generation 79
Test total error for best: 11512.51159999998
Test mean error for best: 5.75626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -66           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_div} {:instruction float_sub} {:instruction float_yank} {:instruction integer_pop} {:instruction integer_swap} {:instruction float_swap} {:instruction integer_pop} {:instruction integer_div} {:instruction float_swap} {:instruction float_cos} {:instruction integer_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tag_integer_923} {:instruction in1} {:instruction integer_yank} {:instruction integer_rot} {:instruction integer_rot} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction print_integer} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_div} {:instruction float_add} {:instruction float_add} {:instruction float_frominteger} {:instruction 70})
Best program: (float_dec integer_div float_sub float_yank integer_pop integer_swap float_swap integer_pop integer_div float_swap float_cos integer_inc float_inc float_inc integer_dec float_yank integer_dec integer_fromfloat tag_integer_923 in1 integer_yank integer_rot integer_rot in2 float_pop in1 integer_stackdepth integer_fromfloat integer_rot float_shove float_stackdepth float_frominteger integer_add print_integer integer_shove float_stackdepth float_sin integer_add in2 integer_shove float_stackdepth float_div float_add float_add float_frominteger 70)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.7738 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 289.0410999999999
Mean: 5.780822
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 3088.0699314000003
Median total errors in population: 289.0410999999999
Error averages by case: (108.92553429999911 11.052 114.89619600000128 11.387 109.37931999999904 11.064 104.31110379999981 11.049 112.497519000001 12.158 117.6094052000016 11.609 113.7695009999976 11.45 106.11693639999844 11.497 115.38165470000172 11.512 115.04405919999982 11.623 109.3091918000019 11.466 115.67941980000084 11.489 105.19121249999834 11.429 112.06320679999914 11.497 111.61259389999894 11.053 114.00351309999975 11.394 113.58215229999824 11.285 115.18006510000184 11.515 114.00216419999795 11.552 111.47073899999893 11.568 114.81483629999869 11.653 108.72014520000063 11.238 117.29871119999838 11.543 109.97831999999832 11.443 111.17543060000058 11.531)
Error minima by case: (0.3797 4 0.116 3 0.4036 9 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 9 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 45.259
Average program size in population (points): 46.259
Average percent parens in population: 0.023
Minimum age in population: 112.0748202821152
Maximum age in population: 116.5446395461113
Average age in population: 114.52658068184
Median age in population: 114.5595845756827
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.793
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.793
Total error diversity:				 0.093
Error (vector) diversity:			 0.093
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 80000
Number of point (instruction) evaluations so far: 109795911
--- Timings ---
Current time: 1529615164909 milliseconds
Total Time:         276.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       122.2 seconds, 44.2%
Fitness Testing:    120.0 seconds, 43.4%
Report:              34.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 79
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 80
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 80
;;******************************
;; -*- Number IO problem report - generation 80
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2995.1085492
Median total errors in population: 289.0410999999999
Error averages by case: (103.56354799999914 11.01 112.58177600000086 11.321 99.72441179999912 11.028 95.7560955999998 11.034 110.95630260000073 12.125 116.07415740000137 11.541 112.65975359999806 11.388 101.4255891999988 11.425 110.92525060000123 11.433 110.86375959999984 11.546 108.72767260000144 11.401 111.52567660000074 11.428 104.16707499999889 11.372 105.99415739999935 11.419 107.52108119999914 11.038 112.62981759999974 11.328 109.09805459999863 11.242 110.71338320000143 11.447 109.6480559999985 11.476 107.740651999999 11.477 113.30616479999898 11.585 104.24375680000064 11.196 113.1946899999988 11.482 108.05371999999876 11.386 109.40794700000049 11.478)
Error minima by case: (0.6203 2 0.884 4 0.3226 8 0.0147 9 0.9354 10 0.7522 6 0.7474 5 0.6028 5 0.5369 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.8951 8 0.8609 5 0.9153 9 0.7179 5 0.021 5 0.117 4 0.6657 7 0.3646 4 0.4929 6 0.04 5 0.9654 10)
Average genome size in population (length): 44.547
Average program size in population (points): 45.547
Average percent parens in population: 0.024
Minimum age in population: 113.5375211942546
Maximum age in population: 117.9310637277644
Average age in population: 115.975129416978
Median age in population: 116.0296861851688
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.104
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 81000
Number of point (instruction) evaluations so far: 110910036
--- Timings ---
Current time: 1529615167985 milliseconds
Total Time:         279.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       123.7 seconds, 44.2%
Fitness Testing:    121.3 seconds, 43.4%
Report:              34.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 80
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 81
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 81
;;******************************
;; -*- Number IO problem report - generation 81
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 3213.315484700001
Median total errors in population: 289.0410999999999
Error averages by case: (115.24821749999867 10.996 123.25267020000152 11.339 113.49132399999866 11.07 109.26625289999977 11.077 116.51090380000089 12.145 123.86311480000158 11.565 121.3157405999974 11.405 112.44256929999803 11.441 121.1485119000019 11.457 115.44483749999942 11.556 117.7125250000017 11.425 116.25277050000076 11.432 114.91516619999854 11.384 116.52080219999893 11.447 116.35631309999857 11.077 120.89506199999971 11.331 117.968258499998 11.305 121.00509260000176 11.47 113.79312489999778 11.493 117.69332019999896 11.489 121.34179949999877 11.605 110.16827110000062 11.17 117.84588099999851 11.488 118.95076619999806 11.41 114.81118920000054 11.524)
Error minima by case: (0.3797 2 0.116 2 0.3226 8 0.0147 9 0.0646 10 0.2478 3 0.2526 3 0.3972 3 0.4631 3 0.3017 4 0.1266 2 0.0806 4 0.0125 3 0.2262 2 0.1049 9 0.1391 3 0.0847 10 0.2821 3 0.021 3 0.117 2 0.3343 4 0.3646 3 0.4929 4 0.04 3 0.0346 10)
Average genome size in population (length): 43.796
Average program size in population (points): 44.796
Average percent parens in population: 0.024
Minimum age in population: 115.049834137295
Maximum age in population: 119.2607176235578
Average age in population: 117.4294698431477
Median age in population: 117.473627862758
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.109
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 82000
Number of point (instruction) evaluations so far: 112005461
--- Timings ---
Current time: 1529615170918 milliseconds
Total Time:         282.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       125.2 seconds, 44.3%
Fitness Testing:    122.4 seconds, 43.3%
Report:              34.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 81
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 82
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 82
;;******************************
;; -*- Number IO problem report - generation 82
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2972.3740741000006
Median total errors in population: 289.0410999999999
Error averages by case: (105.37340599999914 11.019 112.27935600000096 11.302 101.94093519999936 11.036 97.56567649999978 11.029 110.17725540000109 12.115 112.70937000000147 11.468 110.32727959999796 11.361 100.27160919999871 11.381 110.08868790000139 11.41 110.1514272 11.494 106.4449258000017 11.381 110.4094403000008 11.362 102.30318749999849 11.342 105.89757619999952 11.393 106.46639369999909 11.05 110.13859959999972 11.295 107.99725549999845 11.223 109.81329470000173 11.394 109.45094329999831 11.413 106.75254699999894 11.449 110.7288507999988 11.506 105.1241584000006 11.185 111.72474049999855 11.411 107.3780799999986 11.349 107.08107780000061 11.41)
Error minima by case: (0.3797 3 0.884 4 0.3936 7 0.0147 8 0.0646 10 0.7522 5 0.7474 5 0.6028 5 0.5369 5 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 4 0.8951 9 0.8609 5 0.9153 9 0.7179 5 0.021 4 0.117 4 0.6657 6 0.3646 4 0.4929 5 0.04 5 0.0346 10)
Average genome size in population (length): 42.987
Average program size in population (points): 43.987
Average percent parens in population: 0.025
Minimum age in population: 116.2216868681322
Maximum age in population: 120.8709748012702
Average age in population: 118.8453971142985
Median age in population: 118.8865020623188
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.737
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.737
Total error diversity:				 0.09
Error (vector) diversity:			 0.091
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 83000
Number of point (instruction) evaluations so far: 113080361
--- Timings ---
Current time: 1529615173799 milliseconds
Total Time:         285.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       126.7 seconds, 44.4%
Fitness Testing:    123.4 seconds, 43.2%
Report:              35.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 82
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 83
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 83
;;******************************
;; -*- Number IO problem report - generation 83
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2411.2833981000003
Median total errors in population: 289.0410999999999
Error averages by case: (85.69759229999983 11.029 87.76226800000016 11.295 84.12729229999992 11.053 80.48380879999979 11.041 86.13183680000094 12.134 89.27894480000148 11.471 86.60872239999894 11.37 81.23829599999948 11.398 88.38879490000066 11.412 85.29506980000083 11.505 83.5089898000016 11.372 85.60354080000076 11.349 80.55766249999866 11.329 84.59885120000018 11.397 84.99255979999982 11.044 86.75503559999973 11.308 86.5309207999993 11.226 87.82883170000167 11.425 84.4878046999993 11.428 84.95429099999895 11.467 87.24447879999889 11.518 82.28842400000065 11.174 87.04191749999865 11.424 83.95003999999952 11.342 82.00042380000055 11.416)
Error minima by case: (0.6203 1 0.116 1 0.3936 8 0.0147 9 0.9354 10 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 9 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.9654 10)
Average genome size in population (length): 42.913
Average program size in population (points): 43.913
Average percent parens in population: 0.025
Minimum age in population: 117.5991674258168
Maximum age in population: 122.5212720388903
Average age in population: 120.2013957529378
Median age in population: 120.2300651181993
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 78
Genome diversity (% unique Plush genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 78
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.082
Error (vector) diversity:			 0.082
Behavioral diversity:				 0.083
--- Run Statistics ---
Number of program evaluations used so far: 84000
Number of point (instruction) evaluations so far: 114153386
--- Timings ---
Current time: 1529615176708 milliseconds
Total Time:         288.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       128.2 seconds, 44.5%
Fitness Testing:    124.5 seconds, 43.2%
Report:              35.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 83
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 84
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 84
;;******************************
;; -*- Number IO problem report - generation 84
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2114.3301793999995
Median total errors in population: 289.0410999999999
Error averages by case: (72.26775880000022 11.02 75.89294800000005 11.287 74.89692719999995 11.038 69.0837599999998 11.03 71.04877480000081 12.107 76.7039976000014 11.454 74.16041779999915 11.376 66.87422600000029 11.433 78.8630569000006 11.452 74.78132320000067 11.492 69.28215480000154 11.38 75.09537880000069 11.324 65.06897499999873 11.323 71.75571280000013 11.407 76.3629681999998 11.033 73.55897539999974 11.278 78.51276459999922 11.225 78.3650379000015 11.48 73.9838159999995 11.422 74.26271699999901 11.525 74.00512419999889 11.498 70.26095240000059 11.155 76.3926809999987 11.416 70.86520000000024 11.351 68.05753100000052 11.421)
Error minima by case: (0.3797 9 0.116 10 0.4036 9 0.0147 9 0.0646 10 0.2478 9 0.2526 10 0.3972 10 0.4631 10 0.3017 10 0.1266 9 0.0806 9 0.0125 10 0.2262 10 0.1049 9 0.1391 9 0.0847 10 0.2821 9 0.021 10 0.117 10 0.3343 9 0.3646 9 0.4929 10 0.04 9 0.0346 10)
Average genome size in population (length): 45.247
Average program size in population (points): 46.247
Average percent parens in population: 0.023
Minimum age in population: 118.7729969028768
Maximum age in population: 123.8873942166729
Average age in population: 121.5541043947611
Median age in population: 121.5899381905996
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 192
Genome diversity (% unique Plush genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 192
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.088
Error (vector) diversity:			 0.09
Behavioral diversity:				 0.091
--- Run Statistics ---
Number of program evaluations used so far: 85000
Number of point (instruction) evaluations so far: 115284811
--- Timings ---
Current time: 1529615179689 milliseconds
Total Time:         291.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       129.6 seconds, 44.5%
Fitness Testing:    125.7 seconds, 43.2%
Report:              35.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 84
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 85
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 85
;;******************************
;; -*- Number IO problem report - generation 85
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1180.6716713
Median total errors in population: 288.4934999999999
Error averages by case: (42.17759339999996 10.997 38.70132399999896 11.193 39.91692719999996 11.018 33.34570119999982 10.99 37.76213139999975 12.104 40.825846600000254 11.375 36.52913400000016 11.328 28.33626800000029 11.318 39.9325734999995 11.343 35.370821800000115 11.42 31.739092199999703 11.284 35.28089240000052 11.193 27.539462500000415 11.245 32.6829576000002 11.299 38.00476530000066 10.996 37.12057679999973 11.209 40.48998590000031 11.157 38.77008850000034 11.381 35.54601300000043 11.319 34.4733549999993 11.417 38.01074640000011 11.417 32.12173460000053 11.072 36.45855320000021 11.32 32.900800000000565 11.223 34.63632680000035 11.38)
Error minima by case: (0.6203 9 0.116 10 0.4036 10 0.0147 10 0.9354 11 0.2478 10 0.2526 10 0.3972 9 0.4631 9 0.3017 10 0.1266 9 0.0806 9 0.0125 10 0.2262 10 0.1049 10 0.1391 9 0.0847 10 0.2821 9 0.021 10 0.117 10 0.3343 9 0.3646 9 0.4929 10 0.04 9 0.9654 10)
Average genome size in population (length): 49.466
Average program size in population (points): 50.466
Average percent parens in population: 0.020
Minimum age in population: 120.4323671395633
Maximum age in population: 124.8859740659004
Average age in population: 122.8358969035093
Median age in population: 122.9063562293417
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 294
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 294
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.085
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.086
--- Run Statistics ---
Number of program evaluations used so far: 86000
Number of point (instruction) evaluations so far: 116521686
--- Timings ---
Current time: 1529615182706 milliseconds
Total Time:         294.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       131.2 seconds, 44.6%
Fitness Testing:    126.9 seconds, 43.1%
Report:              36.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 85
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 86
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 86
;;******************************
;; -*- Number IO problem report - generation 86
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1411.4740300000005
Median total errors in population: 288.4934999999999
Error averages by case: (51.91602200000036 10.971 49.180919999998856 11.221 46.900698400000046 11.019 40.189092699999826 11.007 48.70587820000015 12.134 52.10830700000072 11.433 47.30046980000017 11.4 36.10075120000033 11.389 50.19085939999945 11.412 43.98594550000075 11.465 41.96620600000038 11.337 43.457235000000594 11.204 34.57138750000013 11.277 40.21077719999986 11.355 46.00679530000075 11.006 48.12194149999973 11.246 48.52617790000034 11.189 49.35369940000079 11.474 44.17444500000047 11.357 44.694361999999195 11.518 49.18442949999965 11.483 40.28207580000057 11.072 44.628225499999736 11.359 42.39996000000061 11.248 44.29636820000036 11.445)
Error minima by case: (0.6203 1 0.884 1 0.3226 8 0.0147 9 0.9354 10 0.7522 2 0.7474 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.8951 9 0.8609 2 0.9153 10 0.2821 2 0.021 2 0.117 1 0.6657 3 0.3646 2 0.4929 3 0.04 2 0.9654 10)
Average genome size in population (length): 50.503
Average program size in population (points): 51.503
Average percent parens in population: 0.020
Minimum age in population: 121.4323671395633
Maximum age in population: 126.0479883578661
Average age in population: 124.2165755158157
Median age in population: 124.2509192190236
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 220
Genome diversity (% unique Plush genomes):	 0.621
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 220
Syntactic diversity (% unique Push programs):	 0.621
Total error diversity:				 0.101
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 87000
Number of point (instruction) evaluations so far: 117784336
--- Timings ---
Current time: 1529615185765 milliseconds
Total Time:         297.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       132.7 seconds, 44.6%
Fitness Testing:    128.1 seconds, 43.1%
Report:              36.5 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 86
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 87
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 87
;;******************************
;; -*- Number IO problem report - generation 87
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_mod} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_pop} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_mod tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_pop float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop integer_mod float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1148.7596714
Median total errors in population: 288.4934999999999
Error averages by case: (40.08297309999998 10.972 38.980859999998884 11.173 36.627209999999565 11.013 28.397392499999825 11.002 36.78800219999955 12.075 40.022103200000295 11.346 36.433123600000165 11.311 26.49363720000035 11.347 39.59105689999944 11.354 33.73012350000003 11.441 31.516851799999692 11.292 33.50397300000042 11.181 27.189500000000507 11.227 31.44785100000024 11.308 36.614024100000634 11.0 36.486020399999745 11.173 39.29500230000037 11.157 38.085473700000385 11.408 33.58405500000051 11.34 33.731716999999335 11.462 37.19340920000023 11.392 30.016828400000602 11.039 34.624060300000274 11.331 32.891200000000644 11.228 33.48222300000027 11.379)
Error minima by case: (0.6203 2 0.116 3 0.4036 10 0.0147 10 0.9354 11 0.2478 5 0.2526 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 10 0.1391 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.9654 11)
Average genome size in population (length): 50.326
Average program size in population (points): 51.326
Average percent parens in population: 0.020
Minimum age in population: 123.1373313301433
Maximum age in population: 127.5030198133363
Average age in population: 125.637319117092
Median age in population: 125.6932328722114
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 179
Genome diversity (% unique Plush genomes):	 0.65
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 179
Syntactic diversity (% unique Push programs):	 0.65
Total error diversity:				 0.092
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.095
--- Run Statistics ---
Number of program evaluations used so far: 88000
Number of point (instruction) evaluations so far: 119042536
--- Timings ---
Current time: 1529615188814 milliseconds
Total Time:         300.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       134.2 seconds, 44.7%
Fitness Testing:    129.3 seconds, 43.0%
Report:              36.8 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 87
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 88
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 88
;;******************************
;; -*- Number IO problem report - generation 88
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1774.2124978000002
Median total errors in population: 288.4934999999999
Error averages by case: (63.36915330000078 11.026 61.57968799999894 11.295 63.72160880000069 11.039 56.72752989999984 11.027 60.109408600000535 12.208 65.03506800000129 11.531 59.539206800000166 11.467 52.79671680000036 11.463 64.67135949999944 11.475 60.22117280000171 11.588 54.33133260000125 11.388 59.67210690000058 11.305 49.58036249999922 11.359 56.94857679999932 11.431 62.21864880000069 11.03 60.746106899999724 11.332 64.90315140000035 11.212 63.41301450000117 11.523 59.74958210000052 11.477 58.90933499999923 11.577 61.69942369999903 11.585 55.55437260000062 11.131 60.86682389999894 11.463 55.75796000000064 11.305 57.324787600000334 11.529)
Error minima by case: (0.6203 9 0.884 10 0.3936 8 0.0147 9 0.9354 11 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 10 0.1266 10 0.0806 10 0.0125 11 0.2262 11 0.8951 10 0.8609 11 0.9153 10 0.7179 10 0.021 9 0.117 10 0.6657 11 0.3646 10 0.4929 10 0.04 10 0.9654 11)
Average genome size in population (length): 50.451
Average program size in population (points): 51.451
Average percent parens in population: 0.020
Minimum age in population: 124.8769236873532
Maximum age in population: 128.8563646130392
Average age in population: 127.0764612351291
Median age in population: 127.1561018907349
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 124
Genome diversity (% unique Plush genomes):	 0.717
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 124
Syntactic diversity (% unique Push programs):	 0.717
Total error diversity:				 0.098
Error (vector) diversity:			 0.099
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 89000
Number of point (instruction) evaluations so far: 120303911
--- Timings ---
Current time: 1529615192121 milliseconds
Total Time:         303.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       135.7 seconds, 44.7%
Fitness Testing:    130.6 seconds, 43.0%
Report:              37.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 88
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 89
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 89
;;******************************
;; -*- Number IO problem report - generation 89
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1451.7045619000005
Median total errors in population: 288.4934999999999
Error averages by case: (52.48033780000033 10.983 48.99629599999882 11.227 50.9425468000002 11.031 43.46083389999981 11.018 49.12426580000014 12.142 52.18980260000077 11.432 47.34842820000018 11.381 39.21489440000031 11.394 51.127748799999466 11.411 46.205089500001236 11.505 42.11931980000083 11.329 45.834361000000676 11.235 37.40729999999992 11.293 43.49010079999953 11.341 49.57947890000082 11.011 48.13421969999972 11.244 52.426406700000335 11.185 49.36086080000074 11.45 46.522593000000505 11.391 45.003983999999164 11.509 49.124098099999564 11.487 42.467171800000614 11.084 46.8582022999995 11.391 42.95468000000066 11.264 46.12054120000041 11.473)
Error minima by case: (0.3797 1 0.116 1 0.4036 10 0.0147 10 0.0646 10 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 10 0.1391 2 0.0847 10 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.0346 11)
Average genome size in population (length): 50.791
Average program size in population (points): 51.791
Average percent parens in population: 0.019
Minimum age in population: 125.8769236873532
Maximum age in population: 130.4599329336392
Average age in population: 128.4868267963124
Median age in population: 128.524079028073
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 105
Genome diversity (% unique Plush genomes):	 0.721
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 105
Syntactic diversity (% unique Push programs):	 0.721
Total error diversity:				 0.1
Error (vector) diversity:			 0.1
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 90000
Number of point (instruction) evaluations so far: 121573861
--- Timings ---
Current time: 1529615195125 milliseconds
Total Time:         306.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       137.2 seconds, 44.7%
Fitness Testing:    131.9 seconds, 43.0%
Report:              37.6 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 89
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 90
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 90
;;******************************
;; -*- Number IO problem report - generation 90
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub integer_fromfloat integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1296.9659208000007
Median total errors in population: 288.4934999999999
Error averages by case: (47.11337540000008 10.991 41.215295999999185 11.219 46.895914399999974 11.013 38.91996619999985 10.993 41.311748999999814 12.129 44.294076800000184 11.421 39.51468080000018 11.39 32.548539200000334 11.388 47.18419159999953 11.417 41.27899460000044 11.539 34.17823159999978 11.324 40.97560280000029 11.229 28.401550000000476 11.279 35.56145799999994 11.35 45.1603250000006 10.993 40.31568959999976 11.241 48.20247500000031 11.18 45.41547560000027 11.443 41.34869800000046 11.405 40.61850499999949 11.508 41.36042080000007 11.474 37.40099480000054 11.077 42.182766199999904 11.409 34.71968000000058 11.248 37.7362644000002 11.451)
Error minima by case: (0.6203 9 0.116 10 0.4036 9 0.0147 10 0.9354 11 0.2478 10 0.2526 10 0.3972 10 0.4631 10 0.3017 11 0.1266 9 0.0806 9 0.0125 10 0.2262 10 0.1049 9 0.1391 10 0.0847 10 0.2821 9 0.021 10 0.117 10 0.3343 10 0.3646 9 0.4929 10 0.04 9 0.9654 10)
Average genome size in population (length): 50.926
Average program size in population (points): 51.926
Average percent parens in population: 0.019
Minimum age in population: 127.4623234440207
Maximum age in population: 131.9935149261645
Average age in population: 129.8736894930979
Median age in population: 129.9057818707901
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 67
Genome diversity (% unique Plush genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 67
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.104
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 91000
Number of point (instruction) evaluations so far: 122847111
--- Timings ---
Current time: 1529615197979 milliseconds
Total Time:         309.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       138.6 seconds, 44.7%
Fitness Testing:    133.0 seconds, 43.0%
Report:              37.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 90
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 91
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 91
;;******************************
;; -*- Number IO problem report - generation 91
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_flush} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_flush float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1530.8636305000005
Median total errors in population: 288.4934999999999
Error averages by case: (55.24017240000026 10.971 53.32449999999903 11.228 52.39381160000024 11.012 43.91856929999983 10.995 53.402782600000236 12.159 57.018554800000686 11.442 51.79823800000017 11.402 37.01985240000024 11.381 56.61884289999951 11.411 50.41889970000104 11.558 46.038092200000406 11.334 49.66584460000053 11.244 36.72147500000024 11.284 43.16917239999968 11.337 53.1423112000006 10.998 52.84094149999973 11.262 56.288693600000286 11.19 54.8109639000006 11.43 50.801740000000464 11.415 49.961696999999354 11.49 53.75942949999956 11.508 44.99299480000052 11.078 51.092358499999534 11.406 45.8628400000006 11.256 47.2818526000001 11.488)
Error minima by case: (0.3797 3 0.116 5 0.4036 9 0.0147 10 0.0646 10 0.2478 6 0.2526 6 0.3972 5 0.4631 5 0.3017 6 0.1266 5 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 6 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 5 0.4929 6 0.04 6 0.0346 10)
Average genome size in population (length): 50.81
Average program size in population (points): 51.81
Average percent parens in population: 0.019
Minimum age in population: 128.5950464009496
Maximum age in population: 133.1872474582501
Average age in population: 131.3106046653676
Median age in population: 131.3545753083542
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 42
Genome diversity (% unique Plush genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 42
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.12
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.123
--- Run Statistics ---
Number of program evaluations used so far: 92000
Number of point (instruction) evaluations so far: 124117586
--- Timings ---
Current time: 1529615201234 milliseconds
Total Time:         312.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       140.0 seconds, 44.8%
Fitness Testing:    134.4 seconds, 43.0%
Report:              38.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 91
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 92
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 92
;;******************************
;; -*- Number IO problem report - generation 92
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_flush integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1761.1252710000006
Median total errors in population: 288.4934999999999
Error averages by case: (65.61565360000066 11.01 63.012631999998824 11.275 62.610264000000605 11.044 55.57117199999982 11.026 61.97149320000053 12.19 64.78128940000113 11.514 59.86504780000016 11.461 50.76502040000036 11.454 64.61576169999942 11.475 57.73067590000143 11.547 54.37669960000108 11.378 57.08071620000072 11.261 49.27332499999952 11.326 54.93954099999949 11.436 61.06359070000084 11.023 60.64905429999971 11.304 63.90188210000036 11.232 63.56529470000125 11.545 57.53846700000051 11.432 58.55978099999907 11.59 61.75610389999923 11.561 54.075255000000624 11.107 58.4775572999993 11.423 56.18676000000063 11.297 58.70523320000042 11.526)
Error minima by case: (0.6203 2 0.116 2 0.4036 10 0.0147 10 0.9354 10 0.2478 3 0.2526 3 0.3972 3 0.4631 3 0.3017 6 0.1266 2 0.0806 6 0.0125 3 0.2262 2 0.1049 10 0.1391 3 0.0847 10 0.2821 3 0.021 5 0.117 2 0.3343 4 0.3646 4 0.4929 6 0.04 3 0.9654 10)
Average genome size in population (length): 50.704
Average program size in population (points): 51.704
Average percent parens in population: 0.020
Minimum age in population: 129.9032705045697
Maximum age in population: 134.579443011845
Average age in population: 132.7347263421905
Median age in population: 132.7926947172607
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.095
Error (vector) diversity:			 0.096
Behavioral diversity:				 0.097
--- Run Statistics ---
Number of program evaluations used so far: 93000
Number of point (instruction) evaluations so far: 125385436
--- Timings ---
Current time: 1529615204448 milliseconds
Total Time:         316.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       141.6 seconds, 44.8%
Fitness Testing:    135.8 seconds, 42.9%
Report:              38.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 92
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 93
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 93
;;******************************
;; -*- Number IO problem report - generation 93
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction integer_div} {:instruction integer_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_max} {:instruction float_dup_items} {:instruction in2} {:instruction float_pop} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_pop integer_div integer_inc float_inc float_yank integer_max float_dup_items in2 float_pop tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1412.1456999000004
Median total errors in population: 288.4934999999999
Error averages by case: (52.09948820000043 10.989 48.568079999998886 11.202 49.763896400000064 11.029 40.5890396999998 10.997 47.175361400000035 12.136 50.32731580000064 11.42 45.18323800000016 11.372 36.86858120000034 11.398 50.89478199999941 11.427 43.67129630000082 11.532 40.13319320000031 11.293 42.943683400000594 11.224 36.640275000000294 11.26 44.14049379999981 11.37 47.8734299000008 11.001 46.262524199999724 11.233 51.04055970000039 11.201 49.209833600000536 11.472 44.21471900000052 11.4 44.15625999999916 11.522 47.476426599999805 11.465 39.72463020000062 11.08 44.22533009999976 11.388 42.30524000000066 11.217 43.58402220000035 11.446)
Error minima by case: (0.6203 4 0.116 3 0.4036 10 0.0147 10 0.9354 11 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 6 0.1266 4 0.0806 6 0.0125 4 0.2262 4 0.1049 10 0.1391 5 0.0847 10 0.2821 4 0.021 5 0.117 3 0.3343 6 0.3646 4 0.4929 6 0.04 4 0.9654 11)
Average genome size in population (length): 50.758
Average program size in population (points): 51.758
Average percent parens in population: 0.019
Minimum age in population: 131.4367052936642
Maximum age in population: 136.1933324497968
Average age in population: 134.1448508180213
Median age in population: 134.1398272862899
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.761
Total error diversity:				 0.112
Error (vector) diversity:			 0.116
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 94000
Number of point (instruction) evaluations so far: 126654711
--- Timings ---
Current time: 1529615207349 milliseconds
Total Time:         319.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       143.0 seconds, 44.8%
Fitness Testing:    136.9 seconds, 42.9%
Report:              39.0 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 93
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 94
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 94
;;******************************
;; -*- Number IO problem report - generation 94
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_yank integer_dup_times integer_dec float_tan integer_shove tag_integer_999 in1 integer_yank in2 float_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1455.3305244000005
Median total errors in population: 288.4934999999999
Error averages by case: (53.486969400000234 10.98 50.24573199999888 11.224 49.34434500000018 11.027 41.60449289999984 11.007 50.063880800000035 12.148 53.121563600000556 11.453 47.95122760000016 11.406 39.16173880000032 11.401 53.52058639999949 11.423 45.31898300000099 11.537 42.55107940000058 11.327 44.552590500000626 11.231 36.659375000000026 11.293 45.474898199999735 11.382 47.88170370000075 11.007 48.84752419999974 11.26 51.02517210000032 11.199 51.74302520000069 11.455 45.88268710000048 11.405 46.94454599999917 11.516 49.972426599999785 11.518 41.12619560000058 11.068 45.792809699999665 11.407 43.806600000000586 11.255 45.819371600000316 11.502)
Error minima by case: (0.3797 2 0.116 4 0.3226 8 0.0147 9 0.0646 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 50.966
Average program size in population (points): 51.966
Average percent parens in population: 0.019
Minimum age in population: 133.1517165800792
Maximum age in population: 137.436288028625
Average age in population: 135.6074424779741
Median age in population: 135.6536843347437
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.786
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.786
Total error diversity:				 0.107
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 95000
Number of point (instruction) evaluations so far: 127929161
--- Timings ---
Current time: 1529615210421 milliseconds
Total Time:         322.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       144.4 seconds, 44.8%
Fitness Testing:    138.2 seconds, 42.9%
Report:              39.3 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 94
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 95
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 95
;;******************************
;; -*- Number IO problem report - generation 95
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1637.9126017
Median total errors in population: 288.4934999999999
Error averages by case: (58.99478140000056 11.006 58.478223999998825 11.268 55.74722800000045 11.038 48.58931899999981 11.018 57.49849060000038 12.138 61.02628060000096 11.47 56.35444900000015 11.415 46.69844560000033 11.422 58.637909299999436 11.443 52.142279300001476 11.494 51.21268680000105 11.376 52.016877400000695 11.257 45.38523749999955 11.328 54.35425539999941 11.408 54.33759760000087 11.019 57.05461069999974 11.276 57.047272800000364 11.196 57.53860210000105 11.492 51.93146700000046 11.396 52.85624899999911 11.54 58.01244109999937 11.52 48.596348800000584 11.109 53.21518809999921 11.399 52.29420000000061 11.303 54.079160600000414 11.482)
Error minima by case: (0.3797 2 0.116 4 0.4036 9 0.0147 10 0.0646 11 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 10 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 50.967
Average program size in population (points): 51.967
Average percent parens in population: 0.019
Minimum age in population: 134.4023375299048
Maximum age in population: 139.1233050341596
Average age in population: 137.0405555038131
Median age in population: 137.0966745141121
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.773
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.773
Total error diversity:				 0.1
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 96000
Number of point (instruction) evaluations so far: 129203886
--- Timings ---
Current time: 1529615213767 milliseconds
Total Time:         325.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       145.8 seconds, 44.8%
Fitness Testing:    139.7 seconds, 42.9%
Report:              39.7 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 95
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 96
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 96
;;******************************
;; -*- Number IO problem report - generation 96
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_rot} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_mod integer_fromfloat integer_dup_times float_stackdepth float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup float_rot -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1466.2489828000002
Median total errors in population: 288.4934999999999
Error averages by case: (52.13032650000038 11.007 49.93117999999877 11.264 50.94693240000037 11.027 43.54392209999981 11.014 47.2481676000002 12.119 51.520820200000685 11.464 47.13592300000016 11.417 38.37158120000034 11.44 52.48570819999943 11.453 48.63378780000125 11.553 41.70357300000059 11.387 48.67628040000073 11.27 36.628324999999805 11.321 45.12677939999959 11.401 50.78337400000085 11.014 47.39910689999972 11.264 53.623322000000364 11.203 51.05652620000091 11.523 48.28469800000052 11.448 46.4840259999991 11.58 48.32342369999964 11.516 44.32826560000061 11.099 50.02069519999945 11.446 43.48032000000064 11.308 44.38491840000043 11.459)
Error minima by case: (0.6203 9 0.116 10 0.4036 10 0.0147 10 0.9354 11 0.2478 11 0.2526 10 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 10 0.2262 10 0.8951 10 0.1391 11 0.9153 10 0.7179 10 0.021 11 0.117 10 0.3343 11 0.3646 10 0.4929 10 0.04 10 0.9654 11)
Average genome size in population (length): 51.006
Average program size in population (points): 52.006
Average percent parens in population: 0.019
Minimum age in population: 136.1744394902548
Maximum age in population: 140.6319718161771
Average age in population: 138.4786492146703
Median age in population: 138.5305399838526
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.103
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 97000
Number of point (instruction) evaluations so far: 130479586
--- Timings ---
Current time: 1529615216768 milliseconds
Total Time:         328.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       147.3 seconds, 44.9%
Fitness Testing:    140.8 seconds, 42.9%
Report:              40.1 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 96
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 97
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 97
;;******************************
;; -*- Number IO problem report - generation 97
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction integer_div} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -61} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop integer_div float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -61 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1552.9389352000005
Median total errors in population: 288.4934999999999
Error averages by case: (54.46249840000027 11.007 53.65041199999897 11.242 53.537290000000226 11.034 46.5930149999998 11.017 53.84503840000012 12.142 56.56804160000079 11.437 52.01168080000018 11.373 44.072333600000334 11.387 55.93880229999944 11.411 49.12377620000105 11.47 47.609180400000675 11.318 48.82626810000054 11.235 43.5451874999998 11.293 48.43569639999954 11.376 51.54339690000065 11.017 52.86891519999971 11.259 54.19052570000036 11.182 54.3656293000006 11.441 49.30660310000051 11.373 50.33973899999928 11.487 53.80076959999967 11.486 45.695372600000596 11.097 49.93963929999947 11.376 48.27124000000067 11.266 51.22388380000025 11.448)
Error minima by case: (0.3797 2 0.116 4 0.3936 8 0.0147 9 0.0646 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 10 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 50.821
Average program size in population (points): 51.821
Average percent parens in population: 0.020
Minimum age in population: 137.1744394902548
Maximum age in population: 141.9237089759458
Average age in population: 139.8484907530724
Median age in population: 139.8886107431401
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.733
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.733
Total error diversity:				 0.117
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 98000
Number of point (instruction) evaluations so far: 131750861
--- Timings ---
Current time: 1529615219646 milliseconds
Total Time:         331.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       148.7 seconds, 44.9%
Fitness Testing:    142.0 seconds, 42.9%
Report:              40.4 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 97
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 98
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 98
;;******************************
;; -*- Number IO problem report - generation 98
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction tag_integer_368} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank tag_integer_368 integer_dec float_tan in2 float_cos tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 float_max integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1586.5142963000008
Median total errors in population: 288.4934999999999
Error averages by case: (57.47727390000047 10.987 55.35422399999905 11.262 55.22476660000041 11.022 46.61837529999984 11.007 55.38207460000039 12.179 59.47430700000124 11.488 53.56095420000017 11.439 43.7831360000003 11.431 57.65312329999947 11.451 50.41011240000124 11.536 48.055459200000804 11.37 49.56205620000049 11.25 41.64441249999969 11.328 48.911074999999535 11.401 54.88422820000068 11.015 54.89594149999973 11.298 57.79159560000033 11.187 56.24030730000087 11.468 51.505477000000496 11.407 51.367428999999326 11.54 56.16842949999927 11.549 46.589394600000546 11.093 50.82566259999928 11.398 48.921040000000566 11.286 50.31144080000025 11.51)
Error minima by case: (0.6203 4 0.884 5 0.3226 8 0.0147 9 0.9354 10 0.7522 5 0.7474 6 0.6028 5 0.5369 6 0.3017 5 0.1266 4 0.0806 6 0.0125 5 0.2262 5 0.8951 9 0.8609 5 0.9153 10 0.7179 6 0.021 4 0.117 5 0.6657 6 0.3646 4 0.4929 6 0.04 6 0.9654 11)
Average genome size in population (length): 50.495
Average program size in population (points): 51.495
Average percent parens in population: 0.020
Minimum age in population: 138.2855957027277
Maximum age in population: 143.4030410476742
Average age in population: 141.2773844982656
Median age in population: 141.2917206085466
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.775
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.775
Total error diversity:				 0.112
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 99000
Number of point (instruction) evaluations so far: 133013936
--- Timings ---
Current time: 1529615223026 milliseconds
Total Time:         334.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       150.2 seconds, 44.9%
Fitness Testing:    143.5 seconds, 42.9%
Report:              40.8 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 98
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 99
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 99
;;******************************
;; -*- Number IO problem report - generation 99
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction print_integer} {:instruction integer_shove} {:instruction tag_integer_916} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction float_flush} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan print_integer integer_shove tag_integer_916 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 float_flush integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1565.6348621000009
Median total errors in population: 288.4934999999999
Error averages by case: (56.07677660000052 10.965 55.73450989999876 11.226 53.46718120000039 11.022 44.07327079999982 11.007 55.490605000000286 12.165 60.407695100000936 11.474 54.31406970000017 11.434 40.375753800000375 11.408 56.16661419999944 11.44 50.223043500001374 11.571 48.47192300000095 11.342 49.647224100000685 11.24 38.95146859999995 11.299 47.408117699999536 11.363 52.553032800000786 11.0 55.79285559999971 11.275 55.79452630000036 11.208 54.730845200000964 11.479 50.85787400000052 11.422 49.321473399999135 11.533 57.07546939999942 11.542 45.69976940000065 11.071 50.88475259999925 11.428 48.319264500000656 11.254 50.09574570000037 11.533)
Error minima by case: (0.3797 2 0.116 2 0.4036 9 0.0147 10 0.0646 8 0.2478 3 0.2526 3 0.3972 3 0.4631 3 0.3017 4 0.1266 2 0.0806 4 0.0125 3 0.2262 2 0.1049 8 0.1391 3 0.0847 10 0.2821 3 0.021 3 0.117 2 0.3343 4 0.3646 3 0.4929 4 0.04 3 0.0346 10)
Average genome size in population (length): 50.9
Average program size in population (points): 51.9
Average percent parens in population: 0.019
Minimum age in population: 140.4264659575608
Maximum age in population: 145.081327103653
Average age in population: 142.7059978886096
Median age in population: 142.7510095533112
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.113
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.117
--- Run Statistics ---
Number of program evaluations used so far: 100000
Number of point (instruction) evaluations so far: 134287386
--- Timings ---
Current time: 1529615226164 milliseconds
Total Time:         337.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       151.8 seconds, 44.9%
Fitness Testing:    144.7 seconds, 42.8%
Report:              41.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 99
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 100
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 100
;;******************************
;; -*- Number IO problem report - generation 100
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction print_integer} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan print_integer integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1875.4571328000002
Median total errors in population: 288.4934999999999
Error averages by case: (67.50447690000061 11.011 68.62177599999896 11.285 65.30900440000056 11.039 57.06859869999982 11.016 66.44133040000045 12.159 70.06851080000116 11.503 65.62775360000012 11.446 56.273319600000335 11.446 70.9529701999998 11.474 60.64682170000155 11.624 60.595686800001076 11.395 60.19017260000064 11.299 55.26423749999915 11.341 60.28130119999941 11.414 66.20389160000076 11.013 66.15886259999974 11.301 69.25935480000027 11.214 69.34816820000125 11.491 61.25228500000049 11.478 64.48968599999911 11.56 67.12744979999918 11.561 56.22204540000059 11.107 60.75680779999919 11.495 62.56308000000062 11.33 62.7075412000004 11.52)
Error minima by case: (0.3797 2 0.884 4 0.4036 9 0.0147 9 0.0646 11 0.7522 6 0.7474 5 0.6028 5 0.5369 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.8951 9 0.8609 5 0.9153 9 0.7179 5 0.021 5 0.117 4 0.6657 7 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 50.684
Average program size in population (points): 51.684
Average percent parens in population: 0.020
Minimum age in population: 141.5155340171439
Maximum age in population: 146.081327103653
Average age in population: 144.1630568958102
Median age in population: 144.2146813406312
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.108
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 101000
Number of point (instruction) evaluations so far: 135555736
--- Timings ---
Current time: 1529615229121 milliseconds
Total Time:         340.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       153.2 seconds, 45.0%
Fitness Testing:    145.9 seconds, 42.8%
Report:              41.5 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 100
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 101
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 101
;;******************************
;; -*- Number IO problem report - generation 101
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_shove} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction in1} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dup_times float_dup_items float_yank integer_dup_times float_shove float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot in1 float_rot integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1780.175704700001
Median total errors in population: 288.4934999999999
Error averages by case: (64.2337288000003 10.977 65.05361599999888 11.296 62.689372000000255 11.034 55.23274569999981 11.024 62.93275420000018 12.161 67.93901520000091 11.546 63.02248020000017 11.491 52.37311400000032 11.468 66.30028569999945 11.485 56.47326230000097 11.546 56.41378780000064 11.436 56.41515200000049 11.267 50.08603749999967 11.372 58.77893399999957 11.441 60.04142300000059 11.031 63.02158439999973 11.314 63.02716900000032 11.223 65.09501450000069 11.547 55.60629900000046 11.436 60.02910099999927 11.6 63.99178119999959 11.609 52.06533820000059 11.097 57.74189399999947 11.436 58.00444000000063 11.356 58.84537500000029 11.569)
Error minima by case: (0.6203 2 0.116 4 0.4036 9 0.0147 9 0.9354 11 0.2478 6 0.2526 5 0.6028 5 0.5369 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.8951 10 0.1391 5 0.9153 10 0.7179 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.9654 10)
Average genome size in population (length): 50.534
Average program size in population (points): 51.534
Average percent parens in population: 0.020
Minimum age in population: 142.7106646160554
Maximum age in population: 147.6128175647729
Average age in population: 145.5566117461898
Median age in population: 145.5884885417738
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.759
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.759
Total error diversity:				 0.109
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 102000
Number of point (instruction) evaluations so far: 136820486
--- Timings ---
Current time: 1529615232231 milliseconds
Total Time:         343.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       154.8 seconds, 45.0%
Fitness Testing:    147.1 seconds, 42.8%
Report:              41.9 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 101
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 102
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 102
;;******************************
;; -*- Number IO problem report - generation 102
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction tagged_115} {:instruction in1} {:instruction float_yankdup} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_dec integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat tagged_115 in1 float_yankdup float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_yankdup float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1863.094550100001
Median total errors in population: 288.4934999999999
Error averages by case: (64.47643930000058 10.987 67.73042799999897 11.283 64.22681160000054 11.027 55.78456929999982 11.019 67.08930200000047 12.176 70.94677620000124 11.523 65.91199580000008 11.475 55.61249720000037 11.436 68.81235949999962 11.456 61.62726230000155 11.54 60.17543360000108 11.401 61.61923260000068 11.295 53.733162499999295 11.347 59.19956459999954 11.43 64.2968916000008 11.019 66.50288889999973 11.317 67.00935480000024 11.21 67.62601450000136 11.492 61.31729900000052 11.434 62.832217999999095 11.546 67.57010969999926 11.588 57.308067400000624 11.114 62.99134429999914 11.439 60.831360000000664 11.324 63.44416740000037 11.541)
Error minima by case: (0.6203 2 0.116 4 0.4036 10 0.0147 9 0.9354 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 10 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 50.951
Average program size in population (points): 51.951
Average percent parens in population: 0.020
Minimum age in population: 144.5769110727666
Maximum age in population: 148.9422254028533
Average age in population: 146.989293157986
Median age in population: 147.0303848582587
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.756
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.756
Total error diversity:				 0.116
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 103000
Number of point (instruction) evaluations so far: 138095936
--- Timings ---
Current time: 1529615235361 milliseconds
Total Time:         347.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       156.4 seconds, 45.1%
Fitness Testing:    148.2 seconds, 42.7%
Report:              42.2 seconds, 12.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 102
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 103
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 103
;;******************************
;; -*- Number IO problem report - generation 103
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_flush} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -96} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction -60} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -62} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times integer_sub tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_yank in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_flush float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -96 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap -60 integer_yankdup integer_max -62 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1743.3522679000002
Median total errors in population: 288.4934999999999
Error averages by case: (64.2754721000006 11.013 60.47184799999883 11.255 61.8770972000006 11.03 53.621985599999796 11.013 62.12955780000038 12.166 63.78029820000104 11.489 58.52498540000017 11.442 49.36853920000036 11.437 64.30556059999942 11.454 57.88266430000137 11.551 53.38345920000082 11.367 57.44470390000063 11.26 47.49638749999952 11.329 56.402481599999476 11.41 61.149187100000766 11.014 59.6254978999997 11.296 64.01035630000034 11.205 62.83209040000112 11.502 57.104435100000494 11.431 58.09955799999914 11.559 60.76576669999938 11.562 53.54018500000064 11.105 58.820288399999214 11.432 54.37756000000067 11.294 57.91530240000038 11.531)
Error minima by case: (0.6203 8 0.116 10 0.3936 8 0.0147 9 0.9354 11 0.2478 11 0.2526 11 0.3972 11 0.4631 11 0.3017 10 0.1266 10 0.0806 10 0.0125 10 0.2262 10 0.1049 10 0.1391 11 0.0847 10 0.2821 10 0.021 9 0.117 10 0.3343 11 0.3646 10 0.4929 10 0.04 10 0.9654 10)
Average genome size in population (length): 50.947
Average program size in population (points): 51.947
Average percent parens in population: 0.020
Minimum age in population: 145.9550640550155
Maximum age in population: 150.6564804120142
Average age in population: 148.4331667801601
Median age in population: 148.486490903684
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.115
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 104000
Number of point (instruction) evaluations so far: 139371036
--- Timings ---
Current time: 1529615238691 milliseconds
Total Time:         350.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       158.0 seconds, 45.1%
Fitness Testing:    149.7 seconds, 42.7%
Report:              42.5 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 103
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 104
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 104
;;******************************
;; -*- Number IO problem report - generation 104
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dec} {:instruction float_cos} {:instruction in2} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_inc} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction integer_yankdup} {:instruction float_rot} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dup_times float_dup_items float_yank integer_dec float_cos in2 integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_inc in2 integer_rot integer_fromfloat float_pop integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 integer_yankdup float_rot -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 1824.2954794
Median total errors in population: 288.4934999999999
Error averages by case: (66.90764230000048 11.013 65.50438399999884 11.281 64.06079360000048 11.027 56.48564279999983 11.012 63.61645960000042 12.169 68.14005040000107 11.498 63.830732800000156 11.45 50.088894400000335 11.435 67.42113809999981 11.45 61.804279300001596 11.567 58.065472000001144 11.387 61.32687740000074 11.271 47.61348749999938 11.339 57.33248159999941 11.4 65.1021573000008 11.012 64.23321969999974 11.308 67.84876190000003 11.195 65.88170710000112 11.467 61.37748800000048 11.44 61.254632999999146 11.534 64.92009809999928 11.556 57.59234880000058 11.101 62.75833009999919 11.456 58.26772000000061 11.319 58.678679600000414 11.495)
Error minima by case: (0.3797 9 0.884 10 0.4036 10 0.0147 10 0.0646 10 0.7522 9 0.7474 10 0.6028 10 0.5369 10 0.3017 10 0.1266 10 0.0806 9 0.0125 10 0.2262 10 0.8951 10 0.8609 9 0.9153 10 0.7179 10 0.021 11 0.117 10 0.6657 9 0.3646 9 0.4929 10 0.04 10 0.0346 10)
Average genome size in population (length): 51.069
Average program size in population (points): 52.069
Average percent parens in population: 0.019
Minimum age in population: 147.3089853146999
Maximum age in population: 152.079998551545
Average age in population: 149.8073391769178
Median age in population: 149.8266110986888
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.752
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.752
Total error diversity:				 0.109
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 105000
Number of point (instruction) evaluations so far: 140649286
--- Timings ---
Current time: 1529615241841 milliseconds
Total Time:         353.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       159.5 seconds, 45.1%
Fitness Testing:    150.9 seconds, 42.7%
Report:              42.9 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 104
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 105
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 105
;;******************************
;; -*- Number IO problem report - generation 105
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_frominteger} {:instruction integer_dec} {:instruction integer_pop} {:instruction float_pop} {:instruction float_swap} {:instruction float_inc} {:instruction float_inc} {:instruction integer_sub} {:instruction float_tan} {:instruction float_dup_items} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_881} {:instruction in1} {:instruction integer_yank} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_tan} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_frominteger integer_dec integer_pop float_pop float_swap float_inc float_inc integer_sub float_tan float_dup_items in2 integer_shove tag_integer_881 in1 integer_yank integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_tan float_stackdepth -94 integer_pop float_sin float_sub float_yankdup float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1831.5901143000006
Median total errors in population: 288.4934999999999
Error averages by case: (64.74542320000054 10.989 67.59633999999896 11.284 59.602223200000495 11.033 51.400471099999805 11.03 66.50604100000055 12.156 70.53077620000123 11.497 65.95495420000007 11.448 52.490058000000325 11.435 67.0154535999996 11.45 60.29037960000154 11.584 60.296813400001206 11.401 60.07442930000073 11.291 53.7222624999993 11.346 56.33410079999946 11.381 62.93822230000078 11.028 66.30288889999972 11.294 65.79142190000024 11.213 65.45611760000116 11.494 60.43364510000048 11.466 60.75993099999915 11.567 67.22510969999908 11.558 55.6461956000006 11.084 61.41662509999913 11.47 60.819240000000654 11.344 63.86799100000042 11.53)
Error minima by case: (0.6203 2 0.116 3 0.3936 8 0.0147 9 0.9354 10 0.2478 5 0.2526 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 10 0.1391 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.9654 11)
Average genome size in population (length): 50.732
Average program size in population (points): 51.732
Average percent parens in population: 0.020
Minimum age in population: 148.6482673528218
Maximum age in population: 153.1378635697542
Average age in population: 151.2486125776879
Median age in population: 151.326084822537
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.111
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 106000
Number of point (instruction) evaluations so far: 141919261
--- Timings ---
Current time: 1529615244794 milliseconds
Total Time:         356.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       160.9 seconds, 45.2%
Fitness Testing:    152.1 seconds, 42.7%
Report:              43.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 105
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 106
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 106
;;******************************
;; -*- Number IO problem report - generation 106
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction print_integer} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_swap integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan print_integer integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1860.4079536000002
Median total errors in population: 288.4934999999999
Error averages by case: (67.95580400000065 10.983 66.13751599999893 11.254 67.83009440000065 11.038 58.691231199999834 11.008 66.93014180000047 12.191 69.60802400000118 11.511 63.42430040000016 11.453 52.92639920000031 11.462 70.32064179999995 11.48 61.27112340000148 11.64 57.78180060000102 11.361 60.23225320000073 11.277 52.03612499999926 11.322 61.74901699999936 11.433 65.56740920000074 11.004 64.93202799999973 11.298 69.12938760000009 11.22 68.39132380000126 11.518 62.52434800000047 11.468 62.93635699999917 11.585 66.32044399999918 11.572 56.66231620000058 11.082 61.52497819999924 11.47 59.3424800000006 11.279 61.71640960000039 11.557)
Error minima by case: (0.3797 2 0.116 2 0.4036 9 0.0147 9 0.0646 11 0.2478 3 0.2526 3 0.3972 3 0.4631 3 0.3017 6 0.1266 2 0.0806 6 0.0125 3 0.2262 4 0.1049 9 0.1391 3 0.0847 9 0.2821 3 0.021 5 0.117 2 0.3343 4 0.3646 4 0.4929 6 0.04 3 0.0346 11)
Average genome size in population (length): 50.834
Average program size in population (points): 51.834
Average percent parens in population: 0.020
Minimum age in population: 150.0738953460149
Maximum age in population: 154.5398377031162
Average age in population: 152.7009473711847
Median age in population: 152.748622711411
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.772
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.772
Total error diversity:				 0.129
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 107000
Number of point (instruction) evaluations so far: 143191761
--- Timings ---
Current time: 1529615247815 milliseconds
Total Time:         359.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       162.5 seconds, 45.2%
Fitness Testing:    153.3 seconds, 42.6%
Report:              43.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 106
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 107
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 107
;;******************************
;; -*- Number IO problem report - generation 107
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_stackdepth} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_stackdepth integer_dec integer_fromfloat integer_dup_times float_dup_items integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1712.649366700001
Median total errors in population: 288.4934999999999
Error averages by case: (61.206755100000755 10.99 61.27147199999878 11.283 59.980986400000646 11.023 52.53470159999981 10.996 60.400333000000565 12.173 64.5412718000012 11.53 58.94502700000015 11.47 47.22873080000035 11.438 63.89309749999943 11.464 55.732865700001696 11.585 53.52766120000137 11.403 55.05923260000068 11.281 45.54204999999918 11.34 52.81302919999923 11.416 58.995472000000774 11.007 60.07444529999973 11.312 61.88901600000035 11.227 62.75937250000125 11.528 55.28536200000049 11.453 57.81867499999912 11.565 61.26577829999909 11.576 50.959973600000616 11.127 56.41250049999906 11.442 54.16284000000062 11.307 55.90271760000039 11.51)
Error minima by case: (0.6203 8 0.116 10 0.4036 9 0.0147 10 0.9354 11 0.2478 11 0.2526 11 0.3972 11 0.4631 11 0.3017 11 0.1266 10 0.0806 10 0.0125 11 0.2262 10 0.1049 10 0.1391 11 0.0847 10 0.2821 11 0.021 11 0.117 10 0.3343 11 0.3646 10 0.4929 11 0.04 10 0.9654 10)
Average genome size in population (length): 51.054
Average program size in population (points): 52.054
Average percent parens in population: 0.019
Minimum age in population: 151.0738953460149
Maximum age in population: 156.1058192811359
Average age in population: 154.0624984719623
Median age in population: 154.0987280809593
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.755
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.755
Total error diversity:				 0.126
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.13
--- Run Statistics ---
Number of program evaluations used so far: 108000
Number of point (instruction) evaluations so far: 144469611
--- Timings ---
Current time: 1529615251062 milliseconds
Total Time:         362.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       164.1 seconds, 45.2%
Fitness Testing:    154.5 seconds, 42.6%
Report:              43.9 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 107
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 108
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 108
;;******************************
;; -*- Number IO problem report - generation 108
Test total error for best: 11516.56559999998
Test mean error for best: 5.75828
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction float_flush} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_add} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 float_flush float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_add in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1701.1713954000002
Median total errors in population: 288.4934999999999
Error averages by case: (60.94537540000035 11.001 59.24980399999894 11.284 57.80261880000032 11.039 49.42356929999984 11.014 59.638237400000186 12.155 62.52754600000077 11.517 57.000712000000156 11.457 48.515156000000296 11.456 62.54765469999951 11.469 57.848675900001155 11.607 51.277180400000766 11.407 57.30871620000059 11.276 44.20521249999976 11.356 53.532445799999586 11.44 59.535367100000705 11.013 57.876636999999725 11.299 62.62693130000029 11.233 61.09662930000085 11.541 58.30646700000044 11.47 56.10050499999922 11.592 59.06810099999961 11.583 53.39861960000054 11.088 58.79733009999951 11.469 52.42084000000058 11.326 55.48306360000028 11.546)
Error minima by case: (0.3797 2 0.116 4 0.4036 10 0.0147 9 0.0646 11 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 10 0.1391 5 0.0847 10 0.2821 5 0.021 4 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 50.828
Average program size in population (points): 51.828
Average percent parens in population: 0.020
Minimum age in population: 152.8369648291458
Maximum age in population: 157.2914713691502
Average age in population: 155.4683178291724
Median age in population: 155.5471594230349
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.124
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 109000
Number of point (instruction) evaluations so far: 145741736
--- Timings ---
Current time: 1529615254099 milliseconds
Total Time:         365.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       165.5 seconds, 45.3%
Fitness Testing:    155.7 seconds, 42.6%
Report:              44.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 108
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 109
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 109
;;******************************
;; -*- Number IO problem report - generation 109
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_sub} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_flush} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -96} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times integer_sub tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 float_rot integer_fromfloat integer_rot float_flush float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -96 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 44
Size: 45
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1801.7789424
Median total errors in population: 288.4934999999999
Error averages by case: (66.29111870000062 10.994 65.7042399999989 11.294 62.269723600000546 11.025 53.24050599999981 11.011 63.95565860000047 12.183 68.91477620000127 11.543 63.253511400000164 11.487 52.367305600000385 11.459 67.47321189999955 11.484 58.68794860000159 11.623 57.128813400001 11.424 58.19746590000067 11.302 50.48719999999927 11.358 56.81854099999947 11.423 61.530564200000796 11.016 64.27088889999972 11.317 64.62834050000036 11.22 65.98214290000121 11.511 58.12287400000053 11.488 60.89786699999911 11.583 65.06844109999908 11.607 53.78922780000066 11.106 59.50513189999909 11.473 58.61048000000068 11.326 59.75696320000036 11.569)
Error minima by case: (0.3797 2 0.116 2 0.4036 9 0.0147 9 0.0646 11 0.2478 3 0.2526 3 0.6028 3 0.5369 3 0.3017 4 0.1266 2 0.0806 4 0.0125 3 0.2262 2 0.1049 10 0.1391 3 0.0847 10 0.7179 3 0.021 3 0.117 2 0.3343 4 0.3646 3 0.4929 4 0.04 3 0.0346 11)
Average genome size in population (length): 50.414
Average program size in population (points): 51.414
Average percent parens in population: 0.020
Minimum age in population: 154.2673277456112
Maximum age in population: 159.1906010958405
Average age in population: 156.9095909746989
Median age in population: 156.9263172734304
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.114
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 110000
Number of point (instruction) evaluations so far: 147003836
--- Timings ---
Current time: 1529615257099 milliseconds
Total Time:         368.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       167.0 seconds, 45.3%
Fitness Testing:    156.9 seconds, 42.6%
Report:              44.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 109
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 110
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 110
;;******************************
;; -*- Number IO problem report - generation 110
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_tan} {:instruction print_integer} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction print_integer})
Best program: (integer_dec integer_dec integer_fromfloat integer_sub integer_fromfloat float_add float_dup_items float_yank float_yankdup float_dup_times float_tan print_integer integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1755.8724093999997
Median total errors in population: 288.4934999999999
Error averages by case: (62.428517600000845 10.987 62.21980399999883 11.264 61.86002240000072 11.036 54.71849579999983 11.029 60.4341953000006 12.167 65.5810504000013 11.497 60.29121720000017 11.447 50.79089440000033 11.437 63.629970199999455 11.447 58.26366360000176 11.568 54.807573000001284 11.38 57.762177300000715 11.28 49.66228749999899 11.335 54.745874599999354 11.385 61.40357000000079 11.024 61.21835879999973 11.288 64.19271000000033 11.223 62.25160400000127 11.485 59.37257880000049 11.444 57.75545199999913 11.551 62.32343239999896 11.554 54.02307830000058 11.091 59.07504279999895 11.447 55.792920000000606 11.301 57.07491900000041 11.526)
Error minima by case: (0.6203 2 0.884 4 0.4036 10 0.0147 10 0.9354 10 0.7522 5 0.7474 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 4 0.1049 10 0.8609 5 0.0847 10 0.2821 5 0.021 4 0.117 4 0.6657 6 0.3646 4 0.4929 5 0.04 5 0.9654 10)
Average genome size in population (length): 50.813
Average program size in population (points): 51.813
Average percent parens in population: 0.020
Minimum age in population: 155.2673277456112
Maximum age in population: 160.4615578705251
Average age in population: 158.3673451228321
Median age in population: 158.3975258403446
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.122
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 111000
Number of point (instruction) evaluations so far: 148275911
--- Timings ---
Current time: 1529615260080 milliseconds
Total Time:         371.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       168.5 seconds, 45.3%
Fitness Testing:    158.1 seconds, 42.5%
Report:              45.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 110
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 111
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 111
;;******************************
;; -*- Number IO problem report - generation 111
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction tag_integer_999} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction integer_dec} {:instruction float_dec} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_pop} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -58} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times tag_integer_999 integer_mod integer_fromfloat integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 integer_dec float_dec in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop float_pop integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_yankdup integer_yankdup in2 integer_yankdup integer_max -58 integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 1624.0284115000004
Median total errors in population: 288.4934999999999
Error averages by case: (57.87036040000044 10.99 56.28831199999901 11.244 57.4627088000004 11.033 49.45117239999984 11.015 55.79456040000031 12.17 59.918528400000895 11.48 54.10574320000015 11.423 45.66983840000028 11.437 59.9664941999995 11.456 52.532279300001285 11.576 48.762167600000886 11.337 52.20387740000054 11.275 43.80408749999944 11.319 52.34044579999953 11.378 56.129304300000626 11.017 55.37774979999975 11.278 59.37130290000032 11.223 57.80132380000083 11.48 51.87644600000045 11.445 53.202239999999335 11.555 56.62677539999936 11.546 47.41961960000054 11.091 53.47834429999927 11.459 50.15432000000054 11.271 52.38740960000032 11.535)
Error minima by case: (0.3797 2 0.116 4 0.4036 9 0.0147 10 0.0646 11 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 50.588
Average program size in population (points): 51.588
Average percent parens in population: 0.020
Minimum age in population: 157.0560507681865
Maximum age in population: 161.8155461137854
Average age in population: 159.8154630202844
Median age in population: 159.8872781208796
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.124
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 112000
Number of point (instruction) evaluations so far: 149542711
--- Timings ---
Current time: 1529615263092 milliseconds
Total Time:         374.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       170.0 seconds, 45.4%
Fitness Testing:    159.3 seconds, 42.5%
Report:              45.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 111
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 112
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 112
;;******************************
;; -*- Number IO problem report - generation 112
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction float_tan} {:instruction float_pop} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_dec float_tan float_pop integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1820.5279894000005
Median total errors in population: 288.4934999999999
Error averages by case: (69.69122130000022 11.005 65.88037199999899 11.294 64.91548000000043 11.034 55.68728999999982 10.993 65.78027100000038 12.191 68.14502400000102 11.571 62.096836800000155 11.504 50.24344120000031 11.486 67.29786319999954 11.521 61.20486570000151 11.64 55.906560200000946 11.409 60.38423260000063 11.289 49.499224999999505 11.36 59.24624319999949 11.471 62.80440920000071 10.993 63.309027999999714 11.328 66.56938760000027 11.252 65.19463120000097 11.564 62.24034100000053 11.481 59.276175999999225 11.611 64.7554439999993 11.618 55.884796600000584 11.111 61.223106999999175 11.49 58.15816000000063 11.318 60.04058260000027 11.559)
Error minima by case: (0.6203 9 0.116 10 0.4036 10 0.0147 9 0.9354 10 0.2478 10 0.2526 10 0.3972 10 0.4631 10 0.3017 10 0.1266 9 0.0806 9 0.0125 10 0.2262 10 0.1049 9 0.1391 10 0.0847 10 0.2821 9 0.021 10 0.117 10 0.3343 10 0.3646 9 0.4929 10 0.04 9 0.9654 10)
Average genome size in population (length): 50.512
Average program size in population (points): 51.512
Average percent parens in population: 0.020
Minimum age in population: 159.0450030044951
Maximum age in population: 163.269305178106
Average age in population: 161.2244465579997
Median age in population: 161.2479398251008
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.758
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.758
Total error diversity:				 0.134
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 113000
Number of point (instruction) evaluations so far: 150807786
--- Timings ---
Current time: 1529615265960 milliseconds
Total Time:         377.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       171.4 seconds, 45.4%
Fitness Testing:    160.5 seconds, 42.5%
Report:              45.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 112
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 113
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 113
;;******************************
;; -*- Number IO problem report - generation 113
Test total error for best: 11837.046399999981
Test mean error for best: 5.91852
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_rot} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_yankdup} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_max} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction float_sub} {:instruction -60} {:instruction float_inc} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_mod integer_fromfloat integer_dup_times float_dup_items float_yank float_rot integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop integer_stackdepth integer_rot float_pop in1 integer_rot integer_fromfloat integer_fromfloat integer_rot float_yankdup float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth -94 integer_pop float_max float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max float_sub -60 float_inc float_yankdup integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2016.8382772999998
Median total errors in population: 288.4934999999999
Error averages by case: (73.59692360000045 10.977 75.41367169999934 11.291 68.66378360000071 11.048 61.27963279999981 11.033 74.38858290000071 12.202 78.11013810000142 11.54 72.79197699999958 11.473 61.83434760000039 11.446 75.5721915999999 11.467 65.88115580000199 11.588 66.94856620000162 11.41 65.59930090000078 11.296 59.67814279999898 11.351 67.97721959999919 11.417 68.03385860000076 11.034 73.71159759999972 11.315 71.11532080000002 11.261 74.20634720000149 11.531 65.76730910000047 11.468 69.41485599999902 11.565 74.8218721999989 11.595 61.45636200000065 11.106 67.04186649999875 11.469 68.42116110000059 11.329 70.33709200000042 11.563)
Error minima by case: (0.6203 2 0.116 3 0.3936 8 0.0147 9 0.9354 11 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 6 0.1266 4 0.0806 6 0.0125 4 0.2262 4 0.1049 10 0.1391 5 0.0847 10 0.2821 4 0.021 5 0.117 3 0.3343 6 0.3646 4 0.4929 6 0.04 4 0.9654 10)
Average genome size in population (length): 50.353
Average program size in population (points): 51.353
Average percent parens in population: 0.020
Minimum age in population: 160.3576034358786
Maximum age in population: 164.6738811775036
Average age in population: 162.6693288593056
Median age in population: 162.711282961506
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.121
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 114000
Number of point (instruction) evaluations so far: 152068586
--- Timings ---
Current time: 1529615269230 milliseconds
Total Time:         380.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       172.9 seconds, 45.4%
Fitness Testing:    161.7 seconds, 42.5%
Report:              46.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 113
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 114
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 114
;;******************************
;; -*- Number IO problem report - generation 114
Test total error for best: 11652.51159999998
Test mean error for best: 5.82626
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction tag_integer_999} {:instruction tag_integer_896} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction in1} {:instruction float_rot} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_dup_times} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times tag_integer_999 tag_integer_896 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_fromfloat integer_fromfloat integer_rot integer_rot float_stackdepth float_frominteger integer_add in2 integer_rot integer_fromfloat float_pop in1 integer_rot in1 float_rot integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup integer_pop float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_dup_times integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 59
Size: 60
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1648.5716222999997
Median total errors in population: 288.4934999999999
Error averages by case: (62.55796940000041 11.003 57.96531199999888 11.26 58.19088360000028 11.032 49.72627529999981 11.006 57.84901000000021 12.164 60.31080260000082 11.494 55.226995800000154 11.443 43.92166080000034 11.421 58.53215839999945 11.445 54.8876929000012 11.615 49.7102188000005 11.367 54.32752220000056 11.282 44.44642499999989 11.328 49.56487459999969 11.378 57.16019940000072 11.002 56.10049789999971 11.291 60.337218200000336 11.209 56.63537440000073 11.473 55.81367700000049 11.466 51.87611199999932 11.529 57.23976669999956 11.559 50.49063020000062 11.098 55.82834429999932 11.471 51.27956000000064 11.301 54.42044080000024 11.535)
Error minima by case: (0.6203 4 0.116 3 0.4036 9 0.0147 9 0.9354 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.9654 10)
Average genome size in population (length): 50.284
Average program size in population (points): 51.284
Average percent parens in population: 0.020
Minimum age in population: 161.749182217635
Maximum age in population: 165.8765031176331
Average age in population: 164.0760348043961
Median age in population: 164.115007734677
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.11
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 115000
Number of point (instruction) evaluations so far: 153327511
--- Timings ---
Current time: 1529615272402 milliseconds
Total Time:         384.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       174.5 seconds, 45.4%
Fitness Testing:    163.0 seconds, 42.4%
Report:              46.4 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 114
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 115
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 115
;;******************************
;; -*- Number IO problem report - generation 115
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tag_integer_999} {:instruction integer_add} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -61} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat tag_integer_999 integer_add integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_sin in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -61 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 1726.7326341999994
Median total errors in population: 288.4934999999999
Error averages by case: (64.5443491000007 11.002 60.55912399999883 11.266 62.957582800000395 11.032 55.42968689999981 11.013 58.087428600000266 12.171 62.89153720000086 11.499 57.93576400000016 11.439 49.6932776000003 11.432 64.43921189999942 11.468 56.58829630000134 11.605 52.53819320000066 11.363 56.92776400000071 11.3 45.933274999999576 11.337 52.49732699999969 11.383 62.38578670000083 11.01 58.75347159999972 11.295 65.43627010000037 11.226 62.75914290000095 11.485 55.85265600000053 11.468 57.874866999999114 11.533 59.71277249999951 11.559 51.79990100000063 11.108 58.39989399999933 11.472 54.126960000000615 11.312 54.29809480000043 11.532)
Error minima by case: (0.6203 4 0.116 5 0.4036 9 0.0147 10 0.9354 11 0.2478 5 0.2526 6 0.3972 5 0.4631 6 0.3017 5 0.1266 4 0.0806 6 0.0125 5 0.2262 5 0.1049 9 0.1391 5 0.0847 10 0.2821 6 0.021 4 0.117 5 0.3343 6 0.3646 4 0.4929 6 0.04 6 0.9654 11)
Average genome size in population (length): 50.563
Average program size in population (points): 51.563
Average percent parens in population: 0.020
Minimum age in population: 163.3910879372605
Maximum age in population: 167.4044904899893
Average age in population: 165.5448408721927
Median age in population: 165.5999320767276
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.785
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.785
Total error diversity:				 0.127
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 116000
Number of point (instruction) evaluations so far: 154593261
--- Timings ---
Current time: 1529615275294 milliseconds
Total Time:         387.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       175.9 seconds, 45.5%
Fitness Testing:    164.2 seconds, 42.4%
Report:              46.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 115
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 116
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 116
;;******************************
;; -*- Number IO problem report - generation 116
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction tag_integer_368} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -61} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank tag_integer_368 integer_dec float_tan in2 float_cos tag_integer_999 in1 integer_yank in2 float_mult integer_fromfloat float_pop in1 integer_rot float_pop in1 float_max integer_fromfloat integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup in2 integer_yankdup integer_max -61 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 55
Size: 56
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 1794.0644250000003
Median total errors in population: 288.4934999999999
Error averages by case: (65.28660100000081 11.0 63.197587999998866 11.252 64.52984760000083 11.032 56.27339289999982 11.001 63.753526800000536 12.183 66.28228060000124 11.502 60.51852180000017 11.444 50.95944120000034 11.425 66.64847389999949 11.447 58.898564000001635 11.591 55.48882620000074 11.337 58.327152000000666 11.288 49.48836249999966 11.324 57.977648399999595 11.389 63.74141610000081 11.001 61.998610699999716 11.302 66.90660890000032 11.208 64.73778490000134 11.453 59.688320000000495 11.443 59.93652699999918 11.52 63.28344109999924 11.571 54.86970280000059 11.107 59.664879799999035 11.459 57.133120000000645 11.271 60.378786800000356 11.545)
Error minima by case: (0.3797 2 0.884 4 0.4036 9 0.0147 9 0.0646 10 0.7522 6 0.7474 5 0.6028 5 0.5369 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 10 0.8609 5 0.9153 10 0.7179 5 0.021 5 0.117 4 0.6657 7 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 50.084
Average program size in population (points): 51.084
Average percent parens in population: 0.020
Minimum age in population: 164.552282852891
Maximum age in population: 168.687877867071
Average age in population: 166.9930317926862
Median age in population: 167.0495182504193
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.766
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.766
Total error diversity:				 0.132
Error (vector) diversity:			 0.137
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 117000
Number of point (instruction) evaluations so far: 155846611
--- Timings ---
Current time: 1529615278264 milliseconds
Total Time:         389.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       177.3 seconds, 45.5%
Fitness Testing:    165.4 seconds, 42.4%
Report:              47.1 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 116
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 117
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 117
;;******************************
;; -*- Number IO problem report - generation 117
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_shove} {:instruction integer_max} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction float_max} {:instruction in1} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_dec integer_dec float_yank integer_dup_times integer_dec float_tan integer_shove integer_max in1 integer_yank in2 float_mult integer_fromfloat float_max in1 float_sub integer_fromfloat integer_rot float_sin integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1774.0648569
Median total errors in population: 288.4934999999999
Error averages by case: (64.3066273000003 10.987 63.983499999998834 11.289 60.46621520000031 11.042 52.29755459999984 11.026 63.10865600000024 12.173 66.83751960000082 11.53 61.625722400000164 11.458 51.95990840000034 11.445 65.6587487999995 11.467 58.05116740000141 11.61 55.77206660000092 11.406 57.7841520000007 11.295 48.909274999999454 11.358 59.31279079999948 11.437 59.7944161000008 11.025 62.30130619999976 11.309 62.937778300000325 11.237 64.1878608000009 11.511 58.19536200000048 11.474 59.04098399999913 11.572 63.39911259999948 11.595 53.5217028000006 11.104 59.47189399999936 11.485 57.11768000000061 11.341 59.281856000000424 11.565)
Error minima by case: (0.3797 2 0.116 4 0.4036 9 0.0147 10 0.0646 11 0.2478 6 0.2526 5 0.6028 5 0.5369 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.8951 10 0.1391 5 0.9153 11 0.7179 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 49.958
Average program size in population (points): 50.958
Average percent parens in population: 0.020
Minimum age in population: 166.1546738657404
Maximum age in population: 170.3622602491855
Average age in population: 168.3972783032168
Median age in population: 168.4191700589484
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.771
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.771
Total error diversity:				 0.128
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.133
--- Run Statistics ---
Number of program evaluations used so far: 118000
Number of point (instruction) evaluations so far: 157096761
--- Timings ---
Current time: 1529615281565 milliseconds
Total Time:         393.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       178.8 seconds, 45.5%
Fitness Testing:    166.8 seconds, 42.4%
Report:              47.4 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 117
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 118
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 118
;;******************************
;; -*- Number IO problem report - generation 118
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction tag_integer_368} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction float_cos} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -61} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank tag_integer_368 integer_dec float_tan in2 float_cos tag_integer_999 in1 integer_yank in2 float_mult integer_fromfloat float_pop in1 integer_rot float_pop in1 float_max integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_flush float_yankdup float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -61 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1926.307289200001
Median total errors in population: 288.4934999999999
Error averages by case: (70.72031150000016 11.003 69.81781999999932 11.278 68.94594660000004 11.036 59.30736639999982 11.012 69.0144958000003 12.17 71.97025420000101 11.534 66.58153220000013 11.465 57.41169680000032 11.479 72.14368049999986 11.504 63.53187160000127 11.616 61.19804100000093 11.399 62.895283000000695 11.288 54.92301249999938 11.356 63.489957599999535 11.438 69.18965300000046 11.009 67.53455809999973 11.314 72.37280799999996 11.223 70.52612830000092 11.537 64.29397300000049 11.458 65.36102499999916 11.617 68.70412129999939 11.599 59.277008800000594 11.116 64.23482199999935 11.471 63.2487200000006 11.32 64.81120200000038 11.56)
Error minima by case: (0.3797 2 0.116 4 0.4036 10 0.0147 9 0.0646 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 10 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 49.549
Average program size in population (points): 50.549
Average percent parens in population: 0.020
Minimum age in population: 167.1546738657404
Maximum age in population: 171.7134796991601
Average age in population: 169.8482920455843
Median age in population: 169.8653176833023
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.764
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.764
Total error diversity:				 0.122
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 119000
Number of point (instruction) evaluations so far: 158336561
--- Timings ---
Current time: 1529615284521 milliseconds
Total Time:         396.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       180.3 seconds, 45.5%
Fitness Testing:    167.9 seconds, 42.4%
Report:              47.8 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 118
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 119
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 119
;;******************************
;; -*- Number IO problem report - generation 119
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_rot} {:instruction float_dup} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction tagged_526} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_mod integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_rot float_dup float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush tagged_526 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1786.2325361
Median total errors in population: 288.4934999999999
Error averages by case: (66.84339800000053 11.003 62.55189199999891 11.274 64.41535920000052 11.046 56.422966599999825 11.025 63.368077200000435 12.209 66.72478500000102 11.527 60.61951140000016 11.462 49.91137120000031 11.454 64.35297759999948 11.474 59.86105550000145 11.621 55.322674000000994 11.362 59.206749000000606 11.32 49.918112499999424 11.344 53.39910079999945 11.419 63.7005072000007 11.022 62.21733249999973 11.316 66.8350816000002 11.212 62.12240160000096 11.477 60.8092150000005 11.485 57.75936799999922 11.558 63.57377249999928 11.591 55.19451520000062 11.134 60.694415299999136 11.492 55.95628000000062 11.283 59.78061720000033 11.561)
Error minima by case: (0.3797 4 0.884 5 0.4036 9 0.0147 10 0.0646 11 0.7522 5 0.7474 6 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 6 0.0125 5 0.2262 2 0.8951 10 0.8609 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 6 0.04 6 0.0346 11)
Average genome size in population (length): 49.563
Average program size in population (points): 50.563
Average percent parens in population: 0.020
Minimum age in population: 168.8605447148092
Maximum age in population: 173.2172931404247
Average age in population: 171.3157446039656
Median age in population: 171.3930048480602
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.761
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.761
Total error diversity:				 0.11
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 120000
Number of point (instruction) evaluations so far: 159576686
--- Timings ---
Current time: 1529615287471 milliseconds
Total Time:         399.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       181.6 seconds, 45.5%
Fitness Testing:    169.1 seconds, 42.4%
Report:              48.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 119
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 120
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 120
;;******************************
;; -*- Number IO problem report - generation 120
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_rot} {:instruction integer_dec} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_mod integer_fromfloat integer_dup_times float_dup_items float_yank float_rot integer_dec in1 integer_yank in2 integer_rot in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_mod integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup in2 float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2008.1485957000004
Median total errors in population: 288.4934999999999
Error averages by case: (73.65531149999995 10.993 73.90970399999985 11.315 71.05926020000011 11.027 62.41499309999983 11.014 71.1208834000005 12.156 77.23075860000131 11.566 71.8610373999994 11.497 58.013626800000296 11.495 74.05211040000047 11.513 68.44479370000127 11.636 65.97240800000145 11.43 68.29516960000068 11.328 58.142987499998895 11.371 65.65254099999927 11.473 70.66452910000011 11.015 72.52986259999973 11.33 74.11006829999947 11.227 72.49587340000122 11.545 67.630225 11.514 66.76174899999923 11.606 73.36244979999906 11.624 62.919654800000586 11.128 69.77635429999891 11.511 65.5818000000006 11.352 67.25344420000036 11.571)
Error minima by case: (0.3797 2 0.116 4 0.3226 8 0.0147 9 0.0646 10 0.2478 6 0.2526 5 0.6028 5 0.5369 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.8951 9 0.1391 5 0.9153 10 0.7179 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 49.474
Average program size in population (points): 50.474
Average percent parens in population: 0.020
Minimum age in population: 169.8605447148092
Maximum age in population: 174.9948692174217
Average age in population: 172.6985415372377
Median age in population: 172.760098101727
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.751
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.751
Total error diversity:				 0.121
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 121000
Number of point (instruction) evaluations so far: 160814436
--- Timings ---
Current time: 1529615290509 milliseconds
Total Time:         402.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       183.1 seconds, 45.5%
Fitness Testing:    170.3 seconds, 42.4%
Report:              48.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 120
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 121
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 121
;;******************************
;; -*- Number IO problem report - generation 121
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_dup_items} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction float_max} {:instruction in1} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_dec float_dec integer_dup_times float_dup_items integer_dec float_dup_items in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_yank float_mult integer_fromfloat float_max in1 float_sub integer_fromfloat integer_rot float_sin integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1872.1024217000001
Median total errors in population: 288.4934999999999
Error averages by case: (68.88683030000033 10.986 66.66109599999899 11.25 67.08745450000022 11.03 58.81600009999982 11.012 66.1631392000004 12.176 67.66600640000092 11.487 62.90780560000017 11.437 55.94315010000034 11.414 69.84070609999976 11.448 63.394639100001285 11.594 57.74540800000079 11.357 62.73738630000058 11.274 54.374949999999444 11.311 62.40139859999943 11.377 65.3389587000007 11.019 63.68314079999972 11.275 68.25265650000016 11.228 68.06181420000092 11.478 63.87105740000048 11.452 63.60067749999921 11.533 64.77711839999944 11.541 59.3176821000006 11.112 64.31032659999931 11.452 60.152440000000624 11.284 62.05357920000033 11.53)
Error minima by case: (0.6203 2 0.116 4 0.0465 9 0.0147 10 0.9354 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.9654 11)
Average genome size in population (length): 49.211
Average program size in population (points): 50.211
Average percent parens in population: 0.020
Minimum age in population: 171.1883875978683
Maximum age in population: 176.4302122138747
Average age in population: 174.1401277376094
Median age in population: 174.1506615872721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.115
Error (vector) diversity:			 0.116
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 122000
Number of point (instruction) evaluations so far: 162045811
--- Timings ---
Current time: 1529615293365 milliseconds
Total Time:         405.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       184.5 seconds, 45.6%
Fitness Testing:    171.5 seconds, 42.3%
Report:              48.9 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 121
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 122
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 122
;;******************************
;; -*- Number IO problem report - generation 122
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction tag_integer_459} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -61} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_dec float_tan in2 integer_shove tag_integer_999 in1 tag_integer_459 tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_dup in1 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -61 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1812.3100096
Median total errors in population: 288.4934999999999
Error averages by case: (67.1026273000005 10.983 65.2838199999988 11.254 64.96779360000058 11.025 56.987642799999804 11.006 63.2965914000005 12.18 68.52550200000117 11.495 62.93927960000017 11.429 52.70610000000036 11.402 67.36474879999959 11.434 58.93202850000132 11.57 57.517686800001194 11.343 58.390495000000676 11.276 50.482187499999334 11.32 57.8623985999993 11.375 63.8635279000008 11.013 64.30814079999972 11.296 66.73542310000022 11.215 66.01629660000108 11.449 57.88432700000053 11.436 61.058866999999125 11.505 64.98144979999918 11.555 53.745774600000644 11.104 59.73534329999926 11.436 57.93024000000066 11.27 59.78271760000037 11.538)
Error minima by case: (0.3797 1 0.116 1 0.4036 9 0.0147 9 0.0646 11 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 9 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.0346 11)
Average genome size in population (length): 48.841
Average program size in population (points): 49.841
Average percent parens in population: 0.020
Minimum age in population: 172.3380224939009
Maximum age in population: 177.6265979699678
Average age in population: 175.5669441885908
Median age in population: 175.6678185842199
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.123
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 123000
Number of point (instruction) evaluations so far: 163267736
--- Timings ---
Current time: 1529615296480 milliseconds
Total Time:         408.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       186.0 seconds, 45.6%
Fitness Testing:    172.7 seconds, 42.3%
Report:              49.2 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 122
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 123
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 123
;;******************************
;; -*- Number IO problem report - generation 123
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -95} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction -66.03531107815323} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -95 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 -66.03531107815323 integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1552.6526874999995
Median total errors in population: 288.4934999999999
Error averages by case: (56.83616460000038 10.993 53.94273199999895 11.243 53.6184340000003 11.025 45.840426999999835 11.0 55.435765200000326 12.171 57.970059200000875 11.475 51.975227600000174 11.421 40.41983840000034 11.375 54.56115839999948 11.409 49.96737960000106 11.582 46.724585800000696 11.326 49.33442930000061 11.271 41.48337499999959 11.314 47.48891039999963 11.351 52.82253700000068 10.996 53.476802399999734 11.287 55.87867600000032 11.183 52.567374400000766 11.401 50.9276451000005 11.437 48.15711199999925 11.473 54.800095199999525 11.557 45.626195600000585 11.093 50.74275289999949 11.438 47.702600000000615 11.258 50.72741040000031 11.546)
Error minima by case: (0.3797 2 0.116 4 0.3936 8 0.0147 9 0.0646 11 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 10 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 48.763
Average program size in population (points): 49.763
Average percent parens in population: 0.020
Minimum age in population: 174.4161379973424
Maximum age in population: 179.101243830587
Average age in population: 176.9389822574405
Median age in population: 176.9910007567954
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.747
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.747
Total error diversity:				 0.129
Error (vector) diversity:			 0.132
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 124000
Number of point (instruction) evaluations so far: 164487811
--- Timings ---
Current time: 1529615299723 milliseconds
Total Time:         411.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       187.5 seconds, 45.6%
Fitness Testing:    174.1 seconds, 42.3%
Report:              49.6 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 123
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 124
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 124
;;******************************
;; -*- Number IO problem report - generation 124
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction in2} {:instruction float_div} {:instruction integer_fromfloat} {:instruction in1} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_yank} {:instruction float_sin} {:instruction float_dec} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_dec integer_fromfloat integer_sub integer_fromfloat float_add float_dup_items float_yank float_yankdup float_dup_times float_yank integer_dup_times integer_dec float_pop in1 integer_rot in2 float_div integer_fromfloat in1 float_rot integer_fromfloat integer_rot float_sin float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_yank float_sin float_dec float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1475.1565652000006
Median total errors in population: 288.4934999999999
Error averages by case: (54.58010850000034 10.998 50.38454399999894 11.242 50.308116200000235 11.03 43.52359579999985 11.007 52.32072060000021 12.194 54.23631580000075 11.483 48.49300620000015 11.435 40.08173880000031 11.39 50.73812329999951 11.411 45.955189800000774 11.546 43.560851800000236 11.329 44.87607410000062 11.245 39.36151250000007 11.307 44.54088679999989 11.358 49.73717920000074 11.014 50.021106899999715 11.293 51.62600270000033 11.178 49.208307300000726 11.424 47.496729100000465 11.395 45.830545999999245 11.486 51.26942369999958 11.544 42.407383200000545 11.093 46.312852299999825 11.399 45.30436000000059 11.251 49.40489060000035 11.525)
Error minima by case: (0.3797 2 0.116 4 0.3226 8 0.0147 9 0.0646 10 0.2478 6 0.2526 5 0.6028 5 0.5369 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.8951 9 0.1391 5 0.9153 10 0.7179 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 48.827
Average program size in population (points): 49.827
Average percent parens in population: 0.020
Minimum age in population: 175.7875944462194
Maximum age in population: 180.3674394983071
Average age in population: 178.3448007971422
Median age in population: 178.3686370112876
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.117
Error (vector) diversity:			 0.119
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 125000
Number of point (instruction) evaluations so far: 165709361
--- Timings ---
Current time: 1529615302894 milliseconds
Total Time:         414.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       188.9 seconds, 45.6%
Fitness Testing:    175.5 seconds, 42.3%
Report:              50.0 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 124
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 125
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 125
;;******************************
;; -*- Number IO problem report - generation 125
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tag_integer_999} {:instruction integer_add} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction print_float} {:instruction -61} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat tag_integer_999 integer_add integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_sin in1 integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup print_float -61 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 1555.0035872
Median total errors in population: 288.4934999999999
Error averages by case: (53.527273900000644 10.984 53.13380399999888 11.24 53.73232320000059 11.029 46.35511359999983 11.006 53.141108200000495 12.169 56.46630700000121 11.482 50.70496460000017 11.427 42.4996328000003 11.391 56.36832629999949 11.411 52.30988270000167 11.597 45.398079400000896 11.353 51.67903860000068 11.267 40.766337499999835 11.316 45.19245799999953 11.36 54.680933700000715 11.007 51.88266329999972 11.28 57.614980500000286 11.186 54.756349100001124 11.405 52.43948800000045 11.448 49.28917599999923 11.477 53.01676089999909 11.548 47.30334880000056 11.082 52.772344299999 11.446 46.82676000000059 11.271 49.42913280000037 11.535)
Error minima by case: (0.3797 1 0.884 1 0.4036 9 0.0147 9 0.0646 11 0.7522 2 0.7474 2 0.6028 2 0.5369 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.8951 10 0.8609 2 0.9153 9 0.7179 2 0.021 2 0.117 1 0.6657 3 0.3646 2 0.4929 3 0.04 2 0.0346 11)
Average genome size in population (length): 48.603
Average program size in population (points): 49.603
Average percent parens in population: 0.020
Minimum age in population: 176.7875944462194
Maximum age in population: 182.042697579034
Average age in population: 179.7323933599344
Median age in population: 179.7262280627141
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.121
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 126000
Number of point (instruction) evaluations so far: 166925286
--- Timings ---
Current time: 1529615305794 milliseconds
Total Time:         417.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       190.4 seconds, 45.6%
Fitness Testing:    176.6 seconds, 42.3%
Report:              50.3 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 125
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 126
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 126
;;******************************
;; -*- Number IO problem report - generation 126
Test total error for best: 11536.10039999998
Test mean error for best: 5.76805
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_shove} {:instruction tag_integer_896} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction float_dec} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_sin} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_yank integer_dup_times float_dup_items integer_dup_times integer_dup_times integer_dec in1 integer_yank in2 integer_rot integer_fromfloat integer_shove tag_integer_896 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush float_dec float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup in2 integer_yankdup float_sin -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1805.7292468000003
Median total errors in population: 288.4934999999999
Error averages by case: (65.18274730000053 11.007 66.23681999999899 11.318 65.19356480000057 11.041 57.212760399999816 11.016 60.79847320000041 12.17 67.859519600001 11.551 62.86478480000015 11.487 53.9051420000003 11.483 67.0805808999996 11.506 57.92891660000132 11.602 57.028180400001 11.404 57.57593080000058 11.315 51.7051124999993 11.362 58.63046939999941 11.443 63.59842300000069 11.018 63.48302799999973 11.323 66.62433840000024 11.241 65.66332190000102 11.546 58.02222200000045 11.48 60.48003699999923 11.606 64.56344399999932 11.603 53.42468080000055 11.135 59.29992139999928 11.482 58.886040000000605 11.332 57.45478760000033 11.555)
Error minima by case: (0.3797 3 0.884 4 0.4036 9 0.0147 9 0.0646 11 0.7522 5 0.7474 5 0.6028 5 0.5369 5 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 4 0.8951 9 0.8609 5 0.9153 9 0.7179 5 0.021 4 0.117 4 0.6657 6 0.3646 4 0.4929 5 0.04 5 0.0346 11)
Average genome size in population (length): 48.626
Average program size in population (points): 49.626
Average percent parens in population: 0.021
Minimum age in population: 178.369687152476
Maximum age in population: 183.3778552615707
Average age in population: 181.1489260885945
Median age in population: 181.1797371773501
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.753
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.753
Total error diversity:				 0.125
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 127000
Number of point (instruction) evaluations so far: 168141436
--- Timings ---
Current time: 1529615308708 milliseconds
Total Time:         420.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       191.8 seconds, 45.6%
Fitness Testing:    177.8 seconds, 42.3%
Report:              50.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 126
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 127
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 127
;;******************************
;; -*- Number IO problem report - generation 127
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_flush} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_add integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times float_dup_items integer_shove tag_integer_999 in1 integer_yank in1 integer_yank in2 integer_rot integer_fromfloat float_pop integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_flush integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1904.8555620000002
Median total errors in population: 288.4934999999999
Error averages by case: (71.28574010000033 11.017 67.50713999999901 11.289 70.2734440000003 11.039 61.25743699999983 11.005 67.68172320000046 12.232 70.6510240000011 11.563 64.78333160000015 11.505 56.930030000000315 11.466 72.2529369999998 11.494 62.588631900001495 11.642 59.22331980000103 11.401 62.03465620000063 11.31 53.56028749999932 11.365 62.52202919999936 11.464 67.5873602000006 11.014 66.02902799999973 11.349 70.97854060000003 11.234 70.49006700000108 11.515 62.77545300000046 11.488 64.9505269999992 11.565 67.37644399999918 11.634 58.23296220000058 11.119 63.64348529999919 11.491 60.716000000000605 11.31 64.40196320000034 11.611)
Error minima by case: (0.6203 4 0.116 3 0.4036 9 0.0147 9 0.9354 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 9 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.9654 11)
Average genome size in population (length): 48.419
Average program size in population (points): 49.419
Average percent parens in population: 0.021
Minimum age in population: 179.6954447099145
Maximum age in population: 184.6780032581512
Average age in population: 182.611440109899
Median age in population: 182.645677254639
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.731
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.731
Total error diversity:				 0.113
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 128000
Number of point (instruction) evaluations so far: 169352486
--- Timings ---
Current time: 1529615311903 milliseconds
Total Time:         423.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       193.4 seconds, 45.7%
Fitness Testing:    179.0 seconds, 42.3%
Report:              51.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 127
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 128
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 128
;;******************************
;; -*- Number IO problem report - generation 128
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction 77} {:instruction float_tan} {:instruction float_dup} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_tan} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_flush integer_fromfloat float_sin float_dup_items integer_yankdup integer_dup_times 77 float_tan float_dup integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot float_pop in1 integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup float_tan -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1813.3753932999996
Median total errors in population: 288.4934999999999
Error averages by case: (64.57703570000066 10.996 65.94207999999894 11.251 60.281362000000556 11.027 51.77972099999982 11.015 64.7416644000005 12.159 68.53204160000107 11.479 63.54449060000017 11.423 51.553291600000385 11.412 66.63774879999954 11.432 60.6514305000015 11.567 58.185079400001065 11.363 60.43212750000071 11.279 50.8453499999994 11.319 57.63174359999941 11.399 63.13839000000087 11.012 64.40777609999972 11.288 66.13813500000028 11.216 65.49814290000114 11.461 60.777505100000546 11.447 60.01098399999906 11.519 65.4574352999993 11.555 56.17225680000065 11.094 61.882187999999196 11.447 59.34756000000068 11.299 61.24485340000043 11.506)
Error minima by case: (0.5373 2 0.884 3 0.3936 8 0.0147 9 0.9354 10 0.7522 5 0.7474 5 0.6028 3 0.5369 4 0.2577 5 0.1266 4 0.0206 5 0.0125 4 0.2262 2 0.1049 9 0.8609 5 0.9153 10 0.7179 4 0.007 4 0.117 3 0.6657 6 0.3426 4 0.4209 5 0.04 4 0.9654 10)
Average genome size in population (length): 48.284
Average program size in population (points): 49.284
Average percent parens in population: 0.021
Minimum age in population: 180.885544851695
Maximum age in population: 186.0108120368286
Average age in population: 184.0529937992678
Median age in population: 184.0746950996643
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.725
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.725
Total error diversity:				 0.121
Error (vector) diversity:			 0.123
Behavioral diversity:				 0.124
--- Run Statistics ---
Number of program evaluations used so far: 129000
Number of point (instruction) evaluations so far: 170560061
--- Timings ---
Current time: 1529615314927 milliseconds
Total Time:         426.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       194.9 seconds, 45.7%
Fitness Testing:    180.2 seconds, 42.3%
Report:              51.4 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 128
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 129
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 129
;;******************************
;; -*- Number IO problem report - generation 129
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dec} {:instruction in2} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_div} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_tan} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dup_times integer_dec in2 in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_mod integer_fromfloat float_add float_pop in1 integer_rot integer_fromfloat integer_rot integer_add integer_stackdepth integer_pop float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_div integer_yankdup in2 integer_yankdup float_tan -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 1878.0574814000006
Median total errors in population: 288.4934999999999
Error averages by case: (71.08243479999987 10.995 66.60170399999893 11.27 69.07430519999997 11.032 60.25624589999983 11.01 67.59394800000028 12.161 70.37379380000094 11.528 64.23053220000016 11.463 53.473810400000325 11.447 69.35425249999984 11.48 62.76274470000092 11.65 58.50681340000058 11.392 62.114396300000635 11.304 52.183212499999755 11.347 58.95725539999955 11.417 67.11324840000071 11.012 65.50205429999973 11.306 70.5370651999998 11.223 67.23347750000082 11.475 62.94115370000046 11.482 62.352824999999186 11.555 66.65776959999947 11.611 57.63892080000058 11.113 63.73750819999969 11.492 59.9606000000006 11.316 63.16140960000039 11.575)
Error minima by case: (0.3797 2 0.116 4 0.4036 8 0.0147 9 0.0646 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 9 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 48.262
Average program size in population (points): 49.262
Average percent parens in population: 0.021
Minimum age in population: 181.885544851695
Maximum age in population: 187.4069753127512
Average age in population: 185.5590041588017
Median age in population: 185.6062795079292
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.746
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.746
Total error diversity:				 0.139
Error (vector) diversity:			 0.144
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 130000
Number of point (instruction) evaluations so far: 171767111
--- Timings ---
Current time: 1529615317751 milliseconds
Total Time:         429.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       196.3 seconds, 45.7%
Fitness Testing:    181.4 seconds, 42.2%
Report:              51.7 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 129
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 130
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 130
;;******************************
;; -*- Number IO problem report - generation 130
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_pop} {:instruction float_stackdepth} {:instruction 79.02238448065495} {:instruction integer_dup_times} {:instruction tag_integer_999} {:instruction tag_integer_896} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_flush} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_pop float_stackdepth 79.02238448065495 integer_dup_times tag_integer_999 tag_integer_896 in1 integer_yank in2 integer_rot integer_fromfloat float_pop integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_flush integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 1819.3570608
Median total errors in population: 288.4934999999999
Error averages by case: (68.10328520000064 10.993 64.30231199999874 11.246 64.52469080000049 11.047 56.412304699999815 11.03 64.50326840000047 12.167 67.24528060000107 11.481 62.43399580000017 11.422 51.64319360000032 11.418 65.63649419999949 11.429 61.66024530000157 11.586 57.391307000001085 11.343 61.376265400000804 11.288 52.554199999999284 11.322 56.96605359999941 11.367 63.31819940000085 11.017 63.23388889999973 11.28 66.35821820000031 11.215 63.68632380000104 11.436 61.82217300000049 11.452 59.10788899999908 11.499 64.27610969999924 11.549 57.3034214000006 11.105 61.99295079999929 11.469 58.33848000000065 11.293 61.17751000000047 11.535)
Error minima by case: (0.3797 2 0.116 4 0.4036 10 0.0147 10 0.0646 11 0.2478 5 0.2526 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 6 0.0125 5 0.2262 2 0.8951 10 0.1391 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 6 0.04 5 0.0346 11)
Average genome size in population (length): 48.48
Average program size in population (points): 49.48
Average percent parens in population: 0.021
Minimum age in population: 183.1546957178729
Maximum age in population: 189.0975796298965
Average age in population: 186.9672433846537
Median age in population: 186.977052558838
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.736
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.736
Total error diversity:				 0.113
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 131000
Number of point (instruction) evaluations so far: 172979836
--- Timings ---
Current time: 1529615320719 milliseconds
Total Time:         432.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       197.6 seconds, 45.7%
Fitness Testing:    182.7 seconds, 42.2%
Report:              52.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 130
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 131
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 131
;;******************************
;; -*- Number IO problem report - generation 131
Test total error for best: 11536.10039999998
Test mean error for best: 5.76805
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_dup_items} {:instruction integer_dup} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_dup_items} {:instruction tag_integer_1005} {:instruction in1} {:instruction float_swap} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_rot} {:instruction float_dup} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction integer_pop} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat float_tan float_dup_items integer_dup integer_dup_times float_tan float_dup_items tag_integer_1005 in1 float_swap in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_rot float_dup float_stackdepth float_frominteger integer_add in2 integer_pop float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 1888.7089926999997
Median total errors in population: 288.4934999999999
Error averages by case: (70.09028520000058 11.009 68.66335599999888 11.275 64.99028720000065 11.034 57.5572752999998 11.011 67.14920380000055 12.17 71.07402400000129 11.52 66.02477440000015 11.453 56.15239920000032 11.433 71.93664179999983 11.459 61.94697760000181 11.607 60.687446400001335 11.38 61.616796800000785 11.302 53.55428749999941 11.348 61.33085099999933 11.402 66.12225530000077 11.008 66.8236106999997 11.313 68.4157100000001 11.217 70.1243238000012 11.462 61.43242500000052 11.47 66.12059099999912 11.518 67.71944109999916 11.595 56.364619600000616 11.106 63.03695079999899 11.481 62.24988000000067 11.319 63.0665792000004 11.566)
Error minima by case: (0.3797 3 0.116 3 0.4036 10 0.0147 10 0.0646 10 0.2478 5 0.2526 5 0.3972 5 0.4631 6 0.3017 5 0.1266 4 0.0806 6 0.0125 4 0.2262 5 0.1049 10 0.1391 5 0.0847 10 0.2821 6 0.021 4 0.117 5 0.3343 6 0.3646 4 0.4929 6 0.04 4 0.0346 10)
Average genome size in population (length): 48.581
Average program size in population (points): 49.581
Average percent parens in population: 0.021
Minimum age in population: 185.6472773667868
Maximum age in population: 190.3355223072055
Average age in population: 188.3660778283928
Median age in population: 188.3878976307119
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.131
Error (vector) diversity:			 0.134
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 132000
Number of point (instruction) evaluations so far: 174195186
--- Timings ---
Current time: 1529615323787 milliseconds
Total Time:         435.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       199.2 seconds, 45.7%
Fitness Testing:    183.8 seconds, 42.2%
Report:              52.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 131
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 132
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 132
;;******************************
;; -*- Number IO problem report - generation 132
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_yank integer_dup_times float_dup_items integer_dup_times integer_dec integer_fromfloat integer_dup_times float_dup_items integer_dup_items in1 integer_yank in2 integer_max integer_fromfloat float_pop in1 integer_rot float_pop in1 float_min integer_fromfloat float_yankdup integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 52
Size: 53
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2080.5505278
Median total errors in population: 288.4934999999999
Error averages by case: (76.92938609999996 10.985 77.294328 11.295 75.7094259999998 11.037 68.05251049999981 11.024 74.70792540000058 12.176 78.13498000000115 11.539 73.74831079999919 11.475 65.21290240000036 11.455 77.59753290000046 11.479 68.33242500000098 11.57 68.21290160000135 11.408 68.24177520000073 11.306 63.76092499999893 11.346 70.91277679999978 11.424 73.3467308000001 11.029 74.03180999999971 11.312 76.2960323999995 11.239 76.12582090000124 11.492 68.55974599999993 11.455 70.38367399999906 11.553 74.99912999999913 11.598 64.20017920000059 11.126 69.70486359999911 11.463 70.53043999999983 11.337 70.84299520000042 11.558)
Error minima by case: (0.6203 2 0.116 2 0.4036 9 0.0147 9 0.9354 11 0.2478 3 0.2526 3 0.3972 3 0.4631 3 0.3017 5 0.1266 2 0.0806 5 0.0125 3 0.2262 2 0.1049 9 0.1391 3 0.0847 9 0.2821 3 0.021 4 0.117 2 0.3343 4 0.3646 4 0.4929 5 0.04 3 0.9654 11)
Average genome size in population (length): 48.784
Average program size in population (points): 49.784
Average percent parens in population: 0.021
Minimum age in population: 187.2023937226796
Maximum age in population: 191.7083491426128
Average age in population: 189.8285046707042
Median age in population: 189.8555125992182
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.75
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.75
Total error diversity:				 0.131
Error (vector) diversity:			 0.131
Behavioral diversity:				 0.132
--- Run Statistics ---
Number of program evaluations used so far: 133000
Number of point (instruction) evaluations so far: 175415536
--- Timings ---
Current time: 1529615326744 milliseconds
Total Time:         438.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       200.6 seconds, 45.8%
Fitness Testing:    185.0 seconds, 42.2%
Report:              52.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 132
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 133
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 133
;;******************************
;; -*- Number IO problem report - generation 133
Test total error for best: 11552.77039999998
Test mean error for best: 5.77639
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction float_dup_times} {:instruction tag_integer_459} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_dup} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction tagged_855} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_tan} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_dec integer_add in2 integer_shove tag_integer_999 float_dup_times tag_integer_459 tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_dup in1 integer_rot integer_fromfloat float_pop in1 integer_rot integer_rot integer_fromfloat integer_rot float_sin tagged_855 float_frominteger integer_add in2 float_yankdup float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup float_tan -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1674.6458331
Median total errors in population: 288.4934999999999
Error averages by case: (62.00396940000057 10.962 60.758963999998926 11.233 55.62923320000045 11.024 48.03751049999983 11.013 61.59904100000048 12.138 64.25576740000108 11.466 59.14099580000016 11.414 46.025214000000304 11.397 60.37616199999949 11.412 52.863195700001356 11.531 53.82781340000106 11.35 52.546802100000605 11.26 46.2252124999995 11.309 53.19745799999942 11.351 54.81151580000068 11.011 60.08716709999976 11.273 57.738989400000335 11.214 58.88211180000104 11.439 53.22344510000047 11.415 54.25621399999927 11.493 61.133778299999214 11.541 48.71550160000054 11.081 54.02714539999925 11.416 54.31460000000059 11.288 57.41402560000032 11.523)
Error minima by case: (0.3797 2 0.116 4 0.3226 8 0.0147 9 0.0646 10 0.2478 6 0.2526 5 0.3972 5 0.4631 4 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 48.421
Average program size in population (points): 49.421
Average percent parens in population: 0.021
Minimum age in population: 188.2023937226796
Maximum age in population: 193.5062513440635
Average age in population: 191.2482901032387
Median age in population: 191.2871924367036
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.132
Error (vector) diversity:			 0.133
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 134000
Number of point (instruction) evaluations so far: 176626661
--- Timings ---
Current time: 1529615329698 milliseconds
Total Time:         441.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       202.1 seconds, 45.8%
Fitness Testing:    186.2 seconds, 42.2%
Report:              53.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 133
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 134
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 134
;;******************************
;; -*- Number IO problem report - generation 134
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tag_integer_999} {:instruction integer_add} {:instruction float_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_flush} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat tag_integer_999 integer_add float_dup_items float_pop integer_dup_times float_dup_items integer_shove tag_integer_999 in1 integer_yank in1 integer_yank in2 integer_rot integer_fromfloat float_pop integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_flush integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 1876.6236881
Median total errors in population: 288.4934999999999
Error averages by case: (68.52581530000035 11.001 67.26967599999922 11.247 65.3585060000007 11.042 57.21019179999982 11.014 68.0220126000006 12.225 70.21628060000128 11.517 64.42956340000015 11.441 58.41459080000036 11.396 71.24580970000028 11.429 60.57015580000157 11.614 59.5020666000012 11.325 59.44230090000076 11.29 55.68626249999932 11.323 61.59798199999921 11.359 65.01248110000088 11.018 66.04461069999972 11.31 68.19143829999994 11.226 69.15329850000136 11.409 62.29939310000052 11.456 64.61765499999903 11.464 67.40844109999907 11.582 56.04799740000064 11.115 60.930136299999226 11.452 60.42344000000066 11.263 64.90658260000046 11.579)
Error minima by case: (0.3797 2 0.884 3 0.3936 8 0.0147 9 0.0646 11 0.7522 5 0.7474 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 9 0.8609 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.0346 11)
Average genome size in population (length): 48.292
Average program size in population (points): 49.292
Average percent parens in population: 0.021
Minimum age in population: 190.1131966567512
Maximum age in population: 194.5596937867103
Average age in population: 192.6825314632358
Median age in population: 192.6905790923699
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.129
Error (vector) diversity:			 0.134
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 135000
Number of point (instruction) evaluations so far: 177834611
--- Timings ---
Current time: 1529615332556 milliseconds
Total Time:         444.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       203.5 seconds, 45.8%
Fitness Testing:    187.3 seconds, 42.2%
Report:              53.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 134
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 135
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 135
;;******************************
;; -*- Number IO problem report - generation 135
Test total error for best: 11663.23559999998
Test mean error for best: 5.83162
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in1} {:instruction tag_integer_459} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction print_float} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_mod} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times integer_mod float_dup_items float_yank integer_dup_times in1 tag_integer_459 in2 integer_rot integer_fromfloat float_pop in1 in1 integer_rot integer_fromfloat integer_rot in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_pop integer_rot print_float integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_sub float_rot integer_yankdup in2 integer_yankdup integer_max -60 float_mod integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1844.205184499999
Median total errors in population: 288.4934999999999
Error averages by case: (65.38499570000107 11.0 67.03712399999871 11.288 64.04680260000096 11.042 55.77422829999981 11.022 66.39191440000084 12.179 69.5060328000016 11.532 64.33676400000017 11.458 54.8311360000004 11.426 66.84982809999943 11.447 61.389000500002226 11.605 58.917686800001746 11.39 61.04265320000078 11.323 53.68123749999855 11.353 59.698717799999024 11.404 62.66832620000085 11.018 65.18147159999971 11.313 65.64828960000037 11.236 65.24243570000161 11.467 61.83433000000056 11.476 60.65472699999904 11.511 66.28510679999872 11.59 56.783113200000685 11.127 62.52529749999857 11.483 60.36004000000071 11.328 63.542925200000425 11.573)
Error minima by case: (0.3797 2 0.116 3 0.3226 8 0.0147 9 0.0646 11 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 6 0.1266 4 0.0806 6 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 10 0.2821 4 0.021 5 0.117 3 0.3343 6 0.3646 4 0.4929 6 0.04 4 0.0346 11)
Average genome size in population (length): 48.085
Average program size in population (points): 49.085
Average percent parens in population: 0.021
Minimum age in population: 191.2330349684254
Maximum age in population: 196.1538527729173
Average age in population: 194.0864730300698
Median age in population: 194.1291363204626
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.738
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.738
Total error diversity:				 0.127
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 136000
Number of point (instruction) evaluations so far: 179037236
--- Timings ---
Current time: 1529615335533 milliseconds
Total Time:         447.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       205.0 seconds, 45.8%
Fitness Testing:    188.4 seconds, 42.1%
Report:              53.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 135
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 136
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 136
;;******************************
;; -*- Number IO problem report - generation 136
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_rot tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup integer_pop float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 1568.4516317999996
Median total errors in population: 288.4934999999999
Error averages by case: (57.28426650000032 10.967 57.27212399999901 11.222 53.54274750000018 11.044 45.38961959999983 11.009 55.61488080000016 12.173 59.75305040000074 11.467 54.26477440000016 11.413 43.3026608000003 11.332 56.85837979999949 11.358 47.25721760000078 11.54 48.84607940000061 11.337 46.61372030000044 11.223 41.87833749999976 11.285 47.383933999999805 11.349 53.407655000000624 10.998 55.390802399999735 11.264 56.476085600000324 11.214 56.22239970000069 11.361 48.570433500000455 11.388 50.39604799999931 11.398 56.532095199999574 11.534 43.26653230000054 11.058 47.92510129999965 11.398 50.40528000000058 11.247 51.50340620000027 11.515)
Error minima by case: (0.3797 2 0.116 3 0.4036 10 0.0147 9 0.0646 11 0.2478 5 0.2526 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 8 0.1391 5 0.9153 10 0.7179 4 0.021 4 0.117 2 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 47.97
Average program size in population (points): 48.97
Average percent parens in population: 0.021
Minimum age in population: 192.6092910877746
Maximum age in population: 197.527202921698
Average age in population: 195.5194044816518
Median age in population: 195.5934645469912
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.742
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.742
Total error diversity:				 0.132
Error (vector) diversity:			 0.136
Behavioral diversity:				 0.137
--- Run Statistics ---
Number of program evaluations used so far: 137000
Number of point (instruction) evaluations so far: 180237011
--- Timings ---
Current time: 1529615338806 milliseconds
Total Time:         450.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       206.5 seconds, 45.9%
Fitness Testing:    189.8 seconds, 42.1%
Report:              53.9 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 136
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 137
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 137
;;******************************
;; -*- Number IO problem report - generation 137
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction float_tan} {:instruction tagged_993} {:instruction integer_shove} {:instruction tag_integer_1008} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_yank integer_fromfloat integer_dec float_tan tagged_993 integer_shove tag_integer_1008 in1 integer_yank in2 integer_rot integer_fromfloat float_pop integer_rot integer_fromfloat integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup float_dup_times float_yank integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 1782.3475771999997
Median total errors in population: 288.4934999999999
Error averages by case: (64.8746912000008 10.971 63.6318479999989 11.25 62.68744400000076 11.033 55.85343699999983 11.019 62.22201000000045 12.166 68.07101520000123 11.484 62.781743200000165 11.42 53.8860580000003 11.397 67.4462321999997 11.424 56.159374200001395 11.555 56.31416760000103 11.358 55.572635600000645 11.27 50.86806249999928 11.322 57.2725767999995 11.383 60.71331120000072 11.026 63.83358439999973 11.277 63.479524200000334 11.224 65.69324600000127 11.439 56.03938300000044 11.426 61.6424629999992 11.486 64.75344689999902 11.545 51.64652580000054 11.098 56.914865599999246 11.424 57.37356000000059 11.283 58.80837160000038 11.528)
Error minima by case: (0.3797 1 0.116 1 0.4036 9 0.0147 9 0.0646 11 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 10 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.0346 10)
Average genome size in population (length): 47.404
Average program size in population (points): 48.404
Average percent parens in population: 0.021
Minimum age in population: 194.4024614014317
Maximum age in population: 198.7453799025183
Average age in population: 196.933825652204
Median age in population: 196.9740356146029
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.734
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.734
Total error diversity:				 0.126
Error (vector) diversity:			 0.129
Behavioral diversity:				 0.129
--- Run Statistics ---
Number of program evaluations used so far: 138000
Number of point (instruction) evaluations so far: 181422511
--- Timings ---
Current time: 1529615341800 milliseconds
Total Time:         453.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       208.0 seconds, 45.9%
Fitness Testing:    191.0 seconds, 42.1%
Report:              54.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 137
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 138
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 138
;;******************************
;; -*- Number IO problem report - generation 138
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_1013} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction print_float} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -71} {:instruction float_mod} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dup_times integer_yank integer_fromfloat integer_dec float_tan in2 integer_shove tag_integer_1013 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_pop integer_rot print_float integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_sub float_rot integer_yankdup in2 integer_yankdup integer_max -71 float_mod integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 1843.8089200999993
Median total errors in population: 288.4934999999999
Error averages by case: (66.74873790000062 10.964 68.82254399999891 11.226 64.11823610000052 11.047 56.71592189999982 11.03 67.39036400000043 12.163 72.58426300000112 11.458 67.49051140000014 11.404 52.79602790000039 11.374 67.55818359999945 11.397 57.56970280000138 11.543 61.98545920000116 11.328 57.38762520000062 11.261 54.41139999999944 11.301 57.46758909999943 11.321 61.88898740000081 11.028 68.41172349999974 11.266 64.88184220000038 11.227 65.92220060000108 11.41 57.757620400000555 11.409 61.27731929999912 11.46 69.41811549999927 11.538 53.45813130000065 11.067 58.93664439999915 11.438 62.048640000000695 11.278 63.27412940000037 11.549)
Error minima by case: (0.3797 2 0.884 3 0.4036 8 0.0147 9 0.0646 11 0.7522 5 0.7474 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 10 0.8609 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 47.243
Average program size in population (points): 48.243
Average percent parens in population: 0.021
Minimum age in population: 196.0458084149215
Maximum age in population: 200.4458743760437
Average age in population: 198.3758957543534
Median age in population: 198.4326664625987
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.739
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.739
Total error diversity:				 0.133
Error (vector) diversity:			 0.138
Behavioral diversity:				 0.14
--- Run Statistics ---
Number of program evaluations used so far: 139000
Number of point (instruction) evaluations so far: 182604036
--- Timings ---
Current time: 1529615344996 milliseconds
Total Time:         456.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       209.6 seconds, 45.9%
Fitness Testing:    192.2 seconds, 42.1%
Report:              54.6 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 138
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 139
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 139
;;******************************
;; -*- Number IO problem report - generation 139
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_inc} {:instruction integer_dup_times} {:instruction float_dec} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_dec} {:instruction float_frominteger} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_rot} {:instruction in1} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_sin} {:instruction integer_yankdup} {:instruction -60} {:instruction float_sin} {:instruction float_mult} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -61} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_inc integer_dup_times float_dec integer_dup_times float_dup_items integer_dec float_frominteger integer_stackdepth integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_yank in1 integer_rot float_pop in1 integer_rot integer_rot in1 integer_rot integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth -94 integer_pop float_sin float_mult float_yankdup integer_yankdup in2 integer_yankdup in2 integer_yankdup integer_max -60 float_sin integer_yankdup -60 float_sin float_mult float_yankdup integer_yankdup in2 integer_yankdup integer_max -61 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2181.9180122
Median total errors in population: 288.4934999999999
Error averages by case: (80.73147999999979 10.997 80.49866000000011 11.301 77.89018949999978 11.051 70.39508239999981 11.037 76.7254286000005 12.185 82.62825420000122 11.529 78.29700619999906 11.457 67.60022160000017 11.45 80.12025250000062 11.476 75.44193130000058 11.633 73.00705380000134 11.419 75.0106459000007 11.327 66.36917499999902 11.361 73.1540649999998 11.437 77.95989309999992 11.039 78.81527989999972 11.311 80.8641742999993 11.246 78.24747750000117 11.49 75.25911679999939 11.496 73.95582499999914 11.551 79.53511839999915 11.588 70.62142170000065 11.127 76.503620899999 11.5 73.9654399999998 11.344 73.42119860000038 11.548)
Error minima by case: (0.3797 2 0.116 4 0.4036 9 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 6 0.0125 5 0.2262 2 0.1049 10 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 47.275
Average program size in population (points): 48.275
Average percent parens in population: 0.021
Minimum age in population: 197.3981070577903
Maximum age in population: 201.838093243124
Average age in population: 199.749958585891
Median age in population: 199.7942891858767
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.723
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.723
Total error diversity:				 0.124
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 140000
Number of point (instruction) evaluations so far: 183786411
--- Timings ---
Current time: 1529615348327 milliseconds
Total Time:         459.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       211.4 seconds, 46.0%
Fitness Testing:    193.5 seconds, 42.1%
Report:              55.0 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 139
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 140
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 140
;;******************************
;; -*- Number IO problem report - generation 140
Test total error for best: 11536.10039999998
Test mean error for best: 5.76805
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_sub} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_rot} {:instruction float_max} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_sin} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_yank integer_fromfloat integer_dec integer_fromfloat integer_dup_times float_dup_items float_sub integer_inc integer_dec float_tan integer_dup_times integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 float_pop in1 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_rot float_max float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup in2 integer_yankdup float_sin -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2105.4942582
Median total errors in population: 288.4934999999999
Error averages by case: (75.65772020000006 10.946 78.21104859999971 11.244 73.61282609999996 11.046 66.3414119999998 11.036 77.01943250000048 12.194 81.0162596000012 11.499 75.96626959999924 11.428 66.93096360000031 11.389 80.04310890000043 11.423 68.93477040000128 11.574 71.06461040000129 11.322 68.27398120000076 11.285 65.10317069999913 11.307 70.23070919999958 11.328 71.94111850000054 11.028 77.0261298999997 11.293 75.57391089999963 11.242 78.20908350000117 11.399 69.09467920000023 11.431 74.05691279999904 11.449 77.90997819999913 11.573 64.11278970000063 11.088 69.61803659999917 11.452 72.33710660000011 11.267 73.39822930000042 11.567)
Error minima by case: (0.3797 2 0.116 4 0.0633 9 0.0147 9 0.0646 11 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 4 0.117 4 0.3343 6 0.3646 4 0.4929 5 0.04 5 0.0346 10)
Average genome size in population (length): 47.073
Average program size in population (points): 48.073
Average percent parens in population: 0.021
Minimum age in population: 198.3981070577903
Maximum age in population: 203.2094360945251
Average age in population: 201.1522650667841
Median age in population: 201.2196467761171
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.744
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.744
Total error diversity:				 0.124
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 141000
Number of point (instruction) evaluations so far: 184963661
--- Timings ---
Current time: 1529615351451 milliseconds
Total Time:         463.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       213.0 seconds, 46.0%
Fitness Testing:    194.7 seconds, 42.0%
Report:              55.3 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 140
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 141
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 141
;;******************************
;; -*- Number IO problem report - generation 141
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction integer_fromfloat} {:instruction 69} {:instruction integer_shove} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_1013} {:instruction in1} {:instruction integer_yank} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -60} {:instruction float_inc} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_yank integer_fromfloat 69 integer_shove in2 integer_shove tag_integer_1013 in1 integer_yank in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_yankdup integer_yankdup in2 integer_yankdup float_dup -60 float_inc integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1790.3693528
Median total errors in population: 288.4934999999999
Error averages by case: (65.90813000000041 10.996 64.74154399999892 11.277 61.402277200000285 11.032 53.39527999999983 11.016 64.47952680000031 12.179 67.57604160000086 11.52 62.27924840000014 11.454 51.01186640000031 11.422 63.831547699999504 11.444 59.59747450000119 11.594 56.99019320000083 11.372 59.298026300000636 11.298 51.91823749999942 11.346 56.72242219999965 11.407 60.44306150000075 11.019 63.299915199999745 11.314 63.41809950000032 11.213 62.11465650000082 11.471 59.826540100000464 11.469 57.623994999999226 11.53 64.42676959999945 11.584 55.34491420000053 11.113 60.77338779999944 11.469 58.56748000000057 11.304 60.9867176000004 11.549)
Error minima by case: (0.6203 2 0.116 3 0.3936 8 0.0147 9 0.9354 11 0.2478 5 0.2526 5 0.3972 3 0.4631 3 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 10 0.2821 3 0.021 4 0.117 2 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.9654 11)
Average genome size in population (length): 47.52
Average program size in population (points): 48.52
Average percent parens in population: 0.021
Minimum age in population: 200.2010999257448
Maximum age in population: 204.4124981566036
Average age in population: 202.646028585948
Median age in population: 202.6930893010919
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.72
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.72
Total error diversity:				 0.123
Error (vector) diversity:			 0.127
Behavioral diversity:				 0.128
--- Run Statistics ---
Number of program evaluations used so far: 142000
Number of point (instruction) evaluations so far: 186152036
--- Timings ---
Current time: 1529615354464 milliseconds
Total Time:         466.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       214.5 seconds, 46.0%
Fitness Testing:    195.9 seconds, 42.0%
Report:              55.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 141
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 142
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 142
;;******************************
;; -*- Number IO problem report - generation 142
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction tagged_411} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_frominteger} {:instruction in1} {:instruction float_shove} {:instruction in2} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction -60} {:instruction float_yankdup} {:instruction integer_pop} {:instruction print_integer})
Best program: (float_yank integer_dup_times float_dup_items tagged_411 integer_dec integer_fromfloat integer_dup_times float_dup_items float_frominteger in1 float_shove in2 integer_max integer_fromfloat float_pop in1 integer_rot float_pop in1 float_min integer_fromfloat float_yankdup integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth -94 integer_pop float_sin float_sub integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup -60 float_yankdup integer_pop print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2024.9886666999992
Median total errors in population: 288.4934999999999
Error averages by case: (75.91511390000022 10.973 75.19225599999959 11.25 70.05863780000035 11.036 60.836611099999836 11.016 74.87946220000067 12.179 78.04174100000131 11.498 73.05734199999957 11.448 59.33314560000031 11.404 77.14044620000016 11.45 66.78108120000151 11.624 67.42280060000132 11.363 66.02650690000075 11.292 58.762137499999106 11.31 61.9960413999993 11.358 71.60469320000041 11.023 74.03725359999973 11.289 75.0214434999997 11.24 74.65882280000129 11.419 67.51326420000032 11.459 69.81864299999917 11.488 75.01345849999896 11.567 61.925514400000594 11.093 67.465332499999 11.472 67.87020000000037 11.283 70.53771760000042 11.545)
Error minima by case: (0.3797 2 0.116 2 0.3226 8 0.0147 9 0.0646 10 0.2478 3 0.2526 3 0.3972 3 0.4631 3 0.3017 4 0.1266 2 0.0806 4 0.0125 3 0.2262 2 0.1049 9 0.1391 3 0.0847 9 0.2821 3 0.021 3 0.117 2 0.3343 4 0.3646 3 0.4929 4 0.04 3 0.0346 10)
Average genome size in population (length): 46.825
Average program size in population (points): 47.825
Average percent parens in population: 0.021
Minimum age in population: 201.4103724952317
Maximum age in population: 206.0445696572751
Average age in population: 204.0680113090126
Median age in population: 204.0946246474998
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.743
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.743
Total error diversity:				 0.142
Error (vector) diversity:			 0.143
Behavioral diversity:				 0.144
--- Run Statistics ---
Number of program evaluations used so far: 143000
Number of point (instruction) evaluations so far: 187323136
--- Timings ---
Current time: 1529615357654 milliseconds
Total Time:         469.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       216.0 seconds, 46.0%
Fitness Testing:    197.2 seconds, 42.0%
Report:              56.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 142
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 143
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 143
;;******************************
;; -*- Number IO problem report - generation 143
Test total error for best: 11536.10039999998
Test mean error for best: 5.76805
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction float_inc} {:instruction in1} {:instruction float_shove} {:instruction in2} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction integer_rot} {:instruction float_dup} {:instruction in1} {:instruction float_min} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_yank float_inc in1 float_shove in2 integer_max integer_fromfloat float_pop in1 integer_rot float_pop in1 float_min integer_fromfloat float_yankdup integer_fromfloat float_sin in1 integer_rot float_pop integer_rot float_dup in1 float_min integer_fromfloat float_yankdup integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 1843.6175576999997
Median total errors in population: 288.4934999999999
Error averages by case: (68.02103330000038 10.978 66.60242799999905 11.217 65.85853010000045 11.047 58.30791779999985 11.033 65.14068700000036 12.184 69.74028060000094 11.445 64.48199580000016 11.381 54.03203730000028 11.388 66.53957869999964 11.412 59.45074690000125 11.576 59.77980060000088 11.3 58.69092320000051 11.272 56.30311249999949 11.292 60.36843179999944 11.337 63.845859100000624 11.024 65.74461069999975 11.256 66.91492330000017 11.224 64.52742210000092 11.402 60.66646290000046 11.43 60.10684879999929 11.461 66.94344109999936 11.523 55.27427910000054 11.078 59.993579199999274 11.435 61.14636000000058 11.242 61.660267800000284 11.539)
Error minima by case: (0.3797 2 0.116 2 0.3226 8 0.0147 9 0.0646 10 0.2478 3 0.2526 3 0.3972 3 0.4631 3 0.3017 4 0.1266 2 0.0806 4 0.0125 3 0.2262 2 0.1049 9 0.1391 3 0.0847 10 0.2821 3 0.021 3 0.117 2 0.3343 4 0.3646 3 0.4929 4 0.04 3 0.0346 11)
Average genome size in population (length): 46.037
Average program size in population (points): 47.037
Average percent parens in population: 0.022
Minimum age in population: 202.4103724952317
Maximum age in population: 207.4468651276953
Average age in population: 205.4806734053707
Median age in population: 205.5222212914303
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.117
Error (vector) diversity:			 0.119
Behavioral diversity:				 0.12
--- Run Statistics ---
Number of program evaluations used so far: 144000
Number of point (instruction) evaluations so far: 188474586
--- Timings ---
Current time: 1529615360754 milliseconds
Total Time:         472.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       217.5 seconds, 46.0%
Fitness Testing:    198.4 seconds, 42.0%
Report:              56.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 143
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 144
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 144
;;******************************
;; -*- Number IO problem report - generation 144
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank integer_rot tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup integer_pop float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 1665.5890493999998
Median total errors in population: 288.4934999999999
Error averages by case: (57.30955690000037 10.97 61.73354399999886 11.221 52.84666480000039 11.028 45.36440289999982 11.011 61.89155780000045 12.158 64.82504160000117 11.47 59.53375360000017 11.402 46.91408600000032 11.364 60.97060119999946 11.384 51.78921300000141 11.54 54.41730700000108 11.332 51.361937500000714 11.253 48.11918749999914 11.292 52.63317239999947 11.344 53.49718340000075 11.015 60.51791519999973 11.267 56.3914052000003 11.199 59.30942500000101 11.404 52.274792900000456 11.414 54.93351599999915 11.452 61.69776959999921 11.537 46.94615860000058 11.073 52.99880789999933 11.42 55.2969200000006 11.256 58.70112940000041 11.508)
Error minima by case: (0.6203 2 0.116 3 0.4036 9 0.0147 10 0.9354 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 10 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.9654 10)
Average genome size in population (length): 45.595
Average program size in population (points): 46.595
Average percent parens in population: 0.022
Minimum age in population: 204.0150451856555
Maximum age in population: 208.8652322156354
Average age in population: 206.905508684118
Median age in population: 206.9704621074002
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.131
Error (vector) diversity:			 0.134
Behavioral diversity:				 0.134
--- Run Statistics ---
Number of program evaluations used so far: 145000
Number of point (instruction) evaluations so far: 189615111
--- Timings ---
Current time: 1529615363818 milliseconds
Total Time:         475.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       219.1 seconds, 46.1%
Fitness Testing:    199.6 seconds, 42.0%
Report:              56.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 144
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 145
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 145
;;******************************
;; -*- Number IO problem report - generation 145
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction print_float} {:instruction float_pop} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_mod} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_mod integer_fromfloat integer_dup_times float_dup_items float_yank tag_integer_999 in1 integer_yank in2 integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_pop integer_rot print_float float_pop float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_mod integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1724.0511177000005
Median total errors in population: 288.4934999999999
Error averages by case: (63.51013480000069 10.962 62.13358799999888 11.225 61.98402240000068 11.038 54.01952519999981 11.018 61.7194286000005 12.182 64.37950200000105 11.471 59.057774400000156 11.401 50.53029160000036 11.382 64.49352739999946 11.418 54.01696060000138 11.583 53.95029420000104 11.325 53.31799080000061 11.266 49.313062499999376 11.296 51.56288679999954 11.318 59.43510140000078 11.027 60.28341899999973 11.263 62.67952420000033 11.233 62.49555340000118 11.422 54.84827800000047 11.435 57.8112819999992 11.471 61.5017869999993 11.533 49.633973600000594 11.087 54.747936599999186 11.441 55.65604000000062 11.253 57.38923320000032 11.53)
Error minima by case: (0.6203 2 0.116 4 0.4036 9 0.0147 10 0.9354 11 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 10 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 5 0.9654 10)
Average genome size in population (length): 45.513
Average program size in population (points): 46.513
Average percent parens in population: 0.022
Minimum age in population: 205.0150451856555
Maximum age in population: 210.5095943152212
Average age in population: 208.3803092631373
Median age in population: 208.4383425292612
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.111
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 146000
Number of point (instruction) evaluations so far: 190753611
--- Timings ---
Current time: 1529615366929 milliseconds
Total Time:         478.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       220.7 seconds, 46.1%
Fitness Testing:    200.7 seconds, 41.9%
Report:              57.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 145
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 146
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 146
;;******************************
;; -*- Number IO problem report - generation 146
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_tan} {:instruction tagged_993} {:instruction integer_shove} {:instruction tag_integer_1008} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec float_tan in2 integer_dup_times integer_mult float_yank integer_dup_times integer_dec integer_dec float_tan tagged_993 integer_shove tag_integer_1008 in1 integer_yank in2 integer_rot integer_fromfloat float_pop integer_rot integer_fromfloat integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_mod float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup float_dup_times float_yank integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1875.4735487000003
Median total errors in population: 288.4934999999999
Error averages by case: (67.46575820000068 10.998 66.0615879999988 11.24 69.35965990000047 11.045 61.9956115999998 11.031 63.989352900000604 12.173 67.97751960000123 11.459 63.647774400000166 11.401 56.371072000000396 11.395 71.53276909999977 11.416 62.92483640000184 11.546 58.920573000001255 11.329 62.66388770000072 11.276 53.22129999999915 11.303 59.25601779999917 11.345 67.10085100000083 11.025 64.38130619999971 11.277 69.93571800000002 11.223 69.73796390000126 11.407 61.30315880000055 11.43 65.53646299999907 11.463 65.14177829999915 11.534 57.96505710000068 11.094 64.00119899999892 11.431 60.259040000000695 11.29 61.076292800000395 11.516)
Error minima by case: (0.3797 1 0.884 1 0.4036 9 0.0147 9 0.0646 10 0.7522 2 0.7474 2 0.6028 2 0.5369 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.8951 9 0.8609 2 0.9153 10 0.7179 2 0.021 2 0.117 1 0.6657 3 0.3646 2 0.4929 3 0.04 2 0.0346 10)
Average genome size in population (length): 45.181
Average program size in population (points): 46.181
Average percent parens in population: 0.022
Minimum age in population: 207.0635516704865
Maximum age in population: 211.9606213404123
Average age in population: 209.8146938984956
Median age in population: 209.8605175971364
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.102
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 147000
Number of point (instruction) evaluations so far: 191883811
--- Timings ---
Current time: 1529615369999 milliseconds
Total Time:         481.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       222.2 seconds, 46.1%
Fitness Testing:    202.0 seconds, 41.9%
Report:              57.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 146
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 147
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 147
;;******************************
;; -*- Number IO problem report - generation 147
Test total error for best: 11536.10039999998
Test mean error for best: 5.76805
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in2} {:instruction float_mult} {:instruction integer_mod} {:instruction float_pop} {:instruction float_dup_items} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction float_yankdup} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_add} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_sin} {:instruction -60} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction print_integer})
Best program: (float_dup_times integer_swap integer_dup_times float_dup_items float_yank integer_dup_times in2 float_mult integer_mod float_pop float_dup_items in2 integer_shove tag_integer_999 in1 float_yankdup in2 integer_rot integer_fromfloat in1 integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_add float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup in2 integer_yankdup float_sin -60 float_yankdup integer_yankdup print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1843.1500865
Median total errors in population: 288.4934999999999
Error averages by case: (65.70280640000053 10.951 65.86823999999898 11.216 66.60368080000025 11.045 58.04129469999982 11.028 64.10350420000042 12.168 68.23927180000118 11.445 63.32952180000017 11.392 56.06001600000035 11.366 69.60078939999984 11.386 59.888160700001556 11.553 58.28718040000121 11.325 59.37753980000077 11.251 52.63516249999943 11.287 59.43407719999938 11.321 66.07448110000067 11.024 64.30988889999972 11.247 69.13643829999998 11.236 67.63919540000103 11.393 60.84755510000051 11.416 63.31570799999908 11.448 65.32110969999931 11.517 55.616208400000644 11.073 60.941667299999224 11.425 59.526320000000666 11.262 59.954268600000454 11.521)
Error minima by case: (0.3797 2 0.116 2 0.3936 8 0.0147 9 0.0646 11 0.2478 3 0.2526 3 0.3972 3 0.4631 3 0.3017 5 0.1266 2 0.0806 5 0.0125 3 0.2262 2 0.1049 9 0.1391 3 0.0847 9 0.2821 3 0.021 4 0.117 2 0.3343 4 0.3646 4 0.4929 5 0.04 3 0.0346 11)
Average genome size in population (length): 45.033
Average program size in population (points): 46.033
Average percent parens in population: 0.022
Minimum age in population: 208.7071510156501
Maximum age in population: 213.3611549726571
Average age in population: 211.2837675573162
Median age in population: 211.3339630421959
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.121
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 148000
Number of point (instruction) evaluations so far: 193010186
--- Timings ---
Current time: 1529615372877 milliseconds
Total Time:         484.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       223.6 seconds, 46.2%
Fitness Testing:    203.1 seconds, 41.9%
Report:              57.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 147
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 148
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 148
;;******************************
;; -*- Number IO problem report - generation 148
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -60} {:instruction float_inc} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_dec float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_yankdup integer_yankdup in2 integer_yankdup float_dup -60 float_inc integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 1686.9735815999998
Median total errors in population: 288.4934999999999
Error averages by case: (60.268310700000626 10.954 62.68984799999891 11.192 58.00473960000053 11.036 51.314922099999805 11.029 60.279198600000505 12.141 64.25352840000107 11.387 60.26073280000016 11.339 46.855950400000346 11.331 59.979654699999436 11.358 52.711152400001374 11.489 55.495573000001066 11.271 52.40892140000056 11.235 51.111262499999384 11.25 50.74688679999952 11.295 56.00368870000073 11.026 60.86574979999972 11.212 58.73357610000035 11.214 58.35075770000096 11.372 51.87456840000046 11.384 54.32627099999922 11.416 61.494441099999165 11.447 48.17480020000057 11.062 54.00476779999921 11.386 57.17188000000065 11.229 57.06939940000036 11.468)
Error minima by case: (0.3797 2 0.116 3 0.4036 8 0.0147 9 0.0646 11 0.2478 5 0.2526 5 0.3972 3 0.4631 3 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 10 0.1391 5 0.0847 10 0.2821 3 0.021 4 0.117 2 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 11)
Average genome size in population (length): 44.661
Average program size in population (points): 45.661
Average percent parens in population: 0.022
Minimum age in population: 210.3817779708769
Maximum age in population: 214.9253592529916
Average age in population: 212.7157651442351
Median age in population: 212.7363240064353
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.69
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.69
Total error diversity:				 0.1
Error (vector) diversity:			 0.103
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 149000
Number of point (instruction) evaluations so far: 194127211
--- Timings ---
Current time: 1529615375662 milliseconds
Total Time:         487.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       225.0 seconds, 46.2%
Fitness Testing:    204.2 seconds, 41.9%
Report:              58.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 148
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 149
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 149
;;******************************
;; -*- Number IO problem report - generation 149
Test total error for best: 11536.10039999998
Test mean error for best: 5.76805
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_flush} {:instruction tagged_411} {:instruction integer_dec} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction integer_stackdepth} {:instruction float_tan} {:instruction tagged_993} {:instruction integer_shove} {:instruction tag_integer_1008} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_rot} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction integer_mod} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_yank integer_dup_times integer_flush tagged_411 integer_dec integer_yank integer_fromfloat integer_stackdepth float_tan tagged_993 integer_shove tag_integer_1008 in1 integer_yank in2 integer_rot integer_fromfloat float_pop integer_rot integer_fromfloat integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_rot float_shove float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dec float_stackdepth -94 integer_pop integer_mod float_yankdup integer_yankdup in2 integer_yankdup float_yankdup -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2056.3649564
Median total errors in population: 288.4934999999999
Error averages by case: (74.47049540000003 11.004 75.1304439999997 11.279 74.06223319999985 11.043 67.28053989999981 11.022 73.45714760000055 12.156 76.09972340000127 11.496 72.13006859999942 11.446 63.46949720000033 11.42 76.37591670000027 11.448 68.91069280000112 11.553 67.17553460000131 11.371 68.72864120000065 11.297 63.19696249999908 11.337 68.24859899999946 11.391 72.68015040000013 11.01 72.47622729999972 11.3 75.44820179999952 11.218 74.9323997000013 11.445 69.22309599999988 11.434 70.6436969999992 11.507 73.3621328999992 11.558 65.1488472000006 11.124 70.14394979999899 11.448 69.14832000000021 11.322 70.27343820000041 11.519)
Error minima by case: (0.6203 2 0.116 4 0.4036 9 0.0147 9 0.9354 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 9 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.9654 10)
Average genome size in population (length): 44.917
Average program size in population (points): 45.917
Average percent parens in population: 0.022
Minimum age in population: 211.3817779708769
Maximum age in population: 216.338831856434
Average age in population: 214.1780855700796
Median age in population: 214.2196870393984
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 27
Genome diversity (% unique Plush genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 27
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.109
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 150000
Number of point (instruction) evaluations so far: 195250636
--- Timings ---
Current time: 1529615378619 milliseconds
Total Time:         490.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       226.5 seconds, 46.2%
Fitness Testing:    205.4 seconds, 41.9%
Report:              58.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 149
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 150
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 150
;;******************************
;; -*- Number IO problem report - generation 150
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction tagged_993} {:instruction integer_shove} {:instruction tag_integer_1008} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_mod} {:instruction float_yank} {:instruction -60} {:instruction 31.611240216910147} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_dec integer_fromfloat integer_dup_times integer_yank integer_yank integer_stackdepth tagged_993 integer_shove tag_integer_1008 in1 integer_yank in2 integer_rot integer_fromfloat float_pop integer_rot integer_fromfloat integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_shove float_stackdepth float_sub float_yankdup integer_yankdup in2 integer_yankdup float_mod float_yank -60 31.611240216910147 integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1732.6951342000002
Median total errors in population: 288.4934999999999
Error averages by case: (63.75588940000052 10.989 61.494167999998815 11.209 59.41115120000043 11.037 51.77840269999981 11.012 61.67871800000039 12.179 64.15028060000103 11.439 59.15904780000017 11.403 48.10609400000033 11.357 62.70753289999942 11.389 56.73636260000139 11.559 54.68543360000098 11.304 55.91262330000066 11.247 49.75223749999932 11.28 53.929008399999425 11.338 60.86680860000079 11.009 60.452888899999714 11.261 63.70925580000037 11.207 60.87910200000097 11.374 57.76139310000053 11.422 56.50932299999914 11.423 61.59944109999931 11.504 52.86582040000062 11.083 57.15095169999926 11.42 55.919520000000674 11.231 58.549679600000395 11.498)
Error minima by case: (0.3797 2 0.884 4 0.3216 9 0.0147 9 0.9354 10 0.7522 5 0.7474 5 0.6028 4 0.5369 5 0.3017 5 0.1266 4 0.0806 5 0.0125 5 0.2262 3 0.8951 8 0.8609 5 0.9153 9 0.2821 5 0.021 4 0.117 4 0.6657 6 0.3646 4 0.4929 5 0.04 5 0.9654 10)
Average genome size in population (length): 44.465
Average program size in population (points): 45.465
Average percent parens in population: 0.023
Minimum age in population: 212.5938323289252
Maximum age in population: 217.4184774447601
Average age in population: 215.6181520384324
Median age in population: 215.6355088904473
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.677
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.677
Total error diversity:				 0.102
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.104
--- Run Statistics ---
Number of program evaluations used so far: 151000
Number of point (instruction) evaluations so far: 196362586
--- Timings ---
Current time: 1529615381396 milliseconds
Total Time:         493.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       227.8 seconds, 46.2%
Fitness Testing:    206.4 seconds, 41.9%
Report:              58.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 150
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 151
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 151
;;******************************
;; -*- Number IO problem report - generation 151
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_add} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_flush} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction 77} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_stackdepth} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_sub} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction float_flush} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_add integer_dec integer_dec float_flush integer_fromfloat float_sin float_dup_items integer_yankdup integer_dup_times 77 float_tan in2 integer_shove tag_integer_999 in1 integer_stackdepth integer_shove tag_integer_999 in1 integer_sub in2 integer_rot integer_fromfloat float_pop integer_fromfloat float_pop in1 integer_rot float_pop in1 float_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 float_flush integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 58
Size: 59
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 1995.7922526999994
Median total errors in population: 288.4934999999999
Error averages by case: (73.72348820000042 10.977 74.57328399999938 11.266 69.75653210000046 11.046 61.68504069999982 11.021 73.47204360000066 12.208 77.07675860000133 11.508 71.9320373999998 11.445 59.799845700000354 11.403 73.79096799999981 11.426 64.93053440000168 11.6 66.63492720000157 11.361 64.18147770000067 11.299 60.38514999999883 11.322 65.3401439999992 11.387 68.46175420000064 11.023 73.12286259999972 11.297 71.67983860000002 11.228 71.6777042000013 11.422 65.39397900000053 11.453 67.27349779999916 11.482 74.04244979999896 11.557 60.09186910000065 11.105 65.34111139999902 11.462 67.89996000000052 11.286 69.40199440000042 11.539)
Error minima by case: (0.3797 2 0.116 3 0.3226 8 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 9 0.1391 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 44.009
Average program size in population (points): 45.009
Average percent parens in population: 0.023
Minimum age in population: 214.7397499615875
Maximum age in population: 219.1494167221458
Average age in population: 217.0842411679276
Median age in population: 217.1049231920849
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.119
Error (vector) diversity:			 0.122
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 152000
Number of point (instruction) evaluations so far: 197463361
--- Timings ---
Current time: 1529615384500 milliseconds
Total Time:         496.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       229.2 seconds, 46.2%
Fitness Testing:    207.7 seconds, 41.9%
Report:              59.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 151
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 152
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 152
;;******************************
;; -*- Number IO problem report - generation 152
Test total error for best: 11642.565599999982
Test mean error for best: 5.82128
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction integer_fromfloat} {:instruction integer_flush} {:instruction float_tan} {:instruction in2} {:instruction integer_stackdepth} {:instruction integer_dec} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_dec} {:instruction float_shove} {:instruction integer_max} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction float_max} {:instruction in1} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction print_float} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -61} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_yank integer_fromfloat integer_flush float_tan in2 integer_stackdepth integer_dec float_dup_items float_sub float_yank integer_dup_times integer_dec float_dec float_shove integer_max in1 integer_yank in2 float_mult integer_fromfloat float_max in1 float_sub integer_fromfloat integer_rot float_sin integer_fromfloat integer_rot integer_rot integer_fromfloat float_pop integer_rot print_float integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_stackdepth float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -61 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 1807.9653726
Median total errors in population: 288.4934999999999
Error averages by case: (69.51765360000005 10.953 66.58005199999901 11.201 63.650977400000315 11.028 55.84133119999981 11.021 66.39368700000026 12.172 68.60028060000069 11.442 63.40453220000016 11.396 50.15268280000029 11.354 64.58675429999947 11.388 58.24509540000109 11.547 58.11644640000063 11.299 57.88725020000067 11.245 53.282274999999615 11.277 57.26708719999953 11.306 61.64538210000072 11.013 64.38347159999971 11.255 64.71952730000031 11.224 62.60456410000067 11.389 58.073246000000466 11.404 58.21149299999922 11.43 65.29710679999957 11.52 53.69774860000058 11.068 59.296832999999545 11.414 60.32480000000063 11.234 63.07909480000035 11.526)
Error minima by case: (0.6203 2 0.116 2 0.3226 8 0.0147 9 0.9354 10 0.2478 3 0.2526 3 0.3972 3 0.4631 3 0.3017 5 0.1266 2 0.0806 5 0.0125 3 0.2262 2 0.1049 9 0.1391 3 0.0847 10 0.2821 3 0.021 4 0.117 2 0.3343 4 0.3646 4 0.4929 5 0.04 3 0.9654 10)
Average genome size in population (length): 43.638
Average program size in population (points): 44.638
Average percent parens in population: 0.023
Minimum age in population: 216.0372815055493
Maximum age in population: 220.5893734005508
Average age in population: 218.5514896640759
Median age in population: 218.5990555083572
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.713
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.713
Total error diversity:				 0.123
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 153000
Number of point (instruction) evaluations so far: 198554786
--- Timings ---
Current time: 1529615387538 milliseconds
Total Time:         499.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       230.7 seconds, 46.2%
Fitness Testing:    208.9 seconds, 41.9%
Report:              59.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 152
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 153
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 153
;;******************************
;; -*- Number IO problem report - generation 153
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_pop} {:instruction float_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_rot} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction tag_float_499} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_swap} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dup_times float_pop float_yank tag_integer_999 in1 integer_rot in2 integer_rot integer_fromfloat float_pop in1 float_swap float_pop in1 integer_rot integer_fromfloat integer_rot float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup tag_float_499 float_stackdepth -94 integer_pop float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max integer_swap float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 1901.5821066999993
Median total errors in population: 288.4934999999999
Error averages by case: (68.86765840000041 10.972 68.62286399999934 11.23 69.93845400000032 11.052 61.93347639999981 11.033 67.01839500000051 12.176 70.5645196000011 11.461 66.00680560000008 11.408 58.32086640000032 11.356 71.95908459999987 11.381 61.42171520000149 11.548 60.858686800001145 11.322 60.99540210000065 11.256 55.28522499999918 11.293 61.66352959999933 11.354 67.1150785000006 11.02 66.79030619999972 11.266 70.04332050000006 11.238 70.10237440000117 11.398 62.01137910000048 11.411 65.81887799999919 11.427 67.78111259999925 11.529 57.199798400000596 11.077 62.53285129999914 11.429 62.071680000000605 11.265 63.23764500000036 11.519)
Error minima by case: (0.3797 1 0.116 1 0.4036 9 0.0147 9 0.0646 10 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 9 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.0346 10)
Average genome size in population (length): 43.641
Average program size in population (points): 44.641
Average percent parens in population: 0.023
Minimum age in population: 217.0372815055493
Maximum age in population: 222.0654378270788
Average age in population: 220.0199483952142
Median age in population: 220.0903475401682
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.703
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.703
Total error diversity:				 0.108
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 154000
Number of point (instruction) evaluations so far: 199646411
--- Timings ---
Current time: 1529615390381 milliseconds
Total Time:         502.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       232.2 seconds, 46.2%
Fitness Testing:    210.0 seconds, 41.8%
Report:              59.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 153
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 154
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 154
;;******************************
;; -*- Number IO problem report - generation 154
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_shove} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_min} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_inc} {:instruction -61} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction print_integer})
Best program: (integer_dec float_shove float_tan in2 integer_shove tag_integer_999 tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat integer_fromfloat integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_min float_sub float_yankdup integer_yankdup in2 integer_yankdup float_inc -61 float_yankdup integer_yankdup print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 1886.2845937
Median total errors in population: 288.4934999999999
Error averages by case: (67.72754040000055 10.954 68.75139999999915 11.198 67.1125083000004 11.05 58.678269199999825 11.032 67.90690330000062 12.187 72.17774980000128 11.439 67.10954259999993 11.388 55.69672640000036 11.359 70.45423959999988 11.39 59.76948630000162 11.586 62.25618040000137 11.304 59.0668743000007 11.266 56.29418749999899 11.284 59.85425619999919 11.296 66.95594590000057 11.028 68.30655809999973 11.254 70.26917689999998 11.236 68.0260436000011 11.36 61.05305060000054 11.434 63.63602799999915 11.42 69.41112129999902 11.515 55.06244790000065 11.07 60.4453938999991 11.441 63.056840000000676 11.239 63.9261232000005 11.55)
Error minima by case: (0.6203 2 0.116 3 0.4036 9 0.0147 9 0.9354 11 0.2478 4 0.2526 4 0.3972 3 0.4631 3 0.3017 5 0.1266 3 0.0806 5 0.0125 4 0.2262 2 0.1049 10 0.1391 4 0.0847 10 0.2821 4 0.021 4 0.117 2 0.3343 5 0.3646 4 0.4929 5 0.04 4 0.9654 10)
Average genome size in population (length): 43.846
Average program size in population (points): 44.846
Average percent parens in population: 0.023
Minimum age in population: 218.3292931410885
Maximum age in population: 223.335559729322
Average age in population: 221.4450851057043
Median age in population: 221.4823856243793
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.705
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.705
Total error diversity:				 0.121
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 155000
Number of point (instruction) evaluations so far: 200743011
--- Timings ---
Current time: 1529615393186 milliseconds
Total Time:         504.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       233.6 seconds, 46.3%
Fitness Testing:    211.1 seconds, 41.8%
Report:              60.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 154
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 155
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 155
;;******************************
;; -*- Number IO problem report - generation 155
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_rot} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dup_times float_dup_items float_yank tag_integer_999 in1 integer_rot in2 integer_rot integer_fromfloat float_pop in1 integer_fromfloat integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_mod float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup float_dup_times float_yank integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 36
Size: 37
Percent parens: 0.027
--- Population Statistics ---
Average total errors in population: 1859.313621
Median total errors in population: 288.4934999999999
Error averages by case: (68.3506195000004 10.981 66.64425599999895 11.261 69.12523450000043 11.038 60.66552089999982 11.009 65.50931300000036 12.205 70.13325420000105 11.51 64.60908940000016 11.454 52.57795330000031 11.389 69.54378719999964 11.421 60.84088360000147 11.605 59.154927200001026 11.356 59.92994530000072 11.267 50.69514999999957 11.329 55.776906399999596 11.374 67.84585220000066 11.009 65.91127989999971 11.31 71.15653260000015 11.224 67.09473140000104 11.401 61.81010470000049 11.443 62.70598779999916 11.457 67.00011839999925 11.584 56.091942800000595 11.099 61.39905709999923 11.455 59.7830400000006 11.281 60.931133600000386 11.565)
Error minima by case: (0.3797 2 0.116 4 0.3226 8 0.0147 9 0.0646 11 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 9 0.2821 5 0.021 4 0.117 4 0.3343 6 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 44.022
Average program size in population (points): 45.022
Average percent parens in population: 0.023
Minimum age in population: 219.746646924661
Maximum age in population: 224.8607101067348
Average age in population: 222.8564125051766
Median age in population: 222.9026672830739
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.113
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 156000
Number of point (instruction) evaluations so far: 201843961
--- Timings ---
Current time: 1529615395969 milliseconds
Total Time:         507.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       235.0 seconds, 46.3%
Fitness Testing:    212.2 seconds, 41.8%
Report:              60.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 155
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 156
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 156
;;******************************
;; -*- Number IO problem report - generation 156
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction float_yank} {:instruction integer_dec} {:instruction float_mod} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction in1} {:instruction integer_rot} {:instruction tag_float_245} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_swap} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_sin} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_dec float_tan in2 integer_shove integer_dup_times float_dup_items float_yank float_yank integer_dec float_mod in2 integer_shove tag_integer_999 in1 integer_fromfloat float_pop float_yank tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 in1 integer_rot tag_float_245 float_pop in1 integer_rot integer_fromfloat integer_rot integer_swap float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_sin float_yankdup float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup float_yankdup -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2007.6072114999995
Median total errors in population: 288.4934999999999
Error averages by case: (72.97673660000014 10.984 73.30797999999947 11.245 72.00652790000007 11.042 63.693986499999816 11.02 70.37379360000048 12.183 74.5729888000011 11.475 70.29530039999983 11.421 62.596768400000336 11.375 75.59284460000016 11.409 67.84180910000138 11.593 65.51178780000119 11.338 67.09638430000066 11.285 60.27904999999927 11.306 61.68120819999936 11.341 70.93626810000032 11.023 71.02125359999974 11.276 74.00708299999972 11.224 73.29454210000105 11.372 68.91303910000013 11.443 69.17998699999917 11.432 72.01079279999917 11.535 63.96532540000062 11.103 68.91544459999908 11.458 67.22356000000043 11.275 66.64974960000033 11.505)
Error minima by case: (0.3797 2 0.116 3 0.3875 7 0.0147 8 0.0646 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 6 0.0125 4 0.2262 2 0.1049 10 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 6 0.04 4 0.0346 11)
Average genome size in population (length): 44.381
Average program size in population (points): 45.381
Average percent parens in population: 0.023
Minimum age in population: 221.6697036969083
Maximum age in population: 226.2550865623328
Average age in population: 224.2905517952838
Median age in population: 224.3162751617772
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.117
Error (vector) diversity:			 0.12
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 157000
Number of point (instruction) evaluations so far: 202953911
--- Timings ---
Current time: 1529615398844 milliseconds
Total Time:         510.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       236.4 seconds, 46.3%
Fitness Testing:    213.2 seconds, 41.8%
Report:              60.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 156
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 157
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 157
;;******************************
;; -*- Number IO problem report - generation 157
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_div} {:instruction tag_integer_999} {:instruction tag_integer_896} {:instruction in1} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_sub} {:instruction integer_inc} {:instruction integer_dec} {:instruction float_tan} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction float_swap} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_pop} {:instruction in1} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction float_flush} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_min} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_mult} {:instruction integer_yankdup} {:instruction print_integer})
Best program: (float_mod integer_fromfloat integer_dup_times float_dup_items float_mult float_div tag_integer_999 tag_integer_896 in1 in1 integer_yank in2 integer_rot integer_dup_times float_dup_items float_sub integer_inc integer_dec float_tan integer_dup_times integer_dec float_tan float_swap integer_shove tag_integer_999 in1 in1 integer_yank in2 integer_rot integer_fromfloat float_pop float_pop in1 float_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 float_flush integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_min float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -60 float_mult integer_yankdup print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 1909.435597299999
Median total errors in population: 288.4934999999999
Error averages by case: (68.13834050000051 10.991 69.23263199999892 11.262 70.3462792000002 11.022 62.12637349999982 11.008 67.24127680000039 12.149 70.53573220000098 11.482 66.60504780000014 11.427 57.62461880000035 11.43 73.53071559999994 11.454 61.229571300001616 11.602 61.46618040000126 11.369 60.97664010000067 11.305 54.43619999999918 11.321 62.27577939999934 11.365 67.92379580000079 11.014 66.95367089999972 11.277 71.15269239999995 11.23 71.59019540000105 11.451 61.8731235000005 11.464 66.82694199999915 11.507 67.7667956999993 11.534 56.82014540000061 11.117 62.66831739999908 11.481 62.25392000000065 11.313 63.74761120000036 11.518)
Error minima by case: (0.6203 2 0.116 4 0.4036 8 0.0147 9 0.9354 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 9 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.9654 11)
Average genome size in population (length): 43.891
Average program size in population (points): 44.891
Average percent parens in population: 0.023
Minimum age in population: 223.2468402584064
Maximum age in population: 227.6967385225243
Average age in population: 225.734838146892
Median age in population: 225.7456132650866
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.12
Error (vector) diversity:			 0.126
Behavioral diversity:				 0.126
--- Run Statistics ---
Number of program evaluations used so far: 158000
Number of point (instruction) evaluations so far: 204051411
--- Timings ---
Current time: 1529615401986 milliseconds
Total Time:         513.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       237.8 seconds, 46.3%
Fitness Testing:    214.5 seconds, 41.8%
Report:              61.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 157
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 158
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 158
;;******************************
;; -*- Number IO problem report - generation 158
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dec} {:instruction in2} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction float_sub} {:instruction float_tan} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_tan} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dup_times integer_dec in2 in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_mod integer_fromfloat float_add float_pop in1 integer_rot integer_fromfloat integer_rot integer_add integer_stackdepth integer_pop float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_pop float_sin float_sub float_tan integer_yankdup in2 integer_yankdup float_tan -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 1853.1291457999992
Median total errors in population: 288.4934999999999
Error averages by case: (68.26536039999999 10.944 68.48905199999925 11.18 64.09393370000045 11.034 56.06796189999983 11.021 70.83084980000038 12.182 72.29052840000097 11.422 67.10929000000002 11.378 53.56040650000033 11.321 68.74620969999988 11.357 57.23628990000135 11.556 62.136952800000934 11.272 56.47671130000066 11.229 55.5293374999995 11.266 57.05592999999945 11.291 61.932859100000755 11.01 68.34974979999973 11.247 65.09692330000033 11.206 66.52524310000096 11.327 58.69042080000051 11.394 62.238678799999164 11.382 69.5307753999994 11.512 53.105478100000624 11.043 58.220616699999326 11.416 62.25980000000064 11.22 66.51778680000041 11.562)
Error minima by case: (0.3797 2 0.116 3 0.3226 8 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 43.798
Average program size in population (points): 44.798
Average percent parens in population: 0.023
Minimum age in population: 224.4298564942209
Maximum age in population: 229.1246026908256
Average age in population: 227.1902482405228
Median age in population: 227.194228712621
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.716
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.716
Total error diversity:				 0.12
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.122
--- Run Statistics ---
Number of program evaluations used so far: 159000
Number of point (instruction) evaluations so far: 205146536
--- Timings ---
Current time: 1529615404861 milliseconds
Total Time:         516.5 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       239.3 seconds, 46.3%
Fitness Testing:    215.6 seconds, 41.7%
Report:              61.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 158
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 159
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 159
;;******************************
;; -*- Number IO problem report - generation 159
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mult} {:instruction integer_dec} {:instruction in2} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_shove} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -60} {:instruction float_inc} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_mult integer_dec in2 tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_shove in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_yankdup integer_yankdup in2 integer_yankdup float_dup -60 float_inc integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2137.699498399999
Median total errors in population: 288.4934999999999
Error averages by case: (77.15931770000032 10.994 78.10639999999943 11.253 78.99552430000014 11.062 70.84838659999983 11.037 75.84220120000076 12.191 79.39575860000141 11.488 75.09154259999961 11.414 68.63296000000017 11.385 82.37758830000054 11.429 70.58817340000147 11.622 70.25218040000156 11.333 69.86850000000074 11.31 65.95614999999911 11.312 71.51999419999932 11.356 76.88460130000016 11.035 75.82200169999972 11.28 80.07741709999952 11.254 79.87055530000146 11.406 71.67883220000013 11.468 75.70571899999908 11.455 76.82078409999889 11.543 66.19983830000065 11.102 71.27605849999892 11.484 71.95768000000038 11.284 72.73033360000052 11.544)
Error minima by case: (0.3797 2 0.884 3 0.3936 8 0.0147 9 0.0646 11 0.7522 5 0.7474 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 10 0.8609 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 43.67
Average program size in population (points): 44.67
Average percent parens in population: 0.023
Minimum age in population: 226.2174814180596
Maximum age in population: 230.3818892457679
Average age in population: 228.6775886399305
Median age in population: 228.745633592184
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.107
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.113
--- Run Statistics ---
Number of program evaluations used so far: 160000
Number of point (instruction) evaluations so far: 206238711
--- Timings ---
Current time: 1529615407620 milliseconds
Total Time:         519.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       240.8 seconds, 46.4%
Fitness Testing:    216.6 seconds, 41.7%
Report:              61.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 159
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 160
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 160
;;******************************
;; -*- Number IO problem report - generation 160
Test total error for best: 11536.10039999998
Test mean error for best: 5.76805
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_stackdepth} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_sub} {:instruction float_dup_times} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_dup} {:instruction integer_mod} {:instruction float_pop} {:instruction float_dup_items} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction float_yankdup} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_div} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction -94} {:instruction integer_add} {:instruction float_sin} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_sin} {:instruction -60} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction print_integer})
Best program: (integer_stackdepth integer_dec integer_dec float_sub float_dup_times integer_swap integer_dup_times float_dup_items float_yank integer_dup_times in2 integer_dup integer_mod float_pop float_dup_items in2 integer_shove tag_integer_999 in1 float_yankdup in2 integer_rot integer_fromfloat in1 integer_fromfloat integer_rot float_div integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup_times float_stackdepth -94 integer_add float_sin float_sub float_yankdup integer_yankdup in2 integer_yankdup in2 integer_yankdup float_sin -60 float_yankdup integer_yankdup print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 56
Size: 57
Percent parens: 0.018
--- Population Statistics ---
Average total errors in population: 1880.1379808999998
Median total errors in population: 288.4934999999999
Error averages by case: (69.56233270000025 10.963 70.06035599999927 11.217 64.5850725000006 11.039 56.80918239999982 11.011 68.14399630000054 12.153 70.776263000001 11.428 66.71701660000006 11.38 55.71147720000033 11.352 69.1559221999998 11.379 59.96175210000156 11.55 62.08068680000126 11.309 59.18412460000062 11.242 57.10023749999902 11.285 60.52748019999919 11.325 65.65939050000068 11.008 67.43472349999973 11.243 68.6697375000001 11.204 67.01166720000109 11.358 61.34713360000051 11.403 62.88920599999922 11.412 68.1957811999993 11.487 56.02783240000061 11.07 60.64380809999908 11.409 64.35220000000065 11.245 64.57560080000039 11.483)
Error minima by case: (0.6203 2 0.116 3 0.3226 8 0.0147 9 0.9354 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.9654 11)
Average genome size in population (length): 43.111
Average program size in population (points): 44.111
Average percent parens in population: 0.023
Minimum age in population: 227.5362153835567
Maximum age in population: 232.2798434188885
Average age in population: 230.0902069957956
Median age in population: 230.1384009280169
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.108
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 161000
Number of point (instruction) evaluations so far: 207317061
--- Timings ---
Current time: 1529615410620 milliseconds
Total Time:         522.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       242.2 seconds, 46.4%
Fitness Testing:    217.7 seconds, 41.7%
Report:              62.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 160
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 161
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 161
;;******************************
;; -*- Number IO problem report - generation 161
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_sub} {:instruction float_shove} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_fromfloat} {:instruction integer_dec} {:instruction float_swap} {:instruction float_cos} {:instruction integer_min} {:instruction float_pop} {:instruction float_dup_items} {:instruction in2} {:instruction integer_mult} {:instruction tag_integer_999} {:instruction in1} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -60} {:instruction float_inc} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_sub float_shove integer_dup_times float_dup_items integer_fromfloat integer_dec float_swap float_cos integer_min float_pop float_dup_items in2 integer_mult tag_integer_999 in1 in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_yankdup integer_yankdup in2 integer_yankdup float_dup -60 float_inc integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 1994.386866199999
Median total errors in population: 288.4934999999999
Error averages by case: (74.6457713000002 10.968 73.86532799999932 11.243 72.04269500000017 11.047 63.12473899999982 11.021 72.67015860000066 12.149 76.10620140000127 11.464 72.05657379999975 11.411 55.790337200000344 11.388 74.33254029999999 11.434 66.24662020000174 11.604 66.62890160000144 11.348 65.70103210000076 11.276 58.2609499999988 11.3 59.823825199999305 11.341 70.36285980000059 11.018 72.48261829999973 11.261 73.81913539999982 11.24 71.80105430000124 11.406 67.30766810000038 11.45 67.1022389999991 11.472 73.34747589999904 11.525 61.66610520000063 11.101 67.23506509999899 11.473 66.53652000000064 11.303 67.66245140000055 11.525)
Error minima by case: (0.3797 2 0.116 3 0.3936 8 0.0147 9 0.0646 11 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 42.743
Average program size in population (points): 43.743
Average percent parens in population: 0.024
Minimum age in population: 228.6037805086234
Maximum age in population: 233.4906145458954
Average age in population: 231.5479568098122
Median age in population: 231.5898070909381
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.708
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.708
Total error diversity:				 0.103
Error (vector) diversity:			 0.104
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 162000
Number of point (instruction) evaluations so far: 208386136
--- Timings ---
Current time: 1529615413640 milliseconds
Total Time:         525.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       243.7 seconds, 46.4%
Fitness Testing:    218.9 seconds, 41.7%
Report:              62.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 161
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 162
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 162
;;******************************
;; -*- Number IO problem report - generation 162
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction float_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_rot} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction tag_float_834} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction -60} {:instruction float_mod} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec float_stackdepth float_stackdepth float_dup_items float_yank tag_integer_999 in1 integer_rot in2 integer_rot integer_fromfloat float_pop in1 tag_float_834 float_pop in1 integer_rot integer_fromfloat integer_rot float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_sub float_rot integer_yankdup in2 integer_yankdup float_dup_times -60 float_mod integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1861.0712333999993
Median total errors in population: 288.4934999999999
Error averages by case: (67.43183210000046 10.968 65.80647199999902 11.219 67.63022550000031 11.033 59.442964799999835 11.009 66.52576660000048 12.157 69.37451080000106 11.438 64.59327960000016 11.384 54.68413690000029 11.36 70.70717099999992 11.396 59.85657900000145 11.583 59.73130700000114 11.311 59.20541470000061 11.276 52.79019999999927 11.287 58.74701779999936 11.329 67.1167813000006 11.003 65.66586259999973 11.249 70.45969889999995 11.225 68.16531020000106 11.373 61.2131018000005 11.431 63.723478799999256 11.426 66.71744979999919 11.504 55.489276700000616 11.083 60.78283029999919 11.448 59.37192000000062 11.254 62.573645200000364 11.519)
Error minima by case: (0.6203 2 0.116 3 0.4036 8 0.0147 9 0.9354 11 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.9654 10)
Average genome size in population (length): 42.352
Average program size in population (points): 43.352
Average percent parens in population: 0.024
Minimum age in population: 230.3086891961768
Maximum age in population: 234.9605962418928
Average age in population: 232.9784887101379
Median age in population: 233.018076729303
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.121
Error (vector) diversity:			 0.125
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 163000
Number of point (instruction) evaluations so far: 209445536
--- Timings ---
Current time: 1529615416439 milliseconds
Total Time:         528.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       245.1 seconds, 46.4%
Fitness Testing:    220.0 seconds, 41.7%
Report:              62.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 162
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 163
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 163
;;******************************
;; -*- Number IO problem report - generation 163
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction tag_integer_999} {:instruction integer_add} {:instruction in2} {:instruction integer_shove} {:instruction integer_div} {:instruction in1} {:instruction tag_integer_459} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -60} {:instruction float_inc} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -60} {:instruction float_inc} {:instruction float_dup_items} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat tag_integer_999 integer_add in2 integer_shove integer_div in1 tag_integer_459 tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_yankdup integer_yankdup in2 integer_yankdup float_dup -60 float_inc integer_yankdup float_dup -60 float_inc float_dup_items print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2004.886912099999
Median total errors in population: 288.4934999999999
Error averages by case: (73.77122050000001 10.985 72.53447199999931 11.257 74.45982059999987 11.046 66.56121359999983 11.018 71.44165340000059 12.196 75.64952840000122 11.488 70.74177439999985 11.44 59.44966880000033 11.379 74.18009010000009 11.414 66.31006240000158 11.576 65.85009220000128 11.352 65.64842590000079 11.277 58.17447499999906 11.318 65.34871999999933 11.373 72.2932213000003 11.019 71.92574979999974 11.304 75.4112048999996 11.225 71.97220610000109 11.381 66.05408670000048 11.432 67.75815299999908 11.435 72.85544109999917 11.558 61.801916800000605 11.093 66.87584089999919 11.441 66.55716000000062 11.29 67.41871420000045 11.545)
Error minima by case: (0.3797 2 0.884 3 0.3226 8 0.0147 9 0.0646 10 0.7522 5 0.7474 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 9 0.8609 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 42.207
Average program size in population (points): 43.207
Average percent parens in population: 0.024
Minimum age in population: 231.888623984392
Maximum age in population: 236.3470792126332
Average age in population: 234.4242209736067
Median age in population: 234.4848872490079
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.692
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.692
Total error diversity:				 0.12
Error (vector) diversity:			 0.124
Behavioral diversity:				 0.125
--- Run Statistics ---
Number of program evaluations used so far: 164000
Number of point (instruction) evaluations so far: 210501186
--- Timings ---
Current time: 1529615419162 milliseconds
Total Time:         530.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       246.5 seconds, 46.4%
Fitness Testing:    221.0 seconds, 41.6%
Report:              63.2 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 163
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 164
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 164
;;******************************
;; -*- Number IO problem report - generation 164
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_mod} {:instruction integer_swap} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction in1} {:instruction float_cos} {:instruction float_yank} {:instruction integer_dup_times} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction integer_max} {:instruction tag_integer_1194} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -60} {:instruction float_inc} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_add integer_mod integer_swap integer_shove tag_integer_999 in1 in1 float_cos float_yank integer_dup_times integer_dec float_tan in2 integer_max tag_integer_1194 in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_yankdup integer_yankdup in2 integer_yankdup float_dup -60 float_inc integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 46
Size: 47
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 1966.3669043999994
Median total errors in population: 288.4934999999999
Error averages by case: (72.05216680000032 10.93 72.31563199999943 11.19 69.14209720000052 11.025 61.24420069999983 11.011 68.8382322000007 12.121 73.57022780000135 11.41 69.86455299999976 11.361 59.11026560000034 11.335 74.97731700000013 11.366 66.07114570000184 11.518 64.80426860000162 11.284 65.62717180000081 11.23 58.50986249999879 11.252 60.07071639999915 11.278 69.02995140000071 11.009 70.24480999999972 11.203 71.90797179999997 11.207 72.82778100000135 11.351 64.21590780000051 11.379 68.69901299999904 11.387 70.48112999999894 11.461 60.387388400000624 11.059 67.17839149999888 11.405 66.38868000000059 11.241 66.33702220000055 11.458)
Error minima by case: (0.3797 1 0.116 1 0.3226 8 0.0147 9 0.0646 10 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 10 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.0346 10)
Average genome size in population (length): 42.487
Average program size in population (points): 43.487
Average percent parens in population: 0.024
Minimum age in population: 233.3029897825098
Maximum age in population: 237.8965574701645
Average age in population: 235.8130089654676
Median age in population: 235.8586639081556
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.125
Error (vector) diversity:			 0.13
Behavioral diversity:				 0.131
--- Run Statistics ---
Number of program evaluations used so far: 165000
Number of point (instruction) evaluations so far: 211564186
--- Timings ---
Current time: 1529615422106 milliseconds
Total Time:         533.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       247.9 seconds, 46.4%
Fitness Testing:    222.2 seconds, 41.6%
Report:              63.5 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 164
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 165
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 165
;;******************************
;; -*- Number IO problem report - generation 165
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction integer_dec} {:instruction in2} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction float_add} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dec} {:instruction -60} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dup_times integer_dec in2 in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_mod integer_fromfloat float_add float_pop in1 integer_rot integer_fromfloat integer_rot integer_fromfloat float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_dup_items float_dup in2 integer_yankdup in2 integer_yankdup float_dec -60 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1882.2701511999992
Median total errors in population: 288.4934999999999
Error averages by case: (70.37979580000075 10.994 66.29205199999893 11.253 67.65945430000075 11.043 59.39984719999982 11.009 67.9522994000008 12.184 69.62000640000139 11.488 64.43779520000017 11.434 53.38201800000033 11.395 69.11043139999954 11.415 63.848804300001966 11.613 59.63018040000145 11.333 63.10016470000072 11.297 53.55418749999922 11.328 57.245847399999285 11.357 67.63893520000066 11.011 65.86214079999972 11.297 70.89763060000004 11.216 66.59898720000136 11.381 65.10011580000052 11.461 62.422321999999156 11.44 66.96111839999888 11.554 59.53651330000062 11.108 64.43159829999877 11.467 59.96688000000064 11.284 63.33602560000041 11.543)
Error minima by case: (0.6203 2 0.116 4 0.3226 8 0.0147 9 0.9354 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 5 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 4 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.9654 10)
Average genome size in population (length): 42.547
Average program size in population (points): 43.547
Average percent parens in population: 0.024
Minimum age in population: 235.1247164864747
Maximum age in population: 239.1241952882406
Average age in population: 237.2340931131448
Median age in population: 237.2464948622727
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.691
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.691
Total error diversity:				 0.106
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 166000
Number of point (instruction) evaluations so far: 212628686
--- Timings ---
Current time: 1529615424857 milliseconds
Total Time:         536.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       249.3 seconds, 46.5%
Fitness Testing:    223.3 seconds, 41.6%
Report:              63.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 165
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 166
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 166
;;******************************
;; -*- Number IO problem report - generation 166
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_967} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_dup_times float_tan in2 integer_shove tag_integer_967 in1 integer_yank in2 integer_fromfloat integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup float_dup_times float_yank integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 1964.2494413999993
Median total errors in population: 288.4934999999999
Error averages by case: (73.1056401000001 10.97 72.35212399999929 11.224 72.72147610000007 11.046 63.14819709999982 11.022 71.64194280000042 12.163 73.5255284000008 11.443 68.80825879999978 11.387 56.425640100000294 11.342 73.88904179999997 11.381 63.234939200001264 11.571 63.93082620000084 11.315 62.76211050000066 11.269 58.30932499999938 11.292 64.64478899999952 11.317 70.23907580000034 11.014 69.78174979999973 11.249 73.63148339999981 11.246 71.39257580000094 11.38 64.41012320000046 11.424 65.9759657999992 11.412 70.79177539999942 11.514 58.75001270000055 11.068 64.20899759999932 11.44 65.3074400000006 11.264 67.96840280000042 11.539)
Error minima by case: (0.3797 2 0.884 2 0.3226 8 0.0147 9 0.0646 10 0.7522 3 0.7474 3 0.6028 3 0.5369 3 0.3017 4 0.1266 2 0.0806 4 0.0125 3 0.2262 2 0.8951 9 0.8609 3 0.9153 10 0.7179 3 0.021 3 0.117 2 0.6657 4 0.3646 3 0.4929 4 0.04 3 0.0346 11)
Average genome size in population (length): 42.133
Average program size in population (points): 43.133
Average percent parens in population: 0.024
Minimum age in population: 236.4088150290489
Maximum age in population: 240.594226491849
Average age in population: 238.6582292413474
Median age in population: 238.6554497148799
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.707
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.707
Total error diversity:				 0.109
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 167000
Number of point (instruction) evaluations so far: 213682661
--- Timings ---
Current time: 1529615427645 milliseconds
Total Time:         539.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       250.7 seconds, 46.5%
Fitness Testing:    224.3 seconds, 41.6%
Report:              64.1 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 166
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 167
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 167
;;******************************
;; -*- Number IO problem report - generation 167
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction float_tan} {:instruction in2} {:instruction float_mult} {:instruction float_div} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_shove} {:instruction tag_integer_1013} {:instruction float_inc} {:instruction integer_div} {:instruction integer_shove} {:instruction tag_integer_984} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction float_flush} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_dec float_tan in2 float_mult float_div tag_integer_999 in1 integer_shove tag_integer_1013 float_inc integer_div integer_shove tag_integer_984 in1 integer_yank in2 integer_rot integer_fromfloat float_pop integer_rot float_flush integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup integer_yankdup float_yankdup float_dup_times float_yank integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1997.759356199999
Median total errors in population: 288.4934999999999
Error averages by case: (75.31310850000028 11.012 69.3838639999991 11.268 76.30873480000011 11.04 68.08807419999981 11.012 70.52358880000058 12.186 72.11026300000123 11.501 67.37305820000012 11.449 59.6817404000003 11.39 76.98968240000005 11.423 67.3211388000014 11.591 62.4132060000011 11.353 66.63449490000066 11.281 56.033374999999296 11.336 62.65313659999938 11.402 73.85353010000033 11.015 68.51372349999971 11.307 77.08428529999973 11.224 74.62109420000117 11.389 68.44518310000036 11.447 70.28166599999919 11.444 69.61511549999915 11.563 63.51471600000063 11.101 67.9450226999992 11.458 63.00284000000065 11.293 66.02571420000038 11.544)
Error minima by case: (0.6203 2 0.116 4 0.3936 8 0.0147 9 0.9354 10 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 5 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 4 0.117 4 0.3343 7 0.3646 4 0.4929 5 0.04 5 0.9654 10)
Average genome size in population (length): 42.11
Average program size in population (points): 43.11
Average percent parens in population: 0.024
Minimum age in population: 237.7129235239449
Maximum age in population: 242.3600796265115
Average age in population: 240.1151374533581
Median age in population: 240.1428612877528
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.701
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.701
Total error diversity:				 0.092
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.098
--- Run Statistics ---
Number of program evaluations used so far: 168000
Number of point (instruction) evaluations so far: 214736061
--- Timings ---
Current time: 1529615430545 milliseconds
Total Time:         542.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       252.3 seconds, 46.5%
Fitness Testing:    225.4 seconds, 41.6%
Report:              64.4 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 167
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 168
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 168
;;******************************
;; -*- Number IO problem report - generation 168
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_dup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction 9.897963622249947} {:instruction -60} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dup_times float_dup_items integer_shove tag_integer_999 in1 integer_yank in1 integer_yank in2 integer_rot integer_rot integer_fromfloat float_pop in1 float_pop in1 integer_rot float_mult integer_fromfloat integer_fromfloat integer_rot integer_fromfloat float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_dup in2 integer_yankdup in2 integer_yankdup 9.897963622249947 -60 integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 1551.9375168
Median total errors in population: 288.4934999999999
Error averages by case: (53.66337490000045 10.969 55.230399999998845 11.217 54.75803760000033 11.032 46.520697299999846 11.004 53.52145320000035 12.173 57.54629820000109 11.461 52.27953220000016 11.412 44.370918000000316 11.32 58.8933133999995 11.378 47.218818900001025 11.564 46.89395280000071 11.309 46.524670800000685 11.245 42.238274999999646 11.27 45.57761139999966 11.316 52.62482090000073 11.0 53.415497899999735 11.253 55.99192770000032 11.217 56.367915200000944 11.333 48.6789673000005 11.41 51.90126199999921 11.376 54.6427666999994 11.513 42.39547620000061 11.07 48.13667009999962 11.433 48.56584000000061 11.236 50.9660191000004 11.502)
Error minima by case: (0.3797 2 0.116 4 0.3936 8 0.0147 9 0.0646 9 0.2478 6 0.2526 5 0.3972 4 0.4631 5 0.3017 5 0.1266 4 0.0806 5 0.0125 5 0.2262 3 0.1049 10 0.1391 5 0.0847 10 0.2821 5 0.021 4 0.117 4 0.3343 7 0.3646 4 0.4929 5 0.04 5 0.0346 10)
Average genome size in population (length): 41.983
Average program size in population (points): 42.983
Average percent parens in population: 0.024
Minimum age in population: 238.7129235239449
Maximum age in population: 243.3987291383105
Average age in population: 241.6115105140068
Median age in population: 241.6325794170159
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.697
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.697
Total error diversity:				 0.111
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 169000
Number of point (instruction) evaluations so far: 215786061
--- Timings ---
Current time: 1529615433304 milliseconds
Total Time:         545.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       253.7 seconds, 46.5%
Fitness Testing:    226.5 seconds, 41.6%
Report:              64.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 168
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 169
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 169
;;******************************
;; -*- Number IO problem report - generation 169
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction float_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_rot} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction float_swap} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup_times} {:instruction -60} {:instruction float_mod} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec float_stackdepth float_stackdepth float_dup_items float_yank tag_integer_999 in1 integer_rot in2 integer_rot integer_fromfloat float_pop in1 float_swap float_pop in1 integer_rot integer_fromfloat integer_rot float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_sub float_rot integer_yankdup in2 integer_yankdup float_dup_times -60 float_mod integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1632.0794639999997
Median total errors in population: 288.4934999999999
Error averages by case: (59.20787810000051 10.982 58.34851599999894 11.2 56.40243010000044 11.024 49.09627529999982 11.009 58.17955520000036 12.148 59.95651960000085 11.415 55.58529000000017 11.373 46.91828490000033 11.302 59.104316699999465 11.348 50.68165890000116 11.524 51.188686800000866 11.286 49.79784190000056 11.229 46.94422499999942 11.254 50.92495839999945 11.3 55.76283300000071 11.005 56.56830619999974 11.236 58.61328000000033 11.19 57.105780100000885 11.324 52.2553136000005 11.377 53.204188799999244 11.361 57.543112599999425 11.474 46.853680700000595 11.066 50.993526099999464 11.391 52.62688000000062 11.223 55.720126000000356 11.455)
Error minima by case: (0.3797 2 0.116 3 0.3226 8 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 11)
Average genome size in population (length): 41.785
Average program size in population (points): 42.785
Average percent parens in population: 0.024
Minimum age in population: 240.1340077412393
Maximum age in population: 245.0036209230649
Average age in population: 243.0700256959293
Median age in population: 243.1064266936238
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.113
Error (vector) diversity:			 0.115
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 170000
Number of point (instruction) evaluations so far: 216831261
--- Timings ---
Current time: 1529615436095 milliseconds
Total Time:         547.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       255.0 seconds, 46.6%
Fitness Testing:    227.6 seconds, 41.5%
Report:              65.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 169
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 170
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 170
;;******************************
;; -*- Number IO problem report - generation 170
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_mod} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_mult} {:instruction float_div} {:instruction tag_integer_999} {:instruction tag_integer_896} {:instruction in1} {:instruction in1} {:instruction -86} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction print_float} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -71} {:instruction float_mod} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_mod integer_fromfloat integer_dup_times float_dup_items float_mult float_div tag_integer_999 tag_integer_896 in1 in1 -86 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_pop float_pop in1 integer_rot integer_fromfloat float_pop integer_rot print_float integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_sub float_rot integer_yankdup in2 integer_yankdup integer_max -71 float_mod integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 47
Size: 48
Percent parens: 0.021
--- Population Statistics ---
Average total errors in population: 1623.9983316999999
Median total errors in population: 288.4934999999999
Error averages by case: (58.204946800000485 10.992 56.67115199999894 11.218 58.66595040000044 11.041 51.10087799999984 11.017 55.57661720000037 12.157 58.4070328000009 11.415 53.52846980000016 11.362 47.97596440000034 11.36 59.70294989999946 11.39 51.084770800000996 11.514 49.69871240000074 11.303 50.770313200000516 11.248 45.37938749999974 11.279 52.31763699999956 11.325 56.365688700000725 11.018 54.986471599999724 11.249 59.27457610000032 11.208 58.006936700000935 11.391 51.53440400000048 11.393 53.66344099999919 11.443 55.87510679999943 11.481 47.21016120000057 11.09 52.09076619999947 11.394 50.75284000000061 11.254 52.14715720000032 11.464)
Error minima by case: (0.3797 1 0.116 3 0.4036 9 0.0147 10 0.0646 11 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 3 0.1266 4 0.0806 3 0.0125 4 0.2262 2 0.1049 10 0.1391 5 0.0847 10 0.2821 4 0.021 2 0.117 3 0.3343 6 0.3646 2 0.4929 3 0.04 4 0.0346 11)
Average genome size in population (length): 41.245
Average program size in population (points): 42.245
Average percent parens in population: 0.024
Minimum age in population: 241.6064271072886
Maximum age in population: 246.5548812718659
Average age in population: 244.5646230396312
Median age in population: 244.63292495163
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.681
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.681
Total error diversity:				 0.107
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 171000
Number of point (instruction) evaluations so far: 217863211
--- Timings ---
Current time: 1529615438987 milliseconds
Total Time:         550.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       256.5 seconds, 46.6%
Fitness Testing:    228.7 seconds, 41.5%
Report:              65.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 170
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 171
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 171
;;******************************
;; -*- Number IO problem report - generation 171
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction integer_yank} {:instruction integer_stackdepth} {:instruction tagged_993} {:instruction integer_shove} {:instruction tag_integer_1008} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_swap} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_dec integer_fromfloat integer_dup_times integer_yank integer_yank integer_stackdepth tagged_993 integer_shove tag_integer_1008 in1 integer_yank in2 integer_rot integer_fromfloat float_pop integer_rot integer_fromfloat integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup float_dup_times float_yank integer_swap integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 1816.5872248999992
Median total errors in population: 288.4934999999999
Error averages by case: (64.2653082000007 10.99 63.315775999998785 11.227 65.89919620000057 11.035 58.484262399999814 11.002 61.663116500000505 12.154 65.29902400000115 11.445 60.98775360000016 11.388 55.213463200000355 11.359 67.66147939999964 11.386 60.37777400000162 11.538 56.57816760000111 11.31 60.005581000000745 11.281 53.554074999999195 11.292 59.48564479999936 11.371 65.02445400000086 11.004 61.81302799999972 11.255 67.87457800000007 11.209 65.4549240000012 11.38 61.131341800000534 11.418 61.631035999999085 11.428 62.785443999999224 11.494 56.262636400000645 11.105 61.358717799999184 11.438 58.06724000000066 11.26 59.143203000000405 11.481)
Error minima by case: (0.6203 1 0.116 1 0.3226 8 0.0147 9 0.9354 11 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 10 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.9654 10)
Average genome size in population (length): 40.975
Average program size in population (points): 41.975
Average percent parens in population: 0.024
Minimum age in population: 243.1305773022873
Maximum age in population: 248.1693782173927
Average age in population: 245.9979951043663
Median age in population: 246.032851187448
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.698
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.698
Total error diversity:				 0.111
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 172000
Number of point (instruction) evaluations so far: 218888611
--- Timings ---
Current time: 1529615441692 milliseconds
Total Time:         553.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       257.9 seconds, 46.6%
Fitness Testing:    229.7 seconds, 41.5%
Report:              65.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 171
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 172
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 172
;;******************************
;; -*- Number IO problem report - generation 172
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_inc} {:instruction float_tan} {:instruction float_swap} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction in1} {:instruction float_dup_times} {:instruction in2} {:instruction integer_yank} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction print_float} {:instruction float_inc} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_yank} {:instruction -94} {:instruction integer_pop} {:instruction float_sin} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_sin} {:instruction float_yank} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_sin integer_fromfloat integer_dup_times integer_dup_times float_inc float_tan float_swap integer_shove tag_integer_999 in1 in1 float_dup_times in2 integer_yank integer_fromfloat float_pop integer_rot integer_fromfloat print_float float_inc in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup float_dup_times float_yank -94 integer_pop float_sin integer_yankdup float_yankdup float_sin float_yank integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1926.1109937999993
Median total errors in population: 288.4934999999999
Error averages by case: (68.30636290000066 10.962 72.85905199999937 11.211 67.05312990000057 11.042 58.96126249999982 11.028 68.21356360000064 12.134 73.27225420000116 11.413 69.76053219999999 11.367 58.869590000000294 11.336 71.80297469999978 11.374 60.27782370000149 11.547 65.16481340000115 11.304 59.879584400000624 11.249 61.56423749999907 11.263 65.44071859999926 11.305 65.30927200000069 11.026 70.09427989999973 11.228 68.33162560000011 11.214 69.68529550000117 11.351 61.15654810000043 11.399 65.51974759999923 11.404 70.83845269999912 11.479 56.02201000000052 11.07 61.702550199999116 11.426 67.23112000000052 11.253 65.9411926000004 11.468)
Error minima by case: (0.6203 1 0.884 1 0.3226 8 0.0147 9 0.9354 10 0.7522 2 0.7474 2 0.6028 2 0.5369 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.8951 8 0.8609 2 0.9153 9 0.7179 2 0.021 2 0.117 1 0.6657 3 0.3646 2 0.4929 3 0.04 2 0.9654 11)
Average genome size in population (length): 40.584
Average program size in population (points): 41.584
Average percent parens in population: 0.025
Minimum age in population: 244.8194983330547
Maximum age in population: 249.5871601436106
Average age in population: 247.4628177773757
Median age in population: 247.4737235984255
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.101
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 173000
Number of point (instruction) evaluations so far: 219904136
--- Timings ---
Current time: 1529615444714 milliseconds
Total Time:         556.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       259.3 seconds, 46.6%
Fitness Testing:    230.9 seconds, 41.5%
Report:              65.9 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 172
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 173
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 173
;;******************************
;; -*- Number IO problem report - generation 173
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_inc} {:instruction integer_div} {:instruction float_sin} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction integer_inc} {:instruction integer_add} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction in2} {:instruction float_frominteger} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -61} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_inc integer_div float_sin integer_fromfloat integer_dup_times integer_inc integer_add in1 integer_yank in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin in2 float_frominteger integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_stackdepth float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -61 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 45
Size: 46
Percent parens: 0.022
--- Population Statistics ---
Average total errors in population: 1863.3141723999995
Median total errors in population: 288.4934999999999
Error averages by case: (70.1397521000004 11.002 65.63581999999883 11.227 65.84260620000047 11.046 58.71295469999981 11.019 68.16326580000056 12.192 69.24125420000117 11.447 64.29253220000017 11.396 53.88610200000037 11.355 68.25839079999955 11.393 61.621348500001695 11.56 59.91631980000114 11.308 60.750291200000774 11.27 54.729287499999366 11.289 57.632777999999405 11.311 65.02779100000086 11.018 65.7712798999997 11.277 67.87163840000026 11.21 65.9976526000012 11.359 62.94121640000054 11.425 62.11736399999907 11.414 66.89845269999921 11.507 57.80708860000068 11.101 61.92035919999908 11.437 60.257120000000704 11.243 64.56550660000046 11.51)
Error minima by case: (0.3797 2 0.116 3 0.3226 8 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 40.157
Average program size in population (points): 41.157
Average percent parens in population: 0.025
Minimum age in population: 246.6764673971044
Maximum age in population: 251.229115986378
Average age in population: 248.8796427630627
Median age in population: 248.8997850032366
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.688
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.688
Total error diversity:				 0.095
Error (vector) diversity:			 0.098
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 174000
Number of point (instruction) evaluations so far: 220908586
--- Timings ---
Current time: 1529615447486 milliseconds
Total Time:         559.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       260.8 seconds, 46.6%
Fitness Testing:    231.9 seconds, 41.5%
Report:              66.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 173
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 174
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 174
;;******************************
;; -*- Number IO problem report - generation 174
Test total error for best: 11536.10039999998
Test mean error for best: 5.76805
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_shove} {:instruction integer_dec} {:instruction integer_fromfloat} {:instruction in1} {:instruction tag_integer_999} {:instruction in1} {:instruction in2} {:instruction integer_rot} {:instruction tag_integer_999} {:instruction in1} {:instruction float_min} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_div} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_add} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction print_integer})
Best program: (integer_shove integer_dec integer_fromfloat in1 tag_integer_999 in1 in2 integer_rot tag_integer_999 in1 float_min in2 integer_rot integer_fromfloat float_div in1 integer_rot integer_fromfloat integer_rot float_add integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1474.1434336999996
Median total errors in population: 288.4934999999999
Error averages by case: (52.031347200000155 10.946 53.77375999999874 11.177 50.15609210000008 11.018 43.39654169999982 11.01 51.68682200000006 12.108 54.78928060000102 11.359 51.18843860000017 11.324 39.31313080000037 11.311 53.57433439999943 11.348 42.578732000000656 11.503 46.45520600000053 11.276 42.057912900000595 11.218 41.82137500000006 11.24 44.90120689999989 11.274 48.80944130000078 11.015 51.538610699999715 11.185 51.06417680000036 11.202 51.41832970000069 11.343 43.43288980000053 11.367 47.10264179999915 11.392 52.30244109999974 11.414 38.274827700000635 11.053 43.655112699999876 11.383 47.8436000000007 11.238 48.822181900000444 11.451)
Error minima by case: (0.6203 2 0.884 3 0.3226 8 0.0147 9 0.9354 10 0.7522 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.8609 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.9654 11)
Average genome size in population (length): 39.938
Average program size in population (points): 40.938
Average percent parens in population: 0.025
Minimum age in population: 247.7531781153357
Maximum age in population: 252.236738105302
Average age in population: 250.2661355867152
Median age in population: 250.3278790419561
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.107
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 175000
Number of point (instruction) evaluations so far: 221907311
--- Timings ---
Current time: 1529615450251 milliseconds
Total Time:         561.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       262.2 seconds, 46.7%
Fitness Testing:    232.9 seconds, 41.5%
Report:              66.7 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 174
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 175
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 175
;;******************************
;; -*- Number IO problem report - generation 175
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_max} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_tan} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -60} {:instruction float_inc} {:instruction float_dup_items} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat float_tan in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_max in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_tan integer_yankdup in2 integer_yankdup float_dup -60 float_inc float_dup_items print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 1925.8036819
Median total errors in population: 288.4934999999999
Error averages by case: (69.42767000000043 10.994 69.48723999999903 11.213 68.86635630000042 11.028 61.28423939999984 11.013 67.76699630000049 12.157 72.31424540000116 11.419 68.24801660000007 11.364 57.07359080000033 11.316 71.4622727999997 11.343 63.29581250000142 11.509 63.80980060000121 11.289 62.77033650000071 11.24 57.950149999999226 11.28 60.30706579999938 11.309 68.28170620000071 11.012 69.10169719999975 11.244 71.0562086000001 11.178 69.17814480000105 11.304 63.5671547000005 11.371 65.49042099999916 11.358 69.70445559999912 11.47 59.3201750000006 11.085 64.06885579999926 11.397 64.43440000000064 11.24 64.92967000000047 11.474)
Error minima by case: (0.3797 2 0.116 4 0.4036 9 0.0147 10 0.0646 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 3 0.0 1 0.1049 10 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 4 0.3343 6 0.3646 4 0.4929 4 0.04 4 0.0346 10)
Average genome size in population (length): 39.823
Average program size in population (points): 40.823
Average percent parens in population: 0.025
Minimum age in population: 248.8495689515988
Maximum age in population: 253.6752900485801
Average age in population: 251.6975741530924
Median age in population: 251.7212910253395
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.102
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 176000
Number of point (instruction) evaluations so far: 222903036
--- Timings ---
Current time: 1529615453082 milliseconds
Total Time:         564.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       263.7 seconds, 46.7%
Fitness Testing:    233.9 seconds, 41.4%
Report:              67.0 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 175
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 176
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 176
;;******************************
;; -*- Number IO problem report - generation 176
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mult} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction integer_dup_times} {:instruction in2} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction print_float} {:instruction float_max} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction print_integer})
Best program: (integer_mult integer_fromfloat integer_add integer_fromfloat integer_dup_times float_dup_items float_yank integer_dup_times in2 integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_pop integer_rot print_float float_max float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_sub float_rot integer_yankdup in2 integer_yankdup integer_max print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 1602.6283200999997
Median total errors in population: 288.4934999999999
Error averages by case: (59.3634017000004 10.987 56.63223999999895 11.2 55.86633360000015 11.035 47.98197319999983 11.009 56.11922960000018 12.126 57.81775860000068 11.396 54.22152180000017 11.353 44.21938620000026 11.318 56.96429689999947 11.344 51.213263300000804 11.484 49.93868680000034 11.263 51.02602430000061 11.238 45.03921250000008 11.259 49.01859519999986 11.288 55.23984480000071 11.003 54.788001699999725 11.23 57.99688880000033 11.18 54.80121630000055 11.322 51.671422300000486 11.37 51.07553189999925 11.368 55.55278409999974 11.442 47.40687150000058 11.087 52.53081839999973 11.397 51.187240000000635 11.237 52.572776600000346 11.447)
Error minima by case: (0.6203 2 0.116 4 0.1004 9 0.0147 9 0.9354 11 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 4 0.1049 10 0.1391 5 0.0847 10 0.2821 5 0.021 4 0.117 4 0.3343 6 0.3646 4 0.4929 5 0.04 5 0.9654 11)
Average genome size in population (length): 39.496
Average program size in population (points): 40.496
Average percent parens in population: 0.025
Minimum age in population: 250.5865814667254
Maximum age in population: 255.2929737161994
Average age in population: 253.1167079128907
Median age in population: 253.1273453868191
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 21
Genome diversity (% unique Plush genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 21
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.095
Error (vector) diversity:			 0.099
Behavioral diversity:				 0.101
--- Run Statistics ---
Number of program evaluations used so far: 177000
Number of point (instruction) evaluations so far: 223890611
--- Timings ---
Current time: 1529615456005 milliseconds
Total Time:         567.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       265.2 seconds, 46.7%
Fitness Testing:    235.1 seconds, 41.4%
Report:              67.3 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 176
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 177
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 177
;;******************************
;; -*- Number IO problem report - generation 177
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction float_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -60} {:instruction float_mod} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items float_yank tag_integer_999 in1 integer_yank in2 integer_fromfloat integer_fromfloat integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup in2 integer_yankdup integer_max -60 float_mod integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1431.7080862999992
Median total errors in population: 288.4934999999999
Error averages by case: (51.29130660000011 10.971 50.725399999999 11.202 50.99152780000005 11.024 42.08451229999982 10.99 45.504661799999845 12.13 49.75802400000041 11.405 45.842290000000155 11.369 40.11532760000032 11.308 55.637512599999454 11.36 43.25317870000055 11.508 40.67858580000021 11.284 42.716157300000575 11.202 35.891412500000385 11.247 41.6377679999998 11.304 50.71988050000075 10.987 46.290888899999736 11.209 54.20030750000034 11.202 53.51515360000053 11.342 43.25021410000047 11.355 48.42207799999923 11.372 47.01610969999996 11.443 38.86558480000056 11.057 44.49846879999994 11.377 43.934920000000595 11.23 42.53681540000034 11.452)
Error minima by case: (0.3797 1 0.116 1 0.3226 8 0.0147 9 0.0646 10 0.2478 2 0.2526 2 0.3972 2 0.4631 2 0.3017 3 0.1266 1 0.0806 3 0.0125 2 0.2262 1 0.1049 9 0.1391 2 0.0847 10 0.2821 2 0.021 2 0.117 1 0.3343 3 0.3646 2 0.4929 3 0.04 2 0.0346 10)
Average genome size in population (length): 39.426
Average program size in population (points): 40.426
Average percent parens in population: 0.025
Minimum age in population: 252.3050012053765
Maximum age in population: 256.5812364091415
Average age in population: 254.5731130089641
Median age in population: 254.5946548707782
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.661
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.661
Total error diversity:				 0.111
Error (vector) diversity:			 0.116
Behavioral diversity:				 0.116
--- Run Statistics ---
Number of program evaluations used so far: 178000
Number of point (instruction) evaluations so far: 224876411
--- Timings ---
Current time: 1529615458714 milliseconds
Total Time:         570.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       266.6 seconds, 46.7%
Fitness Testing:    236.1 seconds, 41.4%
Report:              67.6 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 177
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 178
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 178
;;******************************
;; -*- Number IO problem report - generation 178
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction in1} {:instruction tag_integer_999} {:instruction in1} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_pop} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -60} {:instruction float_inc} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec in1 tag_integer_999 in1 in2 integer_rot integer_fromfloat float_pop in1 in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_pop integer_yankdup in2 integer_yankdup float_dup -60 float_inc integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 32
Size: 33
Percent parens: 0.030
--- Population Statistics ---
Average total errors in population: 1775.3819485
Median total errors in population: 288.4934999999999
Error averages by case: (64.08378990000064 10.988 62.96370399999895 11.217 63.230586900000695 11.025 55.7074516999998 11.001 61.77742340000058 12.135 64.52649320000114 11.404 60.74477440000016 11.355 50.851930400000285 11.343 65.74482809999964 11.381 58.13145110000147 11.496 56.63191440000106 11.285 57.85673180000065 11.245 51.167062499999226 11.269 55.981099399999316 11.326 62.90446930000071 11.004 61.51197539999971 11.242 65.79134830000017 11.196 63.68356410000108 11.353 58.661115900000425 11.378 59.699492999999215 11.392 62.33212419999915 11.461 54.453032900000544 11.101 59.220589199999154 11.393 57.47208000000058 11.237 57.588915000000405 11.437)
Error minima by case: (0.3797 1 0.116 3 0.3226 8 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 3 0.1266 4 0.0806 3 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 10 0.2821 4 0.021 2 0.117 3 0.3343 6 0.3646 2 0.4929 3 0.04 4 0.0346 10)
Average genome size in population (length): 39.196
Average program size in population (points): 40.196
Average percent parens in population: 0.025
Minimum age in population: 253.7397869366305
Maximum age in population: 258.2021739155875
Average age in population: 256.0445451836351
Median age in population: 256.064348089096
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.679
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.679
Total error diversity:				 0.115
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 179000
Number of point (instruction) evaluations so far: 225856486
--- Timings ---
Current time: 1529615461420 milliseconds
Total Time:         573.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       268.0 seconds, 46.8%
Fitness Testing:    237.1 seconds, 41.4%
Report:              67.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 178
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 179
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 179
;;******************************
;; -*- Number IO problem report - generation 179
Test total error for best: 11646.56559999998
Test mean error for best: 5.82328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_tan} {:instruction float_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction print_float} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_add integer_fromfloat float_tan float_dup_items float_pop integer_dup_times integer_yank in2 integer_rot in2 float_pop in1 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_pop integer_rot print_float integer_rot float_sin float_dup_times float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 1781.8726158999996
Median total errors in population: 288.4934999999999
Error averages by case: (66.0123265000007 10.991 63.87463199999882 11.232 63.99602240000059 11.053 56.33755459999981 11.018 62.765488000000545 12.169 64.73401520000102 11.433 61.10679520000017 11.373 52.102824400000344 11.341 66.24632629999945 11.378 57.125753800001384 11.558 56.70130700000104 11.297 56.367668400000596 11.265 51.91819999999935 11.275 55.01455399999933 11.308 62.825045500000776 11.021 61.62458439999971 11.247 65.94828650000035 11.218 63.912349100001116 11.34 58.66427800000051 11.41 59.584175999999154 11.392 62.4867811999992 11.465 53.439702800000596 11.101 57.81793659999923 11.417 57.870920000000645 11.252 60.377088000000434 11.464)
Error minima by case: (0.6203 2 0.116 3 0.4036 10 0.0147 10 0.9354 11 0.7522 5 0.2526 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 10 0.8609 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.9654 11)
Average genome size in population (length): 39.046
Average program size in population (points): 40.046
Average percent parens in population: 0.026
Minimum age in population: 254.7397869366305
Maximum age in population: 259.5219479230413
Average age in population: 257.4709111680109
Median age in population: 257.4915244493591
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.668
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.668
Total error diversity:				 0.103
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.108
--- Run Statistics ---
Number of program evaluations used so far: 180000
Number of point (instruction) evaluations so far: 226832836
--- Timings ---
Current time: 1529615464293 milliseconds
Total Time:         576.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       269.4 seconds, 46.8%
Fitness Testing:    238.3 seconds, 41.4%
Report:              68.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 179
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 180
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 180
;;******************************
;; -*- Number IO problem report - generation 180
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction in1} {:instruction tag_integer_999} {:instruction in1} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -60} {:instruction float_inc} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec in1 tag_integer_999 in1 in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_yankdup integer_yankdup in2 integer_yankdup float_dup -60 float_inc integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 1698.5828427999993
Median total errors in population: 288.4934999999999
Error averages by case: (58.74843320000037 10.964 61.24277599999879 11.201 61.95461780000035 11.03 53.91378339999982 11.003 58.10451260000019 12.15 62.978537200000744 11.413 58.42375360000016 11.366 51.83501000000033 11.327 63.97045689999949 11.362 51.22292540000109 11.547 53.74945920000074 11.283 50.51282240000065 11.248 49.85539999999954 11.264 55.9392181999996 11.327 59.77341260000077 11.002 59.39219339999971 11.231 63.047970400000324 11.209 62.463437600000866 11.337 52.98552010000051 11.398 57.18707699999919 11.377 60.28543819999961 11.482 46.829455700000615 11.058 51.70089729999955 11.414 55.47056000000066 11.241 54.26317460000044 11.498)
Error minima by case: (0.6203 2 0.116 4 0.3216 8 0.0147 9 0.9354 10 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 8 0.1391 5 0.0847 10 0.2821 5 0.021 4 0.117 4 0.3343 6 0.3646 4 0.4929 6 0.04 5 0.9654 11)
Average genome size in population (length): 38.773
Average program size in population (points): 39.773
Average percent parens in population: 0.026
Minimum age in population: 256.3032126478083
Maximum age in population: 260.7799977105247
Average age in population: 258.8237435450708
Median age in population: 258.8168890963583
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.687
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.687
Total error diversity:				 0.109
Error (vector) diversity:			 0.114
Behavioral diversity:				 0.115
--- Run Statistics ---
Number of program evaluations used so far: 181000
Number of point (instruction) evaluations so far: 227802311
--- Timings ---
Current time: 1529615466859 milliseconds
Total Time:         578.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       270.7 seconds, 46.8%
Fitness Testing:    239.3 seconds, 41.4%
Report:              68.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 180
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 181
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 181
;;******************************
;; -*- Number IO problem report - generation 181
Test total error for best: 11785.511599999978
Test mean error for best: 5.89276
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_yank} {:instruction float_dup_items} {:instruction float_pop} {:instruction integer_dup_times} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction in2} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -60} {:instruction float_inc} {:instruction float_dup_items} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_add integer_fromfloat float_yank float_dup_items float_pop integer_dup_times integer_yank in2 integer_rot in2 float_pop in1 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_pop float_sin float_stackdepth float_frominteger integer_add integer_stackdepth float_dup_times float_flush in2 integer_shove float_stackdepth float_yankdup integer_yankdup in2 integer_yankdup float_dup -60 float_inc float_dup_items print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 1718.7450724
Median total errors in population: 288.4934999999999
Error averages by case: (61.47230020000053 10.988 58.79419599999884 11.21 62.03855480000052 11.034 54.23477979999983 11.004 60.71974640000046 12.158 61.90752840000099 11.408 57.70475360000017 11.36 50.13242720000031 11.343 65.61301079999954 11.373 56.004172800001406 11.553 53.25421880000101 11.285 55.15210690000066 11.249 45.786512499999354 11.272 51.55006579999937 11.318 60.97222920000081 11.007 58.66274979999974 11.247 64.00181260000029 11.184 63.365938600001115 11.336 57.333603100000445 11.403 59.097760999999146 11.401 59.63977539999929 11.476 52.62510180000055 11.082 56.5188096999993 11.404 52.74176000000059 11.247 56.59715720000049 11.482)
Error minima by case: (0.6203 2 0.116 4 0.3936 8 0.0147 9 0.9354 11 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.9654 10)
Average genome size in population (length): 38.729
Average program size in population (points): 39.729
Average percent parens in population: 0.026
Minimum age in population: 257.3032126478083
Maximum age in population: 262.3750610980897
Average age in population: 260.249068664579
Median age in population: 260.2392261288501
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.106
Error (vector) diversity:			 0.108
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 182000
Number of point (instruction) evaluations so far: 228770761
--- Timings ---
Current time: 1529615469614 milliseconds
Total Time:         581.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       272.2 seconds, 46.8%
Fitness Testing:    240.3 seconds, 41.3%
Report:              68.7 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 181
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 182
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 182
;;******************************
;; -*- Number IO problem report - generation 182
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction integer_fromfloat} {:instruction integer_dup_times} {:instruction float_dup_items} {:instruction integer_dup_items} {:instruction float_div} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_mod} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction float_pop} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec integer_fromfloat integer_dup_times float_dup_items integer_dup_items float_div in1 integer_yank in2 integer_mod integer_fromfloat float_dec float_pop float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup float_dup_times float_yank integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 38
Size: 39
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1854.6400706999991
Median total errors in population: 288.4934999999999
Error averages by case: (70.29599730000052 11.019 67.22548799999893 11.238 66.16882640000046 11.04 57.70017679999982 10.996 67.71292020000048 12.169 68.77302400000092 11.454 64.02034200000016 11.412 51.875088000000346 11.362 67.59807529999951 11.403 61.10200640000149 11.596 59.52695280000083 11.313 60.374841000000686 11.281 54.20837499999956 11.289 57.19471859999953 11.321 64.8630207000008 10.986 65.24102799999972 11.272 68.22443140000024 11.209 65.22380630000099 11.376 62.40577370000052 11.445 60.70494899999917 11.419 66.35044399999933 11.513 57.11860740000063 11.098 61.943162999999196 11.452 60.87520000000063 11.26 64.48181540000041 11.508)
Error minima by case: (0.3797 5 0.116 4 0.3226 8 0.0147 9 0.0646 10 0.2478 6 0.2526 5 0.3972 4 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 6 0.0847 9 0.2821 4 0.021 5 0.117 3 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.0346 10)
Average genome size in population (length): 39.014
Average program size in population (points): 40.014
Average percent parens in population: 0.025
Minimum age in population: 259.4654605526588
Maximum age in population: 263.6048860944545
Average age in population: 261.6756921606961
Median age in population: 261.6844488479262
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.111
Error (vector) diversity:			 0.112
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 183000
Number of point (instruction) evaluations so far: 229746286
--- Timings ---
Current time: 1529615472338 milliseconds
Total Time:         584.1 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       273.6 seconds, 46.8%
Fitness Testing:    241.3 seconds, 41.3%
Report:              69.0 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 182
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 183
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 183
;;******************************
;; -*- Number IO problem report - generation 183
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction float_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_rot} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction tagged_119} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec float_stackdepth float_stackdepth float_dup_items float_yank tag_integer_999 in1 integer_rot in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_fromfloat float_mod integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin tagged_119 float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup float_dup_times float_yank integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 1681.5969068999998
Median total errors in population: 288.4934999999999
Error averages by case: (61.96771750000064 11.001 58.199283999998855 11.197 60.673215200000534 11.032 52.67755459999982 11.0 58.482198600000544 12.185 60.57580260000104 11.416 55.858037400000164 11.372 47.948866400000334 11.321 62.25476909999946 11.358 55.06564890000145 11.547 51.5547380000011 11.269 54.24062340000065 11.243 44.068649999999394 11.258 49.92962559999936 11.303 60.4820524000008 10.995 57.357219699999725 11.255 63.419507800000346 11.194 60.166810200001066 11.327 55.615642000000506 11.4 55.95746299999914 11.371 58.274763799999285 11.478 51.23387900000063 11.089 55.74132909999917 11.406 52.59704000000063 11.211 54.56246860000043 11.464)
Error minima by case: (0.6203 2 0.116 4 0.4036 9 0.0147 9 0.9354 11 0.2478 6 0.2526 5 0.3972 4 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 5 0.2262 2 0.1049 8 0.1391 5 0.0847 9 0.2821 4 0.021 5 0.117 3 0.3343 7 0.3646 4 0.4929 6 0.04 5 0.9654 10)
Average genome size in population (length): 38.851
Average program size in population (points): 39.851
Average percent parens in population: 0.026
Minimum age in population: 260.4654605526588
Maximum age in population: 264.9936486648654
Average age in population: 263.1343933638357
Median age in population: 263.140351297076
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.089
Error (vector) diversity:			 0.092
Behavioral diversity:				 0.092
--- Run Statistics ---
Number of program evaluations used so far: 184000
Number of point (instruction) evaluations so far: 230717886
--- Timings ---
Current time: 1529615475091 milliseconds
Total Time:         586.8 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       275.0 seconds, 46.9%
Fitness Testing:    242.4 seconds, 41.3%
Report:              69.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 183
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 184
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 184
;;******************************
;; -*- Number IO problem report - generation 184
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_fromfloat} {:instruction integer_mod} {:instruction float_mult} {:instruction integer_fromfloat} {:instruction integer_yank} {:instruction float_pop} {:instruction tag_integer_999} {:instruction tag_integer_948} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_dec} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_mult} {:instruction float_yank} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_fromfloat integer_mod float_mult integer_fromfloat integer_yank float_pop tag_integer_999 tag_integer_948 tag_integer_999 in1 integer_dec in2 integer_rot integer_fromfloat float_pop in1 float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup float_mult float_yank integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 1582.880319399999
Median total errors in population: 288.4934999999999
Error averages by case: (55.6923409000004 10.967 56.256631999998895 11.165 55.725225500000306 11.033 46.89187659999982 10.996 55.82103840000035 12.183 58.08454600000089 11.392 53.237300400000166 11.338 43.616932000000325 11.3 60.24721929999946 11.348 48.8767755000014 11.593 48.83448480000102 11.225 47.536902700000645 11.227 42.893587499999484 11.228 47.650851799999494 11.262 54.032886200000746 11.0 54.713636999999714 11.227 57.63678360000034 11.209 57.33337630000086 11.283 50.68062080000052 11.406 52.854314999999175 11.328 55.69376669999939 11.457 44.48180750000065 11.046 48.9767344999993 11.409 50.27576000000066 11.18 52.54491840000039 11.488)
Error minima by case: (0.6203 2 0.884 3 0.4036 9 0.0147 9 0.9354 11 0.7522 5 0.7474 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 10 0.8609 5 0.9153 11 0.7179 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.9654 10)
Average genome size in population (length): 38.915
Average program size in population (points): 39.915
Average percent parens in population: 0.026
Minimum age in population: 261.6672982426377
Maximum age in population: 266.5925944884108
Average age in population: 264.6260344877828
Median age in population: 264.7018484946471
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.675
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.675
Total error diversity:				 0.102
Error (vector) diversity:			 0.106
Behavioral diversity:				 0.107
--- Run Statistics ---
Number of program evaluations used so far: 185000
Number of point (instruction) evaluations so far: 231691086
--- Timings ---
Current time: 1529615477989 milliseconds
Total Time:         589.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       276.4 seconds, 46.9%
Fitness Testing:    243.5 seconds, 41.3%
Report:              69.5 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 184
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 185
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 185
;;******************************
;; -*- Number IO problem report - generation 185
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction integer_shove} {:instruction integer_inc} {:instruction integer_div} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_div} {:instruction integer_dup_times} {:instruction integer_add} {:instruction in1} {:instruction integer_shove} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction print_float} {:instruction integer_rot} {:instruction float_sin} {:instruction float_dup_times} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction print_integer})
Best program: (float_yank integer_shove integer_inc integer_div integer_dup_times float_dup_times float_div integer_dup_times integer_add in1 integer_shove in2 integer_rot integer_fromfloat in1 integer_rot integer_fromfloat integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_pop integer_rot print_float integer_rot float_sin float_dup_times float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup integer_max print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 1538.4130234
Median total errors in population: 288.4934999999999
Error averages by case: (55.917988500000305 10.965 54.30183199999916 11.176 56.377694800000235 11.033 47.810975399999826 10.991 52.82995180000022 12.166 56.10232940000065 11.408 51.05211900000016 11.36 40.981560800000224 11.309 59.10725929999949 11.348 46.54741750000074 11.555 46.16800560000043 11.248 45.58034150000027 11.214 39.19650249999999 11.236 44.303522399999615 11.294 54.585909700000606 10.984 52.43709429999974 11.224 58.06175350000033 11.198 56.50685210000059 11.297 47.66739510000048 11.383 51.91558899999943 11.345 53.4318095999996 11.462 41.97005120000047 11.059 46.912546599999594 11.393 47.49656000000058 11.188 48.81796180000013 11.496)
Error minima by case: (0.3797 2 0.884 3 0.3636 8 0.0147 8 0.0646 10 0.7522 5 0.7474 5 0.3972 5 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.8609 5 0.0847 10 0.2821 5 0.021 4 0.117 4 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 38.762
Average program size in population (points): 39.762
Average percent parens in population: 0.026
Minimum age in population: 263.3215216097938
Maximum age in population: 267.9965823419154
Average age in population: 266.0873041338034
Median age in population: 266.1264321404991
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.68
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.68
Total error diversity:				 0.106
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.111
--- Run Statistics ---
Number of program evaluations used so far: 186000
Number of point (instruction) evaluations so far: 232660461
--- Timings ---
Current time: 1529615480673 milliseconds
Total Time:         592.3 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       277.8 seconds, 46.9%
Fitness Testing:    244.5 seconds, 41.3%
Report:              69.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 185
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 186
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 186
;;******************************
;; -*- Number IO problem report - generation 186
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction in1} {:instruction tag_integer_999} {:instruction in1} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -60} {:instruction float_inc} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec in1 tag_integer_999 in1 in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_yankdup integer_yankdup in2 integer_yankdup float_dup -60 float_inc integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 1693.072137099999
Median total errors in population: 288.4934999999999
Error averages by case: (63.50221000000065 11.001 58.573371999999004 11.217 65.4073052000006 11.04 55.890187099999835 10.985 57.19033040000027 12.19 59.93425420000103 11.44 54.48407900000016 11.387 48.32579640000031 11.343 63.852514499999494 11.39 54.24005550000117 11.599 49.98168680000069 11.291 53.05974900000052 11.25 45.73519999999965 11.28 53.02118459999947 11.315 62.88014350000068 10.992 56.282140799999745 11.259 66.6279805000003 11.209 61.03655530000095 11.335 56.027194000000456 11.414 56.25871899999928 11.378 57.36811839999951 11.507 50.17397360000055 11.103 54.43357149999939 11.418 52.58424000000058 11.22 53.119575800000284 11.519)
Error minima by case: (0.3797 3 0.116 4 0.4036 9 0.0147 10 0.0646 11 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 4 0.117 4 0.3343 6 0.3646 4 0.4929 5 0.04 5 0.0346 11)
Average genome size in population (length): 39.471
Average program size in population (points): 40.471
Average percent parens in population: 0.025
Minimum age in population: 265.1244300075069
Maximum age in population: 269.3796418480067
Average age in population: 267.547095087661
Median age in population: 267.5770040691973
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.116
Error (vector) diversity:			 0.117
Behavioral diversity:				 0.118
--- Run Statistics ---
Number of program evaluations used so far: 187000
Number of point (instruction) evaluations so far: 233647411
--- Timings ---
Current time: 1529615483451 milliseconds
Total Time:         595.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       279.3 seconds, 46.9%
Fitness Testing:    245.5 seconds, 41.3%
Report:              70.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 186
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 187
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 187
;;******************************
;; -*- Number IO problem report - generation 187
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction float_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_mod} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction in1} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_rot} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction print_integer})
Best program: (integer_dec float_stackdepth float_stackdepth float_dup_items float_yank tag_integer_999 in1 integer_mod in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_dup_times in1 integer_rot integer_fromfloat float_pop integer_rot in1 integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_sub float_rot integer_yankdup in2 integer_yankdup integer_max print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 1981.3268621999994
Median total errors in population: 288.4934999999999
Error averages by case: (73.17722609999997 10.975 73.16843199999994 11.204 71.8120052 11.05 62.503146699999824 11.009 72.13620120000073 12.199 72.7462366000014 11.454 68.33118299999965 11.406 62.19601000000033 11.311 77.43649970000054 11.378 62.9647679000017 11.57 63.98581340000147 11.288 61.71256580000079 11.233 59.80624999999883 11.257 64.14506579999907 11.302 70.17796080000012 11.0 69.50739269999974 11.253 73.68282319999936 11.247 74.94659130000142 11.325 65.2798342000005 11.381 69.87292999999909 11.344 70.62912709999888 11.512 59.3687356000006 11.064 63.24371729999917 11.397 66.6758400000003 11.212 68.93450660000046 11.515)
Error minima by case: (0.3797 2 0.116 3 0.3226 8 0.0147 9 0.0646 10 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 9 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 11)
Average genome size in population (length): 39.597
Average program size in population (points): 40.597
Average percent parens in population: 0.025
Minimum age in population: 266.1244300075069
Maximum age in population: 270.7555473382787
Average age in population: 268.9726157528442
Median age in population: 269.0743958220714
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.674
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.674
Total error diversity:				 0.104
Error (vector) diversity:			 0.107
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 188000
Number of point (instruction) evaluations so far: 234637411
--- Timings ---
Current time: 1529615486345 milliseconds
Total Time:         598.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       280.9 seconds, 47.0%
Fitness Testing:    246.6 seconds, 41.2%
Report:              70.4 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 187
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 188
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 188
;;******************************
;; -*- Number IO problem report - generation 188
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction float_stackdepth} {:instruction float_stackdepth} {:instruction float_dup_items} {:instruction float_yank} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_rot} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction float_shove} {:instruction integer_rot} {:instruction float_pop} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_yank} {:instruction integer_mod} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction print_integer})
Best program: (integer_dec float_stackdepth float_stackdepth float_dup_items float_yank tag_integer_999 in1 integer_rot in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat float_dup_times in1 integer_rot integer_fromfloat float_pop integer_rot float_shove integer_rot float_pop float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_yank integer_mod integer_yankdup in2 integer_yankdup integer_max print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 1511.0028975000005
Median total errors in population: 288.4934999999999
Error averages by case: (52.86905710000033 10.98 52.83228399999888 11.17 53.9237566000003 11.015 46.201365299999814 10.99 53.35819860000029 12.161 54.36951960000066 11.369 50.07778480000017 11.33 41.91744920000028 11.273 55.641237699999486 11.313 45.55948510000074 11.476 46.04120600000046 11.236 44.44934380000068 11.191 41.488349999999905 11.22 44.11767139999985 11.267 52.41471970000073 10.993 51.37416709999971 11.215 55.263985100000326 11.155 53.330077700000764 11.256 46.77543090000046 11.324 49.675620999999225 11.295 52.15177829999957 11.424 41.950324900000595 11.064 45.57157499999986 11.338 47.647040000000615 11.181 50.3314686000004 11.434)
Error minima by case: (0.6203 2 0.116 4 0.3226 8 0.0147 9 0.9354 10 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 6 0.0125 5 0.2262 4 0.1049 9 0.1391 5 0.0847 10 0.2821 5 0.021 4 0.117 4 0.3343 6 0.3646 4 0.4929 6 0.04 5 0.9654 10)
Average genome size in population (length): 39.962
Average program size in population (points): 40.962
Average percent parens in population: 0.025
Minimum age in population: 267.8420701729847
Maximum age in population: 272.5166095604984
Average age in population: 270.4590269893798
Median age in population: 270.5182681374503
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.096
Error (vector) diversity:			 0.099
Behavioral diversity:				 0.099
--- Run Statistics ---
Number of program evaluations used so far: 189000
Number of point (instruction) evaluations so far: 235636611
--- Timings ---
Current time: 1529615489040 milliseconds
Total Time:         600.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       282.3 seconds, 47.0%
Fitness Testing:    247.6 seconds, 41.2%
Report:              70.8 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 188
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 189
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 189
;;******************************
;; -*- Number IO problem report - generation 189
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction in1} {:instruction tag_integer_999} {:instruction in1} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -61} {:instruction float_inc} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec in1 tag_integer_999 in1 in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_yankdup integer_yankdup in2 integer_yankdup float_dup -61 float_inc integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 1921.2301729999995
Median total errors in population: 288.4934999999999
Error averages by case: (68.18415330000059 10.979 68.37609599999875 11.197 68.69344400000048 11.034 60.697436999999816 11.011 68.65472640000057 12.162 70.95250200000112 11.419 66.71831080000013 11.37 58.45261880000035 11.319 72.35471559999982 11.357 63.28555390000166 11.531 62.50319320000129 11.274 62.40309220000082 11.247 56.7232624999991 11.264 62.252744399999266 11.309 68.65810140000092 11.008 67.82641899999972 11.245 71.58452419999999 11.202 70.14819540000116 11.31 64.0689980000005 11.375 66.07182499999901 11.359 68.81978699999921 11.475 59.28155440000063 11.088 63.86845769999918 11.398 63.077680000000655 11.22 64.95778080000052 11.462)
Error minima by case: (0.3797 2 0.884 3 0.4036 8 0.0147 9 0.0646 11 0.7522 5 0.7474 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 10 0.8609 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 39.34
Average program size in population (points): 40.34
Average percent parens in population: 0.025
Minimum age in population: 269.3871015948123
Maximum age in population: 273.7691782137382
Average age in population: 271.9161153626154
Median age in population: 271.9890918290197
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.105
Error (vector) diversity:			 0.111
Behavioral diversity:				 0.112
--- Run Statistics ---
Number of program evaluations used so far: 190000
Number of point (instruction) evaluations so far: 236620236
--- Timings ---
Current time: 1529615491678 milliseconds
Total Time:         603.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       283.6 seconds, 47.0%
Fitness Testing:    248.6 seconds, 41.2%
Report:              71.1 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 189
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 190
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 190
;;******************************
;; -*- Number IO problem report - generation 190
Test total error for best: 11552.77039999998
Test mean error for best: 5.77639
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction integer_shove} {:instruction tag_integer_1013} {:instruction in1} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_mod} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction print_float} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -61} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction print_integer})
Best program: (integer_yank integer_shove tag_integer_1013 in1 in1 integer_yank in2 integer_rot integer_fromfloat float_mod in1 integer_rot integer_fromfloat float_pop integer_rot print_float integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup float_stackdepth float_sub integer_fromfloat integer_yankdup in2 integer_yankdup integer_max -61 integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 41
Size: 42
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 1673.0258833999997
Median total errors in population: 288.4934999999999
Error averages by case: (60.3431724000004 10.971 59.013167999998934 11.193 61.21251600000029 11.04 53.02514299999982 11.015 56.652813600000144 12.157 60.61849320000083 11.408 56.20178480000016 11.369 48.79776840000032 11.304 62.73697759999948 11.343 53.847245300001 11.534 51.435686800000425 11.279 53.01626540000055 11.238 45.854224999999964 11.266 50.0562089999997 11.274 59.55924840000068 11.008 57.10897539999972 11.231 62.62506520000033 11.194 60.295837400000764 11.288 53.54204700000048 11.382 56.36536799999929 11.356 57.69545559999961 11.477 48.789692200000594 11.081 54.337472099999545 11.398 53.48892000000064 11.236 53.860333600000295 11.504)
Error minima by case: (0.3797 2 0.116 4 0.4036 10 0.0147 9 0.0646 11 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 5 0.2262 2 0.1049 9 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 5 0.0346 11)
Average genome size in population (length): 39.227
Average program size in population (points): 40.227
Average percent parens in population: 0.025
Minimum age in population: 271.0740742686283
Maximum age in population: 275.5369040125827
Average age in population: 273.3438428072195
Median age in population: 273.3757753722454
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.684
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.684
Total error diversity:				 0.101
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.106
--- Run Statistics ---
Number of program evaluations used so far: 191000
Number of point (instruction) evaluations so far: 237600986
--- Timings ---
Current time: 1529615494504 milliseconds
Total Time:         606.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       285.1 seconds, 47.0%
Fitness Testing:    249.7 seconds, 41.2%
Report:              71.3 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 190
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 191
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 191
;;******************************
;; -*- Number IO problem report - generation 191
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction in1} {:instruction tag_integer_999} {:instruction in1} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -61} {:instruction float_max} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_dec in1 tag_integer_999 in1 in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_yankdup integer_yankdup in2 integer_yankdup float_dup -61 float_max integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 31
Size: 32
Percent parens: 0.031
--- Population Statistics ---
Average total errors in population: 1700.8548199999998
Median total errors in population: 288.4934999999999
Error averages by case: (63.41033780000073 11.009 58.43349999999885 11.229 61.503618800000595 11.047 54.460598699999814 11.016 60.1382632000006 12.173 61.54805040000117 11.432 57.04873280000017 11.367 47.66764680000035 11.333 60.42547389999943 11.359 56.701374200001645 11.542 52.71434540000127 11.286 55.91063560000067 11.264 46.978487499999105 11.281 50.73506579999926 11.305 59.797206300000774 11.023 58.28935879999971 11.265 62.64960890000037 11.198 58.134656500001086 11.322 58.24444600000054 11.408 54.618228999999154 11.372 59.2334323999992 11.491 53.159619600000674 11.109 57.04082299999903 11.415 52.7688400000007 11.242 56.2844686000004 11.47)
Error minima by case: (0.3797 2 0.884 3 0.4036 9 0.0147 10 0.0646 11 0.7522 5 0.7474 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 10 0.8609 5 0.9153 11 0.7179 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 38.741
Average program size in population (points): 39.741
Average percent parens in population: 0.026
Minimum age in population: 272.6294358436152
Maximum age in population: 276.7606021231728
Average age in population: 274.8143669022679
Median age in population: 274.8375275282004
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 23
Genome diversity (% unique Plush genomes):	 0.663
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 23
Syntactic diversity (% unique Push programs):	 0.663
Total error diversity:				 0.103
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 192000
Number of point (instruction) evaluations so far: 238569536
--- Timings ---
Current time: 1529615497180 milliseconds
Total Time:         608.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       286.5 seconds, 47.1%
Fitness Testing:    250.6 seconds, 41.2%
Report:              71.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 191
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 192
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 192
;;******************************
;; -*- Number IO problem report - generation 192
Test total error for best: 11526.565599999978
Test mean error for best: 5.76328
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_div} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction integer_rot} {:instruction integer_dec} {:instruction float_sin} {:instruction float_tan} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction float_sub} {:instruction in1} {:instruction integer_max} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction print_integer})
Best program: (float_yank float_dec float_dup_items integer_shove float_div in1 integer_yank in2 integer_rot integer_fromfloat float_pop integer_rot integer_dec float_sin float_tan in2 integer_shove tag_integer_999 tag_integer_999 in1 integer_yank in2 integer_rot float_sub in1 integer_max integer_fromfloat integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 48
Size: 49
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1954.0193704999997
Median total errors in population: 288.4934999999999
Error averages by case: (70.8679425000003 10.97 70.86006799999932 11.204 68.68623050000046 11.051 60.631948999999814 11.019 72.43326580000063 12.185 73.11147560000121 11.422 68.75135239999985 11.382 58.29478240000034 11.327 72.47219899999988 11.361 64.31859070000168 11.544 64.50630700000109 11.27 63.29148510000075 11.267 58.06414999999931 11.255 60.42375659999944 11.294 69.47030610000063 11.009 70.00908819999971 11.253 72.49216329999993 11.213 70.35129850000135 11.314 65.96708350000046 11.407 66.1310699999991 11.357 71.03979859999906 11.493 60.648949100000635 11.108 64.78440279999906 11.411 65.06808000000066 11.222 68.50757580000045 11.498)
Error minima by case: (0.3797 2 0.116 3 0.4036 9 0.0147 10 0.0646 11 0.2478 5 0.2526 5 0.3972 3 0.4631 3 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 8 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 38.88
Average program size in population (points): 39.88
Average percent parens in population: 0.026
Minimum age in population: 273.8913563712519
Maximum age in population: 278.2576663470223
Average age in population: 276.2805541355274
Median age in population: 276.340406474309
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 24
Genome diversity (% unique Plush genomes):	 0.689
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 24
Syntactic diversity (% unique Push programs):	 0.689
Total error diversity:				 0.11
Error (vector) diversity:			 0.113
Behavioral diversity:				 0.114
--- Run Statistics ---
Number of program evaluations used so far: 193000
Number of point (instruction) evaluations so far: 239541536
--- Timings ---
Current time: 1529615500012 milliseconds
Total Time:         611.7 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       288.0 seconds, 47.1%
Fitness Testing:    251.6 seconds, 41.1%
Report:              71.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 192
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 193
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 193
;;******************************
;; -*- Number IO problem report - generation 193
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_yank} {:instruction float_dup_times} {:instruction float_dup_items} {:instruction integer_shove} {:instruction float_div} {:instruction in1} {:instruction integer_yank} {:instruction in1} {:instruction tag_integer_999} {:instruction in1} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction in2} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -60} {:instruction float_inc} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_yank float_dup_times float_dup_items integer_shove float_div in1 integer_yank in1 tag_integer_999 in1 in2 integer_rot integer_fromfloat float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add in2 float_dup_times float_flush in2 integer_shove float_stackdepth float_sub integer_yankdup in2 integer_yankdup float_dup -60 float_inc integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1996.6685291
Median total errors in population: 288.4934999999999
Error averages by case: (76.65134090000026 10.988 72.72979199999924 11.253 72.0781715000003 11.046 63.92212649999983 11.007 72.70323220000063 12.177 73.91545800000115 11.474 69.83833159999998 11.412 56.72498800000031 11.362 74.82417870000002 11.397 66.72789730000154 11.558 64.9505346000013 11.328 66.25203390000073 11.276 57.141012499999064 11.3 61.56251819999923 11.335 71.79926370000048 11.012 70.59420099999973 11.279 75.0526660999998 11.226 72.7033238000012 11.361 68.09171780000032 11.412 67.96059099999914 11.41 71.58747299999906 11.52 63.05649430000058 11.119 67.92472029999912 11.438 65.77344000000058 11.267 68.64602220000044 11.5)
Error minima by case: (0.6203 2 0.884 3 0.4036 9 0.0147 10 0.9354 10 0.7522 5 0.7474 5 0.6028 3 0.5369 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.8951 8 0.8609 5 0.9153 10 0.7179 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.9654 10)
Average genome size in population (length): 39.059
Average program size in population (points): 40.059
Average percent parens in population: 0.026
Minimum age in population: 274.8913563712519
Maximum age in population: 279.797479022826
Average age in population: 277.7419987899177
Median age in population: 277.7730656314321
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.686
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.686
Total error diversity:				 0.114
Error (vector) diversity:			 0.118
Behavioral diversity:				 0.119
--- Run Statistics ---
Number of program evaluations used so far: 194000
Number of point (instruction) evaluations so far: 240518036
--- Timings ---
Current time: 1529615502824 milliseconds
Total Time:         614.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       289.4 seconds, 47.1%
Fitness Testing:    252.7 seconds, 41.1%
Report:              72.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 193
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 194
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 194
;;******************************
;; -*- Number IO problem report - generation 194
Test total error for best: 11536.10039999998
Test mean error for best: 5.76805
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_sub} {:instruction in1} {:instruction tag_integer_1049} {:instruction float_cos} {:instruction integer_fromfloat} {:instruction in1} {:instruction tag_integer_459} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_sin} {:instruction in1} {:instruction integer_rot} {:instruction float_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction in1} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction integer_fromfloat} {:instruction float_dup_times} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -61} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_dec integer_dec integer_dec float_sub in1 tag_integer_1049 float_cos integer_fromfloat in1 tag_integer_459 tag_integer_999 in1 integer_yank in2 integer_rot integer_fromfloat float_sin in1 integer_rot float_rot integer_fromfloat integer_rot in1 in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add integer_fromfloat float_dup_times float_flush in2 integer_shove float_stackdepth integer_yankdup float_stackdepth float_sub float_yankdup integer_yankdup in2 integer_yankdup integer_max -61 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 49
Size: 50
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 1811.28498
Median total errors in population: 288.4934999999999
Error averages by case: (63.72944240000079 10.984 65.24290799999888 11.227 67.0448656000006 11.045 59.291378199999826 11.002 63.448900700000685 12.19 67.46973220000116 11.448 62.47907900000015 11.392 53.90396000000033 11.31 68.38705139999986 11.351 56.63681940000128 11.536 57.95730700000131 11.277 55.654081700000596 11.238 52.710187499999265 11.277 56.86149459999936 11.315 64.94236020000073 11.008 63.975670899999734 11.267 68.12354059999993 11.211 66.01227320000119 11.289 58.810906800000474 11.371 61.80583599999922 11.338 65.13179569999909 11.494 53.177504900000585 11.092 57.038284199999275 11.398 59.20848000000063 11.219 59.47311980000039 11.489)
Error minima by case: (0.6203 2 0.116 4 0.4036 9 0.0147 10 0.9354 11 0.2478 5 0.2526 5 0.3972 5 0.4631 5 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 4 0.8951 10 0.1391 5 0.9153 10 0.2821 5 0.021 4 0.117 4 0.3343 6 0.3646 4 0.4929 5 0.04 5 0.9654 10)
Average genome size in population (length): 39.254
Average program size in population (points): 40.254
Average percent parens in population: 0.025
Minimum age in population: 275.8913563712519
Maximum age in population: 281.0431893945268
Average age in population: 279.18380398399
Median age in population: 279.233433980751
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.672
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.672
Total error diversity:				 0.101
Error (vector) diversity:			 0.102
Behavioral diversity:				 0.103
--- Run Statistics ---
Number of program evaluations used so far: 195000
Number of point (instruction) evaluations so far: 241499511
--- Timings ---
Current time: 1529615505553 milliseconds
Total Time:         617.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       290.8 seconds, 47.1%
Fitness Testing:    253.7 seconds, 41.1%
Report:              72.6 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 194
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 195
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 195
;;******************************
;; -*- Number IO problem report - generation 195
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction integer_shove} {:instruction tag_integer_1013} {:instruction in1} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction tag_integer_724} {:instruction in1} {:instruction integer_yank} {:instruction in1} {:instruction tag_integer_999} {:instruction in1} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup} {:instruction float_yank} {:instruction integer_swap} {:instruction print_integer})
Best program: (integer_yank integer_shove tag_integer_1013 in1 in1 float_dec float_dec float_dup_items integer_yankdup tag_integer_724 in1 integer_yank in1 tag_integer_999 in1 in2 integer_rot integer_fromfloat in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup float_dup float_yank integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 40
Size: 41
Percent parens: 0.024
--- Population Statistics ---
Average total errors in population: 1765.2500562999996
Median total errors in population: 288.4934999999999
Error averages by case: (65.57331150000047 10.995 62.04713999999884 11.206 65.94432320000043 11.046 57.58014299999982 11.008 60.40842600000038 12.178 62.610776200000984 11.433 58.261584200000165 11.38 52.22379640000029 11.344 65.82527279999958 11.379 57.7289606000015 11.588 53.84671240000094 11.283 56.848990800000756 11.258 49.56544999999941 11.264 56.51507799999941 11.32 64.02982880000079 11.002 59.35974979999972 11.251 67.29272640000018 11.207 63.30358060000105 11.35 58.803341000000486 11.421 58.99653799999915 11.387 60.19277539999937 11.494 53.63006740000058 11.088 58.2691069999993 11.428 56.34832000000059 11.226 57.02505680000047 11.483)
Error minima by case: (0.3797 2 0.116 3 0.4036 10 0.0147 10 0.0646 11 0.2478 5 0.2526 5 0.3972 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 2 0.1049 10 0.1391 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.3343 6 0.3646 4 0.4929 5 0.04 4 0.0346 10)
Average genome size in population (length): 38.738
Average program size in population (points): 39.738
Average percent parens in population: 0.026
Minimum age in population: 277.8267829866743
Maximum age in population: 282.5458377036391
Average age in population: 280.6158340837867
Median age in population: 280.677037829897
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.653
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.653
Total error diversity:				 0.104
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 196000
Number of point (instruction) evaluations so far: 242468011
--- Timings ---
Current time: 1529615508189 milliseconds
Total Time:         619.9 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       292.1 seconds, 47.1%
Fitness Testing:    254.7 seconds, 41.1%
Report:              72.9 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 195
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 196
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 196
;;******************************
;; -*- Number IO problem report - generation 196
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_tan} {:instruction integer_mult} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction integer_yank} {:instruction in2} {:instruction float_max} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_cos} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_dup_times float_tan integer_mult integer_shove tag_integer_999 integer_yank in2 float_max integer_fromfloat integer_rot float_pop in1 integer_fromfloat integer_rot float_cos in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup float_dup_times float_yank integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1758.0297884
Median total errors in population: 288.4934999999999
Error averages by case: (65.01465360000059 10.988 61.511371999998985 11.197 65.18682960000046 11.031 56.238495799999825 10.994 61.61723220000036 12.164 63.01700640000097 11.42 58.19833160000017 11.362 50.50982440000034 11.327 66.13293699999947 11.366 57.689357200001304 11.549 53.90706660000087 11.254 56.76382960000059 11.235 48.923299999999536 11.252 51.295208999999545 11.288 63.90131120000073 10.997 59.66814079999973 11.242 67.09569360000035 11.204 63.908067000001 11.336 58.972278000000486 11.397 59.466409999999215 11.39 60.8251183999994 11.472 54.24497360000059 11.083 58.495106999999294 11.406 55.65936000000061 11.201 57.156883800000344 11.476)
Error minima by case: (0.3797 2 0.116 2 0.4036 9 0.0147 9 0.0646 10 0.2478 4 0.2526 2 0.3972 3 0.4631 3 0.3017 5 0.1266 3 0.0806 5 0.0125 3 0.2262 2 0.1049 9 0.1391 3 0.0847 10 0.2821 3 0.021 4 0.117 3 0.3343 4 0.3646 3 0.4929 5 0.04 3 0.0346 10)
Average genome size in population (length): 38.707
Average program size in population (points): 39.707
Average percent parens in population: 0.026
Minimum age in population: 279.5254563350991
Maximum age in population: 284.0439224902833
Average age in population: 282.0385852848711
Median age in population: 282.0592106481965
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.117
Error (vector) diversity:			 0.121
Behavioral diversity:				 0.121
--- Run Statistics ---
Number of program evaluations used so far: 197000
Number of point (instruction) evaluations so far: 243435711
--- Timings ---
Current time: 1529615510927 milliseconds
Total Time:         622.6 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       293.6 seconds, 47.2%
Fitness Testing:    255.7 seconds, 41.1%
Report:              73.2 seconds, 11.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 196
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 197
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 197
;;******************************
;; -*- Number IO problem report - generation 197
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction in2} {:instruction integer_rot} {:instruction float_pop} {:instruction tag_integer_999} {:instruction tag_integer_948} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_dec} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction float_pop} {:instruction in1} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction integer_max} {:instruction -61} {:instruction float_yankdup} {:instruction integer_swap} {:instruction print_integer})
Best program: (in1 in2 integer_rot float_pop tag_integer_999 tag_integer_948 tag_integer_999 in1 integer_dec in2 integer_rot integer_fromfloat float_pop in1 float_pop in1 integer_rot integer_fromfloat integer_rot float_yank float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup integer_max -61 float_yankdup integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 1641.4067012
Median total errors in population: 288.4934999999999
Error averages by case: (57.24512660000049 10.995 57.18181999999886 11.193 59.22284760000062 11.044 51.36442229999982 11.006 57.407445900000425 12.155 57.886793800001186 11.39 53.91702700000016 11.343 47.870044000000334 11.321 60.701547699999466 11.351 52.40036190000146 11.539 49.80559860000107 11.257 51.55309670000068 11.234 45.667499999999244 11.245 52.638065799999325 11.301 58.07062590000078 10.995 54.84177609999973 11.228 61.09094770000034 11.185 58.53722070000113 11.313 53.83951580000052 11.379 54.39276099999917 11.361 55.80910389999916 11.444 48.89934910000061 11.075 53.094663499999236 11.394 51.86920000000063 11.209 53.68683960000041 11.456)
Error minima by case: (0.6203 2 0.116 4 0.4036 10 0.0147 10 0.9354 11 0.2478 6 0.2526 5 0.3972 5 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 4 0.2262 3 0.1049 10 0.1391 5 0.0847 10 0.2821 5 0.021 5 0.117 4 0.3343 7 0.3646 4 0.4929 5 0.04 5 0.9654 11)
Average genome size in population (length): 38.578
Average program size in population (points): 39.578
Average percent parens in population: 0.026
Minimum age in population: 280.5513818864378
Maximum age in population: 285.4076689940407
Average age in population: 283.5357816659851
Median age in population: 283.593930086144
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.676
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.676
Total error diversity:				 0.101
Error (vector) diversity:			 0.105
Behavioral diversity:				 0.105
--- Run Statistics ---
Number of program evaluations used so far: 198000
Number of point (instruction) evaluations so far: 244400211
--- Timings ---
Current time: 1529615513732 milliseconds
Total Time:         625.4 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       295.1 seconds, 47.2%
Fitness Testing:    256.7 seconds, 41.0%
Report:              73.5 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 197
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 198
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 198
;;******************************
;; -*- Number IO problem report - generation 198
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup_times} {:instruction float_tan} {:instruction integer_mult} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction integer_yank} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_cos} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_dup_times float_tan integer_mult integer_shove tag_integer_999 integer_yank in2 integer_fromfloat integer_fromfloat integer_rot float_pop in1 integer_fromfloat integer_rot float_cos in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup float_dup_times float_yank integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 37
Size: 38
Percent parens: 0.026
--- Population Statistics ---
Average total errors in population: 1608.3123803999993
Median total errors in population: 288.4934999999999
Error averages by case: (62.25488290000055 11.016 56.75147199999884 11.218 59.018906700000315 11.035 50.37739109999981 10.99 55.92345440000028 12.157 56.876563600000765 11.416 53.04877440000016 11.378 42.89161810000035 11.337 58.46113039999944 11.38 50.94887040000127 11.558 48.70875080000066 11.306 50.21666090000051 11.245 43.45072499999964 11.267 48.38778019999962 11.315 57.11648040000085 10.993 53.874524199999726 11.241 60.456226200000366 11.197 55.84253980000088 11.328 52.518578800000526 11.406 51.365169799999215 11.365 54.73842659999947 11.468 47.605442900000654 11.085 51.65615639999935 11.416 50.45732000000067 11.243 52.543534400000276 11.461)
Error minima by case: (0.3797 4 0.884 3 0.4036 9 0.0147 10 0.0646 11 0.7522 5 0.7474 5 0.6028 3 0.4631 4 0.3017 5 0.1266 4 0.0806 5 0.0125 4 0.2262 4 0.1049 10 0.8609 5 0.0847 10 0.2821 4 0.021 4 0.117 3 0.6657 6 0.3646 4 0.4929 5 0.04 4 0.0346 11)
Average genome size in population (length): 38.315
Average program size in population (points): 39.315
Average percent parens in population: 0.026
Minimum age in population: 281.9685843335768
Maximum age in population: 287.0647152551796
Average age in population: 284.9623159451937
Median age in population: 285.0282030519315
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.678
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.678
Total error diversity:				 0.091
Error (vector) diversity:			 0.094
Behavioral diversity:				 0.094
--- Run Statistics ---
Number of program evaluations used so far: 199000
Number of point (instruction) evaluations so far: 245358136
--- Timings ---
Current time: 1529615516510 milliseconds
Total Time:         628.2 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       296.7 seconds, 47.2%
Fitness Testing:    257.7 seconds, 41.0%
Report:              73.7 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 198
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 199
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 199
;;******************************
;; -*- Number IO problem report - generation 199
Test total error for best: 11536.10039999998
Test mean error for best: 5.76805
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_div} {:instruction in1} {:instruction integer_mod} {:instruction in1} {:instruction tag_integer_999} {:instruction in1} {:instruction in2} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_dup} {:instruction -61} {:instruction float_add} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_dec float_dec float_dup_items integer_yankdup float_div in1 integer_mod in1 tag_integer_999 in1 in2 integer_rot integer_fromfloat in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_flush in2 integer_shove float_stackdepth float_yankdup integer_yankdup in2 integer_yankdup float_dup -61 float_add integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 1798.2317861999995
Median total errors in population: 288.4934999999999
Error averages by case: (67.35751450000039 11.015 62.49429999999881 11.24 67.00688360000032 11.05 58.86927529999982 10.997 62.83584460000044 12.185 63.85849320000092 11.465 59.54585760000016 11.413 52.307385200000326 11.354 67.43373589999956 11.4 59.31124530000151 11.585 55.06106660000077 11.303 58.45326540000076 11.271 49.74129999999952 11.294 56.7340421999995 11.333 64.84915040000082 10.997 60.56997539999972 11.284 68.08237120000013 11.222 65.093426900001 11.352 60.8710470000005 11.415 60.38030399999912 11.39 61.60512419999942 11.517 55.915692200000606 11.122 59.97467089999929 11.437 56.67400000000064 11.253 59.820814600000496 11.491)
Error minima by case: (0.6203 2 0.116 3 0.4036 9 0.0147 10 0.9354 11 0.2478 5 0.2526 5 0.3972 4 0.4631 5 0.3017 6 0.1266 4 0.0806 6 0.0125 4 0.2262 4 0.1049 9 0.1391 5 0.0847 11 0.2821 5 0.021 5 0.117 4 0.3343 5 0.3646 4 0.4929 6 0.04 4 0.9654 11)
Average genome size in population (length): 37.905
Average program size in population (points): 38.905
Average percent parens in population: 0.026
Minimum age in population: 284.0753099612605
Maximum age in population: 288.4074927017599
Average age in population: 286.4334732809581
Median age in population: 286.4361836477997
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.671
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.671
Total error diversity:				 0.107
Error (vector) diversity:			 0.11
Behavioral diversity:				 0.11
--- Run Statistics ---
Number of program evaluations used so far: 200000
Number of point (instruction) evaluations so far: 246305811
--- Timings ---
Current time: 1529615519352 milliseconds
Total Time:         631.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       298.1 seconds, 47.2%
Fitness Testing:    258.8 seconds, 41.0%
Report:              74.0 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 199
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 200
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 200
;;******************************
;; -*- Number IO problem report - generation 200
Test total error for best: 11515.51159999998
Test mean error for best: 5.75776
;;------------------------------
Outputs of best individual on training cases:
Correct output: 8.6202915281   | Program output: 8             
Correct output: -97.8840430172 | Program output: -97           
Correct output: 0.4036195194   | Program output: 1             
Correct output: 0.9852941304   | Program output: 1             
Correct output: -79.0645977841 | Program output: -80           
Correct output: -130.7521921729 | Program output: -130          
Correct output: -97.7473834665 | Program output: -97           
Correct output: -17.6027584354 | Program output: -17           
Correct output: -28.5368508646 | Program output: -28           
Correct output: 116.3017366635 | Program output: 116           
Correct output: -59.1266212998 | Program output: -59           
Correct output: 123.0806220037 | Program output: 123           
Correct output: -14.0125351796 | Program output: -14           
Correct output: -66.7738289831 | Program output: -67           
Correct output: 32.104882549   | Program output: 33            
Correct output: -98.8609111379 | Program output: -98           
Correct output: 33.0846749945  | Program output: 34            
Correct output: -49.7179285444 | Program output: -49           
Correct output: 109.0210328362 | Program output: 109           
Correct output: -27.1169916465 | Program output: -27           
Correct output: -105.6656770862 | Program output: -105          
Correct output: 70.3646248726  | Program output: 70            
Correct output: 133.4928513203 | Program output: 133           
Correct output: -61.0399967536 | Program output: -61           
Correct output: -65.0346338833 | Program output: -66           
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_min} {:instruction -35.45329704574567} {:instruction in2} {:instruction integer_shove} {:instruction tag_integer_999} {:instruction in1} {:instruction integer_yank} {:instruction in2} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_pop} {:instruction in1} {:instruction integer_rot} {:instruction integer_fromfloat} {:instruction integer_rot} {:instruction float_sin} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction float_stackdepth} {:instruction float_frominteger} {:instruction integer_add} {:instruction float_flush} {:instruction in2} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction in2} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction float_dup_times} {:instruction float_yank} {:instruction integer_swap} {:instruction print_integer})
Best program: (float_min -35.45329704574567 in2 integer_shove tag_integer_999 in1 integer_yank in2 integer_fromfloat integer_rot float_pop in1 integer_rot integer_fromfloat integer_rot float_sin float_stackdepth float_frominteger float_stackdepth float_frominteger integer_add float_flush in2 integer_shove float_stackdepth integer_yankdup in2 integer_yankdup in2 integer_yankdup float_yankdup float_dup_times float_yank integer_swap print_integer)
Errors: [0.6203 11 0.884 11 0.5964 11 0.0147 11 0.9354 12 0.7522 11 0.7474 11 0.6028 11 0.5369 11 0.3017 11 0.1266 11 0.0806 11 0.0125 11 0.2262 11 0.8951 11 0.8609 11 0.9153 11 0.7179 11 0.021 11 0.117 11 0.6657 11 0.3646 11 0.4929 11 0.04 11 0.9654 11]
Total: 288.4934999999999
Mean: 5.76987
Genome size: 35
Size: 36
Percent parens: 0.028
--- Population Statistics ---
Average total errors in population: 1798.8356198999998
Median total errors in population: 288.4934999999999
Error averages by case: (66.83437540000051 11.018 63.37293599999883 11.224 65.21644400000051 11.031 57.86743699999982 11.001 63.22971540000042 12.162 65.08851080000106 11.43 60.694279600000165 11.378 53.009058000000316 11.345 64.95208459999948 11.375 60.06426230000149 11.548 56.508319800000955 11.287 59.20807140000072 11.257 52.58628749999934 11.279 55.80332779999953 11.326 63.47762590000074 11.002 61.91672349999973 11.261 66.31994770000031 11.181 62.79893860000098 11.338 60.72827800000048 11.408 58.97287799999919 11.383 62.699115499999245 11.485 55.31370280000059 11.116 60.556429499999304 11.412 58.33216000000061 11.242 60.32671080000043 11.469)
Error minima by case: (0.3797 9 0.116 10 0.4036 10 0.0147 10 0.0646 10 0.2478 10 0.2526 10 0.3972 10 0.4631 10 0.3017 9 0.1266 9 0.0806 9 0.0125 10 0.2262 11 0.1049 10 0.1391 10 0.0847 10 0.2821 9 0.021 10 0.117 10 0.3343 10 0.3646 9 0.4929 10 0.04 9 0.0346 11)
Average genome size in population (length): 37.607
Average program size in population (points): 38.607
Average percent parens in population: 0.026
Minimum age in population: 285.1241708567895
Maximum age in population: 290.0276530480119
Average age in population: 287.9212896208101
Median age in population: 287.9764948808383
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.664
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.664
Total error diversity:				 0.103
Error (vector) diversity:			 0.109
Behavioral diversity:				 0.109
--- Run Statistics ---
Number of program evaluations used so far: 201000
Number of point (instruction) evaluations so far: 247245986
--- Timings ---
Current time: 1529615522337 milliseconds
Total Time:         634.0 seconds
Initialization:       0.1 seconds,  0.0%
Reproduction:       299.6 seconds, 47.3%
Fitness Testing:    259.9 seconds, 41.0%
Report:              74.4 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 200
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

FAILURE
