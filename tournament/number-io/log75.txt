Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-86.72524413841069 18] -68.72524413841069]
Train Case:   1 | Input/Output: [[-79.38656080819118 -72] -151.38656080819118]
Train Case:   2 | Input/Output: [[-28.59647897014372 -11] -39.59647897014372]
Train Case:   3 | Input/Output: [[-85.65525000230913 -80] -165.65525000230912]
Train Case:   4 | Input/Output: [[78.86370999285947 37] 115.86370999285947]
Train Case:   5 | Input/Output: [[53.281442665863665 53] 106.28144266586366]
Train Case:   6 | Input/Output: [[76.1918465521133 100] 176.1918465521133]
Train Case:   7 | Input/Output: [[21.18501640670783 -39] -17.81498359329217]
Train Case:   8 | Input/Output: [[2.41701210412603 -68] -65.58298789587397]
Train Case:   9 | Input/Output: [[59.63668957878312 -32] 27.63668957878312]
Train Case:  10 | Input/Output: [[-21.57374459271442 2] -19.57374459271442]
Train Case:  11 | Input/Output: [[-47.69575734174018 -99] -146.69575734174018]
Train Case:  12 | Input/Output: [[-78.48566778652616 -15] -93.48566778652616]
Train Case:  13 | Input/Output: [[-70.42576522727286 8] -62.42576522727286]
Train Case:  14 | Input/Output: [[49.38960737295534 -41] 8.38960737295534]
Train Case:  15 | Input/Output: [[-52.563442215643285 -36] -88.56344221564328]
Train Case:  16 | Input/Output: [[-54.111075113464935 83] 28.888924886535065]
Train Case:  17 | Input/Output: [[-39.40451065602532 55] 15.595489343974677]
Train Case:  18 | Input/Output: [[-94.10035766610252 45] -49.100357666102525]
Train Case:  19 | Input/Output: [[-98.14744618037507 -15] -113.14744618037507]
Train Case:  20 | Input/Output: [[32.92204166353878 -52] -19.077958336461222]
Train Case:  21 | Input/Output: [[-76.10680238614322 73] -3.1068023861432152]
Train Case:  22 | Input/Output: [[80.15937833549745 -28] 52.15937833549745]
Train Case:  23 | Input/Output: [[29.39988550356952 99] 128.39988550356952]
Train Case:  24 | Input/Output: [[78.55860497924164 -47] 31.558604979241636]
Test Case:   0 | Input/Output: [[-31.44319174015439 -42] -73.44319174015439]
Test Case:   1 | Input/Output: [[-60.12872846626189 -47] -107.12872846626189]
Test Case:   2 | Input/Output: [[-94.61828742919678 -93] -187.61828742919678]
Test Case:   3 | Input/Output: [[-54.752414523522134 -32] -86.75241452352213]
Test Case:   4 | Input/Output: [[66.62133526504033 71] 137.62133526504033]
Test Case:   5 | Input/Output: [[-54.512118558594594 92] 37.487881441405406]
Test Case:   6 | Input/Output: [[13.98008066192915 2] 15.98008066192915]
Test Case:   7 | Input/Output: [[-18.100763677798753 -44] -62.10076367779875]
Test Case:   8 | Input/Output: [[-13.657305569920283 -21] -34.65730556992028]
Test Case:   9 | Input/Output: [[83.66523587305048 -19] 64.66523587305048]
Test Case:  10 | Input/Output: [[-94.13391019293478 35] -59.13391019293478]
Test Case:  11 | Input/Output: [[39.292164201407786 11] 50.292164201407786]
Test Case:  12 | Input/Output: [[-89.71951748130999 51] -38.71951748130999]
Test Case:  13 | Input/Output: [[-49.96163377922818 -49] -98.96163377922818]
Test Case:  14 | Input/Output: [[-74.75138393117473 30] -44.75138393117473]
Test Case:  15 | Input/Output: [[-31.99348498734213 77] 45.00651501265787]
Test Case:  16 | Input/Output: [[45.794937021376285 -64] -18.205062978623715]
Test Case:  17 | Input/Output: [[-40.17284032547042 -90] -130.17284032547042]
Test Case:  18 | Input/Output: [[65.13353001034804 -68] -2.8664699896519608]
Test Case:  19 | Input/Output: [[91.05580949453667 -84] 7.055809494536675]
Test Case:  20 | Input/Output: [[19.53677894877592 -36] -16.46322105122408]
Test Case:  21 | Input/Output: [[-95.5957309645137 59] -36.595730964513706]
Test Case:  22 | Input/Output: [[31.082513239589815 -12] 19.082513239589815]
Test Case:  23 | Input/Output: [[-20.558531859173172 44] 23.441468140826828]
Test Case:  24 | Input/Output: [[-7.281320604424479 52] 44.71867939557552]
Test Case:  25 | Input/Output: [[-78.36670984319818 -72] -150.36670984319818]
Test Case:  26 | Input/Output: [[-36.960870513750876 11] -25.960870513750876]
Test Case:  27 | Input/Output: [[-2.1995715699589624 -91] -93.19957156995896]
Test Case:  28 | Input/Output: [[-81.87255139772805 -53] -134.87255139772805]
Test Case:  29 | Input/Output: [[56.37299318840704 -49] 7.372993188407037]
Test Case:  30 | Input/Output: [[-22.334498225206218 -57] -79.33449822520622]
Test Case:  31 | Input/Output: [[44.800804635384594 -35] 9.800804635384594]
Test Case:  32 | Input/Output: [[78.89630798681122 92] 170.89630798681122]
Test Case:  33 | Input/Output: [[74.40844426023742 -34] 40.40844426023742]
Test Case:  34 | Input/Output: [[72.14652105276798 -19] 53.14652105276798]
Test Case:  35 | Input/Output: [[-72.95461482057921 -3] -75.95461482057921]
Test Case:  36 | Input/Output: [[74.71634151564808 -57] 17.716341515648082]
Test Case:  37 | Input/Output: [[-42.91471144466996 -84] -126.91471144466996]
Test Case:  38 | Input/Output: [[-65.00445006782275 -100] -165.00445006782275]
Test Case:  39 | Input/Output: [[-50.87491307213477 -12] -62.87491307213477]
Test Case:  40 | Input/Output: [[-24.908193831421684 -88] -112.90819383142168]
Test Case:  41 | Input/Output: [[-98.01515371286061 -16] -114.01515371286061]
Test Case:  42 | Input/Output: [[-1.904485039449753 -58] -59.90448503944975]
Test Case:  43 | Input/Output: [[0.8120974479868437 -8] -7.187902552013156]
Test Case:  44 | Input/Output: [[99.73358933990528 -2] 97.73358933990528]
Test Case:  45 | Input/Output: [[-3.058848811988767 -90] -93.05884881198877]
Test Case:  46 | Input/Output: [[-33.54519672987438 4] -29.545196729874377]
Test Case:  47 | Input/Output: [[-25.801833575684952 -56] -81.80183357568495]
Test Case:  48 | Input/Output: [[10.309149052915117 -60] -49.69085094708488]
Test Case:  49 | Input/Output: [[9.274636997424878 -68] -58.72536300257512]
Test Case:  50 | Input/Output: [[-41.25219476756714 -45] -86.25219476756715]
Test Case:  51 | Input/Output: [[-11.320071504149794 -66] -77.3200715041498]
Test Case:  52 | Input/Output: [[77.61290626489861 -17] 60.61290626489861]
Test Case:  53 | Input/Output: [[-99.80886298584369 -20] -119.80886298584369]
Test Case:  54 | Input/Output: [[-44.28422404939394 49] 4.715775950606059]
Test Case:  55 | Input/Output: [[6.555216019976726 32] 38.555216019976726]
Test Case:  56 | Input/Output: [[-51.256558406804544 54] 2.743441593195456]
Test Case:  57 | Input/Output: [[-91.93160142444667 84] -7.931601424446669]
Test Case:  58 | Input/Output: [[46.801167614315176 95] 141.80116761431518]
Test Case:  59 | Input/Output: [[12.105088827300065 96] 108.10508882730007]
Test Case:  60 | Input/Output: [[-2.5904301105295957 -33] -35.590430110529596]
Test Case:  61 | Input/Output: [[89.52372124931239 10] 99.52372124931239]
Test Case:  62 | Input/Output: [[10.065747205581843 28] 38.06574720558184]
Test Case:  63 | Input/Output: [[10.326113311167461 32] 42.32611331116746]
Test Case:  64 | Input/Output: [[55.08770587121023 -35] 20.087705871210233]
Test Case:  65 | Input/Output: [[2.214191173554056 -66] -63.785808826445944]
Test Case:  66 | Input/Output: [[12.947129251468525 89] 101.94712925146852]
Test Case:  67 | Input/Output: [[-75.32513193855979 37] -38.32513193855979]
Test Case:  68 | Input/Output: [[-26.12710050477456 45] 18.87289949522544]
Test Case:  69 | Input/Output: [[-55.87448248638598 77] 21.12551751361402]
Test Case:  70 | Input/Output: [[-15.034289372929322 -27] -42.03428937292932]
Test Case:  71 | Input/Output: [[-12.905550456632241 1] -11.905550456632241]
Test Case:  72 | Input/Output: [[48.175201110838344 -40] 8.175201110838344]
Test Case:  73 | Input/Output: [[-42.496808840420265 -74] -116.49680884042027]
Test Case:  74 | Input/Output: [[84.85931107325086 -45] 39.859311073250865]
Test Case:  75 | Input/Output: [[-43.31948685253255 -39] -82.31948685253255]
Test Case:  76 | Input/Output: [[-9.3681226723334 -43] -52.3681226723334]
Test Case:  77 | Input/Output: [[42.52601559612984 -41] 1.526015596129838]
Test Case:  78 | Input/Output: [[-41.29733984151134 77] 35.70266015848866]
Test Case:  79 | Input/Output: [[68.89233874148269 59] 127.89233874148269]
Test Case:  80 | Input/Output: [[6.009717764941726 50] 56.009717764941726]
Test Case:  81 | Input/Output: [[-99.58764685184683 66] -33.58764685184683]
Test Case:  82 | Input/Output: [[15.001832301886807 33] 48.00183230188681]
Test Case:  83 | Input/Output: [[52.796590440734406 89] 141.7965904407344]
Test Case:  84 | Input/Output: [[-69.35225131843954 19] -50.35225131843954]
Test Case:  85 | Input/Output: [[-14.100409485119883 56] 41.89959051488012]
Test Case:  86 | Input/Output: [[-48.69301610090393 -80] -128.69301610090395]
Test Case:  87 | Input/Output: [[-25.223692214640423 -81] -106.22369221464042]
Test Case:  88 | Input/Output: [[-4.227711835037496 -38] -42.227711835037496]
Test Case:  89 | Input/Output: [[62.23644387824899 -74] -11.763556121751009]
Test Case:  90 | Input/Output: [[83.41021127635071 -87] -3.589788723649292]
Test Case:  91 | Input/Output: [[-63.34811355651164 -86] -149.34811355651163]
Test Case:  92 | Input/Output: [[-66.00465702088044 -47] -113.00465702088044]
Test Case:  93 | Input/Output: [[65.6798999474459 -90] -24.320100052554096]
Test Case:  94 | Input/Output: [[30.676619744881037 -1] 29.676619744881037]
Test Case:  95 | Input/Output: [[19.570952053727922 -89] -69.42904794627208]
Test Case:  96 | Input/Output: [[1.6287925720124719 81] 82.62879257201247]
Test Case:  97 | Input/Output: [[-70.86662968889723 -47] -117.86662968889723]
Test Case:  98 | Input/Output: [[34.98394099425289 71] 105.98394099425289]
Test Case:  99 | Input/Output: [[97.06330842291916 -43] 54.063308422919164]
Test Case: 100 | Input/Output: [[65.36242882826292 82] 147.36242882826292]
Test Case: 101 | Input/Output: [[-93.8133277994938 29] -64.8133277994938]
Test Case: 102 | Input/Output: [[-32.87512337857643 -74] -106.87512337857643]
Test Case: 103 | Input/Output: [[-83.46272446022257 41] -42.462724460222574]
Test Case: 104 | Input/Output: [[93.89219562649711 9] 102.89219562649711]
Test Case: 105 | Input/Output: [[23.817194339240828 65] 88.81719433924083]
Test Case: 106 | Input/Output: [[44.13229245299715 13] 57.13229245299715]
Test Case: 107 | Input/Output: [[69.21440221847524 -52] 17.214402218475243]
Test Case: 108 | Input/Output: [[-65.10801553708296 95] 29.891984462917037]
Test Case: 109 | Input/Output: [[-37.66966342964147 -8] -45.66966342964147]
Test Case: 110 | Input/Output: [[50.74972539593284 -8] 42.74972539593284]
Test Case: 111 | Input/Output: [[84.74638429787069 -57] 27.74638429787069]
Test Case: 112 | Input/Output: [[-86.3146256869208 -62] -148.3146256869208]
Test Case: 113 | Input/Output: [[-18.404093045815827 -30] -48.40409304581583]
Test Case: 114 | Input/Output: [[25.999336497033028 62] 87.99933649703303]
Test Case: 115 | Input/Output: [[-4.831847899781792 -82] -86.83184789978179]
Test Case: 116 | Input/Output: [[-16.32911370657331 -28] -44.32911370657331]
Test Case: 117 | Input/Output: [[50.37506947138468 97] 147.37506947138468]
Test Case: 118 | Input/Output: [[-7.005453391866354 -29] -36.005453391866354]
Test Case: 119 | Input/Output: [[96.59312018513916 95] 191.59312018513916]
Test Case: 120 | Input/Output: [[-5.069409416424861 77] 71.93059058357514]
Test Case: 121 | Input/Output: [[23.623040218950806 57] 80.6230402189508]
Test Case: 122 | Input/Output: [[48.47896764443993 49] 97.47896764443993]
Test Case: 123 | Input/Output: [[-62.625483393378964 -46] -108.62548339337897]
Test Case: 124 | Input/Output: [[-41.03938519596071 37] -4.039385195960712]
Test Case: 125 | Input/Output: [[-68.33321324606729 -31] -99.33321324606729]
Test Case: 126 | Input/Output: [[82.87843262515423 -14] 68.87843262515423]
Test Case: 127 | Input/Output: [[-61.18181111609684 -92] -153.18181111609684]
Test Case: 128 | Input/Output: [[-76.32550773131956 -36] -112.32550773131956]
Test Case: 129 | Input/Output: [[43.9652459712737 12] 55.9652459712737]
Test Case: 130 | Input/Output: [[81.93778877718393 2] 83.93778877718393]
Test Case: 131 | Input/Output: [[64.59735365609887 -45] 19.597353656098875]
Test Case: 132 | Input/Output: [[20.704784791838193 -78] -57.29521520816181]
Test Case: 133 | Input/Output: [[-40.95459561427681 12] -28.954595614276812]
Test Case: 134 | Input/Output: [[81.42459132419938 18] 99.42459132419938]
Test Case: 135 | Input/Output: [[11.314646285655556 37] 48.314646285655556]
Test Case: 136 | Input/Output: [[-59.440130903677726 83] 23.559869096322274]
Test Case: 137 | Input/Output: [[-92.6562051549419 16] -76.6562051549419]
Test Case: 138 | Input/Output: [[-38.77209790618667 29] -9.772097906186673]
Test Case: 139 | Input/Output: [[79.69310788424343 58] 137.69310788424343]
Test Case: 140 | Input/Output: [[-65.11809882722967 -82] -147.1180988272297]
Test Case: 141 | Input/Output: [[-66.24685063696666 81] 14.753149363033344]
Test Case: 142 | Input/Output: [[26.99586319799907 -27] -0.0041368020009286965]
Test Case: 143 | Input/Output: [[-56.77731492384082 -68] -124.77731492384082]
Test Case: 144 | Input/Output: [[57.24892523321455 -62] -4.75107476678545]
Test Case: 145 | Input/Output: [[-97.83109748337091 9] -88.83109748337091]
Test Case: 146 | Input/Output: [[37.825758525755276 48] 85.82575852575528]
Test Case: 147 | Input/Output: [[-37.54798305089033 -42] -79.54798305089034]
Test Case: 148 | Input/Output: [[57.302614885172915 -84] -26.697385114827085]
Test Case: 149 | Input/Output: [[-59.80960364609778 -20] -79.80960364609777]
Test Case: 150 | Input/Output: [[55.23671098225637 55] 110.23671098225637]
Test Case: 151 | Input/Output: [[53.1152879025295 -93] -39.8847120974705]
Test Case: 152 | Input/Output: [[-17.399375596401143 -38] -55.39937559640114]
Test Case: 153 | Input/Output: [[17.491595562415924 2] 19.491595562415924]
Test Case: 154 | Input/Output: [[19.337475290847067 24] 43.33747529084707]
Test Case: 155 | Input/Output: [[87.35315026537083 -63] 24.35315026537083]
Test Case: 156 | Input/Output: [[55.88799347475975 25] 80.88799347475975]
Test Case: 157 | Input/Output: [[-53.947552138471956 92] 38.052447861528044]
Test Case: 158 | Input/Output: [[20.996387731848515 69] 89.99638773184851]
Test Case: 159 | Input/Output: [[-95.8369175018797 -58] -153.8369175018797]
Test Case: 160 | Input/Output: [[22.15815702381508 78] 100.15815702381508]
Test Case: 161 | Input/Output: [[-91.90746079549896 57] -34.90746079549896]
Test Case: 162 | Input/Output: [[-19.453205521197674 -69] -88.45320552119767]
Test Case: 163 | Input/Output: [[35.65613249458758 96] 131.65613249458758]
Test Case: 164 | Input/Output: [[-91.58449034776332 -42] -133.58449034776334]
Test Case: 165 | Input/Output: [[52.0410140391983 52] 104.0410140391983]
Test Case: 166 | Input/Output: [[71.03374858948385 -37] 34.03374858948385]
Test Case: 167 | Input/Output: [[-64.7038836243176 88] 23.296116375682402]
Test Case: 168 | Input/Output: [[-21.067448409270128 99] 77.93255159072987]
Test Case: 169 | Input/Output: [[-85.5006226247969 -45] -130.5006226247969]
Test Case: 170 | Input/Output: [[-86.86428233819396 26] -60.86428233819396]
Test Case: 171 | Input/Output: [[62.66208369295981 83] 145.6620836929598]
Test Case: 172 | Input/Output: [[29.099856044087403 -31] -1.900143955912597]
Test Case: 173 | Input/Output: [[-74.69188952274305 79] 4.308110477256946]
Test Case: 174 | Input/Output: [[55.23965668116577 -2] 53.23965668116577]
Test Case: 175 | Input/Output: [[10.055942035075205 37] 47.055942035075205]
Test Case: 176 | Input/Output: [[-44.332124605073965 -67] -111.33212460507397]
Test Case: 177 | Input/Output: [[25.87360458542598 -10] 15.87360458542598]
Test Case: 178 | Input/Output: [[52.844747853336 -62] -9.155252146663997]
Test Case: 179 | Input/Output: [[-54.24523285323084 9] -45.24523285323084]
Test Case: 180 | Input/Output: [[73.97665958256147 94] 167.97665958256147]
Test Case: 181 | Input/Output: [[-83.1226134087064 23] -60.1226134087064]
Test Case: 182 | Input/Output: [[56.035418449991965 -63] -6.964581550008035]
Test Case: 183 | Input/Output: [[48.33884395907805 -37] 11.338843959078048]
Test Case: 184 | Input/Output: [[68.27987558652183 71] 139.27987558652183]
Test Case: 185 | Input/Output: [[72.82088447962667 58] 130.82088447962667]
Test Case: 186 | Input/Output: [[40.05831189893996 56] 96.05831189893996]
Test Case: 187 | Input/Output: [[93.98428159008256 65] 158.98428159008256]
Test Case: 188 | Input/Output: [[-54.03435374370717 45] -9.034353743707172]
Test Case: 189 | Input/Output: [[-17.90599117489205 -17] -34.90599117489205]
Test Case: 190 | Input/Output: [[-83.21567982484146 19] -64.21567982484146]
Test Case: 191 | Input/Output: [[42.194584201284385 79] 121.19458420128439]
Test Case: 192 | Input/Output: [[-81.90701500326878 60] -21.907015003268782]
Test Case: 193 | Input/Output: [[-75.42375078560906 -71] -146.42375078560906]
Test Case: 194 | Input/Output: [[-89.10542901210734 -10] -99.10542901210734]
Test Case: 195 | Input/Output: [[3.3734681270208 5] 8.3734681270208]
Test Case: 196 | Input/Output: [[48.2668114484284 -40] 8.266811448428399]
Test Case: 197 | Input/Output: [[-39.46290310489542 75] 35.53709689510458]
Test Case: 198 | Input/Output: [[-96.32988787354988 12] -84.32988787354988]
Test Case: 199 | Input/Output: [[0.48979134886542397 -5] -4.510208651134576]
Test Case: 200 | Input/Output: [[-52.095317439614064 72] 19.904682560385936]
Test Case: 201 | Input/Output: [[-59.36828616484908 77] 17.63171383515092]
Test Case: 202 | Input/Output: [[-33.383755095943386 -95] -128.3837550959434]
Test Case: 203 | Input/Output: [[40.56880840086362 -16] 24.568808400863617]
Test Case: 204 | Input/Output: [[11.958423810072063 51] 62.95842381007206]
Test Case: 205 | Input/Output: [[-59.99522094769485 -99] -158.99522094769486]
Test Case: 206 | Input/Output: [[-54.1468745006592 -32] -86.14687450065921]
Test Case: 207 | Input/Output: [[-6.384831451895209 -18] -24.38483145189521]
Test Case: 208 | Input/Output: [[7.046256302754287 32] 39.04625630275429]
Test Case: 209 | Input/Output: [[87.8147965376665 92] 179.8147965376665]
Test Case: 210 | Input/Output: [[-44.366855373656165 69] 24.633144626343835]
Test Case: 211 | Input/Output: [[-90.11013294011885 -87] -177.11013294011883]
Test Case: 212 | Input/Output: [[19.343720392358676 48] 67.34372039235868]
Test Case: 213 | Input/Output: [[57.3762572482747 -26] 31.376257248274698]
Test Case: 214 | Input/Output: [[-74.63949445720661 23] -51.63949445720661]
Test Case: 215 | Input/Output: [[26.548543277337842 73] 99.54854327733784]
Test Case: 216 | Input/Output: [[-31.0833675307572 52] 20.9166324692428]
Test Case: 217 | Input/Output: [[-51.89392238386561 24] -27.893922383865608]
Test Case: 218 | Input/Output: [[-58.0623190588355 55] -3.0623190588354987]
Test Case: 219 | Input/Output: [[-61.18664224979851 -3] -64.18664224979851]
Test Case: 220 | Input/Output: [[57.78032339077089 61] 118.78032339077089]
Test Case: 221 | Input/Output: [[-21.632964382447923 -75] -96.63296438244792]
Test Case: 222 | Input/Output: [[35.156278133449405 -29] 6.156278133449405]
Test Case: 223 | Input/Output: [[19.38671684611741 -90] -70.61328315388259]
Test Case: 224 | Input/Output: [[-92.59468649462661 -94] -186.59468649462661]
Test Case: 225 | Input/Output: [[51.4652217039195 -59] -7.534778296080503]
Test Case: 226 | Input/Output: [[-59.5723657938958 100] 40.4276342061042]
Test Case: 227 | Input/Output: [[43.360429890948126 -100] -56.639570109051874]
Test Case: 228 | Input/Output: [[-78.37446537330499 69] -9.374465373304986]
Test Case: 229 | Input/Output: [[99.08197333333365 49] 148.08197333333365]
Test Case: 230 | Input/Output: [[74.00434172888069 -11] 63.00434172888069]
Test Case: 231 | Input/Output: [[55.64007366968613 83] 138.64007366968613]
Test Case: 232 | Input/Output: [[64.36128433228953 -11] 53.36128433228953]
Test Case: 233 | Input/Output: [[-69.96699802335398 -34] -103.96699802335398]
Test Case: 234 | Input/Output: [[-50.230421717445054 -1] -51.230421717445054]
Test Case: 235 | Input/Output: [[66.25044416079328 17] 83.25044416079328]
Test Case: 236 | Input/Output: [[19.34895584118337 -16] 3.3489558411833684]
Test Case: 237 | Input/Output: [[56.02522236835688 47] 103.02522236835688]
Test Case: 238 | Input/Output: [[-25.91154263209387 -51] -76.91154263209387]
Test Case: 239 | Input/Output: [[-95.6742961525219 -48] -143.6742961525219]
Test Case: 240 | Input/Output: [[20.769974409585416 -4] 16.769974409585416]
Test Case: 241 | Input/Output: [[-11.360294635228826 -10] -21.360294635228826]
Test Case: 242 | Input/Output: [[65.94792028469183 -64] 1.9479202846918326]
Test Case: 243 | Input/Output: [[79.7815175965481 21] 100.7815175965481]
Test Case: 244 | Input/Output: [[16.282102397986975 6] 22.282102397986975]
Test Case: 245 | Input/Output: [[48.82439264165765 -46] 2.824392641657653]
Test Case: 246 | Input/Output: [[-91.44664318636843 -1] -92.44664318636843]
Test Case: 247 | Input/Output: [[30.89750794591319 58] 88.89750794591319]
Test Case: 248 | Input/Output: [[-54.792124640259196 67] 12.207875359740804]
Test Case: 249 | Input/Output: [[8.56983752965266 49] 57.56983752965266]
Test Case: 250 | Input/Output: [[-55.31273614215431 -33] -88.31273614215431]
Test Case: 251 | Input/Output: [[37.57468461908863 -33] 4.574684619088629]
Test Case: 252 | Input/Output: [[78.94827373046795 30] 108.94827373046795]
Test Case: 253 | Input/Output: [[81.90121161177396 -57] 24.90121161177396]
Test Case: 254 | Input/Output: [[24.53841396549312 -2] 22.53841396549312]
Test Case: 255 | Input/Output: [[80.23438208588811 -76] 4.2343820858881145]
Test Case: 256 | Input/Output: [[8.917705656747984 35] 43.917705656747984]
Test Case: 257 | Input/Output: [[96.01511333725418 -31] 65.01511333725418]
Test Case: 258 | Input/Output: [[67.58856529183996 23] 90.58856529183996]
Test Case: 259 | Input/Output: [[-31.477322907391 88] 56.522677092609]
Test Case: 260 | Input/Output: [[69.30965484724405 -44] 25.309654847244047]
Test Case: 261 | Input/Output: [[30.94906988762955 43] 73.94906988762955]
Test Case: 262 | Input/Output: [[98.19748211886471 49] 147.1974821188647]
Test Case: 263 | Input/Output: [[-56.44139802652597 -16] -72.44139802652597]
Test Case: 264 | Input/Output: [[71.59942510663441 -60] 11.599425106634413]
Test Case: 265 | Input/Output: [[93.1000946962208 -20] 73.1000946962208]
Test Case: 266 | Input/Output: [[1.1466363385467702 7] 8.14663633854677]
Test Case: 267 | Input/Output: [[-77.97229076172752 63] -14.972290761727521]
Test Case: 268 | Input/Output: [[19.034478707795714 -23] -3.9655212922042864]
Test Case: 269 | Input/Output: [[34.126216496592406 70] 104.1262164965924]
Test Case: 270 | Input/Output: [[37.98794477689006 -61] -23.01205522310994]
Test Case: 271 | Input/Output: [[35.568400613595315 87] 122.56840061359532]
Test Case: 272 | Input/Output: [[-46.805661097897925 62] 15.194338902102075]
Test Case: 273 | Input/Output: [[8.849596524494928 50] 58.84959652449493]
Test Case: 274 | Input/Output: [[52.87881904283552 95] 147.87881904283552]
Test Case: 275 | Input/Output: [[70.61282487459351 83] 153.6128248745935]
Test Case: 276 | Input/Output: [[-95.10132338444093 6] -89.10132338444093]
Test Case: 277 | Input/Output: [[-93.04468222689432 -90] -183.04468222689434]
Test Case: 278 | Input/Output: [[97.88751804890148 21] 118.88751804890148]
Test Case: 279 | Input/Output: [[4.484882883456606 68] 72.4848828834566]
Test Case: 280 | Input/Output: [[69.42024092339602 99] 168.42024092339602]
Test Case: 281 | Input/Output: [[62.136769852944525 78] 140.13676985294452]
Test Case: 282 | Input/Output: [[-99.6590492851263 0] -99.6590492851263]
Test Case: 283 | Input/Output: [[27.50543899426046 -42] -14.494561005739541]
Test Case: 284 | Input/Output: [[-66.25727037610568 -22] -88.25727037610568]
Test Case: 285 | Input/Output: [[32.24136645108268 -69] -36.75863354891732]
Test Case: 286 | Input/Output: [[-25.388752512326462 -78] -103.38875251232646]
Test Case: 287 | Input/Output: [[-38.14539388021747 -12] -50.14539388021747]
Test Case: 288 | Input/Output: [[67.32280139955586 92] 159.32280139955586]
Test Case: 289 | Input/Output: [[-9.58007584034452 -18] -27.58007584034452]
Test Case: 290 | Input/Output: [[-39.754692764028746 -63] -102.75469276402875]
Test Case: 291 | Input/Output: [[18.507807931241757 -62] -43.49219206875824]
Test Case: 292 | Input/Output: [[-67.7773759457629 -11] -78.7773759457629]
Test Case: 293 | Input/Output: [[15.707761362671675 -10] 5.707761362671675]
Test Case: 294 | Input/Output: [[-70.48973610762748 43] -27.48973610762748]
Test Case: 295 | Input/Output: [[-95.620320614509 -100] -195.620320614509]
Test Case: 296 | Input/Output: [[-58.3773851094695 98] 39.6226148905305]
Test Case: 297 | Input/Output: [[-40.93339188737328 99] 58.06660811262672]
Test Case: 298 | Input/Output: [[-1.8808232261594071 -13] -14.880823226159407]
Test Case: 299 | Input/Output: [[-5.388923962172115 25] 19.611076037827885]
Test Case: 300 | Input/Output: [[-33.70914544524004 -44] -77.70914544524004]
Test Case: 301 | Input/Output: [[9.590333279370938 16] 25.590333279370938]
Test Case: 302 | Input/Output: [[-53.98939507372893 -70] -123.98939507372893]
Test Case: 303 | Input/Output: [[-22.686747345575696 94] 71.3132526544243]
Test Case: 304 | Input/Output: [[-83.58224093305077 40] -43.58224093305077]
Test Case: 305 | Input/Output: [[-60.57637612689 6] -54.57637612689]
Test Case: 306 | Input/Output: [[16.19518259400128 24] 40.19518259400128]
Test Case: 307 | Input/Output: [[-95.44064892318198 -39] -134.44064892318198]
Test Case: 308 | Input/Output: [[17.49951109794381 52] 69.49951109794381]
Test Case: 309 | Input/Output: [[54.88358627881817 -81] -26.11641372118183]
Test Case: 310 | Input/Output: [[-42.71139450202537 -20] -62.71139450202537]
Test Case: 311 | Input/Output: [[44.43090596575067 77] 121.43090596575067]
Test Case: 312 | Input/Output: [[-3.317468579755527 -41] -44.31746857975553]
Test Case: 313 | Input/Output: [[47.640486563545466 89] 136.64048656354547]
Test Case: 314 | Input/Output: [[-64.9094976393861 -64] -128.9094976393861]
Test Case: 315 | Input/Output: [[-10.290879687709648 79] 68.70912031229035]
Test Case: 316 | Input/Output: [[25.39775282493642 -71] -45.60224717506358]
Test Case: 317 | Input/Output: [[88.19682903081701 -59] 29.196829030817014]
Test Case: 318 | Input/Output: [[-91.15211874428392 69] -22.152118744283925]
Test Case: 319 | Input/Output: [[-10.150956511150639 -66] -76.15095651115064]
Test Case: 320 | Input/Output: [[76.83237277740827 69] 145.83237277740827]
Test Case: 321 | Input/Output: [[-71.88408283238634 -10] -81.88408283238634]
Test Case: 322 | Input/Output: [[81.36159185013418 3] 84.36159185013418]
Test Case: 323 | Input/Output: [[42.9084836760108 -84] -41.0915163239892]
Test Case: 324 | Input/Output: [[-57.14224003749966 30] -27.14224003749966]
Test Case: 325 | Input/Output: [[74.61233537461146 -87] -12.387664625388538]
Test Case: 326 | Input/Output: [[63.277293863317624 43] 106.27729386331762]
Test Case: 327 | Input/Output: [[-90.16423358548175 -36] -126.16423358548175]
Test Case: 328 | Input/Output: [[83.94951890661753 86] 169.94951890661753]
Test Case: 329 | Input/Output: [[-71.99899795185942 -23] -94.99899795185942]
Test Case: 330 | Input/Output: [[6.3597499481671065 24] 30.359749948167106]
Test Case: 331 | Input/Output: [[-15.620159156827597 -40] -55.6201591568276]
Test Case: 332 | Input/Output: [[-25.00394063851408 49] 23.99605936148592]
Test Case: 333 | Input/Output: [[-0.1182966439509272 87] 86.88170335604907]
Test Case: 334 | Input/Output: [[0.07060108038419344 56] 56.07060108038419]
Test Case: 335 | Input/Output: [[58.28710415953529 67] 125.28710415953529]
Test Case: 336 | Input/Output: [[51.047969012599424 53] 104.04796901259942]
Test Case: 337 | Input/Output: [[-33.287595949762675 58] 24.712404050237325]
Test Case: 338 | Input/Output: [[48.967647866698854 63] 111.96764786669885]
Test Case: 339 | Input/Output: [[-80.83909520216855 36] -44.83909520216855]
Test Case: 340 | Input/Output: [[31.626790224133572 -39] -7.373209775866428]
Test Case: 341 | Input/Output: [[47.02915480882902 -51] -3.97084519117098]
Test Case: 342 | Input/Output: [[61.11122272537156 70] 131.11122272537156]
Test Case: 343 | Input/Output: [[-22.07781861462408 -62] -84.07781861462408]
Test Case: 344 | Input/Output: [[-66.62316164418203 78] 11.376838355817966]
Test Case: 345 | Input/Output: [[-51.517557078425824 -100] -151.51755707842582]
Test Case: 346 | Input/Output: [[23.08216352013713 92] 115.08216352013713]
Test Case: 347 | Input/Output: [[-33.561021447850536 7] -26.561021447850536]
Test Case: 348 | Input/Output: [[74.36763951004971 -28] 46.36763951004971]
Test Case: 349 | Input/Output: [[-32.36481788888736 39] 6.635182111112641]
Test Case: 350 | Input/Output: [[-75.41249501893456 2] -73.41249501893456]
Test Case: 351 | Input/Output: [[-0.8332585953150726 81] 80.16674140468493]
Test Case: 352 | Input/Output: [[9.451904693926338 -20] -10.548095306073662]
Test Case: 353 | Input/Output: [[4.080721261108351 77] 81.08072126110835]
Test Case: 354 | Input/Output: [[82.26923107113439 -96] -13.730768928865615]
Test Case: 355 | Input/Output: [[-93.34970675027468 -77] -170.34970675027466]
Test Case: 356 | Input/Output: [[78.66072868773801 95] 173.66072868773801]
Test Case: 357 | Input/Output: [[9.935034468423027 -8] 1.9350344684230265]
Test Case: 358 | Input/Output: [[-0.7761116649396911 11] 10.223888335060309]
Test Case: 359 | Input/Output: [[-46.497013846938806 87] 40.502986153061194]
Test Case: 360 | Input/Output: [[1.1065018070729025 13] 14.106501807072902]
Test Case: 361 | Input/Output: [[-19.24018352448647 -83] -102.24018352448647]
Test Case: 362 | Input/Output: [[55.14072708490244 92] 147.14072708490244]
Test Case: 363 | Input/Output: [[-61.25931613144786 -67] -128.25931613144786]
Test Case: 364 | Input/Output: [[66.11668452071044 44] 110.11668452071044]
Test Case: 365 | Input/Output: [[-58.61835344659876 33] -25.61835344659876]
Test Case: 366 | Input/Output: [[67.76343254808799 -55] 12.76343254808799]
Test Case: 367 | Input/Output: [[60.36784411893575 30] 90.36784411893575]
Test Case: 368 | Input/Output: [[86.11256198141524 77] 163.11256198141524]
Test Case: 369 | Input/Output: [[1.8554859416997544 -55] -53.144514058300246]
Test Case: 370 | Input/Output: [[22.32009638254158 -39] -16.67990361745842]
Test Case: 371 | Input/Output: [[87.74229575153981 30] 117.74229575153981]
Test Case: 372 | Input/Output: [[-24.70746426896659 22] -2.7074642689665893]
Test Case: 373 | Input/Output: [[82.29540681587116 -26] 56.29540681587116]
Test Case: 374 | Input/Output: [[38.24670352238283 -37] 1.2467035223828304]
Test Case: 375 | Input/Output: [[31.97421639819703 -42] -10.02578360180297]
Test Case: 376 | Input/Output: [[18.00539049083214 12] 30.00539049083214]
Test Case: 377 | Input/Output: [[99.62424465606611 56] 155.6242446560661]
Test Case: 378 | Input/Output: [[5.4459075727583866 -65] -59.55409242724161]
Test Case: 379 | Input/Output: [[-22.444063539803835 -53] -75.44406353980384]
Test Case: 380 | Input/Output: [[-36.897094447007994 2] -34.897094447007994]
Test Case: 381 | Input/Output: [[70.8643113251376 -93] -22.135688674862394]
Test Case: 382 | Input/Output: [[-34.42303379074268 11] -23.42303379074268]
Test Case: 383 | Input/Output: [[95.34500616388775 2] 97.34500616388775]
Test Case: 384 | Input/Output: [[-21.12999963971592 86] 64.87000036028408]
Test Case: 385 | Input/Output: [[-45.44072821161904 57] 11.559271788380961]
Test Case: 386 | Input/Output: [[-2.556142751681193 9] 6.443857248318807]
Test Case: 387 | Input/Output: [[-92.34572282913345 -31] -123.34572282913345]
Test Case: 388 | Input/Output: [[-69.73659109410175 -84] -153.73659109410175]
Test Case: 389 | Input/Output: [[-3.365415731094629 35] 31.63458426890537]
Test Case: 390 | Input/Output: [[33.23335274321602 -9] 24.233352743216017]
Test Case: 391 | Input/Output: [[-64.8814748766631 -1] -65.8814748766631]
Test Case: 392 | Input/Output: [[94.06889499211175 -41] 53.06889499211175]
Test Case: 393 | Input/Output: [[-93.70943682605228 93] -0.7094368260522828]
Test Case: 394 | Input/Output: [[-85.41566128060494 80] -5.415661280604937]
Test Case: 395 | Input/Output: [[14.54585749805966 33] 47.54585749805966]
Test Case: 396 | Input/Output: [[34.237876436265424 24] 58.237876436265424]
Test Case: 397 | Input/Output: [[87.56727228094707 88] 175.56727228094707]
Test Case: 398 | Input/Output: [[6.545195564527646 -35] -28.454804435472354]
Test Case: 399 | Input/Output: [[-90.99399787986657 -24] -114.99399787986657]
Test Case: 400 | Input/Output: [[-41.67030801048175 -16] -57.67030801048175]
Test Case: 401 | Input/Output: [[13.298516641484895 45] 58.298516641484895]
Test Case: 402 | Input/Output: [[-61.32836849413239 -36] -97.32836849413239]
Test Case: 403 | Input/Output: [[35.21747811182226 -91] -55.78252188817774]
Test Case: 404 | Input/Output: [[98.36419032422666 94] 192.36419032422666]
Test Case: 405 | Input/Output: [[-8.782550267602886 22] 13.217449732397114]
Test Case: 406 | Input/Output: [[24.060283630481806 -15] 9.060283630481806]
Test Case: 407 | Input/Output: [[-76.45662266568898 -66] -142.456622665689]
Test Case: 408 | Input/Output: [[46.8659473810591 -50] -3.134052618940899]
Test Case: 409 | Input/Output: [[-42.27026554028468 -16] -58.27026554028468]
Test Case: 410 | Input/Output: [[17.08420203124244 70] 87.08420203124244]
Test Case: 411 | Input/Output: [[-85.69260802674899 -62] -147.69260802674899]
Test Case: 412 | Input/Output: [[-1.8624313659042429 61] 59.13756863409576]
Test Case: 413 | Input/Output: [[54.17609793801043 -14] 40.17609793801043]
Test Case: 414 | Input/Output: [[-13.786986841547488 96] 82.21301315845251]
Test Case: 415 | Input/Output: [[-68.78628807897569 56] -12.786288078975687]
Test Case: 416 | Input/Output: [[66.45267563645817 -34] 32.45267563645817]
Test Case: 417 | Input/Output: [[-41.2827950980857 99] 57.7172049019143]
Test Case: 418 | Input/Output: [[28.989034420992027 -76] -47.01096557900797]
Test Case: 419 | Input/Output: [[-93.87609541431384 74] -19.876095414313838]
Test Case: 420 | Input/Output: [[41.95523801743079 -6] 35.95523801743079]
Test Case: 421 | Input/Output: [[87.4954473672542 -18] 69.4954473672542]
Test Case: 422 | Input/Output: [[-13.21784816755003 42] 28.78215183244997]
Test Case: 423 | Input/Output: [[53.23215688609875 -96] -42.76784311390125]
Test Case: 424 | Input/Output: [[72.62500886391564 -51] 21.62500886391564]
Test Case: 425 | Input/Output: [[-95.79807744898976 -59] -154.79807744898977]
Test Case: 426 | Input/Output: [[38.48274485226665 -70] -31.51725514773335]
Test Case: 427 | Input/Output: [[-31.41806559212175 -100] -131.41806559212176]
Test Case: 428 | Input/Output: [[-42.99282110897889 22] -20.992821108978887]
Test Case: 429 | Input/Output: [[77.20393215406776 16] 93.20393215406776]
Test Case: 430 | Input/Output: [[-99.01855159803334 41] -58.01855159803334]
Test Case: 431 | Input/Output: [[60.09375068040447 95] 155.09375068040447]
Test Case: 432 | Input/Output: [[-91.37474306593427 -32] -123.37474306593427]
Test Case: 433 | Input/Output: [[-20.588608254531437 -79] -99.58860825453144]
Test Case: 434 | Input/Output: [[96.81596256748884 -18] 78.81596256748884]
Test Case: 435 | Input/Output: [[-4.592168399730539 -64] -68.59216839973054]
Test Case: 436 | Input/Output: [[43.60497667385741 -66] -22.395023326142592]
Test Case: 437 | Input/Output: [[-73.65697706941583 84] 10.34302293058417]
Test Case: 438 | Input/Output: [[13.329358321611593 26] 39.32935832161159]
Test Case: 439 | Input/Output: [[52.70929132528417 93] 145.70929132528417]
Test Case: 440 | Input/Output: [[7.984013026106808 72] 79.98401302610681]
Test Case: 441 | Input/Output: [[-91.45132469842562 -91] -182.45132469842562]
Test Case: 442 | Input/Output: [[98.53521120838073 -67] 31.53521120838073]
Test Case: 443 | Input/Output: [[60.02685686190861 -84] -23.973143138091388]
Test Case: 444 | Input/Output: [[-84.19856977790319 -28] -112.19856977790319]
Test Case: 445 | Input/Output: [[91.16198338655718 -98] -6.838016613442818]
Test Case: 446 | Input/Output: [[16.622399620303213 82] 98.62239962030321]
Test Case: 447 | Input/Output: [[63.08944210117866 -57] 6.089442101178662]
Test Case: 448 | Input/Output: [[-86.99704322378135 -92] -178.99704322378136]
Test Case: 449 | Input/Output: [[-23.91542063518031 -33] -56.91542063518031]
Test Case: 450 | Input/Output: [[-78.07771528273435 81] 2.9222847172656543]
Test Case: 451 | Input/Output: [[69.42035710636029 -58] 11.420357106360285]
Test Case: 452 | Input/Output: [[76.94464931062498 35] 111.94464931062498]
Test Case: 453 | Input/Output: [[-85.09521261349941 -91] -176.09521261349943]
Test Case: 454 | Input/Output: [[-85.55383349210635 -89] -174.55383349210635]
Test Case: 455 | Input/Output: [[81.3454541835321 57] 138.3454541835321]
Test Case: 456 | Input/Output: [[64.96207444011253 0] 64.96207444011253]
Test Case: 457 | Input/Output: [[-21.64201629545377 78] 56.35798370454623]
Test Case: 458 | Input/Output: [[20.948238386408818 -96] -75.05176161359118]
Test Case: 459 | Input/Output: [[86.43167152582427 87] 173.43167152582427]
Test Case: 460 | Input/Output: [[8.843958567915138 52] 60.84395856791514]
Test Case: 461 | Input/Output: [[-77.5153434574906 -62] -139.5153434574906]
Test Case: 462 | Input/Output: [[-62.56504091577118 67] 4.434959084228822]
Test Case: 463 | Input/Output: [[59.09489485270413 55] 114.09489485270413]
Test Case: 464 | Input/Output: [[50.70650016828026 -85] -34.29349983171974]
Test Case: 465 | Input/Output: [[34.55018811309819 42] 76.55018811309819]
Test Case: 466 | Input/Output: [[-76.49399218389033 10] -66.49399218389033]
Test Case: 467 | Input/Output: [[-14.565722250119919 -57] -71.56572225011992]
Test Case: 468 | Input/Output: [[24.463886714526623 -48] -23.536113285473377]
Test Case: 469 | Input/Output: [[-19.023257087650208 -79] -98.02325708765021]
Test Case: 470 | Input/Output: [[82.55440570904179 38] 120.55440570904179]
Test Case: 471 | Input/Output: [[-82.28995171268281 -90] -172.2899517126828]
Test Case: 472 | Input/Output: [[-1.9504612728943727 56] 54.04953872710563]
Test Case: 473 | Input/Output: [[-34.538110418837135 -49] -83.53811041883714]
Test Case: 474 | Input/Output: [[-90.74582707705244 62] -28.74582707705244]
Test Case: 475 | Input/Output: [[40.41948015610947 -17] 23.419480156109472]
Test Case: 476 | Input/Output: [[-76.74062366450167 71] -5.740623664501669]
Test Case: 477 | Input/Output: [[-19.229080889488046 69] 49.770919110511954]
Test Case: 478 | Input/Output: [[-51.11536305857858 -82] -133.11536305857857]
Test Case: 479 | Input/Output: [[-8.728631446548249 -80] -88.72863144654825]
Test Case: 480 | Input/Output: [[22.840814689111852 74] 96.84081468911185]
Test Case: 481 | Input/Output: [[-88.03101432658258 32] -56.03101432658258]
Test Case: 482 | Input/Output: [[-24.271590968810813 31] 6.728409031189187]
Test Case: 483 | Input/Output: [[33.47498864590591 67] 100.47498864590591]
Test Case: 484 | Input/Output: [[28.331819760963896 -57] -28.668180239036104]
Test Case: 485 | Input/Output: [[80.92288005745215 -74] 6.922880057452147]
Test Case: 486 | Input/Output: [[93.70011383734055 22] 115.70011383734055]
Test Case: 487 | Input/Output: [[-37.71921689700466 25] -12.719216897004657]
Test Case: 488 | Input/Output: [[49.96020770176358 95] 144.96020770176358]
Test Case: 489 | Input/Output: [[-68.54899122018286 -9] -77.54899122018286]
Test Case: 490 | Input/Output: [[-49.783216470477655 43] -6.7832164704776545]
Test Case: 491 | Input/Output: [[17.11992195598117 42] 59.11992195598117]
Test Case: 492 | Input/Output: [[8.858073581234677 -96] -87.14192641876532]
Test Case: 493 | Input/Output: [[-4.365178989609134 68] 63.634821010390866]
Test Case: 494 | Input/Output: [[-65.30276121238936 -64] -129.30276121238936]
Test Case: 495 | Input/Output: [[-18.880516324845928 43] 24.119483675154072]
Test Case: 496 | Input/Output: [[-12.226170972552893 37] 24.773829027447107]
Test Case: 497 | Input/Output: [[-34.94844566781711 81] 46.05155433218289]
Test Case: 498 | Input/Output: [[-77.99909579727367 42] -35.99909579727367]
Test Case: 499 | Input/Output: [[12.637241412619261 -29] -16.36275858738074]
Test Case: 500 | Input/Output: [[98.50520105122763 71] 169.50520105122763]
Test Case: 501 | Input/Output: [[-0.18744166830538234 53] 52.81255833169462]
Test Case: 502 | Input/Output: [[-93.67301460463236 20] -73.67301460463236]
Test Case: 503 | Input/Output: [[-20.249418596674886 94] 73.75058140332511]
Test Case: 504 | Input/Output: [[-11.874139698568229 5] -6.874139698568229]
Test Case: 505 | Input/Output: [[24.484655381394475 50] 74.48465538139448]
Test Case: 506 | Input/Output: [[78.60368293477828 64] 142.60368293477828]
Test Case: 507 | Input/Output: [[98.71152643408209 23] 121.71152643408209]
Test Case: 508 | Input/Output: [[64.50790445358922 -61] 3.5079044535892194]
Test Case: 509 | Input/Output: [[-74.52623157637939 23] -51.52623157637939]
Test Case: 510 | Input/Output: [[66.20007197128973 44] 110.20007197128973]
Test Case: 511 | Input/Output: [[91.25410484350212 -71] 20.25410484350212]
Test Case: 512 | Input/Output: [[73.52433513079711 42] 115.52433513079711]
Test Case: 513 | Input/Output: [[-35.593481209117755 41] 5.406518790882245]
Test Case: 514 | Input/Output: [[47.064600995013336 -50] -2.935399004986664]
Test Case: 515 | Input/Output: [[-40.52646855614488 46] 5.473531443855123]
Test Case: 516 | Input/Output: [[-86.7585496573735 20] -66.7585496573735]
Test Case: 517 | Input/Output: [[83.93391362781773 -40] 43.93391362781773]
Test Case: 518 | Input/Output: [[-26.237311550698465 -46] -72.23731155069846]
Test Case: 519 | Input/Output: [[-25.571346659231196 59] 33.428653340768804]
Test Case: 520 | Input/Output: [[-0.4207198290471297 -23] -23.42071982904713]
Test Case: 521 | Input/Output: [[-63.91160814069403 58] -5.911608140694028]
Test Case: 522 | Input/Output: [[-31.935324930425395 94] 62.064675069574605]
Test Case: 523 | Input/Output: [[-16.390252642330154 -76] -92.39025264233015]
Test Case: 524 | Input/Output: [[-97.76244864010104 53] -44.76244864010104]
Test Case: 525 | Input/Output: [[-27.094805340140525 3] -24.094805340140525]
Test Case: 526 | Input/Output: [[-23.632220924499364 -92] -115.63222092449936]
Test Case: 527 | Input/Output: [[-32.013411796628134 -36] -68.01341179662813]
Test Case: 528 | Input/Output: [[62.23787449602648 -4] 58.23787449602648]
Test Case: 529 | Input/Output: [[-62.69955180862101 24] -38.69955180862101]
Test Case: 530 | Input/Output: [[47.181288434338825 69] 116.18128843433882]
Test Case: 531 | Input/Output: [[-7.197683414174122 -31] -38.19768341417412]
Test Case: 532 | Input/Output: [[-2.8101030809944945 -75] -77.8101030809945]
Test Case: 533 | Input/Output: [[2.703124529376865 -43] -40.296875470623135]
Test Case: 534 | Input/Output: [[-66.75047325047584 -66] -132.75047325047584]
Test Case: 535 | Input/Output: [[-77.61128523960016 -11] -88.61128523960016]
Test Case: 536 | Input/Output: [[-69.14400548569543 -81] -150.14400548569543]
Test Case: 537 | Input/Output: [[-84.2289770443111 79] -5.228977044311094]
Test Case: 538 | Input/Output: [[21.97880195820052 -32] -10.02119804179948]
Test Case: 539 | Input/Output: [[54.67718241610845 -87] -32.32281758389155]
Test Case: 540 | Input/Output: [[-46.24325450674927 -46] -92.24325450674927]
Test Case: 541 | Input/Output: [[33.850240998331714 44] 77.85024099833171]
Test Case: 542 | Input/Output: [[96.72949317609218 -31] 65.72949317609218]
Test Case: 543 | Input/Output: [[-75.50527384087289 -62] -137.5052738408729]
Test Case: 544 | Input/Output: [[33.746275670484636 -31] 2.7462756704846356]
Test Case: 545 | Input/Output: [[37.44682494492412 20] 57.44682494492412]
Test Case: 546 | Input/Output: [[-88.81198307282357 7] -81.81198307282357]
Test Case: 547 | Input/Output: [[-15.722525314004258 33] 17.27747468599574]
Test Case: 548 | Input/Output: [[-23.76097310048783 89] 65.23902689951217]
Test Case: 549 | Input/Output: [[-41.65244279287903 15] -26.65244279287903]
Test Case: 550 | Input/Output: [[-67.21117718581138 -3] -70.21117718581138]
Test Case: 551 | Input/Output: [[14.63705478937274 46] 60.63705478937274]
Test Case: 552 | Input/Output: [[-8.867655302369798 -50] -58.8676553023698]
Test Case: 553 | Input/Output: [[-51.50596427511162 87] 35.49403572488838]
Test Case: 554 | Input/Output: [[80.26759952351148 21] 101.26759952351148]
Test Case: 555 | Input/Output: [[-2.9339327148187664 -24] -26.933932714818766]
Test Case: 556 | Input/Output: [[-70.33970093188906 -58] -128.33970093188907]
Test Case: 557 | Input/Output: [[26.892269034714403 79] 105.8922690347144]
Test Case: 558 | Input/Output: [[74.01889852901732 -15] 59.01889852901732]
Test Case: 559 | Input/Output: [[-59.72452284241374 -14] -73.72452284241373]
Test Case: 560 | Input/Output: [[-8.818171498230257 42] 33.18182850176974]
Test Case: 561 | Input/Output: [[-95.05278892703066 21] -74.05278892703066]
Test Case: 562 | Input/Output: [[-8.820127515253319 53] 44.17987248474668]
Test Case: 563 | Input/Output: [[95.45414134257513 19] 114.45414134257513]
Test Case: 564 | Input/Output: [[12.878966544253572 -58] -45.12103345574643]
Test Case: 565 | Input/Output: [[12.981931306362753 36] 48.98193130636275]
Test Case: 566 | Input/Output: [[46.95802890913993 81] 127.95802890913993]
Test Case: 567 | Input/Output: [[-40.39726411981881 -46] -86.3972641198188]
Test Case: 568 | Input/Output: [[-30.232752488383113 100] 69.76724751161689]
Test Case: 569 | Input/Output: [[-44.58882706194467 53] 8.41117293805533]
Test Case: 570 | Input/Output: [[3.2788499819174746 33] 36.278849981917475]
Test Case: 571 | Input/Output: [[-14.490696395020606 39] 24.509303604979394]
Test Case: 572 | Input/Output: [[63.841151893841925 64] 127.84115189384192]
Test Case: 573 | Input/Output: [[56.68649615923562 -35] 21.686496159235617]
Test Case: 574 | Input/Output: [[72.82661358182344 20] 92.82661358182344]
Test Case: 575 | Input/Output: [[39.54814160138437 77] 116.54814160138437]
Test Case: 576 | Input/Output: [[9.991890576896495 6] 15.991890576896495]
Test Case: 577 | Input/Output: [[-94.86365748098615 -9] -103.86365748098615]
Test Case: 578 | Input/Output: [[-37.652630802666145 23] -14.652630802666145]
Test Case: 579 | Input/Output: [[50.05222358923493 -24] 26.052223589234927]
Test Case: 580 | Input/Output: [[19.34594871207716 1] 20.34594871207716]
Test Case: 581 | Input/Output: [[73.67677223550439 92] 165.6767722355044]
Test Case: 582 | Input/Output: [[-47.466866121058125 -55] -102.46686612105813]
Test Case: 583 | Input/Output: [[-58.487675613068355 -33] -91.48767561306835]
Test Case: 584 | Input/Output: [[48.15871455555313 3] 51.15871455555313]
Test Case: 585 | Input/Output: [[39.34028641328794 26] 65.34028641328794]
Test Case: 586 | Input/Output: [[-97.82055802619823 49] -48.82055802619823]
Test Case: 587 | Input/Output: [[11.670881070039314 -14] -2.3291189299606856]
Test Case: 588 | Input/Output: [[-87.56379987975475 -49] -136.56379987975475]
Test Case: 589 | Input/Output: [[-53.42305598691728 3] -50.42305598691728]
Test Case: 590 | Input/Output: [[-22.8913738269124 -73] -95.8913738269124]
Test Case: 591 | Input/Output: [[26.158346021433516 -52] -25.841653978566484]
Test Case: 592 | Input/Output: [[10.027307769689102 -9] 1.0273077696891022]
Test Case: 593 | Input/Output: [[18.915052717594165 -56] -37.084947282405835]
Test Case: 594 | Input/Output: [[-47.70495086166016 73] 25.29504913833984]
Test Case: 595 | Input/Output: [[-97.25701354926552 56] -41.25701354926552]
Test Case: 596 | Input/Output: [[48.6909596233848 -66] -17.3090403766152]
Test Case: 597 | Input/Output: [[-15.672237842933143 -14] -29.672237842933143]
Test Case: 598 | Input/Output: [[-27.791993632062642 -50] -77.79199363206264]
Test Case: 599 | Input/Output: [[-39.581458022627245 -72] -111.58145802262725]
Test Case: 600 | Input/Output: [[99.98733594994494 -91] 8.987335949944935]
Test Case: 601 | Input/Output: [[27.83902726739531 77] 104.83902726739531]
Test Case: 602 | Input/Output: [[80.38190927999219 53] 133.3819092799922]
Test Case: 603 | Input/Output: [[-81.4004023474352 38] -43.400402347435204]
Test Case: 604 | Input/Output: [[-66.74738064669688 37] -29.747380646696882]
Test Case: 605 | Input/Output: [[91.94005188285598 33] 124.94005188285598]
Test Case: 606 | Input/Output: [[10.750282903732568 26] 36.75028290373257]
Test Case: 607 | Input/Output: [[-73.89339547685296 -78] -151.89339547685296]
Test Case: 608 | Input/Output: [[95.10008619894151 -52] 43.10008619894151]
Test Case: 609 | Input/Output: [[65.44883680820072 -1] 64.44883680820072]
Test Case: 610 | Input/Output: [[34.73713318400732 -4] 30.73713318400732]
Test Case: 611 | Input/Output: [[99.83478319264049 55] 154.8347831926405]
Test Case: 612 | Input/Output: [[3.384364844016048 -42] -38.61563515598395]
Test Case: 613 | Input/Output: [[50.06723003644731 -40] 10.067230036447313]
Test Case: 614 | Input/Output: [[-13.42290109011104 90] 76.57709890988896]
Test Case: 615 | Input/Output: [[-58.63114720884568 -8] -66.63114720884568]
Test Case: 616 | Input/Output: [[-90.09243542399167 -95] -185.09243542399167]
Test Case: 617 | Input/Output: [[98.47402314114913 -17] 81.47402314114913]
Test Case: 618 | Input/Output: [[33.79277771796839 -87] -53.20722228203161]
Test Case: 619 | Input/Output: [[-58.561088676680285 -9] -67.56108867668028]
Test Case: 620 | Input/Output: [[4.391591494980716 -91] -86.60840850501928]
Test Case: 621 | Input/Output: [[-71.74755875523246 -74] -145.74755875523246]
Test Case: 622 | Input/Output: [[63.468815390500254 59] 122.46881539050025]
Test Case: 623 | Input/Output: [[-59.957072928246966 38] -21.957072928246966]
Test Case: 624 | Input/Output: [[66.65615243072332 39] 105.65615243072332]
Test Case: 625 | Input/Output: [[33.51202141147027 85] 118.51202141147027]
Test Case: 626 | Input/Output: [[-51.303767098432054 68] 16.696232901567946]
Test Case: 627 | Input/Output: [[41.79245599267489 79] 120.79245599267489]
Test Case: 628 | Input/Output: [[37.89310847644387 -71] -33.10689152355613]
Test Case: 629 | Input/Output: [[43.220577871265704 22] 65.2205778712657]
Test Case: 630 | Input/Output: [[64.36556103715648 9] 73.36556103715648]
Test Case: 631 | Input/Output: [[64.424699467354 86] 150.424699467354]
Test Case: 632 | Input/Output: [[43.05306553582517 -94] -50.94693446417483]
Test Case: 633 | Input/Output: [[-85.31680467221997 -13] -98.31680467221997]
Test Case: 634 | Input/Output: [[8.009766936087729 80] 88.00976693608773]
Test Case: 635 | Input/Output: [[67.30375699730291 23] 90.30375699730291]
Test Case: 636 | Input/Output: [[-99.70168487279682 -46] -145.70168487279682]
Test Case: 637 | Input/Output: [[-81.79361697217172 83] 1.2063830278282808]
Test Case: 638 | Input/Output: [[-47.92249539365443 82] 34.07750460634557]
Test Case: 639 | Input/Output: [[-33.02571682172892 -10] -43.02571682172892]
Test Case: 640 | Input/Output: [[82.5740255143404 -1] 81.5740255143404]
Test Case: 641 | Input/Output: [[-59.33972431462466 -24] -83.33972431462466]
Test Case: 642 | Input/Output: [[6.032166120435178 -87] -80.96783387956482]
Test Case: 643 | Input/Output: [[-33.005822800572645 22] -11.005822800572645]
Test Case: 644 | Input/Output: [[-5.436049313839504 -3] -8.436049313839504]
Test Case: 645 | Input/Output: [[-24.421880460657547 -82] -106.42188046065755]
Test Case: 646 | Input/Output: [[85.0889740339214 -82] 3.088974033921403]
Test Case: 647 | Input/Output: [[-28.574020574777975 94] 65.42597942522202]
Test Case: 648 | Input/Output: [[-10.029948133072736 29] 18.970051866927264]
Test Case: 649 | Input/Output: [[9.345693641288861 -19] -9.654306358711139]
Test Case: 650 | Input/Output: [[-54.87751505538636 -31] -85.87751505538637]
Test Case: 651 | Input/Output: [[50.20263158725854 -52] -1.7973684127414629]
Test Case: 652 | Input/Output: [[-71.90190106876575 1] -70.90190106876575]
Test Case: 653 | Input/Output: [[-52.06034000006794 -20] -72.06034000006794]
Test Case: 654 | Input/Output: [[-87.60883952968067 78] -9.608839529680665]
Test Case: 655 | Input/Output: [[-27.735825952063635 26] -1.7358259520636352]
Test Case: 656 | Input/Output: [[12.666644238545956 55] 67.66664423854596]
Test Case: 657 | Input/Output: [[-3.2373202329312107 -82] -85.23732023293121]
Test Case: 658 | Input/Output: [[-65.89117168750948 44] -21.891171687509484]
Test Case: 659 | Input/Output: [[83.7367832038772 -71] 12.736783203877195]
Test Case: 660 | Input/Output: [[-16.72846897387788 55] 38.27153102612212]
Test Case: 661 | Input/Output: [[35.82337173792476 54] 89.82337173792476]
Test Case: 662 | Input/Output: [[21.09486605678829 96] 117.09486605678829]
Test Case: 663 | Input/Output: [[-70.49211809775676 -9] -79.49211809775676]
Test Case: 664 | Input/Output: [[-62.74728144139132 -90] -152.74728144139132]
Test Case: 665 | Input/Output: [[34.59926254115828 -25] 9.599262541158282]
Test Case: 666 | Input/Output: [[-3.3991993724048086 -93] -96.39919937240481]
Test Case: 667 | Input/Output: [[-96.39538556459104 -36] -132.39538556459104]
Test Case: 668 | Input/Output: [[-36.86820799757298 -93] -129.868207997573]
Test Case: 669 | Input/Output: [[-49.55322024003905 58] 8.446779759960947]
Test Case: 670 | Input/Output: [[67.12504341263067 -52] 15.125043412630674]
Test Case: 671 | Input/Output: [[24.538697044347572 37] 61.53869704434757]
Test Case: 672 | Input/Output: [[-1.8066565199309537 -89] -90.80665651993095]
Test Case: 673 | Input/Output: [[24.68853695275517 84] 108.68853695275517]
Test Case: 674 | Input/Output: [[47.21996385943231 1] 48.21996385943231]
Test Case: 675 | Input/Output: [[-8.311719590220392 92] 83.68828040977961]
Test Case: 676 | Input/Output: [[-18.822604025397865 -97] -115.82260402539787]
Test Case: 677 | Input/Output: [[44.25588988251471 79] 123.25588988251471]
Test Case: 678 | Input/Output: [[55.24307079726759 23] 78.24307079726759]
Test Case: 679 | Input/Output: [[90.08638449102546 79] 169.08638449102546]
Test Case: 680 | Input/Output: [[20.564088742417425 -55] -34.435911257582575]
Test Case: 681 | Input/Output: [[45.2236065574931 43] 88.2236065574931]
Test Case: 682 | Input/Output: [[-76.90639747992793 34] -42.90639747992793]
Test Case: 683 | Input/Output: [[-98.1654172414171 68] -30.165417241417103]
Test Case: 684 | Input/Output: [[-51.24661131486281 93] 41.75338868513719]
Test Case: 685 | Input/Output: [[56.48773645075693 -5] 51.48773645075693]
Test Case: 686 | Input/Output: [[-90.83936090788664 67] -23.839360907886643]
Test Case: 687 | Input/Output: [[-31.9656807571602 67] 35.0343192428398]
Test Case: 688 | Input/Output: [[44.02657159411925 89] 133.02657159411925]
Test Case: 689 | Input/Output: [[15.255491880452837 -12] 3.255491880452837]
Test Case: 690 | Input/Output: [[12.708268764180673 63] 75.70826876418067]
Test Case: 691 | Input/Output: [[-98.81424077137216 81] -17.814240771372155]
Test Case: 692 | Input/Output: [[-59.8420487709973 3] -56.8420487709973]
Test Case: 693 | Input/Output: [[-0.13417176775976714 29] 28.865828232240233]
Test Case: 694 | Input/Output: [[-87.14409424692322 84] -3.144094246923217]
Test Case: 695 | Input/Output: [[-80.19678494718491 -83] -163.1967849471849]
Test Case: 696 | Input/Output: [[-98.22899810013827 -95] -193.22899810013826]
Test Case: 697 | Input/Output: [[-24.35567125698519 58] 33.64432874301481]
Test Case: 698 | Input/Output: [[61.4044821169571 -88] -26.595517883042902]
Test Case: 699 | Input/Output: [[35.5865638868394 4] 39.5865638868394]
Test Case: 700 | Input/Output: [[-86.57166138283179 -94] -180.5716613828318]
Test Case: 701 | Input/Output: [[-2.6909175184356258 78] 75.30908248156437]
Test Case: 702 | Input/Output: [[-82.01867169859904 15] -67.01867169859904]
Test Case: 703 | Input/Output: [[-18.895758254186987 -36] -54.89575825418699]
Test Case: 704 | Input/Output: [[13.459591126809102 56] 69.4595911268091]
Test Case: 705 | Input/Output: [[56.09167123217421 -54] 2.091671232174207]
Test Case: 706 | Input/Output: [[-10.241341440250224 -34] -44.241341440250224]
Test Case: 707 | Input/Output: [[40.72689673914948 37] 77.72689673914948]
Test Case: 708 | Input/Output: [[-32.703715529044345 79] 46.296284470955655]
Test Case: 709 | Input/Output: [[-40.16252439607375 -80] -120.16252439607375]
Test Case: 710 | Input/Output: [[-46.85573967851631 -64] -110.8557396785163]
Test Case: 711 | Input/Output: [[-74.3975950554049 53] -21.397595055404906]
Test Case: 712 | Input/Output: [[23.82304893654998 -7] 16.82304893654998]
Test Case: 713 | Input/Output: [[-99.93902827219388 29] -70.93902827219388]
Test Case: 714 | Input/Output: [[50.38127980826829 11] 61.38127980826829]
Test Case: 715 | Input/Output: [[-53.12200359404435 -46] -99.12200359404434]
Test Case: 716 | Input/Output: [[-86.211492993312 -98] -184.211492993312]
Test Case: 717 | Input/Output: [[-97.54239615761395 -52] -149.54239615761395]
Test Case: 718 | Input/Output: [[-87.49194890908434 94] 6.508051090915657]
Test Case: 719 | Input/Output: [[10.199789055497007 -74] -63.80021094450299]
Test Case: 720 | Input/Output: [[81.67731243292891 86] 167.67731243292891]
Test Case: 721 | Input/Output: [[-98.32081038142577 78] -20.320810381425773]
Test Case: 722 | Input/Output: [[49.38989439280164 -18] 31.389894392801637]
Test Case: 723 | Input/Output: [[24.286591055233146 -99] -74.71340894476685]
Test Case: 724 | Input/Output: [[-69.03476081690872 -92] -161.03476081690872]
Test Case: 725 | Input/Output: [[78.37282372553699 -90] -11.627176274463011]
Test Case: 726 | Input/Output: [[28.279276445945982 42] 70.27927644594598]
Test Case: 727 | Input/Output: [[61.837797629847074 -69] -7.162202370152926]
Test Case: 728 | Input/Output: [[-78.10604373863634 -94] -172.10604373863634]
Test Case: 729 | Input/Output: [[-95.66339956470517 47] -48.66339956470517]
Test Case: 730 | Input/Output: [[-11.099003986882835 76] 64.90099601311717]
Test Case: 731 | Input/Output: [[63.28349974677678 54] 117.28349974677678]
Test Case: 732 | Input/Output: [[75.02117457049812 -12] 63.02117457049812]
Test Case: 733 | Input/Output: [[-78.17364082139089 -96] -174.1736408213909]
Test Case: 734 | Input/Output: [[42.189384453817866 -50] -7.8106155461821345]
Test Case: 735 | Input/Output: [[5.384571230197579 69] 74.38457123019758]
Test Case: 736 | Input/Output: [[-4.06520653407641 -15] -19.06520653407641]
Test Case: 737 | Input/Output: [[-44.72548362013868 14] -30.725483620138682]
Test Case: 738 | Input/Output: [[-60.33884059937209 -12] -72.33884059937209]
Test Case: 739 | Input/Output: [[-47.38018699484143 17] -30.38018699484143]
Test Case: 740 | Input/Output: [[72.57855658958326 11] 83.57855658958326]
Test Case: 741 | Input/Output: [[-97.85979051671174 47] -50.85979051671174]
Test Case: 742 | Input/Output: [[71.89206607336541 -46] 25.892066073365413]
Test Case: 743 | Input/Output: [[-95.5237671053472 -16] -111.5237671053472]
Test Case: 744 | Input/Output: [[45.78778937115388 29] 74.78778937115388]
Test Case: 745 | Input/Output: [[-32.811085371654826 96] 63.188914628345174]
Test Case: 746 | Input/Output: [[-0.4501260425701048 -19] -19.450126042570105]
Test Case: 747 | Input/Output: [[-70.21300440842387 2] -68.21300440842387]
Test Case: 748 | Input/Output: [[74.20822722142827 -58] 16.208227221428274]
Test Case: 749 | Input/Output: [[-37.731158745956186 -51] -88.73115874595618]
Test Case: 750 | Input/Output: [[-4.452623384264427 -64] -68.45262338426443]
Test Case: 751 | Input/Output: [[-65.91631441564306 91] 25.083685584356942]
Test Case: 752 | Input/Output: [[12.814687028441114 48] 60.814687028441114]
Test Case: 753 | Input/Output: [[-73.4028676534222 -94] -167.40286765342222]
Test Case: 754 | Input/Output: [[17.48612369406308 -37] -19.51387630593692]
Test Case: 755 | Input/Output: [[-39.84738325439068 30] -9.847383254390678]
Test Case: 756 | Input/Output: [[15.102626866964883 24] 39.10262686696488]
Test Case: 757 | Input/Output: [[24.25462463094692 -37] -12.745375369053079]
Test Case: 758 | Input/Output: [[-16.75246069519048 -36] -52.75246069519048]
Test Case: 759 | Input/Output: [[-70.01954474480962 67] -3.0195447448096218]
Test Case: 760 | Input/Output: [[28.23400182926318 -89] -60.76599817073682]
Test Case: 761 | Input/Output: [[-15.059707999985122 -59] -74.05970799998512]
Test Case: 762 | Input/Output: [[23.776703337747335 97] 120.77670333774734]
Test Case: 763 | Input/Output: [[-63.13044907440275 48] -15.130449074402748]
Test Case: 764 | Input/Output: [[-97.96135182565887 -31] -128.96135182565888]
Test Case: 765 | Input/Output: [[14.095068706363435 90] 104.09506870636343]
Test Case: 766 | Input/Output: [[-25.901791266569234 -68] -93.90179126656923]
Test Case: 767 | Input/Output: [[-77.80731942607426 -74] -151.80731942607426]
Test Case: 768 | Input/Output: [[-0.17267675704803764 56] 55.82732324295196]
Test Case: 769 | Input/Output: [[86.65889732809865 21] 107.65889732809865]
Test Case: 770 | Input/Output: [[33.459295604612464 -36] -2.540704395387536]
Test Case: 771 | Input/Output: [[-51.82163391431014 -31] -82.82163391431014]
Test Case: 772 | Input/Output: [[60.44060768437177 -61] -0.5593923156282301]
Test Case: 773 | Input/Output: [[71.3519909529939 50] 121.3519909529939]
Test Case: 774 | Input/Output: [[-25.860822817036137 -18] -43.86082281703614]
Test Case: 775 | Input/Output: [[-67.86795875659229 42] -25.867958756592287]
Test Case: 776 | Input/Output: [[-68.53384817203812 -93] -161.53384817203812]
Test Case: 777 | Input/Output: [[-2.846207492124691 19] 16.15379250787531]
Test Case: 778 | Input/Output: [[49.18959321339122 -33] 16.18959321339122]
Test Case: 779 | Input/Output: [[-97.29026458223295 -89] -186.29026458223296]
Test Case: 780 | Input/Output: [[35.82129931064338 -1] 34.82129931064338]
Test Case: 781 | Input/Output: [[26.53117904350431 42] 68.53117904350431]
Test Case: 782 | Input/Output: [[83.54249156347498 -27] 56.54249156347498]
Test Case: 783 | Input/Output: [[-65.76509814228959 -57] -122.76509814228959]
Test Case: 784 | Input/Output: [[19.65843542525181 -61] -41.34156457474819]
Test Case: 785 | Input/Output: [[87.66999265482977 -40] 47.66999265482977]
Test Case: 786 | Input/Output: [[-16.016401455367358 -70] -86.01640145536736]
Test Case: 787 | Input/Output: [[-64.2878121935001 24] -40.2878121935001]
Test Case: 788 | Input/Output: [[28.58402584368335 -32] -3.4159741563166506]
Test Case: 789 | Input/Output: [[69.05704035848487 -39] 30.05704035848487]
Test Case: 790 | Input/Output: [[-73.00453551701713 -89] -162.00453551701713]
Test Case: 791 | Input/Output: [[-44.150223370141184 -63] -107.15022337014119]
Test Case: 792 | Input/Output: [[-2.773465506050769 -82] -84.77346550605077]
Test Case: 793 | Input/Output: [[70.51406405868147 -11] 59.51406405868147]
Test Case: 794 | Input/Output: [[-10.072749581171479 -3] -13.072749581171479]
Test Case: 795 | Input/Output: [[-94.1491415823165 2] -92.1491415823165]
Test Case: 796 | Input/Output: [[75.04510975702664 2] 77.04510975702664]
Test Case: 797 | Input/Output: [[-45.49747341762445 -14] -59.49747341762445]
Test Case: 798 | Input/Output: [[31.081930722093944 -59] -27.918069277906056]
Test Case: 799 | Input/Output: [[4.067588433902529 30] 34.06758843390253]
Test Case: 800 | Input/Output: [[61.3467580291929 71] 132.3467580291929]
Test Case: 801 | Input/Output: [[48.04022373898454 -34] 14.040223738984537]
Test Case: 802 | Input/Output: [[-78.23109491079862 -94] -172.23109491079862]
Test Case: 803 | Input/Output: [[-58.57891634436678 -41] -99.57891634436677]
Test Case: 804 | Input/Output: [[29.395902933369143 15] 44.39590293336914]
Test Case: 805 | Input/Output: [[-91.71469980592877 83] -8.714699805928774]
Test Case: 806 | Input/Output: [[32.53253396301804 90] 122.53253396301804]
Test Case: 807 | Input/Output: [[-38.67203873096692 78] 39.32796126903308]
Test Case: 808 | Input/Output: [[-92.81431492062995 -59] -151.81431492062995]
Test Case: 809 | Input/Output: [[-84.84274544281077 -19] -103.84274544281077]
Test Case: 810 | Input/Output: [[-19.4319297087132 96] 76.5680702912868]
Test Case: 811 | Input/Output: [[96.02608684768882 -80] 16.026086847688816]
Test Case: 812 | Input/Output: [[-43.25130349924176 79] 35.74869650075824]
Test Case: 813 | Input/Output: [[75.42431741190214 -85] -9.575682588097862]
Test Case: 814 | Input/Output: [[-29.434336741316727 -75] -104.43433674131673]
Test Case: 815 | Input/Output: [[-91.26766008826101 -89] -180.267660088261]
Test Case: 816 | Input/Output: [[42.722716626190135 -90] -47.277283373809865]
Test Case: 817 | Input/Output: [[48.22558219715455 -44] 4.2255821971545515]
Test Case: 818 | Input/Output: [[8.376612168138053 -41] -32.62338783186195]
Test Case: 819 | Input/Output: [[80.72125229908033 -72] 8.721252299080334]
Test Case: 820 | Input/Output: [[43.400420450815204 -37] 6.400420450815204]
Test Case: 821 | Input/Output: [[-63.14726329186611 9] -54.14726329186611]
Test Case: 822 | Input/Output: [[5.22929493440742 27] 32.22929493440742]
Test Case: 823 | Input/Output: [[45.96251562130226 6] 51.96251562130226]
Test Case: 824 | Input/Output: [[53.898321342890426 49] 102.89832134289043]
Test Case: 825 | Input/Output: [[13.850953112853716 26] 39.850953112853716]
Test Case: 826 | Input/Output: [[41.62044682583871 86] 127.62044682583871]
Test Case: 827 | Input/Output: [[55.20592061795952 65] 120.20592061795952]
Test Case: 828 | Input/Output: [[-17.36254552962582 76] 58.63745447037418]
Test Case: 829 | Input/Output: [[-7.8934324117275025 -6] -13.893432411727503]
Test Case: 830 | Input/Output: [[-46.30021334917376 -61] -107.30021334917376]
Test Case: 831 | Input/Output: [[29.940504528053964 -68] -38.059495471946036]
Test Case: 832 | Input/Output: [[-92.29098598118335 -67] -159.29098598118335]
Test Case: 833 | Input/Output: [[24.49319073704305 -48] -23.50680926295695]
Test Case: 834 | Input/Output: [[-56.042627825780485 99] 42.957372174219515]
Test Case: 835 | Input/Output: [[-17.12112052717049 62] 44.87887947282951]
Test Case: 836 | Input/Output: [[67.51724376090547 -89] -21.482756239094527]
Test Case: 837 | Input/Output: [[36.46447083874364 4] 40.46447083874364]
Test Case: 838 | Input/Output: [[57.42056257013792 58] 115.42056257013792]
Test Case: 839 | Input/Output: [[95.2192429485865 -25] 70.2192429485865]
Test Case: 840 | Input/Output: [[53.128011801654196 1] 54.128011801654196]
Test Case: 841 | Input/Output: [[4.731392144432306 -54] -49.268607855567694]
Test Case: 842 | Input/Output: [[3.568863453886479 -8] -4.431136546113521]
Test Case: 843 | Input/Output: [[-99.59642864065479 58] -41.59642864065479]
Test Case: 844 | Input/Output: [[-22.252809247693477 96] 73.74719075230652]
Test Case: 845 | Input/Output: [[42.66704903678118 51] 93.66704903678118]
Test Case: 846 | Input/Output: [[73.5181295269681 -85] -11.481870473031904]
Test Case: 847 | Input/Output: [[72.95700504822454 6] 78.95700504822454]
Test Case: 848 | Input/Output: [[-60.063536252415915 17] -43.063536252415915]
Test Case: 849 | Input/Output: [[10.891138228049684 -18] -7.108861771950316]
Test Case: 850 | Input/Output: [[5.243181267112874 94] 99.24318126711287]
Test Case: 851 | Input/Output: [[-25.662756932496862 -61] -86.66275693249686]
Test Case: 852 | Input/Output: [[6.514212685667957 -3] 3.5142126856679567]
Test Case: 853 | Input/Output: [[13.818460313841214 -76] -62.181539686158786]
Test Case: 854 | Input/Output: [[91.16226581249393 6] 97.16226581249393]
Test Case: 855 | Input/Output: [[88.87284168802333 5] 93.87284168802333]
Test Case: 856 | Input/Output: [[47.25953346063386 -17] 30.25953346063386]
Test Case: 857 | Input/Output: [[-75.48038148044574 23] -52.48038148044574]
Test Case: 858 | Input/Output: [[-35.977718286480595 -23] -58.977718286480595]
Test Case: 859 | Input/Output: [[-42.712475906158296 23] -19.712475906158296]
Test Case: 860 | Input/Output: [[-42.234009697273734 -53] -95.23400969727373]
Test Case: 861 | Input/Output: [[-25.630666937449774 -98] -123.63066693744977]
Test Case: 862 | Input/Output: [[1.1253037878627055 -95] -93.8746962121373]
Test Case: 863 | Input/Output: [[91.40586417999972 -26] 65.40586417999972]
Test Case: 864 | Input/Output: [[-53.119875106401146 96] 42.880124893598854]
Test Case: 865 | Input/Output: [[-91.50876402770473 -80] -171.50876402770473]
Test Case: 866 | Input/Output: [[21.37383342125632 -23] -1.6261665787436783]
Test Case: 867 | Input/Output: [[-74.57595835168922 42] -32.57595835168922]
Test Case: 868 | Input/Output: [[-36.57582205198005 67] 30.424177948019953]
Test Case: 869 | Input/Output: [[88.84297240653649 35] 123.84297240653649]
Test Case: 870 | Input/Output: [[-19.965942214516758 56] 36.03405778548324]
Test Case: 871 | Input/Output: [[36.91128015725957 -40] -3.0887198427404314]
Test Case: 872 | Input/Output: [[-16.8291806934038 87] 70.1708193065962]
Test Case: 873 | Input/Output: [[-33.77282230866423 -50] -83.77282230866423]
Test Case: 874 | Input/Output: [[44.2395341576414 18] 62.2395341576414]
Test Case: 875 | Input/Output: [[40.02390698615247 74] 114.02390698615247]
Test Case: 876 | Input/Output: [[34.48387675205538 36] 70.48387675205538]
Test Case: 877 | Input/Output: [[-48.89510377528743 72] 23.10489622471257]
Test Case: 878 | Input/Output: [[-98.67469502901187 -94] -192.67469502901187]
Test Case: 879 | Input/Output: [[-89.67258591193219 39] -50.67258591193219]
Test Case: 880 | Input/Output: [[81.26065799589469 -92] -10.73934200410531]
Test Case: 881 | Input/Output: [[38.613724710675456 45] 83.61372471067546]
Test Case: 882 | Input/Output: [[73.08299612248109 -80] -6.917003877518908]
Test Case: 883 | Input/Output: [[-69.44742516591742 64] -5.447425165917423]
Test Case: 884 | Input/Output: [[-84.38212227445973 -94] -178.38212227445973]
Test Case: 885 | Input/Output: [[-35.65450225264787 -20] -55.65450225264787]
Test Case: 886 | Input/Output: [[65.78285958250493 -48] 17.782859582504926]
Test Case: 887 | Input/Output: [[34.12684867054256 -15] 19.126848670542557]
Test Case: 888 | Input/Output: [[-25.52194363316316 -100] -125.52194363316316]
Test Case: 889 | Input/Output: [[-70.31262035891143 31] -39.31262035891143]
Test Case: 890 | Input/Output: [[30.020093204899666 19] 49.020093204899666]
Test Case: 891 | Input/Output: [[-37.465546347870024 -49] -86.46554634787003]
Test Case: 892 | Input/Output: [[-23.848558370014388 -14] -37.84855837001439]
Test Case: 893 | Input/Output: [[98.61579432102499 -93] 5.6157943210249925]
Test Case: 894 | Input/Output: [[51.95188959508934 29] 80.95188959508934]
Test Case: 895 | Input/Output: [[91.65192712842824 2] 93.65192712842824]
Test Case: 896 | Input/Output: [[37.34996016961344 99] 136.34996016961344]
Test Case: 897 | Input/Output: [[-46.70743501838079 45] -1.7074350183807923]
Test Case: 898 | Input/Output: [[28.776184134076402 43] 71.7761841340764]
Test Case: 899 | Input/Output: [[71.93561101894116 11] 82.93561101894116]
Test Case: 900 | Input/Output: [[-10.462442709011157 98] 87.53755729098884]
Test Case: 901 | Input/Output: [[21.04834283579558 -47] -25.95165716420442]
Test Case: 902 | Input/Output: [[38.71823219915183 31] 69.71823219915183]
Test Case: 903 | Input/Output: [[-78.81497498864704 32] -46.81497498864704]
Test Case: 904 | Input/Output: [[60.38911544473336 10] 70.38911544473336]
Test Case: 905 | Input/Output: [[52.208277232607 -30] 22.208277232607003]
Test Case: 906 | Input/Output: [[61.65042141898326 -65] -3.3495785810167433]
Test Case: 907 | Input/Output: [[90.03693520762994 -43] 47.03693520762994]
Test Case: 908 | Input/Output: [[40.54048264319542 18] 58.54048264319542]
Test Case: 909 | Input/Output: [[91.69843007523463 -16] 75.69843007523463]
Test Case: 910 | Input/Output: [[-69.77992067631533 -2] -71.77992067631533]
Test Case: 911 | Input/Output: [[-11.722390271389415 12] 0.2776097286105852]
Test Case: 912 | Input/Output: [[88.71316759879014 53] 141.71316759879014]
Test Case: 913 | Input/Output: [[51.80034616940438 -24] 27.800346169404378]
Test Case: 914 | Input/Output: [[57.324771363062155 12] 69.32477136306215]
Test Case: 915 | Input/Output: [[45.04500872601315 68] 113.04500872601315]
Test Case: 916 | Input/Output: [[93.4096273498254 -47] 46.4096273498254]
Test Case: 917 | Input/Output: [[-34.39122477792877 -66] -100.39122477792877]
Test Case: 918 | Input/Output: [[-18.222755307120735 72] 53.777244692879265]
Test Case: 919 | Input/Output: [[25.821891906909713 -13] 12.821891906909713]
Test Case: 920 | Input/Output: [[42.497770078266456 -96] -53.502229921733544]
Test Case: 921 | Input/Output: [[-68.18609892334106 22] -46.18609892334106]
Test Case: 922 | Input/Output: [[-60.43545175337071 -14] -74.4354517533707]
Test Case: 923 | Input/Output: [[59.797665879056495 92] 151.7976658790565]
Test Case: 924 | Input/Output: [[59.23733882892975 -37] 22.23733882892975]
Test Case: 925 | Input/Output: [[58.29051286250592 86] 144.29051286250592]
Test Case: 926 | Input/Output: [[-14.707216843785773 88] 73.29278315621423]
Test Case: 927 | Input/Output: [[-46.596203676655826 -5] -51.596203676655826]
Test Case: 928 | Input/Output: [[-58.08069848535074 20] -38.08069848535074]
Test Case: 929 | Input/Output: [[53.645722738333404 -72] -18.354277261666596]
Test Case: 930 | Input/Output: [[62.42855017361333 -4] 58.42855017361333]
Test Case: 931 | Input/Output: [[33.74347552281 -17] 16.74347552281]
Test Case: 932 | Input/Output: [[3.586524572807832 86] 89.58652457280783]
Test Case: 933 | Input/Output: [[-10.858296051037811 34] 23.14170394896219]
Test Case: 934 | Input/Output: [[82.63089544629344 -21] 61.63089544629344]
Test Case: 935 | Input/Output: [[74.91829133004293 40] 114.91829133004293]
Test Case: 936 | Input/Output: [[53.75491894172799 33] 86.754918941728]
Test Case: 937 | Input/Output: [[8.696598295974383 13] 21.696598295974383]
Test Case: 938 | Input/Output: [[47.09132198482905 -85] -37.90867801517095]
Test Case: 939 | Input/Output: [[63.2200486595292 6] 69.2200486595292]
Test Case: 940 | Input/Output: [[59.65895306713554 -91] -31.341046932864458]
Test Case: 941 | Input/Output: [[-67.54013823321932 -68] -135.54013823321932]
Test Case: 942 | Input/Output: [[29.63405096716022 49] 78.63405096716022]
Test Case: 943 | Input/Output: [[-42.92439200899105 -42] -84.92439200899105]
Test Case: 944 | Input/Output: [[25.680819017552878 57] 82.68081901755288]
Test Case: 945 | Input/Output: [[-2.4837506969700485 -37] -39.48375069697005]
Test Case: 946 | Input/Output: [[-70.99812766422926 78] 7.0018723357707415]
Test Case: 947 | Input/Output: [[75.85846051830791 93] 168.8584605183079]
Test Case: 948 | Input/Output: [[-28.085143876269925 -8] -36.085143876269925]
Test Case: 949 | Input/Output: [[60.58409193566362 -43] 17.584091935663622]
Test Case: 950 | Input/Output: [[19.880089472811633 -53] -33.11991052718837]
Test Case: 951 | Input/Output: [[-43.758995137468744 6] -37.758995137468744]
Test Case: 952 | Input/Output: [[35.36311398296613 50] 85.36311398296613]
Test Case: 953 | Input/Output: [[-46.17971614962384 90] 43.82028385037616]
Test Case: 954 | Input/Output: [[-18.871252218136576 18] -0.8712522181365756]
Test Case: 955 | Input/Output: [[54.153705261991746 39] 93.15370526199175]
Test Case: 956 | Input/Output: [[-7.98213149803513 -44] -51.98213149803513]
Test Case: 957 | Input/Output: [[-12.983630240064258 -98] -110.98363024006426]
Test Case: 958 | Input/Output: [[15.072840309870955 53] 68.07284030987095]
Test Case: 959 | Input/Output: [[-69.01777441825725 -17] -86.01777441825725]
Test Case: 960 | Input/Output: [[-3.8287895794597944 -3] -6.828789579459794]
Test Case: 961 | Input/Output: [[-54.311657759673146 -19] -73.31165775967315]
Test Case: 962 | Input/Output: [[-92.83652745620626 65] -27.836527456206255]
Test Case: 963 | Input/Output: [[27.91772618516599 -83] -55.08227381483401]
Test Case: 964 | Input/Output: [[81.59301855863953 85] 166.59301855863953]
Test Case: 965 | Input/Output: [[33.03770146529422 31] 64.03770146529422]
Test Case: 966 | Input/Output: [[3.2868467308549043 -97] -93.7131532691451]
Test Case: 967 | Input/Output: [[-50.5584582530245 49] -1.5584582530244973]
Test Case: 968 | Input/Output: [[36.530218525993064 60] 96.53021852599306]
Test Case: 969 | Input/Output: [[-4.403524935496677 -24] -28.403524935496677]
Test Case: 970 | Input/Output: [[-4.458490726536695 -62] -66.4584907265367]
Test Case: 971 | Input/Output: [[19.059449306984973 -78] -58.94055069301503]
Test Case: 972 | Input/Output: [[-67.2787473576645 10] -57.2787473576645]
Test Case: 973 | Input/Output: [[-36.72193207368788 -66] -102.72193207368788]
Test Case: 974 | Input/Output: [[-58.393660044998505 -52] -110.39366004499851]
Test Case: 975 | Input/Output: [[91.36005932354777 -70] 21.360059323547773]
Test Case: 976 | Input/Output: [[84.33479360408705 74] 158.33479360408705]
Test Case: 977 | Input/Output: [[-36.11730822852304 -54] -90.11730822852303]
Test Case: 978 | Input/Output: [[51.59777611675028 81] 132.59777611675028]
Test Case: 979 | Input/Output: [[-2.6704766262459287 -20] -22.67047662624593]
Test Case: 980 | Input/Output: [[50.31472366325377 65] 115.31472366325377]
Test Case: 981 | Input/Output: [[-72.43190531728703 74] 1.5680946827129674]
Test Case: 982 | Input/Output: [[3.038988569787932 -17] -13.961011430212068]
Test Case: 983 | Input/Output: [[22.038745114612453 -95] -72.96125488538755]
Test Case: 984 | Input/Output: [[-65.0809192880267 52] -13.080919288026706]
Test Case: 985 | Input/Output: [[-67.3756455744295 64] -3.375645574429498]
Test Case: 986 | Input/Output: [[-33.837335912166495 -48] -81.8373359121665]
Test Case: 987 | Input/Output: [[-91.21797765106786 -43] -134.21797765106786]
Test Case: 988 | Input/Output: [[85.37883969072027 95] 180.37883969072027]
Test Case: 989 | Input/Output: [[-78.11742339879211 76] -2.1174233987921127]
Test Case: 990 | Input/Output: [[50.54534863809255 55] 105.54534863809255]
Test Case: 991 | Input/Output: [[-67.66425412960524 -23] -90.66425412960524]
Test Case: 992 | Input/Output: [[51.42803018382298 87] 138.42803018382298]
Test Case: 993 | Input/Output: [[-87.37915911418797 -56] -143.37915911418798]
Test Case: 994 | Input/Output: [[34.903128505198424 -67] -32.096871494801576]
Test Case: 995 | Input/Output: [[94.86240336417973 -81] 13.862403364179727]
Test Case: 996 | Input/Output: [[20.57890716727566 52] 72.57890716727566]
Test Case: 997 | Input/Output: [[93.0555804566113 17] 110.0555804566113]
Test Case: 998 | Input/Output: [[-95.08852374400796 -87] -182.08852374400794]
Test Case: 999 | Input/Output: [[-41.94641087783402 49] 7.053589122165981]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -58 -28 -89 -85 -92 108 56 -92 41 -78 50 29 53 33 -89 -62
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 54860.0
Test mean error for best: 27.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -86.7252441384
Correct output: -151.3865608082 | Program output: -79.3865608082
Correct output: -39.5964789701 | Program output: -28.5964789701
Correct output: -165.6552500023 | Program output: -85.6552500023
Correct output: 115.8637099929 | Program output: 78.8637099929 
Correct output: 106.2814426659 | Program output: 53.2814426659 
Correct output: 176.1918465521 | Program output: 76.1918465521 
Correct output: -17.8149835933 | Program output: 21.1850164067 
Correct output: -65.5829878959 | Program output: 2.4170121041  
Correct output: 27.6366895788  | Program output: 59.6366895788 
Correct output: -19.5737445927 | Program output: -21.5737445927
Correct output: -146.6957573417 | Program output: -47.6957573417
Correct output: -93.4856677865 | Program output: -78.4856677865
Correct output: -62.4257652273 | Program output: -70.4257652273
Correct output: 8.389607373    | Program output: 49.389607373  
Correct output: -88.5634422156 | Program output: -52.5634422156
Correct output: 28.8889248865  | Program output: -54.1110751135
Correct output: 15.595489344   | Program output: -39.404510656 
Correct output: -49.1003576661 | Program output: -94.1003576661
Correct output: -113.1474461804 | Program output: -98.1474461804
Correct output: -19.0779583365 | Program output: 32.9220416635 
Correct output: -3.1068023861  | Program output: -76.1068023861
Correct output: 52.1593783355  | Program output: 80.1593783355 
Correct output: 128.3998855036 | Program output: 29.3998855036 
Correct output: 31.5586049792  | Program output: 78.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_rot} {:instruction integer_yankdup} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction integer_pop} {:instruction integer_stackdepth} {:instruction float_swap} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction integer_pop} {:instruction integer_dup_times} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction float_dup_times} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction integer_dup_items} {:instruction integer_fromfloat} {:instruction integer_sub} {:instruction float_dup_items} {:instruction integer_stackdepth} {:instruction tag_float_979} {:instruction float_cos} {:instruction in1} {:instruction integer_dec} {:instruction float_swap} {:instruction integer_max} {:instruction print_float} {:instruction float_sub} {:instruction float_max} {:instruction integer_flush} {:instruction float_sub} {:instruction in1})
Best program: (integer_mult integer_mult float_dec integer_stackdepth integer_add integer_rot integer_yankdup integer_dup_times integer_mult integer_pop integer_stackdepth float_swap float_dup_items integer_stackdepth integer_pop integer_dup_times integer_dup_times float_dup_times float_dup_times float_min integer_stackdepth float_sin integer_dup_items integer_fromfloat integer_sub float_dup_items integer_stackdepth tag_float_979 float_cos in1 integer_dec float_swap integer_max print_float float_sub float_max integer_flush float_sub in1)
Errors: [18.0 2 72.0 3 11.0 2 80.0 2 37.0 3 53.0 3 100.0 1 39.0 12 68.0 13 32.0 2 2.0 2 99.0 2 15.0 2 8.0 2 41.0 2 36.0 2 83.0 12 55.0 12 45.0 2 15.0 3 52.0 12 73.0 2 28.0 2 99.0 2 47.0 2]
Total: 1312.0
Mean: 26.24
Genome size: 39
Size: 40
Percent parens: 0.025
--- Population Statistics ---
Average total errors in population: 18304.216971899998
Median total errors in population: 25344.0
Error averages by case: (711.4257450999978 13.214 742.7959703 14.092 714.280921399999 13.194 746.5903507999985 14.089 721.341949299998 13.266 718.6636491999975 13.323 737.4608623999995 13.242 709.861525999999 13.809 716.1301048999995 13.871 712.3358609999998 12.606 699.0426951999998 13.259 742.2301438999981 14.126 727.7201484999994 13.34 707.8985370000007 13.335 709.6956225999996 10.948 727.1928894999987 13.279 708.3964665000008 13.26 704.7885520000011 12.28 710.0166889999996 13.204 731.6407701000019 14.082 710.5165060999991 13.767 705.2592437999996 12.323 717.0740238000004 12.559 726.1322033999991 13.221 715.6065400999984 12.43)
Error minima by case: (0.3371 2 40.3866 3 0.0878 2 54.6553 2 9.5616 3 0.0207 3 17.8082 1 1.185 9 0.583 7 0.2313 2 0.0 1 35.6958 1 0.4857 2 2.5742 1 0.3896 2 0.5704 2 0.3003 7 1.4045 8 0.2519 2 2.1474 3 0.078 8 0.1068 2 0.6736 2 22.0978 2 0.1005 2)
Average genome size in population (length): 50.205
Average program size in population (points): 51.205
Average percent parens in population: 0.042
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 2
Genome diversity (% unique Plush genomes):	 0.999
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 2
Syntactic diversity (% unique Push programs):	 0.999
Total error diversity:				 0.305
Error (vector) diversity:			 0.329
Behavioral diversity:				 0.345
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1260136
--- Timings ---
Current time: 1529615776627 milliseconds
Total Time:           3.8 seconds
Initialization:       0.1 seconds,  3.0%
Reproduction:         0.6 seconds, 15.0%
Fitness Testing:      3.1 seconds, 82.0%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 54860.0
Test mean error for best: 27.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -86.7252441384
Correct output: -151.3865608082 | Program output: -79.3865608082
Correct output: -39.5964789701 | Program output: -28.5964789701
Correct output: -165.6552500023 | Program output: -85.6552500023
Correct output: 115.8637099929 | Program output: 78.8637099929 
Correct output: 106.2814426659 | Program output: 53.2814426659 
Correct output: 176.1918465521 | Program output: 76.1918465521 
Correct output: -17.8149835933 | Program output: 21.1850164067 
Correct output: -65.5829878959 | Program output: 2.4170121041  
Correct output: 27.6366895788  | Program output: 59.6366895788 
Correct output: -19.5737445927 | Program output: -21.5737445927
Correct output: -146.6957573417 | Program output: -47.6957573417
Correct output: -93.4856677865 | Program output: -78.4856677865
Correct output: -62.4257652273 | Program output: -70.4257652273
Correct output: 8.389607373    | Program output: 49.389607373  
Correct output: -88.5634422156 | Program output: -52.5634422156
Correct output: 28.8889248865  | Program output: -54.1110751135
Correct output: 15.595489344   | Program output: -39.404510656 
Correct output: -49.1003576661 | Program output: -94.1003576661
Correct output: -113.1474461804 | Program output: -98.1474461804
Correct output: -19.0779583365 | Program output: 32.9220416635 
Correct output: -3.1068023861  | Program output: -76.1068023861
Correct output: 52.1593783355  | Program output: 80.1593783355 
Correct output: 128.3998855036 | Program output: 29.3998855036 
Correct output: 31.5586049792  | Program output: 78.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction print_float} {:instruction float_shove} {:instruction in2} {:instruction float_min} {:instruction float_cos} {:instruction integer_mod} {:instruction integer_min} {:instruction in1} {:instruction float_yank} {:instruction float_stackdepth} {:instruction float_mult} {:instruction float_yankdup} {:instruction print_float} {:instruction float_inc} {:instruction integer_dup_times} {:instruction float_swap} {:instruction in2})
Best program: (print_float float_shove in2 float_min float_cos integer_mod integer_min in1 float_yank float_stackdepth float_mult float_yankdup print_float float_inc integer_dup_times float_swap in2)
Errors: [18.0 2 72.0 3 11.0 2 80.0 2 37.0 3 53.0 3 100.0 1 39.0 12 68.0 13 32.0 2 2.0 2 99.0 2 15.0 2 8.0 2 41.0 2 36.0 2 83.0 12 55.0 12 45.0 2 15.0 3 52.0 12 73.0 2 28.0 2 99.0 2 47.0 2]
Total: 1312.0
Mean: 26.24
Genome size: 17
Size: 18
Percent parens: 0.056
--- Population Statistics ---
Average total errors in population: 7272.778922800001
Median total errors in population: 2087.7506
Error averages by case: (272.03742459999773 10.858 324.7425828000019 11.744 257.41351730000264 10.823 333.41414000000026 11.558 289.9905573999975 11.079 286.54823480000107 11.249 330.7483337999975 10.943 252.36680559999988 12.748 269.7751251000002 12.918 262.3228475000007 10.682 230.2109257000006 11.011 323.648760399997 11.579 287.37010919999904 10.967 258.5048538999995 11.217 255.92276769999887 9.369 286.8536531000016 10.83 271.7544211999998 12.703 256.76612719999974 11.728 273.4420850999991 10.797 298.09360519999876 11.654 258.20311770000023 12.73 263.78466060000113 10.153 273.3793017000008 10.451 303.47322449999956 10.831 271.1537406999983 10.236)
Error minima by case: (0.3301 2 32.8366 3 0.0878 2 40.8366 2 9.5616 3 0.0207 3 69.8897 1 0.1634 9 0.583 7 0.2313 2 0.0 1 35.6958 1 0.5143 2 2.5742 1 0.3896 2 2.4366 2 0.3003 7 1.4045 8 0.2519 2 2.1474 3 0.078 8 0.1068 2 2.1594 2 22.0978 1 1.5891 2)
Average genome size in population (length): 59.395
Average program size in population (points): 60.395
Average percent parens in population: 0.023
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.53
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.797
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.797
Total error diversity:				 0.279
Error (vector) diversity:			 0.296
Behavioral diversity:				 0.317
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2751886
--- Timings ---
Current time: 1529615780492 milliseconds
Total Time:           7.9 seconds
Initialization:       0.1 seconds,  1.4%
Reproduction:         2.5 seconds, 31.3%
Fitness Testing:      4.8 seconds, 60.4%
Report:               0.5 seconds,  6.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 54860.0
Test mean error for best: 27.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -86.7252441384
Correct output: -151.3865608082 | Program output: -79.3865608082
Correct output: -39.5964789701 | Program output: -28.5964789701
Correct output: -165.6552500023 | Program output: -85.6552500023
Correct output: 115.8637099929 | Program output: 78.8637099929 
Correct output: 106.2814426659 | Program output: 53.2814426659 
Correct output: 176.1918465521 | Program output: 76.1918465521 
Correct output: -17.8149835933 | Program output: 21.1850164067 
Correct output: -65.5829878959 | Program output: 2.4170121041  
Correct output: 27.6366895788  | Program output: 59.6366895788 
Correct output: -19.5737445927 | Program output: -21.5737445927
Correct output: -146.6957573417 | Program output: -47.6957573417
Correct output: -93.4856677865 | Program output: -78.4856677865
Correct output: -62.4257652273 | Program output: -70.4257652273
Correct output: 8.389607373    | Program output: 49.389607373  
Correct output: -88.5634422156 | Program output: -52.5634422156
Correct output: 28.8889248865  | Program output: -54.1110751135
Correct output: 15.595489344   | Program output: -39.404510656 
Correct output: -49.1003576661 | Program output: -94.1003576661
Correct output: -113.1474461804 | Program output: -98.1474461804
Correct output: -19.0779583365 | Program output: 32.9220416635 
Correct output: -3.1068023861  | Program output: -76.1068023861
Correct output: 52.1593783355  | Program output: 80.1593783355 
Correct output: 128.3998855036 | Program output: 29.3998855036 
Correct output: 31.5586049792  | Program output: 78.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_dup} {:instruction in1} {:instruction float_dup} {:instruction integer_dup_times} {:instruction integer_mult} {:instruction float_tan} {:instruction integer_fromfloat} {:instruction float_yankdup} {:instruction float_rot} {:instruction print_float} {:instruction float_dec} {:instruction float_div} {:instruction float_mod} {:instruction float_swap} {:instruction float_yankdup} {:instruction float_cos} {:instruction float_sub} {:instruction float_swap} {:instruction integer_div} {:instruction in1} {:instruction integer_max} {:instruction print_integer} {:instruction float_flush} {:instruction float_add} {:instruction float_div} {:instruction integer_sub} {:instruction integer_add} {:instruction integer_dup_items} {:instruction float_yankdup} {:instruction integer_yankdup} {:instruction float_max} {:instruction float_cos} {:instruction -96.47531233971003} {:instruction float_inc} {:instruction float_yank} {:instruction integer_add} {:instruction integer_rot} {:instruction float_sub} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_swap} {:instruction integer_add} {:instruction float_inc} {:instruction float_dup_times} {:instruction integer_shove} {:instruction integer_yank} {:instruction float_add} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_rot})
Best program: (float_dup in1 float_dup integer_dup_times integer_mult float_tan integer_fromfloat float_yankdup float_rot print_float float_dec float_div float_mod float_swap float_yankdup float_cos float_sub float_swap integer_div in1 integer_max print_integer float_flush float_add float_div integer_sub integer_add integer_dup_items float_yankdup integer_yankdup float_max float_cos -96.47531233971003 float_inc float_yank integer_add integer_rot float_sub float_shove float_stackdepth float_swap integer_add float_inc float_dup_times integer_shove integer_yank float_add integer_shove integer_stackdepth float_rot)
Errors: [18.0 2 72.0 3 11.0 2 80.0 2 37.0 3 53.0 3 100.0 1 39.0 12 68.0 13 32.0 2 2.0 2 99.0 2 15.0 2 8.0 2 41.0 2 36.0 2 83.0 12 55.0 12 45.0 2 15.0 3 52.0 12 73.0 2 28.0 2 99.0 2 47.0 2]
Total: 1312.0
Mean: 26.24
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 4871.830883399994
Median total errors in population: 1352.0
Error averages by case: (167.57176339999972 6.54 213.8193898999997 7.59 159.3502718000003 6.591 219.97911550000094 6.958 180.02051869999954 7.115 187.27007040000103 7.205 226.55875320000007 5.913 175.4379289999999 12.867 191.61166219999993 13.394 174.89595700000018 6.48 144.34330739999973 6.638 228.23676269999896 6.791 171.87272679999987 6.58 156.79631609999979 6.712 178.77270069999972 5.9 182.79998840000064 6.492 205.13080330000003 13.123 183.4861467000001 12.307 185.69865089999973 6.529 175.1927131999996 7.482 184.7326514 12.842 199.44234940000018 6.353 175.9788485000002 6.341 217.95011649999933 6.409 187.3913702999998 6.338)
Error minima by case: (1.3301 2 8.3866 3 7.7194 2 6.6553 2 23.5302 3 0.7186 3 0.0 1 2.2087 9 0.583 7 2.6367 2 0.0 1 46.6958 1 14.0 2 1.5742 1 2.3896 2 17.5634 2 3.8889 7 9.4045 9 4.1004 2 14.0 3 0.9457 9 0.1068 2 1.8406 2 1.0 1 4.4414 2)
Average genome size in population (length): 55.166
Average program size in population (points): 56.166
Average percent parens in population: 0.027
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.955
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.667
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.667
Total error diversity:				 0.123
Error (vector) diversity:			 0.137
Behavioral diversity:				 0.153
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4136647
--- Timings ---
Current time: 1529615784581 milliseconds
Total Time:          11.8 seconds
Initialization:       0.1 seconds,  1.0%
Reproduction:         3.9 seconds, 33.5%
Fitness Testing:      6.8 seconds, 58.0%
Report:               0.9 seconds,  7.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 54860.0
Test mean error for best: 27.43000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -86.7252441384
Correct output: -151.3865608082 | Program output: -79.3865608082
Correct output: -39.5964789701 | Program output: -28.5964789701
Correct output: -165.6552500023 | Program output: -85.6552500023
Correct output: 115.8637099929 | Program output: 78.8637099929 
Correct output: 106.2814426659 | Program output: 53.2814426659 
Correct output: 176.1918465521 | Program output: 76.1918465521 
Correct output: -17.8149835933 | Program output: 21.1850164067 
Correct output: -65.5829878959 | Program output: 2.4170121041  
Correct output: 27.6366895788  | Program output: 59.6366895788 
Correct output: -19.5737445927 | Program output: -21.5737445927
Correct output: -146.6957573417 | Program output: -47.6957573417
Correct output: -93.4856677865 | Program output: -78.4856677865
Correct output: -62.4257652273 | Program output: -70.4257652273
Correct output: 8.389607373    | Program output: 49.389607373  
Correct output: -88.5634422156 | Program output: -52.5634422156
Correct output: 28.8889248865  | Program output: -54.1110751135
Correct output: 15.595489344   | Program output: -39.404510656 
Correct output: -49.1003576661 | Program output: -94.1003576661
Correct output: -113.1474461804 | Program output: -98.1474461804
Correct output: -19.0779583365 | Program output: 32.9220416635 
Correct output: -3.1068023861  | Program output: -76.1068023861
Correct output: 52.1593783355  | Program output: 80.1593783355 
Correct output: 128.3998855036 | Program output: 29.3998855036 
Correct output: 31.5586049792  | Program output: 78.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_rot} {:instruction integer_yankdup} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_687} {:instruction in1} {:instruction integer_max} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_flush} {:instruction print_float} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_rot} {:instruction float_max})
Best program: (float_rot integer_yankdup integer_yankdup integer_inc tag_float_687 in1 integer_max integer_rot float_yank integer_shove integer_mod float_rot integer_mult integer_flush print_float integer_dup tagged_700 float_rot float_max)
Errors: [18.0 2 72.0 3 11.0 2 80.0 2 37.0 3 53.0 3 100.0 1 39.0 12 68.0 13 32.0 2 2.0 2 99.0 2 15.0 2 8.0 2 41.0 2 36.0 2 83.0 12 55.0 12 45.0 2 15.0 3 52.0 12 73.0 2 28.0 2 99.0 2 47.0 2]
Total: 1312.0
Mean: 26.24
Genome size: 19
Size: 20
Percent parens: 0.050
--- Population Statistics ---
Average total errors in population: 3700.4128652
Median total errors in population: 1312.0
Error averages by case: (115.7350824 3.412 164.484165 4.391 109.0474602 3.411 171.73386340000002 3.491 133.0389443 4.26 147.15113989999998 4.211 189.6333492 2.421 133.50007449999998 12.447 159.365354 13.337 127.8455673 3.334 100.51940829999998 3.401 188.5758385 3.47 113.2338456 3.447 106.73710319999999 3.408 135.7588054 3.151 131.8822569 3.448 173.40694230000003 12.521 148.31550289999998 12.273 139.7122681 3.41 113.4098003 4.372 145.68105300000002 12.416 164.3737862 3.352 124.5018528 3.321 188.0943808 3.345 141.28302069999998 3.342)
Error minima by case: (1.3301 2 7.3866 3 10.0 2 5.6553 2 35.0 3 0.2814 3 23.8082 1 16.302 8 64.0701 9 4.9538 2 0.0 1 51.3042 1 14.0 2 4.9694 1 7.3896 2 16.5634 2 3.7016 9 8.2111 8 18.2948 2 14.0 3 17.565 9 1.5939 2 19.5689 2 29.3999 1 1.0319 2)
Average genome size in population (length): 37.791
Average program size in population (points): 38.791
Average percent parens in population: 0.045
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.446
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 73
Genome diversity (% unique Plush genomes):	 0.523
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 73
Syntactic diversity (% unique Push programs):	 0.523
Total error diversity:				 0.032
Error (vector) diversity:			 0.032
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5086472
--- Timings ---
Current time: 1529615787626 milliseconds
Total Time:          15.1 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         5.2 seconds, 34.5%
Fitness Testing:      8.3 seconds, 55.3%
Report:               1.4 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 54832.0
Test mean error for best: 27.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -87.7252441384
Correct output: -151.3865608082 | Program output: -80.3865608082
Correct output: -39.5964789701 | Program output: -29.5964789701
Correct output: -165.6552500023 | Program output: -86.6552500023
Correct output: 115.8637099929 | Program output: 77.8637099929 
Correct output: 106.2814426659 | Program output: 52.2814426659 
Correct output: 176.1918465521 | Program output: 75.1918465521 
Correct output: -17.8149835933 | Program output: 20.1850164067 
Correct output: -65.5829878959 | Program output: 1.4170121041  
Correct output: 27.6366895788  | Program output: 58.6366895788 
Correct output: -19.5737445927 | Program output: -22.5737445927
Correct output: -146.6957573417 | Program output: -48.6957573417
Correct output: -93.4856677865 | Program output: -79.4856677865
Correct output: -62.4257652273 | Program output: -71.4257652273
Correct output: 8.389607373    | Program output: 48.389607373  
Correct output: -88.5634422156 | Program output: -53.5634422156
Correct output: 28.8889248865  | Program output: -55.1110751135
Correct output: 15.595489344   | Program output: -40.404510656 
Correct output: -49.1003576661 | Program output: -95.1003576661
Correct output: -113.1474461804 | Program output: -99.1474461804
Correct output: -19.0779583365 | Program output: 31.9220416635 
Correct output: -3.1068023861  | Program output: -77.1068023861
Correct output: 52.1593783355  | Program output: 79.1593783355 
Correct output: 128.3998855036 | Program output: 28.3998855036 
Correct output: 31.5586049792  | Program output: 77.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_swap} {:instruction tagged_995} {:instruction float_pop} {:instruction float_cos} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_dup_times} {:instruction integer_add} {:instruction tagged_276} {:instruction float_yank} {:instruction print_float} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_div} {:instruction float_min} {:instruction in1} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction float_dup_times} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction integer_shove} {:instruction float_div} {:instruction integer_add} {:instruction float_sin} {:instruction integer_div} {:instruction float_tan} {:instruction float_yank} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_mod} {:instruction tag_integer_470} {:instruction float_yank} {:instruction float_flush} {:instruction float_flush} {:instruction integer_swap} {:instruction float_dup_items} {:instruction tag_integer_864} {:instruction in1} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_min} {:instruction -67.39519330991226} {:instruction integer_mult} {:instruction integer_min} {:instruction in1} {:instruction float_rot} {:instruction print_float} {:instruction float_cos} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_mult})
Best program: (integer_pop float_dup_times integer_dup integer_swap tagged_995 float_pop float_cos integer_rot float_cos integer_dup_times integer_add tagged_276 float_yank print_float float_yankdup float_shove integer_div float_min in1 integer_dup float_inc integer_dup_items integer_stackdepth integer_rot float_dup_times integer_dec integer_shove float_stackdepth float_mod float_flush integer_stackdepth float_sub integer_shove float_div integer_add float_sin integer_div float_tan float_yank integer_rot float_frominteger integer_yankdup float_yankdup integer_swap float_mod tag_integer_470 float_yank float_flush float_flush integer_swap float_dup_items tag_integer_864 in1 float_shove float_stackdepth float_dup_times integer_dup_times integer_shove integer_stackdepth in1 float_dec float_yankdup float_min -67.39519330991226 integer_mult integer_min in1 float_rot print_float float_cos float_dec integer_mod float_dup_items float_mult)
Errors: [19.0 2 71.0 3 10.0 1 79.0 2 38.0 3 54.0 3 101.0 2 38.0 13 67.0 13 31.0 2 3.0 2 98.0 2 14.0 2 9.0 2 40.0 1 35.0 2 84.0 12 56.0 12 46.0 2 14.0 3 51.0 11 74.0 2 27.0 2 100.0 1 46.0 2]
Total: 1307.0
Mean: 26.14
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3391.7493725
Median total errors in population: 1312.0
Error averages by case: (103.61802789999999 3.051 152.9487282 4.039 96.96107760000001 3.052 160.2715571 3.109 120.05652169999999 3.971 134.60383740000003 3.939 177.6271448 2.089 121.06892909999999 12.29 146.4922025 13.221 115.23827340000001 2.97 88.36384539999999 3.035 177.50493519999998 3.106 100.9054073 3.071 94.494186 3.048 123.4097469 2.828 120.0010173 3.073 162.5885697 12.307 137.07617249999998 12.15 128.0796362 3.051 100.9641333 4.026 133.47759269999997 12.305 153.3875148 2.999 111.6608076 2.965 176.3103907 3.034 128.9261172 2.984)
Error minima by case: (18.0 2 71.0 3 10.0 1 79.0 2 37.0 3 53.0 3 100.0 1 16.7726 10 64.6978 10 27.5831 2 2.0 2 98.0 2 14.0 2 8.0 2 9.1577 1 35.0 2 28.2417 9 8.2111 8 25.0506 2 14.0 3 20.0759 10 2.2497 2 27.0 2 99.0 1 31.5398 2)
Average genome size in population (length): 32.87
Average program size in population (points): 33.87
Average percent parens in population: 0.052
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.9165
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.529
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.529
Total error diversity:				 0.019
Error (vector) diversity:			 0.02
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 5912947
--- Timings ---
Current time: 1529615790735 milliseconds
Total Time:          18.0 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         6.4 seconds, 35.6%
Fitness Testing:      9.8 seconds, 54.3%
Report:               1.7 seconds,  9.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 54832.0
Test mean error for best: 27.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -87.7252441384
Correct output: -151.3865608082 | Program output: -80.3865608082
Correct output: -39.5964789701 | Program output: -29.5964789701
Correct output: -165.6552500023 | Program output: -86.6552500023
Correct output: 115.8637099929 | Program output: 77.8637099929 
Correct output: 106.2814426659 | Program output: 52.2814426659 
Correct output: 176.1918465521 | Program output: 75.1918465521 
Correct output: -17.8149835933 | Program output: 20.1850164067 
Correct output: -65.5829878959 | Program output: 1.4170121041  
Correct output: 27.6366895788  | Program output: 58.6366895788 
Correct output: -19.5737445927 | Program output: -22.5737445927
Correct output: -146.6957573417 | Program output: -48.6957573417
Correct output: -93.4856677865 | Program output: -79.4856677865
Correct output: -62.4257652273 | Program output: -71.4257652273
Correct output: 8.389607373    | Program output: 48.389607373  
Correct output: -88.5634422156 | Program output: -53.5634422156
Correct output: 28.8889248865  | Program output: -55.1110751135
Correct output: 15.595489344   | Program output: -40.404510656 
Correct output: -49.1003576661 | Program output: -95.1003576661
Correct output: -113.1474461804 | Program output: -99.1474461804
Correct output: -19.0779583365 | Program output: 31.9220416635 
Correct output: -3.1068023861  | Program output: -77.1068023861
Correct output: 52.1593783355  | Program output: 79.1593783355 
Correct output: 128.3998855036 | Program output: 28.3998855036 
Correct output: 31.5586049792  | Program output: 77.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_swap} {:instruction tagged_995} {:instruction float_pop} {:instruction float_cos} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_dup_times} {:instruction integer_add} {:instruction tagged_276} {:instruction float_yank} {:instruction print_float} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_div} {:instruction float_min} {:instruction in1} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction float_dup_times} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction integer_shove} {:instruction float_div} {:instruction integer_add} {:instruction float_sin} {:instruction integer_div} {:instruction float_tan} {:instruction float_yank} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_mod} {:instruction tag_integer_470} {:instruction float_yank} {:instruction float_flush} {:instruction float_flush} {:instruction integer_swap} {:instruction float_dup_items} {:instruction tag_integer_864} {:instruction in1} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_min} {:instruction -67.39519330991226} {:instruction integer_mult} {:instruction integer_min} {:instruction in1} {:instruction float_rot} {:instruction print_float} {:instruction float_cos} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_mult})
Best program: (integer_pop float_dup_times integer_dup integer_swap tagged_995 float_pop float_cos integer_rot float_cos integer_dup_times integer_add tagged_276 float_yank print_float float_yankdup float_shove integer_div float_min in1 integer_dup float_inc integer_dup_items integer_stackdepth integer_rot float_dup_times integer_dec integer_shove float_stackdepth float_mod float_flush integer_stackdepth float_sub integer_shove float_div integer_add float_sin integer_div float_tan float_yank integer_rot float_frominteger integer_yankdup float_yankdup integer_swap float_mod tag_integer_470 float_yank float_flush float_flush integer_swap float_dup_items tag_integer_864 in1 float_shove float_stackdepth float_dup_times integer_dup_times integer_shove integer_stackdepth in1 float_dec float_yankdup float_min -67.39519330991226 integer_mult integer_min in1 float_rot print_float float_cos float_dec integer_mod float_dup_items float_mult)
Errors: [19.0 2 71.0 3 10.0 1 79.0 2 38.0 3 54.0 3 101.0 2 38.0 13 67.0 13 31.0 2 3.0 2 98.0 2 14.0 2 9.0 2 40.0 1 35.0 2 84.0 12 56.0 12 46.0 2 14.0 3 51.0 11 74.0 2 27.0 2 100.0 1 46.0 2]
Total: 1307.0
Mean: 26.14
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3572.5098048
Median total errors in population: 1312.0
Error averages by case: (111.6712715 3.17 160.5365397 4.156 104.8254455 3.163 167.79987240000003 3.241 126.8678955 4.069 141.2040724 4.051 183.8032376 2.231 127.1680487 12.266 151.640707 13.18 122.1605911 3.075 95.69428039999998 3.155 184.7859073 3.24 109.00369909999999 3.175 102.6333382 3.17 130.25645790000002 2.903 127.85842160000001 3.179 169.8656712 12.234 144.63782830000002 12.088 135.85484980000004 3.166 109.10228020000001 4.146 140.2225396 12.27 160.8203147 3.098 118.5925891 3.068 182.05150999999998 3.15 135.728436 3.08)
Error minima by case: (18.0 2 71.0 3 10.0 1 79.0 2 36.5447 2 26.9624 2 0.0 0 17.1227 10 2.417 10 27.6367 2 2.0 2 47.6958 2 14.0 2 8.0 2 7.7493 1 35.0 2 28.8889 9 15.5955 9 25.0506 2 14.0 3 19.078 11 3.1068 2 27.0 2 1.0 1 31.5586 2)
Average genome size in population (length): 31.848
Average program size in population (points): 32.848
Average percent parens in population: 0.052
Minimum age in population: 5.0
Maximum age in population: 9.3125
Average age in population: 7.4180625
Median age in population: 7.4375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 88
Genome diversity (% unique Plush genomes):	 0.579
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.579
Total error diversity:				 0.021
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.023
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 6713497
--- Timings ---
Current time: 1529615794344 milliseconds
Total Time:          21.4 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         8.0 seconds, 37.1%
Fitness Testing:     11.2 seconds, 52.3%
Report:               2.1 seconds, 10.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 54832.0
Test mean error for best: 27.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -87.7252441384
Correct output: -151.3865608082 | Program output: -80.3865608082
Correct output: -39.5964789701 | Program output: -29.5964789701
Correct output: -165.6552500023 | Program output: -86.6552500023
Correct output: 115.8637099929 | Program output: 77.8637099929 
Correct output: 106.2814426659 | Program output: 52.2814426659 
Correct output: 176.1918465521 | Program output: 75.1918465521 
Correct output: -17.8149835933 | Program output: 20.1850164067 
Correct output: -65.5829878959 | Program output: 1.4170121041  
Correct output: 27.6366895788  | Program output: 58.6366895788 
Correct output: -19.5737445927 | Program output: -22.5737445927
Correct output: -146.6957573417 | Program output: -48.6957573417
Correct output: -93.4856677865 | Program output: -79.4856677865
Correct output: -62.4257652273 | Program output: -71.4257652273
Correct output: 8.389607373    | Program output: 48.389607373  
Correct output: -88.5634422156 | Program output: -53.5634422156
Correct output: 28.8889248865  | Program output: -55.1110751135
Correct output: 15.595489344   | Program output: -40.404510656 
Correct output: -49.1003576661 | Program output: -95.1003576661
Correct output: -113.1474461804 | Program output: -99.1474461804
Correct output: -19.0779583365 | Program output: 31.9220416635 
Correct output: -3.1068023861  | Program output: -77.1068023861
Correct output: 52.1593783355  | Program output: 79.1593783355 
Correct output: 128.3998855036 | Program output: 28.3998855036 
Correct output: 31.5586049792  | Program output: 77.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_swap} {:instruction tagged_995} {:instruction float_pop} {:instruction float_cos} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_dup_times} {:instruction integer_add} {:instruction tagged_276} {:instruction float_yank} {:instruction print_float} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_div} {:instruction float_min} {:instruction in1} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction float_dup_times} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction integer_shove} {:instruction float_div} {:instruction integer_add} {:instruction float_sin} {:instruction integer_div} {:instruction float_tan} {:instruction float_yank} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_mod} {:instruction tag_integer_470} {:instruction float_yank} {:instruction float_flush} {:instruction float_flush} {:instruction integer_swap} {:instruction float_dup_items} {:instruction tag_integer_864} {:instruction in1} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_min} {:instruction -67.39519330991226} {:instruction integer_mult} {:instruction integer_min} {:instruction in1} {:instruction float_rot} {:instruction print_float} {:instruction float_cos} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_mult})
Best program: (integer_pop float_dup_times integer_dup integer_swap tagged_995 float_pop float_cos integer_rot float_cos integer_dup_times integer_add tagged_276 float_yank print_float float_yankdup float_shove integer_div float_min in1 integer_dup float_inc integer_dup_items integer_stackdepth integer_rot float_dup_times integer_dec integer_shove float_stackdepth float_mod float_flush integer_stackdepth float_sub integer_shove float_div integer_add float_sin integer_div float_tan float_yank integer_rot float_frominteger integer_yankdup float_yankdup integer_swap float_mod tag_integer_470 float_yank float_flush float_flush integer_swap float_dup_items tag_integer_864 in1 float_shove float_stackdepth float_dup_times integer_dup_times integer_shove integer_stackdepth in1 float_dec float_yankdup float_min -67.39519330991226 integer_mult integer_min in1 float_rot print_float float_cos float_dec integer_mod float_dup_items float_mult)
Errors: [19.0 2 71.0 3 10.0 1 79.0 2 38.0 3 54.0 3 101.0 2 38.0 13 67.0 13 31.0 2 3.0 2 98.0 2 14.0 2 9.0 2 40.0 1 35.0 2 84.0 12 56.0 12 46.0 2 14.0 3 51.0 11 74.0 2 27.0 2 100.0 1 46.0 2]
Total: 1307.0
Mean: 26.14
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3128.4901400999993
Median total errors in population: 1312.0
Error averages by case: (92.84377600000002 2.937 142.81880990000002 3.92 85.85618900000001 2.914 150.2321383 2.994 110.4310431 3.87 125.1291918 3.839 168.6326185 1.987 109.524707 12.276 135.1380976 13.185 104.6321576 2.874 76.41685759999999 2.93 167.66028899999998 2.986 90.15012430000002 2.956 83.6151604 2.935 112.9172195 2.734 109.46833509999999 2.96 152.50816709999998 12.262 126.6961716 12.135 117.61150180000001 2.938 90.2148152 3.914 123.14299759999999 12.244 143.2665635 2.895 101.0330895 2.861 166.75560190000002 2.902 118.4585172 2.888)
Error minima by case: (15.997 2 71.0 3 10.0 1 79.0 2 36.0 3 52.0 3 99.0 1 16.7726 10 64.6978 10 8.6219 2 1.0 2 98.0 1 14.0 2 7.0 1 9.5892 1 35.0 2 10.9029 9 8.2111 9 8.1119 2 14.0 3 34.5168 9 2.2497 2 3.4231 2 88.6081 1 8.2332 2)
Average genome size in population (length): 30.694
Average program size in population (points): 31.694
Average percent parens in population: 0.054
Minimum age in population: 6.5
Maximum age in population: 10.71875
Average age in population: 8.8988125
Median age in population: 8.90625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 90
Genome diversity (% unique Plush genomes):	 0.572
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 90
Syntactic diversity (% unique Push programs):	 0.572
Total error diversity:				 0.018
Error (vector) diversity:			 0.018
Behavioral diversity:				 0.018
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 7484797
--- Timings ---
Current time: 1529615797793 milliseconds
Total Time:          24.9 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.2 seconds, 36.9%
Fitness Testing:     12.8 seconds, 51.3%
Report:               2.8 seconds, 11.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 54832.0
Test mean error for best: 27.41600
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -87.7252441384
Correct output: -151.3865608082 | Program output: -80.3865608082
Correct output: -39.5964789701 | Program output: -29.5964789701
Correct output: -165.6552500023 | Program output: -86.6552500023
Correct output: 115.8637099929 | Program output: 77.8637099929 
Correct output: 106.2814426659 | Program output: 52.2814426659 
Correct output: 176.1918465521 | Program output: 75.1918465521 
Correct output: -17.8149835933 | Program output: 20.1850164067 
Correct output: -65.5829878959 | Program output: 1.4170121041  
Correct output: 27.6366895788  | Program output: 58.6366895788 
Correct output: -19.5737445927 | Program output: -22.5737445927
Correct output: -146.6957573417 | Program output: -48.6957573417
Correct output: -93.4856677865 | Program output: -79.4856677865
Correct output: -62.4257652273 | Program output: -71.4257652273
Correct output: 8.389607373    | Program output: 48.389607373  
Correct output: -88.5634422156 | Program output: -53.5634422156
Correct output: 28.8889248865  | Program output: -55.1110751135
Correct output: 15.595489344   | Program output: -40.404510656 
Correct output: -49.1003576661 | Program output: -95.1003576661
Correct output: -113.1474461804 | Program output: -99.1474461804
Correct output: -19.0779583365 | Program output: 31.9220416635 
Correct output: -3.1068023861  | Program output: -77.1068023861
Correct output: 52.1593783355  | Program output: 79.1593783355 
Correct output: 128.3998855036 | Program output: 28.3998855036 
Correct output: 31.5586049792  | Program output: 77.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_swap} {:instruction tagged_995} {:instruction float_pop} {:instruction float_cos} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_dup_times} {:instruction integer_add} {:instruction tagged_276} {:instruction float_yank} {:instruction print_float} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_div} {:instruction float_min} {:instruction in1} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction float_dup_times} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction integer_shove} {:instruction float_div} {:instruction integer_add} {:instruction float_sin} {:instruction integer_div} {:instruction float_tan} {:instruction float_yank} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_mod} {:instruction tag_integer_470} {:instruction float_yank} {:instruction float_flush} {:instruction float_flush} {:instruction integer_swap} {:instruction float_dup_items} {:instruction tag_integer_864} {:instruction in1} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction in1} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_min} {:instruction -67.39519330991226} {:instruction integer_mult} {:instruction integer_min} {:instruction in1} {:instruction float_rot} {:instruction print_float} {:instruction float_cos} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_mult})
Best program: (integer_pop float_dup_times integer_dup integer_swap tagged_995 float_pop float_cos integer_rot float_cos integer_dup_times integer_add tagged_276 float_yank print_float float_yankdup float_shove integer_div float_min in1 integer_dup float_inc integer_dup_items integer_stackdepth integer_rot float_dup_times integer_dec integer_shove float_stackdepth float_mod float_flush integer_stackdepth float_sub integer_shove float_div integer_add float_sin integer_div float_tan float_yank integer_rot float_frominteger integer_yankdup float_yankdup integer_swap float_mod tag_integer_470 float_yank float_flush float_flush integer_swap float_dup_items tag_integer_864 in1 float_shove float_stackdepth float_dup_times integer_dup_times integer_shove integer_stackdepth in1 float_dec float_yankdup float_min -67.39519330991226 integer_mult integer_min in1 float_rot print_float float_cos float_dec integer_mod float_dup_items float_mult)
Errors: [19.0 2 71.0 3 10.0 1 79.0 2 38.0 3 54.0 3 101.0 2 38.0 13 67.0 13 31.0 2 3.0 2 98.0 2 14.0 2 9.0 2 40.0 1 35.0 2 84.0 12 56.0 12 46.0 2 14.0 3 51.0 11 74.0 2 27.0 2 100.0 1 46.0 2]
Total: 1307.0
Mean: 26.14
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3347.8669995
Median total errors in population: 1312.0
Error averages by case: (101.86451620000003 3.096 151.3822624 4.102 95.0637304 3.014 158.75237760000002 3.172 118.34946680000002 4.0 132.87364300000002 3.965 176.03756209999997 2.226 119.00652500000002 12.392 145.2878014 13.235 113.2272265 3.024 86.5492361 3.085 175.8606417 3.165 99.21804270000001 3.14 92.764218 3.091 121.30202779999999 2.768 118.2473676 3.132 160.6792524 12.326 135.14976179999996 12.147 126.2414988 3.101 99.3771394 4.088 131.3785839 12.212 151.4332824 3.048 109.7358774 3.023 174.6280554 2.97 126.90090269999999 3.034)
Error minima by case: (6.524 2 71.0 3 10.0 1 79.0 2 1.5135 3 14.4865 3 61.4865 1 16.1227 9 63.8342 10 26.6367 2 2.0 2 98.0 2 14.0 2 8.0 2 7.3896 1 35.0 2 27.8889 9 14.5955 8 6.4865 2 14.0 3 18.1426 10 1.456 2 27.0 2 60.4865 1 30.5586 2)
Average genome size in population (length): 30.885
Average program size in population (points): 31.885
Average percent parens in population: 0.054
Minimum age in population: 7.9375
Maximum age in population: 12.40625
Average age in population: 10.4326875
Median age in population: 10.4453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 88
Genome diversity (% unique Plush genomes):	 0.582
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.582
Total error diversity:				 0.023
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 8259672
--- Timings ---
Current time: 1529615801073 milliseconds
Total Time:          28.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        10.4 seconds, 36.8%
Fitness Testing:     14.4 seconds, 50.7%
Report:               3.4 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 54885.0
Test mean error for best: 27.44250
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -88.7252441384
Correct output: -151.3865608082 | Program output: -81.3865608082
Correct output: -39.5964789701 | Program output: -30.5964789701
Correct output: -165.6552500023 | Program output: -87.6552500023
Correct output: 115.8637099929 | Program output: 76.8637099929 
Correct output: 106.2814426659 | Program output: 51.2814426659 
Correct output: 176.1918465521 | Program output: 74.1918465521 
Correct output: -17.8149835933 | Program output: 19.1850164067 
Correct output: -65.5829878959 | Program output: 0.4170121041  
Correct output: 27.6366895788  | Program output: 57.6366895788 
Correct output: -19.5737445927 | Program output: -23.5737445927
Correct output: -146.6957573417 | Program output: -49.6957573417
Correct output: -93.4856677865 | Program output: -80.4856677865
Correct output: -62.4257652273 | Program output: -72.4257652273
Correct output: 8.389607373    | Program output: 47.389607373  
Correct output: -88.5634422156 | Program output: -54.5634422156
Correct output: 28.8889248865  | Program output: -56.1110751135
Correct output: 15.595489344   | Program output: -41.404510656 
Correct output: -49.1003576661 | Program output: -96.1003576661
Correct output: -113.1474461804 | Program output: -100.1474461804
Correct output: -19.0779583365 | Program output: 30.9220416635 
Correct output: -3.1068023861  | Program output: -78.1068023861
Correct output: 52.1593783355  | Program output: 78.1593783355 
Correct output: 128.3998855036 | Program output: 27.3998855036 
Correct output: 31.5586049792  | Program output: 76.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_pop} {:instruction float_dup_times} {:instruction integer_dup} {:instruction integer_swap} {:instruction tagged_995} {:instruction float_pop} {:instruction float_cos} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_dup_times} {:instruction integer_add} {:instruction tagged_276} {:instruction float_yank} {:instruction print_float} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_div} {:instruction float_min} {:instruction in1} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction float_dup_times} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction integer_shove} {:instruction float_div} {:instruction integer_add} {:instruction float_sin} {:instruction integer_div} {:instruction float_tan} {:instruction float_yank} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_mod} {:instruction tag_integer_470} {:instruction float_yank} {:instruction float_flush} {:instruction float_flush} {:instruction integer_swap} {:instruction float_dup_items} {:instruction tag_integer_864} {:instruction in1} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_min} {:instruction -67.39519330991226} {:instruction integer_mult} {:instruction integer_min} {:instruction in1} {:instruction float_rot} {:instruction print_float} {:instruction float_cos} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_mult})
Best program: (integer_pop float_dup_times integer_dup integer_swap tagged_995 float_pop float_cos integer_rot float_cos integer_dup_times integer_add tagged_276 float_yank print_float float_yankdup float_shove integer_div float_min in1 integer_dup float_inc integer_dup_items integer_stackdepth integer_rot float_dup_times integer_dec integer_shove float_stackdepth float_mod float_flush integer_stackdepth float_sub integer_shove float_div integer_add float_sin integer_div float_tan float_yank integer_rot float_frominteger integer_yankdup float_yankdup integer_swap float_mod tag_integer_470 float_yank float_flush float_flush integer_swap float_dup_items tag_integer_864 in1 float_shove float_stackdepth float_dup_times integer_dup_times integer_shove integer_stackdepth float_dec float_dec float_yankdup float_min -67.39519330991226 integer_mult integer_min in1 float_rot print_float float_cos float_dec integer_mod float_dup_items float_mult)
Errors: [20.0 1 70.0 2 9.0 1 78.0 3 39.0 3 55.0 3 102.0 2 37.0 12 66.0 13 30.0 1 4.0 2 97.0 2 13.0 2 10.0 1 39.0 2 34.0 2 85.0 12 57.0 12 47.0 2 13.0 2 50.0 12 75.0 2 26.0 2 101.0 2 45.0 2]
Total: 1302.0
Mean: 26.04
Genome size: 74
Size: 75
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3902.4670241999997
Median total errors in population: 1312.0
Error averages by case: (124.9211336 3.345 172.3507947 4.323 117.5077936 2.94 179.53697480000002 3.423 141.57071120000003 4.262 155.5455176 4.229 197.67033899999998 2.883 140.8412165 12.773 166.14969710000003 13.24 135.4624277 3.276 109.97663050000001 3.357 196.1953157 3.445 121.578988 3.372 115.95205010000001 3.336 143.2411423 2.648 140.0544141 3.398 182.12859860000003 12.35 157.29685899999998 12.161 148.6697382 3.349 121.7559337 4.318 152.8823096 11.912 173.12412510000001 3.27 132.21375690000002 3.264 196.00099650000004 2.91 148.76556010000002 3.29)
Error minima by case: (1.3301 1 70.0 2 9.0 1 78.0 2 36.0 2 46.0 2 1.0 1 3.37 9 1.8122 9 27.0952 1 1.0 2 78.3006 1 13.0 2 4.9694 1 8.69 1 20.1682 2 25.2222 9 9.2111 8 18.2948 2 13.0 2 13.8441 10 1.2497 2 26.0 2 0.0 0 31.0182 2)
Average genome size in population (length): 34.196
Average program size in population (points): 35.196
Average percent parens in population: 0.049
Minimum age in population: 9.625
Maximum age in population: 13.7734375
Average age in population: 11.96296875
Median age in population: 12.0234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 178
Genome diversity (% unique Plush genomes):	 0.534
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 178
Syntactic diversity (% unique Push programs):	 0.534
Total error diversity:				 0.029
Error (vector) diversity:			 0.03
Behavioral diversity:				 0.03
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 9115747
--- Timings ---
Current time: 1529615804211 milliseconds
Total Time:          31.4 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.6 seconds, 37.0%
Fitness Testing:     15.8 seconds, 50.3%
Report:               3.9 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 54885.0
Test mean error for best: 27.44250
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -88.7252441384
Correct output: -151.3865608082 | Program output: -81.3865608082
Correct output: -39.5964789701 | Program output: -30.5964789701
Correct output: -165.6552500023 | Program output: -87.6552500023
Correct output: 115.8637099929 | Program output: 76.8637099929 
Correct output: 106.2814426659 | Program output: 51.2814426659 
Correct output: 176.1918465521 | Program output: 74.1918465521 
Correct output: -17.8149835933 | Program output: 19.1850164067 
Correct output: -65.5829878959 | Program output: 0.4170121041  
Correct output: 27.6366895788  | Program output: 57.6366895788 
Correct output: -19.5737445927 | Program output: -23.5737445927
Correct output: -146.6957573417 | Program output: -49.6957573417
Correct output: -93.4856677865 | Program output: -80.4856677865
Correct output: -62.4257652273 | Program output: -72.4257652273
Correct output: 8.389607373    | Program output: 47.389607373  
Correct output: -88.5634422156 | Program output: -54.5634422156
Correct output: 28.8889248865  | Program output: -56.1110751135
Correct output: 15.595489344   | Program output: -41.404510656 
Correct output: -49.1003576661 | Program output: -96.1003576661
Correct output: -113.1474461804 | Program output: -100.1474461804
Correct output: -19.0779583365 | Program output: 30.9220416635 
Correct output: -3.1068023861  | Program output: -78.1068023861
Correct output: 52.1593783355  | Program output: 78.1593783355 
Correct output: 128.3998855036 | Program output: 27.3998855036 
Correct output: 31.5586049792  | Program output: 76.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_687} {:instruction in1} {:instruction integer_max} {:instruction float_cos} {:instruction integer_rot} {:instruction float_cos} {:instruction integer_dup_times} {:instruction integer_add} {:instruction tagged_276} {:instruction float_yank} {:instruction float_flush} {:instruction float_yankdup} {:instruction float_shove} {:instruction integer_div} {:instruction float_min} {:instruction integer_dup_times} {:instruction integer_dup} {:instruction float_inc} {:instruction integer_dup_items} {:instruction integer_stackdepth} {:instruction integer_rot} {:instruction float_dup_times} {:instruction integer_dec} {:instruction integer_shove} {:instruction float_stackdepth} {:instruction float_mod} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_sub} {:instruction integer_shove} {:instruction float_div} {:instruction integer_add} {:instruction integer_inc} {:instruction integer_div} {:instruction float_tan} {:instruction float_yank} {:instruction integer_rot} {:instruction float_frominteger} {:instruction integer_yankdup} {:instruction float_yankdup} {:instruction integer_swap} {:instruction float_mod} {:instruction tag_integer_470} {:instruction float_yank} {:instruction float_flush} {:instruction float_flush} {:instruction integer_swap} {:instruction float_dup_items} {:instruction tag_integer_864} {:instruction in1} {:instruction float_shove} {:instruction float_stackdepth} {:instruction float_dup_times} {:instruction integer_dup_times} {:instruction integer_shove} {:instruction integer_stackdepth} {:instruction float_dec} {:instruction float_dec} {:instruction float_yankdup} {:instruction float_min} {:instruction -67.39519330991226} {:instruction integer_mult} {:instruction integer_min} {:instruction in1} {:instruction float_rot} {:instruction print_float} {:instruction float_cos} {:instruction float_dec} {:instruction integer_mod} {:instruction float_dup_items} {:instruction float_mult})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_inc tag_float_687 in1 integer_max float_cos integer_rot float_cos integer_dup_times integer_add tagged_276 float_yank float_flush float_yankdup float_shove integer_div float_min integer_dup_times integer_dup float_inc integer_dup_items integer_stackdepth integer_rot float_dup_times integer_dec integer_shove float_stackdepth float_mod float_flush integer_stackdepth float_sub integer_shove float_div integer_add integer_inc integer_div float_tan float_yank integer_rot float_frominteger integer_yankdup float_yankdup integer_swap float_mod tag_integer_470 float_yank float_flush float_flush integer_swap float_dup_items tag_integer_864 in1 float_shove float_stackdepth float_dup_times integer_dup_times integer_shove integer_stackdepth float_dec float_dec float_yankdup float_min -67.39519330991226 integer_mult integer_min in1 float_rot print_float float_cos float_dec integer_mod float_dup_items float_mult)
Errors: [20.0 1 70.0 2 9.0 1 78.0 3 39.0 3 55.0 3 102.0 2 37.0 12 66.0 13 30.0 1 4.0 2 97.0 2 13.0 2 10.0 1 39.0 2 34.0 2 85.0 12 57.0 12 47.0 2 13.0 2 50.0 12 75.0 2 26.0 2 101.0 2 45.0 2]
Total: 1302.0
Mean: 26.04
Genome size: 75
Size: 76
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 4454.3281492
Median total errors in population: 1307.0
Error averages by case: (147.69940420000006 3.621 193.18077509999998 4.605 139.88076610000002 2.816 200.18917309999998 3.756 164.0275097 4.499 177.6851094 4.477 218.6882829 3.574 163.17558549999998 13.17 188.0647022 13.226 157.40035749999998 3.501 133.8028638 3.638 216.35817399999996 3.74 143.63868580000005 3.65 139.05152040000002 3.616 164.99379689999995 2.456 161.6545552 3.659 203.7419055 12.326 179.54251499999998 12.125 170.9054264 3.638 143.81649829999998 4.604 174.39404799999994 11.534 194.9033302 3.523 154.16854960000003 3.513 217.3979184 2.792 170.380696 3.527)
Error minima by case: (1.3301 1 70.0 2 0.7978 1 78.0 2 37.0 2 46.0 2 1.0 1 16.1227 9 1.8122 9 26.7675 1 2.0 2 79.3006 2 13.0 2 4.9694 1 7.5877 1 21.1682 2 27.8978 11 14.6045 9 18.2948 2 13.0 2 18.1426 10 2.1163 2 26.0 2 0.0 0 30.7274 2)
Average genome size in population (length): 37.841
Average program size in population (points): 38.841
Average percent parens in population: 0.037
Minimum age in population: 10.875
Maximum age in population: 15.44140625
Average age in population: 13.49356640625
Median age in population: 13.525390625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 307
Genome diversity (% unique Plush genomes):	 0.496
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 307
Syntactic diversity (% unique Push programs):	 0.496
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 10062122
--- Timings ---
Current time: 1529615807471 milliseconds
Total Time:          34.7 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        13.0 seconds, 37.4%
Fitness Testing:     17.2 seconds, 49.6%
Report:               4.4 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 54873.0
Test mean error for best: 27.43650
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -89.7252441384
Correct output: -151.3865608082 | Program output: -82.3865608082
Correct output: -39.5964789701 | Program output: -31.5964789701
Correct output: -165.6552500023 | Program output: -88.6552500023
Correct output: 115.8637099929 | Program output: 75.8637099929 
Correct output: 106.2814426659 | Program output: 50.2814426659 
Correct output: 176.1918465521 | Program output: 73.1918465521 
Correct output: -17.8149835933 | Program output: 18.1850164067 
Correct output: -65.5829878959 | Program output: -0.5829878959 
Correct output: 27.6366895788  | Program output: 56.6366895788 
Correct output: -19.5737445927 | Program output: -24.5737445927
Correct output: -146.6957573417 | Program output: -50.6957573417
Correct output: -93.4856677865 | Program output: -81.4856677865
Correct output: -62.4257652273 | Program output: -73.4257652273
Correct output: 8.389607373    | Program output: 46.389607373  
Correct output: -88.5634422156 | Program output: -55.5634422156
Correct output: 28.8889248865  | Program output: -57.1110751135
Correct output: 15.595489344   | Program output: -42.404510656 
Correct output: -49.1003576661 | Program output: -97.1003576661
Correct output: -113.1474461804 | Program output: -101.1474461804
Correct output: -19.0779583365 | Program output: 29.9220416635 
Correct output: -3.1068023861  | Program output: -79.1068023861
Correct output: 52.1593783355  | Program output: 77.1593783355 
Correct output: 128.3998855036 | Program output: 26.3998855036 
Correct output: 31.5586049792  | Program output: 75.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_687} {:instruction in1} {:instruction integer_max} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_rot} {:instruction float_max})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_inc tag_float_687 in1 integer_max integer_rot float_yank integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult float_dec integer_swap integer_dup float_rot integer_mult float_dec print_float integer_dup tagged_700 float_rot float_max)
Errors: [21.0 2 69.0 3 8.0 1 77.0 3 40.0 2 56.0 2 103.0 2 36.0 12 65.0 2 29.0 2 5.0 2 96.0 3 12.0 2 11.0 2 38.0 2 33.0 2 86.0 12 58.0 12 48.0 2 12.0 2 49.0 11 76.0 2 25.0 2 102.0 2 44.0 2]
Total: 1290.0
Mean: 25.8
Genome size: 27
Size: 28
Percent parens: 0.036
--- Population Statistics ---
Average total errors in population: 4482.5869051
Median total errors in population: 1307.0
Error averages by case: (148.64043239999998 3.568 193.8575667 4.556 140.6588416 2.803 200.83287889999997 3.794 165.83792369999998 4.506 179.54649249999997 4.486 220.4988909 3.607 164.3988054 13.094 188.0126706 13.166 159.123064 3.463 134.34885619999997 3.644 217.09706640000002 3.761 144.37558669999999 3.634 139.996764 3.565 166.73487819999997 2.48 162.4462039 3.657 204.83376329999996 12.245 180.6330913 12.069 171.9170158 3.629 144.47518219999998 4.56 176.12571269999998 11.525 196.03376500000002 3.508 155.8496805 3.515 219.0431801 2.842 172.06559209999998 3.526)
Error minima by case: (1.3301 1 69.0 2 8.0 1 77.0 2 36.0 2 52.0 2 99.0 1 16.1227 9 1.8122 2 28.5831 1 1.0 2 79.2178 1 12.0 2 4.9694 1 7.7493 1 21.0855 2 29.2417 9 15.7297 8 18.2948 2 12.0 2 18.1426 8 1.456 2 25.0 2 98.0 1 32.5584 2)
Average genome size in population (length): 36.182
Average program size in population (points): 37.182
Average percent parens in population: 0.038
Minimum age in population: 11.875
Maximum age in population: 17.142578125
Average age in population: 14.969931640625
Median age in population: 15.046875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 272
Genome diversity (% unique Plush genomes):	 0.551
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 272
Syntactic diversity (% unique Push programs):	 0.551
Total error diversity:				 0.02
Error (vector) diversity:			 0.021
Behavioral diversity:				 0.022
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 10967022
--- Timings ---
Current time: 1529615810443 milliseconds
Total Time:          37.8 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.2 seconds, 37.6%
Fitness Testing:     18.6 seconds, 49.3%
Report:               4.9 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 54876.0
Test mean error for best: 27.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -90.7252441384
Correct output: -151.3865608082 | Program output: -83.3865608082
Correct output: -39.5964789701 | Program output: -32.5964789701
Correct output: -165.6552500023 | Program output: -89.6552500023
Correct output: 115.8637099929 | Program output: 74.8637099929 
Correct output: 106.2814426659 | Program output: 49.2814426659 
Correct output: 176.1918465521 | Program output: 72.1918465521 
Correct output: -17.8149835933 | Program output: 17.1850164067 
Correct output: -65.5829878959 | Program output: -1.5829878959 
Correct output: 27.6366895788  | Program output: 55.6366895788 
Correct output: -19.5737445927 | Program output: -25.5737445927
Correct output: -146.6957573417 | Program output: -51.6957573417
Correct output: -93.4856677865 | Program output: -82.4856677865
Correct output: -62.4257652273 | Program output: -74.4257652273
Correct output: 8.389607373    | Program output: 45.389607373  
Correct output: -88.5634422156 | Program output: -56.5634422156
Correct output: 28.8889248865  | Program output: -58.1110751135
Correct output: 15.595489344   | Program output: -43.404510656 
Correct output: -49.1003576661 | Program output: -98.1003576661
Correct output: -113.1474461804 | Program output: -102.1474461804
Correct output: -19.0779583365 | Program output: 28.9220416635 
Correct output: -3.1068023861  | Program output: -80.1068023861
Correct output: 52.1593783355  | Program output: 76.1593783355 
Correct output: 128.3998855036 | Program output: 25.3998855036 
Correct output: 31.5586049792  | Program output: 74.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_shove} {:instruction integer_min} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_rot} {:instruction float_max})
Best program: (float_inc integer_shove integer_min float_yankdup integer_mod float_dec integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float float_dec print_float integer_dup tagged_700 float_rot float_max)
Errors: [22.0 2 68.0 3 7.0 1 76.0 3 41.0 3 57.0 3 104.0 2 35.0 11 64.0 2 28.0 2 6.0 2 95.0 3 11.0 2 12.0 2 37.0 2 32.0 2 87.0 11 59.0 12 49.0 2 11.0 2 48.0 12 77.0 2 24.0 2 103.0 2 43.0 2]
Total: 1288.0
Mean: 25.76
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 4159.967537699999
Median total errors in population: 1307.0
Error averages by case: (136.22022460000002 3.238 181.71380670000002 4.212 127.72234040000001 2.615 188.7993801 3.831 152.30608539999997 4.349 166.263937 4.329 207.85088739999998 3.445 151.17342929999998 12.919 175.86559680000002 13.086 145.142203 3.127 122.01610579999999 3.481 205.3099407 3.592 131.4893502 3.486 127.4390069 3.227 152.90869329999998 2.533 149.83434490000002 3.496 192.99322529999998 12.269 168.41491520000002 12.115 159.76410190000001 3.482 131.6091356 4.207 162.568521 11.697 184.07830710000005 3.371 141.784931 3.366 206.69320949999997 2.853 158.30585859999997 3.374)
Error minima by case: (1.3301 1 68.0 2 7.0 1 76.0 2 37.0 2 53.0 2 100.0 1 16.1227 9 1.8122 2 27.6367 1 2.0 2 79.3006 2 11.0 2 4.9694 1 8.3896 1 21.1682 2 28.7561 11 15.5955 9 18.2948 2 11.0 2 18.078 10 2.1068 2 24.0 2 99.0 1 31.5586 2)
Average genome size in population (length): 36.682
Average program size in population (points): 37.682
Average percent parens in population: 0.036
Minimum age in population: 13.736328125
Maximum age in population: 18.5732421875
Average age in population: 16.452638671875
Median age in population: 16.521484375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 170
Genome diversity (% unique Plush genomes):	 0.544
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 170
Syntactic diversity (% unique Push programs):	 0.544
Total error diversity:				 0.023
Error (vector) diversity:			 0.024
Behavioral diversity:				 0.025
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 11884372
--- Timings ---
Current time: 1529615813646 milliseconds
Total Time:          41.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.6 seconds, 37.9%
Fitness Testing:     20.1 seconds, 49.0%
Report:               5.2 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 54876.0
Test mean error for best: 27.43800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -90.7252441384
Correct output: -151.3865608082 | Program output: -83.3865608082
Correct output: -39.5964789701 | Program output: -32.5964789701
Correct output: -165.6552500023 | Program output: -89.6552500023
Correct output: 115.8637099929 | Program output: 74.8637099929 
Correct output: 106.2814426659 | Program output: 49.2814426659 
Correct output: 176.1918465521 | Program output: 72.1918465521 
Correct output: -17.8149835933 | Program output: 17.1850164067 
Correct output: -65.5829878959 | Program output: -1.5829878959 
Correct output: 27.6366895788  | Program output: 55.6366895788 
Correct output: -19.5737445927 | Program output: -25.5737445927
Correct output: -146.6957573417 | Program output: -51.6957573417
Correct output: -93.4856677865 | Program output: -82.4856677865
Correct output: -62.4257652273 | Program output: -74.4257652273
Correct output: 8.389607373    | Program output: 45.389607373  
Correct output: -88.5634422156 | Program output: -56.5634422156
Correct output: 28.8889248865  | Program output: -58.1110751135
Correct output: 15.595489344   | Program output: -43.404510656 
Correct output: -49.1003576661 | Program output: -98.1003576661
Correct output: -113.1474461804 | Program output: -102.1474461804
Correct output: -19.0779583365 | Program output: 28.9220416635 
Correct output: -3.1068023861  | Program output: -80.1068023861
Correct output: 52.1593783355  | Program output: 76.1593783355 
Correct output: 128.3998855036 | Program output: 25.3998855036 
Correct output: 31.5586049792  | Program output: 74.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_shove} {:instruction integer_min} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_rot} {:instruction float_max})
Best program: (float_inc integer_shove integer_min float_yankdup integer_mod float_dec integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float float_dec print_float integer_dup tagged_700 float_rot float_max)
Errors: [22.0 2 68.0 3 7.0 1 76.0 3 41.0 3 57.0 3 104.0 2 35.0 11 64.0 2 28.0 2 6.0 2 95.0 3 11.0 2 12.0 2 37.0 2 32.0 2 87.0 11 59.0 12 49.0 2 11.0 2 48.0 12 77.0 2 24.0 2 103.0 2 43.0 2]
Total: 1288.0
Mean: 25.76
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 4273.6707919
Median total errors in population: 1302.0
Error averages by case: (141.00530450000002 2.984 185.5926476 3.951 131.45106200000004 2.779 192.71519120000002 4.455 158.6943296 4.453 172.28997950000002 4.43 213.89281909999997 3.613 155.3365003 12.436 180.7062333 12.514 149.64128169999998 2.868 126.78046259999999 3.642 208.73222339999992 3.802 135.58542060000002 3.649 132.32164950000004 2.986 157.056086 3.137 153.56038660000002 3.657 196.77233839999997 12.251 172.4640811 12.076 164.03072660000004 3.646 135.9224105 3.913 166.54636910000002 12.122 187.69259679999996 3.515 146.64125520000002 3.519 212.22722639999992 3.486 162.6082103 3.52)
Error minima by case: (1.3301 1 68.0 2 7.0 1 76.0 2 36.0 2 52.0 2 99.0 1 14.7726 9 0.8122 2 26.6367 1 1.0 2 79.3006 1 11.0 2 3.9694 1 7.3896 1 21.1682 2 27.8889 8 10.2111 8 17.2948 2 11.0 2 17.1426 9 0.2497 2 24.0 2 98.0 1 30.5586 2)
Average genome size in population (length): 39.393
Average program size in population (points): 40.393
Average percent parens in population: 0.031
Minimum age in population: 14.75
Maximum age in population: 20.0693359375
Average age in population: 17.9192421875
Median age in population: 17.95703125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 132
Genome diversity (% unique Plush genomes):	 0.565
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 132
Syntactic diversity (% unique Push programs):	 0.565
Total error diversity:				 0.032
Error (vector) diversity:			 0.034
Behavioral diversity:				 0.035
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 12869597
--- Timings ---
Current time: 1529615816606 milliseconds
Total Time:          44.0 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        16.8 seconds, 38.1%
Fitness Testing:     21.5 seconds, 48.9%
Report:               5.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 54964.0
Test mean error for best: 27.48200
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -91.7252441384
Correct output: -151.3865608082 | Program output: -84.3865608082
Correct output: -39.5964789701 | Program output: -33.5964789701
Correct output: -165.6552500023 | Program output: -90.6552500023
Correct output: 115.8637099929 | Program output: 73.8637099929 
Correct output: 106.2814426659 | Program output: 48.2814426659 
Correct output: 176.1918465521 | Program output: 71.1918465521 
Correct output: -17.8149835933 | Program output: 16.1850164067 
Correct output: -65.5829878959 | Program output: -2.5829878959 
Correct output: 27.6366895788  | Program output: 54.6366895788 
Correct output: -19.5737445927 | Program output: -26.5737445927
Correct output: -146.6957573417 | Program output: -52.6957573417
Correct output: -93.4856677865 | Program output: -83.4856677865
Correct output: -62.4257652273 | Program output: -75.4257652273
Correct output: 8.389607373    | Program output: 44.389607373  
Correct output: -88.5634422156 | Program output: -57.5634422156
Correct output: 28.8889248865  | Program output: -59.1110751135
Correct output: 15.595489344   | Program output: -44.404510656 
Correct output: -49.1003576661 | Program output: -99.1003576661
Correct output: -113.1474461804 | Program output: -103.1474461804
Correct output: -19.0779583365 | Program output: 27.9220416635 
Correct output: -3.1068023861  | Program output: -81.1068023861
Correct output: 52.1593783355  | Program output: 75.1593783355 
Correct output: 128.3998855036 | Program output: 24.3998855036 
Correct output: 31.5586049792  | Program output: 73.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_shove} {:instruction integer_min} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_rot} {:instruction float_max})
Best program: (float_inc integer_shove integer_min float_yankdup integer_mod float_dec integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dup float_dec print_float integer_dup tagged_700 float_rot float_max)
Errors: [23.0 2 67.0 3 6.0 1 75.0 3 42.0 3 58.0 3 105.0 2 34.0 12 63.0 2 27.0 2 7.0 2 94.0 3 10.0 1 13.0 2 36.0 2 31.0 2 88.0 12 60.0 12 50.0 1 10.0 1 47.0 12 78.0 2 23.0 2 104.0 2 42.0 2]
Total: 1284.0
Mean: 25.68
Genome size: 25
Size: 26
Percent parens: 0.038
--- Population Statistics ---
Average total errors in population: 3723.7802574
Median total errors in population: 1302.0
Error averages by case: (119.68164639999999 2.726 164.1327262 3.704 109.03879 2.377 171.3560488 4.207 136.001584 3.898 150.18941020000003 3.875 192.6239895 3.237 133.06417860000002 12.233 159.1826852 9.554 126.88958280000001 2.629 105.1608989 3.267 188.24680899999998 3.673 112.8833407 3.282 110.725483 2.721 134.85078220000003 2.962 131.6309463 3.285 177.44388229999998 12.188 152.39696700000002 12.104 143.6653945 3.267 112.98339630000001 3.392 144.7034495 11.993 168.42474159999998 3.179 123.4350439 3.172 191.4001114 3.234 140.3343691 3.175)
Error minima by case: (18.0 1 67.0 2 6.0 1 75.0 2 28.3952 2 12.3952 2 34.6048 1 16.5366 10 55.166 2 27.0 1 2.0 2 94.0 2 10.0 1 8.0 1 7.7493 1 31.0 2 17.6048 10 10.3952 8 20.3952 1 10.0 1 17.5627 9 0.1163 2 23.0 2 33.6048 1 31.1596 2)
Average genome size in population (length): 35.805
Average program size in population (points): 36.805
Average percent parens in population: 0.032
Minimum age in population: 16.736328125
Maximum age in population: 21.48779296875
Average age in population: 19.37200903320312
Median age in population: 19.4259033203125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 95
Genome diversity (% unique Plush genomes):	 0.553
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 95
Syntactic diversity (% unique Push programs):	 0.553
Total error diversity:				 0.026
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.027
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 13765872
--- Timings ---
Current time: 1529615819444 milliseconds
Total Time:          46.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        18.0 seconds, 38.3%
Fitness Testing:     22.9 seconds, 48.9%
Report:               5.9 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 55079.0
Test mean error for best: 27.53950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -93.7252441384
Correct output: -151.3865608082 | Program output: -86.3865608082
Correct output: -39.5964789701 | Program output: -35.5964789701
Correct output: -165.6552500023 | Program output: -92.6552500023
Correct output: 115.8637099929 | Program output: 71.8637099929 
Correct output: 106.2814426659 | Program output: 46.2814426659 
Correct output: 176.1918465521 | Program output: 69.1918465521 
Correct output: -17.8149835933 | Program output: 14.1850164067 
Correct output: -65.5829878959 | Program output: -4.5829878959 
Correct output: 27.6366895788  | Program output: 52.6366895788 
Correct output: -19.5737445927 | Program output: -28.5737445927
Correct output: -146.6957573417 | Program output: -54.6957573417
Correct output: -93.4856677865 | Program output: -85.4856677865
Correct output: -62.4257652273 | Program output: -77.4257652273
Correct output: 8.389607373    | Program output: 42.389607373  
Correct output: -88.5634422156 | Program output: -59.5634422156
Correct output: 28.8889248865  | Program output: -61.1110751135
Correct output: 15.595489344   | Program output: -46.404510656 
Correct output: -49.1003576661 | Program output: -101.1003576661
Correct output: -113.1474461804 | Program output: -105.1474461804
Correct output: -19.0779583365 | Program output: 25.9220416635 
Correct output: -3.1068023861  | Program output: -83.1068023861
Correct output: 52.1593783355  | Program output: 73.1593783355 
Correct output: 128.3998855036 | Program output: 22.3998855036 
Correct output: 31.5586049792  | Program output: 71.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_687} {:instruction in1} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_rot} {:instruction float_max})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_inc tag_float_687 in1 integer_max float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult float_dec integer_swap integer_dup float_rot integer_mult float_dec print_float integer_dup tagged_700 float_rot float_max)
Errors: [25.0 2 65.0 3 4.0 1 73.0 3 44.0 2 60.0 2 107.0 3 32.0 12 61.0 2 25.0 2 9.0 2 92.0 2 8.0 2 15.0 2 34.0 2 29.0 2 90.0 12 62.0 12 52.0 3 8.0 2 45.0 12 80.0 1 21.0 2 106.0 2 40.0 1]
Total: 1278.0
Mean: 25.56
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2950.3100911999995
Median total errors in population: 1290.0
Error averages by case: (89.3395634 2.841 133.86935100000002 3.824 76.57182950000002 2.003 141.3800927 3.878 106.34035930000002 3.341 120.97547799999998 3.333 164.91957379999997 2.886 101.3777846 11.899 128.41373299999998 3.991 94.9919986 2.774 74.1955279 2.92 158.6902759 3.794 80.79595690000001 2.907 80.05702559999999 2.827 103.1443422 2.715 100.08181219999999 2.934 148.77462690000004 11.9 122.87791410000001 12.103 114.0087888 2.897 80.9902721 2.978 113.39076139999999 11.707 139.3335759 2.85 91.53243709999998 2.842 163.5206395 2.895 108.85637080000001 2.841)
Error minima by case: (18.0 1 65.0 2 4.0 1 73.0 2 37.0 2 34.0413 2 98.0 1 13.1227 10 60.8342 2 25.0 1 2.0 2 92.0 2 8.0 1 8.0 1 9.1175 1 29.0 1 28.9832 9 11.2111 9 45.0 1 8.0 1 15.1426 9 0.1163 1 21.0 2 56.1597 1 30.2604 1)
Average genome size in population (length): 28.767
Average program size in population (points): 29.767
Average percent parens in population: 0.035
Minimum age in population: 18.31005859375
Maximum age in population: 23.41259765625
Average age in population: 20.90439428710938
Median age in population: 20.9422607421875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 88
Genome diversity (% unique Plush genomes):	 0.481
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 88
Syntactic diversity (% unique Push programs):	 0.481
Total error diversity:				 0.025
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 14486997
--- Timings ---
Current time: 1529615822534 milliseconds
Total Time:          49.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.3 seconds, 38.6%
Fitness Testing:     24.3 seconds, 48.7%
Report:               6.2 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 55079.0
Test mean error for best: 27.53950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -93.7252441384
Correct output: -151.3865608082 | Program output: -86.3865608082
Correct output: -39.5964789701 | Program output: -35.5964789701
Correct output: -165.6552500023 | Program output: -92.6552500023
Correct output: 115.8637099929 | Program output: 71.8637099929 
Correct output: 106.2814426659 | Program output: 46.2814426659 
Correct output: 176.1918465521 | Program output: 69.1918465521 
Correct output: -17.8149835933 | Program output: 14.1850164067 
Correct output: -65.5829878959 | Program output: -4.5829878959 
Correct output: 27.6366895788  | Program output: 52.6366895788 
Correct output: -19.5737445927 | Program output: -28.5737445927
Correct output: -146.6957573417 | Program output: -54.6957573417
Correct output: -93.4856677865 | Program output: -85.4856677865
Correct output: -62.4257652273 | Program output: -77.4257652273
Correct output: 8.389607373    | Program output: 42.389607373  
Correct output: -88.5634422156 | Program output: -59.5634422156
Correct output: 28.8889248865  | Program output: -61.1110751135
Correct output: 15.595489344   | Program output: -46.404510656 
Correct output: -49.1003576661 | Program output: -101.1003576661
Correct output: -113.1474461804 | Program output: -105.1474461804
Correct output: -19.0779583365 | Program output: 25.9220416635 
Correct output: -3.1068023861  | Program output: -83.1068023861
Correct output: 52.1593783355  | Program output: 73.1593783355 
Correct output: 128.3998855036 | Program output: 22.3998855036 
Correct output: 31.5586049792  | Program output: 71.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction tag_float_687} {:instruction in1} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_rot} {:instruction float_max})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_inc tag_float_687 in1 integer_max float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult float_dec integer_swap integer_dup float_rot integer_mult float_dec print_float integer_dup tagged_700 float_rot float_max)
Errors: [25.0 2 65.0 3 4.0 1 73.0 3 44.0 2 60.0 2 107.0 3 32.0 12 61.0 2 25.0 2 9.0 2 92.0 2 8.0 2 15.0 2 34.0 2 29.0 2 90.0 12 62.0 12 52.0 3 8.0 2 45.0 12 80.0 1 21.0 2 106.0 2 40.0 1]
Total: 1278.0
Mean: 25.56
Genome size: 33
Size: 34
Percent parens: 0.029
--- Population Statistics ---
Average total errors in population: 2974.4111218999997
Median total errors in population: 1288.0
Error averages by case: (90.71461749999999 2.876 133.36129319999998 3.848 76.4792641 1.94 140.8201096 3.854 108.48287859999999 3.732 123.28627060000001 3.71 167.0662816 2.875 102.3696074 11.516 129.3959688 2.981 95.92330540000002 2.803 75.73644529999999 2.887 158.3764105 3.825 80.349102 2.76 81.4264789 2.862 104.2092813 2.683 99.80138649999999 2.888 150.8644327 11.528 124.8683308 12.108 115.68462709999999 2.777 80.4076388 2.82 114.4238192 12.168 141.50680300000002 2.806 92.2891341 2.815 165.9945917 2.866 109.84004320000001 2.805)
Error minima by case: (19.0 1 65.0 2 4.0 1 73.0 2 38.0 2 54.0 2 101.0 2 14.5366 10 61.0 2 25.0 1 3.0 2 92.0 2 8.0 1 9.0 1 7.4714 1 29.0 1 29.7258 9 14.6833 8 45.1398 1 8.0 1 15.6039 10 0.3128 1 21.0 2 100.0 1 31.8242 1)
Average genome size in population (length): 27.462
Average program size in population (points): 28.462
Average percent parens in population: 0.036
Minimum age in population: 19.9659423828125
Maximum age in population: 24.21380615234375
Average age in population: 22.43526489257812
Median age in population: 22.48300170898438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 140
Genome diversity (% unique Plush genomes):	 0.441
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 140
Syntactic diversity (% unique Push programs):	 0.441
Total error diversity:				 0.018
Error (vector) diversity:			 0.019
Behavioral diversity:				 0.02
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 15173872
--- Timings ---
Current time: 1529615825453 milliseconds
Total Time:          52.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        20.5 seconds, 38.8%
Fitness Testing:     25.7 seconds, 48.5%
Report:               6.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 55278.0
Test mean error for best: 27.63900
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -95.7252441384
Correct output: -151.3865608082 | Program output: -88.3865608082
Correct output: -39.5964789701 | Program output: -37.5964789701
Correct output: -165.6552500023 | Program output: -94.6552500023
Correct output: 115.8637099929 | Program output: 69.8637099929 
Correct output: 106.2814426659 | Program output: 44.2814426659 
Correct output: 176.1918465521 | Program output: 67.1918465521 
Correct output: -17.8149835933 | Program output: 12.1850164067 
Correct output: -65.5829878959 | Program output: -6.5829878959 
Correct output: 27.6366895788  | Program output: 50.6366895788 
Correct output: -19.5737445927 | Program output: -30.5737445927
Correct output: -146.6957573417 | Program output: -56.6957573417
Correct output: -93.4856677865 | Program output: -87.4856677865
Correct output: -62.4257652273 | Program output: -79.4257652273
Correct output: 8.389607373    | Program output: 40.389607373  
Correct output: -88.5634422156 | Program output: -61.5634422156
Correct output: 28.8889248865  | Program output: -63.1110751135
Correct output: 15.595489344   | Program output: -48.404510656 
Correct output: -49.1003576661 | Program output: -103.1003576661
Correct output: -113.1474461804 | Program output: -107.1474461804
Correct output: -19.0779583365 | Program output: 23.9220416635 
Correct output: -3.1068023861  | Program output: -85.1068023861
Correct output: 52.1593783355  | Program output: 71.1593783355 
Correct output: 128.3998855036 | Program output: 20.3998855036 
Correct output: 31.5586049792  | Program output: 69.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_shove} {:instruction integer_min} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_rot} {:instruction float_max})
Best program: (float_inc integer_shove integer_min float_yankdup integer_mod float_dec integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup float_rot integer_mult float_dec print_float integer_dup tagged_700 float_rot float_max)
Errors: [27.0 2 63.0 3 2.0 1 71.0 3 46.0 3 62.0 3 109.0 2 30.0 12 59.0 1 23.0 2 11.0 2 90.0 2 6.0 2 17.0 2 32.0 2 27.0 2 92.0 12 64.0 12 54.0 3 6.0 2 43.0 12 82.0 2 19.0 2 108.0 2 38.0 2]
Total: 1274.0
Mean: 25.48
Genome size: 43
Size: 44
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2637.0582073
Median total errors in population: 1284.0
Error averages by case: (77.75480230000001 2.724 119.5751227 3.651 61.8145642 1.777 127.15851239999999 3.695 96.2596857 3.553 111.1852162 3.541 155.7142306 2.847 88.04930259999999 11.909 115.397096 2.775 81.67559480000003 2.686 62.63858780000001 2.725 144.9054048 3.581 65.7644432 2.27 68.3400978 2.715 89.9761594 2.585 85.45988650000001 2.689 138.87084000000002 11.93 112.50402869999999 12.055 103.04589929999999 2.432 65.8611947 2.323 100.24976949999999 12.175 129.32171269999998 2.571 78.12020450000001 2.693 154.43990649999998 2.731 95.75794440000001 2.585)
Error minima by case: (0.9648 1 63.0 2 2.0 1 71.0 2 38.0 2 54.0 2 101.0 2 2.1154 9 4.1071 1 23.0 1 3.0 1 77.0057 2 6.0 1 7.2643 1 6.3896 1 18.8734 1 33.4652 9 12.2111 9 1.5201 1 6.0 1 3.3784 10 1.7503 1 19.0 1 100.0 1 29.5586 1)
Average genome size in population (length): 30.5
Average program size in population (points): 31.5
Average percent parens in population: 0.033
Minimum age in population: 21.58056640625
Maximum age in population: 25.79495239257812
Average age in population: 24.02781231689453
Median age in population: 24.05517578125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.489
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.489
Total error diversity:				 0.023
Error (vector) diversity:			 0.028
Behavioral diversity:				 0.028
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 15936497
--- Timings ---
Current time: 1529615828348 milliseconds
Total Time:          55.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.7 seconds, 38.9%
Fitness Testing:     27.0 seconds, 48.5%
Report:               6.9 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 55447.0
Test mean error for best: 27.72350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -97.7252441384
Correct output: -151.3865608082 | Program output: -90.3865608082
Correct output: -39.5964789701 | Program output: -39.5964789701
Correct output: -165.6552500023 | Program output: -96.6552500023
Correct output: 115.8637099929 | Program output: 67.8637099929 
Correct output: 106.2814426659 | Program output: 42.2814426659 
Correct output: 176.1918465521 | Program output: 65.1918465521 
Correct output: -17.8149835933 | Program output: 10.1850164067 
Correct output: -65.5829878959 | Program output: -8.5829878959 
Correct output: 27.6366895788  | Program output: 48.6366895788 
Correct output: -19.5737445927 | Program output: -32.5737445927
Correct output: -146.6957573417 | Program output: -58.6957573417
Correct output: -93.4856677865 | Program output: -89.4856677865
Correct output: -62.4257652273 | Program output: -81.4257652273
Correct output: 8.389607373    | Program output: 38.389607373  
Correct output: -88.5634422156 | Program output: -63.5634422156
Correct output: 28.8889248865  | Program output: -65.1110751135
Correct output: 15.595489344   | Program output: -50.404510656 
Correct output: -49.1003576661 | Program output: -105.1003576661
Correct output: -113.1474461804 | Program output: -109.1474461804
Correct output: -19.0779583365 | Program output: 21.9220416635 
Correct output: -3.1068023861  | Program output: -87.1068023861
Correct output: 52.1593783355  | Program output: 69.1593783355 
Correct output: 128.3998855036 | Program output: 18.3998855036 
Correct output: 31.5586049792  | Program output: 67.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_shove} {:instruction integer_min} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_cos} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_rot} {:instruction float_max})
Best program: (float_inc integer_shove integer_min float_yankdup integer_mod float_dec integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec print_float integer_dup print_integer integer_rot float_yank integer_shove integer_mod float_rot integer_mult float_dec float_cos integer_dup tagged_700 float_rot float_max)
Errors: [29.0 2 61.0 3 0.0 0 69.0 2 48.0 3 64.0 3 111.0 3 28.0 12 57.0 2 21.0 2 13.0 2 88.0 3 4.0 2 19.0 2 30.0 1 25.0 2 94.0 12 66.0 11 56.0 3 4.0 2 41.0 11 84.0 2 17.0 2 110.0 1 36.0 2]
Total: 1265.0
Mean: 25.3
Genome size: 53
Size: 54
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 2684.2243728999997
Median total errors in population: 1282.0
Error averages by case: (81.02699840000001 2.769 120.38402470000001 3.571 62.699049900000006 1.825 127.9710575 3.744 99.5611176 3.272 114.436591 3.259 158.89227659999997 3.23 88.82100840000003 12.145 116.0918018 2.764 82.4910552 2.718 66.0395393 2.738 145.54966840000003 3.307 66.6746348 2.543 71.6594169 2.757 90.73535709999999 2.599 86.24954010000002 2.589 141.95498219999996 12.131 115.57925379999999 11.865 106.1836769 3.224 66.85445810000002 2.612 100.9567536 12.147 132.5111642 2.293 78.95087250000002 2.682 157.57909089999998 2.765 96.53198300000001 2.29)
Error minima by case: (0.5 1 60.5659 2 0.0 0 69.0 2 38.0 2 54.0 2 101.0 2 11.1227 9 2.6423 1 21.0 1 3.0 1 55.8751 2 2.665 1 5.7995 1 6.3275 1 2.2572 1 28.4804 9 16.5845 9 7.4879 1 4.0 1 13.1426 10 1.4309 1 17.0 1 100.0 1 31.856 1)
Average genome size in population (length): 33.468
Average program size in population (points): 34.468
Average percent parens in population: 0.030
Minimum age in population: 22.657470703125
Maximum age in population: 27.29814147949219
Average age in population: 25.68765837097168
Median age in population: 25.72368621826172
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 87
Genome diversity (% unique Plush genomes):	 0.511
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 87
Syntactic diversity (% unique Push programs):	 0.511
Total error diversity:				 0.024
Error (vector) diversity:			 0.026
Behavioral diversity:				 0.026
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 16773247
--- Timings ---
Current time: 1529615831431 milliseconds
Total Time:          58.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        23.0 seconds, 39.1%
Fitness Testing:     28.4 seconds, 48.4%
Report:               7.3 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 55447.0
Test mean error for best: 27.72350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -97.7252441384
Correct output: -151.3865608082 | Program output: -90.3865608082
Correct output: -39.5964789701 | Program output: -39.5964789701
Correct output: -165.6552500023 | Program output: -96.6552500023
Correct output: 115.8637099929 | Program output: 67.8637099929 
Correct output: 106.2814426659 | Program output: 42.2814426659 
Correct output: 176.1918465521 | Program output: 65.1918465521 
Correct output: -17.8149835933 | Program output: 10.1850164067 
Correct output: -65.5829878959 | Program output: -8.5829878959 
Correct output: 27.6366895788  | Program output: 48.6366895788 
Correct output: -19.5737445927 | Program output: -32.5737445927
Correct output: -146.6957573417 | Program output: -58.6957573417
Correct output: -93.4856677865 | Program output: -89.4856677865
Correct output: -62.4257652273 | Program output: -81.4257652273
Correct output: 8.389607373    | Program output: 38.389607373  
Correct output: -88.5634422156 | Program output: -63.5634422156
Correct output: 28.8889248865  | Program output: -65.1110751135
Correct output: 15.595489344   | Program output: -50.404510656 
Correct output: -49.1003576661 | Program output: -105.1003576661
Correct output: -113.1474461804 | Program output: -109.1474461804
Correct output: -19.0779583365 | Program output: 21.9220416635 
Correct output: -3.1068023861  | Program output: -87.1068023861
Correct output: 52.1593783355  | Program output: 69.1593783355 
Correct output: 128.3998855036 | Program output: 18.3998855036 
Correct output: 31.5586049792  | Program output: 67.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_inc} {:instruction integer_inc} {:instruction tag_float_687} {:instruction in1} {:instruction integer_max} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_rot} {:instruction float_max})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_inc integer_inc tag_float_687 in1 integer_max float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_rot float_yank integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec float_dec float_dec float_rot integer_mult float_dec integer_swap integer_dup float_rot integer_mult float_dec print_float integer_dup tagged_700 float_rot float_max)
Errors: [29.0 2 61.0 3 0.0 0 69.0 2 48.0 3 64.0 3 111.0 3 28.0 12 57.0 2 21.0 2 13.0 2 88.0 3 4.0 2 19.0 2 30.0 1 25.0 2 94.0 12 66.0 11 56.0 3 4.0 2 41.0 11 84.0 2 17.0 2 110.0 1 36.0 2]
Total: 1265.0
Mean: 25.3
Genome size: 42
Size: 43
Percent parens: 0.023
--- Population Statistics ---
Average total errors in population: 2970.8048632999994
Median total errors in population: 1278.0
Error averages by case: (94.25283090000002 2.976 131.462258 3.912 73.75333029999999 2.044 139.00440430000003 3.938 112.48371260000003 3.334 126.92604779999999 3.339 171.00186 3.72 97.92275330000001 12.137 124.708711 2.742 92.99481080000001 2.916 78.00107080000001 2.824 156.03677330000002 3.308 78.4247837 2.974 85.00951589999998 2.966 100.8978307 2.756 97.53243259999998 2.938 153.3450908 12.104 127.44055419999997 11.94 118.614373 3.878 78.78158479999999 3.045 110.86335919999999 12.124 144.01208049999997 2.334 89.7314404 2.742 168.5227981 2.969 106.76645629999999 2.354)
Error minima by case: (20.0 1 60.0 2 0.0 0 68.0 2 39.0 2 55.0 2 102.0 2 10.1227 9 56.0 1 20.0 1 4.0 1 87.0 2 3.0 1 10.0 1 4.3275 1 24.0 1 28.8889 9 15.0435 9 42.7824 1 3.0 1 2.1016 9 0.0815 1 16.0 1 101.0 1 29.9287 1)
Average genome size in population (length): 35.441
Average program size in population (points): 36.441
Average percent parens in population: 0.028
Minimum age in population: 25.03533935546875
Maximum age in population: 29.01094055175781
Average age in population: 27.22601920318604
Median age in population: 27.24569702148438
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 99
Genome diversity (% unique Plush genomes):	 0.538
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 99
Syntactic diversity (% unique Push programs):	 0.538
Total error diversity:				 0.034
Error (vector) diversity:			 0.035
Behavioral diversity:				 0.036
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 17659447
--- Timings ---
Current time: 1529615834523 milliseconds
Total Time:          61.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.3 seconds, 39.2%
Fitness Testing:     29.8 seconds, 48.2%
Report:               7.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 56079.0
Test mean error for best: 28.03950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -101.7252441384
Correct output: -151.3865608082 | Program output: -94.3865608082
Correct output: -39.5964789701 | Program output: -43.5964789701
Correct output: -165.6552500023 | Program output: -100.6552500023
Correct output: 115.8637099929 | Program output: 63.8637099929 
Correct output: 106.2814426659 | Program output: 38.2814426659 
Correct output: 176.1918465521 | Program output: 61.1918465521 
Correct output: -17.8149835933 | Program output: 6.1850164067  
Correct output: -65.5829878959 | Program output: -12.5829878959
Correct output: 27.6366895788  | Program output: 44.6366895788 
Correct output: -19.5737445927 | Program output: -36.5737445927
Correct output: -146.6957573417 | Program output: -62.6957573417
Correct output: -93.4856677865 | Program output: -93.4856677865
Correct output: -62.4257652273 | Program output: -85.4257652273
Correct output: 8.389607373    | Program output: 34.389607373  
Correct output: -88.5634422156 | Program output: -67.5634422156
Correct output: 28.8889248865  | Program output: -69.1110751135
Correct output: 15.595489344   | Program output: -54.404510656 
Correct output: -49.1003576661 | Program output: -109.1003576661
Correct output: -113.1474461804 | Program output: -113.1474461804
Correct output: -19.0779583365 | Program output: 17.9220416635 
Correct output: -3.1068023861  | Program output: -91.1068023861
Correct output: 52.1593783355  | Program output: 65.1593783355 
Correct output: 128.3998855036 | Program output: 14.3998855036 
Correct output: 31.5586049792  | Program output: 63.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_shove} {:instruction integer_min} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_cos} {:instruction float_max})
Best program: (float_inc integer_shove integer_min float_yankdup integer_mod float_dec integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec float_rot integer_mult float_dec float_dec float_dec float_dec float_rot integer_mult float_dec integer_swap integer_dup float_rot integer_mult float_dec print_float integer_dup tagged_700 float_cos float_max)
Errors: [33.0 3 57.0 3 4.0 2 65.0 2 52.0 3 68.0 3 115.0 3 24.0 13 53.0 2 17.0 2 17.0 2 84.0 3 0.0 0 23.0 2 26.0 2 21.0 2 98.0 12 70.0 11 60.0 2 0.0 0 37.0 11 88.0 2 13.0 2 114.0 2 32.0 2]
Total: 1262.0
Mean: 25.24
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2694.1025749999994
Median total errors in population: 1274.0
Error averages by case: (84.71959100000002 2.81 119.63821120000001 3.773 61.67117340000001 1.825 127.24790899999999 3.609 102.11683850000003 3.636 116.83182459999999 3.632 161.41916660000004 3.303 85.59567810000001 12.171 113.8755803 2.264 79.9769925 2.759 68.8914048 2.565 145.48989490000002 3.373 65.99001419999999 2.786 75.347799 2.792 88.0923187 2.565 85.4097289 2.813 144.5414744 12.139 118.5627576 11.916 109.51346140000001 3.731 66.25283280000004 2.843 98.20586280000003 12.036 134.93201979999998 2.643 76.60837599999999 2.51 159.3354562 2.728 93.9492083 2.665)
Error minima by case: (19.0 1 55.0 2 0.0 0 63.0 2 38.0 2 54.0 2 101.0 2 7.1227 9 51.0 1 1.2377 1 3.0 1 82.0 2 0.0 0 9.0 1 9.3894 1 19.0 1 0.0146 8 13.2789 9 40.0895 1 0.0 0 1.1016 9 0.103 1 11.0 1 99.5255 1 2.6843 1)
Average genome size in population (length): 39.724
Average program size in population (points): 40.724
Average percent parens in population: 0.025
Minimum age in population: 26.68210601806641
Maximum age in population: 30.54255294799805
Average age in population: 28.70091038131714
Median age in population: 28.74598121643066
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.605
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.605
Total error diversity:				 0.04
Error (vector) diversity:			 0.045
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 18652722
--- Timings ---
Current time: 1529615837565 milliseconds
Total Time:          64.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.5 seconds, 39.3%
Fitness Testing:     31.3 seconds, 48.2%
Report:               8.0 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 56079.0
Test mean error for best: 28.03950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -101.7252441384
Correct output: -151.3865608082 | Program output: -94.3865608082
Correct output: -39.5964789701 | Program output: -43.5964789701
Correct output: -165.6552500023 | Program output: -100.6552500023
Correct output: 115.8637099929 | Program output: 63.8637099929 
Correct output: 106.2814426659 | Program output: 38.2814426659 
Correct output: 176.1918465521 | Program output: 61.1918465521 
Correct output: -17.8149835933 | Program output: 6.1850164067  
Correct output: -65.5829878959 | Program output: -12.5829878959
Correct output: 27.6366895788  | Program output: 44.6366895788 
Correct output: -19.5737445927 | Program output: -36.5737445927
Correct output: -146.6957573417 | Program output: -62.6957573417
Correct output: -93.4856677865 | Program output: -93.4856677865
Correct output: -62.4257652273 | Program output: -85.4257652273
Correct output: 8.389607373    | Program output: 34.389607373  
Correct output: -88.5634422156 | Program output: -67.5634422156
Correct output: 28.8889248865  | Program output: -69.1110751135
Correct output: 15.595489344   | Program output: -54.404510656 
Correct output: -49.1003576661 | Program output: -109.1003576661
Correct output: -113.1474461804 | Program output: -113.1474461804
Correct output: -19.0779583365 | Program output: 17.9220416635 
Correct output: -3.1068023861  | Program output: -91.1068023861
Correct output: 52.1593783355  | Program output: 65.1593783355 
Correct output: 128.3998855036 | Program output: 14.3998855036 
Correct output: 31.5586049792  | Program output: 63.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_shove} {:instruction integer_min} {:instruction float_yankdup} {:instruction integer_mod} {:instruction integer_div} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction integer_min} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction print_integer} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_cos} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_rot} {:instruction float_max})
Best program: (float_inc integer_shove integer_min float_yankdup integer_mod integer_div integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_dec float_dec integer_rot float_yank float_dec integer_min float_rot integer_mult float_dec float_rot integer_mult integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec print_float integer_dup print_integer integer_rot float_yank integer_shove integer_mod float_rot integer_mult float_dec float_cos integer_dup tagged_700 float_rot float_max)
Errors: [33.0 3 57.0 3 4.0 2 65.0 2 52.0 3 68.0 3 115.0 3 24.0 13 53.0 2 17.0 2 17.0 2 84.0 3 0.0 0 23.0 2 26.0 2 21.0 2 98.0 12 70.0 11 60.0 2 0.0 0 37.0 11 88.0 2 13.0 2 114.0 2 32.0 2]
Total: 1262.0
Mean: 25.24
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 2906.0951603000003
Median total errors in population: 1272.0
Error averages by case: (94.20445090000001 2.858 126.0236082 3.834 69.60020659999999 1.856 133.60876420000002 3.36 111.845195 3.765 126.46976599999999 3.76 170.5074391 3.439 94.5855271 12.315 121.7483498 2.77 88.17815130000001 2.792 78.85341389999998 2.892 151.00345190000002 3.725 73.27816410000001 2.762 84.8772489 2.833 96.4026736 2.412 92.45920849999999 2.928 153.72212489999998 12.118 127.77317480000004 11.557 118.9878165 3.822 73.48394250000003 2.827 106.61329020000002 11.682 144.4410348 2.83 84.7185083 2.846 169.19634409999995 2.606 102.06830510000002 2.856)
Error minima by case: (18.0 1 9.2133 2 0.0 0 18.6553 1 20.8637 2 12.7186 2 36.8082 1 7.0679 9 48.0 1 0.5392 1 2.0 1 30.3042 2 0.0 0 8.0 1 1.3896 1 16.0 1 0.7131 8 12.5804 8 39.1398 1 0.0 0 9.6039 9 0.8826 1 4.1318 1 80.3723 1 3.3828 1)
Average genome size in population (length): 44.315
Average program size in population (points): 45.315
Average percent parens in population: 0.022
Minimum age in population: 27.80503082275391
Maximum age in population: 32.11747932434082
Average age in population: 30.21439029312134
Median age in population: 30.26130199432373
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 34
Genome diversity (% unique Plush genomes):	 0.631
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 34
Syntactic diversity (% unique Push programs):	 0.631
Total error diversity:				 0.039
Error (vector) diversity:			 0.044
Behavioral diversity:				 0.044
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 19760672
--- Timings ---
Current time: 1529615840879 milliseconds
Total Time:          68.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.8 seconds, 39.3%
Fitness Testing:     32.8 seconds, 48.2%
Report:               8.4 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 56079.0
Test mean error for best: 28.03950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -101.7252441384
Correct output: -151.3865608082 | Program output: -94.3865608082
Correct output: -39.5964789701 | Program output: -43.5964789701
Correct output: -165.6552500023 | Program output: -100.6552500023
Correct output: 115.8637099929 | Program output: 63.8637099929 
Correct output: 106.2814426659 | Program output: 38.2814426659 
Correct output: 176.1918465521 | Program output: 61.1918465521 
Correct output: -17.8149835933 | Program output: 6.1850164067  
Correct output: -65.5829878959 | Program output: -12.5829878959
Correct output: 27.6366895788  | Program output: 44.6366895788 
Correct output: -19.5737445927 | Program output: -36.5737445927
Correct output: -146.6957573417 | Program output: -62.6957573417
Correct output: -93.4856677865 | Program output: -93.4856677865
Correct output: -62.4257652273 | Program output: -85.4257652273
Correct output: 8.389607373    | Program output: 34.389607373  
Correct output: -88.5634422156 | Program output: -67.5634422156
Correct output: 28.8889248865  | Program output: -69.1110751135
Correct output: 15.595489344   | Program output: -54.404510656 
Correct output: -49.1003576661 | Program output: -109.1003576661
Correct output: -113.1474461804 | Program output: -113.1474461804
Correct output: -19.0779583365 | Program output: 17.9220416635 
Correct output: -3.1068023861  | Program output: -91.1068023861
Correct output: 52.1593783355  | Program output: 65.1593783355 
Correct output: 128.3998855036 | Program output: 14.3998855036 
Correct output: 31.5586049792  | Program output: 63.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction float_inc} {:instruction integer_shove} {:instruction 67.41742129142091} {:instruction float_yankdup} {:instruction integer_mod} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_cos} {:instruction float_max})
Best program: (float_inc integer_shove 67.41742129142091 float_yankdup integer_mod float_dec integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec float_rot integer_mult float_dec float_dec float_dec float_dec float_rot integer_mult float_dec integer_swap integer_dup float_rot integer_mult float_dec print_float integer_dup tagged_700 float_cos float_max)
Errors: [33.0 3 57.0 3 4.0 2 65.0 2 52.0 3 68.0 3 115.0 3 24.0 13 53.0 2 17.0 2 17.0 2 84.0 3 0.0 0 23.0 2 26.0 2 21.0 2 98.0 12 70.0 11 60.0 2 0.0 0 37.0 11 88.0 2 13.0 2 114.0 2 32.0 2]
Total: 1262.0
Mean: 25.24
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2879.6925407000003
Median total errors in population: 1265.0
Error averages by case: (94.62958620000003 2.964 124.08513690000001 3.83 68.89742689999999 2.165 131.6080297 3.488 112.7823975 3.627 127.21170229999998 3.626 171.3551847 3.824 91.38999169999998 12.577 118.31835180000002 2.952 86.13959820000001 2.801 78.96863630000001 2.949 148.714023 3.924 71.2716629 2.424 85.31730879999998 2.861 94.1213003 2.421 90.2606295 2.951 153.95419959999998 12.062 128.0012439 11.17 119.2624312 3.823 71.6251716 2.501 103.83800739999998 11.133 144.49115360000002 2.875 82.89976619999999 2.888 169.0681335 2.627 100.097467 2.921)
Error minima by case: (17.6679 1 24.3866 2 0.0 0 22.6553 1 24.8637 2 16.7186 2 40.8082 2 6.8758 8 2.417 1 7.9156 1 3.4263 1 34.3042 2 0.0 0 9.5742 1 4.3896 1 2.1703 1 9.1678 9 4.1256 8 24.4095 1 0.0 0 5.6129 9 0.8532 1 1.8695 1 29.3999 1 11.8375 1)
Average genome size in population (length): 47.7
Average program size in population (points): 48.7
Average percent parens in population: 0.021
Minimum age in population: 29.25676345825195
Maximum age in population: 33.89470481872559
Average age in population: 31.65856064033508
Median age in population: 31.68780899047852
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.043
Error (vector) diversity:			 0.046
Behavioral diversity:				 0.046
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 20953222
--- Timings ---
Current time: 1529615844075 milliseconds
Total Time:          71.4 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.1 seconds, 39.3%
Fitness Testing:     34.3 seconds, 48.1%
Report:               8.9 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 54663.0
Test mean error for best: 27.33150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -97.7252441384
Correct output: -151.3865608082 | Program output: -92.3865608082
Correct output: -39.5964789701 | Program output: -41.5964789701
Correct output: -165.6552500023 | Program output: -98.6552500023
Correct output: 115.8637099929 | Program output: 67.8637099929 
Correct output: 106.2814426659 | Program output: 42.2814426659 
Correct output: 176.1918465521 | Program output: 65.1918465521 
Correct output: -17.8149835933 | Program output: 8.1850164067  
Correct output: -65.5829878959 | Program output: -10.5829878959
Correct output: 27.6366895788  | Program output: 46.6366895788 
Correct output: -19.5737445927 | Program output: -32.5737445927
Correct output: -146.6957573417 | Program output: -60.6957573417
Correct output: -93.4856677865 | Program output: -91.4856677865
Correct output: -62.4257652273 | Program output: -81.4257652273
Correct output: 8.389607373    | Program output: 36.389607373  
Correct output: -88.5634422156 | Program output: -65.5634422156
Correct output: 28.8889248865  | Program output: -65.1110751135
Correct output: 15.595489344   | Program output: -50.404510656 
Correct output: -49.1003576661 | Program output: -105.1003576661
Correct output: -113.1474461804 | Program output: -111.1474461804
Correct output: -19.0779583365 | Program output: 19.9220416635 
Correct output: -3.1068023861  | Program output: -87.1068023861
Correct output: 52.1593783355  | Program output: 67.1593783355 
Correct output: 128.3998855036 | Program output: 18.3998855036 
Correct output: 31.5586049792  | Program output: 65.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec float_dec integer_mult integer_shove integer_mult float_dec integer_swap integer_dup float_shove float_rot integer_mult float_dec float_dec integer_max integer_rot float_yank integer_shove integer_mod float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [29.0 2 59.0 3 2.0 2 67.0 3 48.0 3 64.0 3 111.0 3 26.0 13 55.0 2 19.0 2 13.0 2 86.0 3 2.0 1 19.0 2 28.0 2 23.0 2 94.0 12 66.0 11 56.0 3 2.0 1 39.0 10 84.0 2 15.0 2 110.0 1 34.0 2]
Total: 1243.0
Mean: 24.86
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3018.9191791000007
Median total errors in population: 1264.0
Error averages by case: (102.3613064 3.386 129.1935024 4.055 75.60210150000003 2.976 136.77510160000003 3.809 120.2717603 3.592 134.35287410000004 3.584 178.54985750000003 3.998 93.4373551 12.866 120.59451290000001 3.135 89.93925850000001 3.027 86.25399370000001 3.117 153.31654619999998 4.096 76.69132210000001 2.165 93.133165 3.077 97.64926369999998 2.877 95.1307585 3.132 159.90376309999996 12.075 134.2871026 11.169 126.82305020000004 3.861 77.2907253 2.24 106.51592109999999 10.908 150.60622759999998 3.039 86.89363539999998 3.066 174.3636423 3.087 103.58243199999998 3.063)
Error minima by case: (19.0 1 21.3866 2 0.0 0 19.6553 1 22.8637 2 13.7186 2 37.8082 2 5.1442 8 22.0584 1 12.0 1 3.0 1 32.3042 2 0.0 0 9.0 1 1.3618 1 16.0 1 24.5285 9 14.837 9 5.5758 1 0.0 0 5.6039 8 1.0228 1 1.258 1 67.9825 1 21.8588 1)
Average genome size in population (length): 49.952
Average program size in population (points): 50.952
Average percent parens in population: 0.020
Minimum age in population: 30.25676345825195
Maximum age in population: 35.20419979095459
Average age in population: 33.0517021279335
Median age in population: 33.09547567367554
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.651
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.651
Total error diversity:				 0.058
Error (vector) diversity:			 0.066
Behavioral diversity:				 0.066
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 22202172
--- Timings ---
Current time: 1529615847279 milliseconds
Total Time:          74.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.3 seconds, 39.3%
Fitness Testing:     35.9 seconds, 48.1%
Report:               9.3 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 54663.0
Test mean error for best: 27.33150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -97.7252441384
Correct output: -151.3865608082 | Program output: -92.3865608082
Correct output: -39.5964789701 | Program output: -41.5964789701
Correct output: -165.6552500023 | Program output: -98.6552500023
Correct output: 115.8637099929 | Program output: 67.8637099929 
Correct output: 106.2814426659 | Program output: 42.2814426659 
Correct output: 176.1918465521 | Program output: 65.1918465521 
Correct output: -17.8149835933 | Program output: 8.1850164067  
Correct output: -65.5829878959 | Program output: -10.5829878959
Correct output: 27.6366895788  | Program output: 46.6366895788 
Correct output: -19.5737445927 | Program output: -32.5737445927
Correct output: -146.6957573417 | Program output: -60.6957573417
Correct output: -93.4856677865 | Program output: -91.4856677865
Correct output: -62.4257652273 | Program output: -81.4257652273
Correct output: 8.389607373    | Program output: 36.389607373  
Correct output: -88.5634422156 | Program output: -65.5634422156
Correct output: 28.8889248865  | Program output: -65.1110751135
Correct output: 15.595489344   | Program output: -50.404510656 
Correct output: -49.1003576661 | Program output: -105.1003576661
Correct output: -113.1474461804 | Program output: -111.1474461804
Correct output: -19.0779583365 | Program output: 19.9220416635 
Correct output: -3.1068023861  | Program output: -87.1068023861
Correct output: 52.1593783355  | Program output: 67.1593783355 
Correct output: 128.3998855036 | Program output: 18.3998855036 
Correct output: 31.5586049792  | Program output: 65.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_max} {:instruction integer_rot} {:instruction float_yank} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec float_dec integer_mult integer_shove integer_mult float_dec integer_swap integer_dup float_shove float_rot integer_mult float_dec float_dec integer_max integer_rot float_yank integer_shove integer_mod float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [29.0 2 59.0 3 2.0 2 67.0 3 48.0 3 64.0 3 111.0 3 26.0 13 55.0 2 19.0 2 13.0 2 86.0 3 2.0 1 19.0 2 28.0 2 23.0 2 94.0 12 66.0 11 56.0 3 2.0 1 39.0 10 84.0 2 15.0 2 110.0 1 34.0 2]
Total: 1243.0
Mean: 24.86
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3202.9748321
Median total errors in population: 1264.0
Error averages by case: (109.97010119999997 3.778 134.9803236 4.098 84.2773549 3.09 142.52299119999998 3.568 127.01276959999998 3.846 141.19756900000002 3.868 184.83660549999996 4.012 103.01043869999997 12.937 129.98938890000002 3.143 96.79532030000001 3.071 94.39937420000001 3.151 160.17769639999997 4.118 83.3060321 1.834 100.7759167 3.135 104.79453559999999 2.915 101.63139199999999 3.142 167.50371119999997 12.056 142.1421566 11.154 133.96061950000004 3.585 83.73113679999999 1.906 114.78050219999999 11.155 158.3916753 3.054 93.3885038 3.065 183.1225886 3.145 110.39712820000001 3.053)
Error minima by case: (21.0 1 7.2133 2 0.0 0 17.6553 1 22.8637 2 11.7186 2 35.8082 2 6.9855 8 47.0 1 11.0 1 3.9149 1 32.3042 2 0.0 0 11.0 1 13.2896 1 15.0 1 23.5285 9 16.0293 7 32.9561 2 0.0 0 4.6322 9 0.1468 1 0.258 1 63.9825 1 20.8588 1)
Average genome size in population (length): 52.086
Average program size in population (points): 53.086
Average percent parens in population: 0.019
Minimum age in population: 32.19343233108521
Maximum age in population: 36.48319292068481
Average age in population: 34.58023315215111
Median age in population: 34.66101825237274
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 49
Genome diversity (% unique Plush genomes):	 0.66
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 49
Syntactic diversity (% unique Push programs):	 0.66
Total error diversity:				 0.047
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.055
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 23504472
--- Timings ---
Current time: 1529615850681 milliseconds
Total Time:          77.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.6 seconds, 39.2%
Fitness Testing:     37.6 seconds, 48.2%
Report:               9.7 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 52280.0
Test mean error for best: 26.14000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -94.7252441384
Correct output: -151.3865608082 | Program output: -94.3865608082
Correct output: -39.5964789701 | Program output: -43.5964789701
Correct output: -165.6552500023 | Program output: -100.6552500023
Correct output: 115.8637099929 | Program output: 70.8637099929 
Correct output: 106.2814426659 | Program output: 45.2814426659 
Correct output: 176.1918465521 | Program output: 68.1918465521 
Correct output: -17.8149835933 | Program output: 6.1850164067  
Correct output: -65.5829878959 | Program output: -12.5829878959
Correct output: 27.6366895788  | Program output: 44.6366895788 
Correct output: -19.5737445927 | Program output: -29.5737445927
Correct output: -146.6957573417 | Program output: -62.6957573417
Correct output: -93.4856677865 | Program output: -93.4856677865
Correct output: -62.4257652273 | Program output: -78.4257652273
Correct output: 8.389607373    | Program output: 34.389607373  
Correct output: -88.5634422156 | Program output: -67.5634422156
Correct output: 28.8889248865  | Program output: -62.1110751135
Correct output: 15.595489344   | Program output: -47.404510656 
Correct output: -49.1003576661 | Program output: -102.1003576661
Correct output: -113.1474461804 | Program output: -113.1474461804
Correct output: -19.0779583365 | Program output: 17.9220416635 
Correct output: -3.1068023861  | Program output: -84.1068023861
Correct output: 52.1593783355  | Program output: 65.1593783355 
Correct output: 128.3998855036 | Program output: 21.3998855036 
Correct output: 31.5586049792  | Program output: 63.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [26.0 2 57.0 3 4.0 2 65.0 2 45.0 3 61.0 3 108.0 3 24.0 13 53.0 2 17.0 2 10.0 1 84.0 3 0.0 0 16.0 2 26.0 2 21.0 2 91.0 12 63.0 12 53.0 3 0.0 0 37.0 11 81.0 2 13.0 2 107.0 2 32.0 2]
Total: 1185.0
Mean: 23.7
Genome size: 50
Size: 51
Percent parens: 0.020
--- Population Statistics ---
Average total errors in population: 2783.8514057999996
Median total errors in population: 1262.0
Error averages by case: (94.00915760000001 3.787 118.03807570000002 3.941 66.85582520000001 2.953 125.7620226 3.233 111.9402048 3.884 126.25294820000002 3.878 170.82955359999997 3.9 84.96512710000002 12.881 112.39233949999999 2.983 78.86741490000003 2.925 78.112813 2.981 142.58768119999996 3.954 65.3993211 1.482 84.6859597 2.972 86.7795855 2.801 83.83369019999998 2.984 152.39026979999997 11.985 126.58355879999996 11.099 118.25659759999999 3.278 65.9363586 1.542 96.85949799999999 11.186 142.96778530000003 2.901 75.66307920000003 2.958 168.78073499999996 2.992 92.6808036 2.941)
Error minima by case: (2.9206 1 5.2133 2 0.0 0 24.6553 1 19.8637 2 18.7186 2 42.8082 2 2.1227 1 0.1301 1 3.7741 1 3.0 1 29.3042 2 0.0 0 3.0271 1 2.6382 1 13.0 1 5.0263 9 8.2671 8 13.4174 1 0.0 0 4.1426 8 0.9182 1 0.258 1 62.9825 1 7.696 1)
Average genome size in population (length): 52.756
Average program size in population (points): 53.756
Average percent parens in population: 0.019
Minimum age in population: 33.346595287323
Maximum age in population: 37.79194402694702
Average age in population: 36.02605402219296
Median age in population: 36.1002956032753
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 46
Genome diversity (% unique Plush genomes):	 0.67
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 46
Syntactic diversity (% unique Push programs):	 0.67
Total error diversity:				 0.055
Error (vector) diversity:			 0.063
Behavioral diversity:				 0.063
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 24823447
--- Timings ---
Current time: 1529615854017 milliseconds
Total Time:          81.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        31.8 seconds, 39.1%
Fitness Testing:     39.3 seconds, 48.3%
Report:              10.2 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 52280.0
Test mean error for best: 26.14000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -94.7252441384
Correct output: -151.3865608082 | Program output: -94.3865608082
Correct output: -39.5964789701 | Program output: -43.5964789701
Correct output: -165.6552500023 | Program output: -100.6552500023
Correct output: 115.8637099929 | Program output: 70.8637099929 
Correct output: 106.2814426659 | Program output: 45.2814426659 
Correct output: 176.1918465521 | Program output: 68.1918465521 
Correct output: -17.8149835933 | Program output: 6.1850164067  
Correct output: -65.5829878959 | Program output: -12.5829878959
Correct output: 27.6366895788  | Program output: 44.6366895788 
Correct output: -19.5737445927 | Program output: -29.5737445927
Correct output: -146.6957573417 | Program output: -62.6957573417
Correct output: -93.4856677865 | Program output: -93.4856677865
Correct output: -62.4257652273 | Program output: -78.4257652273
Correct output: 8.389607373    | Program output: 34.389607373  
Correct output: -88.5634422156 | Program output: -67.5634422156
Correct output: 28.8889248865  | Program output: -62.1110751135
Correct output: 15.595489344   | Program output: -47.404510656 
Correct output: -49.1003576661 | Program output: -102.1003576661
Correct output: -113.1474461804 | Program output: -113.1474461804
Correct output: -19.0779583365 | Program output: 17.9220416635 
Correct output: -3.1068023861  | Program output: -84.1068023861
Correct output: 52.1593783355  | Program output: 65.1593783355 
Correct output: 128.3998855036 | Program output: 21.3998855036 
Correct output: 31.5586049792  | Program output: 63.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_swap} {:instruction integer_dup} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction tagged_700} {:instruction float_rot} {:instruction float_max})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_rot integer_mult float_dec float_dec float_dec float_yank integer_shove integer_mod float_rot integer_mult float_dec integer_mult float_dec float_rot integer_mult float_dec integer_swap integer_dup float_rot integer_mult float_dec print_float integer_dup tagged_700 float_rot float_max)
Errors: [26.0 2 57.0 3 4.0 2 65.0 2 45.0 3 61.0 3 108.0 3 24.0 13 53.0 2 17.0 2 10.0 1 84.0 3 0.0 0 16.0 2 26.0 2 21.0 2 91.0 12 63.0 12 53.0 3 0.0 0 37.0 11 81.0 2 13.0 2 107.0 2 32.0 2]
Total: 1185.0
Mean: 23.7
Genome size: 57
Size: 58
Percent parens: 0.017
--- Population Statistics ---
Average total errors in population: 2961.7623363999996
Median total errors in population: 1262.0
Error averages by case: (100.26582170000002 3.788 126.00934299999999 4.004 74.7101624 3.039 133.5932496 3.403 118.15937430000001 3.968 132.3493091 3.959 176.65811419999994 3.946 92.3310974 12.869 119.5211928 3.102 86.9805298 2.996 84.15873829999997 3.074 150.2538958 4.043 73.62302129999999 1.687 91.00977660000001 3.075 94.79714519999997 2.869 91.97800080000002 3.079 158.06794530000002 12.059 132.49177229999998 11.171 124.22069719999996 3.453 74.13288610000001 1.739 104.6670853 11.235 148.6074029 2.995 83.80991220000001 3.02 174.10644499999998 3.033 100.64141780000003 3.012)
Error minima by case: (20.0 1 24.3866 1 0.0 0 22.6553 1 18.6895 2 9.1072 2 40.8082 2 5.1983 2 27.5276 1 8.0 1 3.9684 1 30.3042 2 0.0 0 10.0 1 0.6065 1 12.0 1 19.8929 10 6.5994 9 11.045 1 0.0 0 6.0809 8 0.0349 1 0.742 1 31.2257 1 19.8588 1)
Average genome size in population (length): 52.364
Average program size in population (points): 53.364
Average percent parens in population: 0.019
Minimum age in population: 34.47236669063568
Maximum age in population: 39.617123067379
Average age in population: 37.46094355553389
Median age in population: 37.52533522248268
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 32
Genome diversity (% unique Plush genomes):	 0.712
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 32
Syntactic diversity (% unique Push programs):	 0.712
Total error diversity:				 0.074
Error (vector) diversity:			 0.086
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 26132547
--- Timings ---
Current time: 1529615857296 milliseconds
Total Time:          84.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.1 seconds, 39.1%
Fitness Testing:     40.9 seconds, 48.3%
Report:              10.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 50948.0
Test mean error for best: 25.47400
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -94.7252441384
Correct output: -151.3865608082 | Program output: -98.3865608082
Correct output: -39.5964789701 | Program output: -47.5964789701
Correct output: -165.6552500023 | Program output: -104.6552500023
Correct output: 115.8637099929 | Program output: 70.8637099929 
Correct output: 106.2814426659 | Program output: 45.2814426659 
Correct output: 176.1918465521 | Program output: 68.1918465521 
Correct output: -17.8149835933 | Program output: 2.1850164067  
Correct output: -65.5829878959 | Program output: -16.5829878959
Correct output: 27.6366895788  | Program output: 40.6366895788 
Correct output: -19.5737445927 | Program output: -29.5737445927
Correct output: -146.6957573417 | Program output: -66.6957573417
Correct output: -93.4856677865 | Program output: -97.4856677865
Correct output: -62.4257652273 | Program output: -78.4257652273
Correct output: 8.389607373    | Program output: 30.389607373  
Correct output: -88.5634422156 | Program output: -71.5634422156
Correct output: 28.8889248865  | Program output: -62.1110751135
Correct output: 15.595489344   | Program output: -47.404510656 
Correct output: -49.1003576661 | Program output: -102.1003576661
Correct output: -113.1474461804 | Program output: -117.1474461804
Correct output: -19.0779583365 | Program output: 13.9220416635 
Correct output: -3.1068023861  | Program output: -84.1068023861
Correct output: 52.1593783355  | Program output: 61.1593783355 
Correct output: 128.3998855036 | Program output: 21.3998855036 
Correct output: 31.5586049792  | Program output: 59.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove integer_mult float_rot integer_mult float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [26.0 2 53.0 3 8.0 2 61.0 2 45.0 3 61.0 3 108.0 3 20.0 13 49.0 2 13.0 2 10.0 1 80.0 2 4.0 1 16.0 2 22.0 2 17.0 2 91.0 12 63.0 12 53.0 3 4.0 1 33.0 11 81.0 2 9.0 2 107.0 2 28.0 2]
Total: 1154.0
Mean: 23.08
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3241.1894792000003
Median total errors in population: 1262.0
Error averages by case: (109.70053790000001 3.606 138.91118069999996 4.131 87.44779900000002 3.123 146.43772130000002 3.757 126.81951780000003 4.077 140.68252500000006 4.084 184.25812019999998 3.996 102.88662649999993 12.871 129.90965980000001 3.257 100.66521570000005 3.142 93.24212279999996 3.175 162.7246572 4.192 87.72916270000002 2.115 100.51666859999995 3.182 108.41287079999995 3.012 105.58347369999997 3.255 166.58797579999995 12.134 141.45540850000003 11.335 133.49190369999997 3.797 88.3277603 2.189 117.43677470000002 11.238 157.61498170000002 3.123 97.53356100000003 3.19 180.4235053 3.054 114.14674850000004 3.208)
Error minima by case: (8.1326 1 10.2133 2 0.0 0 20.6553 1 22.8637 2 14.7186 2 38.8082 1 6.0316 9 2.417 1 2.4048 1 2.0 1 32.3042 2 0.0 0 8.0 1 4.6382 1 11.7056 1 3.657 10 9.5955 8 7.4174 1 0.0 0 4.8984 9 0.0659 1 0.258 1 29.3999 1 6.3267 1)
Average genome size in population (length): 51.697
Average program size in population (points): 52.697
Average percent parens in population: 0.019
Minimum age in population: 36.60164666175842
Maximum age in population: 40.74609953165054
Average age in population: 38.89373053133488
Median age in population: 38.93078437447548
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 69
Genome diversity (% unique Plush genomes):	 0.728
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 69
Syntactic diversity (% unique Push programs):	 0.728
Total error diversity:				 0.117
Error (vector) diversity:			 0.138
Behavioral diversity:				 0.138
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 27425022
--- Timings ---
Current time: 1529615860606 milliseconds
Total Time:          88.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.3 seconds, 39.0%
Fitness Testing:     42.5 seconds, 48.4%
Report:              11.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 50948.0
Test mean error for best: 25.47400
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -94.7252441384
Correct output: -151.3865608082 | Program output: -98.3865608082
Correct output: -39.5964789701 | Program output: -47.5964789701
Correct output: -165.6552500023 | Program output: -104.6552500023
Correct output: 115.8637099929 | Program output: 70.8637099929 
Correct output: 106.2814426659 | Program output: 45.2814426659 
Correct output: 176.1918465521 | Program output: 68.1918465521 
Correct output: -17.8149835933 | Program output: 2.1850164067  
Correct output: -65.5829878959 | Program output: -16.5829878959
Correct output: 27.6366895788  | Program output: 40.6366895788 
Correct output: -19.5737445927 | Program output: -29.5737445927
Correct output: -146.6957573417 | Program output: -66.6957573417
Correct output: -93.4856677865 | Program output: -97.4856677865
Correct output: -62.4257652273 | Program output: -78.4257652273
Correct output: 8.389607373    | Program output: 30.389607373  
Correct output: -88.5634422156 | Program output: -71.5634422156
Correct output: 28.8889248865  | Program output: -62.1110751135
Correct output: 15.595489344   | Program output: -47.404510656 
Correct output: -49.1003576661 | Program output: -102.1003576661
Correct output: -113.1474461804 | Program output: -117.1474461804
Correct output: -19.0779583365 | Program output: 13.9220416635 
Correct output: -3.1068023861  | Program output: -84.1068023861
Correct output: 52.1593783355  | Program output: 61.1593783355 
Correct output: 128.3998855036 | Program output: 21.3998855036 
Correct output: 31.5586049792  | Program output: 59.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove integer_mult float_rot integer_mult float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [26.0 2 53.0 3 8.0 2 61.0 2 45.0 3 61.0 3 108.0 3 20.0 13 49.0 2 13.0 2 10.0 1 80.0 2 4.0 1 16.0 2 22.0 2 17.0 2 91.0 12 63.0 12 53.0 3 4.0 1 33.0 11 81.0 2 9.0 2 107.0 2 28.0 2]
Total: 1154.0
Mean: 23.08
Genome size: 62
Size: 63
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3269.6716299
Median total errors in population: 1243.0
Error averages by case: (108.4105218 3.121 140.9073642 4.001 89.23565090000001 2.95 148.38110939999999 3.779 126.30653020000001 3.92 140.41869120000004 3.911 183.8102068 3.81 106.02109229999999 12.812 134.1206802 3.13 103.70712180000004 3.058 92.46707369999999 2.939 165.89122309999996 4.084 88.7838605 2.222 99.22926579999998 3.016 111.32045659999999 2.921 107.85600469999999 3.13 166.59975299999996 12.206 141.08435540000002 11.573 132.59469159999998 3.936 90.11308800000003 2.296 120.59362490000002 11.208 157.3033786 2.953 100.69908829999997 3.109 181.0046663 2.856 116.7581306 3.113)
Error minima by case: (19.0 1 5.2133 2 0.0 0 22.6553 1 22.8637 2 16.7186 2 40.8082 2 5.815 9 2.417 1 11.0 1 3.0 1 32.3042 2 0.0 0 9.0 1 7.3896 1 15.0 1 29.8805 10 15.7578 9 38.7529 1 0.0 0 7.078 8 0.0177 1 7.0 1 29.3999 1 26.0 1)
Average genome size in population (length): 51.658
Average program size in population (points): 52.658
Average percent parens in population: 0.019
Minimum age in population: 38.16161113977432
Maximum age in population: 42.39065013825893
Average age in population: 40.26982802136242
Median age in population: 40.31950850039721
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 80
Genome diversity (% unique Plush genomes):	 0.642
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 80
Syntactic diversity (% unique Push programs):	 0.642
Total error diversity:				 0.121
Error (vector) diversity:			 0.159
Behavioral diversity:				 0.16
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 28716522
--- Timings ---
Current time: 1529615863818 milliseconds
Total Time:          91.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        35.5 seconds, 38.9%
Fitness Testing:     44.2 seconds, 48.5%
Report:              11.4 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 49994.0
Test mean error for best: 24.99700
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -94.7252441384
Correct output: -151.3865608082 | Program output: -101.3865608082
Correct output: -39.5964789701 | Program output: -50.5964789701
Correct output: -165.6552500023 | Program output: -107.6552500023
Correct output: 115.8637099929 | Program output: 70.8637099929 
Correct output: 106.2814426659 | Program output: 45.2814426659 
Correct output: 176.1918465521 | Program output: 68.1918465521 
Correct output: -17.8149835933 | Program output: -0.8149835933 
Correct output: -65.5829878959 | Program output: -19.5829878959
Correct output: 27.6366895788  | Program output: 37.6366895788 
Correct output: -19.5737445927 | Program output: -29.5737445927
Correct output: -146.6957573417 | Program output: -69.6957573417
Correct output: -93.4856677865 | Program output: -100.4856677865
Correct output: -62.4257652273 | Program output: -78.4257652273
Correct output: 8.389607373    | Program output: 27.389607373  
Correct output: -88.5634422156 | Program output: -74.5634422156
Correct output: 28.8889248865  | Program output: -62.1110751135
Correct output: 15.595489344   | Program output: -47.404510656 
Correct output: -49.1003576661 | Program output: -102.1003576661
Correct output: -113.1474461804 | Program output: -120.1474461804
Correct output: -19.0779583365 | Program output: 10.9220416635 
Correct output: -3.1068023861  | Program output: -84.1068023861
Correct output: 52.1593783355  | Program output: 58.1593783355 
Correct output: 128.3998855036 | Program output: 21.3998855036 
Correct output: 31.5586049792  | Program output: 56.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_div} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_div float_swap float_dec float_dup float_dec integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [26.0 2 50.0 1 11.0 2 58.0 2 45.0 3 61.0 3 108.0 3 17.0 2 46.0 2 10.0 1 10.0 1 77.0 3 7.0 3 16.0 2 19.0 2 14.0 2 91.0 12 63.0 12 53.0 3 7.0 2 30.0 11 81.0 2 6.0 1 107.0 2 25.0 2]
Total: 1119.0
Mean: 22.38
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3208.389219400001
Median total errors in population: 1186.0
Error averages by case: (107.9416799 3.298 137.0878948 4.126 86.33813879999998 3.102 144.52224470000007 3.664 125.0316122 3.938 138.96630599999997 3.936 182.38151399999998 3.906 103.38771100000001 12.81 131.58627669999998 3.231 99.19350190000003 3.173 92.00925919999997 2.845 160.87208209999997 4.144 86.21892290000002 2.112 98.69547859999997 3.22 106.62581209999996 2.992 103.70306529999999 3.225 165.12958640000002 12.245 139.91378359999996 11.893 131.6832095 4.065 86.86249080000002 2.181 116.32289659999999 11.319 155.99174180000006 3.025 96.43819490000001 3.185 180.710024 3.163 112.79479160000002 3.183)
Error minima by case: (19.0 1 24.3866 1 0.0 0 22.6553 1 22.8637 2 16.7186 2 40.8082 2 5.0482 2 2.417 1 10.0 1 3.0 1 32.3042 2 0.0 0 9.0 1 0.3896 1 14.0 1 20.8889 9 7.5955 9 22.7879 1 0.0 0 3.8984 8 0.1991 1 6.0 1 29.3999 1 23.5586 1)
Average genome size in population (length): 52.149
Average program size in population (points): 53.149
Average percent parens in population: 0.019
Minimum age in population: 39.47875851392746
Maximum age in population: 44.02405967563391
Average age in population: 41.74672043377906
Median age in population: 41.75363821163774
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 147
Genome diversity (% unique Plush genomes):	 0.635
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 147
Syntactic diversity (% unique Push programs):	 0.635
Total error diversity:				 0.137
Error (vector) diversity:			 0.172
Behavioral diversity:				 0.173
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 30020247
--- Timings ---
Current time: 1529615867353 milliseconds
Total Time:          94.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.8 seconds, 38.9%
Fitness Testing:     45.8 seconds, 48.5%
Report:              11.8 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 49696.0
Test mean error for best: 24.84800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -94.7252441384
Correct output: -151.3865608082 | Program output: -102.3865608082
Correct output: -39.5964789701 | Program output: -51.5964789701
Correct output: -165.6552500023 | Program output: -108.6552500023
Correct output: 115.8637099929 | Program output: 70.8637099929 
Correct output: 106.2814426659 | Program output: 45.2814426659 
Correct output: 176.1918465521 | Program output: 68.1918465521 
Correct output: -17.8149835933 | Program output: -1.8149835933 
Correct output: -65.5829878959 | Program output: -20.5829878959
Correct output: 27.6366895788  | Program output: 36.6366895788 
Correct output: -19.5737445927 | Program output: -29.5737445927
Correct output: -146.6957573417 | Program output: -70.6957573417
Correct output: -93.4856677865 | Program output: -101.4856677865
Correct output: -62.4257652273 | Program output: -78.4257652273
Correct output: 8.389607373    | Program output: 26.389607373  
Correct output: -88.5634422156 | Program output: -75.5634422156
Correct output: 28.8889248865  | Program output: -62.1110751135
Correct output: 15.595489344   | Program output: -47.404510656 
Correct output: -49.1003576661 | Program output: -102.1003576661
Correct output: -113.1474461804 | Program output: -121.1474461804
Correct output: -19.0779583365 | Program output: 9.9220416635  
Correct output: -3.1068023861  | Program output: -84.1068023861
Correct output: 52.1593783355  | Program output: 57.1593783355 
Correct output: 128.3998855036 | Program output: 21.3998855036 
Correct output: 31.5586049792  | Program output: 55.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dup} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_dec integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot float_dup float_dec print_float integer_dup integer_shove float_rot)
Errors: [26.0 2 49.0 2 12.0 2 57.0 2 45.0 3 61.0 3 108.0 3 16.0 1 45.0 2 9.0 2 10.0 1 76.0 3 8.0 3 16.0 2 18.0 2 13.0 2 91.0 12 63.0 12 53.0 3 8.0 2 29.0 11 81.0 2 5.0 1 107.0 2 24.0 2]
Total: 1112.0
Mean: 22.24
Genome size: 63
Size: 64
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 3054.1266886999997
Median total errors in population: 1185.0
Error averages by case: (99.62043540000002 3.058 132.35061869999998 3.952 82.7871433 3.009 139.8422971 3.431 117.71819510000003 3.819 132.0827938 3.813 175.94471890000003 3.64 97.3308264 12.855 126.15004739999998 3.052 94.13355329999999 3.025 84.2595347 2.609 156.58405050000002 3.927 81.51104589999998 1.949 90.42338399999998 2.996 101.84822079999999 2.872 98.6675031 3.032 158.17337769999997 12.19 132.52203269999998 11.87 123.8957042 3.742 81.91476930000002 2.03 111.34639470000002 11.274 148.7366457 2.83 91.0727013 2.993 173.50542059999998 3.008 107.7282741 3.001)
Error minima by case: (18.0 1 29.3866 1 0.0 0 27.6553 1 37.0 2 53.0 2 100.0 1 5.5366 1 15.1768 1 9.0 1 2.0 1 29.3042 2 0.0 0 8.0 1 1.3896 1 7.8037 1 15.0534 9 8.5955 7 37.0707 1 0.0 0 7.0759 9 0.1068 1 5.0 1 84.4576 1 12.3837 1)
Average genome size in population (length): 55.025
Average program size in population (points): 56.025
Average percent parens in population: 0.018
Minimum age in population: 41.01984843611717
Maximum age in population: 45.61006874218583
Average age in population: 43.23608784719184
Median age in population: 43.25660845078528
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 77
Genome diversity (% unique Plush genomes):	 0.641
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 77
Syntactic diversity (% unique Push programs):	 0.641
Total error diversity:				 0.12
Error (vector) diversity:			 0.154
Behavioral diversity:				 0.156
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 31395897
--- Timings ---
Current time: 1529615870775 milliseconds
Total Time:          98.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        38.0 seconds, 38.7%
Fitness Testing:     47.6 seconds, 48.5%
Report:              12.4 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 49481.0
Test mean error for best: 24.74050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -93.7252441384
Correct output: -151.3865608082 | Program output: -101.3865608082
Correct output: -39.5964789701 | Program output: -50.5964789701
Correct output: -165.6552500023 | Program output: -107.6552500023
Correct output: 115.8637099929 | Program output: 71.8637099929 
Correct output: 106.2814426659 | Program output: 46.2814426659 
Correct output: 176.1918465521 | Program output: 69.1918465521 
Correct output: -17.8149835933 | Program output: -0.8149835933 
Correct output: -65.5829878959 | Program output: -19.5829878959
Correct output: 27.6366895788  | Program output: 37.6366895788 
Correct output: -19.5737445927 | Program output: -28.5737445927
Correct output: -146.6957573417 | Program output: -69.6957573417
Correct output: -93.4856677865 | Program output: -100.4856677865
Correct output: -62.4257652273 | Program output: -77.4257652273
Correct output: 8.389607373    | Program output: 27.389607373  
Correct output: -88.5634422156 | Program output: -74.5634422156
Correct output: 28.8889248865  | Program output: -61.1110751135
Correct output: 15.595489344   | Program output: -46.404510656 
Correct output: -49.1003576661 | Program output: -101.1003576661
Correct output: -113.1474461804 | Program output: -120.1474461804
Correct output: -19.0779583365 | Program output: 10.9220416635 
Correct output: -3.1068023861  | Program output: -83.1068023861
Correct output: 52.1593783355  | Program output: 58.1593783355 
Correct output: 128.3998855036 | Program output: 22.3998855036 
Correct output: 31.5586049792  | Program output: 56.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup})
Best program: (in1 float_dec float_dec float_rot in2 float_dec float_rot float_rot float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove integer_mult float_rot integer_mult float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec print_float integer_dup)
Errors: [25.0 2 50.0 1 11.0 2 58.0 2 44.0 2 60.0 2 107.0 3 17.0 2 46.0 2 10.0 1 9.0 2 77.0 3 7.0 3 15.0 2 19.0 2 14.0 2 90.0 12 62.0 12 52.0 3 7.0 2 30.0 11 80.0 1 6.0 1 106.0 2 25.0 2]
Total: 1106.0
Mean: 22.12
Genome size: 64
Size: 65
Percent parens: 0.015
--- Population Statistics ---
Average total errors in population: 3134.4579924
Median total errors in population: 1162.0
Error averages by case: (104.9244172 3.2 134.19655519999998 4.032 87.50872419999999 3.107 141.68885720000003 3.398 123.2643132 3.922 137.30614980000004 3.908 180.96765670000002 3.772 96.1229348 12.484 123.6532614 3.033 95.80128050000003 3.166 88.52312140000001 2.745 158.0455698 3.848 86.45093570000002 2.356 95.71648309999998 3.102 103.18922169999999 3.015 100.59436009999999 3.17 163.1902191 12.232 137.5516736 11.901 129.0041628 3.829 87.02950200000001 2.402 111.42661840000001 11.331 153.90701830000006 2.894 93.046025 2.993 175.95188639999998 3.158 109.28004480000001 3.119)
Error minima by case: (5.931 1 26.3866 1 0.0 0 24.6553 1 22.8637 2 18.7186 2 42.8082 2 0.8768 1 2.417 1 7.0 1 2.5361 1 32.3042 2 0.0 0 0.3684 1 0.3896 1 11.0 1 29.0453 10 16.4153 9 13.6939 1 0.0 0 2.1138 8 0.0349 1 3.0 1 29.3999 1 22.0 1)
Average genome size in population (length): 59.519
Average program size in population (points): 60.519
Average percent parens in population: 0.017
Minimum age in population: 42.35994187742472
Maximum age in population: 46.85517385043204
Average age in population: 44.78310657301359
Median age in population: 44.83567061554641
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 70
Genome diversity (% unique Plush genomes):	 0.7
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 70
Syntactic diversity (% unique Push programs):	 0.7
Total error diversity:				 0.144
Error (vector) diversity:			 0.185
Behavioral diversity:				 0.185
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 32883922
--- Timings ---
Current time: 1529615874217 milliseconds
Total Time:         101.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.1 seconds, 38.5%
Fitness Testing:     49.4 seconds, 48.7%
Report:              12.8 seconds, 12.6%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 48673.0
Test mean error for best: 24.33650
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -94.7252441384
Correct output: -151.3865608082 | Program output: -106.3865608082
Correct output: -39.5964789701 | Program output: -55.5964789701
Correct output: -165.6552500023 | Program output: -112.6552500023
Correct output: 115.8637099929 | Program output: 70.8637099929 
Correct output: 106.2814426659 | Program output: 45.2814426659 
Correct output: 176.1918465521 | Program output: 68.1918465521 
Correct output: -17.8149835933 | Program output: -5.8149835933 
Correct output: -65.5829878959 | Program output: -24.5829878959
Correct output: 27.6366895788  | Program output: 32.6366895788 
Correct output: -19.5737445927 | Program output: -29.5737445927
Correct output: -146.6957573417 | Program output: -74.6957573417
Correct output: -93.4856677865 | Program output: -105.4856677865
Correct output: -62.4257652273 | Program output: -78.4257652273
Correct output: 8.389607373    | Program output: 22.389607373  
Correct output: -88.5634422156 | Program output: -79.5634422156
Correct output: 28.8889248865  | Program output: -62.1110751135
Correct output: 15.595489344   | Program output: -47.404510656 
Correct output: -49.1003576661 | Program output: -102.1003576661
Correct output: -113.1474461804 | Program output: -125.1474461804
Correct output: -19.0779583365 | Program output: 5.9220416635  
Correct output: -3.1068023861  | Program output: -84.1068023861
Correct output: 52.1593783355  | Program output: 53.1593783355 
Correct output: 128.3998855036 | Program output: 21.3998855036 
Correct output: 31.5586049792  | Program output: 51.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat float_dec integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [26.0 2 45.0 2 16.0 2 53.0 2 45.0 3 61.0 3 108.0 3 12.0 2 41.0 2 5.0 2 10.0 1 72.0 2 12.0 3 16.0 2 14.0 2 9.0 2 91.0 12 63.0 12 53.0 3 12.0 2 25.0 11 81.0 2 1.0 1 107.0 2 20.0 1]
Total: 1079.0
Mean: 21.58
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3614.2053819000002
Median total errors in population: 1148.0
Error averages by case: (125.37943280000002 3.518 151.80959239999999 4.185 107.80785829999999 3.373 159.21470650000006 3.507 143.4697555 4.096 157.04268600000003 4.072 199.51679660000002 4.023 111.91026149999998 11.653 141.30039560000003 3.367 114.80163590000004 3.363 108.95189929999997 3.082 174.88232689999987 4.169 106.88265430000001 2.858 116.10120999999998 3.39 121.89969119999996 3.187 119.09440379999995 3.464 182.25852649999996 12.341 157.35382560000002 11.977 149.42857539999994 4.127 107.63571350000002 2.845 129.2520232 11.439 173.20881300000002 3.113 112.02321720000003 3.133 193.9067100999999 3.397 128.0566708 3.337)
Error minima by case: (18.0 1 0.2133 1 0.0 0 26.6553 1 17.8637 2 20.7186 2 44.8082 1 1.8017 1 2.417 1 4.0 1 2.0 1 27.3042 2 0.0 0 8.0 1 4.3275 1 1.5868 1 24.8889 9 11.5955 8 33.7475 1 0.0 0 0.9191 9 1.3561 1 0.0 0 29.3999 1 17.5586 1)
Average genome size in population (length): 62.21
Average program size in population (points): 63.21
Average percent parens in population: 0.016
Minimum age in population: 43.8798060528934
Maximum age in population: 48.37668872252107
Average age in population: 46.24983173235133
Median age in population: 46.29196931095794
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 26
Genome diversity (% unique Plush genomes):	 0.73
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 26
Syntactic diversity (% unique Push programs):	 0.73
Total error diversity:				 0.155
Error (vector) diversity:			 0.197
Behavioral diversity:				 0.198
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 34439172
--- Timings ---
Current time: 1529615877875 milliseconds
Total Time:         105.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.3 seconds, 38.4%
Fitness Testing:     51.3 seconds, 48.8%
Report:              13.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 48420.0
Test mean error for best: 24.21000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -94.7252441384
Correct output: -151.3865608082 | Program output: -107.3865608082
Correct output: -39.5964789701 | Program output: -56.5964789701
Correct output: -165.6552500023 | Program output: -113.6552500023
Correct output: 115.8637099929 | Program output: 70.8637099929 
Correct output: 106.2814426659 | Program output: 45.2814426659 
Correct output: 176.1918465521 | Program output: 68.1918465521 
Correct output: -17.8149835933 | Program output: -6.8149835933 
Correct output: -65.5829878959 | Program output: -25.5829878959
Correct output: 27.6366895788  | Program output: 31.6366895788 
Correct output: -19.5737445927 | Program output: -29.5737445927
Correct output: -146.6957573417 | Program output: -75.6957573417
Correct output: -93.4856677865 | Program output: -106.4856677865
Correct output: -62.4257652273 | Program output: -78.4257652273
Correct output: 8.389607373    | Program output: 21.389607373  
Correct output: -88.5634422156 | Program output: -80.5634422156
Correct output: 28.8889248865  | Program output: -62.1110751135
Correct output: 15.595489344   | Program output: -47.404510656 
Correct output: -49.1003576661 | Program output: -102.1003576661
Correct output: -113.1474461804 | Program output: -126.1474461804
Correct output: -19.0779583365 | Program output: 4.9220416635  
Correct output: -3.1068023861  | Program output: -84.1068023861
Correct output: 52.1593783355  | Program output: 52.1593783355 
Correct output: 128.3998855036 | Program output: 21.3998855036 
Correct output: 31.5586049792  | Program output: 50.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (in1 float_dec float_dec float_rot in2 float_dec float_rot float_rot float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove integer_mult float_rot integer_mult float_dec integer_mult float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec float_dec integer_mult float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec float_dec integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [26.0 2 44.0 2 17.0 2 52.0 2 45.0 3 61.0 3 108.0 3 11.0 2 40.0 1 4.0 2 10.0 1 71.0 3 13.0 3 16.0 2 13.0 2 8.0 1 91.0 12 63.0 12 53.0 3 13.0 2 24.0 11 81.0 2 0.0 0 107.0 2 19.0 2]
Total: 1070.0
Mean: 21.4
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3589.8289239000014
Median total errors in population: 1138.0
Error averages by case: (124.12796190000003 3.441 150.72023289999996 3.829 110.1153375 3.349 158.03580250000007 3.519 141.30563819999998 4.005 155.124241 4.028 197.6742277 3.945 111.8164284 9.317 140.96374189999995 3.406 113.54999350000008 3.272 108.30313389999995 3.029 173.66822469999997 4.295 109.00050710000004 3.284 115.06154549999998 3.346 120.61580969999996 3.139 117.92925429999995 3.454 180.985014 12.198 155.93092620000002 11.927 147.73237019999993 4.025 109.78146150000002 3.061 127.0575249 11.332 171.82412040000003 3.068 111.05690640000003 2.962 192.7413418 3.334 126.78917780000008 3.353)
Error minima by case: (9.5791 1 29.3866 1 0.0 0 27.6553 1 11.8637 2 21.7186 2 45.8082 1 0.1184 1 2.417 1 3.0 1 2.0 1 21.3042 2 0.0 0 8.0 1 4.6104 1 0.203 1 29.0831 9 15.8394 9 29.2039 1 0.0 0 0.1394 9 0.3463 1 0.0 0 29.3999 1 18.0 1)
Average genome size in population (length): 66.551
Average program size in population (points): 67.551
Average percent parens in population: 0.015
Minimum age in population: 45.70961508154869
Maximum age in population: 49.90071744984016
Average age in population: 47.81641481259698
Median age in population: 47.8469006002415
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.748
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.748
Total error diversity:				 0.167
Error (vector) diversity:			 0.205
Behavioral diversity:				 0.206
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 36102947
--- Timings ---
Current time: 1529615881477 milliseconds
Total Time:         108.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.6 seconds, 38.3%
Fitness Testing:     53.1 seconds, 48.9%
Report:              13.9 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 46341.0
Test mean error for best: 23.17050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -87.7252441384
Correct output: -151.3865608082 | Program output: -101.3865608082
Correct output: -39.5964789701 | Program output: -50.5964789701
Correct output: -165.6552500023 | Program output: -107.6552500023
Correct output: 115.8637099929 | Program output: 77.8637099929 
Correct output: 106.2814426659 | Program output: 52.2814426659 
Correct output: 176.1918465521 | Program output: 75.1918465521 
Correct output: -17.8149835933 | Program output: -0.8149835933 
Correct output: -65.5829878959 | Program output: -19.5829878959
Correct output: 27.6366895788  | Program output: 37.6366895788 
Correct output: -19.5737445927 | Program output: -22.5737445927
Correct output: -146.6957573417 | Program output: -69.6957573417
Correct output: -93.4856677865 | Program output: -100.4856677865
Correct output: -62.4257652273 | Program output: -71.4257652273
Correct output: 8.389607373    | Program output: 27.389607373  
Correct output: -88.5634422156 | Program output: -74.5634422156
Correct output: 28.8889248865  | Program output: -55.1110751135
Correct output: 15.595489344   | Program output: -40.404510656 
Correct output: -49.1003576661 | Program output: -95.1003576661
Correct output: -113.1474461804 | Program output: -120.1474461804
Correct output: -19.0779583365 | Program output: 10.9220416635 
Correct output: -3.1068023861  | Program output: -77.1068023861
Correct output: 52.1593783355  | Program output: 58.1593783355 
Correct output: 128.3998855036 | Program output: 28.3998855036 
Correct output: 31.5586049792  | Program output: 56.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove integer_mod float_stackdepth integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [19.0 2 50.0 1 11.0 2 58.0 2 38.0 3 54.0 3 101.0 2 17.0 2 46.0 2 10.0 1 3.0 2 77.0 3 7.0 3 9.0 2 19.0 2 14.0 2 84.0 12 56.0 12 46.0 2 7.0 2 30.0 11 74.0 2 6.0 1 100.0 1 25.0 2]
Total: 1040.0
Mean: 20.8
Genome size: 73
Size: 74
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2989.4256145
Median total errors in population: 1119.0
Error averages by case: (101.6149337 3.265 126.17671030000001 3.289 86.6789405 3.087 133.7210721 3.343 119.24772010000002 3.81 133.30025410000002 3.822 177.13518559999997 3.876 87.27795079999996 6.505 114.22128550000001 3.205 87.56882720000003 2.98 85.00651649999999 2.778 149.720658 4.114 85.88909699999999 3.525 92.34412639999996 3.139 94.85187629999997 2.981 92.2860496 3.205 159.0575449 12.169 133.64829070000002 11.926 125.48211459999999 3.955 86.73200700000001 3.014 100.41549610000001 11.284 149.6430803 2.881 85.0596953 2.543 170.23118509999998 3.141 101.1049968 3.173)
Error minima by case: (18.0 1 27.3866 1 0.0 0 25.6553 1 13.8637 2 19.7186 2 43.8082 1 0.0734 1 1.7575 1 0.0 0 0.1313 1 23.3042 2 0.0 0 8.0 1 4.3896 1 4.0 1 10.7433 8 11.5955 9 19.9678 1 0.0 0 0.2122 3 0.8802 1 0.0 0 32.3999 1 8.0736 1)
Average genome size in population (length): 70.205
Average program size in population (points): 71.205
Average percent parens in population: 0.014
Minimum age in population: 46.73232362791896
Maximum age in population: 51.62099648988806
Average age in population: 49.37322248242702
Median age in population: 49.40827395557426
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.74
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.74
Total error diversity:				 0.176
Error (vector) diversity:			 0.225
Behavioral diversity:				 0.225
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 37858072
--- Timings ---
Current time: 1529615885182 milliseconds
Total Time:         112.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        42.7 seconds, 38.0%
Fitness Testing:     55.3 seconds, 49.1%
Report:              14.3 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 46318.0
Test mean error for best: 23.15900
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -90.7252441384
Correct output: -151.3865608082 | Program output: -107.3865608082
Correct output: -39.5964789701 | Program output: -56.5964789701
Correct output: -165.6552500023 | Program output: -113.6552500023
Correct output: 115.8637099929 | Program output: 74.8637099929 
Correct output: 106.2814426659 | Program output: 49.2814426659 
Correct output: 176.1918465521 | Program output: 72.1918465521 
Correct output: -17.8149835933 | Program output: -6.8149835933 
Correct output: -65.5829878959 | Program output: -25.5829878959
Correct output: 27.6366895788  | Program output: 31.6366895788 
Correct output: -19.5737445927 | Program output: -25.5737445927
Correct output: -146.6957573417 | Program output: -75.6957573417
Correct output: -93.4856677865 | Program output: -106.4856677865
Correct output: -62.4257652273 | Program output: -74.4257652273
Correct output: 8.389607373    | Program output: 21.389607373  
Correct output: -88.5634422156 | Program output: -80.5634422156
Correct output: 28.8889248865  | Program output: -58.1110751135
Correct output: 15.595489344   | Program output: -43.404510656 
Correct output: -49.1003576661 | Program output: -98.1003576661
Correct output: -113.1474461804 | Program output: -126.1474461804
Correct output: -19.0779583365 | Program output: 4.9220416635  
Correct output: -3.1068023861  | Program output: -80.1068023861
Correct output: 52.1593783355  | Program output: 52.1593783355 
Correct output: 128.3998855036 | Program output: 25.3998855036 
Correct output: 31.5586049792  | Program output: 50.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove integer_mod float_rot integer_mult float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec integer_shove integer_mult integer_shove float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_dec integer_mult float_rot integer_mult float_dec float_dec float_yank integer_shove integer_mod float_rot integer_mult float_rot print_float integer_dup integer_shove float_rot)
Errors: [22.0 2 44.0 2 17.0 2 52.0 2 41.0 3 57.0 3 104.0 2 11.0 2 40.0 1 4.0 2 6.0 2 71.0 3 13.0 3 12.0 2 13.0 2 8.0 1 87.0 11 59.0 12 49.0 2 13.0 2 24.0 11 77.0 2 0.0 0 103.0 2 19.0 2]
Total: 1024.0
Mean: 20.48
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3383.8122901000006
Median total errors in population: 1106.0
Error averages by case: (118.07829800000002 3.533 140.3509037 3.656 104.09094790000002 3.393 147.7250935 3.633 134.63587620000007 4.03 148.33083440000001 4.069 191.3200714 4.127 103.6033288 5.512 129.91324 3.455 102.42684440000005 3.3 101.37701479999996 3.097 163.09255039999996 4.35 103.9333989 3.966 108.85869899999999 3.396 109.40568729999997 3.232 107.303474 3.361 174.29912539999995 12.15 149.06818959999998 11.855 141.57797459999995 4.197 104.97870030000001 3.396 115.84749930000002 11.323 165.18643719999992 3.099 100.3917352 2.738 186.4259028 3.431 115.91346300000002 3.378)
Error minima by case: (19.0 1 14.3866 1 0.0 0 12.6553 1 8.8637 2 16.8432 2 44.8082 2 0.075 1 2.417 1 0.0 0 2.3856 1 18.3042 2 0.0 0 9.0 1 2.6104 1 4.0 1 13.8889 9 0.5955 8 26.0802 1 0.0 0 0.9191 3 0.0815 1 0.0 0 29.3999 1 15.0 1)
Average genome size in population (length): 73.854
Average program size in population (points): 74.854
Average percent parens in population: 0.014
Minimum age in population: 48.55069239344448
Maximum age in population: 53.18430104840081
Average age in population: 50.85057575903356
Median age in population: 50.89297711791005
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.799
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.799
Total error diversity:				 0.194
Error (vector) diversity:			 0.229
Behavioral diversity:				 0.229
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 39704422
--- Timings ---
Current time: 1529615888874 milliseconds
Total Time:         116.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.0 seconds, 37.9%
Fitness Testing:     57.2 seconds, 49.3%
Report:              14.8 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 45190.0
Test mean error for best: 22.59500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -90.7252441384
Correct output: -151.3865608082 | Program output: -112.3865608082
Correct output: -39.5964789701 | Program output: -61.5964789701
Correct output: -165.6552500023 | Program output: -118.6552500023
Correct output: 115.8637099929 | Program output: 74.8637099929 
Correct output: 106.2814426659 | Program output: 49.2814426659 
Correct output: 176.1918465521 | Program output: 72.1918465521 
Correct output: -17.8149835933 | Program output: -11.8149835933
Correct output: -65.5829878959 | Program output: -30.5829878959
Correct output: 27.6366895788  | Program output: 26.6366895788 
Correct output: -19.5737445927 | Program output: -25.5737445927
Correct output: -146.6957573417 | Program output: -80.6957573417
Correct output: -93.4856677865 | Program output: -111.4856677865
Correct output: -62.4257652273 | Program output: -74.4257652273
Correct output: 8.389607373    | Program output: 16.389607373  
Correct output: -88.5634422156 | Program output: -85.5634422156
Correct output: 28.8889248865  | Program output: -58.1110751135
Correct output: 15.595489344   | Program output: -43.404510656 
Correct output: -49.1003576661 | Program output: -98.1003576661
Correct output: -113.1474461804 | Program output: -131.1474461804
Correct output: -19.0779583365 | Program output: -0.0779583365 
Correct output: -3.1068023861  | Program output: -80.1068023861
Correct output: 52.1593783355  | Program output: 47.1593783355 
Correct output: 128.3998855036 | Program output: 25.3998855036 
Correct output: 31.5586049792  | Program output: 45.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mult} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_yank} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat integer_yankdup integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove integer_mod float_rot integer_mult float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove integer_mult float_stackdepth integer_mult float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_dec float_rot integer_mult float_dec integer_mult float_dec float_dec integer_mult float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_yankdup float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_dec integer_mult float_rot integer_mult float_dec float_dec float_yank integer_shove integer_mod float_rot integer_mult float_rot print_float integer_dup integer_shove float_rot)
Errors: [22.0 2 39.0 2 22.0 2 47.0 2 41.0 3 57.0 3 104.0 2 6.0 1 35.0 2 1.0 1 6.0 2 66.0 3 18.0 3 12.0 2 8.0 2 3.0 1 87.0 11 59.0 12 49.0 2 18.0 2 19.0 2 77.0 2 5.0 2 103.0 2 14.0 2]
Total: 988.0
Mean: 19.76
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3263.884002700001
Median total errors in population: 1082.0
Error averages by case: (113.31215020000002 3.478 135.1153509 3.488 100.2659784 3.2 142.5628192 3.438 132.10198690000004 4.053 145.52749409999998 4.072 189.10358349999998 4.012 97.43142009999998 5.011 124.0008241 3.275 97.32109370000003 3.193 96.57378199999994 3.001 158.3138332 4.078 99.86025520000001 3.908 103.93549779999996 3.304 104.22258009999997 3.133 101.69161329999997 3.039 170.0678691 12.185 144.98059600000005 11.94 137.1049386999999 4.06 100.73865980000004 3.248 107.68933500000001 11.21 160.72054079999995 3.14 95.36792620000003 2.596 182.61185239999992 3.353 110.61302200000002 3.234)
Error minima by case: (1.0246 1 3.6134 1 0.0 0 5.3447 1 8.8637 2 11.2814 2 12.8082 1 0.5705 1 1.417 1 0.0 0 0.5012 1 18.3042 2 0.0 0 4.4611 1 0.3896 1 0.0 0 18.8889 8 5.5955 9 0.5341 1 0.0 0 0.0542 1 0.9403 1 0.0 0 28.3999 1 11.0 1)
Average genome size in population (length): 78.88
Average program size in population (points): 79.88
Average percent parens in population: 0.013
Minimum age in population: 49.69469853444025
Maximum age in population: 54.46023529564263
Average age in population: 52.27381216097937
Median age in population: 52.27571967034601
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.802
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.802
Total error diversity:				 0.215
Error (vector) diversity:			 0.263
Behavioral diversity:				 0.263
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 41676447
--- Timings ---
Current time: 1529615892767 milliseconds
Total Time:         120.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.3 seconds, 37.7%
Fitness Testing:     59.3 seconds, 49.4%
Report:              15.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 44504.0
Test mean error for best: 22.25200
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -87.7252441384
Correct output: -151.3865608082 | Program output: -108.3865608082
Correct output: -39.5964789701 | Program output: -57.5964789701
Correct output: -165.6552500023 | Program output: -114.6552500023
Correct output: 115.8637099929 | Program output: 77.8637099929 
Correct output: 106.2814426659 | Program output: 52.2814426659 
Correct output: 176.1918465521 | Program output: 75.1918465521 
Correct output: -17.8149835933 | Program output: -7.8149835933 
Correct output: -65.5829878959 | Program output: -26.5829878959
Correct output: 27.6366895788  | Program output: 30.6366895788 
Correct output: -19.5737445927 | Program output: -22.5737445927
Correct output: -146.6957573417 | Program output: -76.6957573417
Correct output: -93.4856677865 | Program output: -107.4856677865
Correct output: -62.4257652273 | Program output: -71.4257652273
Correct output: 8.389607373    | Program output: 20.389607373  
Correct output: -88.5634422156 | Program output: -81.5634422156
Correct output: 28.8889248865  | Program output: -55.1110751135
Correct output: 15.595489344   | Program output: -40.404510656 
Correct output: -49.1003576661 | Program output: -95.1003576661
Correct output: -113.1474461804 | Program output: -127.1474461804
Correct output: -19.0779583365 | Program output: 3.9220416635  
Correct output: -3.1068023861  | Program output: -77.1068023861
Correct output: 52.1593783355  | Program output: 51.1593783355 
Correct output: 128.3998855036 | Program output: 28.3998855036 
Correct output: 31.5586049792  | Program output: 49.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (in1 float_dec float_dec float_rot in2 float_dec float_rot float_rot float_dec integer_swap float_rot float_rot float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_add float_dec float_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [19.0 2 43.0 2 18.0 2 51.0 2 38.0 3 54.0 3 101.0 2 10.0 1 39.0 2 3.0 2 3.0 2 70.0 2 14.0 3 9.0 2 12.0 2 7.0 1 84.0 12 56.0 12 46.0 2 14.0 2 23.0 11 74.0 2 1.0 1 100.0 1 18.0 2]
Total: 985.0
Mean: 19.7
Genome size: 87
Size: 88
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3498.6089548000004
Median total errors in population: 1070.0
Error averages by case: (123.22451390000002 3.645 144.89081809999996 3.663 111.56314949999998 3.372 152.27716629999998 3.651 141.18347720000003 4.198 154.28774410000008 4.22 197.26434890000004 4.06 103.90481849999999 5.205 130.5893208 3.53 107.22141300000004 3.211 106.47820369999997 3.245 167.58440109999998 4.28 111.6212721 4.124 114.14547229999995 3.49 113.88709319999995 3.262 111.7283023 3.177 178.49753270000005 12.191 153.6831243 11.98 146.80623839999998 4.11 112.59108790000003 3.516 115.31776989999999 10.939 169.3739728 3.305 106.48784010000001 2.884 187.59487129999997 3.491 120.2120024 3.444)
Error minima by case: (5.8174 1 2.3866 1 0.0 0 0.6553 1 10.8637 2 2.2814 2 18.8082 1 0.5023 1 2.417 1 0.0 0 0.0201 1 20.3042 2 0.0 0 8.0 1 1.3896 1 0.0 0 8.8889 9 1.5955 9 24.0902 1 0.0 0 0.5745 1 0.1068 1 0.0 0 29.3999 1 8.5586 1)
Average genome size in population (length): 80.825
Average program size in population (points): 81.825
Average percent parens in population: 0.012
Minimum age in population: 51.20548639411572
Maximum age in population: 55.94697099796031
Average age in population: 53.62801126334383
Median age in population: 53.64849759788194
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 29
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 29
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.249
Error (vector) diversity:			 0.305
Behavioral diversity:				 0.306
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 43697072
--- Timings ---
Current time: 1529615896599 milliseconds
Total Time:         123.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        46.5 seconds, 37.6%
Fitness Testing:     61.3 seconds, 49.5%
Report:              15.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 43182.0
Test mean error for best: 21.59100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -87.7252441384
Correct output: -151.3865608082 | Program output: -115.3865608082
Correct output: -39.5964789701 | Program output: -64.5964789701
Correct output: -165.6552500023 | Program output: -121.6552500023
Correct output: 115.8637099929 | Program output: 77.8637099929 
Correct output: 106.2814426659 | Program output: 52.2814426659 
Correct output: 176.1918465521 | Program output: 75.1918465521 
Correct output: -17.8149835933 | Program output: -14.8149835933
Correct output: -65.5829878959 | Program output: -33.5829878959
Correct output: 27.6366895788  | Program output: 23.6366895788 
Correct output: -19.5737445927 | Program output: -22.5737445927
Correct output: -146.6957573417 | Program output: -83.6957573417
Correct output: -93.4856677865 | Program output: -114.4856677865
Correct output: -62.4257652273 | Program output: -71.4257652273
Correct output: 8.389607373    | Program output: 13.389607373  
Correct output: -88.5634422156 | Program output: -88.5634422156
Correct output: 28.8889248865  | Program output: -55.1110751135
Correct output: 15.595489344   | Program output: -40.404510656 
Correct output: -49.1003576661 | Program output: -95.1003576661
Correct output: -113.1474461804 | Program output: -134.1474461804
Correct output: -19.0779583365 | Program output: -3.0779583365 
Correct output: -3.1068023861  | Program output: -77.1068023861
Correct output: 52.1593783355  | Program output: 44.1593783355 
Correct output: 128.3998855036 | Program output: 28.3998855036 
Correct output: 31.5586049792  | Program output: 42.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (in1 float_dec float_dec float_rot in2 float_dec float_rot float_rot float_dec integer_swap float_rot float_rot float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [19.0 2 36.0 2 25.0 2 44.0 2 38.0 3 54.0 3 101.0 2 3.0 1 32.0 2 4.0 1 3.0 2 63.0 3 21.0 3 9.0 2 5.0 2 0.0 0 84.0 12 56.0 12 46.0 2 21.0 2 16.0 2 74.0 2 8.0 2 100.0 1 11.0 2]
Total: 942.0
Mean: 18.84
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3869.8599472000005
Median total errors in population: 1051.0
Error averages by case: (138.9262359 3.734 157.4273376 3.718 124.87959950000001 3.421 164.65321489999997 3.743 156.2357941 4.304 170.0808218 4.288 211.9652448 3.99 120.68427249999995 5.332 147.70200530000002 3.737 120.64569379999999 3.142 122.50768199999999 3.455 180.09912470000003 4.431 124.13678769999997 4.164 129.8471477 3.594 127.44393170000001 3.279 124.61932900000002 3.259 194.8811281 12.386 170.40974849999998 12.159 162.4771009 4.102 124.83766770000004 3.594 133.98184920000006 10.503 186.0124404 3.459 119.89988510000002 3.04 204.05477079999997 3.507 133.58013350000002 3.53)
Error minima by case: (1.499 1 34.0 1 0.0 0 33.6553 1 3.8637 2 27.7186 2 51.8082 1 0.2385 1 1.6432 1 0.0 0 0.4263 1 13.3042 2 0.0 0 4.8005 1 2.2208 1 0.0 0 13.6012 8 2.5955 7 18.1259 1 0.0 0 0.5923 1 0.8454 1 0.0 0 25.1565 1 3.5586 1)
Average genome size in population (length): 82.1
Average program size in population (points): 83.1
Average percent parens in population: 0.012
Minimum age in population: 52.58535083429888
Maximum age in population: 57.14150732298731
Average age in population: 54.99491994935744
Median age in population: 55.04758795230737
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 33
Genome diversity (% unique Plush genomes):	 0.826
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 33
Syntactic diversity (% unique Push programs):	 0.826
Total error diversity:				 0.236
Error (vector) diversity:			 0.282
Behavioral diversity:				 0.282
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 45749622
--- Timings ---
Current time: 1529615900729 milliseconds
Total Time:         127.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.9 seconds, 37.4%
Fitness Testing:     63.6 seconds, 49.7%
Report:              16.3 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 43338.0
Test mean error for best: 21.66900
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -87.7252441384
Correct output: -151.3865608082 | Program output: -114.3865608082
Correct output: -39.5964789701 | Program output: -63.5964789701
Correct output: -165.6552500023 | Program output: -120.6552500023
Correct output: 115.8637099929 | Program output: 77.8637099929 
Correct output: 106.2814426659 | Program output: 52.2814426659 
Correct output: 176.1918465521 | Program output: 75.1918465521 
Correct output: -17.8149835933 | Program output: -13.8149835933
Correct output: -65.5829878959 | Program output: -32.5829878959
Correct output: 27.6366895788  | Program output: 24.6366895788 
Correct output: -19.5737445927 | Program output: -22.5737445927
Correct output: -146.6957573417 | Program output: -82.6957573417
Correct output: -93.4856677865 | Program output: -113.4856677865
Correct output: -62.4257652273 | Program output: -71.4257652273
Correct output: 8.389607373    | Program output: 14.389607373  
Correct output: -88.5634422156 | Program output: -87.5634422156
Correct output: 28.8889248865  | Program output: -55.1110751135
Correct output: 15.595489344   | Program output: -40.404510656 
Correct output: -49.1003576661 | Program output: -95.1003576661
Correct output: -113.1474461804 | Program output: -133.1474461804
Correct output: -19.0779583365 | Program output: -2.0779583365 
Correct output: -3.1068023861  | Program output: -77.1068023861
Correct output: 52.1593783355  | Program output: 45.1593783355 
Correct output: 128.3998855036 | Program output: 28.3998855036 
Correct output: 31.5586049792  | Program output: 43.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (in1 float_dec float_dec float_rot in2 float_dec float_rot float_rot float_dec integer_swap float_rot float_rot float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_add float_dec float_rot float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [19.0 2 37.0 2 24.0 2 45.0 2 38.0 3 54.0 3 101.0 2 4.0 1 33.0 2 3.0 1 3.0 2 64.0 3 20.0 2 9.0 2 6.0 2 1.0 1 84.0 12 56.0 12 46.0 2 20.0 1 17.0 2 74.0 2 7.0 2 100.0 1 12.0 2]
Total: 945.0
Mean: 18.9
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3405.979411000001
Median total errors in population: 1033.0
Error averages by case: (120.50647890000002 3.522 139.63498629999998 3.611 106.753678 3.24 147.0469631 3.597 138.11001199999998 4.135 152.03718060000003 4.132 194.8667615 3.648 100.75350970000001 5.14 127.3569595 3.635 102.39712250000007 3.035 102.99342910000001 3.302 162.76605840000005 4.236 107.07190900000005 3.974 111.08428829999998 3.392 108.72705889999996 3.141 106.44809659999997 3.054 177.09605420000003 12.237 152.11769119999997 12.096 143.76252599999995 3.762 107.87858390000001 3.382 113.76347990000002 10.068 167.7255984 3.343 101.76971450000003 2.849 185.09577799999997 3.37 114.99349250000003 3.321)
Error minima by case: (8.5425 1 29.3866 1 0.0 0 27.6553 1 2.8637 2 30.7186 1 54.8082 1 0.0 0 26.0 1 0.0 0 0.5312 1 12.3042 2 0.0 0 2.243 1 0.0 0 0.0 0 3.8889 9 6.5955 9 11.0824 1 0.0 0 0.241 1 0.6537 1 0.0 0 14.2434 1 0.5586 1)
Average genome size in population (length): 84.449
Average program size in population (points): 85.449
Average percent parens in population: 0.012
Minimum age in population: 53.71301931829657
Maximum age in population: 58.31488964002347
Average age in population: 56.33097644386385
Median age in population: 56.38875397137235
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.847
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.847
Total error diversity:				 0.251
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 47860847
--- Timings ---
Current time: 1529615904753 milliseconds
Total Time:         131.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.0 seconds, 37.2%
Fitness Testing:     65.8 seconds, 50.0%
Report:              16.9 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 43370.0
Test mean error for best: 21.68500
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -87.7252441384
Correct output: -151.3865608082 | Program output: -115.3865608082
Correct output: -39.5964789701 | Program output: -64.5964789701
Correct output: -165.6552500023 | Program output: -121.6552500023
Correct output: 115.8637099929 | Program output: 77.8637099929 
Correct output: 106.2814426659 | Program output: 52.2814426659 
Correct output: 176.1918465521 | Program output: 75.1918465521 
Correct output: -17.8149835933 | Program output: -14.8149835933
Correct output: -65.5829878959 | Program output: -33.5829878959
Correct output: 27.6366895788  | Program output: 23.6366895788 
Correct output: -19.5737445927 | Program output: -22.5737445927
Correct output: -146.6957573417 | Program output: -83.6957573417
Correct output: -93.4856677865 | Program output: -114.4856677865
Correct output: -62.4257652273 | Program output: -71.4257652273
Correct output: 8.389607373    | Program output: 13.389607373  
Correct output: -88.5634422156 | Program output: -88.5634422156
Correct output: 28.8889248865  | Program output: -55.1110751135
Correct output: 15.595489344   | Program output: -40.404510656 
Correct output: -49.1003576661 | Program output: -95.1003576661
Correct output: -113.1474461804 | Program output: -134.1474461804
Correct output: -19.0779583365 | Program output: -3.0779583365 
Correct output: -3.1068023861  | Program output: -77.1068023861
Correct output: 52.1593783355  | Program output: 44.1593783355 
Correct output: 128.3998855036 | Program output: 28.3998855036 
Correct output: 31.5586049792  | Program output: 42.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction float_dec} {:instruction integer_dup_items} {:instruction float_cos} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_stackdepth} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_yankdup} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat float_dec integer_dup_items float_cos integer_dec in1 float_dec float_dec float_rot in2 float_dec integer_fromfloat integer_yankdup integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove integer_mod float_stackdepth integer_mult float_dec float_rot float_dec float_rot float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_dec integer_mult float_dec float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_dec integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_yankdup float_dec float_dec integer_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [19.0 2 36.0 2 25.0 2 44.0 2 38.0 3 54.0 3 101.0 2 3.0 1 32.0 2 4.0 1 3.0 2 63.0 3 21.0 3 9.0 2 5.0 2 0.0 0 84.0 12 56.0 12 46.0 2 21.0 2 16.0 2 74.0 2 8.0 2 100.0 1 11.0 2]
Total: 942.0
Mean: 18.84
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2708.915229700001
Median total errors in population: 1016.0
Error averages by case: (90.45577050000001 3.184 112.28256739999999 3.291 80.27112939999999 2.9 119.95102179999999 3.249 108.20362140000003 3.856 122.55016750000003 3.865 166.8024964 3.241 77.07970239999999 4.733 105.01014799999999 3.162 74.22880490000001 2.755 74.4189418 3.065 136.2555039 3.837 79.72940970000003 3.695 81.09119989999996 3.086 80.68170839999996 2.864 78.15148219999999 2.618 148.51437870000004 12.066 122.74328419999999 12.017 114.5435897 3.317 80.45970090000003 3.038 88.52323419999999 9.996 139.07353099999995 3.021 73.6402458 2.524 162.1058065 2.865 86.97078310000003 2.932)
Error minima by case: (5.3568 1 27.0 1 0.0 0 33.6553 1 3.8637 2 32.7186 1 56.8082 1 0.0 0 2.417 1 0.0 0 0.3588 1 13.3042 2 0.0 0 8.0 1 0.0 0 0.0 0 2.2201 9 0.5955 9 14.1004 1 0.0 0 1.078 1 1.6439 1 0.0 0 29.3999 1 2.0 1)
Average genome size in population (length): 87.181
Average program size in population (points): 88.181
Average percent parens in population: 0.011
Minimum age in population: 55.12385137059027
Maximum age in population: 59.81568125683043
Average age in population: 57.74466717949403
Median age in population: 57.80936327940253
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.848
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.848
Total error diversity:				 0.24
Error (vector) diversity:			 0.289
Behavioral diversity:				 0.29
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 50040372
--- Timings ---
Current time: 1529615909076 milliseconds
Total Time:         136.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        50.3 seconds, 36.9%
Fitness Testing:     68.3 seconds, 50.1%
Report:              17.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 40
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 40
;;******************************
;; -*- Number IO problem report - generation 40
Test total error for best: 42900.0
Test mean error for best: 21.45000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -87.7252441384
Correct output: -151.3865608082 | Program output: -117.3865608082
Correct output: -39.5964789701 | Program output: -66.5964789701
Correct output: -165.6552500023 | Program output: -123.6552500023
Correct output: 115.8637099929 | Program output: 77.8637099929 
Correct output: 106.2814426659 | Program output: 52.2814426659 
Correct output: 176.1918465521 | Program output: 75.1918465521 
Correct output: -17.8149835933 | Program output: -16.8149835933
Correct output: -65.5829878959 | Program output: -35.5829878959
Correct output: 27.6366895788  | Program output: 21.6366895788 
Correct output: -19.5737445927 | Program output: -22.5737445927
Correct output: -146.6957573417 | Program output: -85.6957573417
Correct output: -93.4856677865 | Program output: -116.4856677865
Correct output: -62.4257652273 | Program output: -71.4257652273
Correct output: 8.389607373    | Program output: 11.389607373  
Correct output: -88.5634422156 | Program output: -90.5634422156
Correct output: 28.8889248865  | Program output: -55.1110751135
Correct output: 15.595489344   | Program output: -40.404510656 
Correct output: -49.1003576661 | Program output: -95.1003576661
Correct output: -113.1474461804 | Program output: -136.1474461804
Correct output: -19.0779583365 | Program output: -5.0779583365 
Correct output: -3.1068023861  | Program output: -77.1068023861
Correct output: 52.1593783355  | Program output: 42.1593783355 
Correct output: 128.3998855036 | Program output: 28.3998855036 
Correct output: 31.5586049792  | Program output: 40.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction integer_yankdup} {:instruction float_dec} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat integer_yankdup float_dec integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec float_rot float_dec float_rot integer_mult float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec float_dec integer_mult float_rot integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec float_dec integer_mult integer_mult float_dec float_rot integer_mult float_dec float_rot integer_mult integer_shove float_rot integer_mult float_dec float_dec float_dec float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [19.0 2 34.0 2 27.0 2 42.0 2 38.0 3 54.0 3 101.0 2 1.0 1 30.0 1 6.0 1 3.0 2 61.0 3 23.0 3 9.0 2 3.0 2 2.0 2 84.0 12 56.0 12 46.0 2 23.0 2 14.0 2 74.0 2 10.0 1 100.0 1 9.0 2]
Total: 938.0
Mean: 18.76
Genome size: 110
Size: 111
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3091.1580129
Median total errors in population: 1000.0
Error averages by case: (108.48005240000002 3.372 125.43533449999998 3.488 95.348372 3.049 132.27148840000004 3.405 126.33528420000003 4.069 140.20480480000003 4.028 183.51025410000003 3.383 89.6072097 4.963 116.61954740000003 3.64 88.02090830000003 2.719 90.9704627 3.193 148.3073871 4.062 95.36164330000001 3.91 99.15738629999998 3.263 93.65691150000002 2.975 91.2689624 2.713 166.10761269999995 12.117 140.70158340000003 12.102 132.40337579999996 3.438 96.17989060000002 3.31 100.7181895 9.161 156.88868939999998 3.24 88.8946952 2.882 175.7504174 3.426 99.88154979999999 3.168)
Error minima by case: (18.0 1 0.3866 1 0.0 0 1.3447 1 4.8637 2 3.2814 1 16.8082 1 0.0 0 8.417 1 0.0 0 0.4263 1 14.3042 2 0.0 0 8.0 1 0.0 0 0.0 0 0.8832 9 4.5955 9 19.0416 1 0.0 0 0.0803 1 1.4725 1 0.0 0 35.3999 1 1.0 1)
Average genome size in population (length): 92.129
Average program size in population (points): 93.129
Average percent parens in population: 0.011
Minimum age in population: 56.60931246863765
Maximum age in population: 61.16241694612108
Average age in population: 59.20043850865843
Median age in population: 59.24061494502712
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.258
Error (vector) diversity:			 0.308
Behavioral diversity:				 0.309
--- Run Statistics ---
Number of program evaluations used so far: 41000
Number of point (instruction) evaluations so far: 52343597
--- Timings ---
Current time: 1529615913144 milliseconds
Total Time:         140.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.5 seconds, 36.7%
Fitness Testing:     70.6 seconds, 50.3%
Report:              18.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 40
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 41
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 41
;;******************************
;; -*- Number IO problem report - generation 41
Test total error for best: 29388.0
Test mean error for best: 14.69400
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -94.7252441384
Correct output: -151.3865608082 | Program output: -177.3865608082
Correct output: -39.5964789701 | Program output: -65.5964789701
Correct output: -165.6552500023 | Program output: -191.6552500023
Correct output: 115.8637099929 | Program output: 89.8637099929 
Correct output: 106.2814426659 | Program output: 80.2814426659 
Correct output: 176.1918465521 | Program output: 150.1918465521
Correct output: -17.8149835933 | Program output: -43.8149835933
Correct output: -65.5829878959 | Program output: -91.5829878959
Correct output: 27.6366895788  | Program output: 1.6366895788  
Correct output: -19.5737445927 | Program output: -45.5737445927
Correct output: -146.6957573417 | Program output: -172.6957573417
Correct output: -93.4856677865 | Program output: -119.4856677865
Correct output: -62.4257652273 | Program output: -88.4257652273
Correct output: 8.389607373    | Program output: -17.610392627 
Correct output: -88.5634422156 | Program output: -114.5634422156
Correct output: 28.8889248865  | Program output: 2.8889248865  
Correct output: 15.595489344   | Program output: -10.404510656 
Correct output: -49.1003576661 | Program output: -75.1003576661
Correct output: -113.1474461804 | Program output: -139.1474461804
Correct output: -19.0779583365 | Program output: -45.0779583365
Correct output: -3.1068023861  | Program output: -29.1068023861
Correct output: 52.1593783355  | Program output: 26.1593783355 
Correct output: 128.3998855036 | Program output: 102.3998855036
Correct output: 31.5586049792  | Program output: 5.5586049792  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat in2 integer_dup_items integer_pop integer_dec in1 float_dec integer_fromfloat float_sub integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove float_dec integer_shove integer_mod float_rot integer_mult float_dec integer_mult float_dec integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot tagged_97 float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot float_add float_dec integer_shove float_rot integer_mult float_rot integer_mult float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [26.0 2 26.0 2 26.0 2 26.0 2 26.0 3 26.0 2 26.0 2 26.0 2 26.0 2 26.0 2 26.0 2 26.0 2 26.0 3 26.0 2 26.0 12 26.0 3 26.0 1 26.0 11 26.0 2 26.0 2 26.0 2 26.0 2 26.0 2 26.0 2 26.0 2]
Total: 721.0
Mean: 14.42
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3147.681107600001
Median total errors in population: 979.0
Error averages by case: (110.15227970000001 3.385 127.22812239999999 3.368 101.27977920000001 2.937 134.675982 3.366 127.12530850000003 4.071 140.97501300000008 4.037 184.51609219999997 3.417 90.67370609999996 4.708 117.79030999999999 3.493 91.46031980000005 2.488 93.76637369999999 3.231 151.03304439999997 4.025 100.44701729999996 3.803 101.02596779999996 3.3 96.360251 2.909 94.35868149999999 2.577 167.42749569999995 12.168 142.13168480000002 12.115 134.39415399999996 3.46 100.96935379999998 3.176 102.57707509999997 7.837 158.00053869999994 3.255 93.11183460000001 3.017 177.16424979999994 3.539 102.2644725 3.09)
Error minima by case: (17.0 1 16.3866 1 0.0 0 14.6553 1 1.1363 2 26.0 1 26.0 1 0.0 0 20.0 1 0.0 0 1.0 1 13.3042 2 0.0 0 7.0 1 0.0 0 0.0 0 13.8889 1 0.5955 8 15.1004 1 0.0 0 0.9158 1 0.9695 1 0.0 0 4.1565 1 0.4414 1)
Average genome size in population (length): 96.001
Average program size in population (points): 97.001
Average percent parens in population: 0.010
Minimum age in population: 57.92999867848266
Maximum age in population: 62.48692185369691
Average age in population: 60.61692786780078
Median age in population: 60.68118006264012
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.892
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.892
Total error diversity:				 0.246
Error (vector) diversity:			 0.285
Behavioral diversity:				 0.285
--- Run Statistics ---
Number of program evaluations used so far: 42000
Number of point (instruction) evaluations so far: 54743622
--- Timings ---
Current time: 1529615917275 milliseconds
Total Time:         144.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.6 seconds, 36.5%
Fitness Testing:     72.9 seconds, 50.5%
Report:              18.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 41
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 42
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 42
;;******************************
;; -*- Number IO problem report - generation 42
Test total error for best: 29388.0
Test mean error for best: 14.69400
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -94.7252441384
Correct output: -151.3865608082 | Program output: -177.3865608082
Correct output: -39.5964789701 | Program output: -65.5964789701
Correct output: -165.6552500023 | Program output: -191.6552500023
Correct output: 115.8637099929 | Program output: 89.8637099929 
Correct output: 106.2814426659 | Program output: 80.2814426659 
Correct output: 176.1918465521 | Program output: 150.1918465521
Correct output: -17.8149835933 | Program output: -43.8149835933
Correct output: -65.5829878959 | Program output: -91.5829878959
Correct output: 27.6366895788  | Program output: 1.6366895788  
Correct output: -19.5737445927 | Program output: -45.5737445927
Correct output: -146.6957573417 | Program output: -172.6957573417
Correct output: -93.4856677865 | Program output: -119.4856677865
Correct output: -62.4257652273 | Program output: -88.4257652273
Correct output: 8.389607373    | Program output: -17.610392627 
Correct output: -88.5634422156 | Program output: -114.5634422156
Correct output: 28.8889248865  | Program output: 2.8889248865  
Correct output: 15.595489344   | Program output: -10.404510656 
Correct output: -49.1003576661 | Program output: -75.1003576661
Correct output: -113.1474461804 | Program output: -139.1474461804
Correct output: -19.0779583365 | Program output: -45.0779583365
Correct output: -3.1068023861  | Program output: -29.1068023861
Correct output: 52.1593783355  | Program output: 26.1593783355 
Correct output: 128.3998855036 | Program output: 102.3998855036
Correct output: 31.5586049792  | Program output: 5.5586049792  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat in2 integer_dup_items integer_pop integer_dec in1 float_dec integer_fromfloat float_sub integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove float_dec integer_shove integer_mod float_rot integer_mult float_dec integer_mult float_dec integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot tagged_97 float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot float_add float_dec integer_shove float_rot integer_mult float_rot integer_mult float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [26.0 2 26.0 2 26.0 2 26.0 2 26.0 3 26.0 2 26.0 2 26.0 2 26.0 2 26.0 2 26.0 2 26.0 2 26.0 3 26.0 2 26.0 12 26.0 3 26.0 1 26.0 11 26.0 2 26.0 2 26.0 2 26.0 2 26.0 2 26.0 2 26.0 2]
Total: 721.0
Mean: 14.42
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3203.7743175000005
Median total errors in population: 966.0
Error averages by case: (113.1550301 3.549 126.67558090000001 3.52 103.80007739999998 3.082 134.1499656 3.473 131.07455690000003 4.241 144.79157510000005 4.178 187.7231668 3.543 93.69896509999998 4.745 119.93556180000003 3.499 94.3278252 2.613 96.5616055 3.368 150.38940489999993 4.105 103.21785240000001 3.86 104.5178569 3.481 96.8614242 2.976 95.17514100000002 2.727 169.8502262 12.231 144.97973899999997 12.158 136.73357200000004 3.594 102.90933520000002 3.244 103.95813180000002 6.163 160.92538119999998 3.422 96.5894471 3.139 180.92939859999996 3.725 103.13849659999998 3.069)
Error minima by case: (17.0 1 26.0 1 0.0 0 26.0 1 0.8637 2 20.7186 1 26.0 1 0.0 0 3.417 1 0.0 0 1.0 1 12.3042 2 0.0 0 7.0 1 0.0 0 0.0 0 13.8889 1 0.5955 8 15.1004 1 0.0 0 1.0803 1 0.1068 1 0.0 0 26.0 1 1.0 1)
Average genome size in population (length): 99.565
Average program size in population (points): 100.565
Average percent parens in population: 0.010
Minimum age in population: 59.44689724923046
Maximum age in population: 63.97505954301096
Average age in population: 62.08838341075305
Median age in population: 62.10675698067689
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 13
Genome diversity (% unique Plush genomes):	 0.89
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 13
Syntactic diversity (% unique Push programs):	 0.89
Total error diversity:				 0.243
Error (vector) diversity:			 0.273
Behavioral diversity:				 0.274
--- Run Statistics ---
Number of program evaluations used so far: 43000
Number of point (instruction) evaluations so far: 57232747
--- Timings ---
Current time: 1529615921872 milliseconds
Total Time:         149.0 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        54.0 seconds, 36.3%
Fitness Testing:     75.5 seconds, 50.7%
Report:              19.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 42
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 43
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 43
;;******************************
;; -*- Number IO problem report - generation 43
Test total error for best: 28318.0
Test mean error for best: 14.15900
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -93.7252441384
Correct output: -151.3865608082 | Program output: -176.3865608082
Correct output: -39.5964789701 | Program output: -64.5964789701
Correct output: -165.6552500023 | Program output: -190.6552500023
Correct output: 115.8637099929 | Program output: 90.8637099929 
Correct output: 106.2814426659 | Program output: 81.2814426659 
Correct output: 176.1918465521 | Program output: 151.1918465521
Correct output: -17.8149835933 | Program output: -42.8149835933
Correct output: -65.5829878959 | Program output: -90.5829878959
Correct output: 27.6366895788  | Program output: 2.6366895788  
Correct output: -19.5737445927 | Program output: -44.5737445927
Correct output: -146.6957573417 | Program output: -171.6957573417
Correct output: -93.4856677865 | Program output: -118.4856677865
Correct output: -62.4257652273 | Program output: -87.4257652273
Correct output: 8.389607373    | Program output: -16.610392627 
Correct output: -88.5634422156 | Program output: -113.5634422156
Correct output: 28.8889248865  | Program output: 3.8889248865  
Correct output: 15.595489344   | Program output: -9.404510656  
Correct output: -49.1003576661 | Program output: -74.1003576661
Correct output: -113.1474461804 | Program output: -138.1474461804
Correct output: -19.0779583365 | Program output: -44.0779583365
Correct output: -3.1068023861  | Program output: -28.1068023861
Correct output: 52.1593783355  | Program output: 27.1593783355 
Correct output: 128.3998855036 | Program output: 103.3998855036
Correct output: 31.5586049792  | Program output: 6.5586049792  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat in2 integer_dup_items integer_pop integer_dec in1 float_dec integer_fromfloat float_sub integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove float_dec integer_shove integer_mod float_rot integer_mult float_dec integer_mult float_dec integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot tagged_97 float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot float_add float_dec integer_shove float_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [25.0 2 25.0 2 25.0 2 25.0 2 25.0 3 25.0 3 25.0 2 25.0 2 25.0 2 25.0 1 25.0 2 25.0 2 25.0 3 25.0 2 25.0 12 25.0 3 25.0 2 25.0 11 25.0 2 25.0 2 25.0 2 25.0 2 25.0 2 25.0 2 25.0 2]
Total: 697.0
Mean: 13.94
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2768.1665128000004
Median total errors in population: 949.5
Error averages by case: (94.9572398 3.326 110.5835959 3.385 87.6793155 2.882 118.20188029999998 3.257 112.94206030000001 4.074 125.57565180000006 4.013 170.219308 3.31 77.2937964 4.662 103.18599680000003 3.525 78.85828880000004 2.595 77.23765030000001 3.146 134.7352498 3.85 87.76065499999999 3.734 85.11457779999995 3.274 77.81779220000001 2.842 79.05498149999998 2.735 150.60469839999996 12.093 125.52486219999999 12.057 117.95280239999995 3.36 88.64053640000003 3.121 87.6036964 5.624 141.27918499999993 3.212 81.59314979999996 2.988 164.97596879999995 3.613 85.36257319999997 2.733)
Error minima by case: (17.0 1 19.0 1 0.0 0 25.0 1 1.1363 2 19.2814 1 25.0 1 0.0 0 2.417 1 0.0 0 0.4263 1 25.0 1 0.0 0 7.0 1 0.0 0 0.0 0 1.8889 1 9.4045 8 9.1004 1 0.0 0 0.1559 1 1.1546 1 0.0 0 4.6001 1 0.0 0)
Average genome size in population (length): 103.027
Average program size in population (points): 104.027
Average percent parens in population: 0.010
Minimum age in population: 61.32269138779611
Maximum age in population: 65.27452496422802
Average age in population: 63.51147899548706
Median age in population: 63.55960839828572
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.918
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.918
Total error diversity:				 0.273
Error (vector) diversity:			 0.294
Behavioral diversity:				 0.295
--- Run Statistics ---
Number of program evaluations used so far: 44000
Number of point (instruction) evaluations so far: 59808472
--- Timings ---
Current time: 1529615926089 milliseconds
Total Time:         153.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        55.2 seconds, 36.0%
Fitness Testing:     78.0 seconds, 50.9%
Report:              19.9 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 43
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 44
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 44
;;******************************
;; -*- Number IO problem report - generation 44
Test total error for best: 28318.0
Test mean error for best: 14.15900
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -93.7252441384
Correct output: -151.3865608082 | Program output: -176.3865608082
Correct output: -39.5964789701 | Program output: -64.5964789701
Correct output: -165.6552500023 | Program output: -190.6552500023
Correct output: 115.8637099929 | Program output: 90.8637099929 
Correct output: 106.2814426659 | Program output: 81.2814426659 
Correct output: 176.1918465521 | Program output: 151.1918465521
Correct output: -17.8149835933 | Program output: -42.8149835933
Correct output: -65.5829878959 | Program output: -90.5829878959
Correct output: 27.6366895788  | Program output: 2.6366895788  
Correct output: -19.5737445927 | Program output: -44.5737445927
Correct output: -146.6957573417 | Program output: -171.6957573417
Correct output: -93.4856677865 | Program output: -118.4856677865
Correct output: -62.4257652273 | Program output: -87.4257652273
Correct output: 8.389607373    | Program output: -16.610392627 
Correct output: -88.5634422156 | Program output: -113.5634422156
Correct output: 28.8889248865  | Program output: 3.8889248865  
Correct output: 15.595489344   | Program output: -9.404510656  
Correct output: -49.1003576661 | Program output: -74.1003576661
Correct output: -113.1474461804 | Program output: -138.1474461804
Correct output: -19.0779583365 | Program output: -44.0779583365
Correct output: -3.1068023861  | Program output: -28.1068023861
Correct output: 52.1593783355  | Program output: 27.1593783355 
Correct output: 128.3998855036 | Program output: 103.3998855036
Correct output: 31.5586049792  | Program output: 6.5586049792  
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat in2 integer_dup_items integer_pop integer_dec in1 float_dec integer_fromfloat float_sub integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove float_dec integer_shove integer_mod float_rot integer_mult float_dec integer_mult float_dec integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot tagged_97 float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot float_add float_dec integer_shove float_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [25.0 2 25.0 2 25.0 2 25.0 2 25.0 3 25.0 3 25.0 2 25.0 2 25.0 2 25.0 1 25.0 2 25.0 2 25.0 3 25.0 2 25.0 12 25.0 3 25.0 2 25.0 11 25.0 2 25.0 2 25.0 2 25.0 2 25.0 2 25.0 2 25.0 2]
Total: 697.0
Mean: 13.94
Genome size: 98
Size: 99
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2641.4039951
Median total errors in population: 942.0
Error averages by case: (93.95909780000005 3.45 103.07740620000001 3.438 81.6065797 2.946 110.39646309999998 3.323 110.32997020000002 4.193 122.35420480000003 4.157 165.97000020000004 3.391 67.88849619999996 4.572 93.86439210000003 3.511 73.73810920000003 2.842 76.70176719999999 3.257 125.08079260000004 3.899 82.46682080000002 3.793 85.06678309999991 3.373 71.0489318 3.176 73.51968519999997 2.979 147.20720209999993 11.873 122.74279420000003 12.019 116.77417729999996 3.462 83.56139300000001 3.184 79.338451 5.452 138.38217419999992 3.285 77.38893489999997 3.078 154.0857631 3.733 79.66060510000001 2.807)
Error minima by case: (17.0 1 5.6982 1 0.0 0 2.3018 1 0.8637 2 25.0 1 25.0 1 0.0 0 2.417 1 0.0 0 0.4146 1 7.3042 1 0.0 0 7.0 1 0.0 0 0.0 0 2.1111 1 1.4045 8 7.1004 1 0.0 0 1.4213 1 0.1068 1 0.0 0 4.2434 1 0.0 0)
Average genome size in population (length): 104.929
Average program size in population (points): 105.929
Average percent parens in population: 0.009
Minimum age in population: 62.43943203674098
Maximum age in population: 66.92020879849349
Average age in population: 64.92149030890614
Median age in population: 64.93813434995104
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.887
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.887
Total error diversity:				 0.288
Error (vector) diversity:			 0.313
Behavioral diversity:				 0.314
--- Run Statistics ---
Number of program evaluations used so far: 45000
Number of point (instruction) evaluations so far: 62431722
--- Timings ---
Current time: 1529615930466 milliseconds
Total Time:         157.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        56.4 seconds, 35.8%
Fitness Testing:     80.6 seconds, 51.1%
Report:              20.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 44
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 45
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 45
;;******************************
;; -*- Number IO problem report - generation 45
Test total error for best: 18776.0
Test mean error for best: 9.38800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -84.7252441384
Correct output: -151.3865608082 | Program output: -167.3865608082
Correct output: -39.5964789701 | Program output: -55.5964789701
Correct output: -165.6552500023 | Program output: -181.6552500023
Correct output: 115.8637099929 | Program output: 99.8637099929 
Correct output: 106.2814426659 | Program output: 90.2814426659 
Correct output: 176.1918465521 | Program output: 160.1918465521
Correct output: -17.8149835933 | Program output: -33.8149835933
Correct output: -65.5829878959 | Program output: -81.5829878959
Correct output: 27.6366895788  | Program output: 11.6366895788 
Correct output: -19.5737445927 | Program output: -35.5737445927
Correct output: -146.6957573417 | Program output: -162.6957573417
Correct output: -93.4856677865 | Program output: -109.4856677865
Correct output: -62.4257652273 | Program output: -78.4257652273
Correct output: 8.389607373    | Program output: -7.610392627  
Correct output: -88.5634422156 | Program output: -104.5634422156
Correct output: 28.8889248865  | Program output: 12.8889248865 
Correct output: 15.595489344   | Program output: -0.404510656  
Correct output: -49.1003576661 | Program output: -65.1003576661
Correct output: -113.1474461804 | Program output: -129.1474461804
Correct output: -19.0779583365 | Program output: -35.0779583365
Correct output: -3.1068023861  | Program output: -19.1068023861
Correct output: 52.1593783355  | Program output: 36.1593783355 
Correct output: 128.3998855036 | Program output: 112.3998855036
Correct output: 31.5586049792  | Program output: 15.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_dup_items} {:instruction float_mod} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction float_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat in2 integer_dup_items integer_pop integer_dec in1 float_dec integer_fromfloat float_sub integer_dup_items float_mod integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove float_dec integer_shove integer_mod float_rot integer_mult float_dec integer_mult float_dec integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_dec integer_mult float_dec float_rot float_dec float_dec float_rot tagged_97 float_add float_dec integer_shove float_rot integer_mult float_rot integer_mult float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [16.0 2 16.0 2 16.0 2 16.0 2 16.0 3 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 3 16.0 2 16.0 11 16.0 3 16.0 2 16.0 11 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2 16.0 2]
Total: 471.0
Mean: 9.42
Genome size: 94
Size: 95
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2700.966736400001
Median total errors in population: 944.0
Error averages by case: (95.51922820000004 3.652 109.18807059999995 3.638 83.60332289999998 3.099 115.67032619999995 3.52 106.88220380000003 4.25 118.67993770000001 4.221 155.1802169 3.454 76.57215629999996 5.287 97.46198040000006 3.76 80.9921516000001 3.418 76.92495069999997 3.452 127.83242780000003 3.973 86.1923901 3.918 87.66310559999991 3.545 81.1808707 4.508 82.85716109999994 3.288 141.8089540999999 10.971 120.35577550000006 11.846 116.45224799999995 3.654 87.55126180000003 3.338 85.71327170000002 5.933 134.95928869999986 3.442 83.72451879999998 3.248 149.72358419999998 4.172 87.49233299999999 3.198)
Error minima by case: (6.0 1 5.3866 1 0.0 0 3.6553 1 0.1363 2 2.2814 1 16.0 1 0.0 0 5.417 1 0.0 0 0.5737 1 9.3042 1 0.0 0 7.0 1 0.0 0 0.0 0 16.0 1 6.0 2 14.0903 1 0.0 0 0.078 1 0.1886 1 0.0 0 1.6001 1 0.0 0)
Average genome size in population (length): 103.899
Average program size in population (points): 104.899
Average percent parens in population: 0.010
Minimum age in population: 63.88224884507463
Maximum age in population: 68.45479908387557
Average age in population: 66.3393056265774
Median age in population: 66.37751542229205
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.87
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.87
Total error diversity:				 0.293
Error (vector) diversity:			 0.331
Behavioral diversity:				 0.332
--- Run Statistics ---
Number of program evaluations used so far: 46000
Number of point (instruction) evaluations so far: 65029247
--- Timings ---
Current time: 1529615935105 milliseconds
Total Time:         162.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        57.8 seconds, 35.6%
Fitness Testing:     83.3 seconds, 51.3%
Report:              21.1 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 45
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 46
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 46
;;******************************
;; -*- Number IO problem report - generation 46
Test total error for best: 17701.0
Test mean error for best: 8.85050
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -83.7252441384
Correct output: -151.3865608082 | Program output: -166.3865608082
Correct output: -39.5964789701 | Program output: -54.5964789701
Correct output: -165.6552500023 | Program output: -180.6552500023
Correct output: 115.8637099929 | Program output: 100.8637099929
Correct output: 106.2814426659 | Program output: 91.2814426659 
Correct output: 176.1918465521 | Program output: 161.1918465521
Correct output: -17.8149835933 | Program output: -32.8149835933
Correct output: -65.5829878959 | Program output: -80.5829878959
Correct output: 27.6366895788  | Program output: 12.6366895788 
Correct output: -19.5737445927 | Program output: -34.5737445927
Correct output: -146.6957573417 | Program output: -161.6957573417
Correct output: -93.4856677865 | Program output: -108.4856677865
Correct output: -62.4257652273 | Program output: -77.4257652273
Correct output: 8.389607373    | Program output: -6.610392627  
Correct output: -88.5634422156 | Program output: -103.5634422156
Correct output: 28.8889248865  | Program output: 13.8889248865 
Correct output: 15.595489344   | Program output: 0.595489344   
Correct output: -49.1003576661 | Program output: -64.1003576661
Correct output: -113.1474461804 | Program output: -128.1474461804
Correct output: -19.0779583365 | Program output: -34.0779583365
Correct output: -3.1068023861  | Program output: -18.1068023861
Correct output: 52.1593783355  | Program output: 37.1593783355 
Correct output: 128.3998855036 | Program output: 113.3998855036
Correct output: 31.5586049792  | Program output: 16.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dup_items} {:instruction in1} {:instruction float_shove} {:instruction in1} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction 88} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction tagged_514} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat in2 integer_dup_items in1 float_shove in1 float_dec integer_fromfloat float_sub integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot 88 float_dec float_dup float_dec integer_shove float_dec integer_shove integer_mod float_rot integer_mult float_dec integer_mult float_dec integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot tagged_97 float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot float_add float_dec integer_shove float_rot integer_mult float_rot integer_mult float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec tagged_514 integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 3 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 3 15.0 2 15.0 11 15.0 3 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2 15.0 2]
Total: 437.0
Mean: 8.74
Genome size: 102
Size: 103
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2754.5486339000017
Median total errors in population: 935.0
Error averages by case: (101.46577910000005 4.21 110.63775189999991 4.217 86.43991159999999 3.562 114.75375589999993 4.08 106.48667260000012 4.658 113.65539029999998 4.779 137.6939627 4.074 88.10969669999994 6.1 98.94872490000004 4.196 92.00991460000007 4.448 84.98543649999988 4.013 119.76147499999999 4.296 92.56729100000007 4.476 95.1260678999999 4.115 93.75679559999988 7.526 92.91447869999993 4.18 128.23593919999988 8.688 113.62504110000006 11.524 116.41992629999991 4.181 94.9398432000001 3.961 95.73679250000012 6.424 125.52082369999982 3.9 94.48840540000008 3.839 133.2779871 4.276 99.31877040000008 3.949)
Error minima by case: (15.0 1 15.0 1 0.0 0 15.0 1 0.1363 1 15.0 1 15.0 1 0.0 0 6.417 1 0.0 0 0.5737 1 4.3042 1 0.0 0 7.0 1 0.0 0 0.0 0 0.1111 1 1.5955 1 10.0 1 0.0 0 0.922 1 0.4391 1 0.901 1 2.6001 1 4.0 1)
Average genome size in population (length): 102.276
Average program size in population (points): 103.276
Average percent parens in population: 0.010
Minimum age in population: 65.39883467535981
Maximum age in population: 69.79410911476995
Average age in population: 67.89021444869547
Median age in population: 67.93374776293231
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.865
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.865
Total error diversity:				 0.296
Error (vector) diversity:			 0.314
Behavioral diversity:				 0.315
--- Run Statistics ---
Number of program evaluations used so far: 47000
Number of point (instruction) evaluations so far: 67586222
--- Timings ---
Current time: 1529615939561 milliseconds
Total Time:         166.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        58.9 seconds, 35.4%
Fitness Testing:     85.9 seconds, 51.6%
Report:              21.6 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 46
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 47
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 47
;;******************************
;; -*- Number IO problem report - generation 47
Test total error for best: 15633.0
Test mean error for best: 7.81650
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -81.7252441384
Correct output: -151.3865608082 | Program output: -164.3865608082
Correct output: -39.5964789701 | Program output: -52.5964789701
Correct output: -165.6552500023 | Program output: -178.6552500023
Correct output: 115.8637099929 | Program output: 102.8637099929
Correct output: 106.2814426659 | Program output: 93.2814426659 
Correct output: 176.1918465521 | Program output: 163.1918465521
Correct output: -17.8149835933 | Program output: -30.8149835933
Correct output: -65.5829878959 | Program output: -78.5829878959
Correct output: 27.6366895788  | Program output: 14.6366895788 
Correct output: -19.5737445927 | Program output: -32.5737445927
Correct output: -146.6957573417 | Program output: -159.6957573417
Correct output: -93.4856677865 | Program output: -106.4856677865
Correct output: -62.4257652273 | Program output: -75.4257652273
Correct output: 8.389607373    | Program output: -4.610392627  
Correct output: -88.5634422156 | Program output: -101.5634422156
Correct output: 28.8889248865  | Program output: 15.8889248865 
Correct output: 15.595489344   | Program output: 2.595489344   
Correct output: -49.1003576661 | Program output: -62.1003576661
Correct output: -113.1474461804 | Program output: -126.1474461804
Correct output: -19.0779583365 | Program output: -32.0779583365
Correct output: -3.1068023861  | Program output: -16.1068023861
Correct output: 52.1593783355  | Program output: 39.1593783355 
Correct output: 128.3998855036 | Program output: 115.3998855036
Correct output: 31.5586049792  | Program output: 18.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_853} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat in2 integer_dup_items integer_pop integer_dec in1 float_dec integer_fromfloat float_sub integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove float_dec integer_shove integer_mod float_rot integer_mult float_dec integer_mult float_dec integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot tagged_853 float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot integer_rot float_dec float_rot float_add float_dec integer_shove float_rot integer_mult float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [13.0 2 13.0 2 13.0 2 13.0 2 13.0 2 13.0 3 13.0 2 13.0 2 13.0 2 13.0 2 13.0 2 13.0 2 13.0 3 13.0 2 13.0 11 13.0 3 13.0 2 13.0 2 13.0 2 13.0 2 13.0 2 13.0 2 13.0 2 13.0 2 13.0 2]
Total: 387.0
Mean: 7.74
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2688.6164235000033
Median total errors in population: 780.0
Error averages by case: (101.59986600000008 3.992 107.8012439999999 4.131 86.1979751 3.399 110.53441379999994 3.948 100.64874120000013 4.498 105.31769629999985 4.636 122.1902417 3.989 89.89771419999984 6.355 100.63021030000009 3.802 92.70224390000014 3.819 87.01419399999976 3.84 114.00392349999991 4.085 92.83703670000016 4.443 95.39715479999984 3.928 95.44249609999984 8.7 96.12907169999995 4.325 120.0654377999997 6.843 107.98153830000018 11.411 112.73061539999978 3.964 94.90357790000012 3.835 97.9233700000002 6.45 119.79661349999967 3.736 95.88939240000013 3.712 120.78932579999997 3.729 100.9883291000001 3.634)
Error minima by case: (13.0 1 13.0 1 0.0 0 13.0 1 0.1363 2 13.0 2 13.0 1 0.0 0 5.417 1 1.0 1 1.0 1 13.0 1 0.0 0 5.0 1 1.0 1 0.0 0 13.0 1 10.2111 1 13.0 1 0.0 0 3.078 1 0.2497 1 1.2891 1 6.6001 1 7.0 1)
Average genome size in population (length): 99.696
Average program size in population (points): 100.696
Average percent parens in population: 0.010
Minimum age in population: 66.43031557553138
Maximum age in population: 71.08985455798307
Average age in population: 69.34772058348756
Median age in population: 69.35746064229537
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.211
Error (vector) diversity:			 0.228
Behavioral diversity:				 0.228
--- Run Statistics ---
Number of program evaluations used so far: 48000
Number of point (instruction) evaluations so far: 70078772
--- Timings ---
Current time: 1529615944220 milliseconds
Total Time:         171.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        60.4 seconds, 35.2%
Fitness Testing:     88.6 seconds, 51.7%
Report:              22.3 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 47
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 48
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 48
;;******************************
;; -*- Number IO problem report - generation 48
Test total error for best: 14604.0
Test mean error for best: 7.30200
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -80.7252441384
Correct output: -151.3865608082 | Program output: -163.3865608082
Correct output: -39.5964789701 | Program output: -51.5964789701
Correct output: -165.6552500023 | Program output: -177.6552500023
Correct output: 115.8637099929 | Program output: 103.8637099929
Correct output: 106.2814426659 | Program output: 94.2814426659 
Correct output: 176.1918465521 | Program output: 164.1918465521
Correct output: -17.8149835933 | Program output: -29.8149835933
Correct output: -65.5829878959 | Program output: -77.5829878959
Correct output: 27.6366895788  | Program output: 15.6366895788 
Correct output: -19.5737445927 | Program output: -31.5737445927
Correct output: -146.6957573417 | Program output: -158.6957573417
Correct output: -93.4856677865 | Program output: -105.4856677865
Correct output: -62.4257652273 | Program output: -74.4257652273
Correct output: 8.389607373    | Program output: -3.610392627  
Correct output: -88.5634422156 | Program output: -100.5634422156
Correct output: 28.8889248865  | Program output: 16.8889248865 
Correct output: 15.595489344   | Program output: 3.595489344   
Correct output: -49.1003576661 | Program output: -61.1003576661
Correct output: -113.1474461804 | Program output: -125.1474461804
Correct output: -19.0779583365 | Program output: -31.0779583365
Correct output: -3.1068023861  | Program output: -15.1068023861
Correct output: 52.1593783355  | Program output: 40.1593783355 
Correct output: 128.3998855036 | Program output: 116.3998855036
Correct output: 31.5586049792  | Program output: 19.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction float_shove} {:instruction in1} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction in2} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat in2 integer_dup_items integer_pop float_shove in1 float_dec integer_fromfloat float_sub integer_dup_items integer_pop integer_dec in1 float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove float_dec integer_shove integer_mod float_rot integer_mult float_dec integer_mult float_dec float_rot float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot float_dec float_frominteger integer_mult float_dec float_rot float_dec float_dec float_rot tagged_97 float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot float_add float_dec integer_shove float_rot integer_mult float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult in2 print_float integer_dup integer_shove float_rot)
Errors: [12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 3 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 3 12.0 2 12.0 11 12.0 3 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2 12.0 2]
Total: 362.0
Mean: 7.24
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2913.2244586000033
Median total errors in population: 672.0
Error averages by case: (109.44175340000007 4.352 115.5084970999999 4.527 94.15157009999997 3.824 117.88125409999988 4.311 110.18142580000016 4.837 113.70579139999978 5.017 127.92554829999999 4.397 102.02247849999986 6.385 107.97198090000005 4.293 105.78811320000021 4.115 92.97151109999982 4.118 119.25778709999994 4.472 102.65129680000014 4.851 103.12093219999983 4.272 105.99631179999984 9.098 105.36201409999991 4.773 127.95021069999977 6.627 116.80215080000008 11.015 121.0108550999999 4.327 105.19333540000017 4.28 108.74026250000016 6.325 127.00538989999976 4.112 106.38043340000006 4.113 128.1400303 4.104 111.43952460000004 4.079)
Error minima by case: (9.5772 1 2.2385 1 0.0 0 8.5072 1 2.8637 1 4.2814 2 6.8591 1 1.185 1 5.417 1 1.0 1 0.1907 1 0.6085 1 0.0 0 3.0 1 0.3896 1 4.0 1 12.0 1 8.4045 1 6.1004 1 0.0 0 0.078 1 0.0643 1 0.0 0 2.6001 1 3.4414 1)
Average genome size in population (length): 98.744
Average program size in population (points): 99.744
Average percent parens in population: 0.010
Minimum age in population: 67.94142114914638
Maximum age in population: 72.65918775957682
Average age in population: 70.89817357172967
Median age in population: 70.94163290745622
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.883
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.883
Total error diversity:				 0.225
Error (vector) diversity:			 0.241
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 49000
Number of point (instruction) evaluations so far: 72547397
--- Timings ---
Current time: 1529615948445 milliseconds
Total Time:         175.7 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        61.5 seconds, 35.0%
Fitness Testing:     91.2 seconds, 51.9%
Report:              22.8 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 48
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 49
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 49
;;******************************
;; -*- Number IO problem report - generation 49
Test total error for best: 13536.0
Test mean error for best: 6.76800
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -79.7252441384
Correct output: -151.3865608082 | Program output: -162.3865608082
Correct output: -39.5964789701 | Program output: -50.5964789701
Correct output: -165.6552500023 | Program output: -176.6552500023
Correct output: 115.8637099929 | Program output: 104.8637099929
Correct output: 106.2814426659 | Program output: 95.2814426659 
Correct output: 176.1918465521 | Program output: 165.1918465521
Correct output: -17.8149835933 | Program output: -28.8149835933
Correct output: -65.5829878959 | Program output: -76.5829878959
Correct output: 27.6366895788  | Program output: 16.6366895788 
Correct output: -19.5737445927 | Program output: -30.5737445927
Correct output: -146.6957573417 | Program output: -157.6957573417
Correct output: -93.4856677865 | Program output: -104.4856677865
Correct output: -62.4257652273 | Program output: -73.4257652273
Correct output: 8.389607373    | Program output: -2.610392627  
Correct output: -88.5634422156 | Program output: -99.5634422156
Correct output: 28.8889248865  | Program output: 17.8889248865 
Correct output: 15.595489344   | Program output: 4.595489344   
Correct output: -49.1003576661 | Program output: -60.1003576661
Correct output: -113.1474461804 | Program output: -124.1474461804
Correct output: -19.0779583365 | Program output: -30.0779583365
Correct output: -3.1068023861  | Program output: -14.1068023861
Correct output: 52.1593783355  | Program output: 41.1593783355 
Correct output: 128.3998855036 | Program output: 117.3998855036
Correct output: 31.5586049792  | Program output: 20.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat in2 integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_swap float_dec float_dup float_dec integer_shove float_rot integer_mult float_dec integer_sub integer_mult float_rot integer_mult float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_add float_dec integer_shove float_rot integer_mult float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove float_rot)
Errors: [11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 3 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 3 11.0 2 11.0 11 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2 11.0 2]
Total: 336.0
Mean: 6.72
Genome size: 76
Size: 77
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 3073.333220000002
Median total errors in population: 622.0
Error averages by case: (118.43025580000007 4.346 121.75636859999989 4.489 102.04738669999998 3.779 124.30864309999988 4.304 117.28807470000012 4.751 121.30846509999996 4.954 136.8411257 4.389 105.50405019999992 6.512 112.51678040000007 4.281 110.45225400000014 4.042 99.72537429999983 4.154 127.52857470000001 4.466 108.96559980000012 4.806 111.16129639999984 4.289 112.07805609999984 8.732 110.86889179999997 4.721 134.79773249999982 6.77 124.07253730000005 9.982 127.69538949999988 4.333 111.26024550000012 4.241 113.12120210000019 6.522 133.69907549999985 4.125 111.45555200000011 4.125 134.22139210000003 4.13 116.92789610000011 4.058)
Error minima by case: (5.623 1 4.0 1 0.0 0 4.0 1 1.0 1 4.9528 2 11.0 1 1.9684 1 1.0 1 0.0 0 1.1752 1 0.662 1 0.0 0 1.3679 1 1.0 1 3.4366 1 5.7533 1 4.0366 1 1.8996 1 0.0 0 0.078 1 0.0538 1 2.0 1 1.3999 1 2.4414 1)
Average genome size in population (length): 96.913
Average program size in population (points): 97.913
Average percent parens in population: 0.010
Minimum age in population: 69.55845641465004
Maximum age in population: 74.31535849153762
Average age in population: 72.36399929310942
Median age in population: 72.42437414817698
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.888
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.888
Total error diversity:				 0.219
Error (vector) diversity:			 0.238
Behavioral diversity:				 0.238
--- Run Statistics ---
Number of program evaluations used so far: 50000
Number of point (instruction) evaluations so far: 74970347
--- Timings ---
Current time: 1529615952705 milliseconds
Total Time:         179.8 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        62.7 seconds, 34.8%
Fitness Testing:     93.7 seconds, 52.1%
Report:              23.4 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 49
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 50
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 50
;;******************************
;; -*- Number IO problem report - generation 50
Test total error for best: 11389.0
Test mean error for best: 5.69450
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -77.7252441384
Correct output: -151.3865608082 | Program output: -160.3865608082
Correct output: -39.5964789701 | Program output: -48.5964789701
Correct output: -165.6552500023 | Program output: -174.6552500023
Correct output: 115.8637099929 | Program output: 106.8637099929
Correct output: 106.2814426659 | Program output: 97.2814426659 
Correct output: 176.1918465521 | Program output: 167.1918465521
Correct output: -17.8149835933 | Program output: -26.8149835933
Correct output: -65.5829878959 | Program output: -74.5829878959
Correct output: 27.6366895788  | Program output: 18.6366895788 
Correct output: -19.5737445927 | Program output: -28.5737445927
Correct output: -146.6957573417 | Program output: -155.6957573417
Correct output: -93.4856677865 | Program output: -102.4856677865
Correct output: -62.4257652273 | Program output: -71.4257652273
Correct output: 8.389607373    | Program output: -0.610392627  
Correct output: -88.5634422156 | Program output: -97.5634422156
Correct output: 28.8889248865  | Program output: 19.8889248865 
Correct output: 15.595489344   | Program output: 6.595489344   
Correct output: -49.1003576661 | Program output: -58.1003576661
Correct output: -113.1474461804 | Program output: -122.1474461804
Correct output: -19.0779583365 | Program output: -28.0779583365
Correct output: -3.1068023861  | Program output: -12.1068023861
Correct output: 52.1593783355  | Program output: 43.1593783355 
Correct output: 128.3998855036 | Program output: 119.3998855036
Correct output: 31.5586049792  | Program output: 22.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_dup_items} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_swap} {:instruction in2} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction in1} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mod} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_min} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_mod} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction integer_div} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction integer_rot} {:instruction float_rot} {:instruction tagged_97} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_dec} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_dec} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction integer_dup} {:instruction integer_shove} {:instruction tag_integer_916})
Best program: (integer_dec in1 float_dec float_dec float_dup_items in2 float_dec float_rot float_swap in2 float_dup float_dec integer_shove float_dec integer_shove integer_mod float_rot float_dec integer_shove float_dec float_rot in1 float_rot integer_mult integer_mult float_dec float_rot float_dec float_dup float_dec integer_shove float_dec integer_shove integer_mod float_rot integer_mult float_dec integer_mult float_dec integer_min float_dec float_rot integer_mult integer_mult float_dec float_mod float_dec float_dec float_rot float_dec float_frominteger integer_div float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult float_dec float_rot float_dec integer_rot float_rot tagged_97 float_dec float_rot integer_mult float_dec float_dec integer_rot float_dec float_rot float_add float_dec integer_shove float_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float integer_dup integer_shove tag_integer_916)
Errors: [9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 3 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 3 9.0 2 9.0 11 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2 9.0 2]
Total: 286.0
Mean: 5.72
Genome size: 104
Size: 105
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2613.1898272000035
Median total errors in population: 527.5
Error averages by case: (97.72319860000006 4.077 101.8651228999999 4.255 82.0821854 3.519 104.21638689999989 4.058 98.49088150000011 4.301 101.88938579999986 4.778 116.8521973 4.142 92.31332969999988 6.323 98.60336890000008 4.049 94.49296830000014 3.822 82.46842849999987 3.919 107.07907909999994 4.175 88.59974960000002 4.577 91.72345339999981 4.052 95.89632919999993 8.706 91.85779319999995 4.459 116.95270969999974 6.478 105.71911460000014 8.124 109.08444169999983 4.061 90.86885030000009 3.983 97.65526400000014 6.34 115.69172119999976 3.876 94.77010779999998 3.877 117.53036529999987 3.888 101.13839430000007 3.786)
Error minima by case: (9.0 1 8.2352 1 0.0 0 9.0 1 7.8637 1 9.0 2 9.0 1 3.8788 1 4.2352 1 3.0 1 1.5613 1 9.0 1 0.0 0 8.0 1 7.3896 1 7.0 1 9.0 1 5.1403 1 9.0 1 0.0 0 1.922 1 0.3447 1 0.901 1 1.6001 1 9.0 1)
Average genome size in population (length): 94.086
Average program size in population (points): 95.086
Average percent parens in population: 0.011
Minimum age in population: 71.0401076937049
Maximum age in population: 75.6245425481731
Average age in population: 73.76808148470614
Median age in population: 73.82909909798514
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.873
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.873
Total error diversity:				 0.193
Error (vector) diversity:			 0.201
Behavioral diversity:				 0.201
--- Run Statistics ---
Number of program evaluations used so far: 51000
Number of point (instruction) evaluations so far: 77322647
--- Timings ---
Current time: 1529615957297 milliseconds
Total Time:         184.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        64.0 seconds, 34.7%
Fitness Testing:     96.3 seconds, 52.2%
Report:              24.0 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 50
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 51
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 51
;;******************************
;; -*- Number IO problem report - generation 51
Test total error for best: 5580.0
Test mean error for best: 2.79000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -72.7252441384
Correct output: -151.3865608082 | Program output: -155.3865608082
Correct output: -39.5964789701 | Program output: -43.5964789701
Correct output: -165.6552500023 | Program output: -169.6552500023
Correct output: 115.8637099929 | Program output: 111.8637099929
Correct output: 106.2814426659 | Program output: 102.2814426659
Correct output: 176.1918465521 | Program output: 172.1918465521
Correct output: -17.8149835933 | Program output: -21.8149835933
Correct output: -65.5829878959 | Program output: -69.5829878959
Correct output: 27.6366895788  | Program output: 23.6366895788 
Correct output: -19.5737445927 | Program output: -23.5737445927
Correct output: -146.6957573417 | Program output: -150.6957573417
Correct output: -93.4856677865 | Program output: -97.4856677865
Correct output: -62.4257652273 | Program output: -66.4257652273
Correct output: 8.389607373    | Program output: 4.389607373   
Correct output: -88.5634422156 | Program output: -92.5634422156
Correct output: 28.8889248865  | Program output: 24.8889248865 
Correct output: 15.595489344   | Program output: 11.595489344  
Correct output: -49.1003576661 | Program output: -53.1003576661
Correct output: -113.1474461804 | Program output: -117.1474461804
Correct output: -19.0779583365 | Program output: -23.0779583365
Correct output: -3.1068023861  | Program output: -7.1068023861 
Correct output: 52.1593783355  | Program output: 48.1593783355 
Correct output: 128.3998855036 | Program output: 124.3998855036
Correct output: 31.5586049792  | Program output: 27.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_yank} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction float_mult} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat in2 integer_dup_items integer_pop integer_dec integer_mult float_dec integer_fromfloat float_sub integer_div integer_pop integer_dec in1 integer_pop integer_dec in1 float_dec integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_rot integer_mult float_dec integer_sub integer_mult float_rot integer_mult float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult in1 float_rot float_dec float_dec float_rot tagged_97 integer_rot float_dec float_rot float_add float_yank integer_shove float_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float float_mult integer_shove float_rot)
Errors: [4.0 2 4.0 1 4.0 2 4.0 1 4.0 1 4.0 1 4.0 1 4.0 2 4.0 1 4.0 1 4.0 2 4.0 2 4.0 1 4.0 1 4.0 1 4.0 2 4.0 1 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2]
Total: 135.0
Mean: 2.7
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2065.8364987000027
Median total errors in population: 437.0
Error averages by case: (78.14572620000007 3.791 81.1054018999999 3.785 63.031345099999974 3.133 83.19039709999991 3.595 76.0993811000001 3.826 79.15101339999998 4.498 93.03385849999998 3.764 69.37606579999994 5.798 76.49744570000006 3.58 71.2042739000001 3.429 63.295293900000075 3.612 86.45679869999995 3.737 69.28113619999993 4.157 71.59736119999988 3.727 73.39515050000004 8.742 71.55525919999994 4.029 94.91099779999989 5.982 84.89409499999994 6.494 87.9242655 3.729 71.8620159000001 3.494 74.89892229999997 5.816 93.95080719999993 3.602 72.15066839999989 3.488 94.06751800000002 3.509 78.05330019999992 3.391)
Error minima by case: (4.0 1 4.0 1 0.0 0 2.9482 1 2.8637 1 4.0 1 4.0 1 0.815 1 3.417 1 3.6092 1 2.0 1 4.0 1 0.0 0 4.0 1 1.9457 1 4.0 1 2.357 1 4.0 1 4.0 1 0.0 0 0.922 1 0.4077 1 0.0 0 1.3999 1 0.3127 1)
Average genome size in population (length): 91.295
Average program size in population (points): 92.295
Average percent parens in population: 0.011
Minimum age in population: 72.92323499974805
Maximum age in population: 77.1589864574184
Average age in population: 75.2119326134153
Median age in population: 75.27771701382144
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.833
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.833
Total error diversity:				 0.178
Error (vector) diversity:			 0.188
Behavioral diversity:				 0.188
--- Run Statistics ---
Number of program evaluations used so far: 52000
Number of point (instruction) evaluations so far: 79605072
--- Timings ---
Current time: 1529615961543 milliseconds
Total Time:         188.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        65.1 seconds, 34.5%
Fitness Testing:     98.8 seconds, 52.4%
Report:              24.5 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 51
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 52
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 52
;;******************************
;; -*- Number IO problem report - generation 52
Test total error for best: 5580.0
Test mean error for best: 2.79000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -72.7252441384
Correct output: -151.3865608082 | Program output: -155.3865608082
Correct output: -39.5964789701 | Program output: -43.5964789701
Correct output: -165.6552500023 | Program output: -169.6552500023
Correct output: 115.8637099929 | Program output: 111.8637099929
Correct output: 106.2814426659 | Program output: 102.2814426659
Correct output: 176.1918465521 | Program output: 172.1918465521
Correct output: -17.8149835933 | Program output: -21.8149835933
Correct output: -65.5829878959 | Program output: -69.5829878959
Correct output: 27.6366895788  | Program output: 23.6366895788 
Correct output: -19.5737445927 | Program output: -23.5737445927
Correct output: -146.6957573417 | Program output: -150.6957573417
Correct output: -93.4856677865 | Program output: -97.4856677865
Correct output: -62.4257652273 | Program output: -66.4257652273
Correct output: 8.389607373    | Program output: 4.389607373   
Correct output: -88.5634422156 | Program output: -92.5634422156
Correct output: 28.8889248865  | Program output: 24.8889248865 
Correct output: 15.595489344   | Program output: 11.595489344  
Correct output: -49.1003576661 | Program output: -53.1003576661
Correct output: -113.1474461804 | Program output: -117.1474461804
Correct output: -19.0779583365 | Program output: -23.0779583365
Correct output: -3.1068023861  | Program output: -7.1068023861 
Correct output: 52.1593783355  | Program output: 48.1593783355 
Correct output: 128.3998855036 | Program output: 124.3998855036
Correct output: 31.5586049792  | Program output: 27.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_yank} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction float_mult} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat in2 integer_dup_items integer_pop integer_dec integer_mult float_dec integer_fromfloat float_sub integer_div integer_pop integer_dec in1 integer_pop integer_dec in1 float_dec integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_rot integer_mult float_dec integer_sub integer_mult float_rot integer_mult float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult in1 float_rot float_dec float_dec float_rot tagged_97 integer_rot float_dec float_rot float_add float_yank integer_shove float_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float float_mult integer_shove float_rot)
Errors: [4.0 2 4.0 1 4.0 2 4.0 1 4.0 1 4.0 1 4.0 1 4.0 2 4.0 1 4.0 1 4.0 2 4.0 2 4.0 1 4.0 1 4.0 1 4.0 2 4.0 1 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2 4.0 1 4.0 2]
Total: 135.0
Mean: 2.7
Genome size: 95
Size: 96
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2542.319601300002
Median total errors in population: 387.0
Error averages by case: (93.60144510000006 3.909 101.81404719999993 4.093 80.92073779999994 3.469 104.07485719999993 3.915 95.20962390000012 3.924 98.28492839999996 4.603 112.41677769999998 3.863 88.9909398999999 5.983 93.88829340000005 3.887 93.2869626000001 3.637 79.61689379999996 3.782 107.22256339999998 4.063 87.32127080000001 4.426 88.36017039999987 3.849 94.7263957999999 8.746 92.34425129999991 4.215 112.10025429999986 6.09 102.50629070000002 6.411 104.70689379999992 3.881 89.25092270000009 3.818 96.05071740000008 5.973 110.98528339999989 3.722 93.16427720000002 3.714 110.87246900000005 3.63 99.37933410000004 3.62)
Error minima by case: (4.0 1 1.7867 1 0.0 0 4.0 1 4.0 1 4.0 1 4.0 1 0.815 1 2.417 1 4.0 1 0.4263 1 1.0 1 0.0 0 4.0 1 4.0 1 0.5634 1 1.0 1 4.0 1 1.1004 1 0.0 0 0.078 1 0.544 1 1.0 1 0.6001 1 4.0 1)
Average genome size in population (length): 89.513
Average program size in population (points): 90.513
Average percent parens in population: 0.011
Minimum age in population: 74.05519687214084
Maximum age in population: 78.78643571666917
Average age in population: 76.65204366071895
Median age in population: 76.6881093471541
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 19
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 19
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.179
Error (vector) diversity:			 0.193
Behavioral diversity:				 0.194
--- Run Statistics ---
Number of program evaluations used so far: 53000
Number of point (instruction) evaluations so far: 81843047
--- Timings ---
Current time: 1529615965661 milliseconds
Total Time:         192.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        66.4 seconds, 34.4%
Fitness Testing:    101.1 seconds, 52.4%
Report:              25.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 52
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 53
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 53
;;******************************
;; -*- Number IO problem report - generation 53
Test total error for best: 4414.0
Test mean error for best: 2.20700
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -71.7252441384
Correct output: -151.3865608082 | Program output: -154.3865608082
Correct output: -39.5964789701 | Program output: -42.5964789701
Correct output: -165.6552500023 | Program output: -168.6552500023
Correct output: 115.8637099929 | Program output: 112.8637099929
Correct output: 106.2814426659 | Program output: 103.2814426659
Correct output: 176.1918465521 | Program output: 173.1918465521
Correct output: -17.8149835933 | Program output: -20.8149835933
Correct output: -65.5829878959 | Program output: -68.5829878959
Correct output: 27.6366895788  | Program output: 24.6366895788 
Correct output: -19.5737445927 | Program output: -22.5737445927
Correct output: -146.6957573417 | Program output: -149.6957573417
Correct output: -93.4856677865 | Program output: -96.4856677865
Correct output: -62.4257652273 | Program output: -65.4257652273
Correct output: 8.389607373    | Program output: 5.389607373   
Correct output: -88.5634422156 | Program output: -91.5634422156
Correct output: 28.8889248865  | Program output: 25.8889248865 
Correct output: 15.595489344   | Program output: 12.595489344  
Correct output: -49.1003576661 | Program output: -52.1003576661
Correct output: -113.1474461804 | Program output: -116.1474461804
Correct output: -19.0779583365 | Program output: -22.0779583365
Correct output: -3.1068023861  | Program output: -6.1068023861 
Correct output: 52.1593783355  | Program output: 49.1593783355 
Correct output: 128.3998855036 | Program output: 125.3998855036
Correct output: 31.5586049792  | Program output: 28.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_yank} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction float_yank} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction float_mult} {:instruction integer_shove} {:instruction float_rot})
Best program: (in1 integer_pop float_dec float_rot in2 integer_inc float_rot float_inc float_dec integer_swap float_rot float_rot float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult float_dec integer_shove float_dec integer_shove float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult in1 float_rot float_dec float_dec float_rot tagged_97 integer_rot float_dec float_rot float_add float_yank integer_shove float_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 float_yank float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float float_mult integer_shove float_rot)
Errors: [3.0 2 3.0 1 3.0 2 3.0 1 3.0 1 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 2 3.0 1 3.0 2 3.0 1 3.0 2 3.0 1 3.0 2]
Total: 109.0
Mean: 2.18
Genome size: 90
Size: 91
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2543.2993147000047
Median total errors in population: 387.0
Error averages by case: (95.44661620000008 4.049 101.28651019999992 4.166 81.6902598 3.477 103.47735539999985 3.935 95.88314430000015 3.962 98.55580349999993 4.694 112.9777764 4.027 85.2306182999999 6.079 91.86667910000006 3.867 92.33662810000014 3.634 79.02925419999995 3.883 106.10548439999994 4.117 88.75239280000004 4.502 89.41346549999986 3.963 92.60820829999997 8.328 91.43928949999993 4.06 113.30696359999979 6.196 101.93777760000006 6.446 107.0145396999999 4.025 91.23742770000014 3.886 94.45435480000006 6.032 113.17932029999983 3.807 93.50988109999996 3.792 110.90805619999996 3.662 99.39750770000003 3.665)
Error minima by case: (3.0 1 3.0 1 0.0 0 3.0 1 3.0 1 3.0 1 3.0 1 1.185 1 3.0 1 3.0 1 1.5737 1 3.0 1 0.0 0 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 3.0 1 0.0 0 0.078 1 0.1068 1 3.0 1 0.6001 1 3.0 1)
Average genome size in population (length): 90.105
Average program size in population (points): 91.105
Average percent parens in population: 0.011
Minimum age in population: 75.39601135341684
Maximum age in population: 80.46816240681468
Average age in population: 78.05112093571039
Median age in population: 78.0980788230603
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.823
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.823
Total error diversity:				 0.196
Error (vector) diversity:			 0.21
Behavioral diversity:				 0.211
--- Run Statistics ---
Number of program evaluations used so far: 54000
Number of point (instruction) evaluations so far: 84095847
--- Timings ---
Current time: 1529615969947 milliseconds
Total Time:         197.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        67.7 seconds, 34.3%
Fitness Testing:    103.6 seconds, 52.5%
Report:              25.8 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 53
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 54
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 54
;;******************************
;; -*- Number IO problem report - generation 54
Test total error for best: 4414.0
Test mean error for best: 2.20700
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -71.7252441384
Correct output: -151.3865608082 | Program output: -154.3865608082
Correct output: -39.5964789701 | Program output: -42.5964789701
Correct output: -165.6552500023 | Program output: -168.6552500023
Correct output: 115.8637099929 | Program output: 112.8637099929
Correct output: 106.2814426659 | Program output: 103.2814426659
Correct output: 176.1918465521 | Program output: 173.1918465521
Correct output: -17.8149835933 | Program output: -20.8149835933
Correct output: -65.5829878959 | Program output: -68.5829878959
Correct output: 27.6366895788  | Program output: 24.6366895788 
Correct output: -19.5737445927 | Program output: -22.5737445927
Correct output: -146.6957573417 | Program output: -149.6957573417
Correct output: -93.4856677865 | Program output: -96.4856677865
Correct output: -62.4257652273 | Program output: -65.4257652273
Correct output: 8.389607373    | Program output: 5.389607373   
Correct output: -88.5634422156 | Program output: -91.5634422156
Correct output: 28.8889248865  | Program output: 25.8889248865 
Correct output: 15.595489344   | Program output: 12.595489344  
Correct output: -49.1003576661 | Program output: -52.1003576661
Correct output: -113.1474461804 | Program output: -116.1474461804
Correct output: -19.0779583365 | Program output: -22.0779583365
Correct output: -3.1068023861  | Program output: -6.1068023861 
Correct output: 52.1593783355  | Program output: 49.1593783355 
Correct output: 128.3998855036 | Program output: 125.3998855036
Correct output: 31.5586049792  | Program output: 28.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_yank} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction float_mult} {:instruction float_rot} {:instruction float_rot})
Best program: (in1 integer_pop float_dec float_rot in2 integer_inc float_rot float_inc float_dec integer_swap float_rot float_rot float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_rot integer_mult float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult in1 float_rot float_dec float_dec float_rot tagged_97 integer_rot float_dec float_rot float_add float_yank integer_shove float_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float float_mult float_rot float_rot)
Errors: [3.0 2 3.0 1 3.0 2 3.0 1 3.0 1 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 1 3.0 1 3.0 2 3.0 1 3.0 1 3.0 2 3.0 1 3.0 2 3.0 1 3.0 2 3.0 1 3.0 2]
Total: 109.0
Mean: 2.18
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2764.696723200004
Median total errors in population: 336.0
Error averages by case: (106.70495070000005 3.972 108.23259579999988 3.982 90.99361929999996 3.494 110.2766877999999 3.868 105.40200450000013 3.975 107.44003649999998 4.592 120.6675782 3.975 97.32380219999988 5.862 102.71272790000008 3.874 101.52851060000013 3.672 88.98970169999991 3.82 112.9776986 4.071 99.18488660000004 4.28 100.66221469999988 3.827 102.42450279999986 7.424 99.31906739999992 3.892 119.9728148999998 5.824 110.64027400000008 6.067 114.99430829999991 3.944 101.43806900000008 3.773 103.69129290000015 5.812 119.48025899999976 3.67 102.92755620000007 3.88 120.08717589999998 3.659 107.62938770000012 3.786)
Error minima by case: (3.0 1 3.0 1 0.0 0 3.0 1 3.0 1 3.0 1 3.0 1 1.185 1 1.417 1 3.0 1 2.0 1 3.0 1 0.0 0 0.0 0 3.0 1 0.5634 1 3.0 1 0.8469 1 3.0 1 0.0 0 3.0 1 0.7503 1 3.0 1 3.0 1 3.0 1)
Average genome size in population (length): 89.951
Average program size in population (points): 90.951
Average percent parens in population: 0.011
Minimum age in population: 77.03173490302775
Maximum age in population: 81.34173256888528
Average age in population: 79.44218234134146
Median age in population: 79.51977338024372
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.817
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.817
Total error diversity:				 0.199
Error (vector) diversity:			 0.214
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 55000
Number of point (instruction) evaluations so far: 86344797
--- Timings ---
Current time: 1529615973967 milliseconds
Total Time:         201.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        68.8 seconds, 34.2%
Fitness Testing:    105.9 seconds, 52.7%
Report:              26.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 54
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 55
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 55
;;******************************
;; -*- Number IO problem report - generation 55
Test total error for best: 3287.0
Test mean error for best: 1.64350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -70.7252441384
Correct output: -151.3865608082 | Program output: -153.3865608082
Correct output: -39.5964789701 | Program output: -41.5964789701
Correct output: -165.6552500023 | Program output: -167.6552500023
Correct output: 115.8637099929 | Program output: 113.8637099929
Correct output: 106.2814426659 | Program output: 104.2814426659
Correct output: 176.1918465521 | Program output: 174.1918465521
Correct output: -17.8149835933 | Program output: -19.8149835933
Correct output: -65.5829878959 | Program output: -67.5829878959
Correct output: 27.6366895788  | Program output: 25.6366895788 
Correct output: -19.5737445927 | Program output: -21.5737445927
Correct output: -146.6957573417 | Program output: -148.6957573417
Correct output: -93.4856677865 | Program output: -95.4856677865
Correct output: -62.4257652273 | Program output: -64.4257652273
Correct output: 8.389607373    | Program output: 6.389607373   
Correct output: -88.5634422156 | Program output: -90.5634422156
Correct output: 28.8889248865  | Program output: 26.8889248865 
Correct output: 15.595489344   | Program output: 13.595489344  
Correct output: -49.1003576661 | Program output: -51.1003576661
Correct output: -113.1474461804 | Program output: -115.1474461804
Correct output: -19.0779583365 | Program output: -21.0779583365
Correct output: -3.1068023861  | Program output: -5.1068023861 
Correct output: 52.1593783355  | Program output: 50.1593783355 
Correct output: 128.3998855036 | Program output: 126.3998855036
Correct output: 31.5586049792  | Program output: 29.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_yank} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_max} {:instruction print_float} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_stackdepth})
Best program: (in1 integer_pop float_dec float_rot in2 integer_inc float_rot float_inc float_dec integer_swap float_rot float_rot float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_rot integer_mult float_rot integer_mult integer_mult float_dec float_rot float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec integer_shove integer_mult integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult in1 float_rot float_dec float_dec float_rot tagged_97 integer_rot float_dec float_rot float_add float_yank integer_shove float_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult integer_max print_float float_mult integer_shove integer_stackdepth)
Errors: [2.0 2 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 2 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 2]
Total: 82.0
Mean: 1.64
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2802.284135800004
Median total errors in population: 287.0
Error averages by case: (104.45969960000006 4.289 108.89133939999991 4.243 90.96741119999996 3.906 110.6507761999999 4.147 107.32624930000016 4.073 108.08868949999992 4.553 121.36831799999999 4.06 99.98727579999989 6.078 105.53761160000012 4.234 106.83089450000018 3.871 88.80869039999985 4.147 113.37992329999996 4.506 99.63068270000016 4.429 98.57860229999983 3.996 105.86708879999978 5.534 100.94763099999992 4.345 120.84392149999972 5.816 110.30225290000014 6.068 116.06544979999978 4.244 102.49966860000018 4.053 106.34781560000019 5.996 120.4779193999997 3.831 107.77910450000016 4.28 120.59307549999996 3.68 113.49104440000015 4.184)
Error minima by case: (2.0 1 0.3866 1 0.0 0 1.3447 1 2.0 1 2.0 1 2.0 1 0.815 1 1.417 1 2.0 1 1.4263 1 2.0 1 0.0 0 2.0 1 1.6104 1 2.0 1 2.0 1 2.0 1 2.0 1 0.0 0 2.0 1 0.6872 1 2.0 1 0.3999 1 0.4414 1)
Average genome size in population (length): 88.026
Average program size in population (points): 89.026
Average percent parens in population: 0.011
Minimum age in population: 78.11002683330653
Maximum age in population: 83.04625588910818
Average age in population: 80.91871210809084
Median age in population: 80.95338925333084
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 22
Genome diversity (% unique Plush genomes):	 0.822
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 22
Syntactic diversity (% unique Push programs):	 0.822
Total error diversity:				 0.229
Error (vector) diversity:			 0.241
Behavioral diversity:				 0.242
--- Run Statistics ---
Number of program evaluations used so far: 56000
Number of point (instruction) evaluations so far: 88545822
--- Timings ---
Current time: 1529615978107 milliseconds
Total Time:         205.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        70.0 seconds, 34.1%
Fitness Testing:    108.2 seconds, 52.7%
Report:              26.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 55
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 56
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 56
;;******************************
;; -*- Number IO problem report - generation 56
Test total error for best: 3287.0
Test mean error for best: 1.64350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -70.7252441384
Correct output: -151.3865608082 | Program output: -153.3865608082
Correct output: -39.5964789701 | Program output: -41.5964789701
Correct output: -165.6552500023 | Program output: -167.6552500023
Correct output: 115.8637099929 | Program output: 113.8637099929
Correct output: 106.2814426659 | Program output: 104.2814426659
Correct output: 176.1918465521 | Program output: 174.1918465521
Correct output: -17.8149835933 | Program output: -19.8149835933
Correct output: -65.5829878959 | Program output: -67.5829878959
Correct output: 27.6366895788  | Program output: 25.6366895788 
Correct output: -19.5737445927 | Program output: -21.5737445927
Correct output: -146.6957573417 | Program output: -148.6957573417
Correct output: -93.4856677865 | Program output: -95.4856677865
Correct output: -62.4257652273 | Program output: -64.4257652273
Correct output: 8.389607373    | Program output: 6.389607373   
Correct output: -88.5634422156 | Program output: -90.5634422156
Correct output: 28.8889248865  | Program output: 26.8889248865 
Correct output: 15.595489344   | Program output: 13.595489344  
Correct output: -49.1003576661 | Program output: -51.1003576661
Correct output: -113.1474461804 | Program output: -115.1474461804
Correct output: -19.0779583365 | Program output: -21.0779583365
Correct output: -3.1068023861  | Program output: -5.1068023861 
Correct output: 52.1593783355  | Program output: 50.1593783355 
Correct output: 128.3998855036 | Program output: 126.3998855036
Correct output: 31.5586049792  | Program output: 29.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_add} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction integer_rot} {:instruction float_dec} {:instruction float_rot} {:instruction float_add} {:instruction float_yank} {:instruction integer_shove} {:instruction float_rot} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_inc} {:instruction in1} {:instruction integer_rot} {:instruction float_yank} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction print_float} {:instruction float_mult} {:instruction integer_shove} {:instruction float_rot})
Best program: (integer_swap integer_fromfloat in2 integer_dup_items integer_pop integer_dec in1 float_dec integer_fromfloat float_sub integer_dup_items integer_pop integer_dec in1 integer_pop integer_dec in1 float_dec integer_dup_items integer_pop integer_dec in1 float_dec float_dec float_rot in2 float_dec float_rot float_rot integer_mult float_dec integer_add integer_mult float_rot integer_mult float_rot float_dec float_frominteger float_dec float_rot integer_mult float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult in1 float_rot float_dec float_dec float_rot tagged_97 integer_rot float_dec float_rot float_add float_yank integer_shove float_rot float_dec float_rot integer_mult float_dec float_rot integer_mult float_inc in1 integer_rot float_yank float_dec float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec print_float float_mult integer_shove float_rot)
Errors: [2.0 2 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 1 2.0 2 2.0 1 2.0 1 2.0 2 2.0 1 2.0 2 2.0 1 2.0 1 2.0 1 2.0 2]
Total: 82.0
Mean: 1.64
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2646.3738372000034
Median total errors in population: 246.0
Error averages by case: (97.01176860000008 4.405 99.95177919999985 4.258 78.62740639999998 4.022 101.59903189999984 4.011 104.50095080000014 3.849 104.93989519999992 4.192 118.40582429999998 3.949 94.8683226999998 6.268 101.4705501000001 4.23 101.72553460000026 3.837 76.45538769999996 4.177 105.45419989999992 4.565 88.96080060000007 4.236 88.46722789999981 3.91 101.27097929999984 4.05 92.9163240999999 4.461 117.99376889999981 5.774 107.39074130000007 5.801 112.56126649999989 4.387 92.20838360000019 4.043 102.61740970000018 6.088 117.16058669999977 3.744 101.21490710000006 4.366 119.32070999999999 3.596 108.7710801000001 4.29)
Error minima by case: (2.0 1 1.0 1 0.0 0 2.0 1 2.0 1 1.7186 1 2.0 1 0.815 1 2.0 1 2.0 1 1.0 1 2.0 1 0.0 0 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 2.0 1 0.0 0 2.0 1 0.0273 1 0.1594 1 2.0 1 2.0 1)
Average genome size in population (length): 88.832
Average program size in population (points): 89.832
Average percent parens in population: 0.011
Minimum age in population: 79.82906011256686
Maximum age in population: 84.32056596854572
Average age in population: 82.37777967463627
Median age in population: 82.36785053457076
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 18
Genome diversity (% unique Plush genomes):	 0.837
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 18
Syntactic diversity (% unique Push programs):	 0.837
Total error diversity:				 0.213
Error (vector) diversity:			 0.227
Behavioral diversity:				 0.227
--- Run Statistics ---
Number of program evaluations used so far: 57000
Number of point (instruction) evaluations so far: 90766972
--- Timings ---
Current time: 1529615982600 milliseconds
Total Time:         209.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        71.3 seconds, 34.0%
Fitness Testing:    110.7 seconds, 52.8%
Report:              27.5 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 56
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 57
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 57
;;******************************
;; -*- Number IO problem report - generation 57
Test total error for best: 2113.0
Test mean error for best: 1.05650
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -69.7252441384
Correct output: -151.3865608082 | Program output: -152.3865608082
Correct output: -39.5964789701 | Program output: -40.5964789701
Correct output: -165.6552500023 | Program output: -166.6552500023
Correct output: 115.8637099929 | Program output: 114.8637099929
Correct output: 106.2814426659 | Program output: 105.2814426659
Correct output: 176.1918465521 | Program output: 175.1918465521
Correct output: -17.8149835933 | Program output: -18.8149835933
Correct output: -65.5829878959 | Program output: -66.5829878959
Correct output: 27.6366895788  | Program output: 26.6366895788 
Correct output: -19.5737445927 | Program output: -20.5737445927
Correct output: -146.6957573417 | Program output: -147.6957573417
Correct output: -93.4856677865 | Program output: -94.4856677865
Correct output: -62.4257652273 | Program output: -63.4257652273
Correct output: 8.389607373    | Program output: 7.389607373   
Correct output: -88.5634422156 | Program output: -89.5634422156
Correct output: 28.8889248865  | Program output: 27.8889248865 
Correct output: 15.595489344   | Program output: 14.595489344  
Correct output: -49.1003576661 | Program output: -50.1003576661
Correct output: -113.1474461804 | Program output: -114.1474461804
Correct output: -19.0779583365 | Program output: -20.0779583365
Correct output: -3.1068023861  | Program output: -4.1068023861 
Correct output: 52.1593783355  | Program output: 51.1593783355 
Correct output: 128.3998855036 | Program output: 127.3998855036
Correct output: 31.5586049792  | Program output: 30.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction integer_rot} {:instruction float_yank} {:instruction float_rot} {:instruction float_add} {:instruction float_yank} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_max} {:instruction print_float} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_stackdepth})
Best program: (integer_swap integer_fromfloat in2 integer_dup_items integer_pop integer_dec integer_mult float_dec integer_fromfloat float_sub integer_div integer_pop integer_dec in1 integer_pop integer_dec in1 float_dec integer_dup_items integer_pop integer_dec integer_sub float_dec float_dec float_rot in2 float_dec float_rot float_rot integer_mult float_dec integer_sub integer_mult float_rot integer_mult float_rot integer_mult integer_mult float_dec float_rot integer_add float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult in1 float_rot float_dec float_dec float_rot tagged_97 integer_rot float_yank float_rot float_add float_yank integer_shove float_rot integer_div float_rot integer_mult float_dec integer_mult float_dec float_rot integer_mult integer_max print_float float_mult integer_shove integer_stackdepth)
Errors: [1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 54.0
Mean: 1.08
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2449.4522171000012
Median total errors in population: 135.0
Error averages by case: (90.12913180000011 4.343 95.36529539999988 4.034 72.85108729999996 3.973 96.69004119999985 3.685 93.69260120000018 3.584 93.07239059999988 3.896 104.26069709999997 3.732 87.25694769999983 5.715 90.52775440000012 3.942 93.59044670000024 3.578 69.37297040000003 4.103 100.05737069999991 4.215 83.34129959999997 3.982 80.31912139999986 3.726 94.11105949999993 3.535 89.62936039999988 4.382 111.28078569999981 5.137 102.08012220000003 5.053 107.32762959999994 4.276 86.47402180000017 3.831 93.67049880000012 5.575 111.59513909999984 3.595 93.82236249999995 4.193 105.15266999999996 3.407 100.123412 4.166)
Error minima by case: (1.0 1 1.0 1 0.0 0 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.583 1 0.3633 1 0.0 0 1.0 1 0.0 0 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.1004 1 0.0 0 1.0 1 0.6872 1 0.49 1 1.0 1 1.0 1)
Average genome size in population (length): 89.139
Average program size in population (points): 90.139
Average percent parens in population: 0.011
Minimum age in population: 81.65775349756505
Maximum age in population: 85.77049046843096
Average age in population: 83.83867038839936
Median age in population: 83.86237135112479
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.198
Error (vector) diversity:			 0.213
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 58000
Number of point (instruction) evaluations so far: 92995697
--- Timings ---
Current time: 1529615986679 milliseconds
Total Time:         213.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        72.5 seconds, 33.9%
Fitness Testing:    113.1 seconds, 52.9%
Report:              28.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 57
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 58
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 58
;;******************************
;; -*- Number IO problem report - generation 58
Test total error for best: 2113.0
Test mean error for best: 1.05650
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -69.7252441384
Correct output: -151.3865608082 | Program output: -152.3865608082
Correct output: -39.5964789701 | Program output: -40.5964789701
Correct output: -165.6552500023 | Program output: -166.6552500023
Correct output: 115.8637099929 | Program output: 114.8637099929
Correct output: 106.2814426659 | Program output: 105.2814426659
Correct output: 176.1918465521 | Program output: 175.1918465521
Correct output: -17.8149835933 | Program output: -18.8149835933
Correct output: -65.5829878959 | Program output: -66.5829878959
Correct output: 27.6366895788  | Program output: 26.6366895788 
Correct output: -19.5737445927 | Program output: -20.5737445927
Correct output: -146.6957573417 | Program output: -147.6957573417
Correct output: -93.4856677865 | Program output: -94.4856677865
Correct output: -62.4257652273 | Program output: -63.4257652273
Correct output: 8.389607373    | Program output: 7.389607373   
Correct output: -88.5634422156 | Program output: -89.5634422156
Correct output: 28.8889248865  | Program output: 27.8889248865 
Correct output: 15.595489344   | Program output: 14.595489344  
Correct output: -49.1003576661 | Program output: -50.1003576661
Correct output: -113.1474461804 | Program output: -114.1474461804
Correct output: -19.0779583365 | Program output: -20.0779583365
Correct output: -3.1068023861  | Program output: -4.1068023861 
Correct output: 52.1593783355  | Program output: 51.1593783355 
Correct output: 128.3998855036 | Program output: 127.3998855036
Correct output: 31.5586049792  | Program output: 30.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_swap} {:instruction integer_fromfloat} {:instruction in2} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_fromfloat} {:instruction float_sub} {:instruction integer_div} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction integer_pop} {:instruction integer_dec} {:instruction in1} {:instruction float_dec} {:instruction integer_dup_items} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_sub} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction float_dec} {:instruction float_rot} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_sub} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_add} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction integer_rot} {:instruction float_yank} {:instruction float_rot} {:instruction float_add} {:instruction float_yank} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_max} {:instruction print_float} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_stackdepth})
Best program: (integer_swap integer_fromfloat in2 integer_dup_items integer_pop integer_dec integer_mult float_dec integer_fromfloat float_sub integer_div integer_pop integer_dec in1 integer_pop integer_dec in1 float_dec integer_dup_items integer_pop integer_dec integer_sub float_dec float_dec float_rot in2 float_dec float_rot float_rot integer_mult float_dec integer_sub integer_mult float_rot integer_mult float_rot integer_mult integer_mult float_dec float_rot integer_add float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult in1 float_rot float_dec float_dec float_rot tagged_97 integer_rot float_yank float_rot float_add float_yank integer_shove float_rot integer_div float_rot integer_mult float_dec integer_mult float_dec float_rot integer_mult integer_max print_float float_mult integer_shove integer_stackdepth)
Errors: [1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 54.0
Mean: 1.08
Genome size: 86
Size: 87
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2292.955349600002
Median total errors in population: 135.0
Error averages by case: (83.50166270000008 4.334 89.20348729999984 4.131 65.87860119999995 3.993 90.70712989999984 3.718 86.67844690000021 3.568 86.20103859999989 3.859 98.75221789999999 3.733 81.86422719999976 5.828 87.34614630000016 4.117 87.29282720000026 3.651 61.77492630000009 4.106 95.2006169999999 4.134 77.02552589999998 4.107 73.69969249999977 3.802 87.43432719999986 3.591 82.37664889999988 4.431 104.08064899999975 5.38 94.34029590000007 5.214 99.41481289999992 4.307 80.4996417000002 3.935 88.3052128000002 5.758 104.12622399999977 3.637 87.80467330000003 4.154 99.61638089999998 3.377 94.72793610000004 4.237)
Error minima by case: (1.0 1 1.0 1 0.0 0 1.0 1 1.0 1 1.0 1 1.0 1 0.185 1 1.0 1 0.6367 1 0.0 0 1.0 1 0.0 0 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 0.8996 1 0.0 0 0.1597 1 0.0402 1 1.0 1 1.0 1 1.0 1)
Average genome size in population (length): 87.294
Average program size in population (points): 88.294
Average percent parens in population: 0.011
Minimum age in population: 83.01551370284123
Maximum age in population: 87.06762700435641
Average age in population: 85.33262793419136
Median age in population: 85.3529196871598
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.204
Error (vector) diversity:			 0.218
Behavioral diversity:				 0.219
--- Run Statistics ---
Number of program evaluations used so far: 59000
Number of point (instruction) evaluations so far: 95178222
--- Timings ---
Current time: 1529615990703 milliseconds
Total Time:         217.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        73.7 seconds, 33.8%
Fitness Testing:    115.4 seconds, 53.0%
Report:              28.7 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 58
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 59
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 59
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -68.7252441384
Correct output: -151.3865608082 | Program output: -151.3865608082
Correct output: -39.5964789701 | Program output: -39.5964789701
Correct output: -165.6552500023 | Program output: -165.6552500023
Correct output: 115.8637099929 | Program output: 115.8637099929
Correct output: 106.2814426659 | Program output: 106.2814426659
Correct output: 176.1918465521 | Program output: 176.1918465521
Correct output: -17.8149835933 | Program output: -17.8149835933
Correct output: -65.5829878959 | Program output: -65.5829878959
Correct output: 27.6366895788  | Program output: 27.6366895788 
Correct output: -19.5737445927 | Program output: -19.5737445927
Correct output: -146.6957573417 | Program output: -146.6957573417
Correct output: -93.4856677865 | Program output: -93.4856677865
Correct output: -62.4257652273 | Program output: -62.4257652273
Correct output: 8.389607373    | Program output: 8.389607373   
Correct output: -88.5634422156 | Program output: -88.5634422156
Correct output: 28.8889248865  | Program output: 28.8889248865 
Correct output: 15.595489344   | Program output: 15.595489344  
Correct output: -49.1003576661 | Program output: -49.1003576661
Correct output: -113.1474461804 | Program output: -113.1474461804
Correct output: -19.0779583365 | Program output: -19.0779583365
Correct output: -3.1068023861  | Program output: -3.1068023861 
Correct output: 52.1593783355  | Program output: 52.1593783355 
Correct output: 128.3998855036 | Program output: 128.3998855036
Correct output: 31.5586049792  | Program output: 31.5586049792 
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction in1} {:instruction integer_pop} {:instruction float_dec} {:instruction float_rot} {:instruction in2} {:instruction integer_inc} {:instruction float_rot} {:instruction float_inc} {:instruction float_dec} {:instruction integer_swap} {:instruction float_rot} {:instruction float_rot} {:instruction float_dec} {:instruction float_dup} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction integer_shove} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction float_dec} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_shove} {:instruction integer_mult} {:instruction integer_shove} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_mult} {:instruction in1} {:instruction float_rot} {:instruction float_dec} {:instruction float_dec} {:instruction float_rot} {:instruction tagged_97} {:instruction integer_rot} {:instruction float_yank} {:instruction float_rot} {:instruction float_add} {:instruction float_yank} {:instruction integer_shove} {:instruction float_rot} {:instruction integer_div} {:instruction float_rot} {:instruction integer_mult} {:instruction float_dec} {:instruction integer_mult} {:instruction float_dec} {:instruction float_rot} {:instruction integer_mult} {:instruction integer_max} {:instruction print_float} {:instruction float_mult} {:instruction integer_shove} {:instruction integer_stackdepth})
Best program: (in1 integer_pop float_dec float_rot in2 integer_inc float_rot float_inc float_dec integer_swap float_rot float_rot float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult float_dec integer_shove float_dec integer_shove float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_rot integer_mult float_dec integer_mult integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult in1 float_rot float_dec float_dec float_rot tagged_97 integer_rot float_yank float_rot float_add float_yank integer_shove float_rot integer_div float_rot integer_mult float_dec integer_mult float_dec float_rot integer_mult integer_max print_float float_mult integer_shove integer_stackdepth)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 82
Size: 83
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2361.7118424000005
Median total errors in population: 109.0
Error averages by case: (84.74060060000012 4.214 89.76881569999986 4.054 64.04900309999995 3.94 90.85324009999987 3.619 91.7960446000002 3.458 90.92307549999975 3.802 102.19765099999995 3.633 85.13278049999981 5.495 87.71475020000017 4.046 92.69112370000026 3.563 59.8394600000001 3.994 95.92741889999985 3.959 76.45014029999994 4.048 73.15740399999979 3.702 92.86650639999984 3.406 85.10953019999991 4.333 110.36868689999977 5.295 99.93299710000004 5.096 106.00905739999993 4.245 79.68270880000023 3.881 93.3495629000002 5.626 109.88496989999973 3.588 91.30468450000004 3.854 105.83700009999998 3.297 99.87763000000007 4.099)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 86.535
Average program size in population (points): 87.535
Average percent parens in population: 0.011
Minimum age in population: 84.75662544802768
Maximum age in population: 88.61025811246758
Average age in population: 86.82057104857779
Median age in population: 86.85435908983845
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.86
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.86
Total error diversity:				 0.179
Error (vector) diversity:			 0.189
Behavioral diversity:				 0.19
--- Run Statistics ---
Number of program evaluations used so far: 60000
Number of point (instruction) evaluations so far: 97341722
--- Timings ---
Current time: 1529615995101 milliseconds
Total Time:         222.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        74.9 seconds, 33.7%
Fitness Testing:    118.1 seconds, 53.1%
Report:              29.2 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 59
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 59
Successful program: (in1 integer_pop float_dec float_rot in2 integer_inc float_rot float_inc float_dec integer_swap float_rot float_rot float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult float_dec integer_shove float_dec integer_shove float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_rot integer_mult float_dec integer_mult integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult in1 float_rot float_dec float_dec float_rot tagged_97 integer_rot float_yank float_rot float_add float_yank integer_shove float_rot integer_div float_rot integer_mult float_dec integer_mult float_dec float_rot integer_mult integer_max print_float float_mult integer_shove integer_stackdepth)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 83


Auto-simplifying with starting size: 83
step: 0
program: (in1 integer_pop float_dec float_rot in2 integer_inc float_rot float_inc float_dec integer_swap float_rot float_rot float_dec float_dup float_dec integer_shove float_dec float_rot integer_mult float_dec float_rot integer_mult float_dec integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult float_dec integer_shove float_dec integer_shove float_dec float_dec float_rot float_dec float_frominteger float_dec float_rot integer_mult float_rot integer_mult float_dec integer_mult integer_mult float_dec integer_shove integer_mult integer_shove float_dec float_rot integer_mult integer_mult in1 float_rot float_dec float_dec float_rot tagged_97 integer_rot float_yank float_rot float_add float_yank integer_shove float_rot integer_div float_rot integer_mult float_dec integer_mult float_dec float_rot integer_mult integer_max print_float float_mult integer_shove integer_stackdepth)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 83

step: 500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in1 in2 float_frominteger float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 59
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -68.7252441384 | Program output: -68.7252441384
Correct output: -151.3865608082 | Program output: -151.3865608082
Correct output: -39.5964789701 | Program output: -39.5964789701
Correct output: -165.6552500023 | Program output: -165.6552500023
Correct output: 115.8637099929 | Program output: 115.8637099929
Correct output: 106.2814426659 | Program output: 106.2814426659
Correct output: 176.1918465521 | Program output: 176.1918465521
Correct output: -17.8149835933 | Program output: -17.8149835933
Correct output: -65.5829878959 | Program output: -65.5829878959
Correct output: 27.6366895788  | Program output: 27.6366895788 
Correct output: -19.5737445927 | Program output: -19.5737445927
Correct output: -146.6957573417 | Program output: -146.6957573417
Correct output: -93.4856677865 | Program output: -93.4856677865
Correct output: -62.4257652273 | Program output: -62.4257652273
Correct output: 8.389607373    | Program output: 8.389607373   
Correct output: -88.5634422156 | Program output: -88.5634422156
Correct output: 28.8889248865  | Program output: 28.8889248865 
Correct output: 15.595489344   | Program output: 15.595489344  
Correct output: -49.1003576661 | Program output: -49.1003576661
Correct output: -113.1474461804 | Program output: -113.1474461804
Correct output: -19.0779583365 | Program output: -19.0779583365
Correct output: -3.1068023861  | Program output: -3.1068023861 
Correct output: 52.1593783355  | Program output: 52.1593783355 
Correct output: 128.3998855036 | Program output: 128.3998855036
Correct output: 31.5586049792  | Program output: 31.5586049792 
;;******************************
