Command line args: clojush.problems.software.number-io :parent-selection :tournament :print-timings true
######################################
Parameters set at command line or in problem file argmap; may or may not be default:
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
epigenetic-markers = []
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-points = 800
parent-selection = :tournament
population-size = 1000
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
report-simplifications = 0
uniform-mutation-rate = 0.01
######################################
Train and test cases:
Train Case:   0 | Input/Output: [[-81.53090109731964 -51] -132.53090109731966]
Train Case:   1 | Input/Output: [[-15.892428812031994 -96] -111.892428812032]
Train Case:   2 | Input/Output: [[27.49158015724727 -78] -50.50841984275273]
Train Case:   3 | Input/Output: [[74.40910858783585 -31] 43.409108587835846]
Train Case:   4 | Input/Output: [[90.78284509173542 45] 135.78284509173542]
Train Case:   5 | Input/Output: [[23.9950954855706 -60] -36.0049045144294]
Train Case:   6 | Input/Output: [[5.108733020075491 -60] -54.89126697992451]
Train Case:   7 | Input/Output: [[-5.4024240283466725 -96] -101.40242402834667]
Train Case:   8 | Input/Output: [[-28.844040149247817 -8] -36.84404014924782]
Train Case:   9 | Input/Output: [[-5.0101752265618416 -27] -32.01017522656184]
Train Case:  10 | Input/Output: [[-0.9280763402400396 -30] -30.92807634024004]
Train Case:  11 | Input/Output: [[11.807769042613273 -19] -7.192230957386727]
Train Case:  12 | Input/Output: [[53.24400778838333 -44] 9.244007788383328]
Train Case:  13 | Input/Output: [[24.398686706027434 -100] -75.60131329397257]
Train Case:  14 | Input/Output: [[40.70633236727056 77] 117.70633236727056]
Train Case:  15 | Input/Output: [[66.20646760547288 70] 136.20646760547288]
Train Case:  16 | Input/Output: [[-28.57380295472545 -78] -106.57380295472545]
Train Case:  17 | Input/Output: [[96.17993508596851 39] 135.1799350859685]
Train Case:  18 | Input/Output: [[23.822992604263945 56] 79.82299260426394]
Train Case:  19 | Input/Output: [[29.951437669119684 91] 120.95143766911968]
Train Case:  20 | Input/Output: [[4.241110666317709 -21] -16.75888933368229]
Train Case:  21 | Input/Output: [[6.985637313666459 -8] -1.0143626863335413]
Train Case:  22 | Input/Output: [[23.286185315781267 59] 82.28618531578127]
Train Case:  23 | Input/Output: [[30.719259931055632 -28] 2.719259931055632]
Train Case:  24 | Input/Output: [[-56.05732980106619 -39] -95.05732980106619]
Test Case:   0 | Input/Output: [[-32.84150836741841 84] 51.15849163258159]
Test Case:   1 | Input/Output: [[83.46369533127398 29] 112.46369533127398]
Test Case:   2 | Input/Output: [[25.72163971045849 -35] -9.27836028954151]
Test Case:   3 | Input/Output: [[-5.317694837873546 7] 1.682305162126454]
Test Case:   4 | Input/Output: [[7.2249445235593015 28] 35.2249445235593]
Test Case:   5 | Input/Output: [[-93.50772107473004 48] -45.50772107473004]
Test Case:   6 | Input/Output: [[-97.95673268118372 25] -72.95673268118372]
Test Case:   7 | Input/Output: [[11.959945172144828 39] 50.95994517214483]
Test Case:   8 | Input/Output: [[-13.532486857369008 -7] -20.53248685736901]
Test Case:   9 | Input/Output: [[81.00721333379627 82] 163.00721333379627]
Test Case:  10 | Input/Output: [[-61.74528151493113 -56] -117.74528151493112]
Test Case:  11 | Input/Output: [[15.016741933257507 -18] -2.9832580667424935]
Test Case:  12 | Input/Output: [[-80.627781052723 21] -59.627781052722995]
Test Case:  13 | Input/Output: [[-4.604214939066125 33] 28.395785060933875]
Test Case:  14 | Input/Output: [[35.51809582666675 28] 63.51809582666675]
Test Case:  15 | Input/Output: [[-37.71596558976318 -76] -113.71596558976319]
Test Case:  16 | Input/Output: [[2.7340090248821696 51] 53.73400902488217]
Test Case:  17 | Input/Output: [[-36.44591795553793 72] 35.55408204446207]
Test Case:  18 | Input/Output: [[19.320550585364288 -25] -5.679449414635712]
Test Case:  19 | Input/Output: [[85.71790566990501 88] 173.717905669905]
Test Case:  20 | Input/Output: [[53.394239986104594 36] 89.3942399861046]
Test Case:  21 | Input/Output: [[-1.2399485296546828 25] 23.760051470345317]
Test Case:  22 | Input/Output: [[-74.88004332098528 61] -13.88004332098528]
Test Case:  23 | Input/Output: [[-33.73334025413082 -31] -64.73334025413082]
Test Case:  24 | Input/Output: [[30.878707162258763 -41] -10.121292837741237]
Test Case:  25 | Input/Output: [[-2.0140868327260364 91] 88.98591316727396]
Test Case:  26 | Input/Output: [[-56.5632996499803 -41] -97.56329964998031]
Test Case:  27 | Input/Output: [[-72.95930852347624 -90] -162.95930852347624]
Test Case:  28 | Input/Output: [[-3.779728125304487 -65] -68.77972812530449]
Test Case:  29 | Input/Output: [[51.5787038626342 -14] 37.5787038626342]
Test Case:  30 | Input/Output: [[-59.69511214925154 99] 39.30488785074846]
Test Case:  31 | Input/Output: [[-55.42034619336824 -66] -121.42034619336823]
Test Case:  32 | Input/Output: [[31.316987420629317 21] 52.31698742062932]
Test Case:  33 | Input/Output: [[93.91650300374496 54] 147.91650300374496]
Test Case:  34 | Input/Output: [[25.72767186010907 34] 59.72767186010907]
Test Case:  35 | Input/Output: [[-25.45552581901606 94] 68.54447418098394]
Test Case:  36 | Input/Output: [[3.426312181042107 14] 17.426312181042107]
Test Case:  37 | Input/Output: [[86.75026951292912 13] 99.75026951292912]
Test Case:  38 | Input/Output: [[-42.61352852128704 48] 5.386471478712963]
Test Case:  39 | Input/Output: [[-36.79340760791834 -38] -74.79340760791834]
Test Case:  40 | Input/Output: [[-64.1560776156193 93] 28.843922384380704]
Test Case:  41 | Input/Output: [[-85.83582210327903 -34] -119.83582210327903]
Test Case:  42 | Input/Output: [[14.585549307902482 -42] -27.414450692097518]
Test Case:  43 | Input/Output: [[-57.335119234942255 -76] -133.33511923494225]
Test Case:  44 | Input/Output: [[-22.18129918895579 -30] -52.18129918895579]
Test Case:  45 | Input/Output: [[-66.53308389583172 99] 32.46691610416828]
Test Case:  46 | Input/Output: [[-62.91066253352815 9] -53.91066253352815]
Test Case:  47 | Input/Output: [[-71.04577080751761 -98] -169.0457708075176]
Test Case:  48 | Input/Output: [[3.7646218132783957 57] 60.764621813278396]
Test Case:  49 | Input/Output: [[-38.43496569616327 95] 56.56503430383673]
Test Case:  50 | Input/Output: [[-68.06185966549367 -25] -93.06185966549367]
Test Case:  51 | Input/Output: [[-12.736830627120781 -64] -76.73683062712078]
Test Case:  52 | Input/Output: [[12.898782832521633 55] 67.89878283252163]
Test Case:  53 | Input/Output: [[39.70903986168531 -13] 26.709039861685312]
Test Case:  54 | Input/Output: [[46.729130834788975 32] 78.72913083478898]
Test Case:  55 | Input/Output: [[-74.57483962312348 89] 14.42516037687652]
Test Case:  56 | Input/Output: [[-37.17292409770201 96] 58.82707590229799]
Test Case:  57 | Input/Output: [[45.73231341775826 -95] -49.26768658224174]
Test Case:  58 | Input/Output: [[-25.374421431583997 62] 36.625578568416]
Test Case:  59 | Input/Output: [[-89.57331298833968 -31] -120.57331298833968]
Test Case:  60 | Input/Output: [[-9.458225478613684 -79] -88.45822547861368]
Test Case:  61 | Input/Output: [[-45.38035685789043 58] 12.619643142109567]
Test Case:  62 | Input/Output: [[6.262755545081049 -77] -70.73724445491895]
Test Case:  63 | Input/Output: [[29.689054943767502 -28] 1.689054943767502]
Test Case:  64 | Input/Output: [[67.12209329220181 58] 125.12209329220181]
Test Case:  65 | Input/Output: [[23.468391340952067 6] 29.468391340952067]
Test Case:  66 | Input/Output: [[2.7100007705704883 81] 83.71000077057049]
Test Case:  67 | Input/Output: [[72.02176021655939 88] 160.0217602165594]
Test Case:  68 | Input/Output: [[-17.68675980303891 -29] -46.68675980303891]
Test Case:  69 | Input/Output: [[73.93788788257098 91] 164.93788788257098]
Test Case:  70 | Input/Output: [[-2.913733579674755 84] 81.08626642032525]
Test Case:  71 | Input/Output: [[94.1088707025915 -85] 9.108870702591503]
Test Case:  72 | Input/Output: [[69.09423805261886 29] 98.09423805261886]
Test Case:  73 | Input/Output: [[-74.40039972823706 8] -66.40039972823706]
Test Case:  74 | Input/Output: [[46.59440938930854 38] 84.59440938930854]
Test Case:  75 | Input/Output: [[-58.86407187089109 96] 37.13592812910891]
Test Case:  76 | Input/Output: [[5.778302910411497 78] 83.7783029104115]
Test Case:  77 | Input/Output: [[48.603904517193286 31] 79.60390451719329]
Test Case:  78 | Input/Output: [[50.37458009308841 59] 109.37458009308841]
Test Case:  79 | Input/Output: [[-3.054469816190064 -99] -102.05446981619006]
Test Case:  80 | Input/Output: [[57.182442525267504 35] 92.1824425252675]
Test Case:  81 | Input/Output: [[-71.41134947500878 -94] -165.41134947500876]
Test Case:  82 | Input/Output: [[-77.52537409018493 87] 9.474625909815074]
Test Case:  83 | Input/Output: [[-20.90254627517318 -27] -47.90254627517318]
Test Case:  84 | Input/Output: [[-35.45597720465652 57] 21.54402279534348]
Test Case:  85 | Input/Output: [[17.420164906229218 74] 91.42016490622922]
Test Case:  86 | Input/Output: [[79.67601312930867 -25] 54.67601312930867]
Test Case:  87 | Input/Output: [[49.26300678714148 21] 70.26300678714148]
Test Case:  88 | Input/Output: [[-82.58693587609247 -3] -85.58693587609247]
Test Case:  89 | Input/Output: [[-5.6993068453506055 29] 23.300693154649395]
Test Case:  90 | Input/Output: [[98.44224467796965 -23] 75.44224467796965]
Test Case:  91 | Input/Output: [[18.6865205094052 -17] 1.6865205094051987]
Test Case:  92 | Input/Output: [[-69.89271209547516 51] -18.89271209547516]
Test Case:  93 | Input/Output: [[-85.24360806330178 -62] -147.2436080633018]
Test Case:  94 | Input/Output: [[-21.46666729156756 -70] -91.46666729156756]
Test Case:  95 | Input/Output: [[74.78765569203435 -29] 45.78765569203435]
Test Case:  96 | Input/Output: [[5.320598863631545 44] 49.320598863631545]
Test Case:  97 | Input/Output: [[-27.701369508374157 -37] -64.70136950837416]
Test Case:  98 | Input/Output: [[69.6278902861163 27] 96.6278902861163]
Test Case:  99 | Input/Output: [[-76.76328587178689 -3] -79.76328587178689]
Test Case: 100 | Input/Output: [[-39.974220177072304 75] 35.025779822927696]
Test Case: 101 | Input/Output: [[98.03352852102913 -12] 86.03352852102913]
Test Case: 102 | Input/Output: [[-16.498911386798085 -61] -77.49891138679808]
Test Case: 103 | Input/Output: [[16.71311955706767 -83] -66.28688044293233]
Test Case: 104 | Input/Output: [[4.481266186633562 70] 74.48126618663356]
Test Case: 105 | Input/Output: [[54.13080856161508 31] 85.13080856161508]
Test Case: 106 | Input/Output: [[87.43086498798206 -61] 26.430864987982062]
Test Case: 107 | Input/Output: [[47.03590111585237 96] 143.03590111585237]
Test Case: 108 | Input/Output: [[90.32098036667287 46] 136.32098036667287]
Test Case: 109 | Input/Output: [[-36.711177760284116 -14] -50.711177760284116]
Test Case: 110 | Input/Output: [[38.70330860324455 39] 77.70330860324455]
Test Case: 111 | Input/Output: [[-34.513919797982595 -44] -78.5139197979826]
Test Case: 112 | Input/Output: [[-1.690130582193163 60] 58.30986941780684]
Test Case: 113 | Input/Output: [[-70.34693330197344 1] -69.34693330197344]
Test Case: 114 | Input/Output: [[-33.51862315533624 -68] -101.51862315533624]
Test Case: 115 | Input/Output: [[1.255277490827595 -8] -6.744722509172405]
Test Case: 116 | Input/Output: [[78.99207844121835 -5] 73.99207844121835]
Test Case: 117 | Input/Output: [[-7.254932413279619 -80] -87.25493241327962]
Test Case: 118 | Input/Output: [[-62.153084048474504 77] 14.846915951525496]
Test Case: 119 | Input/Output: [[-2.9279518021313464 -21] -23.927951802131346]
Test Case: 120 | Input/Output: [[-26.037883486961917 -21] -47.03788348696192]
Test Case: 121 | Input/Output: [[87.54678522347359 -84] 3.5467852234735915]
Test Case: 122 | Input/Output: [[76.8168195366174 26] 102.8168195366174]
Test Case: 123 | Input/Output: [[86.66225808576712 8] 94.66225808576712]
Test Case: 124 | Input/Output: [[45.51117160845553 -34] 11.511171608455527]
Test Case: 125 | Input/Output: [[39.42400657133095 65] 104.42400657133095]
Test Case: 126 | Input/Output: [[-85.02430025391602 29] -56.024300253916024]
Test Case: 127 | Input/Output: [[40.4608803082038 -40] 0.460880308203798]
Test Case: 128 | Input/Output: [[-55.54068826249336 -28] -83.54068826249336]
Test Case: 129 | Input/Output: [[-1.5907414813294452 -61] -62.590741481329445]
Test Case: 130 | Input/Output: [[-23.688717663917274 -77] -100.68871766391727]
Test Case: 131 | Input/Output: [[60.42209966418409 -8] 52.42209966418409]
Test Case: 132 | Input/Output: [[13.551388060947914 -66] -52.448611939052086]
Test Case: 133 | Input/Output: [[-93.24579409369001 -56] -149.24579409369]
Test Case: 134 | Input/Output: [[-55.10330988959118 -89] -144.10330988959117]
Test Case: 135 | Input/Output: [[21.474065416021062 58] 79.47406541602106]
Test Case: 136 | Input/Output: [[-52.1239506258677 -3] -55.1239506258677]
Test Case: 137 | Input/Output: [[-19.50067416241363 -83] -102.50067416241363]
Test Case: 138 | Input/Output: [[-37.69545649106172 -86] -123.69545649106172]
Test Case: 139 | Input/Output: [[-28.498933077157915 5] -23.498933077157915]
Test Case: 140 | Input/Output: [[-70.83965758467998 -96] -166.83965758467997]
Test Case: 141 | Input/Output: [[-37.683584176987495 -61] -98.6835841769875]
Test Case: 142 | Input/Output: [[40.81012719981533 -44] -3.1898728001846735]
Test Case: 143 | Input/Output: [[75.10275063102614 -86] -10.89724936897386]
Test Case: 144 | Input/Output: [[18.29060440096066 -29] -10.70939559903934]
Test Case: 145 | Input/Output: [[84.44642117496488 74] 158.44642117496488]
Test Case: 146 | Input/Output: [[27.114863040164423 5] 32.11486304016442]
Test Case: 147 | Input/Output: [[-12.713583012221648 0] -12.713583012221648]
Test Case: 148 | Input/Output: [[-28.02305724998726 29] 0.9769427500127392]
Test Case: 149 | Input/Output: [[-33.88032385128585 -45] -78.88032385128585]
Test Case: 150 | Input/Output: [[-16.722043467394542 -9] -25.722043467394542]
Test Case: 151 | Input/Output: [[33.641002039791545 -51] -17.358997960208455]
Test Case: 152 | Input/Output: [[40.71109139615393 74] 114.71109139615393]
Test Case: 153 | Input/Output: [[67.32617341391835 -56] 11.326173413918355]
Test Case: 154 | Input/Output: [[-1.6793297121404436 -28] -29.679329712140444]
Test Case: 155 | Input/Output: [[61.48661446763256 -58] 3.486614467632563]
Test Case: 156 | Input/Output: [[-29.646055530741094 -59] -88.6460555307411]
Test Case: 157 | Input/Output: [[86.76576081083124 -56] 30.76576081083124]
Test Case: 158 | Input/Output: [[27.136861877164492 -21] 6.136861877164492]
Test Case: 159 | Input/Output: [[-20.075789887909323 -68] -88.07578988790932]
Test Case: 160 | Input/Output: [[16.544681059669912 -99] -82.45531894033009]
Test Case: 161 | Input/Output: [[50.10045980090314 -81] -30.89954019909686]
Test Case: 162 | Input/Output: [[75.74167267854787 81] 156.74167267854787]
Test Case: 163 | Input/Output: [[38.24519990958859 -87] -48.75480009041141]
Test Case: 164 | Input/Output: [[-45.449013003320694 -85] -130.4490130033207]
Test Case: 165 | Input/Output: [[-96.76701291630911 -7] -103.76701291630911]
Test Case: 166 | Input/Output: [[-17.845313640649337 84] 66.15468635935066]
Test Case: 167 | Input/Output: [[-74.26125341979585 -24] -98.26125341979585]
Test Case: 168 | Input/Output: [[-17.61696188330619 78] 60.38303811669381]
Test Case: 169 | Input/Output: [[-45.22943909148482 47] 1.7705609085151792]
Test Case: 170 | Input/Output: [[-61.07209259859483 -51] -112.07209259859482]
Test Case: 171 | Input/Output: [[28.365963237451098 -57] -28.634036762548902]
Test Case: 172 | Input/Output: [[92.13939190264111 56] 148.1393919026411]
Test Case: 173 | Input/Output: [[-96.89686089250351 77] -19.89686089250351]
Test Case: 174 | Input/Output: [[62.92104701000014 -2] 60.92104701000014]
Test Case: 175 | Input/Output: [[21.65083201097569 5] 26.65083201097569]
Test Case: 176 | Input/Output: [[35.87829343557652 9] 44.87829343557652]
Test Case: 177 | Input/Output: [[-39.80246511845089 33] -6.80246511845089]
Test Case: 178 | Input/Output: [[-2.0067060835318102 42] 39.99329391646819]
Test Case: 179 | Input/Output: [[71.83449608937917 69] 140.83449608937917]
Test Case: 180 | Input/Output: [[-17.40146983916162 97] 79.59853016083838]
Test Case: 181 | Input/Output: [[55.220337141574106 -18] 37.220337141574106]
Test Case: 182 | Input/Output: [[-88.47308738619874 22] -66.47308738619874]
Test Case: 183 | Input/Output: [[-86.52608797108776 57] -29.52608797108776]
Test Case: 184 | Input/Output: [[-93.77890201447869 94] 0.2210979855213111]
Test Case: 185 | Input/Output: [[7.715398449676968 46] 53.71539844967697]
Test Case: 186 | Input/Output: [[8.827975107576862 -94] -85.17202489242314]
Test Case: 187 | Input/Output: [[-96.0542093135334 -7] -103.0542093135334]
Test Case: 188 | Input/Output: [[-40.94095929636239 -55] -95.9409592963624]
Test Case: 189 | Input/Output: [[26.691314347987174 21] 47.69131434798717]
Test Case: 190 | Input/Output: [[60.730826477096144 61] 121.73082647709614]
Test Case: 191 | Input/Output: [[54.847020512606434 4] 58.847020512606434]
Test Case: 192 | Input/Output: [[19.444762964926056 12] 31.444762964926056]
Test Case: 193 | Input/Output: [[-71.56750320595046 -96] -167.56750320595046]
Test Case: 194 | Input/Output: [[9.85449382198044 -54] -44.14550617801956]
Test Case: 195 | Input/Output: [[-71.7785161742782 -34] -105.7785161742782]
Test Case: 196 | Input/Output: [[-3.473700902333121 -96] -99.47370090233312]
Test Case: 197 | Input/Output: [[65.33737090870375 85] 150.33737090870375]
Test Case: 198 | Input/Output: [[15.28209229630366 -43] -27.71790770369634]
Test Case: 199 | Input/Output: [[92.51510531535183 -70] 22.515105315351832]
Test Case: 200 | Input/Output: [[-71.11868328980307 -65] -136.11868328980307]
Test Case: 201 | Input/Output: [[84.80897547720497 83] 167.80897547720497]
Test Case: 202 | Input/Output: [[-42.75203492175128 95] 52.24796507824872]
Test Case: 203 | Input/Output: [[-31.33547110353973 -37] -68.33547110353973]
Test Case: 204 | Input/Output: [[-99.56090849623686 -37] -136.56090849623686]
Test Case: 205 | Input/Output: [[68.92226147973054 -94] -25.077738520269463]
Test Case: 206 | Input/Output: [[90.27146238864225 16] 106.27146238864225]
Test Case: 207 | Input/Output: [[-71.89884137327327 38] -33.89884137327327]
Test Case: 208 | Input/Output: [[-72.18378194931488 -8] -80.18378194931488]
Test Case: 209 | Input/Output: [[-4.427403965230553 10] 5.572596034769447]
Test Case: 210 | Input/Output: [[73.1496996915078 -45] 28.149699691507806]
Test Case: 211 | Input/Output: [[-24.466760758332228 -55] -79.46676075833223]
Test Case: 212 | Input/Output: [[-46.23797875918634 58] 11.76202124081366]
Test Case: 213 | Input/Output: [[-14.309751674139818 15] 0.6902483258601819]
Test Case: 214 | Input/Output: [[3.54041244934389 85] 88.54041244934389]
Test Case: 215 | Input/Output: [[-36.61130470556231 -53] -89.6113047055623]
Test Case: 216 | Input/Output: [[-5.321832286617621 -55] -60.32183228661762]
Test Case: 217 | Input/Output: [[51.93980370773599 64] 115.93980370773599]
Test Case: 218 | Input/Output: [[-53.48654656121343 79] 25.51345343878657]
Test Case: 219 | Input/Output: [[25.86927594459631 1] 26.86927594459631]
Test Case: 220 | Input/Output: [[97.95385998235264 -27] 70.95385998235264]
Test Case: 221 | Input/Output: [[52.61382165911735 -63] -10.386178340882651]
Test Case: 222 | Input/Output: [[-88.67093102389384 51] -37.67093102389384]
Test Case: 223 | Input/Output: [[-15.85331338106657 -85] -100.85331338106657]
Test Case: 224 | Input/Output: [[-47.323532746311095 17] -30.323532746311095]
Test Case: 225 | Input/Output: [[11.181506073440374 79] 90.18150607344037]
Test Case: 226 | Input/Output: [[29.65804567551399 -40] -10.34195432448601]
Test Case: 227 | Input/Output: [[-78.21441810592877 -9] -87.21441810592877]
Test Case: 228 | Input/Output: [[-48.01913095871579 -91] -139.01913095871578]
Test Case: 229 | Input/Output: [[60.98841565368676 -69] -8.011584346313242]
Test Case: 230 | Input/Output: [[34.597196045025214 -15] 19.597196045025214]
Test Case: 231 | Input/Output: [[-50.15542769010335 -67] -117.15542769010335]
Test Case: 232 | Input/Output: [[-7.086155203437244 -46] -53.086155203437244]
Test Case: 233 | Input/Output: [[-77.23830992690388 92] 14.76169007309612]
Test Case: 234 | Input/Output: [[32.51103515088744 -42] -9.488964849112563]
Test Case: 235 | Input/Output: [[10.584488884751437 -83] -72.41551111524856]
Test Case: 236 | Input/Output: [[60.637684601310724 21] 81.63768460131072]
Test Case: 237 | Input/Output: [[-35.200658324209996 42] 6.799341675790004]
Test Case: 238 | Input/Output: [[-23.616855680595876 87] 63.383144319404124]
Test Case: 239 | Input/Output: [[-24.26487354916729 -50] -74.26487354916729]
Test Case: 240 | Input/Output: [[-6.296630365393426 -46] -52.296630365393426]
Test Case: 241 | Input/Output: [[67.25457377494897 77] 144.25457377494897]
Test Case: 242 | Input/Output: [[-95.30287558978986 -81] -176.30287558978986]
Test Case: 243 | Input/Output: [[-0.885559050285849 90] 89.11444094971415]
Test Case: 244 | Input/Output: [[-24.90551570529213 50] 25.09448429470787]
Test Case: 245 | Input/Output: [[-53.178934332267616 30] -23.178934332267616]
Test Case: 246 | Input/Output: [[50.16659885391505 -99] -48.83340114608495]
Test Case: 247 | Input/Output: [[-20.12362657112665 36] 15.87637342887335]
Test Case: 248 | Input/Output: [[-14.398553986644231 -37] -51.39855398664423]
Test Case: 249 | Input/Output: [[-1.146164472930593 -48] -49.14616447293059]
Test Case: 250 | Input/Output: [[87.63569803320453 23] 110.63569803320453]
Test Case: 251 | Input/Output: [[97.56812544758361 57] 154.5681254475836]
Test Case: 252 | Input/Output: [[87.29225748006041 53] 140.2922574800604]
Test Case: 253 | Input/Output: [[42.477708329899 21] 63.477708329899]
Test Case: 254 | Input/Output: [[-69.30255471197083 75] 5.697445288029172]
Test Case: 255 | Input/Output: [[-99.2473263193227 -32] -131.2473263193227]
Test Case: 256 | Input/Output: [[31.209687400820883 -10] 21.209687400820883]
Test Case: 257 | Input/Output: [[-48.04410567728592 -70] -118.04410567728593]
Test Case: 258 | Input/Output: [[38.160820580890146 -75] -36.839179419109854]
Test Case: 259 | Input/Output: [[57.42591192583237 -50] 7.4259119258323665]
Test Case: 260 | Input/Output: [[-22.380323571894138 -99] -121.38032357189414]
Test Case: 261 | Input/Output: [[-20.403073408586764 -10] -30.403073408586764]
Test Case: 262 | Input/Output: [[-27.531712291466334 -55] -82.53171229146633]
Test Case: 263 | Input/Output: [[54.857916104400005 -76] -21.142083895599995]
Test Case: 264 | Input/Output: [[22.238327461313006 -47] -24.761672538686994]
Test Case: 265 | Input/Output: [[-96.12329156520654 -94] -190.12329156520656]
Test Case: 266 | Input/Output: [[43.63184924305179 65] 108.63184924305179]
Test Case: 267 | Input/Output: [[61.797495832936335 17] 78.79749583293633]
Test Case: 268 | Input/Output: [[-12.336204222563822 37] 24.663795777436178]
Test Case: 269 | Input/Output: [[14.276027169923864 -12] 2.2760271699238643]
Test Case: 270 | Input/Output: [[-72.9446203377586 -66] -138.94462033775858]
Test Case: 271 | Input/Output: [[82.3511061106482 89] 171.3511061106482]
Test Case: 272 | Input/Output: [[-32.63310818303984 90] 57.36689181696016]
Test Case: 273 | Input/Output: [[-73.52624181941422 -7] -80.52624181941422]
Test Case: 274 | Input/Output: [[75.75861388458901 -54] 21.75861388458901]
Test Case: 275 | Input/Output: [[-79.89344600205119 20] -59.89344600205119]
Test Case: 276 | Input/Output: [[-95.1443890889599 60] -35.1443890889599]
Test Case: 277 | Input/Output: [[23.904684774290757 64] 87.90468477429076]
Test Case: 278 | Input/Output: [[-61.8834539879964 -60] -121.8834539879964]
Test Case: 279 | Input/Output: [[1.0713632846957637 89] 90.07136328469576]
Test Case: 280 | Input/Output: [[34.496156443673954 -23] 11.496156443673954]
Test Case: 281 | Input/Output: [[-90.2910858240143 -96] -186.29108582401432]
Test Case: 282 | Input/Output: [[89.1130542602539 -1] 88.1130542602539]
Test Case: 283 | Input/Output: [[-18.775111356164544 42] 23.224888643835456]
Test Case: 284 | Input/Output: [[-69.20765783350865 42] -27.207657833508648]
Test Case: 285 | Input/Output: [[-11.055633795629745 22] 10.944366204370255]
Test Case: 286 | Input/Output: [[-24.559648021466018 29] 4.4403519785339824]
Test Case: 287 | Input/Output: [[-82.91981964162605 65] -17.91981964162605]
Test Case: 288 | Input/Output: [[44.07793685136457 -35] 9.07793685136457]
Test Case: 289 | Input/Output: [[-43.42159627076374 7] -36.42159627076374]
Test Case: 290 | Input/Output: [[64.66685302104028 -41] 23.666853021040282]
Test Case: 291 | Input/Output: [[-34.35143491471548 -31] -65.35143491471548]
Test Case: 292 | Input/Output: [[-67.83198490571434 93] 25.168015094285664]
Test Case: 293 | Input/Output: [[-73.26936079030655 54] -19.26936079030655]
Test Case: 294 | Input/Output: [[49.45265692561401 39] 88.45265692561401]
Test Case: 295 | Input/Output: [[99.72069407054448 36] 135.72069407054448]
Test Case: 296 | Input/Output: [[-77.04648583184961 -88] -165.04648583184962]
Test Case: 297 | Input/Output: [[40.02107873776407 -28] 12.021078737764071]
Test Case: 298 | Input/Output: [[94.14448719985089 42] 136.1444871998509]
Test Case: 299 | Input/Output: [[47.19158582940031 13] 60.19158582940031]
Test Case: 300 | Input/Output: [[-22.234690622392577 -14] -36.23469062239258]
Test Case: 301 | Input/Output: [[-69.44737457998511 86] 16.55262542001489]
Test Case: 302 | Input/Output: [[3.16392439190156 97] 100.16392439190156]
Test Case: 303 | Input/Output: [[-1.7671489713660264 23] 21.232851028633974]
Test Case: 304 | Input/Output: [[97.99783800393621 -74] 23.99783800393621]
Test Case: 305 | Input/Output: [[93.15803496117718 -67] 26.15803496117718]
Test Case: 306 | Input/Output: [[-15.336589558781881 -12] -27.33658955878188]
Test Case: 307 | Input/Output: [[-68.26676261322287 -4] -72.26676261322287]
Test Case: 308 | Input/Output: [[-39.28078019223944 -20] -59.28078019223944]
Test Case: 309 | Input/Output: [[-18.462404691576936 -33] -51.462404691576936]
Test Case: 310 | Input/Output: [[-51.906509073558006 -79] -130.906509073558]
Test Case: 311 | Input/Output: [[24.611001516989248 -17] 7.611001516989248]
Test Case: 312 | Input/Output: [[15.37082081547689 -36] -20.62917918452311]
Test Case: 313 | Input/Output: [[-78.12112405492172 -96] -174.12112405492172]
Test Case: 314 | Input/Output: [[2.435568790440996 49] 51.435568790440996]
Test Case: 315 | Input/Output: [[-91.00568240280927 -3] -94.00568240280927]
Test Case: 316 | Input/Output: [[58.290351504521595 -10] 48.290351504521595]
Test Case: 317 | Input/Output: [[-98.73298014923924 26] -72.73298014923924]
Test Case: 318 | Input/Output: [[28.58854852905614 -43] -14.41145147094386]
Test Case: 319 | Input/Output: [[4.880750112624497 -30] -25.119249887375503]
Test Case: 320 | Input/Output: [[-88.93936356438188 65] -23.93936356438188]
Test Case: 321 | Input/Output: [[-43.170163087574196 -69] -112.1701630875742]
Test Case: 322 | Input/Output: [[27.457296187711307 42] 69.45729618771131]
Test Case: 323 | Input/Output: [[-2.4448338881912974 -73] -75.4448338881913]
Test Case: 324 | Input/Output: [[40.31760244552828 6] 46.31760244552828]
Test Case: 325 | Input/Output: [[-45.532339987210776 -42] -87.53233998721078]
Test Case: 326 | Input/Output: [[-0.4975759343177373 25] 24.502424065682263]
Test Case: 327 | Input/Output: [[79.63669723043202 60] 139.63669723043202]
Test Case: 328 | Input/Output: [[-90.8705316044605 -72] -162.8705316044605]
Test Case: 329 | Input/Output: [[-36.628643007238225 -40] -76.62864300723822]
Test Case: 330 | Input/Output: [[18.653328169641313 82] 100.65332816964131]
Test Case: 331 | Input/Output: [[30.19453968798328 -3] 27.19453968798328]
Test Case: 332 | Input/Output: [[7.335421380621128 -84] -76.66457861937887]
Test Case: 333 | Input/Output: [[27.306041598311424 42] 69.30604159831142]
Test Case: 334 | Input/Output: [[99.47858690310946 67] 166.47858690310946]
Test Case: 335 | Input/Output: [[-15.106163125078751 64] 48.89383687492125]
Test Case: 336 | Input/Output: [[77.97710658356078 85] 162.97710658356078]
Test Case: 337 | Input/Output: [[8.548434511006349 87] 95.54843451100635]
Test Case: 338 | Input/Output: [[57.733764288843986 49] 106.73376428884399]
Test Case: 339 | Input/Output: [[60.23952526278907 -73] -12.760474737210927]
Test Case: 340 | Input/Output: [[20.52523151099544 -47] -26.47476848900456]
Test Case: 341 | Input/Output: [[-66.93655988484366 98] 31.06344011515634]
Test Case: 342 | Input/Output: [[-85.5282652649423 -33] -118.5282652649423]
Test Case: 343 | Input/Output: [[-13.956026437469433 96] 82.04397356253057]
Test Case: 344 | Input/Output: [[25.220703289930157 100] 125.22070328993016]
Test Case: 345 | Input/Output: [[47.4038097412903 1] 48.4038097412903]
Test Case: 346 | Input/Output: [[-14.171708706128499 63] 48.8282912938715]
Test Case: 347 | Input/Output: [[-15.899522995724809 2] -13.899522995724809]
Test Case: 348 | Input/Output: [[-90.60057384878175 49] -41.60057384878175]
Test Case: 349 | Input/Output: [[14.973240763227508 11] 25.97324076322751]
Test Case: 350 | Input/Output: [[-46.53891258622882 -37] -83.53891258622882]
Test Case: 351 | Input/Output: [[-26.89206984838188 -83] -109.89206984838188]
Test Case: 352 | Input/Output: [[-33.8930575782193 -74] -107.8930575782193]
Test Case: 353 | Input/Output: [[-85.32155241129023 -44] -129.3215524112902]
Test Case: 354 | Input/Output: [[-22.27913429049815 93] 70.72086570950185]
Test Case: 355 | Input/Output: [[86.0776511757316 -32] 54.0776511757316]
Test Case: 356 | Input/Output: [[34.087518629123025 -39] -4.912481370876975]
Test Case: 357 | Input/Output: [[88.57403590078766 -36] 52.57403590078766]
Test Case: 358 | Input/Output: [[41.38606055424839 72] 113.38606055424839]
Test Case: 359 | Input/Output: [[15.484420753364873 -85] -69.51557924663513]
Test Case: 360 | Input/Output: [[55.54707476858562 -83] -27.452925231414383]
Test Case: 361 | Input/Output: [[-5.2573991037681225 75] 69.74260089623188]
Test Case: 362 | Input/Output: [[34.9831236075581 91] 125.9831236075581]
Test Case: 363 | Input/Output: [[10.048205075383265 -86] -75.95179492461673]
Test Case: 364 | Input/Output: [[45.70925165521399 21] 66.70925165521399]
Test Case: 365 | Input/Output: [[-73.95405508047754 -61] -134.95405508047753]
Test Case: 366 | Input/Output: [[-11.625857434007727 26] 14.374142565992273]
Test Case: 367 | Input/Output: [[-3.1549484255264844 -96] -99.15494842552648]
Test Case: 368 | Input/Output: [[48.49653590855277 -73] -24.503464091447228]
Test Case: 369 | Input/Output: [[-5.572980202084452 9] 3.4270197979155483]
Test Case: 370 | Input/Output: [[39.435432910297095 0] 39.435432910297095]
Test Case: 371 | Input/Output: [[-40.99137730557638 -73] -113.99137730557638]
Test Case: 372 | Input/Output: [[-98.19802761213904 -24] -122.19802761213904]
Test Case: 373 | Input/Output: [[-23.054658944073168 33] 9.945341055926832]
Test Case: 374 | Input/Output: [[45.56831003073435 -62] -16.431689969265648]
Test Case: 375 | Input/Output: [[-44.44493443107022 46] 1.555065568929777]
Test Case: 376 | Input/Output: [[-51.18408366921066 -88] -139.18408366921065]
Test Case: 377 | Input/Output: [[91.14259029637299 -92] -0.8574097036270132]
Test Case: 378 | Input/Output: [[71.32166438115217 -51] 20.321664381152175]
Test Case: 379 | Input/Output: [[-82.41393109363301 -48] -130.413931093633]
Test Case: 380 | Input/Output: [[14.00389903495764 28] 42.00389903495764]
Test Case: 381 | Input/Output: [[-67.4822061524323 -73] -140.4822061524323]
Test Case: 382 | Input/Output: [[-20.88194495781373 78] 57.11805504218627]
Test Case: 383 | Input/Output: [[-47.660625037424055 -25] -72.66062503742405]
Test Case: 384 | Input/Output: [[-65.73233471316928 71] 5.26766528683072]
Test Case: 385 | Input/Output: [[-24.298812444810963 -54] -78.29881244481096]
Test Case: 386 | Input/Output: [[8.762954634735266 51] 59.762954634735266]
Test Case: 387 | Input/Output: [[-3.748565610498005 -16] -19.748565610498005]
Test Case: 388 | Input/Output: [[71.98111266109333 -72] -0.018887338906665718]
Test Case: 389 | Input/Output: [[-12.512144986184154 -13] -25.512144986184154]
Test Case: 390 | Input/Output: [[-92.06991608786123 16] -76.06991608786123]
Test Case: 391 | Input/Output: [[59.79366437580532 -32] 27.79366437580532]
Test Case: 392 | Input/Output: [[24.17231391216268 10] 34.17231391216268]
Test Case: 393 | Input/Output: [[16.54142053080416 -86] -69.45857946919584]
Test Case: 394 | Input/Output: [[87.25989739922412 -32] 55.259897399224116]
Test Case: 395 | Input/Output: [[10.405839685660041 -57] -46.59416031433996]
Test Case: 396 | Input/Output: [[-92.20608007051885 -59] -151.20608007051885]
Test Case: 397 | Input/Output: [[67.66012890020369 91] 158.6601289002037]
Test Case: 398 | Input/Output: [[80.56045972646251 51] 131.5604597264625]
Test Case: 399 | Input/Output: [[60.62218696711423 -54] 6.6221869671142315]
Test Case: 400 | Input/Output: [[65.8351215779754 -46] 19.8351215779754]
Test Case: 401 | Input/Output: [[-35.93870472538076 68] 32.06129527461924]
Test Case: 402 | Input/Output: [[17.948295882251514 55] 72.94829588225151]
Test Case: 403 | Input/Output: [[45.75843174470046 -59] -13.24156825529954]
Test Case: 404 | Input/Output: [[56.68287289980802 1] 57.68287289980802]
Test Case: 405 | Input/Output: [[-46.760479604338244 36] -10.760479604338244]
Test Case: 406 | Input/Output: [[42.0949511400471 -68] -25.9050488599529]
Test Case: 407 | Input/Output: [[74.57955839790381 32] 106.57955839790381]
Test Case: 408 | Input/Output: [[71.47772952629182 69] 140.47772952629182]
Test Case: 409 | Input/Output: [[-44.0023406451445 88] 43.9976593548555]
Test Case: 410 | Input/Output: [[-84.63248233088909 77] -7.63248233088909]
Test Case: 411 | Input/Output: [[40.60994172416085 -50] -9.390058275839152]
Test Case: 412 | Input/Output: [[83.53271293832515 -97] -13.467287061674853]
Test Case: 413 | Input/Output: [[-58.378226600370844 93] 34.621773399629156]
Test Case: 414 | Input/Output: [[-68.33628029624404 -93] -161.33628029624404]
Test Case: 415 | Input/Output: [[29.715048706229794 -22] 7.715048706229794]
Test Case: 416 | Input/Output: [[-99.10975940477638 15] -84.10975940477638]
Test Case: 417 | Input/Output: [[50.43109735762363 -10] 40.43109735762363]
Test Case: 418 | Input/Output: [[55.751443678739435 53] 108.75144367873943]
Test Case: 419 | Input/Output: [[-96.68778392637587 -26] -122.68778392637587]
Test Case: 420 | Input/Output: [[-90.05350204510252 -1] -91.05350204510252]
Test Case: 421 | Input/Output: [[-70.95452605029398 -46] -116.95452605029398]
Test Case: 422 | Input/Output: [[-38.07552840025685 36] -2.07552840025685]
Test Case: 423 | Input/Output: [[49.292654498957944 81] 130.29265449895794]
Test Case: 424 | Input/Output: [[-1.2163797524289635 17] 15.783620247571037]
Test Case: 425 | Input/Output: [[-75.41211535030148 77] 1.5878846496985233]
Test Case: 426 | Input/Output: [[56.38284014282152 -39] 17.38284014282152]
Test Case: 427 | Input/Output: [[31.03402464169426 -22] 9.03402464169426]
Test Case: 428 | Input/Output: [[55.39493387667096 -4] 51.39493387667096]
Test Case: 429 | Input/Output: [[13.328879860843216 19] 32.328879860843216]
Test Case: 430 | Input/Output: [[-96.77004383303473 -33] -129.77004383303472]
Test Case: 431 | Input/Output: [[61.37687997214135 67] 128.37687997214135]
Test Case: 432 | Input/Output: [[-66.6479256540739 -83] -149.6479256540739]
Test Case: 433 | Input/Output: [[91.38725962054099 -10] 81.38725962054099]
Test Case: 434 | Input/Output: [[-66.17582048606604 -26] -92.17582048606604]
Test Case: 435 | Input/Output: [[-58.18590120387379 83] 24.81409879612621]
Test Case: 436 | Input/Output: [[98.77390291560323 89] 187.77390291560323]
Test Case: 437 | Input/Output: [[-0.6156850483306897 -56] -56.61568504833069]
Test Case: 438 | Input/Output: [[46.6986885786192 -53] -6.301311421380802]
Test Case: 439 | Input/Output: [[-53.62367736464946 95] 41.37632263535054]
Test Case: 440 | Input/Output: [[19.532120788200885 -39] -19.467879211799115]
Test Case: 441 | Input/Output: [[19.9784233458995 67] 86.9784233458995]
Test Case: 442 | Input/Output: [[-21.733330697095354 19] -2.7333306970953544]
Test Case: 443 | Input/Output: [[62.72685919005215 -21] 41.72685919005215]
Test Case: 444 | Input/Output: [[-36.172902719477264 30] -6.172902719477264]
Test Case: 445 | Input/Output: [[29.53328047466269 -69] -39.46671952533731]
Test Case: 446 | Input/Output: [[82.25314660155112 -76] 6.253146601551123]
Test Case: 447 | Input/Output: [[-16.30023247237638 49] 32.69976752762362]
Test Case: 448 | Input/Output: [[-67.54671098360902 27] -40.54671098360902]
Test Case: 449 | Input/Output: [[-99.54162964937497 -98] -197.54162964937495]
Test Case: 450 | Input/Output: [[16.067470075709764 -98] -81.93252992429024]
Test Case: 451 | Input/Output: [[96.72262641947523 72] 168.72262641947523]
Test Case: 452 | Input/Output: [[79.67026233061486 -39] 40.67026233061486]
Test Case: 453 | Input/Output: [[-30.053052262057165 80] 49.946947737942835]
Test Case: 454 | Input/Output: [[51.58654657162296 27] 78.58654657162296]
Test Case: 455 | Input/Output: [[-27.816053160129556 -14] -41.816053160129556]
Test Case: 456 | Input/Output: [[-61.097401585012136 -41] -102.09740158501214]
Test Case: 457 | Input/Output: [[-81.54616348460742 -76] -157.5461634846074]
Test Case: 458 | Input/Output: [[12.59391207280305 -50] -37.40608792719695]
Test Case: 459 | Input/Output: [[-40.10015355994349 -62] -102.1001535599435]
Test Case: 460 | Input/Output: [[-8.494894713149833 -33] -41.49489471314983]
Test Case: 461 | Input/Output: [[-37.647197604134774 -9] -46.647197604134774]
Test Case: 462 | Input/Output: [[11.362750095418917 -12] -0.6372499045810827]
Test Case: 463 | Input/Output: [[67.70836606170175 -44] 23.708366061701753]
Test Case: 464 | Input/Output: [[23.44449857709907 -99] -75.55550142290093]
Test Case: 465 | Input/Output: [[-58.83059507806321 -67] -125.83059507806321]
Test Case: 466 | Input/Output: [[-75.64038764852967 71] -4.640387648529668]
Test Case: 467 | Input/Output: [[23.111680707249178 95] 118.11168070724918]
Test Case: 468 | Input/Output: [[4.687794413642592 12] 16.687794413642592]
Test Case: 469 | Input/Output: [[-10.35192577991208 37] 26.64807422008792]
Test Case: 470 | Input/Output: [[-75.54434487306236 -44] -119.54434487306236]
Test Case: 471 | Input/Output: [[-9.112957785646742 88] 78.88704221435326]
Test Case: 472 | Input/Output: [[9.848523466540215 -71] -61.151476533459785]
Test Case: 473 | Input/Output: [[68.44559557825681 -23] 45.445595578256814]
Test Case: 474 | Input/Output: [[-11.839293911392843 13] 1.1607060886071565]
Test Case: 475 | Input/Output: [[18.994627171402726 1] 19.994627171402726]
Test Case: 476 | Input/Output: [[96.65814432979968 -28] 68.65814432979968]
Test Case: 477 | Input/Output: [[88.7112565059011 70] 158.7112565059011]
Test Case: 478 | Input/Output: [[32.11299212013114 -69] -36.88700787986886]
Test Case: 479 | Input/Output: [[-71.67211673699 -79] -150.67211673699]
Test Case: 480 | Input/Output: [[-16.703581427975564 3] -13.703581427975564]
Test Case: 481 | Input/Output: [[14.74699154328593 42] 56.74699154328593]
Test Case: 482 | Input/Output: [[-97.54326055060002 26] -71.54326055060002]
Test Case: 483 | Input/Output: [[-14.023605958895871 51] 36.97639404110413]
Test Case: 484 | Input/Output: [[-11.136521952463909 -91] -102.13652195246391]
Test Case: 485 | Input/Output: [[-73.02587855207203 -15] -88.02587855207203]
Test Case: 486 | Input/Output: [[-61.30039521223824 -32] -93.30039521223824]
Test Case: 487 | Input/Output: [[-2.323438304437417 25] 22.676561695562583]
Test Case: 488 | Input/Output: [[-60.41845040773006 23] -37.41845040773006]
Test Case: 489 | Input/Output: [[17.184449421484587 69] 86.18444942148459]
Test Case: 490 | Input/Output: [[50.998384090996325 -28] 22.998384090996325]
Test Case: 491 | Input/Output: [[85.39386173053003 -55] 30.393861730530034]
Test Case: 492 | Input/Output: [[1.6590379803230917 -70] -68.34096201967691]
Test Case: 493 | Input/Output: [[-68.0565875435374 -38] -106.0565875435374]
Test Case: 494 | Input/Output: [[86.05864110460871 29] 115.05864110460871]
Test Case: 495 | Input/Output: [[-88.65258219089375 -99] -187.65258219089375]
Test Case: 496 | Input/Output: [[4.744313968624667 82] 86.74431396862467]
Test Case: 497 | Input/Output: [[-35.385818804719406 -40] -75.3858188047194]
Test Case: 498 | Input/Output: [[24.392084769428266 -14] 10.392084769428266]
Test Case: 499 | Input/Output: [[64.21459730331449 9] 73.21459730331449]
Test Case: 500 | Input/Output: [[-33.47882017757193 91] 57.52117982242807]
Test Case: 501 | Input/Output: [[-47.36859639494395 91] 43.63140360505605]
Test Case: 502 | Input/Output: [[-92.56671123162977 50] -42.56671123162977]
Test Case: 503 | Input/Output: [[-79.90229852033899 -49] -128.902298520339]
Test Case: 504 | Input/Output: [[46.85662476122647 54] 100.85662476122647]
Test Case: 505 | Input/Output: [[-20.23431001281564 36] 15.76568998718436]
Test Case: 506 | Input/Output: [[53.11978690143519 5] 58.11978690143519]
Test Case: 507 | Input/Output: [[40.149442160525496 -34] 6.149442160525496]
Test Case: 508 | Input/Output: [[-0.7379836974041893 -19] -19.73798369740419]
Test Case: 509 | Input/Output: [[35.67789920042404 -90] -54.32210079957596]
Test Case: 510 | Input/Output: [[-7.823837563878655 22] 14.176162436121345]
Test Case: 511 | Input/Output: [[-96.03774949958968 40] -56.03774949958968]
Test Case: 512 | Input/Output: [[49.06819935502173 -23] 26.068199355021733]
Test Case: 513 | Input/Output: [[35.61667993179225 -51] -15.383320068207752]
Test Case: 514 | Input/Output: [[-19.123712188012803 53] 33.8762878119872]
Test Case: 515 | Input/Output: [[76.13176543922614 56] 132.13176543922614]
Test Case: 516 | Input/Output: [[4.624080523329482 -68] -63.37591947667052]
Test Case: 517 | Input/Output: [[14.789643975545985 83] 97.78964397554599]
Test Case: 518 | Input/Output: [[-5.8805062264938925 -14] -19.880506226493893]
Test Case: 519 | Input/Output: [[-28.759269799616206 97] 68.2407302003838]
Test Case: 520 | Input/Output: [[51.76019910227612 53] 104.76019910227612]
Test Case: 521 | Input/Output: [[-9.01024527632805 78] 68.98975472367195]
Test Case: 522 | Input/Output: [[-16.537795444777174 91] 74.46220455522283]
Test Case: 523 | Input/Output: [[65.61870995380846 -9] 56.61870995380846]
Test Case: 524 | Input/Output: [[-59.53402825222127 34] -25.53402825222127]
Test Case: 525 | Input/Output: [[8.10942965833405 -73] -64.89057034166595]
Test Case: 526 | Input/Output: [[44.22919329606165 -84] -39.77080670393835]
Test Case: 527 | Input/Output: [[-59.3844891587493 -53] -112.38448915874929]
Test Case: 528 | Input/Output: [[-63.01525612791481 1] -62.01525612791481]
Test Case: 529 | Input/Output: [[97.22433919528314 67] 164.22433919528314]
Test Case: 530 | Input/Output: [[-30.809682169271397 34] 3.1903178307286026]
Test Case: 531 | Input/Output: [[-12.037443088302766 99] 86.96255691169723]
Test Case: 532 | Input/Output: [[-46.805592882309675 12] -34.805592882309675]
Test Case: 533 | Input/Output: [[-19.60904626778475 51] 31.39095373221525]
Test Case: 534 | Input/Output: [[-11.454670986603006 -28] -39.454670986603006]
Test Case: 535 | Input/Output: [[3.764659176550822 -15] -11.235340823449178]
Test Case: 536 | Input/Output: [[14.423740835980723 64] 78.42374083598072]
Test Case: 537 | Input/Output: [[99.17541645723912 71] 170.17541645723912]
Test Case: 538 | Input/Output: [[5.004977260081645 -30] -24.995022739918355]
Test Case: 539 | Input/Output: [[-41.374697285555364 82] 40.625302714444636]
Test Case: 540 | Input/Output: [[-95.24895237935347 -34] -129.24895237935345]
Test Case: 541 | Input/Output: [[-42.86251228772466 66] 23.137487712275338]
Test Case: 542 | Input/Output: [[73.17374877235247 21] 94.17374877235247]
Test Case: 543 | Input/Output: [[-94.66356079018352 -18] -112.66356079018352]
Test Case: 544 | Input/Output: [[-37.034611328274615 -74] -111.03461132827462]
Test Case: 545 | Input/Output: [[-14.93853687387734 78] 63.06146312612266]
Test Case: 546 | Input/Output: [[-57.17684125025806 0] -57.17684125025806]
Test Case: 547 | Input/Output: [[-26.37168692507032 26] -0.3716869250703212]
Test Case: 548 | Input/Output: [[62.80710477423696 40] 102.80710477423696]
Test Case: 549 | Input/Output: [[69.12432453483606 -99] -29.875675465163937]
Test Case: 550 | Input/Output: [[-85.41063501538505 -22] -107.41063501538505]
Test Case: 551 | Input/Output: [[68.81562033216045 55] 123.81562033216045]
Test Case: 552 | Input/Output: [[37.95797754021183 -71] -33.04202245978817]
Test Case: 553 | Input/Output: [[67.87131544508779 93] 160.8713154450878]
Test Case: 554 | Input/Output: [[75.56322826415692 7] 82.56322826415692]
Test Case: 555 | Input/Output: [[60.53907521317484 54] 114.53907521317484]
Test Case: 556 | Input/Output: [[93.40277650367756 12] 105.40277650367756]
Test Case: 557 | Input/Output: [[95.72559747434065 3] 98.72559747434065]
Test Case: 558 | Input/Output: [[-89.98648668851638 93] 3.013513311483621]
Test Case: 559 | Input/Output: [[-57.08408391506627 -47] -104.08408391506627]
Test Case: 560 | Input/Output: [[-99.63615464154852 -83] -182.6361546415485]
Test Case: 561 | Input/Output: [[85.19914495004062 -50] 35.19914495004062]
Test Case: 562 | Input/Output: [[-38.01194117038782 -17] -55.01194117038782]
Test Case: 563 | Input/Output: [[73.73093341945875 -7] 66.73093341945875]
Test Case: 564 | Input/Output: [[69.10352215726684 91] 160.10352215726684]
Test Case: 565 | Input/Output: [[-26.456249656074576 -78] -104.45624965607458]
Test Case: 566 | Input/Output: [[68.95258163323174 -20] 48.952581633231745]
Test Case: 567 | Input/Output: [[-39.692487525509065 -88] -127.69248752550907]
Test Case: 568 | Input/Output: [[-86.42921150773014 95] 8.570788492269855]
Test Case: 569 | Input/Output: [[-71.00675037841202 -55] -126.00675037841202]
Test Case: 570 | Input/Output: [[73.48191666772124 -75] -1.5180833322787635]
Test Case: 571 | Input/Output: [[-86.4707486498709 78] -8.470748649870899]
Test Case: 572 | Input/Output: [[55.74144763324341 69] 124.74144763324341]
Test Case: 573 | Input/Output: [[-72.45447763837775 -17] -89.45447763837775]
Test Case: 574 | Input/Output: [[-82.76448311953264 -34] -116.76448311953264]
Test Case: 575 | Input/Output: [[-55.12388553914316 18] -37.12388553914316]
Test Case: 576 | Input/Output: [[-99.79099543444092 -8] -107.79099543444092]
Test Case: 577 | Input/Output: [[70.99729417228843 98] 168.99729417228843]
Test Case: 578 | Input/Output: [[51.662615574936666 -99] -47.337384425063334]
Test Case: 579 | Input/Output: [[-93.22586254737676 82] -11.225862547376764]
Test Case: 580 | Input/Output: [[-75.76912408432929 -75] -150.7691240843293]
Test Case: 581 | Input/Output: [[27.448556850977752 -40] -12.551443149022248]
Test Case: 582 | Input/Output: [[22.92143752816027 59] 81.92143752816027]
Test Case: 583 | Input/Output: [[5.633811228427916 87] 92.63381122842792]
Test Case: 584 | Input/Output: [[38.458383109498754 -67] -28.541616890501246]
Test Case: 585 | Input/Output: [[90.6133720165569 6] 96.6133720165569]
Test Case: 586 | Input/Output: [[-72.54519308226017 -66] -138.54519308226017]
Test Case: 587 | Input/Output: [[-51.33617307857761 -3] -54.33617307857761]
Test Case: 588 | Input/Output: [[-84.53978824865136 59] -25.539788248651362]
Test Case: 589 | Input/Output: [[-93.33504203933659 42] -51.335042039336585]
Test Case: 590 | Input/Output: [[-63.30678050566516 4] -59.30678050566516]
Test Case: 591 | Input/Output: [[47.20872758366795 -47] 0.20872758366795097]
Test Case: 592 | Input/Output: [[62.73627808284209 -15] 47.73627808284209]
Test Case: 593 | Input/Output: [[60.447262460151904 -14] 46.447262460151904]
Test Case: 594 | Input/Output: [[7.63278715669486 8] 15.63278715669486]
Test Case: 595 | Input/Output: [[93.40918027625315 -23] 70.40918027625315]
Test Case: 596 | Input/Output: [[-72.55482243313425 73] 0.44517756686575183]
Test Case: 597 | Input/Output: [[-47.4746970908406 73] 25.5253029091594]
Test Case: 598 | Input/Output: [[-56.64260368505849 -96] -152.64260368505848]
Test Case: 599 | Input/Output: [[12.442320998043854 -89] -76.55767900195615]
Test Case: 600 | Input/Output: [[-21.912139864531937 66] 44.08786013546806]
Test Case: 601 | Input/Output: [[-85.98356218521221 62] -23.983562185212207]
Test Case: 602 | Input/Output: [[-19.497284824831567 31] 11.502715175168433]
Test Case: 603 | Input/Output: [[53.07263480179455 -28] 25.07263480179455]
Test Case: 604 | Input/Output: [[6.517451989398367 24] 30.517451989398367]
Test Case: 605 | Input/Output: [[10.05878338366577 40] 50.05878338366577]
Test Case: 606 | Input/Output: [[-24.827791621758095 26] 1.1722083782419048]
Test Case: 607 | Input/Output: [[-20.01587760017523 -31] -51.01587760017523]
Test Case: 608 | Input/Output: [[-73.25927610312007 18] -55.25927610312007]
Test Case: 609 | Input/Output: [[48.30921996368204 58] 106.30921996368204]
Test Case: 610 | Input/Output: [[-30.563130664060623 -89] -119.56313066406062]
Test Case: 611 | Input/Output: [[19.586279122413245 10] 29.586279122413245]
Test Case: 612 | Input/Output: [[-47.80242016675136 49] 1.1975798332486391]
Test Case: 613 | Input/Output: [[-59.24103918314765 -29] -88.24103918314765]
Test Case: 614 | Input/Output: [[-60.231381611181355 73] 12.768618388818645]
Test Case: 615 | Input/Output: [[28.06476713054775 13] 41.06476713054775]
Test Case: 616 | Input/Output: [[-50.74976170039675 -86] -136.74976170039676]
Test Case: 617 | Input/Output: [[99.23566524913755 -41] 58.235665249137554]
Test Case: 618 | Input/Output: [[-87.049426812046 0] -87.049426812046]
Test Case: 619 | Input/Output: [[94.77360913971705 -11] 83.77360913971705]
Test Case: 620 | Input/Output: [[-5.470861528897714 31] 25.529138471102286]
Test Case: 621 | Input/Output: [[-71.31049950176664 40] -31.310499501766643]
Test Case: 622 | Input/Output: [[-54.85338848417041 -23] -77.85338848417041]
Test Case: 623 | Input/Output: [[-20.412245820430357 -74] -94.41224582043036]
Test Case: 624 | Input/Output: [[36.92026790880598 49] 85.92026790880598]
Test Case: 625 | Input/Output: [[-76.87392403596945 46] -30.873924035969452]
Test Case: 626 | Input/Output: [[57.0779828581295 -38] 19.077982858129502]
Test Case: 627 | Input/Output: [[68.98759635647406 41] 109.98759635647406]
Test Case: 628 | Input/Output: [[6.824320790233358 -2] 4.824320790233358]
Test Case: 629 | Input/Output: [[48.510428430257036 5] 53.510428430257036]
Test Case: 630 | Input/Output: [[38.10824416723824 27] 65.10824416723824]
Test Case: 631 | Input/Output: [[-89.78220869055717 -95] -184.78220869055718]
Test Case: 632 | Input/Output: [[13.773893896195517 -88] -74.22610610380448]
Test Case: 633 | Input/Output: [[-26.917051018701926 96] 69.08294898129807]
Test Case: 634 | Input/Output: [[-90.14851283290209 77] -13.148512832902085]
Test Case: 635 | Input/Output: [[75.62151341920284 -76] -0.37848658079715847]
Test Case: 636 | Input/Output: [[61.14438734171057 -19] 42.14438734171057]
Test Case: 637 | Input/Output: [[20.00340459470121 92] 112.00340459470121]
Test Case: 638 | Input/Output: [[86.27631845528313 -94] -7.723681544716868]
Test Case: 639 | Input/Output: [[-39.90774184424093 46] 6.092258155759069]
Test Case: 640 | Input/Output: [[-8.606449151709697 41] 32.3935508482903]
Test Case: 641 | Input/Output: [[6.302175947228534 -6] 0.3021759472285339]
Test Case: 642 | Input/Output: [[89.85751613334247 -58] 31.85751613334247]
Test Case: 643 | Input/Output: [[34.81231330259732 -25] 9.812313302597317]
Test Case: 644 | Input/Output: [[-44.63651479142483 -63] -107.63651479142483]
Test Case: 645 | Input/Output: [[-78.4210280389759 -59] -137.42102803897592]
Test Case: 646 | Input/Output: [[-38.00680342986129 39] 0.9931965701387071]
Test Case: 647 | Input/Output: [[16.440513303373265 -65] -48.559486696626735]
Test Case: 648 | Input/Output: [[-14.027673081679666 -4] -18.027673081679666]
Test Case: 649 | Input/Output: [[84.18443491215444 45] 129.18443491215444]
Test Case: 650 | Input/Output: [[-52.01726301295253 -27] -79.01726301295253]
Test Case: 651 | Input/Output: [[-88.45248248595811 27] -61.452482485958114]
Test Case: 652 | Input/Output: [[30.726118664592235 2] 32.726118664592235]
Test Case: 653 | Input/Output: [[-93.4708587945253 94] 0.5291412054747013]
Test Case: 654 | Input/Output: [[-52.42930211086505 -26] -78.42930211086505]
Test Case: 655 | Input/Output: [[-98.58207685444107 -95] -193.58207685444108]
Test Case: 656 | Input/Output: [[-64.14961132079755 -70] -134.14961132079753]
Test Case: 657 | Input/Output: [[-52.13329735125096 -58] -110.13329735125096]
Test Case: 658 | Input/Output: [[92.92500286917783 44] 136.92500286917783]
Test Case: 659 | Input/Output: [[-47.4210636339719 -1] -48.4210636339719]
Test Case: 660 | Input/Output: [[38.12512246759499 52] 90.12512246759499]
Test Case: 661 | Input/Output: [[79.86817736456052 2] 81.86817736456052]
Test Case: 662 | Input/Output: [[85.04945847563997 56] 141.04945847563997]
Test Case: 663 | Input/Output: [[-95.42788733885442 64] -31.42788733885442]
Test Case: 664 | Input/Output: [[16.42725192919947 -13] 3.427251929199471]
Test Case: 665 | Input/Output: [[-24.009111689921966 -58] -82.00911168992197]
Test Case: 666 | Input/Output: [[-56.009135972054395 -58] -114.0091359720544]
Test Case: 667 | Input/Output: [[22.11527471951436 84] 106.11527471951436]
Test Case: 668 | Input/Output: [[70.95054298778467 -60] 10.950542987784672]
Test Case: 669 | Input/Output: [[80.13792503866418 -84] -3.8620749613358214]
Test Case: 670 | Input/Output: [[32.269356056748705 34] 66.2693560567487]
Test Case: 671 | Input/Output: [[55.200684529951104 49] 104.2006845299511]
Test Case: 672 | Input/Output: [[98.85793827601577 -18] 80.85793827601577]
Test Case: 673 | Input/Output: [[-83.88772998286325 -62] -145.88772998286325]
Test Case: 674 | Input/Output: [[-91.68251488601089 57] -34.68251488601089]
Test Case: 675 | Input/Output: [[50.226168178606656 -12] 38.226168178606656]
Test Case: 676 | Input/Output: [[4.463065784849164 -50] -45.536934215150836]
Test Case: 677 | Input/Output: [[49.56967323072362 -92] -42.43032676927638]
Test Case: 678 | Input/Output: [[86.68259551896682 15] 101.68259551896682]
Test Case: 679 | Input/Output: [[57.55282949227859 -15] 42.55282949227859]
Test Case: 680 | Input/Output: [[51.6369006249609 -70] -18.3630993750391]
Test Case: 681 | Input/Output: [[69.74554440313821 41] 110.74554440313821]
Test Case: 682 | Input/Output: [[-45.41608338427212 36] -9.41608338427212]
Test Case: 683 | Input/Output: [[90.87064290363477 -4] 86.87064290363477]
Test Case: 684 | Input/Output: [[-25.69242697386656 -84] -109.69242697386656]
Test Case: 685 | Input/Output: [[-47.70159071960547 36] -11.70159071960547]
Test Case: 686 | Input/Output: [[17.949505740110254 -23] -5.050494259889746]
Test Case: 687 | Input/Output: [[-95.31996818307024 -85] -180.31996818307024]
Test Case: 688 | Input/Output: [[-36.94788221724219 -18] -54.94788221724219]
Test Case: 689 | Input/Output: [[36.75091260411824 -50] -13.249087395881759]
Test Case: 690 | Input/Output: [[15.871853167852109 -26] -10.128146832147891]
Test Case: 691 | Input/Output: [[-99.75307661025568 9] -90.75307661025568]
Test Case: 692 | Input/Output: [[96.7167302403598 -93] 3.7167302403597944]
Test Case: 693 | Input/Output: [[69.17928966599118 -19] 50.17928966599118]
Test Case: 694 | Input/Output: [[-96.06768958421085 -1] -97.06768958421085]
Test Case: 695 | Input/Output: [[39.71891006738812 -36] 3.718910067388123]
Test Case: 696 | Input/Output: [[36.219976415122744 4] 40.219976415122744]
Test Case: 697 | Input/Output: [[-66.82991244623888 0] -66.82991244623888]
Test Case: 698 | Input/Output: [[10.008944716633806 -68] -57.991055283366194]
Test Case: 699 | Input/Output: [[53.952717840358446 -19] 34.952717840358446]
Test Case: 700 | Input/Output: [[-8.266714603189925 -85] -93.26671460318993]
Test Case: 701 | Input/Output: [[71.97601709465678 92] 163.97601709465678]
Test Case: 702 | Input/Output: [[96.33150424343114 -46] 50.33150424343114]
Test Case: 703 | Input/Output: [[-17.89338994105914 -36] -53.89338994105914]
Test Case: 704 | Input/Output: [[-56.36664801735234 79] 22.63335198264766]
Test Case: 705 | Input/Output: [[-50.84422804713142 -63] -113.84422804713142]
Test Case: 706 | Input/Output: [[63.93396953833394 4] 67.93396953833394]
Test Case: 707 | Input/Output: [[-95.27032634516766 84] -11.27032634516766]
Test Case: 708 | Input/Output: [[84.99832919105066 -76] 8.998329191050658]
Test Case: 709 | Input/Output: [[-79.111370128293 -17] -96.111370128293]
Test Case: 710 | Input/Output: [[-27.920266291293586 42] 14.079733708706414]
Test Case: 711 | Input/Output: [[22.28755063685803 38] 60.28755063685803]
Test Case: 712 | Input/Output: [[8.918757425711902 30] 38.9187574257119]
Test Case: 713 | Input/Output: [[-51.0099680145885 -63] -114.00996801458851]
Test Case: 714 | Input/Output: [[-93.78898452217253 65] -28.788984522172527]
Test Case: 715 | Input/Output: [[-68.68253884088196 50] -18.68253884088196]
Test Case: 716 | Input/Output: [[48.786396655260916 -30] 18.786396655260916]
Test Case: 717 | Input/Output: [[-44.74647805825995 -5] -49.74647805825995]
Test Case: 718 | Input/Output: [[59.03338208655569 -28] 31.03338208655569]
Test Case: 719 | Input/Output: [[-47.214498831380844 -56] -103.21449883138084]
Test Case: 720 | Input/Output: [[74.86800630353204 75] 149.86800630353204]
Test Case: 721 | Input/Output: [[28.719258082375745 -62] -33.280741917624255]
Test Case: 722 | Input/Output: [[37.84291626507098 -66] -28.157083734929017]
Test Case: 723 | Input/Output: [[21.854811187495258 -31] -9.145188812504742]
Test Case: 724 | Input/Output: [[92.685861224245 42] 134.685861224245]
Test Case: 725 | Input/Output: [[76.67298717612854 24] 100.67298717612854]
Test Case: 726 | Input/Output: [[-66.78059581022782 34] -32.78059581022782]
Test Case: 727 | Input/Output: [[97.33201359208954 33] 130.33201359208954]
Test Case: 728 | Input/Output: [[-94.94419361431665 -7] -101.94419361431665]
Test Case: 729 | Input/Output: [[-62.20113252360853 83] 20.79886747639147]
Test Case: 730 | Input/Output: [[-4.929754354395627 -7] -11.929754354395627]
Test Case: 731 | Input/Output: [[-97.08315442854006 97] -0.08315442854005539]
Test Case: 732 | Input/Output: [[-81.38311279566949 49] -32.38311279566949]
Test Case: 733 | Input/Output: [[-90.30881198891798 92] 1.6911880110820192]
Test Case: 734 | Input/Output: [[82.00447541729804 -31] 51.00447541729804]
Test Case: 735 | Input/Output: [[23.795324582897237 -89] -65.20467541710276]
Test Case: 736 | Input/Output: [[-98.09255610177028 -61] -159.0925561017703]
Test Case: 737 | Input/Output: [[24.73592703687811 86] 110.73592703687811]
Test Case: 738 | Input/Output: [[-95.96223013530998 20] -75.96223013530998]
Test Case: 739 | Input/Output: [[7.582611991850442 19] 26.58261199185044]
Test Case: 740 | Input/Output: [[39.00868767887721 67] 106.00868767887721]
Test Case: 741 | Input/Output: [[-9.38441482547185 -84] -93.38441482547185]
Test Case: 742 | Input/Output: [[17.99369699348712 96] 113.99369699348712]
Test Case: 743 | Input/Output: [[-7.235843186658613 -2] -9.235843186658613]
Test Case: 744 | Input/Output: [[92.43005212030747 -12] 80.43005212030747]
Test Case: 745 | Input/Output: [[36.97951468215791 -70] -33.02048531784209]
Test Case: 746 | Input/Output: [[-12.830011747737032 -78] -90.83001174773703]
Test Case: 747 | Input/Output: [[-67.65363177491419 93] 25.34636822508581]
Test Case: 748 | Input/Output: [[76.58955192558207 70] 146.58955192558207]
Test Case: 749 | Input/Output: [[-33.17658219802733 -82] -115.17658219802733]
Test Case: 750 | Input/Output: [[42.42037126717088 12] 54.42037126717088]
Test Case: 751 | Input/Output: [[49.000264614956365 -26] 23.000264614956365]
Test Case: 752 | Input/Output: [[14.658092182861267 -87] -72.34190781713873]
Test Case: 753 | Input/Output: [[-49.67420104716829 -53] -102.67420104716828]
Test Case: 754 | Input/Output: [[20.4252362205588 58] 78.4252362205588]
Test Case: 755 | Input/Output: [[63.03047637552467 87] 150.03047637552467]
Test Case: 756 | Input/Output: [[25.60513920088769 31] 56.60513920088769]
Test Case: 757 | Input/Output: [[65.48048951636648 74] 139.48048951636648]
Test Case: 758 | Input/Output: [[-31.778841239266526 -33] -64.77884123926653]
Test Case: 759 | Input/Output: [[-23.991090000724697 38] 14.008909999275303]
Test Case: 760 | Input/Output: [[-62.039794951961014 -27] -89.03979495196101]
Test Case: 761 | Input/Output: [[-1.597395160235422 -3] -4.597395160235422]
Test Case: 762 | Input/Output: [[-36.3077124573278 75] 38.6922875426722]
Test Case: 763 | Input/Output: [[40.165589058260565 71] 111.16558905826057]
Test Case: 764 | Input/Output: [[-33.163224184276956 -71] -104.16322418427696]
Test Case: 765 | Input/Output: [[60.05571950278389 -45] 15.055719502783887]
Test Case: 766 | Input/Output: [[-5.032028868243032 -28] -33.03202886824303]
Test Case: 767 | Input/Output: [[6.836117473617961 20] 26.83611747361796]
Test Case: 768 | Input/Output: [[40.89042228431248 21] 61.89042228431248]
Test Case: 769 | Input/Output: [[93.56703040690005 87] 180.56703040690005]
Test Case: 770 | Input/Output: [[31.731038260116975 -35] -3.268961739883025]
Test Case: 771 | Input/Output: [[93.98600687986033 -2] 91.98600687986033]
Test Case: 772 | Input/Output: [[95.49724509537486 70] 165.49724509537486]
Test Case: 773 | Input/Output: [[88.51973673114614 5] 93.51973673114614]
Test Case: 774 | Input/Output: [[-97.52315235808038 -92] -189.52315235808038]
Test Case: 775 | Input/Output: [[6.998526795573582 -30] -23.001473204426418]
Test Case: 776 | Input/Output: [[48.333215339587355 49] 97.33321533958735]
Test Case: 777 | Input/Output: [[-87.41134187197075 -99] -186.41134187197076]
Test Case: 778 | Input/Output: [[66.81724585494126 89] 155.81724585494126]
Test Case: 779 | Input/Output: [[74.161141080183 56] 130.161141080183]
Test Case: 780 | Input/Output: [[1.2485540005011728 -91] -89.75144599949883]
Test Case: 781 | Input/Output: [[-82.46871029939282 -67] -149.46871029939282]
Test Case: 782 | Input/Output: [[5.557439883520914 61] 66.55743988352091]
Test Case: 783 | Input/Output: [[84.48249177102352 93] 177.48249177102352]
Test Case: 784 | Input/Output: [[-95.00017990418579 92] -3.000179904185785]
Test Case: 785 | Input/Output: [[-71.0872676139397 -81] -152.0872676139397]
Test Case: 786 | Input/Output: [[-52.15770856854234 -85] -137.15770856854235]
Test Case: 787 | Input/Output: [[92.57291984820014 46] 138.57291984820014]
Test Case: 788 | Input/Output: [[88.01741025942178 86] 174.01741025942178]
Test Case: 789 | Input/Output: [[-67.34497883743612 40] -27.344978837436116]
Test Case: 790 | Input/Output: [[-85.80472680762132 -15] -100.80472680762132]
Test Case: 791 | Input/Output: [[-43.175324040332484 16] -27.175324040332484]
Test Case: 792 | Input/Output: [[-8.91423023678584 61] 52.08576976321416]
Test Case: 793 | Input/Output: [[-27.800940275105447 -71] -98.80094027510545]
Test Case: 794 | Input/Output: [[41.11374151960371 -27] 14.113741519603707]
Test Case: 795 | Input/Output: [[22.568588504566662 12] 34.56858850456666]
Test Case: 796 | Input/Output: [[67.53916699251903 36] 103.53916699251903]
Test Case: 797 | Input/Output: [[83.12179966163967 71] 154.12179966163967]
Test Case: 798 | Input/Output: [[28.054541854268223 -3] 25.054541854268223]
Test Case: 799 | Input/Output: [[-45.273080428704574 50] 4.726919571295426]
Test Case: 800 | Input/Output: [[10.38825594614734 -29] -18.61174405385266]
Test Case: 801 | Input/Output: [[-12.965353797759917 15] 2.034646202240083]
Test Case: 802 | Input/Output: [[-7.516823936493537 7] -0.5168239364935374]
Test Case: 803 | Input/Output: [[-82.40277731211809 -24] -106.40277731211809]
Test Case: 804 | Input/Output: [[-31.604318626380334 18] -13.604318626380334]
Test Case: 805 | Input/Output: [[66.95856197548548 10] 76.95856197548548]
Test Case: 806 | Input/Output: [[-80.20321704722662 -21] -101.20321704722662]
Test Case: 807 | Input/Output: [[43.113343596766924 56] 99.11334359676692]
Test Case: 808 | Input/Output: [[-56.37423874745138 26] -30.37423874745138]
Test Case: 809 | Input/Output: [[79.39488459827089 -52] 27.39488459827089]
Test Case: 810 | Input/Output: [[78.50479700824962 -46] 32.504797008249625]
Test Case: 811 | Input/Output: [[-42.696830109899 -45] -87.696830109899]
Test Case: 812 | Input/Output: [[78.95498319990082 81] 159.95498319990082]
Test Case: 813 | Input/Output: [[-16.576758715595147 -36] -52.57675871559515]
Test Case: 814 | Input/Output: [[23.474735429012597 53] 76.4747354290126]
Test Case: 815 | Input/Output: [[-85.43930486527596 66] -19.439304865275957]
Test Case: 816 | Input/Output: [[57.90257836751195 53] 110.90257836751195]
Test Case: 817 | Input/Output: [[-13.781544216538322 74] 60.21845578346168]
Test Case: 818 | Input/Output: [[88.07039827391435 -36] 52.07039827391435]
Test Case: 819 | Input/Output: [[-67.08186030936417 -57] -124.08186030936417]
Test Case: 820 | Input/Output: [[-81.1051495571788 -99] -180.1051495571788]
Test Case: 821 | Input/Output: [[-79.54895189551496 49] -30.54895189551496]
Test Case: 822 | Input/Output: [[-24.40700766274624 45] 20.59299233725376]
Test Case: 823 | Input/Output: [[-65.10406934865662 -47] -112.10406934865662]
Test Case: 824 | Input/Output: [[-17.833008358184514 49] 31.166991641815486]
Test Case: 825 | Input/Output: [[7.029507866731819 98] 105.02950786673182]
Test Case: 826 | Input/Output: [[-84.42625281533283 -34] -118.42625281533283]
Test Case: 827 | Input/Output: [[-55.87385995853291 36] -19.87385995853291]
Test Case: 828 | Input/Output: [[-26.91452634988751 28] 1.0854736501124904]
Test Case: 829 | Input/Output: [[84.79023484798418 98] 182.79023484798418]
Test Case: 830 | Input/Output: [[-98.40076689377224 -68] -166.40076689377224]
Test Case: 831 | Input/Output: [[80.15518220978382 100] 180.15518220978382]
Test Case: 832 | Input/Output: [[57.06941991037161 -81] -23.930580089628393]
Test Case: 833 | Input/Output: [[4.440478710338482 -11] -6.559521289661518]
Test Case: 834 | Input/Output: [[46.46465722728104 17] 63.46465722728104]
Test Case: 835 | Input/Output: [[67.41831436431778 63] 130.41831436431778]
Test Case: 836 | Input/Output: [[-26.751292946961215 17] -9.751292946961215]
Test Case: 837 | Input/Output: [[-35.92491342098707 32] -3.9249134209870675]
Test Case: 838 | Input/Output: [[19.851817450166237 -20] -0.14818254983376278]
Test Case: 839 | Input/Output: [[75.91451720937519 77] 152.9145172093752]
Test Case: 840 | Input/Output: [[52.86799372505752 19] 71.86799372505752]
Test Case: 841 | Input/Output: [[36.34859505320972 -78] -41.65140494679028]
Test Case: 842 | Input/Output: [[82.6978864282517 18] 100.6978864282517]
Test Case: 843 | Input/Output: [[75.80324590415216 -79] -3.1967540958478367]
Test Case: 844 | Input/Output: [[58.231957555486076 27] 85.23195755548608]
Test Case: 845 | Input/Output: [[34.06524417225779 93] 127.06524417225779]
Test Case: 846 | Input/Output: [[-47.34928349025979 -58] -105.3492834902598]
Test Case: 847 | Input/Output: [[-12.079298087563586 -51] -63.079298087563586]
Test Case: 848 | Input/Output: [[85.77363229774346 8] 93.77363229774346]
Test Case: 849 | Input/Output: [[75.81903727678588 -88] -12.180962723214122]
Test Case: 850 | Input/Output: [[32.54561594159324 -33] -0.45438405840675955]
Test Case: 851 | Input/Output: [[-47.40908898775638 73] 25.590911012243623]
Test Case: 852 | Input/Output: [[85.91711613978094 -79] 6.917116139780944]
Test Case: 853 | Input/Output: [[60.02555422776038 76] 136.02555422776038]
Test Case: 854 | Input/Output: [[55.064258886460266 -17] 38.064258886460266]
Test Case: 855 | Input/Output: [[86.86105268627426 -52] 34.86105268627426]
Test Case: 856 | Input/Output: [[2.5164172500584243 -82] -79.48358274994158]
Test Case: 857 | Input/Output: [[-89.03936624541164 -40] -129.03936624541166]
Test Case: 858 | Input/Output: [[-28.020598012094197 -62] -90.0205980120942]
Test Case: 859 | Input/Output: [[48.78496501522639 -79] -30.21503498477361]
Test Case: 860 | Input/Output: [[37.145350003163514 -17] 20.145350003163514]
Test Case: 861 | Input/Output: [[-78.9029550362842 -4] -82.9029550362842]
Test Case: 862 | Input/Output: [[-45.02961246229482 -73] -118.02961246229482]
Test Case: 863 | Input/Output: [[-22.324624971841885 83] 60.675375028158115]
Test Case: 864 | Input/Output: [[-37.85200149657513 41] 3.1479985034248728]
Test Case: 865 | Input/Output: [[-77.95152931441787 -78] -155.95152931441788]
Test Case: 866 | Input/Output: [[-86.36009283249713 88] 1.6399071675028694]
Test Case: 867 | Input/Output: [[21.638766917177293 75] 96.63876691717729]
Test Case: 868 | Input/Output: [[82.78954009172412 -31] 51.78954009172412]
Test Case: 869 | Input/Output: [[-61.381190758445214 -6] -67.38119075844521]
Test Case: 870 | Input/Output: [[-29.194816432958078 79] 49.80518356704192]
Test Case: 871 | Input/Output: [[-91.25054995138633 11] -80.25054995138633]
Test Case: 872 | Input/Output: [[34.47515847360776 29] 63.47515847360776]
Test Case: 873 | Input/Output: [[-96.78719827287401 -11] -107.78719827287401]
Test Case: 874 | Input/Output: [[-99.15518935475818 -94] -193.1551893547582]
Test Case: 875 | Input/Output: [[-17.260388559234713 -1] -18.260388559234713]
Test Case: 876 | Input/Output: [[40.47439472488773 68] 108.47439472488773]
Test Case: 877 | Input/Output: [[-37.29747221189683 -25] -62.29747221189683]
Test Case: 878 | Input/Output: [[-52.0357791394084 47] -5.0357791394083975]
Test Case: 879 | Input/Output: [[-1.0742509417497814 -18] -19.07425094174978]
Test Case: 880 | Input/Output: [[26.940473577815567 43] 69.94047357781557]
Test Case: 881 | Input/Output: [[-91.46798852311888 37] -54.467988523118876]
Test Case: 882 | Input/Output: [[-35.126967763027636 -39] -74.12696776302764]
Test Case: 883 | Input/Output: [[86.17233438623805 -28] 58.17233438623805]
Test Case: 884 | Input/Output: [[61.75579388167844 -98] -36.24420611832156]
Test Case: 885 | Input/Output: [[24.690999101279388 -31] -6.309000898720612]
Test Case: 886 | Input/Output: [[-4.817875594130342 -93] -97.81787559413034]
Test Case: 887 | Input/Output: [[32.964776365148765 82] 114.96477636514877]
Test Case: 888 | Input/Output: [[0.8300832335372803 9] 9.83008323353728]
Test Case: 889 | Input/Output: [[-52.28119667879534 70] 17.71880332120466]
Test Case: 890 | Input/Output: [[-86.62140880797537 42] -44.62140880797537]
Test Case: 891 | Input/Output: [[64.53668821989433 57] 121.53668821989433]
Test Case: 892 | Input/Output: [[56.3007513823689 -41] 15.300751382368901]
Test Case: 893 | Input/Output: [[43.77607812950791 84] 127.77607812950791]
Test Case: 894 | Input/Output: [[-78.54082910093447 -69] -147.54082910093447]
Test Case: 895 | Input/Output: [[-97.5696581916964 -85] -182.56965819169642]
Test Case: 896 | Input/Output: [[72.77835370503018 20] 92.77835370503018]
Test Case: 897 | Input/Output: [[11.73441774855155 -69] -57.26558225144845]
Test Case: 898 | Input/Output: [[15.858783294487182 71] 86.85878329448718]
Test Case: 899 | Input/Output: [[59.18000328173031 -79] -19.819996718269692]
Test Case: 900 | Input/Output: [[96.64260291780477 -44] 52.642602917804766]
Test Case: 901 | Input/Output: [[-55.36797618413127 -32] -87.36797618413127]
Test Case: 902 | Input/Output: [[53.74387510044701 1] 54.74387510044701]
Test Case: 903 | Input/Output: [[39.415147269468434 -36] 3.4151472694684344]
Test Case: 904 | Input/Output: [[42.446936488353856 41] 83.44693648835386]
Test Case: 905 | Input/Output: [[55.54647310376345 -6] 49.54647310376345]
Test Case: 906 | Input/Output: [[-80.47843577941384 -25] -105.47843577941384]
Test Case: 907 | Input/Output: [[-70.73316020869409 98] 27.266839791305912]
Test Case: 908 | Input/Output: [[26.350897097390288 -19] 7.350897097390288]
Test Case: 909 | Input/Output: [[-77.51764239588917 -31] -108.51764239588917]
Test Case: 910 | Input/Output: [[-41.67236406063979 -8] -49.67236406063979]
Test Case: 911 | Input/Output: [[25.521333429889978 36] 61.52133342988998]
Test Case: 912 | Input/Output: [[-25.863572164566918 33] 7.136427835433082]
Test Case: 913 | Input/Output: [[24.82395181332471 33] 57.82395181332471]
Test Case: 914 | Input/Output: [[5.871817232369224 -74] -68.12818276763078]
Test Case: 915 | Input/Output: [[49.47332160787272 -49] 0.4733216078727196]
Test Case: 916 | Input/Output: [[-64.25651235867076 -57] -121.25651235867076]
Test Case: 917 | Input/Output: [[-85.18019567257463 0] -85.18019567257463]
Test Case: 918 | Input/Output: [[79.61686485751565 -41] 38.61686485751565]
Test Case: 919 | Input/Output: [[-40.347267938251896 -32] -72.34726793825189]
Test Case: 920 | Input/Output: [[97.83240905834606 71] 168.83240905834606]
Test Case: 921 | Input/Output: [[98.70361615824788 -54] 44.70361615824788]
Test Case: 922 | Input/Output: [[91.86095439733754 -25] 66.86095439733754]
Test Case: 923 | Input/Output: [[-59.14232968834858 79] 19.857670311651418]
Test Case: 924 | Input/Output: [[47.38808052182699 -69] -21.611919478173007]
Test Case: 925 | Input/Output: [[-48.27329822801718 82] 33.72670177198282]
Test Case: 926 | Input/Output: [[-7.424689050787876 72] 64.57531094921212]
Test Case: 927 | Input/Output: [[-34.001423297154346 10] -24.001423297154346]
Test Case: 928 | Input/Output: [[-27.014472520262345 -78] -105.01447252026234]
Test Case: 929 | Input/Output: [[16.231489519265423 -16] 0.23148951926542338]
Test Case: 930 | Input/Output: [[43.24658496811824 59] 102.24658496811824]
Test Case: 931 | Input/Output: [[-15.361523420539697 49] 33.6384765794603]
Test Case: 932 | Input/Output: [[33.79318290040416 3] 36.79318290040416]
Test Case: 933 | Input/Output: [[86.49609159699398 -36] 50.49609159699398]
Test Case: 934 | Input/Output: [[29.59678517960478 -38] -8.40321482039522]
Test Case: 935 | Input/Output: [[75.27312867810008 -25] 50.27312867810008]
Test Case: 936 | Input/Output: [[-46.265387770219405 -14] -60.265387770219405]
Test Case: 937 | Input/Output: [[-27.228750902220526 -62] -89.22875090222053]
Test Case: 938 | Input/Output: [[44.677779391762755 -35] 9.677779391762755]
Test Case: 939 | Input/Output: [[86.37940405407369 82] 168.3794040540737]
Test Case: 940 | Input/Output: [[-61.345790836209524 43] -18.345790836209524]
Test Case: 941 | Input/Output: [[79.71099717035935 -32] 47.71099717035935]
Test Case: 942 | Input/Output: [[49.59121986694166 -100] -50.40878013305834]
Test Case: 943 | Input/Output: [[96.92825256020475 3] 99.92825256020475]
Test Case: 944 | Input/Output: [[82.48361555769668 55] 137.48361555769668]
Test Case: 945 | Input/Output: [[-88.43104805134338 78] -10.431048051343382]
Test Case: 946 | Input/Output: [[-28.97708817413755 7] -21.97708817413755]
Test Case: 947 | Input/Output: [[-68.04074377737984 -4] -72.04074377737984]
Test Case: 948 | Input/Output: [[68.55076291858927 42] 110.55076291858927]
Test Case: 949 | Input/Output: [[58.856639485654114 95] 153.8566394856541]
Test Case: 950 | Input/Output: [[28.833886403193077 -7] 21.833886403193077]
Test Case: 951 | Input/Output: [[-39.6423503118144 -31] -70.6423503118144]
Test Case: 952 | Input/Output: [[-62.49975803170182 17] -45.49975803170182]
Test Case: 953 | Input/Output: [[-15.156992847314996 -75] -90.156992847315]
Test Case: 954 | Input/Output: [[20.29082743282362 -45] -24.70917256717638]
Test Case: 955 | Input/Output: [[-68.60090060878974 20] -48.60090060878974]
Test Case: 956 | Input/Output: [[-74.24230364774733 -59] -133.24230364774735]
Test Case: 957 | Input/Output: [[-1.786460889833407 54] 52.21353911016659]
Test Case: 958 | Input/Output: [[66.76161167476224 14] 80.76161167476224]
Test Case: 959 | Input/Output: [[1.9957260366779508 71] 72.99572603667795]
Test Case: 960 | Input/Output: [[28.77659858931426 -61] -32.22340141068574]
Test Case: 961 | Input/Output: [[31.280216504316854 31] 62.280216504316854]
Test Case: 962 | Input/Output: [[-26.352387376008892 -29] -55.35238737600889]
Test Case: 963 | Input/Output: [[11.008320918485225 -85] -73.99167908151477]
Test Case: 964 | Input/Output: [[15.020149823825761 4] 19.02014982382576]
Test Case: 965 | Input/Output: [[44.46882755101052 26] 70.46882755101052]
Test Case: 966 | Input/Output: [[76.45604573678531 12] 88.45604573678531]
Test Case: 967 | Input/Output: [[-27.918494025125113 -5] -32.91849402512511]
Test Case: 968 | Input/Output: [[43.08092062153983 -10] 33.08092062153983]
Test Case: 969 | Input/Output: [[66.28075795594205 46] 112.28075795594205]
Test Case: 970 | Input/Output: [[-39.10052554563581 -72] -111.1005255456358]
Test Case: 971 | Input/Output: [[-9.150763917915 -63] -72.150763917915]
Test Case: 972 | Input/Output: [[30.46942702885397 33] 63.46942702885397]
Test Case: 973 | Input/Output: [[71.85258023180432 -10] 61.852580231804325]
Test Case: 974 | Input/Output: [[-95.48718422998033 50] -45.48718422998033]
Test Case: 975 | Input/Output: [[5.1066410274402045 -61] -55.893358972559795]
Test Case: 976 | Input/Output: [[90.85399462559897 -69] 21.853994625598972]
Test Case: 977 | Input/Output: [[-41.756392179578874 -71] -112.75639217957888]
Test Case: 978 | Input/Output: [[35.355971161166025 -71] -35.644028838833975]
Test Case: 979 | Input/Output: [[-88.37978886911426 59] -29.379788869114265]
Test Case: 980 | Input/Output: [[-84.13893097247669 -8] -92.13893097247669]
Test Case: 981 | Input/Output: [[73.41880691880894 64] 137.41880691880894]
Test Case: 982 | Input/Output: [[91.2343681350689 -36] 55.234368135068905]
Test Case: 983 | Input/Output: [[8.687678256992797 -15] -6.312321743007203]
Test Case: 984 | Input/Output: [[99.74939388951827 78] 177.74939388951827]
Test Case: 985 | Input/Output: [[20.24746608322448 14] 34.24746608322448]
Test Case: 986 | Input/Output: [[-64.22256051656836 -15] -79.22256051656836]
Test Case: 987 | Input/Output: [[30.2093128855048 -45] -14.7906871144952]
Test Case: 988 | Input/Output: [[43.15284077042148 46] 89.15284077042148]
Test Case: 989 | Input/Output: [[-65.81536243902755 -31] -96.81536243902755]
Test Case: 990 | Input/Output: [[-58.02178362534593 9] -49.02178362534593]
Test Case: 991 | Input/Output: [[83.96407593850623 57] 140.96407593850623]
Test Case: 992 | Input/Output: [[16.293134477891485 45] 61.293134477891485]
Test Case: 993 | Input/Output: [[-98.20749835211873 -61] -159.20749835211873]
Test Case: 994 | Input/Output: [[39.64118442535886 60] 99.64118442535886]
Test Case: 995 | Input/Output: [[-95.64894196609683 31] -64.64894196609683]
Test Case: 996 | Input/Output: [[7.604159150099065 66] 73.60415915009906]
Test Case: 997 | Input/Output: [[-18.40623569932221 1] -17.40623569932221]
Test Case: 998 | Input/Output: [[23.27019249925857 -59] -35.72980750074143]
Test Case: 999 | Input/Output: [[-62.93287367810463 -42] -104.93287367810463]
;;******************************
Registered instructions: #{code_atom genome_uniform_tag_mutation code_car print_newline integer_sub integer_inc boolean_stackdepth return_exec_pop zip_dup_items integer_tag_string_instruction vector_integer_eq autoconstructive_integer_rand boolean_pop genome_close_inc string_fromchar vector_string_shove zip_yankdup genome_new genome_gene_genome_instruction vector_float_yankdup exec_yankdup vector_integer_shove integer_yankdup string_flush boolean_swap zip_empty exec_shove vector_boolean_yank code_eq exec_y boolean_yank integer_eq genome_silence string_butlast code_contains string_conjchar code_do*count vector_float_last genome_uniform_instruction_mutation genome_pop string_substring integer_mult vector_string_dup_times code_length vector_integer_dup boolean_or code_position boolean_empty zip_fromcode print_vector_string vector_boolean_swap return_frominteger char_dup_items vector_float_pushall return_genome_pop genome_gene_close char_iswhitespace code_cdr exec_do*vector_integer integer_rand vector_string_replacefirst string_first vector_boolean_first exec_do*while exec_string_iterate string_indexofchar vector_float_replace integer_fromstring code_list code_swap char_frominteger genome_gene_randomize vector_integer_emptyvector vector_string_eq exec_dup_items vector_float_butlast boolean_dup_items genome_uniform_string_mutation exec_empty zip_end? exec_fromzipnode string_shove vector_boolean_pushall zip_insert_left_fromcode exec_rot integer_tag_integer_instruction vector_string_concat vector_float_indexof genome_instruction_eq code_pop vector_string_subvec vector_integer_swap code_subst char_pop return_string_pop zip_yank exec_dup vector_integer_butlast vector_float_rest vector_string_flush boolean_fromfloat code_fromziprights float_sin boolean_flush char_isdigit float_lte exec_fromziproot vector_integer_empty print_code vector_string_stackdepth string_reverse exec_k vector_integer_yank float_frominteger char_rot vector_integer_dup_times print_char integer_tag_boolean_instruction vector_integer_stackdepth vector_boolean_concat boolean_xor integer_gte genome_yankdup vector_float_shove vector_integer_take boolean_dup_times code_quote string_replacefirst return_fromstring exec_fromziplefts vector_integer_yankdup boolean_shove float_lt vector_string_dup vector_string_occurrencesof vector_integer_replace zip_branch? vector_float_reverse float_mod vector_float_subvec integer_tag_code_instruction string_last print_boolean boolean_rot vector_string_rest integer_div vector_float_remove integer_tag_exec_instruction integer_fromfloat integer_lte code_fromzipchildren environment_end vector_integer_rot integer_mod string_concat vector_string_butlast genome_swap code_null exec_do*count vector_float_emptyvector vector_string_yankdup integer_tag_float_instruction integer_rot float_yankdup vector_string_rot zip_replace_fromexec genome_uniform_boolean_mutation vector_string_take vector_float_dup_items integer_add vector_integer_occurrencesof integer_shove string_dup_times genome_dup return_code_pop char_swap integer_max return_fromexec code_wrap genome_genesis return_float_pop code_flush genome_yank zip_shove vector_integer_flush vector_integer_subvec vector_boolean_indexof vector_float_pop char_dup_times genome_uniform_silence_mutation genome_uniform_crossover vector_string_remove vector_integer_contains zip_remove code_append vector_float_eq vector_integer_conj string_eq zip_leftmost code_yankdup code_rot integer_stackdepth float_max vector_boolean_set zip_append_child_fromexec zip_next vector_float_conj zip_fromexec code_dup_times float_dup_items string_take zip_left genome_if_gene_genome_instruction zip_replace_fromcode char_stackdepth return_fromchar genome_eq vector_integer_replacefirst float_stackdepth code_fromziproot integer_dup_times float_fromchar genome_uniform_combination_and_deletion float_gt boolean_dup float_fromboolean code_fromzipnode genome_rot vector_float_replacefirst vector_boolean_conj exec_dup_times vector_boolean_dup vector_integer_indexof vector_string_swap exec_eq string_emptystring string_swap integer_yank exec_while float_empty print_vector_boolean integer_min exec_swap genome_rotate integer_fromchar vector_string_yank string_stackdepth code_do*range string_replacechar char_allfromstring vector_integer_rest vector_boolean_length char_yank vector_float_empty code_fromfloat genome_parent2 return_fromcode string_pop code_dup_items float_eq integer_untag_instruction integer_dup_items vector_boolean_empty zip_insert_child_fromexec vector_string_last string_nth code_do* return_zip_pop vector_string_pop zip_rot vector_integer_nth exec_do*range vector_integer_dup_items exec_if char_shove zip_down zip_insert_left_fromexec code_frominteger vector_boolean_remove vector_integer_remove boolean_invert_first_then_and genome_flush print_string integer_fromboolean char_yankdup code_do vector_string_first boolean_frominteger string_setchar vector_integer_last char_isletter genome_gene_dup vector_integer_concat return_fromzip print_integer genome_uniform_float_mutation code_map boolean_eq float_gte return_fromfloat genome_gene_copy string_occurrencesofchar string_replacefirstchar print_float boolean_rand integer_flush float_shove string_replace char_dup float_pop char_eq vector_float_nth vector_string_conj integer_gt vector_float_dup_times return_integer_pop genome_gene_replace float_sub vector_integer_length vector_float_set vector_string_indexof vector_boolean_rest code_dup vector_boolean_shove zip_eq float_min boolean_not float_mult float_fromstring genome_unsilence code_if vector_boolean_dup_items vector_integer_pop vector_boolean_last exec_do*times zip_pop genome_gene_silent zip_rightmost float_dec vector_float_contains genome_gene_copy_range environment_new exec_do*vector_string code_nthcdr string_empty char_empty exec_pop vector_integer_set autoconstructive_boolean_rand genome_uniform_addition_and_deletion vector_float_rot string_yankdup exec_do*vector_float string_removechar code_extract vector_string_replace vector_float_first genome_parent1 return_tagspace char_flush genome_uniform_integer_mutation vector_float_occurrencesof vector_string_emptyvector float_add code_stackdepth exec_s zip_insert_right_fromexec float_dup integer_tag_char_instruction vector_string_nth zip_stackdepth vector_integer_reverse print_vector_integer char_fromfloat code_do*times code_noop zip_swap code_yank integer_lt vector_boolean_eq genome_stackdepth code_fromziplefts noop_open_paren genome_uniform_deletion vector_boolean_dup_times string_containschar string_yank char_rand zip_flush vector_boolean_rot float_swap exec_fromziprights vector_string_pushall vector_string_set vector_boolean_flush return_fromgenome exec_noop code_size vector_boolean_stackdepth vector_integer_pushall vector_boolean_reverse integer_swap string_split vector_boolean_contains string_fromboolean return_boolean_pop vector_float_dup vector_boolean_replace vector_string_dup_items integer_dup vector_boolean_nth vector_string_length genome_uniform_addition string_rest zip_insert_child_fromcode float_tan string_rot string_rand exec_yank string_parse_to_chars integer_pop integer_empty vector_float_flush genome_if_autoconstructing vector_float_yank noop_delete_prev_paren_pair print_exec zip_append_child_fromcode genome_gene_delete float_dup_times code_empty float_inc zip_right vector_float_length float_rand genome_uniform_close_mutation integer_dec string_contains return_fromboolean vector_float_concat vector_float_stackdepth exec_do*vector_boolean vector_integer_first genome_shove code_rand print_vector_float float_rot return_char_pop vector_string_contains genome_autoconstructing vector_boolean_occurrencesof string_dup_items genome_empty zip_prev genome_toggle_silent vector_string_reverse zip_dup code_cons code_member exec_stackdepth float_flush boolean_and integer_tagged_instruction vector_boolean_butlast string_length float_cos string_frominteger exec_flush vector_string_empty exec_when vector_float_swap genome_close_dec code_insert vector_boolean_pop float_div zip_insert_right_fromcode code_fromboolean vector_boolean_take code_shove environment_begin vector_float_take boolean_invert_second_then_and code_container code_nth vector_boolean_subvec float_yank zip_up vector_boolean_emptyvector vector_boolean_replacefirst genome_alternation zip_dup_times string_fromfloat vector_boolean_yankdup string_dup boolean_yankdup exec_fromzipchildren}
Starting PushGP run.
Clojush version = 3.11.1-1-SNAPSHOTHash of last Git commit = 8a64f874173fae27ed1a77827849de0fade43c2b
GitHub link = https://github.com/lspector/Clojush/commit/8a64f874173fae27ed1a77827849de0fade43c2b
age-combining-function = :average
age-mediated-parent-selection = false
alignment-deviation = 5
alternation-rate = 0.01
atom-generators = (#object[clojush.problems.software.number_io$fn__6694 0x2beee3e8 clojush.problems.software.number_io$fn__6694@2beee3e8] #object[clojush.problems.software.number_io$fn__6696 0x58bad46f clojush.problems.software.number_io$fn__6696@58bad46f] #object[clojush.instructions.tag$tag_instruction_erc$fn__1963 0x20231384 clojush.instructions.tag$tag_instruction_erc$fn__1963@20231384] #object[clojush.instructions.tag$tagged_instruction_erc$fn__1969 0x35becbd4 clojush.instructions.tag$tagged_instruction_erc$fn__1969@35becbd4] in1 in2 print_newline integer_sub integer_inc integer_yankdup integer_mult float_sin float_frominteger float_mod integer_div integer_fromfloat integer_mod integer_rot float_yankdup integer_add integer_shove integer_max integer_stackdepth float_max float_dup_items float_stackdepth integer_dup_times integer_yank integer_min integer_dup_items print_integer print_float integer_flush float_shove float_pop float_sub float_min float_mult float_dec float_add float_dup float_swap integer_swap integer_dup float_tan integer_pop float_dup_times float_inc integer_dec float_rot float_flush float_cos float_div float_yank)
autoconstructive = false
autoconstructive-boolean-rand-enrichment = 0
autoconstructive-clone-decay = :same
autoconstructive-clone-probability = 0.0
autoconstructive-decay = 0.0
autoconstructive-diffmeans-children = 10
autoconstructive-diversification-test = :gecco2016
autoconstructive-environments = false
autoconstructive-genome-instructions = :all
autoconstructive-integer-rand-enrichment = 0
autoconstructive-parent-decay = 0.0
autoconstructive-si-children = 8
autoconstructive-tag-types = [:integer :boolean :exec :float :char :string :code]
close-increment-rate = 0.2
close-parens-probabilities = [0.772 0.206 0.021 0.001]
csv-columns = [:generation :location :total-error :push-program-size]
csv-log-filename = log.csv
decimation-ratio = 1
decimation-tournament-size = 2
edn-additional-keys = [:generation :location]
edn-keys = [:uuid :parent-uuids :genetic-operators :program :genome :total-error :errors]
edn-log-filename = log.edn
epigenetic-markers = []
epsilon-lexicase-epsilon = nil
epsilon-lexicase-probability = 1
error-function = #object[clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704 0x342723a3 clojush.problems.software.number_io$make_number_io_error_function_from_cases$the_actual_num_io_error_function__6704@342723a3]
error-threshold = 1.0E-4
evalpush-limit = 200
evalpush-time-limit = 0
exit-on-success = true
final-report-simplifications = 5000
genetic-operator-probabilities = {:alternation 0.3, :uniform-mutation 0.2, [:alternation :uniform-mutation] 0.5}
improvement-discount = 0.5
individuals-for-novelty-archive-per-generation = 0
json-log-filename = log.json
json-log-program-strings = false
label = nil
lexicase-leakage = 0.1
lexicase-slippage = 0
log-fitnesses-for-all-cases = false
maintain-ancestors = false
max-error = 5000
max-generations = 200
max-genome-size-in-initial-program = 100
max-point-evaluations = 1.0E101
max-points = 800
meta-error-categories = []
normalization = :none
novelty-distance-metric = :euclidean
novelty-number-of-neighbors-k = 25
parent-reversion-probability = 1.0
parent-selection = :tournament
pop-when-tagging = true
population-size = 1000
print-ancestors-of-solution = false
print-cosmos-data = false
print-csv-logs = false
print-edn-logs = false
print-error-frequencies-by-case = false
print-errors = true
print-history = false
print-homology-data = false
print-json-logs = false
print-selection-counts = false
print-timings = true
problem-specific-initial-report = #object[clojush.problems.software.number_io$number_io_initial_report 0x4ec427 clojush.problems.software.number_io$number_io_initial_report@4ec427]
problem-specific-report = #object[clojush.problems.software.number_io$num_io_report 0xfde487b clojush.problems.software.number_io$num_io_report@fde487b]
random-screen = false
random-seed = -39 -61 -17 -107 -44 49 -110 -49 -16 -16 122 -32 -99 4 -64 37
random-threshold-lexicase-probability = 1
random-toggle-lexicase-probability = 1
randomly-truncated-lexicase-probability = 1
record-host = nil
replace-child-that-exceeds-size-limit-with = :random
report-simplifications = 0
return-simplified-on-failure = false
reuse-errors = true
self-mate-avoidance-limit = 0
silent-instruction-probability = 0.2
sort-meta-errors-for-lexicase = :random
tag-enrichment = 0
tag-enrichment-types = [:integer :boolean :exec :float :char :string :code]
tag-limit = 10000
top-level-pop-code = false
top-level-push-code = false
total-error-method = :sum
tournament-size = 7
track-instruction-maps = false
uniform-addition-and-deletion-rate = 0.01
uniform-addition-rate = 0.01
uniform-close-mutation-rate = 0.1
uniform-combination-and-deletion-rate = 0.01
uniform-combination-rate = 0.01
uniform-deletion-rate = 0.01
uniform-mutation-constant-tweak-rate = 0.5
uniform-mutation-float-gaussian-standard-deviation = 1.0
uniform-mutation-int-gaussian-standard-deviation = 1
uniform-mutation-rate = 0.01
uniform-mutation-string-char-change-rate = 0.1
uniform-mutation-tag-gaussian-standard-deviation = 100
uniform-silence-mutation-rate = 0.1
use-single-thread = false

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Generating initial population...
Processing generation: 0
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 0
;;******************************
;; -*- Number IO problem report - generation 0
Test total error for best: 60921.994600000005
Test mean error for best: 30.46100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -51.0         
Correct output: -111.892428812 | Program output: -96.0         
Correct output: -50.5084198428 | Program output: -78.0         
Correct output: 43.4091085878  | Program output: -31.0         
Correct output: 135.7828450917 | Program output: 45.0          
Correct output: -36.0049045144 | Program output: -60.0         
Correct output: -54.8912669799 | Program output: -60.0         
Correct output: -101.4024240283 | Program output: -96.0         
Correct output: -36.8440401492 | Program output: -8.0          
Correct output: -32.0101752266 | Program output: -27.0         
Correct output: -30.9280763402 | Program output: -30.0         
Correct output: -7.1922309574  | Program output: -19.0         
Correct output: 9.2440077884   | Program output: -44.0         
Correct output: -75.601313294  | Program output: -100.0        
Correct output: 117.7063323673 | Program output: 77.0          
Correct output: 136.2064676055 | Program output: 70.0          
Correct output: -106.5738029547 | Program output: -78.0         
Correct output: 135.179935086  | Program output: 39.0          
Correct output: 79.8229926043  | Program output: 56.0          
Correct output: 120.9514376691 | Program output: 91.0          
Correct output: -16.7588893337 | Program output: -21.0         
Correct output: -1.0143626863  | Program output: -8.0          
Correct output: 82.2861853158  | Program output: 59.0          
Correct output: 2.7192599311   | Program output: -28.0         
Correct output: -95.0573298011 | Program output: -39.0         
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_frominteger})
Best program: (integer_yankdup integer_add integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger integer_yank integer_min float_dup_times integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup float_min integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec float_mult integer_yank integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop integer_dup_items float_pop float_dup_items float_dup_items float_frominteger)
Errors: [81.5309 12 15.8924 12 27.4916 11 74.4091 11 90.7828 11 23.9951 10 5.1087 12 5.4024 12 28.844 11 5.0102 11 0.9281 9 11.8078 9 53.244 9 24.3987 11 40.7063 11 66.2065 12 28.5738 12 96.1799 10 23.823 11 29.9514 12 4.2411 12 6.9856 10 23.2862 12 30.7193 11 56.0573 10]
Total: 1129.5761999999997
Mean: 22.591524
Genome size: 60
Size: 61
Percent parens: 0.016
--- Population Statistics ---
Average total errors in population: 17849.6957748
Median total errors in population: 25342.0
Error averages by case: (718.7665505000018 13.937 716.1131019000015 13.235 698.1911301000004 13.748 695.6560097000007 12.394 715.008026600001 13.162 694.609694400001 13.773 694.1152355000008 13.962 710.8839048000023 13.968 693.6348243000004 13.123 688.2645153000016 13.083 688.8592897000017 12.952 684.5619090000001 12.988 689.0001289999991 11.701 707.314546499999 13.068 711.8212464999993 13.232 716.458908699997 13.16 714.8434961000017 13.88 714.6679480999986 12.385 702.4133148999973 12.512 714.3605573000019 13.03 682.4153342000006 14.07 675.4141809999992 12.898 700.7436697999974 12.444 686.6426668999998 11.746 707.4525839999981 13.032)
Error minima by case: (35.9703 2 14.8924 2 0.2961 8 1.4027 1 10.3233 3 2.1796 8 0.2329 9 4.4024 3 3.0187 2 1.8151 2 0.0719 1 0.1052 8 0.756 2 0.7145 8 7.7533 2 10.7469 2 10.0132 3 9.7203 2 4.177 2 4.5082 2 0.7589 8 0.0144 8 1.7138 1 0.2807 1 1.5033 1)
Average genome size in population (length): 51.308
Average program size in population (points): 52.308
Average percent parens in population: 0.040
Minimum age in population: 0.0
Maximum age in population: 0.0
Average age in population: 0.0
Median age in population: 0.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 1
Genome diversity (% unique Plush genomes):	 1.0
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 1
Syntactic diversity (% unique Push programs):	 1.0
Total error diversity:				 0.319
Error (vector) diversity:			 0.349
Behavioral diversity:				 0.377
--- Run Statistics ---
Number of program evaluations used so far: 1000
Number of point (instruction) evaluations so far: 1286546
--- Timings ---
Current time: 1529615626526 milliseconds
Total Time:           3.4 seconds
Initialization:       0.1 seconds,  3.4%
Reproduction:         0.6 seconds, 16.8%
Fitness Testing:      2.7 seconds, 79.8%
Report:               0.0 seconds,  0.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 0
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 1
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 1
;;******************************
;; -*- Number IO problem report - generation 1
Test total error for best: 60716.994600000005
Test mean error for best: 30.35850
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -51.00
       
Correct output: -111.892428812 | Program output: -96.00
       
Correct output: -50.5084198428 | Program output: -78.00
       
Correct output: 43.4091085878  | Program output: -31.00
       
Correct output: 135.7828450917 | Program output: 45.00
        
Correct output: -36.0049045144 | Program output: -60.00
       
Correct output: -54.8912669799 | Program output: -60.00
       
Correct output: -101.4024240283 | Program output: -96.00
       
Correct output: -36.8440401492 | Program output: -8.00
        
Correct output: -32.0101752266 | Program output: -27.00
       
Correct output: -30.9280763402 | Program output: -30.00
       
Correct output: -7.1922309574  | Program output: -19.00
       
Correct output: 9.2440077884   | Program output: -44.00
       
Correct output: -75.601313294  | Program output: -100.00
      
Correct output: 117.7063323673 | Program output: 77.00
        
Correct output: 136.2064676055 | Program output: 70.00
        
Correct output: -106.5738029547 | Program output: -78.00
       
Correct output: 135.179935086  | Program output: 39.00
        
Correct output: 79.8229926043  | Program output: 56.00
        
Correct output: 120.9514376691 | Program output: 91.00
        
Correct output: -16.7588893337 | Program output: -21.00
       
Correct output: -1.0143626863  | Program output: -8.00
        
Correct output: 82.2861853158  | Program output: 59.00
        
Correct output: 2.7192599311   | Program output: -28.00
       
Correct output: -95.0573298011 | Program output: -39.00
       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_shove} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction print_newline} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_mod} {:instruction float_sub} {:instruction float_cos} {:instruction float_sub})
Best program: (integer_add integer_shove integer_min integer_mod integer_dec float_cos integer_add integer_dup in2 float_frominteger integer_yank integer_min float_dup_times integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup float_min integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec float_mult integer_yank integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop integer_dup_items float_pop float_mult -40.87435704053455 float_tan float_inc float_sin float_div print_integer float_flush float_inc float_mult integer_stackdepth float_div print_newline float_dup integer_dup_times float_dup_times integer_yankdup integer_dec integer_dec float_mod float_sub float_cos float_sub)
Errors: [81.5309 11 15.8924 12 27.4916 11 74.4091 10 90.7828 11 23.9951 10 5.1087 12 5.4024 11 28.844 10 5.0102 10 0.9281 8 11.8078 9 53.244 9 24.3987 11 40.7063 11 66.2065 11 28.5738 12 96.1799 10 23.823 11 29.9514 12 4.2411 12 6.9856 10 23.2862 12 30.7193 11 56.0573 10]
Total: 1122.5761999999997
Mean: 22.451525
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 6308.382946900005
Median total errors in population: 2053.5190000000002
Error averages by case: (282.1163147000027 11.666 272.35704860000226 11.208 237.29814319999977 12.511 231.38605999999868 10.397 272.1842760999969 11.039 228.1084701000001 12.403 228.6526077999995 12.897 263.753607399999 11.912 223.8925111000014 10.925 216.35751969999887 10.844 214.75242149999892 10.663 202.73850190000002 11.755 218.5217105000016 9.79 252.41446470000042 12.043 262.78577999999834 11.114 273.6053414999995 11.022 268.6020714000026 11.589 273.30824919999753 10.427 239.25375610000143 10.582 266.4574193999983 10.765 201.9290414999998 13.171 192.26793249999972 11.78 238.9472240000008 10.514 207.1886056999991 9.978 257.77086829999695 10.738)
Error minima by case: (4.4691 2 14.8924 2 0.2961 8 5.4091 1 10.3233 3 2.1796 8 1.7602 8 4.4024 3 3.0187 2 1.8151 2 0.0719 1 0.1052 8 0.9074 2 0.3987 8 7.7533 2 6.2065 2 10.0132 3 9.7203 2 4.3842 2 4.5082 2 0.2411 8 0.0144 7 2.7138 1 0.2807 1 1.5033 1)
Average genome size in population (length): 60.039
Average program size in population (points): 61.039
Average percent parens in population: 0.021
Minimum age in population: 1.0
Maximum age in population: 2.0
Average age in population: 1.507
Median age in population: 2.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.788
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.788
Total error diversity:				 0.295
Error (vector) diversity:			 0.311
Behavioral diversity:				 0.339
--- Run Statistics ---
Number of program evaluations used so far: 2000
Number of point (instruction) evaluations so far: 2792170
--- Timings ---
Current time: 1529615630358 milliseconds
Total Time:           7.2 seconds
Initialization:       0.1 seconds,  1.6%
Reproduction:         2.3 seconds, 31.4%
Fitness Testing:      4.3 seconds, 59.8%
Report:               0.5 seconds,  7.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 1
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 2
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 2
;;******************************
;; -*- Number IO problem report - generation 2
Test total error for best: 60445.714599999985
Test mean error for best: 30.22286
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -51.01        
Correct output: -111.892428812 | Program output: -96.01        
Correct output: -50.5084198428 | Program output: -78.01        
Correct output: 43.4091085878  | Program output: -31.01        
Correct output: 135.7828450917 | Program output: 45.01         
Correct output: -36.0049045144 | Program output: -60.01        
Correct output: -54.8912669799 | Program output: -60.01        
Correct output: -101.4024240283 | Program output: -96.01        
Correct output: -36.8440401492 | Program output: -8.01         
Correct output: -32.0101752266 | Program output: -27.01        
Correct output: -30.9280763402 | Program output: -30.01        
Correct output: -7.1922309574  | Program output: -19.01        
Correct output: 9.2440077884   | Program output: -44.01        
Correct output: -75.601313294  | Program output: -100.01       
Correct output: 117.7063323673 | Program output: 77.01         
Correct output: 136.2064676055 | Program output: 70.01         
Correct output: -106.5738029547 | Program output: -78.01        
Correct output: 135.179935086  | Program output: 39.01         
Correct output: 79.8229926043  | Program output: 56.01         
Correct output: 120.9514376691 | Program output: 91.01         
Correct output: -16.7588893337 | Program output: -21.01        
Correct output: -1.0143626863  | Program output: -8.01         
Correct output: 82.2861853158  | Program output: 59.01         
Correct output: 2.7192599311   | Program output: -28.01        
Correct output: -95.0573298011 | Program output: -39.01        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_yankdup} {:instruction print_float} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_max} {:instruction float_rot} {:instruction float_shove})
Best program: (integer_yankdup integer_add integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger integer_yank integer_min float_dup_times integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup float_min integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec float_mult integer_yank integer_sub integer_swap integer_div integer_stackdepth print_integer float_yankdup print_float float_dup_items float_sub float_max float_rot float_shove)
Errors: [81.5209 11 15.8824 11 27.5016 10 74.4191 10 90.7728 10 24.0051 9 5.1187 11 5.3924 12 28.834 10 5.0002 10 0.9181 9 11.8178 9 53.254 9 24.4087 10 40.6963 11 66.1965 12 28.5638 12 96.1699 10 23.813 11 29.9414 11 4.2511 12 6.9956 9 23.2762 11 30.7293 10 56.0473 9]
Total: 1114.5261999999998
Mean: 22.290524
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 4968.899624600005
Median total errors in population: 1164.5761999999997
Error averages by case: (221.3007052000025 10.805 193.42581020000148 10.481 190.34580950000068 12.378 206.51899039999844 9.729 216.76609379999726 10.275 183.0484198000001 11.766 173.3598757000009 12.596 186.78676229999965 11.632 176.5231184000013 10.335 166.1882741999992 9.925 162.84116819999957 9.53 165.91483780000058 11.149 195.20611990000214 8.75 194.95749149999895 11.865 195.11618889999886 10.262 209.14646000000005 10.265 196.04927910000214 10.791 218.28140369999807 9.575 178.12544190000102 10.037 192.7324282999991 10.142 162.25144140000128 13.199 160.1959216000015 11.505 178.25593460000098 10.019 177.7753003999987 9.381 201.7083477999971 9.686)
Error minima by case: (48.5614 2 12.8724 2 2.4984 9 2.1806 1 43.7828 3 2.1796 9 3.1087 10 2.3824 3 3.0187 2 1.8151 2 0.0719 1 0.1052 8 4.244 2 8.3682 8 25.7063 2 44.2065 2 22.6043 3 38.0 2 12.177 2 27.9514 2 0.7589 8 0.0144 9 9.7138 1 0.4772 1 11.0878 1)
Average genome size in population (length): 55.04
Average program size in population (points): 56.04
Average percent parens in population: 0.023
Minimum age in population: 2.0
Maximum age in population: 4.0
Average age in population: 2.999
Median age in population: 3.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 44
Genome diversity (% unique Plush genomes):	 0.696
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 44
Syntactic diversity (% unique Push programs):	 0.696
Total error diversity:				 0.139
Error (vector) diversity:			 0.145
Behavioral diversity:				 0.161
--- Run Statistics ---
Number of program evaluations used so far: 3000
Number of point (instruction) evaluations so far: 4172227
--- Timings ---
Current time: 1529615633411 milliseconds
Total Time:          10.4 seconds
Initialization:       0.1 seconds,  1.1%
Reproduction:         3.7 seconds, 35.3%
Fitness Testing:      5.6 seconds, 54.0%
Report:               1.0 seconds,  9.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 2
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 3
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 3
;;******************************
;; -*- Number IO problem report - generation 3
Test total error for best: 60445.714599999985
Test mean error for best: 30.22286
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -51.01        
Correct output: -111.892428812 | Program output: -96.01        
Correct output: -50.5084198428 | Program output: -78.01        
Correct output: 43.4091085878  | Program output: -31.01        
Correct output: 135.7828450917 | Program output: 45.01         
Correct output: -36.0049045144 | Program output: -60.01        
Correct output: -54.8912669799 | Program output: -60.01        
Correct output: -101.4024240283 | Program output: -96.01        
Correct output: -36.8440401492 | Program output: -8.01         
Correct output: -32.0101752266 | Program output: -27.01        
Correct output: -30.9280763402 | Program output: -30.01        
Correct output: -7.1922309574  | Program output: -19.01        
Correct output: 9.2440077884   | Program output: -44.01        
Correct output: -75.601313294  | Program output: -100.01       
Correct output: 117.7063323673 | Program output: 77.01         
Correct output: 136.2064676055 | Program output: 70.01         
Correct output: -106.5738029547 | Program output: -78.01        
Correct output: 135.179935086  | Program output: 39.01         
Correct output: 79.8229926043  | Program output: 56.01         
Correct output: 120.9514376691 | Program output: 91.01         
Correct output: -16.7588893337 | Program output: -21.01        
Correct output: -1.0143626863  | Program output: -8.01         
Correct output: 82.2861853158  | Program output: 59.01         
Correct output: 2.7192599311   | Program output: -28.01        
Correct output: -95.0573298011 | Program output: -39.01        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_yankdup} {:instruction print_float} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_max} {:instruction float_rot} {:instruction float_shove})
Best program: (integer_yankdup float_pop integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger integer_yank integer_min float_dup_times integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup float_min integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec float_mult integer_yank integer_sub integer_swap integer_div integer_stackdepth print_integer float_yankdup print_float float_dup_items float_sub float_max float_rot float_shove)
Errors: [81.5209 11 15.8824 11 27.5016 10 74.4191 10 90.7728 10 24.0051 9 5.1187 11 5.3924 12 28.834 10 5.0002 10 0.9181 9 11.8178 9 53.254 9 24.4087 10 40.6963 11 66.1965 12 28.5638 12 96.1699 10 23.813 11 29.9414 11 4.2511 12 6.9956 9 23.2762 11 30.7293 10 56.0473 9]
Total: 1114.5261999999998
Mean: 22.290524
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3932.3337811000074
Median total errors in population: 1129.5761999999997
Error averages by case: (188.15076690000237 12.187 132.22477559999837 12.148 140.22279719999918 11.658 180.5333588999985 11.135 193.6892624999968 11.557 137.7525513000001 10.803 121.6723048999984 12.208 122.87175150000192 12.881 140.24787129999928 11.555 120.35240970000086 11.205 117.76336510000102 10.127 125.62122739999866 9.839 160.99313430000237 9.657 138.42618020000046 11.231 151.01157800000033 11.562 173.17569790000024 12.053 142.72201189999987 12.209 199.0367700999978 10.579 136.81347100000065 11.498 143.2143335000005 12.055 118.58363789999943 12.575 120.02878 10.699 134.99861700000133 11.982 141.6716722999981 11.049 165.42345469999768 10.68)
Error minima by case: (31.1075 3 12.8724 2 0.0521 8 7.4091 2 44.0 3 0.0049 9 4.1087 9 2.3824 3 0.844 2 1.9902 2 0.0719 1 6.1922 8 0.1447 2 16.6013 9 36.7063 2 55.2065 2 25.5538 3 38.0 3 1.177 2 20.2957 2 3.2411 9 0.0144 9 1.2862 2 1.7193 2 21.6709 1)
Average genome size in population (length): 47.378
Average program size in population (points): 48.378
Average percent parens in population: 0.027
Minimum age in population: 3.0
Maximum age in population: 6.0
Average age in population: 4.4885
Median age in population: 4.5
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 138
Genome diversity (% unique Plush genomes):	 0.622
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 138
Syntactic diversity (% unique Push programs):	 0.622
Total error diversity:				 0.068
Error (vector) diversity:			 0.075
Behavioral diversity:				 0.087
--- Run Statistics ---
Number of program evaluations used so far: 4000
Number of point (instruction) evaluations so far: 5358327
--- Timings ---
Current time: 1529615636217 milliseconds
Total Time:          13.3 seconds
Initialization:       0.1 seconds,  0.9%
Reproduction:         5.1 seconds, 38.3%
Fitness Testing:      6.7 seconds, 50.8%
Report:               1.3 seconds, 10.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 3
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 4
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 4
;;******************************
;; -*- Number IO problem report - generation 4
Test total error for best: 60445.714599999985
Test mean error for best: 30.22286
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -51.01        
Correct output: -111.892428812 | Program output: -96.01        
Correct output: -50.5084198428 | Program output: -78.01        
Correct output: 43.4091085878  | Program output: -31.01        
Correct output: 135.7828450917 | Program output: 45.01         
Correct output: -36.0049045144 | Program output: -60.01        
Correct output: -54.8912669799 | Program output: -60.01        
Correct output: -101.4024240283 | Program output: -96.01        
Correct output: -36.8440401492 | Program output: -8.01         
Correct output: -32.0101752266 | Program output: -27.01        
Correct output: -30.9280763402 | Program output: -30.01        
Correct output: -7.1922309574  | Program output: -19.01        
Correct output: 9.2440077884   | Program output: -44.01        
Correct output: -75.601313294  | Program output: -100.01       
Correct output: 117.7063323673 | Program output: 77.01         
Correct output: 136.2064676055 | Program output: 70.01         
Correct output: -106.5738029547 | Program output: -78.01        
Correct output: 135.179935086  | Program output: 39.01         
Correct output: 79.8229926043  | Program output: 56.01         
Correct output: 120.9514376691 | Program output: 91.01         
Correct output: -16.7588893337 | Program output: -21.01        
Correct output: -1.0143626863  | Program output: -8.01         
Correct output: 82.2861853158  | Program output: 59.01         
Correct output: 2.7192599311   | Program output: -28.01        
Correct output: -95.0573298011 | Program output: -39.01        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_yankdup} {:instruction print_float} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_max} {:instruction float_rot} {:instruction float_shove})
Best program: (integer_yankdup float_pop integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger integer_yank integer_min float_dup_times integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup float_min integer_inc float_add integer_pop integer_dec integer_yankdup float_min float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec float_mult integer_yank integer_sub integer_swap integer_div integer_stackdepth print_integer float_yankdup print_float float_dup_items float_sub float_max float_rot float_shove)
Errors: [81.5209 11 15.8824 11 27.5016 10 74.4191 10 90.7728 10 24.0051 9 5.1187 11 5.3924 12 28.834 10 5.0002 10 0.9181 9 11.8178 9 53.254 9 24.4087 10 40.6963 11 66.1965 12 28.5638 12 96.1699 10 23.813 11 29.9414 11 4.2511 12 6.9956 9 23.2762 11 30.7293 10 56.0473 9]
Total: 1114.5261999999998
Mean: 22.290524
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3421.965117700008
Median total errors in population: 1129.5761999999997
Error averages by case: (169.2911810000016 12.038 111.10604569999853 12.082 120.34765879999829 11.228 161.73295199999916 11.0 174.6767316999976 11.153 117.07265190000007 10.322 100.60424469999884 12.153 101.6161569000015 12.068 121.06199789999853 11.066 99.99164720000061 11.04 96.42802610000062 9.231 105.7289658999988 9.372 142.58440540000205 9.231 118.1916908000015 11.17 130.1871796000019 11.185 153.1941894000002 11.951 122.15518439999875 12.145 179.40905799999857 10.18 114.77329610000062 11.101 120.98895450000187 12.035 99.15042159999942 12.184 101.33261639999998 10.239 114.34665950000105 11.989 122.47765029999849 11.02 146.11455189999904 10.218)
Error minima by case: (51.0 3 15.8824 2 0.0521 8 20.4177 2 9.2172 3 0.0049 9 4.8485 9 5.3924 3 0.844 2 3.9898 2 0.9181 1 4.1922 8 8.244 2 15.8616 9 40.6963 3 33.7935 2 28.5638 3 3.8201 3 23.813 2 29.9414 2 4.2411 9 0.025 9 23.2762 2 1.7193 2 35.3176 2)
Average genome size in population (length): 48.006
Average program size in population (points): 49.006
Average percent parens in population: 0.026
Minimum age in population: 4.0
Maximum age in population: 7.75
Average age in population: 5.966375
Median age in population: 6.0
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 177
Genome diversity (% unique Plush genomes):	 0.643
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 177
Syntactic diversity (% unique Push programs):	 0.643
Total error diversity:				 0.035
Error (vector) diversity:			 0.036
Behavioral diversity:				 0.042
--- Run Statistics ---
Number of program evaluations used so far: 5000
Number of point (instruction) evaluations so far: 6559177
--- Timings ---
Current time: 1529615638978 milliseconds
Total Time:          16.0 seconds
Initialization:       0.1 seconds,  0.7%
Reproduction:         6.4 seconds, 40.2%
Fitness Testing:      7.8 seconds, 48.7%
Report:               1.7 seconds, 10.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 4
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 5
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 5
;;******************************
;; -*- Number IO problem report - generation 5
Test total error for best: 60445.714599999985
Test mean error for best: 30.22286
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -51.01        
Correct output: -111.892428812 | Program output: -96.01        
Correct output: -50.5084198428 | Program output: -78.01        
Correct output: 43.4091085878  | Program output: -31.01        
Correct output: 135.7828450917 | Program output: 45.01         
Correct output: -36.0049045144 | Program output: -60.01        
Correct output: -54.8912669799 | Program output: -60.01        
Correct output: -101.4024240283 | Program output: -96.01        
Correct output: -36.8440401492 | Program output: -8.01         
Correct output: -32.0101752266 | Program output: -27.01        
Correct output: -30.9280763402 | Program output: -30.01        
Correct output: -7.1922309574  | Program output: -19.01        
Correct output: 9.2440077884   | Program output: -44.01        
Correct output: -75.601313294  | Program output: -100.01       
Correct output: 117.7063323673 | Program output: 77.01         
Correct output: 136.2064676055 | Program output: 70.01         
Correct output: -106.5738029547 | Program output: -78.01        
Correct output: 135.179935086  | Program output: 39.01         
Correct output: 79.8229926043  | Program output: 56.01         
Correct output: 120.9514376691 | Program output: 91.01         
Correct output: -16.7588893337 | Program output: -21.01        
Correct output: -1.0143626863  | Program output: -8.01         
Correct output: 82.2861853158  | Program output: 59.01         
Correct output: 2.7192599311   | Program output: -28.01        
Correct output: -95.0573298011 | Program output: -39.01        
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_min} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_min} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_yankdup} {:instruction print_float} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_max} {:instruction float_rot} {:instruction float_shove})
Best program: (integer_yankdup float_pop integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger integer_yank float_min float_dup_times integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup float_min integer_inc float_add integer_pop integer_dec integer_yankdup float_min float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec float_mult integer_yank integer_sub integer_swap integer_div integer_stackdepth print_integer float_yankdup print_float float_dup_items float_sub float_max float_rot float_shove)
Errors: [81.5209 11 15.8824 11 27.5016 10 74.4191 10 90.7728 10 24.0051 9 5.1187 11 5.3924 12 28.834 10 5.0002 10 0.9181 9 11.8178 9 53.254 9 24.4087 10 40.6963 11 66.1965 12 28.5638 12 96.1699 10 23.813 11 29.9414 11 4.2511 12 6.9956 9 23.2762 11 30.7293 10 56.0473 9]
Total: 1114.5261999999998
Mean: 22.290524
Genome size: 51
Size: 52
Percent parens: 0.019
--- Population Statistics ---
Average total errors in population: 3117.6483203000075
Median total errors in population: 1129.5761999999997
Error averages by case: (158.2851452000012 11.768 100.62019039999835 12.045 107.65089709999852 11.132 148.76546040000045 10.737 162.81631629999816 11.084 104.8088686 10.238 89.3409069999986 12.083 91.03291820000125 11.832 107.8823029999985 10.796 87.10261850000019 10.774 84.49211160000027 9.017 92.8512464999993 9.344 127.93557610000246 9.25 107.17961870000133 11.075 118.3459075000019 11.167 142.33025830000028 11.719 111.2755710999989 12.145 167.4809296999987 10.16 102.69514540000064 11.105 110.04144760000186 11.97 86.71716549999945 12.169 87.38036799999995 10.146 102.34766180000106 11.942 109.0714706999984 10.982 134.3672171000001 10.151)
Error minima by case: (5.543 3 14.8924 2 14.5084 8 8.4091 2 45.0 3 0.0049 9 5.1087 10 4.4024 3 0.844 2 3.9898 2 0.0719 1 4.1922 8 0.9183 2 24.3987 10 40.6293 3 66.1365 2 27.5738 3 39.0 3 23.767 2 29.8604 2 4.2411 10 0.0144 9 23.2272 2 0.2807 2 19.9305 2)
Average genome size in population (length): 54.873
Average program size in population (points): 55.873
Average percent parens in population: 0.022
Minimum age in population: 5.0
Maximum age in population: 9.1875
Average age in population: 7.535125
Median age in population: 7.625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 83
Genome diversity (% unique Plush genomes):	 0.726
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 83
Syntactic diversity (% unique Push programs):	 0.726
Total error diversity:				 0.051
Error (vector) diversity:			 0.055
Behavioral diversity:				 0.062
--- Run Statistics ---
Number of program evaluations used so far: 6000
Number of point (instruction) evaluations so far: 7931327
--- Timings ---
Current time: 1529615641891 milliseconds
Total Time:          18.9 seconds
Initialization:       0.1 seconds,  0.6%
Reproduction:         7.8 seconds, 41.3%
Fitness Testing:      9.0 seconds, 47.6%
Report:               2.0 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 5
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 6
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 6
;;******************************
;; -*- Number IO problem report - generation 6
Test total error for best: 60226.71179999995
Test mean error for best: 30.11336
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -51.0101
     
Correct output: -111.892428812 | Program output: -96.0101
     
Correct output: -50.5084198428 | Program output: -78.0101
     
Correct output: 43.4091085878  | Program output: -31.0101
     
Correct output: 135.7828450917 | Program output: 45.0101
      
Correct output: -36.0049045144 | Program output: -60.0101
     
Correct output: -54.8912669799 | Program output: -60.0101
     
Correct output: -101.4024240283 | Program output: -96.0101
     
Correct output: -36.8440401492 | Program output: -8.0101
      
Correct output: -32.0101752266 | Program output: -27.0101
     
Correct output: -30.9280763402 | Program output: -30.0101
     
Correct output: -7.1922309574  | Program output: -19.0101
     
Correct output: 9.2440077884   | Program output: -44.0101
     
Correct output: -75.601313294  | Program output: -100.0101
    
Correct output: 117.7063323673 | Program output: 77.0101
      
Correct output: 136.2064676055 | Program output: 70.0101
      
Correct output: -106.5738029547 | Program output: -78.0101
     
Correct output: 135.179935086  | Program output: 39.0101
      
Correct output: 79.8229926043  | Program output: 56.0101
      
Correct output: 120.9514376691 | Program output: 91.0101
      
Correct output: -16.7588893337 | Program output: -21.0101
     
Correct output: -1.0143626863  | Program output: -8.0101
      
Correct output: 82.2861853158  | Program output: 59.0101
      
Correct output: 2.7192599311   | Program output: -28.0101
     
Correct output: -95.0573298011 | Program output: -39.0101
     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_shove} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_add} {:instruction integer_yankdup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_flush} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_yankdup} {:instruction float_sin} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction 11} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_yank} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction print_newline} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_mod} {:instruction float_sub} {:instruction float_cos} {:instruction float_sub})
Best program: (integer_add integer_shove integer_min integer_mod integer_dec float_cos integer_add integer_yankdup in2 float_frominteger integer_yank integer_min float_dup_times integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_flush integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add integer_yankdup float_sin integer_yank integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div 11 in1 float_flush integer_pop integer_dup_items float_pop float_mult -40.87435704053455 float_tan float_inc float_sin float_div print_integer float_flush float_tan float_inc float_sin float_div print_integer float_flush float_yank print_integer float_flush float_inc float_mult integer_stackdepth float_div print_newline float_dup integer_dup_times float_dup_times integer_yankdup integer_dec integer_dec float_mod float_sub float_cos float_sub)
Errors: [81.5208 10 15.8823 11 27.5017 10 74.4192 9 90.7727 10 24.0052 9 5.1188 11 5.3923 11 28.8339 9 5.0001 8 0.918 9 11.8179 9 53.2541 9 24.4088 9 40.6962 11 66.1964 11 28.5637 12 96.1698 10 23.8129 11 29.9413 12 4.2512 12 6.9957 9 23.2761 10 30.7294 10 56.0472 9]
Total: 1106.5257000000001
Mean: 22.130514
Genome size: 88
Size: 89
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3040.818571100005
Median total errors in population: 1122.5761999999997
Error averages by case: (154.98149040000135 11.316 97.56642199999911 11.798 104.33367309999952 10.864 145.28856959999996 10.346 160.61971999999943 10.818 101.29471569999967 9.931 85.82476369999935 11.819 87.93718980000043 11.621 103.91400149999927 10.368 83.25412319999988 10.339 80.66543990000012 8.784 88.97321639999964 9.315 124.40616890000196 9.268 104.10438270000083 10.846 117.77835230000106 11.129 141.5291978000006 11.548 108.06967619999973 12.1 165.16534109999898 10.136 101.86942399999998 11.105 109.6807780000011 11.768 82.82454769999948 12.152 83.41497169999978 9.877 101.5663082000002 11.71 105.32605469999929 10.761 130.83804250000094 9.873)
Error minima by case: (51.0 4 15.8714 3 13.5084 8 3.9017 3 9.2172 4 0.0049 7 5.1087 10 5.3814 4 0.156 3 3.9898 3 0.9071 2 4.1922 8 0.9183 3 24.3987 9 40.6853 4 33.7935 3 28.5528 4 3.8201 4 23.802 3 29.9304 3 4.2411 11 0.0144 8 23.2652 3 0.7193 3 39.0 3)
Average genome size in population (length): 65.583
Average program size in population (points): 66.583
Average percent parens in population: 0.016
Minimum age in population: 6.75
Maximum age in population: 11.0
Average age in population: 8.99884375
Median age in population: 9.03125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 52
Genome diversity (% unique Plush genomes):	 0.727
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 52
Syntactic diversity (% unique Push programs):	 0.727
Total error diversity:				 0.075
Error (vector) diversity:			 0.083
Behavioral diversity:				 0.093
--- Run Statistics ---
Number of program evaluations used so far: 7000
Number of point (instruction) evaluations so far: 9570952
--- Timings ---
Current time: 1529615645133 milliseconds
Total Time:          22.0 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:         9.2 seconds, 41.6%
Fitness Testing:     10.4 seconds, 47.3%
Report:               2.3 seconds, 10.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 6
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 7
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 7
;;******************************
;; -*- Number IO problem report - generation 7
Test total error for best: 60082.65859999996
Test mean error for best: 30.04133
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -51.0120
     
Correct output: -111.892428812 | Program output: -96.0120
     
Correct output: -50.5084198428 | Program output: -78.0120
     
Correct output: 43.4091085878  | Program output: -31.0120
     
Correct output: 135.7828450917 | Program output: 45.0120
      
Correct output: -36.0049045144 | Program output: -60.0120
     
Correct output: -54.8912669799 | Program output: -60.0120
     
Correct output: -101.4024240283 | Program output: -96.0120
     
Correct output: -36.8440401492 | Program output: -8.0120
      
Correct output: -32.0101752266 | Program output: -27.0120
     
Correct output: -30.9280763402 | Program output: -30.0120
     
Correct output: -7.1922309574  | Program output: -19.0120
     
Correct output: 9.2440077884   | Program output: -44.0120
     
Correct output: -75.601313294  | Program output: -100.0120
    
Correct output: 117.7063323673 | Program output: 77.0120
      
Correct output: 136.2064676055 | Program output: 70.0120
      
Correct output: -106.5738029547 | Program output: -78.0120
     
Correct output: 135.179935086  | Program output: 39.0120
      
Correct output: 79.8229926043  | Program output: 56.0120
      
Correct output: 120.9514376691 | Program output: 91.0120
      
Correct output: -16.7588893337 | Program output: -21.0120
     
Correct output: -1.0143626863  | Program output: -8.0120
      
Correct output: 82.2861853158  | Program output: 59.0120
      
Correct output: 2.7192599311   | Program output: -28.0120
     
Correct output: -95.0573298011 | Program output: -39.0120
     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yank} {:instruction float_min} {:instruction integer_swap} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_mult} {:instruction integer_yank} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction print_newline} {:instruction float_dup} {:instruction integer_dup_times} {:instruction float_dup_times} {:instruction integer_yankdup} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_mod} {:instruction float_sub} {:instruction float_cos} {:instruction float_sub})
Best program: (integer_yankdup float_pop integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger integer_yank integer_min float_dup_times integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup float_min integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec float_mult integer_yank float_min integer_swap integer_div integer_stackdepth print_integer float_yankdup float_mult integer_yank in1 integer_stackdepth float_sin float_dup_items integer_yank integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455 float_tan float_inc float_sin float_div print_integer float_flush float_inc float_mult integer_stackdepth float_div print_newline float_dup integer_dup_times float_dup_times integer_yankdup integer_dec integer_dec float_mod float_sub float_cos float_sub)
Errors: [81.5189 11 15.8804 11 27.5036 10 74.4211 10 90.7708 10 24.0071 10 5.1207 10 5.3904 10 28.832 10 4.9982 9 0.9161 8 11.8198 9 53.256 9 24.4107 9 40.6943 10 66.1945 11 28.5618 12 96.1679 10 23.811 10 29.9394 12 4.2531 12 6.9976 8 23.2742 11 30.7313 10 56.0453 9]
Total: 1106.5162
Mean: 22.130323
Genome size: 93
Size: 94
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3141.2502568999957
Median total errors in population: 1114.5261999999998
Error averages by case: (159.09201650000188 11.255 101.4038054000005 11.352 108.99642910000127 10.439 149.34139389999947 10.271 166.21857720000187 10.437 105.15096409999921 9.53 89.34303230000046 11.398 91.82702319999898 11.967 108.78395720000078 10.286 87.95598569999972 10.233 84.38962030000003 9.125 92.91628849999992 9.349 129.55981420000097 9.318 107.53032540000008 10.429 121.92680949999966 11.166 144.8653387000006 11.955 112.06012220000146 12.094 170.8835004999994 10.202 105.46002099999902 11.185 112.73954239999993 11.422 86.66592939999967 12.173 88.33806879999956 9.441 105.11127079999856 11.298 109.38272480000107 10.34 135.1926958000015 9.45)
Error minima by case: (30.5109 4 14.8824 3 14.5084 6 31.0 3 45.0 4 0.0049 6 4.1087 6 4.3924 4 0.844 3 3.9898 3 0.0819 2 6.5043 5 1.756 3 23.3987 7 36.3137 4 3.8135 3 27.5638 4 39.0 4 22.813 3 28.9414 3 3.2411 5 0.025 4 22.2762 3 1.7193 3 17.0373 3)
Average genome size in population (length): 60.159
Average program size in population (points): 61.159
Average percent parens in population: 0.017
Minimum age in population: 8.0
Maximum age in population: 12.265625
Average age in population: 10.4608125
Median age in population: 10.53125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 74
Genome diversity (% unique Plush genomes):	 0.724
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 74
Syntactic diversity (% unique Push programs):	 0.724
Total error diversity:				 0.084
Error (vector) diversity:			 0.095
Behavioral diversity:				 0.102
--- Run Statistics ---
Number of program evaluations used so far: 8000
Number of point (instruction) evaluations so far: 11074927
--- Timings ---
Current time: 1529615648270 milliseconds
Total Time:          25.1 seconds
Initialization:       0.1 seconds,  0.5%
Reproduction:        10.5 seconds, 41.8%
Fitness Testing:     11.7 seconds, 46.6%
Report:               2.8 seconds, 11.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 7
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 8
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 8
;;******************************
;; -*- Number IO problem report - generation 8
Test total error for best: 59986.65859999996
Test mean error for best: 29.99333
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -51.0120      
Correct output: -111.892428812 | Program output: -96.0120      
Correct output: -50.5084198428 | Program output: -78.0120      
Correct output: 43.4091085878  | Program output: -31.0120      
Correct output: 135.7828450917 | Program output: 45.0120       
Correct output: -36.0049045144 | Program output: -60.0120      
Correct output: -54.8912669799 | Program output: -60.0120      
Correct output: -101.4024240283 | Program output: -96.0120      
Correct output: -36.8440401492 | Program output: -8.0120       
Correct output: -32.0101752266 | Program output: -27.0120      
Correct output: -30.9280763402 | Program output: -30.0120      
Correct output: -7.1922309574  | Program output: -19.0120      
Correct output: 9.2440077884   | Program output: -44.0120      
Correct output: -75.601313294  | Program output: -100.0120     
Correct output: 117.7063323673 | Program output: 77.0120       
Correct output: 136.2064676055 | Program output: 70.0120       
Correct output: -106.5738029547 | Program output: -78.0120      
Correct output: 135.179935086  | Program output: 39.0120       
Correct output: 79.8229926043  | Program output: 56.0120       
Correct output: 120.9514376691 | Program output: 91.0120       
Correct output: -16.7588893337 | Program output: -21.0120      
Correct output: -1.0143626863  | Program output: -8.0120       
Correct output: 82.2861853158  | Program output: 59.0120       
Correct output: 2.7192599311   | Program output: -28.0120      
Correct output: -95.0573298011 | Program output: -39.0120      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yank} {:instruction float_min} {:instruction integer_swap} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_mult} {:instruction integer_yank} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc})
Best program: (integer_yankdup float_pop integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger integer_yank integer_min float_dup_times integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup float_min integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec float_mult integer_yank float_min integer_swap integer_div integer_stackdepth print_integer float_yankdup float_mult integer_yank in1 integer_stackdepth float_sin float_dup_items integer_yank integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455 float_tan float_inc float_sin float_div print_integer float_flush float_inc)
Errors: [81.5189 11 15.8804 11 27.5036 9 74.4211 10 90.7708 10 24.0071 9 5.1207 10 5.3904 10 28.832 10 4.9982 9 0.9161 8 11.8198 9 53.256 9 24.4107 9 40.6943 10 66.1945 11 28.5618 12 96.1679 10 23.811 10 29.9394 12 4.2531 12 6.9976 8 23.2742 11 30.7313 10 56.0453 9]
Total: 1104.5162
Mean: 22.090324
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2934.7322519999934
Median total errors in population: 1114.5261999999998
Error averages by case: (150.62984050000168 11.197 91.7506717000007 11.285 99.56669030000128 10.423 140.6677615999996 10.226 160.6785938000018 10.414 95.88845049999914 9.529 79.91055600000026 11.355 82.03693169999883 11.905 100.17370470000074 10.294 78.90428720000001 10.161 75.26257880000017 9.136 83.9374223 9.371 120.58620120000076 9.363 97.83211369999991 10.34 115.7553871999996 11.114 138.9710419000011 11.94 102.72888290000142 12.09 165.42129879999942 10.257 99.25494529999914 11.18 106.31532279999986 11.432 77.61797860000001 12.19 79.43403579999982 9.406 98.87705449999854 11.225 100.43348390000105 10.298 126.53801630000162 9.428)
Error minima by case: (34.1039 3 13.4654 2 26.4916 9 22.4091 2 45.0 3 22.9951 9 4.1087 10 2.9754 3 8.0 2 4.9602 2 0.8781 1 4.1922 8 0.756 2 22.8257 8 39.6963 3 65.1965 2 8.1468 3 39.0 3 22.813 2 28.9414 2 3.2411 11 0.025 8 22.2762 2 0.7193 2 3.3697 2)
Average genome size in population (length): 60.964
Average program size in population (points): 61.964
Average percent parens in population: 0.017
Minimum age in population: 9.25
Maximum age in population: 13.7734375
Average age in population: 11.9322578125
Median age in population: 11.9609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 36
Genome diversity (% unique Plush genomes):	 0.762
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 36
Syntactic diversity (% unique Push programs):	 0.762
Total error diversity:				 0.087
Error (vector) diversity:			 0.095
Behavioral diversity:				 0.1
--- Run Statistics ---
Number of program evaluations used so far: 9000
Number of point (instruction) evaluations so far: 12599052
--- Timings ---
Current time: 1529615651371 milliseconds
Total Time:          28.3 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        11.8 seconds, 41.8%
Fitness Testing:     13.0 seconds, 46.0%
Report:               3.3 seconds, 11.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 8
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 9
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 9
;;******************************
;; -*- Number IO problem report - generation 9
Test total error for best: 60086.71439999999
Test mean error for best: 30.04336
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -50.031       
Correct output: -111.892428812 | Program output: -95.031       
Correct output: -50.5084198428 | Program output: -77.031       
Correct output: 43.4091085878  | Program output: -30.031       
Correct output: 135.7828450917 | Program output: 46.031        
Correct output: -36.0049045144 | Program output: -59.031       
Correct output: -54.8912669799 | Program output: -59.031       
Correct output: -101.4024240283 | Program output: -95.031       
Correct output: -36.8440401492 | Program output: -7.031        
Correct output: -32.0101752266 | Program output: -26.031       
Correct output: -30.9280763402 | Program output: -29.031       
Correct output: -7.1922309574  | Program output: -18.031       
Correct output: 9.2440077884   | Program output: -43.031       
Correct output: -75.601313294  | Program output: -99.031       
Correct output: 117.7063323673 | Program output: 78.031        
Correct output: 136.2064676055 | Program output: 71.031        
Correct output: -106.5738029547 | Program output: -77.031       
Correct output: 135.179935086  | Program output: 40.031        
Correct output: 79.8229926043  | Program output: 57.031        
Correct output: 120.9514376691 | Program output: 92.031        
Correct output: -16.7588893337 | Program output: -20.031       
Correct output: -1.0143626863  | Program output: -7.031        
Correct output: 82.2861853158  | Program output: 60.031        
Correct output: 2.7192599311   | Program output: -27.031       
Correct output: -95.0573298011 | Program output: -38.031       
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_shove} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_swap} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_tan} {:instruction float_inc} {:instruction integer_pop} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult})
Best program: (integer_add integer_shove integer_min integer_mod integer_dec float_cos integer_add integer_dup in2 float_frominteger float_frominteger integer_yank integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop integer_dec integer_swap float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec print_float float_min integer_stackdepth float_add float_dec float_mult integer_yank integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 float_sin float_div print_integer float_flush float_inc float_tan float_inc integer_pop float_div print_integer float_flush float_inc float_mult)
Errors: [82.4999 11 16.8614 11 26.5226 10 73.4401 10 89.7518 11 23.0261 10 4.1397 10 6.3714 12 29.813 10 5.9792 10 1.8971 10 10.8388 10 52.275 10 23.4297 8 39.6753 11 65.1755 12 29.5428 12 95.1489 11 22.792 11 28.9204 10 3.2721 11 6.0166 9 22.2552 10 29.7503 9 57.0263 9]
Total: 1104.4212
Mean: 22.088425
Genome size: 72
Size: 73
Percent parens: 0.014
--- Population Statistics ---
Average total errors in population: 2670.5008651999947
Median total errors in population: 1112.4712000000002
Error averages by case: (141.30706810000095 10.908 81.92478790000035 11.233 89.71607700000068 10.427 130.20408939999987 9.991 149.01829890000084 10.509 85.93787099999959 9.597 69.80888529999989 11.303 72.12712779999929 11.483 90.19262590000028 10.226 68.72255070000031 9.75 65.04757790000016 8.902 73.72757159999979 9.41 110.4577548000004 9.379 88.04546889999973 10.149 103.9398266000002 11.027 127.29658400000135 11.701 92.97215540000091 11.966 153.76394479999948 10.341 87.3662257999999 11.194 94.59670830000042 11.734 67.35306570000043 12.183 69.13039039999998 9.355 86.9925131999994 11.137 90.3303977000004 10.259 116.95629810000112 9.401)
Error minima by case: (30.5199 4 14.8712 3 26.4916 9 13.4091 3 25.7828 4 22.9951 8 4.1087 10 4.3812 4 8.0 3 3.989 3 0.0931 2 7.0406 8 0.756 3 23.3987 8 7.7063 4 3.8045 3 27.5526 4 25.1799 4 20.177 3 10.9514 3 3.2411 10 0.025 8 17.7138 3 0.7193 3 17.0463 3)
Average genome size in population (length): 68.983
Average program size in population (points): 69.983
Average percent parens in population: 0.015
Minimum age in population: 10.25
Maximum age in population: 15.05078125
Average age in population: 13.2808203125
Median age in population: 13.298828125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 28
Genome diversity (% unique Plush genomes):	 0.782
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 28
Syntactic diversity (% unique Push programs):	 0.782
Total error diversity:				 0.125
Error (vector) diversity:			 0.141
Behavioral diversity:				 0.147
--- Run Statistics ---
Number of program evaluations used so far: 10000
Number of point (instruction) evaluations so far: 14323627
--- Timings ---
Current time: 1529615654642 milliseconds
Total Time:          31.6 seconds
Initialization:       0.1 seconds,  0.4%
Reproduction:        13.2 seconds, 41.7%
Fitness Testing:     14.5 seconds, 46.0%
Report:               3.8 seconds, 11.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 9
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 10
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 10
;;******************************
;; -*- Number IO problem report - generation 10
Test total error for best: 60050.132399999944
Test mean error for best: 30.02507
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -50.0101      
Correct output: -111.892428812 | Program output: -95.0101      
Correct output: -50.5084198428 | Program output: -77.0101      
Correct output: 43.4091085878  | Program output: -30.0101      
Correct output: 135.7828450917 | Program output: 46.0101       
Correct output: -36.0049045144 | Program output: -59.0101      
Correct output: -54.8912669799 | Program output: -59.0101      
Correct output: -101.4024240283 | Program output: -95.0101      
Correct output: -36.8440401492 | Program output: -7.0101       
Correct output: -32.0101752266 | Program output: -26.0101      
Correct output: -30.9280763402 | Program output: -29.0101      
Correct output: -7.1922309574  | Program output: -18.0101      
Correct output: 9.2440077884   | Program output: -43.0101      
Correct output: -75.601313294  | Program output: -99.0101      
Correct output: 117.7063323673 | Program output: 78.0101       
Correct output: 136.2064676055 | Program output: 71.0101       
Correct output: -106.5738029547 | Program output: -77.0101      
Correct output: 135.179935086  | Program output: 40.0101       
Correct output: 79.8229926043  | Program output: 57.0101       
Correct output: 120.9514376691 | Program output: 92.0101       
Correct output: -16.7588893337 | Program output: -20.0101      
Correct output: -1.0143626863  | Program output: -7.0101       
Correct output: 82.2861853158  | Program output: 60.0101       
Correct output: 2.7192599311   | Program output: -27.0101      
Correct output: -95.0573298011 | Program output: -38.0101      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_shove} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction 11} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction integer_dup_items} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_yank} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div})
Best program: (integer_add integer_shove integer_min integer_mod integer_dec float_cos integer_add integer_dup in2 float_frominteger integer_yank integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec print_float float_min integer_stackdepth float_add float_dec float_mult integer_yank integer_sub integer_swap integer_div integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div 11 in1 float_flush integer_pop integer_dup_items float_pop float_mult -40.87435704053455 float_tan float_inc float_sin float_div print_integer float_flush float_tan float_inc float_sin float_div print_integer float_flush float_yank print_integer float_flush float_inc float_mult integer_stackdepth float_div)
Errors: [82.5208 9 16.8823 11 26.5017 10 73.4192 9 89.7727 11 23.0052 9 4.1188 10 6.3923 11 29.8339 9 6.0001 8 1.918 10 10.8179 10 52.2541 10 23.4088 8 39.6962 12 65.1964 11 29.5637 12 95.1698 11 22.8129 11 28.9413 10 3.2512 12 5.9957 9 22.2761 10 29.7294 10 57.0472 9]
Total: 1098.5257000000001
Mean: 21.970514
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2936.190997499992
Median total errors in population: 1109.5212000000001
Error averages by case: (153.43293720000065 10.81 94.8451740999996 11.259 102.01125090000022 10.433 140.3868744000005 9.958 154.79442620000012 10.487 98.20804749999954 9.694 82.5323354999998 11.272 85.13143209999953 11.267 102.48142149999951 10.204 81.3158536000002 9.452 77.69034720000009 8.892 86.04663909999967 9.496 121.80429340000038 9.473 100.54757209999974 9.929 110.31424450000075 11.008 133.17219460000084 11.541 105.68194350000014 12.118 159.5279041999999 10.352 95.06707650000008 11.095 100.97970730000075 11.829 79.86488639999985 12.267 81.4988960999997 9.292 94.61669339999982 10.955 102.22107219999994 10.284 129.21377400000097 9.437)
Error minima by case: (30.5107 9 14.8823 9 26.4916 9 12.4091 9 5.7828 9 22.9951 8 4.1087 9 4.3923 8 20.8238 8 4.0001 7 0.0819 6 7.0406 8 0.756 9 23.3987 8 2.2937 9 3.8137 8 27.5637 9 3.8201 9 21.177 9 0.9514 7 3.2411 10 0.8689 7 18.7138 8 0.7193 8 17.0371 7)
Average genome size in population (length): 75.819
Average program size in population (points): 76.819
Average percent parens in population: 0.013
Minimum age in population: 12.28125
Maximum age in population: 16.548828125
Average age in population: 14.748171875
Median age in population: 14.78515625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.806
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.806
Total error diversity:				 0.155
Error (vector) diversity:			 0.178
Behavioral diversity:				 0.189
--- Run Statistics ---
Number of program evaluations used so far: 11000
Number of point (instruction) evaluations so far: 16219102
--- Timings ---
Current time: 1529615658034 milliseconds
Total Time:          34.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        14.5 seconds, 41.5%
Fitness Testing:     16.1 seconds, 46.2%
Report:               4.2 seconds, 12.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 10
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 11
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 11
;;******************************
;; -*- Number IO problem report - generation 11
Test total error for best: 59796.86820000007
Test mean error for best: 29.89843
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -51.0402291   
Correct output: -111.892428812 | Program output: -96.0402291   
Correct output: -50.5084198428 | Program output: -78.0402291   
Correct output: 43.4091085878  | Program output: -31.0402291   
Correct output: 135.7828450917 | Program output: 45.0402291    
Correct output: -36.0049045144 | Program output: -60.0402291   
Correct output: -54.8912669799 | Program output: -60.0402291   
Correct output: -101.4024240283 | Program output: -96.0402291   
Correct output: -36.8440401492 | Program output: -8.0402291    
Correct output: -32.0101752266 | Program output: -27.0402291   
Correct output: -30.9280763402 | Program output: -30.0402291   
Correct output: -7.1922309574  | Program output: -19.0402291   
Correct output: 9.2440077884   | Program output: -44.0402291   
Correct output: -75.601313294  | Program output: -100.0402291  
Correct output: 117.7063323673 | Program output: 77.0402291    
Correct output: 136.2064676055 | Program output: 70.0402291    
Correct output: -106.5738029547 | Program output: -78.0402291   
Correct output: 135.179935086  | Program output: 39.0402291    
Correct output: 79.8229926043  | Program output: 56.0402291    
Correct output: 120.9514376691 | Program output: 91.0402291    
Correct output: -16.7588893337 | Program output: -21.0402291   
Correct output: -1.0143626863  | Program output: -8.0402291    
Correct output: 82.2861853158  | Program output: 59.0402291    
Correct output: 2.7192599311   | Program output: -28.0402291   
Correct output: -95.0573298011 | Program output: -39.0402291   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_sub} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction float_div} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction -40.87435704053455} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc})
Best program: (integer_yankdup float_pop integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger integer_yank integer_dec float_dup_times integer_mult tagged_869 integer_max integer_sub print_float float_add integer_inc float_dup float_swap float_min float_dec float_add integer_pop integer_dec integer_yankdup integer_stackdepth float_add float_dec float_mult float_div integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div float_stackdepth float_sub float_flush integer_stackdepth float_div -21.856727626418078 in1 print_integer float_div print_integer float_flush float_inc float_mult -40.87435704053455 float_tan float_inc float_sin float_div print_integer float_flush 26 float_mult integer_stackdepth float_div float_dec integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455 float_tan float_inc float_sin float_div print_integer float_flush float_inc)
Errors: [81.4907 10 15.8522 10 27.5318 10 74.4493 10 90.7426 10 24.0353 9 5.149 10 5.3622 10 28.8038 8 4.9699 8 0.8878 9 11.848 9 53.2842 10 24.4389 9 40.6661 10 66.1662 11 28.5336 11 96.1397 11 23.7828 11 29.9112 10 4.2813 11 7.0259 8 23.246 11 30.7595 9 56.0171 8]
Total: 1098.3751
Mean: 21.967503
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2776.2365749999935
Median total errors in population: 1106.5162
Error averages by case: (147.07752619999934 10.688 87.57743289999941 11.101 95.76893389999934 10.215 136.35363400000114 9.861 147.25045190000017 10.47 93.05676989999982 9.616 76.75780739999949 11.068 78.81633749999979 11.034 96.45514049999926 9.938 76.89154630000017 9.258 72.21969719999984 8.705 80.03796799999981 9.451 116.85138719999996 9.43 93.91409239999956 9.661 101.97504330000082 10.843 125.13464240000044 11.445 98.6985981999998 12.007 153.00429580000073 10.329 87.6423528000002 10.945 93.38450230000076 11.682 74.56900140000013 12.206 75.4697103 9.108 88.12556020000005 10.844 96.73639369999961 10.265 122.88574930000054 9.412)
Error minima by case: (30.5107 9 14.8714 9 26.4916 9 21.4091 9 9.2172 9 22.9951 8 4.1087 9 4.3814 8 20.8238 8 3.9892 7 0.0839 6 7.0406 8 0.756 8 23.3987 8 2.2937 8 3.8137 8 27.5528 9 3.8201 9 20.177 8 0.9514 7 3.2411 9 0.8689 7 17.7138 8 2.1479 9 17.0371 6)
Average genome size in population (length): 79.144
Average program size in population (points): 80.144
Average percent parens in population: 0.013
Minimum age in population: 13.734375
Maximum age in population: 18.2294921875
Average age in population: 16.1949013671875
Median age in population: 16.234375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.8
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.8
Total error diversity:				 0.185
Error (vector) diversity:			 0.208
Behavioral diversity:				 0.214
--- Run Statistics ---
Number of program evaluations used so far: 12000
Number of point (instruction) evaluations so far: 18197702
--- Timings ---
Current time: 1529615661554 milliseconds
Total Time:          38.4 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        15.9 seconds, 41.4%
Fitness Testing:     17.7 seconds, 46.2%
Report:               4.7 seconds, 12.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 11
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 12
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 12
;;******************************
;; -*- Number IO problem report - generation 12
Test total error for best: 59806.91339999993
Test mean error for best: 29.90346
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -50.02101     
Correct output: -111.892428812 | Program output: -95.02101     
Correct output: -50.5084198428 | Program output: -77.02101     
Correct output: 43.4091085878  | Program output: -30.02101     
Correct output: 135.7828450917 | Program output: 46.02101      
Correct output: -36.0049045144 | Program output: -59.02101     
Correct output: -54.8912669799 | Program output: -59.02101     
Correct output: -101.4024240283 | Program output: -95.02101     
Correct output: -36.8440401492 | Program output: -7.02101      
Correct output: -32.0101752266 | Program output: -26.02101     
Correct output: -30.9280763402 | Program output: -29.02101     
Correct output: -7.1922309574  | Program output: -18.02101     
Correct output: 9.2440077884   | Program output: -43.02101     
Correct output: -75.601313294  | Program output: -99.02101     
Correct output: 117.7063323673 | Program output: 78.02101      
Correct output: 136.2064676055 | Program output: 71.02101      
Correct output: -106.5738029547 | Program output: -77.02101     
Correct output: 135.179935086  | Program output: 40.02101      
Correct output: 79.8229926043  | Program output: 57.02101      
Correct output: 120.9514376691 | Program output: 92.02101      
Correct output: -16.7588893337 | Program output: -20.02101     
Correct output: -1.0143626863  | Program output: -7.02101      
Correct output: 82.2861853158  | Program output: 60.02101      
Correct output: 2.7192599311   | Program output: -27.02101     
Correct output: -95.0573298011 | Program output: -38.02101     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_dec} {:instruction float_dup_times} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction float_sin} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction -40.87435704053455} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_div} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_yankdup} {:instruction print_float} {:instruction float_dup_items} {:instruction float_sub} {:instruction float_max} {:instruction float_rot} {:instruction float_shove})
Best program: (integer_yankdup float_pop integer_dup_times print_integer integer_dec float_mult float_max float_min integer_dup in2 float_frominteger integer_yank integer_min float_inc float_frominteger integer_yank integer_dec float_dup_times integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup float_swap float_min float_dec float_add integer_pop integer_dec integer_yankdup integer_stackdepth float_add float_dec float_mult float_sin integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 print_integer float_div print_integer float_flush float_inc float_mult -40.87435704053455 float_tan float_inc float_sin float_div print_integer float_flush 26 float_mult integer_stackdepth float_div float_dec float_dup integer_yank integer_sub integer_swap integer_div integer_stackdepth print_integer float_yankdup print_float float_dup_items float_sub float_max float_rot float_shove)
Errors: [82.5099 10 16.8714 10 26.5126 10 73.4301 9 89.7618 10 23.0161 9 4.1297 10 6.3814 10 29.823 10 5.9892 9 1.9071 10 10.8288 10 52.265 10 23.4197 9 39.6853 11 65.1855 11 29.5528 11 95.1589 11 22.802 10 28.9304 10 3.2621 12 6.0066 9 22.2652 10 29.7403 9 57.0363 8]
Total: 1094.4712000000002
Mean: 21.889423
Genome size: 84
Size: 85
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 2548.875675
Median total errors in population: 1104.5257000000001
Error averages by case: (138.17960039999926 10.606 78.2031533999996 10.998 86.07092759999925 10.089 125.59123950000057 9.848 141.98738369999987 10.533 82.29869009999996 9.58 65.90529789999958 10.962 68.34255139999983 10.919 86.85096039999934 9.816 65.14479750000021 9.184 61.43318079999991 8.659 70.04059919999986 9.441 107.08786439999977 9.493 84.29103019999964 9.466 96.31414940000063 10.773 119.64378830000015 11.331 89.38546109999974 11.852 146.88804550000077 10.357 81.09748600000033 10.863 86.65054420000057 11.378 63.55248290000011 12.02 65.40222220000012 9.005 80.59897359999997 10.755 86.8434916999997 10.12 113.68775360000024 9.336)
Error minima by case: (29.4999 7 14.8824 6 26.4916 8 2.9343 7 3.7828 6 22.9951 8 4.1087 9 4.3924 5 8.0 7 4.0002 6 0.0819 6 7.0424 8 0.756 8 23.3987 7 2.2937 6 2.8245 5 27.5638 7 3.1799 6 21.177 6 0.9514 5 3.2411 10 0.025 6 18.7138 6 2.7193 7 16.0263 7)
Average genome size in population (length): 78.523
Average program size in population (points): 79.523
Average percent parens in population: 0.013
Minimum age in population: 15.732421875
Maximum age in population: 19.3779296875
Average age in population: 17.63085693359375
Median age in population: 17.64453125
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.831
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.831
Total error diversity:				 0.223
Error (vector) diversity:			 0.24
Behavioral diversity:				 0.244
--- Run Statistics ---
Number of program evaluations used so far: 13000
Number of point (instruction) evaluations so far: 20160777
--- Timings ---
Current time: 1529615665041 milliseconds
Total Time:          41.9 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        17.2 seconds, 41.0%
Fitness Testing:     19.4 seconds, 46.3%
Report:               5.2 seconds, 12.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 12
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 13
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 13
;;******************************
;; -*- Number IO problem report - generation 13
Test total error for best: 59951.56239999999
Test mean error for best: 29.97578
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -49.0120      
Correct output: -111.892428812 | Program output: -94.0120      
Correct output: -50.5084198428 | Program output: -76.0120      
Correct output: 43.4091085878  | Program output: -29.0120      
Correct output: 135.7828450917 | Program output: 47.0120       
Correct output: -36.0049045144 | Program output: -58.0120      
Correct output: -54.8912669799 | Program output: -58.0120      
Correct output: -101.4024240283 | Program output: -94.0120      
Correct output: -36.8440401492 | Program output: -6.0120       
Correct output: -32.0101752266 | Program output: -25.0120      
Correct output: -30.9280763402 | Program output: -28.0120      
Correct output: -7.1922309574  | Program output: -17.0120      
Correct output: 9.2440077884   | Program output: -42.0120      
Correct output: -75.601313294  | Program output: -98.0120      
Correct output: 117.7063323673 | Program output: 79.0120       
Correct output: 136.2064676055 | Program output: 72.0120       
Correct output: -106.5738029547 | Program output: -76.0120      
Correct output: 135.179935086  | Program output: 41.0120       
Correct output: 79.8229926043  | Program output: 58.0120       
Correct output: 120.9514376691 | Program output: 93.0120       
Correct output: -16.7588893337 | Program output: -19.0120      
Correct output: -1.0143626863  | Program output: -6.0120       
Correct output: 82.2861853158  | Program output: 61.0120       
Correct output: 2.7192599311   | Program output: -26.0120      
Correct output: -95.0573298011 | Program output: -37.0120      
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yank} {:instruction float_min} {:instruction integer_mult} {:instruction float_tan} {:instruction integer_stackdepth} {:instruction print_integer} {:instruction float_yankdup} {:instruction float_mult} {:instruction integer_yank} {:instruction in1} {:instruction integer_stackdepth} {:instruction float_sin} {:instruction float_dup_items} {:instruction integer_yank} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction integer_dec} {:instruction float_inc})
Best program: (integer_yankdup float_pop integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger integer_yank integer_min float_inc float_inc tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup float_min integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec float_mult integer_yank float_min integer_mult float_tan integer_stackdepth print_integer float_yankdup float_mult integer_yank in1 integer_stackdepth float_sin float_dup_items integer_yank integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455 float_tan float_inc float_sin float_div print_integer integer_dec float_inc)
Errors: [83.5189 11 17.8804 10 25.5036 9 72.4211 11 88.7708 11 22.0071 10 3.1207 9 7.3904 10 30.832 9 6.9982 9 2.9161 10 9.8198 9 51.256 10 22.4107 8 38.6943 11 64.1945 11 30.5618 11 94.1679 11 21.811 10 27.9394 12 2.2531 11 4.9976 8 21.2742 10 28.7313 10 58.0453 9]
Total: 1087.5162
Mean: 21.750324
Genome size: 79
Size: 80
Percent parens: 0.013
--- Population Statistics ---
Average total errors in population: 2861.2957372000014
Median total errors in population: 1102.4702
Error averages by case: (153.05703619999974 10.422 93.49211149999971 10.832 100.45240579999947 9.982 140.44896340000017 9.83 148.18251899999947 10.649 96.86680319999998 9.594 80.41677639999986 10.75 82.76279090000025 10.689 102.87128499999925 9.781 81.32315180000052 9.165 76.62733230000008 8.874 85.02651779999992 9.498 121.93639479999955 9.645 98.42298369999942 9.264 102.70452250000031 10.707 125.89405980000016 11.25 104.71880459999979 11.611 153.0747168000004 10.41 87.6056491000004 10.671 92.95746330000044 11.158 78.49193200000046 11.879 80.49343410000023 8.855 87.09562229999996 10.777 101.7901770999998 10.015 129.05628380000024 9.218)
Error minima by case: (51.0 6 15.8414 5 25.5036 8 12.4091 5 3.7828 6 22.0071 8 3.1207 8 5.3514 6 8.0 5 4.9592 5 0.8771 4 7.0424 8 0.756 5 22.4107 7 2.2937 6 4.2065 5 28.5228 6 3.1799 6 21.177 5 0.9514 5 2.2531 10 0.025 7 18.7138 5 2.9902 5 39.0 5)
Average genome size in population (length): 81.35
Average program size in population (points): 82.35
Average percent parens in population: 0.012
Minimum age in population: 17.2265625
Maximum age in population: 20.950927734375
Average age in population: 19.17324780273438
Median age in population: 19.2398681640625
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.851
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.851
Total error diversity:				 0.301
Error (vector) diversity:			 0.33
Behavioral diversity:				 0.34
--- Run Statistics ---
Number of program evaluations used so far: 14000
Number of point (instruction) evaluations so far: 22194527
--- Timings ---
Current time: 1529615668624 milliseconds
Total Time:          45.5 seconds
Initialization:       0.1 seconds,  0.3%
Reproduction:        18.6 seconds, 40.9%
Fitness Testing:     21.2 seconds, 46.5%
Report:               5.6 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 13
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 14
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 14
;;******************************
;; -*- Number IO problem report - generation 14
Test total error for best: 59696.32759999992
Test mean error for best: 29.84816
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -49.0210124   
Correct output: -111.892428812 | Program output: -94.0210124   
Correct output: -50.5084198428 | Program output: -76.0210124   
Correct output: 43.4091085878  | Program output: -29.0210124   
Correct output: 135.7828450917 | Program output: 47.0210124    
Correct output: -36.0049045144 | Program output: -58.0210124   
Correct output: -54.8912669799 | Program output: -58.0210124   
Correct output: -101.4024240283 | Program output: -94.0210124   
Correct output: -36.8440401492 | Program output: -6.0210124    
Correct output: -32.0101752266 | Program output: -25.0210124   
Correct output: -30.9280763402 | Program output: -28.0210124   
Correct output: -7.1922309574  | Program output: -17.0210124   
Correct output: 9.2440077884   | Program output: -42.0210124   
Correct output: -75.601313294  | Program output: -98.0210124   
Correct output: 117.7063323673 | Program output: 79.0210124    
Correct output: 136.2064676055 | Program output: 72.0210124    
Correct output: -106.5738029547 | Program output: -76.0210124   
Correct output: 135.179935086  | Program output: 41.0210124    
Correct output: 79.8229926043  | Program output: 58.0210124    
Correct output: 120.9514376691 | Program output: 93.0210124    
Correct output: -16.7588893337 | Program output: -19.0210124   
Correct output: -1.0143626863  | Program output: -6.0210124    
Correct output: 82.2861853158  | Program output: 61.0210124    
Correct output: 2.7192599311   | Program output: -26.0210124   
Correct output: -95.0573298011 | Program output: -37.0210124   
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_min} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_max} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction -40.87435704053455} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction 24} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction float_dup} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction in1} {:instruction float_flush} {:instruction float_yankdup} {:instruction print_integer} {:instruction float_pop})
Best program: (integer_yankdup float_pop integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger integer_yank integer_min float_inc float_inc tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup float_min integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec float_mult integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div float_max in1 print_integer float_div print_integer float_flush float_inc float_mult -40.87435704053455 float_tan float_inc float_sin float_div print_integer float_flush 24 float_mult integer_stackdepth float_div float_dec float_dup integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult in1 float_flush float_yankdup print_integer float_pop)
Errors: [83.5099 10 17.8714 10 25.5126 9 72.4301 10 88.7618 11 22.0161 8 3.1297 10 7.3814 10 30.823 9 6.9892 8 2.9071 9 9.8288 8 51.265 9 22.4197 7 38.6853 12 64.1855 12 30.5528 10 94.1589 12 21.802 9 27.9304 12 2.2621 11 5.0066 9 21.2652 10 28.7403 11 58.0363 9]
Total: 1082.4712000000004
Mean: 21.649424
Genome size: 83
Size: 84
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3066.8356367
Median total errors in population: 1099.5102000000002
Error averages by case: (160.05749269999964 10.2 101.24076389999959 10.786 107.74653859999957 10.035 147.19953019999963 9.782 157.83928649999996 10.889 104.15542239999958 9.636 87.85647900000009 10.608 91.63192390000032 10.639 110.37970289999932 9.702 89.06462480000023 9.008 84.4286136000001 9.272 92.32635589999991 9.649 128.9627575999999 9.869 105.78614689999968 9.039 113.13754210000022 10.827 135.84274280000037 11.202 112.28165499999986 11.462 162.6744049000005 10.549 98.48332920000026 10.706 103.5927376000003 10.833 85.85670270000026 11.844 87.80916899999968 8.795 97.97031499999977 10.753 108.95597229999993 9.978 136.28442720000047 9.208)
Error minima by case: (32.4806 8 15.842 6 25.5016 8 23.4091 7 4.7828 7 22.0051 8 3.1187 8 5.352 5 8.0 7 4.9597 6 0.8776 6 7.0424 7 2.756 7 22.4087 6 2.2937 6 5.2065 6 28.5234 7 4.1799 7 21.177 7 0.9514 6 2.2511 9 0.025 6 18.7138 7 1.9902 7 19.007 7)
Average genome size in population (length): 82.273
Average program size in population (points): 83.273
Average percent parens in population: 0.012
Minimum age in population: 18.46875
Maximum age in population: 22.6326904296875
Average age in population: 20.7191435546875
Median age in population: 20.78704833984375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.845
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.845
Total error diversity:				 0.33
Error (vector) diversity:			 0.378
Behavioral diversity:				 0.379
--- Run Statistics ---
Number of program evaluations used so far: 15000
Number of point (instruction) evaluations so far: 24251352
--- Timings ---
Current time: 1529615672221 milliseconds
Total Time:          49.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        19.9 seconds, 40.6%
Fitness Testing:     23.0 seconds, 46.8%
Report:               6.1 seconds, 12.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 14
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 15
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 15
;;******************************
;; -*- Number IO problem report - generation 15
Test total error for best: 59832.940199999975
Test mean error for best: 29.91647
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -48.01012     
Correct output: -111.892428812 | Program output: -93.01012     
Correct output: -50.5084198428 | Program output: -75.01012     
Correct output: 43.4091085878  | Program output: -28.01012     
Correct output: 135.7828450917 | Program output: 48.01012      
Correct output: -36.0049045144 | Program output: -57.01012     
Correct output: -54.8912669799 | Program output: -57.01012     
Correct output: -101.4024240283 | Program output: -93.01012     
Correct output: -36.8440401492 | Program output: -5.01012      
Correct output: -32.0101752266 | Program output: -24.01012     
Correct output: -30.9280763402 | Program output: -27.01012     
Correct output: -7.1922309574  | Program output: -16.01012     
Correct output: 9.2440077884   | Program output: -41.01012     
Correct output: -75.601313294  | Program output: -97.01012     
Correct output: 117.7063323673 | Program output: 80.01012      
Correct output: 136.2064676055 | Program output: 73.01012      
Correct output: -106.5738029547 | Program output: -75.01012     
Correct output: 135.179935086  | Program output: 42.01012      
Correct output: 79.8229926043  | Program output: 59.01012      
Correct output: 120.9514376691 | Program output: 94.01012      
Correct output: -16.7588893337 | Program output: -18.01012     
Correct output: -1.0143626863  | Program output: -5.01012      
Correct output: 82.2861853158  | Program output: 62.01012      
Correct output: 2.7192599311   | Program output: -25.01012     
Correct output: -95.0573298011 | Program output: -36.01012     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_yankdup} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction -40.87435704053455} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_tan} {:instruction float_inc} {:instruction float_mod} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult})
Best program: (integer_yankdup float_pop integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger integer_yank integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec print_float float_min integer_stackdepth integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div float_yankdup in1 print_integer float_div print_integer float_flush float_inc float_mult -40.87435704053455 float_stackdepth float_sub float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 float_sin float_div print_integer float_flush float_inc float_tan float_inc float_mod float_div print_integer float_flush float_inc float_mult)
Errors: [84.5208 10 18.8823 10 24.5017 9 71.4192 10 87.7727 11 21.0052 9 2.1189 10 8.3923 11 31.8339 8 8.0001 7 3.918 10 8.8179 10 50.2541 10 21.4088 7 37.6962 11 63.1963 10 31.5637 12 93.1698 11 20.8129 10 26.9413 12 1.2512 11 3.9958 8 20.2761 9 27.7294 10 59.0472 9]
Total: 1073.5258000000001
Mean: 21.470516
Genome size: 89
Size: 90
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3183.8186786000074
Median total errors in population: 1096.42515
Error averages by case: (163.36426090000037 10.128 104.41090240000005 10.683 112.34463369999997 9.883 153.30615759999932 9.78 163.74703310000004 10.987 108.93217519999938 9.633 92.19885050000032 10.162 94.88598240000003 10.365 114.75963649999976 9.64 93.35454220000017 8.957 89.70228299999984 9.516 97.44222650000027 9.616 134.63906449999988 9.99 109.97829919999951 8.698 118.70641049999989 10.642 141.57033930000046 11.139 115.61381520000027 11.0 168.6183462000005 10.638 103.57828430000008 10.485 109.06504669999994 10.651 90.7771582000005 11.537 92.99352579999955 8.524 103.0927912999993 10.795 114.36961270000045 9.928 139.97130070000063 9.019)
Error minima by case: (30.4999 7 15.8017 6 24.5017 8 1.5071 6 33.7828 7 21.0052 8 2.1189 8 5.3117 7 9.0 6 4.9194 6 0.8373 6 3.6983 7 8.2617 6 21.4088 6 15.7063 6 3.8035 7 28.4831 7 33.1799 7 20.7929 6 18.9514 6 1.2512 9 1.0445 6 18.7138 6 1.4378 6 17.0263 5)
Average genome size in population (length): 82.479
Average program size in population (points): 83.479
Average percent parens in population: 0.012
Minimum age in population: 19.7314453125
Maximum age in population: 24.20001220703125
Average age in population: 22.20133935546875
Median age in population: 22.2698974609375
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.839
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.839
Total error diversity:				 0.362
Error (vector) diversity:			 0.412
Behavioral diversity:				 0.413
--- Run Statistics ---
Number of program evaluations used so far: 16000
Number of point (instruction) evaluations so far: 26313327
--- Timings ---
Current time: 1529615675769 milliseconds
Total Time:          52.7 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        21.3 seconds, 40.4%
Fitness Testing:     24.7 seconds, 46.9%
Report:               6.6 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 15
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 16
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 16
;;******************************
;; -*- Number IO problem report - generation 16
Test total error for best: 59762.640899999875
Test mean error for best: 29.88132
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -47.03021     
Correct output: -111.892428812 | Program output: -92.03021     
Correct output: -50.5084198428 | Program output: -74.03021     
Correct output: 43.4091085878  | Program output: -27.03021     
Correct output: 135.7828450917 | Program output: 49.03021      
Correct output: -36.0049045144 | Program output: -56.03021     
Correct output: -54.8912669799 | Program output: -56.03021     
Correct output: -101.4024240283 | Program output: -92.03021     
Correct output: -36.8440401492 | Program output: -4.03021      
Correct output: -32.0101752266 | Program output: -23.03021     
Correct output: -30.9280763402 | Program output: -26.03021     
Correct output: -7.1922309574  | Program output: -15.03021     
Correct output: 9.2440077884   | Program output: -40.03021     
Correct output: -75.601313294  | Program output: -96.03021     
Correct output: 117.7063323673 | Program output: 81.03021      
Correct output: 136.2064676055 | Program output: 74.03021      
Correct output: -106.5738029547 | Program output: -74.03021     
Correct output: 135.179935086  | Program output: 43.03021      
Correct output: 79.8229926043  | Program output: 60.03021      
Correct output: 120.9514376691 | Program output: 95.03021      
Correct output: -16.7588893337 | Program output: -17.03021     
Correct output: -1.0143626863  | Program output: -4.03021      
Correct output: 82.2861853158  | Program output: 63.03021      
Correct output: 2.7192599311   | Program output: -24.03021     
Correct output: -95.0573298011 | Program output: -35.03021     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_shove} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction float_div} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction float_swap} {:instruction float_min} {:instruction float_dec} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_rot} {:instruction float_sub} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_yank} {:instruction print_integer} {:instruction integer_dec} {:instruction integer_dec} {:instruction float_mod} {:instruction float_sub} {:instruction float_cos} {:instruction float_sub})
Best program: (integer_add integer_shove integer_min integer_mod integer_dec float_cos integer_add integer_dup in2 float_frominteger integer_yank integer_min float_inc integer_mult tagged_869 float_div integer_min float_inc float_frominteger integer_yank float_inc float_frominteger integer_yank integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add float_add integer_inc float_dup float_swap float_min float_dec float_add integer_pop integer_dec integer_yankdup integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec float_mult integer_yankdup integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div integer_rot float_sub float_flush integer_stackdepth float_div -21.856727626418078 in1 print_integer float_div print_integer float_flush float_tan float_inc float_sin float_div print_integer float_flush float_yank print_integer integer_dec integer_dec float_mod float_sub float_cos float_sub)
Errors: [85.5007 10 19.8622 10 23.5218 10 70.4393 11 86.7526 11 20.0253 8 1.1389 10 9.3722 10 32.8138 10 8.98 9 4.8979 9 7.838 9 49.2742 10 20.4289 8 36.6761 9 62.1763 11 32.5436 10 92.1497 9 19.7928 11 25.9212 10 0.2713 10 3.0158 8 19.256 11 26.7495 10 60.0271 7]
Total: 1060.4252
Mean: 21.208504
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2711.666529900006
Median total errors in population: 1090.4712000000002
Error averages by case: (146.1445168000006 10.235 85.94443260000037 10.701 92.60658090000021 9.878 134.61832929999932 10.105 146.2187135999993 11.204 89.10461099999937 9.84 72.18242710000008 9.884 76.18873259999978 10.271 96.21310869999992 9.507 74.37155380000021 8.978 70.6413924999997 9.776 77.3742348000005 9.65 115.1398788999997 10.048 90.29839779999946 8.55 100.2202705999996 10.749 123.64569100000084 11.136 97.3390909000003 10.664 151.18144219999982 10.844 84.54603980000006 10.221 90.4436930999996 10.942 70.6358009000002 11.298 72.83639300000003 8.539 84.08091899999954 10.641 94.53692770000048 10.142 122.13335130000081 9.217)
Error minima by case: (34.4998 8 15.8474 8 14.4946 8 31.4091 8 15.7828 8 20.0253 8 1.1389 8 5.3574 8 24.8129 7 4.9651 6 0.883 7 3.6983 8 0.756 8 10.5983 6 2.2937 8 7.8246 8 28.5288 9 15.1799 8 19.199 7 0.9514 8 0.2713 9 0.3574 6 16.7358 8 0.5712 8 21.0262 7)
Average genome size in population (length): 82.144
Average program size in population (points): 83.144
Average percent parens in population: 0.012
Minimum age in population: 20.862548828125
Maximum age in population: 25.70346069335938
Average age in population: 23.71970654296875
Median age in population: 23.72134399414062
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.815
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.815
Total error diversity:				 0.34
Error (vector) diversity:			 0.373
Behavioral diversity:				 0.375
--- Run Statistics ---
Number of program evaluations used so far: 17000
Number of point (instruction) evaluations so far: 28366952
--- Timings ---
Current time: 1529615679388 milliseconds
Total Time:          56.2 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        22.6 seconds, 40.2%
Fitness Testing:     26.4 seconds, 47.0%
Report:               7.0 seconds, 12.5%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 16
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 17
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 17
;;******************************
;; -*- Number IO problem report - generation 17
Test total error for best: 59697.998300000094
Test mean error for best: 29.84900
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -46.030127    
Correct output: -111.892428812 | Program output: -91.030127    
Correct output: -50.5084198428 | Program output: -73.030127    
Correct output: 43.4091085878  | Program output: -26.030127    
Correct output: 135.7828450917 | Program output: 50.030127     
Correct output: -36.0049045144 | Program output: -55.030127    
Correct output: -54.8912669799 | Program output: -55.030127    
Correct output: -101.4024240283 | Program output: -91.030127    
Correct output: -36.8440401492 | Program output: -3.030127     
Correct output: -32.0101752266 | Program output: -22.030127    
Correct output: -30.9280763402 | Program output: -25.030127    
Correct output: -7.1922309574  | Program output: -14.030127    
Correct output: 9.2440077884   | Program output: -39.030127    
Correct output: -75.601313294  | Program output: -95.030127    
Correct output: 117.7063323673 | Program output: 82.030127     
Correct output: 136.2064676055 | Program output: 75.030127     
Correct output: -106.5738029547 | Program output: -73.030127    
Correct output: 135.179935086  | Program output: 44.030127     
Correct output: 79.8229926043  | Program output: 61.030127     
Correct output: 120.9514376691 | Program output: 96.030127     
Correct output: -16.7588893337 | Program output: -16.030127    
Correct output: -1.0143626863  | Program output: -3.030127     
Correct output: 82.2861853158  | Program output: 64.030127     
Correct output: 2.7192599311   | Program output: -23.030127    
Correct output: -95.0573298011 | Program output: -34.030127    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_add} {:instruction integer_shove} {:instruction integer_min} {:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455} {:instruction float_tan})
Best program: (integer_add integer_shove integer_min integer_mod integer_dec float_cos integer_add integer_dup in2 integer_mult in2 float_frominteger integer_yank integer_min float_inc float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec print_float float_min integer_stackdepth integer_add integer_stackdepth float_div float_stackdepth float_sub float_flush integer_stackdepth float_div -21.856727626418078 in1 print_integer float_div print_integer float_flush float_inc float_mult integer_dup_times float_tan float_inc float_sin float_div print_integer float_flush 26 float_mult integer_stackdepth float_div float_dec integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455 float_tan)
Errors: [86.5008 9 20.8623 10 22.5217 9 69.4392 10 85.7527 11 19.0252 9 0.1389 9 10.3723 10 33.8139 8 9.98 7 5.8979 10 6.8379 8 48.2741 10 19.4288 7 35.6762 10 61.1763 12 33.5437 10 91.1498 11 18.7929 11 24.9213 12 0.7288 9 2.0158 9 18.2561 11 25.7494 11 61.0272 9]
Total: 1053.8832
Mean: 21.077663
Genome size: 91
Size: 92
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 3071.664948900003
Median total errors in population: 1084.4712000000004
Error averages by case: (159.86505830000073 10.309 100.63242520000033 10.707 106.16089370000022 9.824 147.04215549999927 10.417 161.25310239999985 11.155 102.6672785999994 9.779 86.02839460000031 9.879 91.0340751999999 10.217 110.6100380999999 9.239 89.08831160000025 8.914 85.42343089999979 9.705 91.02084920000024 9.336 128.20004329999966 9.9 103.94122229999942 8.487 116.31750679999978 10.688 139.08300000000037 11.02 111.82297140000033 10.296 166.13474770000047 10.86 101.24031149999999 10.07 106.72718089999988 11.333 84.38534290000075 10.852 86.53229209999978 8.571 100.75641579999933 10.509 107.92080050000065 10.276 136.2001004000009 9.234)
Error minima by case: (33.5089 8 15.8622 9 22.5048 8 17.4091 8 39.7517 9 10.8612 7 0.122 8 5.3722 8 11.7003 7 4.9799 6 0.8978 7 6.2346 7 1.756 8 19.4119 5 28.6843 8 6.8155 7 28.5436 8 46.1579 8 9.199 7 24.9213 8 0.2438 9 1.298 6 6.7358 8 0.6972 8 20.0353 7)
Average genome size in population (length): 83.15
Average program size in population (points): 84.15
Average percent parens in population: 0.012
Minimum age in population: 22.6395263671875
Maximum age in population: 27.48358154296875
Average age in population: 25.36888792419434
Median age in population: 25.43670654296875
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.849
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.849
Total error diversity:				 0.347
Error (vector) diversity:			 0.396
Behavioral diversity:				 0.397
--- Run Statistics ---
Number of program evaluations used so far: 18000
Number of point (instruction) evaluations so far: 30445952
--- Timings ---
Current time: 1529615683031 milliseconds
Total Time:          59.9 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        24.0 seconds, 40.1%
Fitness Testing:     28.2 seconds, 47.0%
Report:               7.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 17
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 18
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 18
;;******************************
;; -*- Number IO problem report - generation 18
Test total error for best: 59912.190700000014
Test mean error for best: 29.95610
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -44.01027     
Correct output: -111.892428812 | Program output: -89.01027     
Correct output: -50.5084198428 | Program output: -71.01027     
Correct output: 43.4091085878  | Program output: -24.01027     
Correct output: 135.7828450917 | Program output: 52.01027      
Correct output: -36.0049045144 | Program output: -53.01027     
Correct output: -54.8912669799 | Program output: -53.01027     
Correct output: -101.4024240283 | Program output: -89.01027     
Correct output: -36.8440401492 | Program output: -1.01027      
Correct output: -32.0101752266 | Program output: -20.01027     
Correct output: -30.9280763402 | Program output: -23.01027     
Correct output: -7.1922309574  | Program output: -12.01027     
Correct output: 9.2440077884   | Program output: -37.01027     
Correct output: -75.601313294  | Program output: -93.01027     
Correct output: 117.7063323673 | Program output: 84.01027      
Correct output: 136.2064676055 | Program output: 77.01027      
Correct output: -106.5738029547 | Program output: -71.01027     
Correct output: 135.179935086  | Program output: 46.01027      
Correct output: 79.8229926043  | Program output: 63.01027      
Correct output: 120.9514376691 | Program output: 98.01027      
Correct output: -16.7588893337 | Program output: -14.01027     
Correct output: -1.0143626863  | Program output: -1.01027      
Correct output: 82.2861853158  | Program output: 66.01027      
Correct output: 2.7192599311   | Program output: -21.01027     
Correct output: -95.0573298011 | Program output: -32.01027     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455})
Best program: (integer_yankdup float_pop integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger float_inc integer_min float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 in1 print_integer float_div print_integer float_flush float_inc float_mult integer_max float_tan float_inc float_sin float_div print_integer float_flush 26 float_mult integer_stackdepth float_div float_dec integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
Errors: [88.5206 9 22.8822 11 20.5019 9 67.4194 9 83.7726 10 17.0054 10 1.881 9 12.3922 10 35.8338 10 11.9999 8 7.9178 10 4.818 9 46.2543 10 17.409 8 33.6961 10 59.1962 11 35.5635 10 89.1697 11 16.8127 11 22.9412 11 2.7486 10 0.0041 7 16.2759 11 23.7295 10 63.0471 10]
Total: 1045.7927
Mean: 20.915854
Genome size: 85
Size: 86
Percent parens: 0.012
--- Population Statistics ---
Average total errors in population: 3197.8249528000065
Median total errors in population: 1080.4712000000002
Error averages by case: (166.55725760000058 10.393 107.57331510000019 10.858 112.09464709999995 9.875 153.0707327999993 10.555 162.6849430999998 11.247 108.69062839999933 9.881 92.22369100000026 9.941 97.99594499999995 10.282 117.56921309999967 9.574 96.21729530000017 8.938 92.55355659999964 9.789 97.27569220000034 9.555 134.0470405999998 10.084 109.8640189999994 8.582 117.51790979999981 10.561 140.56814990000007 10.746 118.77173260000025 10.593 167.5396292000006 10.742 102.11794159999991 9.88 107.85729679999984 11.347 90.7297583000005 10.794 92.8564081999997 8.594 101.64719139999939 10.399 113.98442480000061 10.286 143.04753330000082 9.273)
Error minima by case: (81.4948 8 15.8563 9 4.1621 7 31.4091 8 43.5232 9 10.3414 7 0.1187 7 5.3663 8 9.5022 7 4.974 6 0.892 7 4.818 7 0.756 8 17.409 5 25.4466 8 43.9468 7 28.5377 8 42.9202 9 12.4367 7 22.9412 8 0.2411 8 0.0041 6 9.9735 8 0.3109 8 48.7111 7)
Average genome size in population (length): 84.337
Average program size in population (points): 85.337
Average percent parens in population: 0.012
Minimum age in population: 23.69940185546875
Maximum age in population: 28.81156158447266
Average age in population: 26.7836837387085
Median age in population: 26.83115768432617
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.846
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.846
Total error diversity:				 0.376
Error (vector) diversity:			 0.412
Behavioral diversity:				 0.413
--- Run Statistics ---
Number of program evaluations used so far: 19000
Number of point (instruction) evaluations so far: 32554752
--- Timings ---
Current time: 1529615686636 milliseconds
Total Time:          63.5 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        25.3 seconds, 39.9%
Fitness Testing:     30.0 seconds, 47.2%
Report:               8.1 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 18
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 19
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 19
;;******************************
;; -*- Number IO problem report - generation 19
Test total error for best: 59815.4021
Test mean error for best: 29.90770
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -44.03126     
Correct output: -111.892428812 | Program output: -89.03126     
Correct output: -50.5084198428 | Program output: -71.03126     
Correct output: 43.4091085878  | Program output: -24.03126     
Correct output: 135.7828450917 | Program output: 52.03126      
Correct output: -36.0049045144 | Program output: -53.03126     
Correct output: -54.8912669799 | Program output: -53.03126     
Correct output: -101.4024240283 | Program output: -89.03126     
Correct output: -36.8440401492 | Program output: -1.03126      
Correct output: -32.0101752266 | Program output: -20.03126     
Correct output: -30.9280763402 | Program output: -23.03126     
Correct output: -7.1922309574  | Program output: -12.03126     
Correct output: 9.2440077884   | Program output: -37.03126     
Correct output: -75.601313294  | Program output: -93.03126     
Correct output: 117.7063323673 | Program output: 84.03126      
Correct output: 136.2064676055 | Program output: 77.03126      
Correct output: -106.5738029547 | Program output: -71.03126     
Correct output: 135.179935086  | Program output: 46.03126      
Correct output: 79.8229926043  | Program output: 63.03126      
Correct output: 120.9514376691 | Program output: 98.03126      
Correct output: -16.7588893337 | Program output: -14.03126     
Correct output: -1.0143626863  | Program output: -1.03126      
Correct output: 82.2861853158  | Program output: 66.03126      
Correct output: 2.7192599311   | Program output: -21.03126     
Correct output: -95.0573298011 | Program output: -32.03126     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction float_inc} {:instruction float_mult} {:instruction float_max} {:instruction float_cos} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction float_sin} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_dup_times} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction float_min} {:instruction float_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc})
Best program: (integer_yankdup float_pop integer_dup_times print_integer float_inc float_mult float_max float_cos integer_mult in2 float_frominteger float_inc integer_min float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_dup print_float float_min integer_stackdepth float_add float_dec print_float float_min integer_stackdepth integer_add integer_stackdepth float_div float_stackdepth float_sub float_flush integer_stackdepth float_div -21.856727626418078 in1 print_integer float_div float_sin float_flush float_inc float_mult integer_dup_times float_tan float_inc float_sin float_div print_integer float_flush 26 float_mult float_min float_div float_dec integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455 float_tan float_inc float_sin float_div print_integer float_flush float_inc)
Errors: [88.4996 11 22.8612 10 20.5228 9 67.4404 11 83.7516 11 17.0264 10 1.86 8 12.3712 11 35.8128 10 11.9789 8 7.8968 10 4.839 9 46.2753 11 17.4299 7 33.6751 9 59.1752 11 35.5425 11 89.1487 10 16.7917 10 22.9202 11 2.7276 10 0.0169 6 16.2549 10 23.7505 10 63.0261 10]
Total: 1045.5953
Mean: 20.911905
Genome size: 99
Size: 100
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2980.856751000001
Median total errors in population: 1073.5256000000002
Error averages by case: (158.1310797000004 10.363 98.83407359999995 10.712 102.4362243 9.816 143.70438049999927 10.595 155.55920079999984 11.213 98.9784130999995 9.702 82.30500240000025 9.975 89.23572359999987 10.335 109.02582799999972 9.777 87.49376040000004 8.914 83.81902399999994 9.908 87.37356090000013 9.711 124.67112249999975 10.176 100.13669489999967 8.466 110.33138889999992 10.506 133.32650030000065 10.596 110.0693168 10.89 160.4436588000004 10.713 95.02540850000001 9.875 100.67137009999993 11.384 80.88408920000025 10.586 82.89848279999977 8.556 94.54830709999962 10.177 104.31095550000026 10.059 134.5091843000005 9.129)
Error minima by case: (5.5309 8 15.1076 7 20.5018 7 16.4091 7 0.7828 8 17.0054 7 0.1109 8 5.3723 8 8.0 7 4.98 6 0.8979 6 4.818 7 0.756 7 17.4089 5 6.7063 8 1.2065 7 20.4262 8 0.1799 8 16.7917 7 9.9514 7 0.2414 8 0.0023 6 16.2549 7 0.0098 7 19.0461 7)
Average genome size in population (length): 85.589
Average program size in population (points): 86.589
Average percent parens in population: 0.012
Minimum age in population: 25.41218566894531
Maximum age in population: 30.23628234863281
Average age in population: 28.12615930557251
Median age in population: 28.14058685302734
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.828
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.828
Total error diversity:				 0.424
Error (vector) diversity:			 0.455
Behavioral diversity:				 0.455
--- Run Statistics ---
Number of program evaluations used so far: 20000
Number of point (instruction) evaluations so far: 34694502
--- Timings ---
Current time: 1529615690452 milliseconds
Total Time:          67.3 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        26.7 seconds, 39.7%
Fitness Testing:     31.9 seconds, 47.4%
Report:               8.6 seconds, 12.7%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 19
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 20
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 20
;;******************************
;; -*- Number IO problem report - generation 20
Test total error for best: 60188.88910000001
Test mean error for best: 30.09444
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -41.01027     
Correct output: -111.892428812 | Program output: -86.01027     
Correct output: -50.5084198428 | Program output: -68.01027     
Correct output: 43.4091085878  | Program output: -21.01027     
Correct output: 135.7828450917 | Program output: 55.01027      
Correct output: -36.0049045144 | Program output: -50.01027     
Correct output: -54.8912669799 | Program output: -50.01027     
Correct output: -101.4024240283 | Program output: -86.01027     
Correct output: -36.8440401492 | Program output: 2.01027       
Correct output: -32.0101752266 | Program output: -17.01027     
Correct output: -30.9280763402 | Program output: -20.01027     
Correct output: -7.1922309574  | Program output: -9.01027      
Correct output: 9.2440077884   | Program output: -34.01027     
Correct output: -75.601313294  | Program output: -90.01027     
Correct output: 117.7063323673 | Program output: 87.01027      
Correct output: 136.2064676055 | Program output: 80.01027      
Correct output: -106.5738029547 | Program output: -68.01027     
Correct output: 135.179935086  | Program output: 49.01027      
Correct output: 79.8229926043  | Program output: 66.01027      
Correct output: 120.9514376691 | Program output: 101.01027     
Correct output: -16.7588893337 | Program output: -11.01027     
Correct output: -1.0143626863  | Program output: 2.01027       
Correct output: 82.2861853158  | Program output: 69.01027      
Correct output: 2.7192599311   | Program output: -18.01027     
Correct output: -95.0573298011 | Program output: -29.01027     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455})
Best program: (integer_mod integer_dec float_cos float_cos integer_add integer_dup in2 float_frominteger integer_yank float_inc float_inc integer_mult float_frominteger integer_yank integer_min float_inc float_frominteger float_frominteger float_inc integer_min float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 in1 print_integer float_div print_integer float_flush float_inc float_mult integer_max float_tan float_inc float_sin float_div print_integer float_flush 26 float_mult integer_stackdepth float_div float_dec integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
Errors: [91.5206 9 25.8822 11 17.5019 9 64.4194 9 80.7726 10 14.0054 10 4.881 9 15.3922 10 38.8543 11 14.9999 8 10.9178 9 1.818 9 43.2543 9 14.409 8 30.6961 9 56.1962 11 38.5635 10 86.1697 11 13.8127 11 19.9412 10 5.7486 10 3.0246 9 13.2759 11 20.7295 11 66.0471 10]
Total: 1036.8337000000001
Mean: 20.736673
Genome size: 92
Size: 93
Percent parens: 0.011
--- Population Statistics ---
Average total errors in population: 2831.7280551999984
Median total errors in population: 1067.7166499999998
Error averages by case: (153.5910152000006 10.369 94.05401990000033 10.356 96.05789090000023 9.754 137.4547643999995 10.533 149.56686159999973 11.167 92.50618319999948 9.648 75.88865670000015 9.793 84.40321989999977 9.924 104.04268690000008 9.649 82.38543810000003 8.717 78.70368489999997 9.846 80.65255140000023 9.623 118.28320679999975 10.24 93.82837359999972 8.073 104.09154529999964 10.232 127.22974800000057 10.868 105.28594150000019 10.685 154.48164739999987 10.526 88.53523359999981 10.148 94.41945179999973 11.301 74.72856830000002 10.199 76.11427999999995 8.41 88.07383779999975 10.554 97.74970470000035 10.181 129.7795433000006 9.024)
Error minima by case: (35.5196 7 15.8714 5 17.5019 7 1.5032 7 7.7828 6 14.0054 7 0.1087 8 5.3814 4 4.8328 6 4.9892 5 0.9071 6 1.818 8 0.756 7 14.409 5 3.2937 6 8.2065 5 28.5528 7 7.1799 6 13.799 7 0.0486 5 0.2411 8 0.0011 6 13.2622 6 0.4143 7 22.0461 7)
Average genome size in population (length): 87.313
Average program size in population (points): 88.313
Average percent parens in population: 0.011
Minimum age in population: 26.67230415344238
Maximum age in population: 31.62297058105469
Average age in population: 29.507411485672
Median age in population: 29.52900981903076
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.466
Error (vector) diversity:			 0.497
Behavioral diversity:				 0.497
--- Run Statistics ---
Number of program evaluations used so far: 21000
Number of point (instruction) evaluations so far: 36877377
--- Timings ---
Current time: 1529615694182 milliseconds
Total Time:          71.1 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        28.1 seconds, 39.6%
Fitness Testing:     33.7 seconds, 47.5%
Report:               9.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 20
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 21
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 21
;;******************************
;; -*- Number IO problem report - generation 21
Test total error for best: 60337.36039999985
Test mean error for best: 30.16868
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -39.03021     
Correct output: -111.892428812 | Program output: -84.03021     
Correct output: -50.5084198428 | Program output: -66.03021     
Correct output: 43.4091085878  | Program output: -19.03021     
Correct output: 135.7828450917 | Program output: 57.03021      
Correct output: -36.0049045144 | Program output: -48.03021     
Correct output: -54.8912669799 | Program output: -48.03021     
Correct output: -101.4024240283 | Program output: -84.03021     
Correct output: -36.8440401492 | Program output: 4.03021       
Correct output: -32.0101752266 | Program output: -15.03021     
Correct output: -30.9280763402 | Program output: -18.03021     
Correct output: -7.1922309574  | Program output: -7.03021      
Correct output: 9.2440077884   | Program output: -32.03021     
Correct output: -75.601313294  | Program output: -88.03021     
Correct output: 117.7063323673 | Program output: 89.03021      
Correct output: 136.2064676055 | Program output: 82.03021      
Correct output: -106.5738029547 | Program output: -66.03021     
Correct output: 135.179935086  | Program output: 51.03021      
Correct output: 79.8229926043  | Program output: 68.03021      
Correct output: 120.9514376691 | Program output: 103.03021     
Correct output: -16.7588893337 | Program output: -9.03021      
Correct output: -1.0143626863  | Program output: 4.03021       
Correct output: 82.2861853158  | Program output: 71.03021      
Correct output: 2.7192599311   | Program output: -16.03021     
Correct output: -95.0573298011 | Program output: -27.03021     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_tan} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_rot} {:instruction float_sub} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_yank} {:instruction print_integer} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_sub} {:instruction float_cos} {:instruction float_dec})
Best program: (integer_yankdup float_pop integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger float_inc integer_min float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_stackdepth float_sub float_flush float_dup float_add float_dec float_mult integer_yankdup integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_tan float_dup integer_add integer_stackdepth float_div integer_rot float_sub float_flush integer_stackdepth float_div -21.856727626418078 in1 print_integer float_div print_integer float_flush float_tan float_inc float_sin float_div print_integer float_flush float_yank print_integer integer_dec float_yankdup float_mod float_sub float_cos float_dec)
Errors: [93.5007 9 27.8622 10 15.5218 10 62.4393 11 78.7526 10 12.0253 9 6.8611 11 17.3722 10 40.8743 11 16.98 9 12.8979 9 0.162 8 41.2742 10 12.4289 8 28.6761 10 54.1763 11 40.5436 9 84.1497 9 11.7928 11 17.9212 10 7.7287 11 5.0446 9 11.256 11 18.7495 10 68.0271 8]
Total: 1031.0180999999998
Mean: 20.620361
Genome size: 103
Size: 104
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 2901.2295526999987
Median total errors in population: 1056.8833
Error averages by case: (159.50035660000015 10.324 100.70939559999991 10.244 98.6492488000003 9.694 139.0614674999995 10.496 148.50014859999976 11.112 95.01273469999944 9.783 79.63249560000003 9.746 91.04972519999994 9.695 109.49411809999987 9.542 88.2634314 8.355 83.62214109999988 9.896 82.96489110000014 9.658 120.18049369999997 10.539 96.7231748999998 7.898 103.5363021999999 10.399 126.61175820000064 11.087 111.71679240000016 10.679 153.2957281 10.616 87.98809709999996 10.455 94.0275083999999 11.322 78.72136350000011 10.129 78.60009969999983 8.247 87.54664429999966 10.87 99.83254240000035 10.325 135.5848935000003 9.293)
Error minima by case: (42.5186 5 15.8781 4 11.7212 7 12.4091 4 4.7828 5 2.7823 7 0.1087 7 5.3881 5 1.9432 4 4.9958 4 0.9137 3 0.0524 8 0.756 4 12.409 5 6.2937 5 5.2065 4 16.5615 5 4.1799 5 11.7928 4 3.0486 4 0.2414 8 2.0E-4 6 11.256 4 0.5857 4 5.0451 4)
Average genome size in population (length): 89.509
Average program size in population (points): 90.509
Average percent parens in population: 0.011
Minimum age in population: 28.80586624145508
Maximum age in population: 33.11524200439453
Average age in population: 31.00613247394562
Median age in population: 31.00438737869263
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 30
Genome diversity (% unique Plush genomes):	 0.862
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 30
Syntactic diversity (% unique Push programs):	 0.862
Total error diversity:				 0.454
Error (vector) diversity:			 0.479
Behavioral diversity:				 0.479
--- Run Statistics ---
Number of program evaluations used so far: 22000
Number of point (instruction) evaluations so far: 39115152
--- Timings ---
Current time: 1529615697989 milliseconds
Total Time:          74.8 seconds
Initialization:       0.1 seconds,  0.2%
Reproduction:        29.5 seconds, 39.4%
Fitness Testing:     35.6 seconds, 47.6%
Report:               9.6 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 21
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 22
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 22
;;******************************
;; -*- Number IO problem report - generation 22
Test total error for best: 60492.371999999996
Test mean error for best: 30.24619
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -38.01027     
Correct output: -111.892428812 | Program output: -83.01027     
Correct output: -50.5084198428 | Program output: -65.01027     
Correct output: 43.4091085878  | Program output: -18.01027     
Correct output: 135.7828450917 | Program output: 58.01027      
Correct output: -36.0049045144 | Program output: -47.01027     
Correct output: -54.8912669799 | Program output: -47.01027     
Correct output: -101.4024240283 | Program output: -83.01027     
Correct output: -36.8440401492 | Program output: 5.01027       
Correct output: -32.0101752266 | Program output: -14.01027     
Correct output: -30.9280763402 | Program output: -17.01027     
Correct output: -7.1922309574  | Program output: -6.01027      
Correct output: 9.2440077884   | Program output: -31.01027     
Correct output: -75.601313294  | Program output: -87.01027     
Correct output: 117.7063323673 | Program output: 90.01027      
Correct output: 136.2064676055 | Program output: 83.01027      
Correct output: -106.5738029547 | Program output: -65.01027     
Correct output: 135.179935086  | Program output: 52.01027      
Correct output: 79.8229926043  | Program output: 69.01027      
Correct output: 120.9514376691 | Program output: 104.01027     
Correct output: -16.7588893337 | Program output: -8.01027      
Correct output: -1.0143626863  | Program output: 5.01027       
Correct output: 82.2861853158  | Program output: 72.01027      
Correct output: 2.7192599311   | Program output: -15.01027     
Correct output: -95.0573298011 | Program output: -26.01027     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_swap} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction integer_div} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455})
Best program: (integer_yankdup float_swap integer_dup_times print_integer integer_dec float_mult float_max integer_div integer_mult in2 float_frominteger integer_yank integer_min float_inc integer_min float_inc float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult integer_min float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_stackdepth float_sub float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 in1 print_integer float_div print_integer float_flush float_inc float_mult integer_max float_tan float_inc float_sin float_div print_integer float_flush 26 float_mult integer_stackdepth float_div float_dec integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
Errors: [94.5206 8 28.8822 11 14.5019 9 61.4194 9 77.7726 10 11.0054 10 7.881 10 18.3922 10 41.8543 11 17.9999 8 13.9178 10 1.182 9 40.2543 10 11.409 8 27.6961 10 53.1962 10 41.5635 9 83.1697 11 10.8127 10 16.9412 10 8.7486 11 6.0246 9 10.2759 10 17.7295 11 69.0471 10]
Total: 1030.1977000000002
Mean: 20.603954
Genome size: 101
Size: 102
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3100.9651701999965
Median total errors in population: 1048.7927999999997
Error averages by case: (167.1506828999999 9.903 108.51941499999928 10.566 105.27088800000068 9.459 145.7360927000003 9.963 156.9549435999992 10.727 101.76651089999913 10.042 88.7336836999996 9.558 99.01547510000027 9.966 117.4405882999998 10.156 96.76339859999983 8.377 93.30880479999972 9.962 89.48934650000007 9.469 127.11487650000016 10.441 103.08790509999969 8.142 112.43753059999999 10.341 134.994061700001 11.037 119.57119100000038 10.541 161.80130029999975 10.699 97.45692199999952 10.623 102.95026470000005 11.068 87.96932690000035 10.376 85.81262870000002 8.104 96.98816149999901 10.852 106.68437220000055 10.237 143.68779890000005 9.65)
Error minima by case: (37.5081 5 15.8494 4 14.5019 7 8.3789 4 9.7828 5 11.0054 8 0.1087 7 5.3594 5 8.0 4 4.9672 4 0.8851 3 0.162 7 2.2327 4 11.409 5 5.2937 5 10.2065 4 28.5308 5 9.1799 5 10.8127 4 2.0486 4 0.2512 8 0.0 5 10.2759 4 0.2719 4 24.0345 4)
Average genome size in population (length): 90.311
Average program size in population (points): 91.311
Average percent parens in population: 0.011
Minimum age in population: 30.18386077880859
Maximum age in population: 34.24839115142822
Average age in population: 32.27859679365158
Median age in population: 32.28882765769958
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 50
Genome diversity (% unique Plush genomes):	 0.84
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 50
Syntactic diversity (% unique Push programs):	 0.84
Total error diversity:				 0.397
Error (vector) diversity:			 0.424
Behavioral diversity:				 0.424
--- Run Statistics ---
Number of program evaluations used so far: 23000
Number of point (instruction) evaluations so far: 41372927
--- Timings ---
Current time: 1529615701746 milliseconds
Total Time:          78.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        30.9 seconds, 39.3%
Fitness Testing:     37.5 seconds, 47.8%
Report:              10.1 seconds, 12.8%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 22
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 23
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 23
;;******************************
;; -*- Number IO problem report - generation 23
Test total error for best: 60572.17429999983
Test mean error for best: 30.28609
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -37.03021     
Correct output: -111.892428812 | Program output: -82.03021     
Correct output: -50.5084198428 | Program output: -64.03021     
Correct output: 43.4091085878  | Program output: -17.03021     
Correct output: 135.7828450917 | Program output: 59.03021      
Correct output: -36.0049045144 | Program output: -46.03021     
Correct output: -54.8912669799 | Program output: -46.03021     
Correct output: -101.4024240283 | Program output: -82.03021     
Correct output: -36.8440401492 | Program output: 6.03021       
Correct output: -32.0101752266 | Program output: -13.03021     
Correct output: -30.9280763402 | Program output: -16.03021     
Correct output: -7.1922309574  | Program output: -5.03021      
Correct output: 9.2440077884   | Program output: -30.03021     
Correct output: -75.601313294  | Program output: -86.03021     
Correct output: 117.7063323673 | Program output: 91.03021      
Correct output: 136.2064676055 | Program output: 84.03021      
Correct output: -106.5738029547 | Program output: -64.03021     
Correct output: 135.179935086  | Program output: 53.03021      
Correct output: 79.8229926043  | Program output: 70.03021      
Correct output: 120.9514376691 | Program output: 105.03021     
Correct output: -16.7588893337 | Program output: -7.03021      
Correct output: -1.0143626863  | Program output: 6.03021       
Correct output: 82.2861853158  | Program output: 73.03021      
Correct output: 2.7192599311   | Program output: -14.03021     
Correct output: -95.0573298011 | Program output: -25.03021     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yankdup} {:instruction float_pop} {:instruction integer_dup_times} {:instruction print_integer} {:instruction integer_dec} {:instruction float_mult} {:instruction float_max} {:instruction float_min} {:instruction integer_mult} {:instruction in2} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction tagged_869} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_tan} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_rot} {:instruction float_sub} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_yank} {:instruction print_integer} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_sub} {:instruction float_cos} {:instruction float_dec})
Best program: (integer_yankdup float_pop integer_dup_times print_integer integer_dec float_mult float_max float_min integer_mult in2 float_frominteger float_inc integer_min float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 float_inc integer_min float_inc float_frominteger tagged_869 float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_stackdepth float_sub float_flush float_dup float_add float_dec float_mult integer_yankdup integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_tan float_dup integer_add integer_stackdepth float_div integer_rot float_sub float_flush integer_stackdepth float_div -21.856727626418078 in1 print_integer float_div print_integer float_flush float_tan float_inc float_sin float_div print_integer float_flush float_yank print_integer integer_dec float_yankdup float_mod float_sub float_cos float_dec)
Errors: [95.5007 9 29.8622 10 13.5218 10 60.4393 11 76.7526 11 10.0253 8 8.8611 11 19.3722 10 42.8743 10 18.98 9 14.8979 9 2.162 9 39.2742 11 10.4289 8 26.6761 9 52.1763 11 42.5436 10 82.1497 9 9.7928 10 15.9212 9 9.7287 11 7.0446 9 9.256 11 16.7495 10 70.0271 7]
Total: 1027.0180999999998
Mean: 20.540361
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3048.0376352999997
Median total errors in population: 1043.4251
Error averages by case: (168.8536853999998 9.509 109.93988029999882 10.913 100.95564450000104 9.378 141.09595499999998 9.676 152.7746240999992 10.63 97.48289349999911 10.189 87.81043539999952 9.721 100.33104030000028 10.332 117.52404900000057 10.825 98.10846499999963 8.59 92.46364389999974 10.049 85.87005499999982 9.417 122.52460560000043 10.198 98.86583089999976 8.409 108.27739970000015 10.283 130.82116160000135 11.158 121.06629390000055 10.399 157.60349049999934 10.858 93.48030529999956 10.894 98.64622790000027 10.706 87.49794410000054 10.608 82.87191399999996 8.666 92.98836509999907 10.924 102.42494660000071 10.34 145.19277869999976 9.894)
Error minima by case: (51.0 7 15.8897 6 11.5156 7 13.4091 6 7.7828 7 8.0191 8 0.1114 7 5.3997 7 8.0 6 5.0075 6 0.9254 5 0.159 7 0.2327 6 8.4227 6 7.7063 7 8.2065 6 28.5711 7 7.1799 7 7.799 6 5.0486 6 0.2513 8 0.0011 5 7.2622 6 0.6888 6 39.0 6)
Average genome size in population (length): 92.216
Average program size in population (points): 93.216
Average percent parens in population: 0.011
Minimum age in population: 31.28323364257812
Maximum age in population: 35.65848922729492
Average age in population: 33.59601175928116
Median age in population: 33.55859386920929
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 17
Genome diversity (% unique Plush genomes):	 0.854
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 17
Syntactic diversity (% unique Push programs):	 0.854
Total error diversity:				 0.37
Error (vector) diversity:			 0.393
Behavioral diversity:				 0.393
--- Run Statistics ---
Number of program evaluations used so far: 24000
Number of point (instruction) evaluations so far: 43678377
--- Timings ---
Current time: 1529615705487 milliseconds
Total Time:          82.3 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        32.2 seconds, 39.1%
Fitness Testing:     39.4 seconds, 47.9%
Report:              10.6 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 23
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 24
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 24
;;******************************
;; -*- Number IO problem report - generation 24
Test total error for best: 60853.578999999845
Test mean error for best: 30.42679
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -35.03021     
Correct output: -111.892428812 | Program output: -80.03021     
Correct output: -50.5084198428 | Program output: -62.03021     
Correct output: 43.4091085878  | Program output: -15.03021     
Correct output: 135.7828450917 | Program output: 61.03021      
Correct output: -36.0049045144 | Program output: -44.03021     
Correct output: -54.8912669799 | Program output: -44.03021     
Correct output: -101.4024240283 | Program output: -80.03021     
Correct output: -36.8440401492 | Program output: 8.03021       
Correct output: -32.0101752266 | Program output: -11.03021     
Correct output: -30.9280763402 | Program output: -14.03021     
Correct output: -7.1922309574  | Program output: -3.03021      
Correct output: 9.2440077884   | Program output: -28.03021     
Correct output: -75.601313294  | Program output: -84.03021     
Correct output: 117.7063323673 | Program output: 93.03021      
Correct output: 136.2064676055 | Program output: 86.03021      
Correct output: -106.5738029547 | Program output: -62.03021     
Correct output: 135.179935086  | Program output: 55.03021      
Correct output: 79.8229926043  | Program output: 72.03021      
Correct output: 120.9514376691 | Program output: 107.03021     
Correct output: -16.7588893337 | Program output: -5.03021      
Correct output: -1.0143626863  | Program output: 8.03021       
Correct output: 82.2861853158  | Program output: 75.03021      
Correct output: 2.7192599311   | Program output: -12.03021     
Correct output: -95.0573298011 | Program output: -23.03021     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_tan} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_rot} {:instruction float_sub} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_yank} {:instruction print_integer} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_sub} {:instruction float_cos} {:instruction float_dec})
Best program: (integer_mod integer_dec float_cos float_cos integer_add integer_dup in2 float_frominteger integer_yank float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc float_inc integer_min float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_stackdepth float_sub float_flush float_dup float_add float_dec float_mult integer_yankdup integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_tan float_dup integer_add integer_stackdepth float_div integer_rot float_sub float_flush integer_stackdepth float_div -21.856727626418078 in1 print_integer float_div print_integer float_flush float_tan float_inc float_sin float_div print_integer float_flush float_yank print_integer integer_dec float_yankdup float_mod float_sub float_cos float_dec)
Errors: [97.5007 9 31.8622 10 11.5218 10 58.4393 11 74.7526 11 8.0253 9 10.8611 10 21.3722 9 44.8743 11 20.98 9 16.8979 9 4.162 9 37.2742 10 8.4289 8 24.6761 10 50.1763 10 44.5436 10 80.1497 9 7.7928 10 13.9212 10 11.7287 11 9.0446 9 7.256 11 14.7495 9 72.0271 8]
Total: 1025.0180999999998
Mean: 20.500362
Genome size: 108
Size: 109
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2790.666321399996
Median total errors in population: 1037.8337000000001
Error averages by case: (158.5206277 9.417 99.28679879999922 10.836 89.60683460000095 9.514 128.7827184999996 9.804 142.4430233999996 10.593 85.98449399999919 10.082 79.69763179999958 10.016 89.58354880000009 10.276 108.1718062000007 10.896 86.92670739999981 8.615 83.25964479999972 9.851 74.6638808999999 9.119 109.98469510000031 9.807 87.65462019999997 8.337 98.89083139999997 10.08 120.51139160000125 11.081 110.38627920000046 10.259 147.27337009999954 10.635 84.08517249999973 10.817 89.32336349999996 10.358 79.22371730000067 10.764 76.20070999999997 9.036 83.58992349999929 10.86 90.82326400000052 10.508 134.51926610000024 9.711)
Error minima by case: (39.8969 7 15.8622 5 10.4916 7 5.0925 6 8.7828 6 6.9951 8 0.1114 7 5.3722 6 8.116 6 3.2822 5 0.8979 7 0.149 7 0.2327 6 7.3987 6 9.2937 6 9.2065 7 13.9398 7 8.1799 6 6.8103 6 6.0486 6 0.2514 9 0.0 5 6.2735 6 0.6322 6 2.4234 5)
Average genome size in population (length): 95.441
Average program size in population (points): 96.441
Average percent parens in population: 0.010
Minimum age in population: 32.44859027862549
Maximum age in population: 37.21149778366089
Average age in population: 34.97100345742702
Median age in population: 35.01571559906006
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 16
Genome diversity (% unique Plush genomes):	 0.863
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 16
Syntactic diversity (% unique Push programs):	 0.863
Total error diversity:				 0.347
Error (vector) diversity:			 0.367
Behavioral diversity:				 0.369
--- Run Statistics ---
Number of program evaluations used so far: 25000
Number of point (instruction) evaluations so far: 46064602
--- Timings ---
Current time: 1529615709374 milliseconds
Total Time:          86.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        33.5 seconds, 38.9%
Fitness Testing:     41.4 seconds, 48.0%
Report:              11.1 seconds, 12.9%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 24
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 25
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 25
;;******************************
;; -*- Number IO problem report - generation 25
Test total error for best: 61177.18969999988
Test mean error for best: 30.58859
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -33.03021     
Correct output: -111.892428812 | Program output: -78.03021     
Correct output: -50.5084198428 | Program output: -60.03021     
Correct output: 43.4091085878  | Program output: -13.03021     
Correct output: 135.7828450917 | Program output: 63.03021      
Correct output: -36.0049045144 | Program output: -42.03021     
Correct output: -54.8912669799 | Program output: -42.03021     
Correct output: -101.4024240283 | Program output: -78.03021     
Correct output: -36.8440401492 | Program output: 10.03021      
Correct output: -32.0101752266 | Program output: -9.03021      
Correct output: -30.9280763402 | Program output: -12.03021     
Correct output: -7.1922309574  | Program output: -1.03021      
Correct output: 9.2440077884   | Program output: -26.03021     
Correct output: -75.601313294  | Program output: -82.03021     
Correct output: 117.7063323673 | Program output: 95.03021      
Correct output: 136.2064676055 | Program output: 88.03021      
Correct output: -106.5738029547 | Program output: -60.03021     
Correct output: 135.179935086  | Program output: 57.03021      
Correct output: 79.8229926043  | Program output: 74.03021      
Correct output: 120.9514376691 | Program output: 109.03021     
Correct output: -16.7588893337 | Program output: -3.03021      
Correct output: -1.0143626863  | Program output: 10.03021      
Correct output: 82.2861853158  | Program output: 77.03021      
Correct output: 2.7192599311   | Program output: -10.03021     
Correct output: -95.0573298011 | Program output: -21.03021     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_yankdup} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_tan} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_rot} {:instruction float_sub} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_yank} {:instruction print_integer} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_sub} {:instruction float_cos} {:instruction float_dec})
Best program: (integer_mod integer_dec float_cos float_cos integer_add integer_dup in2 float_frominteger integer_yank float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc float_frominteger integer_yank integer_yankdup float_inc float_inc float_inc integer_min float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_stackdepth float_sub float_flush float_dup float_add float_dec float_mult integer_yankdup integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_tan float_dup integer_add integer_stackdepth float_div integer_rot float_sub float_flush integer_stackdepth float_div -21.856727626418078 in1 print_integer float_div print_integer float_flush float_tan float_inc float_sin float_div print_integer float_flush float_yank print_integer integer_dec float_yankdup float_mod float_sub float_cos float_dec)
Errors: [99.5007 9 33.8622 10 9.5218 9 56.4393 10 72.7526 10 6.0253 9 12.8611 11 23.3722 10 46.8743 11 22.98 9 18.8979 9 6.162 9 35.2742 10 6.4289 8 22.6761 10 48.1763 11 46.5436 9 78.1497 9 5.7928 10 11.9212 9 13.7287 11 11.0446 9 5.256 11 12.7495 10 74.0271 8]
Total: 1022.0180999999999
Mean: 20.440363
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2950.864691199995
Median total errors in population: 1033.7441
Error averages by case: (167.03194320000037 9.259 108.05713379999932 10.681 94.73729040000089 9.651 134.86416419999975 9.991 147.11737489999976 10.638 91.21233689999913 9.932 87.68619129999954 10.382 98.4168237 10.238 116.48626690000066 10.829 95.7854765999997 8.717 92.30231559999984 9.931 80.61775139999979 8.982 116.31219100000023 9.899 92.72579859999975 8.371 102.54461329999987 10.171 125.24282710000153 11.013 119.1772984000009 10.105 151.9268037999996 10.303 87.58415979999964 10.599 92.96994059999999 10.363 86.86310140000079 11.049 83.69627429999963 9.216 87.0931090999992 10.864 96.00252160000076 10.499 143.25998330000047 9.468)
Error minima by case: (52.0 6 19.8824 6 3.6865 7 7.2636 5 24.7828 7 5.0253 8 0.1114 8 9.3924 6 8.1296 6 9.0002 5 4.9181 7 0.1201 7 0.2327 6 5.4289 6 6.7063 6 25.2065 5 32.5638 6 24.1799 5 4.7928 6 9.9514 5 0.2511 9 0.0041 7 4.256 5 0.7193 6 40.0 5)
Average genome size in population (length): 98.916
Average program size in population (points): 99.916
Average percent parens in population: 0.010
Minimum age in population: 33.66991567611694
Maximum age in population: 38.60238116979599
Average age in population: 36.46177636253834
Median age in population: 36.52547109127045
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 10
Genome diversity (% unique Plush genomes):	 0.902
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 10
Syntactic diversity (% unique Push programs):	 0.902
Total error diversity:				 0.36
Error (vector) diversity:			 0.386
Behavioral diversity:				 0.386
--- Run Statistics ---
Number of program evaluations used so far: 26000
Number of point (instruction) evaluations so far: 48537552
--- Timings ---
Current time: 1529615713283 milliseconds
Total Time:          90.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        34.9 seconds, 38.7%
Fitness Testing:     43.4 seconds, 48.1%
Report:              11.7 seconds, 13.0%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 25
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 26
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 26
;;******************************
;; -*- Number IO problem report - generation 26
Test total error for best: 62206.209199999874
Test mean error for best: 31.10310
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -28.03021     
Correct output: -111.892428812 | Program output: -73.03021     
Correct output: -50.5084198428 | Program output: -55.03021     
Correct output: 43.4091085878  | Program output: -8.03021      
Correct output: 135.7828450917 | Program output: 68.03021      
Correct output: -36.0049045144 | Program output: -37.03021     
Correct output: -54.8912669799 | Program output: -37.03021     
Correct output: -101.4024240283 | Program output: -73.03021     
Correct output: -36.8440401492 | Program output: 15.03021      
Correct output: -32.0101752266 | Program output: -4.03021      
Correct output: -30.9280763402 | Program output: -7.03021      
Correct output: -7.1922309574  | Program output: 4.03021       
Correct output: 9.2440077884   | Program output: -21.03021     
Correct output: -75.601313294  | Program output: -77.03021     
Correct output: 117.7063323673 | Program output: 100.03021     
Correct output: 136.2064676055 | Program output: 93.03021      
Correct output: -106.5738029547 | Program output: -55.03021     
Correct output: 135.179935086  | Program output: 62.03021      
Correct output: 79.8229926043  | Program output: 79.03021      
Correct output: 120.9514376691 | Program output: 114.03021     
Correct output: -16.7588893337 | Program output: 2.03021       
Correct output: -1.0143626863  | Program output: 15.03021      
Correct output: 82.2861853158  | Program output: 82.03021      
Correct output: 2.7192599311   | Program output: -5.03021      
Correct output: -95.0573298011 | Program output: -16.03021     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction integer_dec} {:instruction float_cos} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_tan} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_rot} {:instruction float_sub} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_yank} {:instruction print_integer} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_sub} {:instruction float_cos} {:instruction float_dec})
Best program: (integer_yank integer_dec float_cos float_cos integer_add integer_dup in2 float_frominteger integer_yank float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc float_inc integer_min integer_yank float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc float_inc integer_yank integer_min float_inc integer_mult float_inc float_inc integer_min float_inc float_frominteger integer_yank integer_min float_inc integer_mult integer_min integer_yank integer_min float_inc float_inc tagged_869 integer_max integer_mult float_inc integer_mult integer_min float_inc integer_min float_inc float_inc tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_dec integer_yankdup float_dup_items integer_yankdup float_stackdepth float_sub float_flush float_dup float_add float_dec float_mult integer_yankdup integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_tan float_dup integer_add integer_stackdepth float_div integer_rot float_sub float_flush integer_stackdepth float_div -21.856727626418078 in1 print_integer float_div print_integer float_flush float_tan float_inc float_sin float_div print_integer float_flush float_yank print_integer integer_dec float_yankdup float_mod float_sub float_cos float_dec)
Errors: [104.5007 10 38.8622 10 4.5218 9 51.4393 10 67.7526 11 1.0253 8 17.8611 11 28.3722 10 51.8743 11 27.98 9 23.8979 9 11.2224 10 30.2742 10 1.4289 7 17.6761 9 43.1763 10 51.5436 10 73.1497 10 0.7928 9 6.9212 10 18.7891 12 16.0446 9 0.256 9 7.7495 10 79.0271 8]
Total: 1017.1389
Mean: 20.342777
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3072.9895880999975
Median total errors in population: 1031.0179999999998
Error averages by case: (174.1145467000005 9.259 115.83525499999983 10.555 99.51239290000096 9.749 138.76256099999944 10.205 149.07821540000063 10.893 95.94270699999902 9.703 95.23670999999943 10.587 106.22963219999967 10.09 120.46435250000033 10.735 102.77224109999963 8.805 99.32754239999974 9.834 87.7967877999997 9.236 120.36300610000023 10.09 97.7491101999998 8.314 104.64845089999963 10.114 127.32981180000166 10.926 126.73103940000101 10.324 153.7541524999996 10.206 89.25095059999975 10.282 95.27424429999971 10.331 94.44888710000095 11.091 88.06339129999947 9.235 88.80892639999921 10.858 100.1958484000009 10.347 150.37082510000104 9.159)
Error minima by case: (51.0 7 8.8814 6 4.4971 7 4.7232 6 7.7828 7 1.0253 7 0.1201 7 1.6086 7 2.0514 6 2.0008 5 2.8968 5 0.1592 7 0.231 6 1.4289 5 10.2937 7 8.2065 6 21.5628 7 7.1799 7 0.7928 6 6.9212 6 0.2541 7 0.0041 7 0.256 6 0.2807 6 22.0251 6)
Average genome size in population (length): 104.398
Average program size in population (points): 105.398
Average percent parens in population: 0.010
Minimum age in population: 35.09285521507263
Maximum age in population: 40.03038614988327
Average age in population: 38.05948577421904
Median age in population: 38.08853533864021
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.893
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.893
Total error diversity:				 0.359
Error (vector) diversity:			 0.388
Behavioral diversity:				 0.388
--- Run Statistics ---
Number of program evaluations used so far: 27000
Number of point (instruction) evaluations so far: 51147702
--- Timings ---
Current time: 1529615717352 milliseconds
Total Time:          94.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        36.3 seconds, 38.5%
Fitness Testing:     45.4 seconds, 48.3%
Report:              12.3 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 26
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 27
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 27
;;******************************
;; -*- Number IO problem report - generation 27
Test total error for best: 62206.209199999874
Test mean error for best: 31.10310
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -28.03021     
Correct output: -111.892428812 | Program output: -73.03021     
Correct output: -50.5084198428 | Program output: -55.03021     
Correct output: 43.4091085878  | Program output: -8.03021      
Correct output: 135.7828450917 | Program output: 68.03021      
Correct output: -36.0049045144 | Program output: -37.03021     
Correct output: -54.8912669799 | Program output: -37.03021     
Correct output: -101.4024240283 | Program output: -73.03021     
Correct output: -36.8440401492 | Program output: 15.03021      
Correct output: -32.0101752266 | Program output: -4.03021      
Correct output: -30.9280763402 | Program output: -7.03021      
Correct output: -7.1922309574  | Program output: 4.03021       
Correct output: 9.2440077884   | Program output: -21.03021     
Correct output: -75.601313294  | Program output: -77.03021     
Correct output: 117.7063323673 | Program output: 100.03021     
Correct output: 136.2064676055 | Program output: 93.03021      
Correct output: -106.5738029547 | Program output: -55.03021     
Correct output: 135.179935086  | Program output: 62.03021      
Correct output: 79.8229926043  | Program output: 79.03021      
Correct output: 120.9514376691 | Program output: 114.03021     
Correct output: -16.7588893337 | Program output: 2.03021       
Correct output: -1.0143626863  | Program output: 15.03021      
Correct output: 82.2861853158  | Program output: 82.03021      
Correct output: 2.7192599311   | Program output: -5.03021      
Correct output: -95.0573298011 | Program output: -16.03021     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_yank} {:instruction integer_dec} {:instruction float_cos} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction integer_yankdup} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_tan} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_rot} {:instruction float_sub} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_yank} {:instruction print_integer} {:instruction integer_dec} {:instruction float_yankdup} {:instruction float_mod} {:instruction float_sub} {:instruction float_cos} {:instruction float_dec})
Best program: (integer_yank integer_dec float_cos float_cos integer_add integer_dup in2 float_frominteger integer_yank float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc float_inc integer_min integer_yank float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc float_inc integer_yank integer_min float_inc integer_mult float_inc float_inc integer_min float_inc float_frominteger integer_yank integer_min float_inc integer_mult integer_min integer_yank integer_min float_inc float_inc tagged_869 integer_max integer_mult float_inc integer_mult integer_min float_inc integer_min float_inc float_inc tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_dec integer_yankdup float_dup_items integer_yankdup float_stackdepth float_sub float_flush float_dup float_add float_dec float_mult integer_yankdup integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_tan float_dup integer_add integer_stackdepth float_div integer_rot float_sub float_flush integer_stackdepth float_div -21.856727626418078 in1 print_integer float_div print_integer float_flush float_tan float_inc float_sin float_div print_integer float_flush float_yank print_integer integer_dec float_yankdup float_mod float_sub float_cos float_dec)
Errors: [104.5007 10 38.8622 10 4.5218 9 51.4393 10 67.7526 11 1.0253 8 17.8611 11 28.3722 10 51.8743 11 27.98 9 23.8979 9 11.2224 10 30.2742 10 1.4289 7 17.6761 9 43.1763 10 51.5436 10 73.1497 10 0.7928 9 6.9212 10 18.7891 12 16.0446 9 0.256 9 7.7495 10 79.0271 8]
Total: 1017.1389
Mean: 20.342777
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 3041.5392564999975
Median total errors in population: 1028.1977000000002
Error averages by case: (173.30979760000062 9.152 114.7250833999999 10.482 95.80305970000111 9.713 135.42496029999944 10.181 148.5245908000006 10.967 92.18238919999914 9.664 94.03759909999944 10.547 105.08349889999971 9.919 123.22725670000024 10.826 102.29479189999967 8.772 98.43317499999976 9.785 86.63980019999946 9.372 116.53767560000026 9.974 94.04676289999972 8.228 104.04850649999942 10.155 126.85690060000198 10.84 125.67984900000107 10.389 153.32761229999957 10.2 88.48139889999982 10.116 94.61491039999956 10.265 93.39508830000082 11.039 90.52466799999948 9.295 88.0668401999993 10.881 96.77518890000067 10.181 149.40385210000102 9.151)
Error minima by case: (60.8078 6 5.8822 6 4.4937 7 5.4081 7 5.7828 6 0.9972 7 0.1389 8 4.6078 5 4.3396 5 5.0001 6 4.9178 5 0.162 7 0.2128 7 1.4008 6 3.2937 6 6.2065 5 18.5635 6 5.1799 5 0.7928 6 0.0486 5 0.2411 9 0.0031 6 0.256 5 0.2132 7 23.3343 6)
Average genome size in population (length): 107.36
Average program size in population (points): 108.36
Average percent parens in population: 0.009
Minimum age in population: 36.09285521507263
Maximum age in population: 41.6538033336401
Average age in population: 39.52963452129066
Median age in population: 39.5696202814579
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 11
Genome diversity (% unique Plush genomes):	 0.898
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 11
Syntactic diversity (% unique Push programs):	 0.898
Total error diversity:				 0.327
Error (vector) diversity:			 0.365
Behavioral diversity:				 0.365
--- Run Statistics ---
Number of program evaluations used so far: 28000
Number of point (instruction) evaluations so far: 53831827
--- Timings ---
Current time: 1529615721472 milliseconds
Total Time:          98.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        37.6 seconds, 38.3%
Fitness Testing:     47.6 seconds, 48.5%
Report:              12.9 seconds, 13.1%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 27
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 28
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 28
;;******************************
;; -*- Number IO problem report - generation 28
Test total error for best: 62262.85099999996
Test mean error for best: 31.13143
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -28.01027     
Correct output: -111.892428812 | Program output: -73.01027     
Correct output: -50.5084198428 | Program output: -55.01027     
Correct output: 43.4091085878  | Program output: -8.01027      
Correct output: 135.7828450917 | Program output: 68.01027      
Correct output: -36.0049045144 | Program output: -37.01027     
Correct output: -54.8912669799 | Program output: -37.01027     
Correct output: -101.4024240283 | Program output: -73.01027     
Correct output: -36.8440401492 | Program output: 15.01027      
Correct output: -32.0101752266 | Program output: -4.01027      
Correct output: -30.9280763402 | Program output: -7.01027      
Correct output: -7.1922309574  | Program output: 4.01027       
Correct output: 9.2440077884   | Program output: -21.01027     
Correct output: -75.601313294  | Program output: -77.01027     
Correct output: 117.7063323673 | Program output: 100.01027     
Correct output: 136.2064676055 | Program output: 93.01027      
Correct output: -106.5738029547 | Program output: -55.01027     
Correct output: 135.179935086  | Program output: 62.01027      
Correct output: 79.8229926043  | Program output: 79.01027      
Correct output: 120.9514376691 | Program output: 114.01027     
Correct output: -16.7588893337 | Program output: 2.01027       
Correct output: -1.0143626863  | Program output: 15.01027      
Correct output: 82.2861853158  | Program output: 82.01027      
Correct output: 2.7192599311   | Program output: -5.01027      
Correct output: -95.0573298011 | Program output: -16.01027     
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction tagged_869} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction integer_shove} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455})
Best program: (integer_mod integer_dec float_cos float_cos integer_add integer_dup in2 float_frominteger integer_yank float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 float_inc integer_min float_inc float_frominteger tagged_869 float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc float_inc float_inc tagged_869 integer_max integer_dup_items integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop float_dup integer_yankdup float_dup_items float_dup_items float_stackdepth float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 in1 print_integer float_div print_integer float_flush float_inc float_mult integer_max float_tan float_inc integer_shove float_div print_integer float_flush 26 float_mult integer_stackdepth float_div float_dec integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
Errors: [104.5206 9 38.8822 11 4.5019 8 51.4194 8 67.7726 11 1.0054 9 17.881 10 28.3922 10 51.8543 11 27.9999 8 23.9178 10 11.2025 10 30.2543 9 1.409 7 17.6961 9 43.1962 10 51.5635 10 73.1697 11 0.8127 9 6.9412 10 18.7692 12 16.0246 9 0.2759 9 7.7295 10 79.0471 10]
Total: 1016.2387999999999
Mean: 20.324776
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2805.711536199998
Median total errors in population: 1026.0180999999998
Error averages by case: (167.86010780000046 9.222 108.68323860000017 10.503 86.65240000000078 9.487 127.11758739999934 10.215 133.0169028000007 10.919 83.0880126999993 9.616 88.06724629999941 10.613 99.00096849999966 9.91 117.69392889999999 10.928 96.50494409999959 8.923 92.60498419999982 9.653 80.70419769999944 9.571 107.97038740000008 9.818 84.78153479999969 8.216 87.77143359999937 10.175 111.0134471000015 10.799 119.73705760000095 10.294 137.9064289999992 10.111 71.85591720000025 10.07 78.21327119999958 10.227 87.59297970000065 11.125 84.73096869999958 9.286 71.47119900000003 10.834 88.04809900000063 10.083 143.8962929000011 9.13)
Error minima by case: (54.0 5 17.8824 4 1.4937 6 15.9995 4 8.2474 4 0.0051 7 0.12 8 7.3924 5 0.7178 4 4.1161 3 2.918 7 0.162 8 0.0891 4 0.4087 6 7.6751 5 32.8237 5 13.4362 5 2.8503 5 0.187 4 3.0798 4 0.2514 8 0.7853 7 0.2162 4 0.2901 4 22.7934 4)
Average genome size in population (length): 111.561
Average program size in population (points): 112.561
Average percent parens in population: 0.009
Minimum age in population: 38.05456909537315
Maximum age in population: 42.91467124968767
Average age in population: 41.03616912966222
Median age in population: 41.06942101940513
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 14
Genome diversity (% unique Plush genomes):	 0.914
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 14
Syntactic diversity (% unique Push programs):	 0.914
Total error diversity:				 0.357
Error (vector) diversity:			 0.378
Behavioral diversity:				 0.378
--- Run Statistics ---
Number of program evaluations used so far: 29000
Number of point (instruction) evaluations so far: 56620877
--- Timings ---
Current time: 1529615725591 milliseconds
Total Time:         102.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        39.0 seconds, 38.1%
Fitness Testing:     49.8 seconds, 48.6%
Report:              13.5 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 28
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 29
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 29
;;******************************
;; -*- Number IO problem report - generation 29
Test total error for best: 62405.27299999991
Test mean error for best: 31.20264
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -27.021027    
Correct output: -111.892428812 | Program output: -72.021027    
Correct output: -50.5084198428 | Program output: -54.021027    
Correct output: 43.4091085878  | Program output: -7.021027     
Correct output: 135.7828450917 | Program output: 69.021027     
Correct output: -36.0049045144 | Program output: -36.021027    
Correct output: -54.8912669799 | Program output: -36.021027    
Correct output: -101.4024240283 | Program output: -72.021027    
Correct output: -36.8440401492 | Program output: 16.021027     
Correct output: -32.0101752266 | Program output: -3.021027     
Correct output: -30.9280763402 | Program output: -6.021027     
Correct output: -7.1922309574  | Program output: 5.021027      
Correct output: 9.2440077884   | Program output: -20.021027    
Correct output: -75.601313294  | Program output: -76.021027    
Correct output: 117.7063323673 | Program output: 101.021027    
Correct output: 136.2064676055 | Program output: 94.021027     
Correct output: -106.5738029547 | Program output: -54.021027    
Correct output: 135.179935086  | Program output: 63.021027     
Correct output: 79.8229926043  | Program output: 80.021027     
Correct output: 120.9514376691 | Program output: 115.021027    
Correct output: -16.7588893337 | Program output: 3.021027      
Correct output: -1.0143626863  | Program output: 16.021027     
Correct output: 82.2861853158  | Program output: 83.021027     
Correct output: 2.7192599311   | Program output: -4.021027     
Correct output: -95.0573298011 | Program output: -15.021027    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction float_min} {:instruction float_frominteger} {:instruction float_dup_times} {:instruction integer_min} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction float_sin} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455})
Best program: (integer_mod integer_dec float_cos integer_yankdup integer_add integer_dup in2 float_frominteger integer_yank float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc float_inc integer_mult float_inc float_inc integer_min float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max float_min float_frominteger float_dup_times integer_min float_inc integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float integer_pop integer_dec integer_yankdup integer_stackdepth float_add float_dec float_mult float_sin integer_sub integer_swap integer_dup_times integer_stackdepth float_mod integer_stackdepth float_div -21.856727626418078 in1 in1 print_integer float_div print_integer float_flush float_inc float_mult integer_max float_tan float_inc float_sin float_div print_integer float_flush 26 float_mult integer_stackdepth float_div float_dec integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
Errors: [105.5099 9 39.8714 11 3.5126 8 50.4301 8 66.7618 10 0.0161 8 18.8702 10 29.3814 9 52.8651 10 28.9891 8 24.907 10 12.2133 9 29.265 10 0.4197 7 16.6853 9 42.1854 11 52.5528 10 72.1589 10 0.198 10 5.9304 10 19.7799 12 17.0354 10 0.7348 10 6.7403 11 80.0363 8]
Total: 1015.0501999999999
Mean: 20.301004
Genome size: 117
Size: 118
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2945.204002699998
Median total errors in population: 1025.0176999999999
Error averages by case: (173.87977730000065 9.341 116.11041710000023 10.576 90.39055090000062 9.169 129.43722469999943 9.911 138.77480780000062 10.787 86.95696529999947 9.538 94.57688109999947 10.759 105.97952359999967 10.122 122.96318680000041 10.908 102.06600339999996 8.983 98.25376099999994 9.636 86.4552073999996 9.815 111.4061780000001 9.703 88.9098958999996 8.159 94.77193629999952 10.096 117.44204790000128 10.916 126.64671170000072 10.23 143.54856439999932 10.273 78.92658840000006 9.998 86.10202819999965 10.271 93.12433040000029 11.294 90.19989059999959 9.277 78.58407909999977 10.581 90.03965190000055 10.175 149.953793500001 9.186)
Error minima by case: (45.5299 6 19.8622 5 0.4762 6 2.5439 6 0.2272 6 0.0051 7 0.12 8 9.3722 6 4.3007 6 3.9802 6 2.8981 5 0.162 7 0.5968 6 0.4087 6 10.7063 7 16.0327 6 23.5625 7 5.1699 6 0.187 6 0.0486 6 0.2713 8 0.0041 7 0.254 5 0.2132 6 12.0461 6)
Average genome size in population (length): 114.868
Average program size in population (points): 115.868
Average percent parens in population: 0.009
Minimum age in population: 40.15423984825611
Maximum age in population: 44.3987995237112
Average age in population: 42.62109088315815
Median age in population: 42.63047475367785
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.917
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.917
Total error diversity:				 0.372
Error (vector) diversity:			 0.4
Behavioral diversity:				 0.4
--- Run Statistics ---
Number of program evaluations used so far: 30000
Number of point (instruction) evaluations so far: 59492652
--- Timings ---
Current time: 1529615729773 milliseconds
Total Time:         106.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        40.4 seconds, 37.9%
Fitness Testing:     52.0 seconds, 48.8%
Report:              14.1 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 29
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 30
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 30
;;******************************
;; -*- Number IO problem report - generation 30
Test total error for best: 62127.90029999997
Test mean error for best: 31.06395
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -28.013021    
Correct output: -111.892428812 | Program output: -73.013021    
Correct output: -50.5084198428 | Program output: -55.013021    
Correct output: 43.4091085878  | Program output: -8.013021     
Correct output: 135.7828450917 | Program output: 68.013021     
Correct output: -36.0049045144 | Program output: -37.013021    
Correct output: -54.8912669799 | Program output: -37.013021    
Correct output: -101.4024240283 | Program output: -73.013021    
Correct output: -36.8440401492 | Program output: 15.013021     
Correct output: -32.0101752266 | Program output: -4.013021     
Correct output: -30.9280763402 | Program output: -7.013021     
Correct output: -7.1922309574  | Program output: 4.013021      
Correct output: 9.2440077884   | Program output: -21.013021    
Correct output: -75.601313294  | Program output: -77.013021    
Correct output: 117.7063323673 | Program output: 100.013021    
Correct output: 136.2064676055 | Program output: 93.013021     
Correct output: -106.5738029547 | Program output: -55.013021    
Correct output: 135.179935086  | Program output: 62.013021     
Correct output: 79.8229926043  | Program output: 79.013021     
Correct output: 120.9514376691 | Program output: 114.013021    
Correct output: -16.7588893337 | Program output: 2.013021      
Correct output: -1.0143626863  | Program output: 15.013021     
Correct output: 82.2861853158  | Program output: 82.013021     
Correct output: 2.7192599311   | Program output: -5.013021     
Correct output: -95.0573298011 | Program output: -16.013021    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction tagged_869} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_inc} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_tan} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_rot} {:instruction float_sub} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_yank} {:instruction print_integer} {:instruction integer_dec})
Best program: (integer_mod integer_dec float_cos integer_dup in2 float_frominteger integer_yank float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc float_inc integer_min integer_yank float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 float_inc float_frominteger integer_yank integer_min float_inc float_inc tagged_869 float_inc integer_min float_inc float_frominteger tagged_869 float_inc float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_dec integer_yankdup float_dup_items float_dup_items float_stackdepth float_sub float_inc float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 in1 print_integer float_div float_stackdepth float_sub float_flush float_dup float_add float_dec float_mult integer_yankdup integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_tan float_dup integer_add integer_stackdepth float_div integer_rot float_sub float_flush integer_stackdepth float_div -21.856727626418078 in1 print_integer float_div print_integer float_flush float_tan float_inc float_sin float_div print_integer float_flush float_yank print_integer integer_dec)
Errors: [104.5179 11 38.8794 10 4.5046 8 51.4221 10 67.7698 11 1.0081 8 17.8782 11 28.3894 10 51.8571 11 27.9972 9 23.9151 9 11.2053 10 30.257 10 1.4117 6 17.6933 9 43.1934 10 51.5608 10 73.1669 10 0.81 9 6.9384 9 18.7719 12 16.0274 8 0.2732 8 7.7323 10 79.0443 8]
Total: 1013.2247999999997
Mean: 20.264496
Genome size: 125
Size: 126
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2345.5746456999996
Median total errors in population: 1022.1389
Error averages by case: (153.0206695000012 9.514 93.85527850000031 10.63 63.84438300000063 9.032 101.9589635999994 9.734 115.07702350000025 10.808 59.92982410000021 9.387 71.92181850000016 10.789 83.98418819999969 10.25 100.77886110000016 10.953 79.37700570000042 9.0 75.71110930000063 9.65 63.19561589999954 10.071 83.24527260000006 9.578 62.719799099999605 7.996 70.31503329999958 9.878 93.38913390000083 10.899 104.73599420000038 10.262 119.8591708999989 10.424 54.61864280000034 9.877 60.90661839999977 10.314 70.33563620000035 11.443 67.0307279999998 9.335 54.29794020000033 10.272 63.654218800000045 10.205 128.26871640000118 9.242)
Error minima by case: (53.0 6 15.8622 5 0.4763 7 11.4091 5 1.7801 6 0.0022 7 0.12 8 5.3722 6 10.0 5 4.98 5 0.8979 7 0.1792 8 0.1477 5 0.3987 5 3.2937 7 8.2065 7 5.4289 5 7.1799 5 0.177 5 0.0486 6 0.2713 8 0.0158 7 0.2241 5 1.311 5 41.0 6)
Average genome size in population (length): 116.826
Average program size in population (points): 117.826
Average percent parens in population: 0.009
Minimum age in population: 41.15423984825611
Maximum age in population: 45.90227276086807
Average age in population: 44.04106179643609
Median age in population: 44.04953947570175
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 6
Genome diversity (% unique Plush genomes):	 0.937
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 6
Syntactic diversity (% unique Push programs):	 0.937
Total error diversity:				 0.355
Error (vector) diversity:			 0.367
Behavioral diversity:				 0.368
--- Run Statistics ---
Number of program evaluations used so far: 31000
Number of point (instruction) evaluations so far: 62413502
--- Timings ---
Current time: 1529615734114 milliseconds
Total Time:         110.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        41.7 seconds, 37.6%
Fitness Testing:     54.4 seconds, 49.1%
Report:              14.6 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 30
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 31
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 31
;;******************************
;; -*- Number IO problem report - generation 31
Test total error for best: 62127.90029999997
Test mean error for best: 31.06395
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -28.013021    
Correct output: -111.892428812 | Program output: -73.013021    
Correct output: -50.5084198428 | Program output: -55.013021    
Correct output: 43.4091085878  | Program output: -8.013021     
Correct output: 135.7828450917 | Program output: 68.013021     
Correct output: -36.0049045144 | Program output: -37.013021    
Correct output: -54.8912669799 | Program output: -37.013021    
Correct output: -101.4024240283 | Program output: -73.013021    
Correct output: -36.8440401492 | Program output: 15.013021     
Correct output: -32.0101752266 | Program output: -4.013021     
Correct output: -30.9280763402 | Program output: -7.013021     
Correct output: -7.1922309574  | Program output: 4.013021      
Correct output: 9.2440077884   | Program output: -21.013021    
Correct output: -75.601313294  | Program output: -77.013021    
Correct output: 117.7063323673 | Program output: 100.013021    
Correct output: 136.2064676055 | Program output: 93.013021     
Correct output: -106.5738029547 | Program output: -55.013021    
Correct output: 135.179935086  | Program output: 62.013021     
Correct output: 79.8229926043  | Program output: 79.013021     
Correct output: 120.9514376691 | Program output: 114.013021    
Correct output: -16.7588893337 | Program output: 2.013021      
Correct output: -1.0143626863  | Program output: 15.013021     
Correct output: 82.2861853158  | Program output: 82.013021     
Correct output: 2.7192599311   | Program output: -5.013021     
Correct output: -95.0573298011 | Program output: -16.013021    
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_inc} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_flush} {:instruction float_dup} {:instruction float_add} {:instruction float_dec} {:instruction float_mult} {:instruction integer_yankdup} {:instruction integer_sub} {:instruction integer_swap} {:instruction integer_dup_times} {:instruction integer_stackdepth} {:instruction float_mod} {:instruction float_stackdepth} {:instruction float_sub} {:instruction float_tan} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction integer_rot} {:instruction float_sub} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_yank} {:instruction print_integer} {:instruction integer_dec})
Best program: (integer_mod integer_dec float_cos float_cos integer_add integer_dup in2 float_frominteger integer_yank float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc float_inc integer_min integer_yank float_inc float_inc integer_mult float_frominteger integer_yank integer_min float_inc float_frominteger float_frominteger float_inc integer_min float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc float_frominteger integer_yank integer_mult float_inc float_inc integer_min float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc integer_mult integer_min float_inc float_inc float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_dup_items float_dup_items float_stackdepth float_sub float_inc float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 in1 print_integer float_div float_stackdepth float_sub float_flush float_dup float_add float_dec float_mult integer_yankdup integer_sub integer_swap integer_dup_times integer_stackdepth float_mod float_stackdepth float_sub float_tan float_dup integer_add integer_stackdepth float_div integer_rot float_sub float_flush integer_stackdepth float_div -21.856727626418078 in1 print_integer float_div print_integer float_flush float_tan float_inc float_sin float_div print_integer float_flush float_yank print_integer integer_dec)
Errors: [104.5179 11 38.8794 10 4.5046 8 51.4221 10 67.7698 11 1.0081 8 17.8782 11 28.3894 10 51.8571 11 27.9972 9 23.9151 9 11.2053 10 30.257 10 1.4117 6 17.6933 9 43.1934 10 51.5608 10 73.1669 10 0.81 9 6.9384 9 18.7719 12 16.0274 8 0.2732 8 7.7323 10 79.0443 8]
Total: 1013.2247999999997
Mean: 20.264496
Genome size: 126
Size: 127
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2571.5985108000023
Median total errors in population: 1021.0785000000001
Error averages by case: (162.0277421000009 9.662 102.81143530000023 10.629 71.31996270000063 8.889 112.02472879999928 9.535 123.85572230000015 10.906 67.85695990000013 9.022 81.69655719999973 10.702 93.04549499999972 10.207 110.93160080000028 10.814 89.75884850000007 8.807 86.09083090000013 9.669 73.20658289999967 10.087 92.39862630000012 9.703 69.86593609999963 7.662 78.83936119999967 9.681 102.04406110000107 10.75 113.82780830000071 10.293 128.64547229999877 10.458 63.13407860000036 9.84 69.43800369999978 10.289 80.1983251000001 11.694 77.88633149999978 9.296 62.9370194000003 9.912 72.19557800000021 10.166 137.78844280000126 9.1)
Error minima by case: (51.0 6 16.8814 6 0.4782 7 16.4091 6 4.2474 6 0.0022 7 0.12 8 6.3914 7 2.8128 4 2.021 6 1.9171 5 0.8181 8 0.756 6 0.4008 5 8.6741 6 8.2065 6 0.5436 6 7.1497 6 0.1791 5 0.0588 6 0.7476 9 0.0144 7 0.2272 5 0.291 6 39.0 5)
Average genome size in population (length): 118.973
Average program size in population (points): 119.973
Average percent parens in population: 0.008
Minimum age in population: 43.23059099726379
Maximum age in population: 47.48952108342201
Average age in population: 45.45793347710464
Median age in population: 45.50434832647443
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.343
Error (vector) diversity:			 0.357
Behavioral diversity:				 0.358
--- Run Statistics ---
Number of program evaluations used so far: 32000
Number of point (instruction) evaluations so far: 65388352
--- Timings ---
Current time: 1529615738468 milliseconds
Total Time:         115.2 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        43.1 seconds, 37.4%
Fitness Testing:     56.8 seconds, 49.3%
Report:              15.2 seconds, 13.2%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 31
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 32
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 32
;;******************************
;; -*- Number IO problem report - generation 32
Test total error for best: 29822.0
Test mean error for best: 14.91100
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -109.53090109731027
Correct output: -111.892428812 | Program output: -88.8924288121027
Correct output: -50.5084198428 | Program output: -27.50841984281027
Correct output: 43.4091085878  | Program output: 66.40910858781027
Correct output: 135.7828450917 | Program output: 158.78284509171027
Correct output: -36.0049045144 | Program output: -13.00490451441027
Correct output: -54.8912669799 | Program output: -31.89126697991027
Correct output: -101.4024240283 | Program output: -78.40242402831027
Correct output: -36.8440401492 | Program output: -13.84404014921027
Correct output: -32.0101752266 | Program output: -9.01017522661027
Correct output: -30.9280763402 | Program output: -7.92807634021027
Correct output: -7.1922309574  | Program output: 15.80776904261027
Correct output: 9.2440077884   | Program output: 32.24400778841027
Correct output: -75.601313294  | Program output: -52.6013132941027
Correct output: 117.7063323673 | Program output: 140.70633236731027
Correct output: 136.2064676055 | Program output: 159.20646760551027
Correct output: -106.5738029547 | Program output: -83.57380295471027
Correct output: 135.179935086  | Program output: 158.1799350861027
Correct output: 79.8229926043  | Program output: 102.82299260431027
Correct output: 120.9514376691 | Program output: 143.95143766911027
Correct output: -16.7588893337 | Program output: 6.24111066631027
Correct output: -1.0143626863  | Program output: 21.98563731371027
Correct output: 82.2861853158  | Program output: 105.28618531581027
Correct output: 2.7192599311   | Program output: 25.71925993111027
Correct output: -95.0573298011 | Program output: -72.05732980111027
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction float_dec} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_shove} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_min} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_frominteger} {:instruction in1} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_min} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_sub} {:instruction integer_rot} {:instruction float_dup} {:instruction integer_add} {:instruction float_dup} {:instruction print_float} {:instruction float_min} {:instruction integer_stackdepth} {:instruction float_add} {:instruction float_dec} {:instruction print_integer} {:instruction float_min} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -20.25048860817927} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455})
Best program: (integer_mod integer_dec float_cos float_cos integer_add integer_dup in2 float_frominteger float_dec float_inc float_inc float_inc float_frominteger integer_yank integer_shove float_inc integer_mult float_inc float_inc integer_min float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_min integer_yank float_inc float_inc integer_mult float_frominteger in1 integer_min float_inc float_frominteger float_frominteger float_inc integer_min float_inc float_inc float_inc float_frominteger float_add integer_min integer_mult integer_min float_inc integer_min float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items float_stackdepth float_sub integer_rot float_dup integer_add float_dup print_float float_min integer_stackdepth float_add float_dec print_integer float_min print_integer float_flush float_inc float_mult integer_max float_tan float_inc float_sin float_div print_integer float_flush 26 float_mult integer_stackdepth float_div float_dec integer_add integer_stackdepth float_div -20.25048860817927 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
Errors: [23.0 6 23.0 7 23.0 6 23.0 6 23.0 6 23.0 6 23.0 6 23.0 7 23.0 6 23.0 6 23.0 6 23.0 14 23.0 6 23.0 6 23.0 6 23.0 6 23.0 7 23.0 6 23.0 7 23.0 6 23.0 14 23.0 14 23.0 7 23.0 5 23.0 6]
Total: 753.0
Mean: 15.06
Genome size: 122
Size: 123
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2941.453693399999
Median total errors in population: 1019.2388999999998
Error averages by case: (176.61206520000076 9.761 118.58132279999982 10.732 86.53060910000082 8.868 124.93558209999924 9.28 136.69574729999943 10.896 83.30903589999969 9.0 97.94570939999949 10.675 109.04695609999986 10.194 126.3513142000004 10.802 104.94533869999997 8.748 101.7956163999999 9.913 89.33612029999996 10.103 106.6214931 9.771 85.08404739999966 7.629 92.64254729999966 9.67 115.28870790000151 10.749 129.3455478000009 10.363 141.32333029999904 10.563 77.16516399999999 9.909 83.36412459999977 10.31 96.23854519999944 11.956 93.8886350999996 9.46 77.12578899999981 9.812 86.35062530000056 10.202 152.331718900001 9.232)
Error minima by case: (23.0 6 16.8822 6 0.4763 6 8.5553 5 19.7617 5 0.0018 6 1.8802 6 6.3922 7 10.0 5 3.989 5 1.9178 6 0.1712 8 0.7681 5 0.3987 5 9.6761 5 2.1962 6 23.0 5 19.0 5 0.1699 5 0.0518 5 0.7378 9 0.0033 7 0.2439 5 0.3018 5 23.0 4)
Average genome size in population (length): 119.275
Average program size in population (points): 120.275
Average percent parens in population: 0.008
Minimum age in population: 44.23059099726379
Maximum age in population: 48.94230227684602
Average age in population: 46.75528201884963
Median age in population: 46.78146061161533
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 12
Genome diversity (% unique Plush genomes):	 0.91
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 12
Syntactic diversity (% unique Push programs):	 0.91
Total error diversity:				 0.362
Error (vector) diversity:			 0.379
Behavioral diversity:				 0.379
--- Run Statistics ---
Number of program evaluations used so far: 33000
Number of point (instruction) evaluations so far: 68370502
--- Timings ---
Current time: 1529615742859 milliseconds
Total Time:         119.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        44.4 seconds, 37.1%
Fitness Testing:     59.2 seconds, 49.5%
Report:              15.9 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 32
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 33
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 33
;;******************************
;; -*- Number IO problem report - generation 33
Test total error for best: 25847.0
Test mean error for best: 12.92350
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -111.530901097327
Correct output: -111.892428812 | Program output: -90.89242881227
Correct output: -50.5084198428 | Program output: -29.508419842827
Correct output: 43.4091085878  | Program output: 64.409108587827
Correct output: 135.7828450917 | Program output: 156.782845091727
Correct output: -36.0049045144 | Program output: -15.004904514427
Correct output: -54.8912669799 | Program output: -33.891266979927
Correct output: -101.4024240283 | Program output: -80.402424028327
Correct output: -36.8440401492 | Program output: -15.844040149227
Correct output: -32.0101752266 | Program output: -11.010175226627
Correct output: -30.9280763402 | Program output: -9.928076340227
Correct output: -7.1922309574  | Program output: 13.807769042627
Correct output: 9.2440077884   | Program output: 30.244007788427
Correct output: -75.601313294  | Program output: -54.60131329427
Correct output: 117.7063323673 | Program output: 138.706332367327
Correct output: 136.2064676055 | Program output: 157.206467605527
Correct output: -106.5738029547 | Program output: -85.573802954727
Correct output: 135.179935086  | Program output: 156.17993508627
Correct output: 79.8229926043  | Program output: 100.822992604327
Correct output: 120.9514376691 | Program output: 141.951437669127
Correct output: -16.7588893337 | Program output: 4.241110666327
Correct output: -1.0143626863  | Program output: 19.985637313727
Correct output: 82.2861853158  | Program output: 103.286185315827
Correct output: 2.7192599311   | Program output: 23.719259931127
Correct output: -95.0573298011 | Program output: -74.057329801127
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction in1} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_add} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_frominteger} {:instruction integer_min} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction float_max} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction float_inc} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction float_shove} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_pop} {:instruction integer_dec} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction in1} {:instruction float_flush} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction integer_shove} {:instruction print_integer} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455})
Best program: (integer_mod integer_dec float_cos integer_add integer_dup in2 float_frominteger integer_yank float_inc float_frominteger float_inc integer_min float_inc float_frominteger in1 integer_min float_inc integer_mult float_inc float_add integer_min float_inc float_inc tagged_869 float_inc integer_yank float_inc float_inc float_min float_frominteger integer_min float_inc integer_min float_inc float_inc float_frominteger integer_yank integer_min float_inc float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items float_max float_inc integer_mult tagged_869 float_inc float_inc integer_mult tagged_869 float_shove tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup float_add integer_pop integer_dec integer_yankdup float_dup_items float_dup_items in1 print_integer float_div print_integer float_flush float_inc float_div print_integer float_flush float_inc float_mult integer_max float_tan float_inc float_sin float_div in1 float_flush integer_max float_tan float_inc float_sin integer_shove print_integer float_flush 26 float_mult integer_stackdepth float_div float_dec integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
Errors: [21.0 4 21.0 5 21.0 4 21.0 4 21.0 4 21.0 4 21.0 4 21.0 4 21.0 4 21.0 4 21.0 4 21.0 13 21.0 4 21.0 4 21.0 4 21.0 4 21.0 5 21.0 4 21.0 5 21.0 4 21.0 12 21.0 13 21.0 5 21.0 3 21.0 4]
Total: 654.0
Mean: 13.08
Genome size: 113
Size: 114
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3021.585805699998
Median total errors in population: 1018.1846
Error averages by case: (177.62601520000055 9.728 120.76460300000002 10.807 88.74533500000061 8.689 127.32699419999935 9.065 141.70548649999898 10.786 85.48499959999937 9.05 100.21544299999994 10.519 111.32360279999982 10.042 128.28024970000007 10.715 107.8422928 8.676 104.54507809999987 9.984 91.81941670000029 10.072 108.47841090000001 9.814 87.48778769999963 7.601 98.54526869999961 9.629 120.855846100001 10.768 131.2578343000009 10.342 146.26082179999958 10.556 83.4918221999999 9.869 89.5233936999998 10.227 98.53991509999946 12.057 96.41970989999979 9.586 83.52878909999994 9.771 89.50544280000084 10.307 154.0972468000009 9.254)
Error minima by case: (20.0 4 16.8622 5 0.4782 4 15.1852 4 20.0 4 0.0019 4 0.8782 4 6.3722 4 9.0 4 5.98 4 1.8979 4 0.1712 7 0.0297 4 0.4008 4 5.6853 4 20.0 4 15.4576 5 20.0 4 0.1791 5 0.0588 4 1.2524 9 0.0012 6 0.243 5 0.3696 3 3.9411 4)
Average genome size in population (length): 118.939
Average program size in population (points): 119.939
Average percent parens in population: 0.008
Minimum age in population: 45.23059099726379
Maximum age in population: 50.12247343733907
Average age in population: 48.09035976201715
Median age in population: 48.13105458708014
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 20
Genome diversity (% unique Plush genomes):	 0.901
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 20
Syntactic diversity (% unique Push programs):	 0.901
Total error diversity:				 0.369
Error (vector) diversity:			 0.386
Behavioral diversity:				 0.386
--- Run Statistics ---
Number of program evaluations used so far: 34000
Number of point (instruction) evaluations so far: 71344227
--- Timings ---
Current time: 1529615747179 milliseconds
Total Time:         123.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        45.7 seconds, 36.9%
Fitness Testing:     61.5 seconds, 49.7%
Report:              16.5 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 33
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 34
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 34
;;******************************
;; -*- Number IO problem report - generation 34
Test total error for best: 23963.0
Test mean error for best: 11.98150
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -112.530901097327
Correct output: -111.892428812 | Program output: -91.89242881227
Correct output: -50.5084198428 | Program output: -30.508419842827
Correct output: 43.4091085878  | Program output: 63.409108587827
Correct output: 135.7828450917 | Program output: 155.782845091727
Correct output: -36.0049045144 | Program output: -16.004904514427
Correct output: -54.8912669799 | Program output: -34.891266979927
Correct output: -101.4024240283 | Program output: -81.402424028327
Correct output: -36.8440401492 | Program output: -16.844040149227
Correct output: -32.0101752266 | Program output: -12.010175226627
Correct output: -30.9280763402 | Program output: -10.928076340227
Correct output: -7.1922309574  | Program output: 12.807769042627
Correct output: 9.2440077884   | Program output: 29.244007788427
Correct output: -75.601313294  | Program output: -55.60131329427
Correct output: 117.7063323673 | Program output: 137.706332367327
Correct output: 136.2064676055 | Program output: 156.206467605527
Correct output: -106.5738029547 | Program output: -86.573802954727
Correct output: 135.179935086  | Program output: 155.17993508627
Correct output: 79.8229926043  | Program output: 99.822992604327
Correct output: 120.9514376691 | Program output: 140.951437669127
Correct output: -16.7588893337 | Program output: 3.241110666327
Correct output: -1.0143626863  | Program output: 18.985637313727
Correct output: 82.2861853158  | Program output: 102.286185315827
Correct output: 2.7192599311   | Program output: 22.719259931127
Correct output: -95.0573298011 | Program output: -75.057329801127
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_yankdup} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_inc} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_frominteger} {:instruction in1} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_add} {:instruction integer_min} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_yank} {:instruction print_integer} {:instruction integer_dec})
Best program: (integer_mod integer_dec float_cos integer_yankdup integer_add integer_dup in2 float_frominteger integer_yank float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc float_inc integer_yank integer_min float_inc integer_mult float_frominteger in1 integer_min float_inc float_frominteger float_frominteger float_inc integer_min float_inc float_inc float_inc float_frominteger float_add integer_min integer_mult integer_min float_inc integer_min float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup float_div -21.856727626418078 in1 in1 print_integer float_div print_integer float_flush float_inc float_mult integer_max float_tan float_inc float_sin float_div print_integer float_flush 26 float_mult integer_stackdepth float_div float_dec integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_yank print_integer integer_dec)
Errors: [20.0 3 20.0 4 20.0 3 20.0 3 20.0 3 20.0 3 20.0 3 20.0 4 20.0 3 20.0 3 20.0 3 20.0 13 20.0 3 20.0 3 20.0 3 20.0 3 20.0 4 20.0 3 20.0 3 20.0 3 20.0 12 20.0 13 20.0 4 20.0 3 20.0 3]
Total: 608.0
Mean: 12.16
Genome size: 100
Size: 101
Percent parens: 0.010
--- Population Statistics ---
Average total errors in population: 3164.609006899999
Median total errors in population: 1017.6598999999999
Error averages by case: (178.365122100001 9.751 127.98398270000061 10.494 97.43845980000057 8.7 130.58333679999942 9.089 143.11243659999866 10.434 94.07543249999976 8.86 107.63801520000031 10.413 119.48988459999973 9.922 132.59575339999967 10.397 114.66590680000006 8.8 110.57407440000003 9.732 98.97189320000058 10.427 113.87896299999976 9.697 96.9616636999995 7.569 104.71477599999942 9.405 124.70083590000078 10.486 137.1254673000012 10.161 147.13828209999926 10.118 90.77068279999983 9.718 96.8738032999995 9.877 105.08699559999965 12.293 102.77982029999973 9.965 90.88908179999993 9.511 96.59201440000079 9.936 156.96832260000068 8.879)
Error minima by case: (18.0 2 15.8714 3 0.4863 2 2.4317 2 1.7716 2 0.0017 2 0.119 2 5.3814 2 8.177 2 4.9891 2 0.907 2 0.808 7 0.2581 2 0.3997 2 5.2937 2 4.2065 2 5.4375 3 3.1799 2 0.178 3 0.9302 2 0.7486 9 0.1759 6 0.2338 3 0.0346 1 18.0 2)
Average genome size in population (length): 120.464
Average program size in population (points): 121.464
Average percent parens in population: 0.008
Minimum age in population: 46.23059099726379
Maximum age in population: 51.41006349748932
Average age in population: 49.46820466912573
Median age in population: 49.51129662903259
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 15
Genome diversity (% unique Plush genomes):	 0.916
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 15
Syntactic diversity (% unique Push programs):	 0.916
Total error diversity:				 0.397
Error (vector) diversity:			 0.418
Behavioral diversity:				 0.421
--- Run Statistics ---
Number of program evaluations used so far: 35000
Number of point (instruction) evaluations so far: 74355852
--- Timings ---
Current time: 1529615751598 milliseconds
Total Time:         128.4 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        47.1 seconds, 36.7%
Fitness Testing:     64.0 seconds, 49.9%
Report:              17.1 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 34
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 35
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 35
;;******************************
;; -*- Number IO problem report - generation 35
Test total error for best: 12480.0
Test mean error for best: 6.24000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -122.53090109730
Correct output: -111.892428812 | Program output: -101.8924288120
Correct output: -50.5084198428 | Program output: -40.50841984280
Correct output: 43.4091085878  | Program output: 53.40910858780
Correct output: 135.7828450917 | Program output: 145.78284509170
Correct output: -36.0049045144 | Program output: -26.00490451440
Correct output: -54.8912669799 | Program output: -44.89126697990
Correct output: -101.4024240283 | Program output: -91.40242402830
Correct output: -36.8440401492 | Program output: -26.84404014920
Correct output: -32.0101752266 | Program output: -22.01017522660
Correct output: -30.9280763402 | Program output: -20.92807634020
Correct output: -7.1922309574  | Program output: 2.80776904260 
Correct output: 9.2440077884   | Program output: 19.24400778840
Correct output: -75.601313294  | Program output: -65.6013132940
Correct output: 117.7063323673 | Program output: 127.70633236730
Correct output: 136.2064676055 | Program output: 146.20646760550
Correct output: -106.5738029547 | Program output: -96.57380295470
Correct output: 135.179935086  | Program output: 145.1799350860
Correct output: 79.8229926043  | Program output: 89.82299260430
Correct output: 120.9514376691 | Program output: 130.95143766910
Correct output: -16.7588893337 | Program output: -6.75888933370
Correct output: -1.0143626863  | Program output: 8.98563731370 
Correct output: 82.2861853158  | Program output: 92.28618531580
Correct output: 2.7192599311   | Program output: 12.71925993110
Correct output: -95.0573298011 | Program output: -85.05732980110
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction integer_yank} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction float_inc} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction in1} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction float_add} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_inc} {:instruction float_min} {:instruction float_frominteger} {:instruction print_float} {:instruction integer_min} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction print_float} {:instruction float_add} {:instruction integer_dec} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_add} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction print_integer} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup} {:instruction float_div} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction print_integer} {:instruction float_div} {:instruction in1} {:instruction float_flush} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction integer_shove} {:instruction print_integer} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455})
Best program: (integer_mod integer_dec integer_yank integer_add integer_dup in2 float_frominteger integer_yank float_inc float_frominteger float_inc integer_min float_inc float_frominteger in1 integer_min float_inc integer_mult float_inc float_add integer_min float_inc float_inc tagged_869 float_inc integer_yank float_inc float_inc float_min float_frominteger print_float integer_min float_inc integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc print_float float_add integer_dec float_dup integer_yankdup float_add integer_inc float_add integer_pop print_integer integer_yankdup float_dup_items float_dup float_div integer_stackdepth float_div -21.856727626418078 in1 in1 print_integer float_div print_integer float_flush float_inc float_div print_integer float_flush float_inc float_mult integer_max float_tan float_inc print_integer float_div in1 float_flush integer_max float_tan float_inc float_sin integer_shove print_integer float_flush integer_stackdepth float_div float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
Errors: [10.0 2 10.0 2 10.0 2 10.0 2 10.0 2 10.0 2 10.0 2 10.0 3 10.0 2 10.0 2 10.0 2 10.0 12 10.0 2 10.0 2 10.0 2 10.0 2 10.0 3 10.0 2 10.0 2 10.0 2 10.0 2 10.0 12 10.0 2 10.0 2 10.0 2]
Total: 322.0
Mean: 6.44
Genome size: 114
Size: 115
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 3082.5221583000002
Median total errors in population: 1015.0501999999999
Error averages by case: (153.25761900000077 8.619 120.77099410000042 9.208 104.07104920000018 7.95 124.22987099999969 8.249 129.92459399999905 8.963 101.7022109000001 7.997 109.64133110000041 9.142 117.02555839999995 9.008 121.57904049999958 8.871 112.22965770000002 8.012 109.67916410000007 8.478 102.88190330000032 11.748 113.99400689999968 8.468 104.13929329999975 7.175 106.33632479999987 8.317 118.73415090000039 8.988 126.50262900000061 9.074 132.3427624999993 8.682 97.10234260000001 8.825 102.01396289999985 8.562 107.61815810000024 12.883 104.66389350000016 11.4 97.23871940000005 8.666 102.71694500000048 8.255 138.70597609999987 7.88)
Error minima by case: (9.5309 1 5.1076 2 0.4814 1 5.1629 1 3.7618 1 0.0016 1 0.1218 1 7.3904 2 0.156 1 3.0002 1 2.9161 1 0.8178 8 0.1723 1 0.3997 1 8.0309 1 3.7935 1 2.0 2 5.1799 1 0.178 1 0.0588 1 0.2511 2 0.4379 2 0.2432 2 0.158 1 3.9427 1)
Average genome size in population (length): 122.162
Average program size in population (points): 123.162
Average percent parens in population: 0.008
Minimum age in population: 48.39696039562114
Maximum age in population: 52.96697766525904
Average age in population: 50.91043129484844
Median age in population: 50.95352583439671
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 9
Genome diversity (% unique Plush genomes):	 0.926
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 9
Syntactic diversity (% unique Push programs):	 0.926
Total error diversity:				 0.411
Error (vector) diversity:			 0.474
Behavioral diversity:				 0.508
--- Run Statistics ---
Number of program evaluations used so far: 36000
Number of point (instruction) evaluations so far: 77410127
--- Timings ---
Current time: 1529615756136 milliseconds
Total Time:         132.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        48.5 seconds, 36.5%
Fitness Testing:     66.6 seconds, 50.1%
Report:              17.7 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 35
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 36
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 36
;;******************************
;; -*- Number IO problem report - generation 36
Test total error for best: 6165.0
Test mean error for best: 3.08250
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -131.53090109731027
Correct output: -111.892428812 | Program output: -110.8924288121027
Correct output: -50.5084198428 | Program output: -49.50841984281027
Correct output: 43.4091085878  | Program output: 44.40910858781027
Correct output: 135.7828450917 | Program output: 136.78284509171027
Correct output: -36.0049045144 | Program output: -35.00490451441027
Correct output: -54.8912669799 | Program output: -53.89126697991027
Correct output: -101.4024240283 | Program output: -100.40242402831027
Correct output: -36.8440401492 | Program output: -35.84404014921027
Correct output: -32.0101752266 | Program output: -31.01017522661027
Correct output: -30.9280763402 | Program output: -29.92807634021027
Correct output: -7.1922309574  | Program output: -6.19223095741027
Correct output: 9.2440077884   | Program output: 10.24400778841027
Correct output: -75.601313294  | Program output: -74.6013132941027
Correct output: 117.7063323673 | Program output: 118.70633236731027
Correct output: 136.2064676055 | Program output: 137.20646760551027
Correct output: -106.5738029547 | Program output: -105.57380295471027
Correct output: 135.179935086  | Program output: 136.1799350861027
Correct output: 79.8229926043  | Program output: 80.82299260431027
Correct output: 120.9514376691 | Program output: 121.95143766911027
Correct output: -16.7588893337 | Program output: -15.75888933371027
Correct output: -1.0143626863  | Program output: -0.01436268631027
Correct output: 82.2861853158  | Program output: 83.28618531581027
Correct output: 2.7192599311   | Program output: 3.71925993111027
Correct output: -95.0573298011 | Program output: -94.05732980111027
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction in1} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_min} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_min} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455})
Best program: (integer_mod integer_dec float_cos integer_add integer_dup in2 float_frominteger integer_yank integer_swap float_frominteger float_inc integer_min float_inc float_frominteger in1 integer_min float_inc integer_mult integer_stackdepth float_add integer_min float_inc float_inc tagged_869 float_inc integer_yank float_inc float_min integer_yank integer_min float_inc float_min float_frominteger integer_yank integer_min float_inc integer_min float_inc integer_mult float_inc integer_min float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc float_yank integer_max integer_max integer_dup_items integer_mult float_sub integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop float_dup integer_yankdup float_dup_items float_dup_items float_stackdepth float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 in1 print_integer float_div print_integer float_flush float_inc float_mult integer_max float_tan float_inc float_sin float_div float_flush 26 float_mult integer_stackdepth float_div float_dec integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
Errors: [1.0 5 1.0 5 1.0 6 1.0 5 1.0 5 1.0 5 1.0 5 1.0 5 1.0 5 1.0 5 1.0 6 1.0 5 1.0 6 1.0 5 1.0 5 1.0 5 1.0 5 1.0 5 1.0 6 1.0 5 1.0 5 1.0 5 1.0 5 1.0 5 1.0 5]
Total: 154.0
Mean: 3.08
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2024.2097680000002
Median total errors in population: 703.0
Error averages by case: (85.07622399999998 6.522 79.8139103 7.358 73.46530340000004 6.718 75.46109619999997 6.503 76.473605 6.556 71.76129470000001 6.742 72.3452496 6.887 77.91873959999994 7.463 72.56738399999993 6.509 71.43676530000003 6.636 70.12676160000005 6.68 67.99520170000007 13.217 72.78709109999997 6.431 75.29992969999996 6.573 71.54874710000001 6.489 74.4859751 6.626 79.94615599999992 7.326 76.87470040000004 6.468 67.6203446 6.874 71.43104170000001 6.512 68.04674730000004 13.131 67.44466929999996 13.435 67.65159850000003 7.154 69.33248679999998 5.889 80.23174500000006 6.368)
Error minima by case: (1.0 1 1.0 2 0.5019 1 0.399 1 1.0 1 0.0036 1 0.1217 1 1.0 2 0.844 1 0.0 1 0.9281 1 0.1652 4 0.2317 1 0.3999 1 1.0 1 1.0 1 1.0 2 1.0 1 0.1783 1 0.9244 1 0.2432 2 0.2029 5 0.2432 2 0.1594 1 0.0573 1)
Average genome size in population (length): 118.807
Average program size in population (points): 119.807
Average percent parens in population: 0.008
Minimum age in population: 50.04852660326287
Maximum age in population: 54.38657158322167
Average age in population: 52.54902093745672
Median age in population: 52.56087139408919
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 7
Genome diversity (% unique Plush genomes):	 0.928
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 7
Syntactic diversity (% unique Push programs):	 0.928
Total error diversity:				 0.34
Error (vector) diversity:			 0.442
Behavioral diversity:				 0.536
--- Run Statistics ---
Number of program evaluations used so far: 37000
Number of point (instruction) evaluations so far: 80381077
--- Timings ---
Current time: 1529615760768 milliseconds
Total Time:         137.5 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        49.8 seconds, 36.3%
Fitness Testing:     69.2 seconds, 50.3%
Report:              18.3 seconds, 13.3%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 36
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 37
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 37
;;******************************
;; -*- Number IO problem report - generation 37
Test total error for best: 4000.0
Test mean error for best: 2.00000
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -132.53090109731027
Correct output: -111.892428812 | Program output: -111.8924288121027
Correct output: -50.5084198428 | Program output: -50.50841984281027
Correct output: 43.4091085878  | Program output: 43.40910858781027
Correct output: 135.7828450917 | Program output: 135.78284509171027
Correct output: -36.0049045144 | Program output: -36.00490451441027
Correct output: -54.8912669799 | Program output: -54.89126697991027
Correct output: -101.4024240283 | Program output: -101.40242402831027
Correct output: -36.8440401492 | Program output: -36.84404014921027
Correct output: -32.0101752266 | Program output: -32.01017522661027
Correct output: -30.9280763402 | Program output: -30.92807634021027
Correct output: -7.1922309574  | Program output: -7.19223095741027
Correct output: 9.2440077884   | Program output: 9.24400778841027
Correct output: -75.601313294  | Program output: -75.6013132941027
Correct output: 117.7063323673 | Program output: 117.70633236731027
Correct output: 136.2064676055 | Program output: 136.20646760551027
Correct output: -106.5738029547 | Program output: -106.57380295471027
Correct output: 135.179935086  | Program output: 135.1799350861027
Correct output: 79.8229926043  | Program output: 79.82299260431027
Correct output: 120.9514376691 | Program output: 120.95143766911027
Correct output: -16.7588893337 | Program output: -16.75888933371027
Correct output: -1.0143626863  | Program output: -1.01436268631027
Correct output: 82.2861853158  | Program output: 82.28618531581027
Correct output: 2.7192599311   | Program output: 2.71925993111027
Correct output: -95.0573298011 | Program output: -95.05732980111027
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in1} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_min} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_min} {:instruction float_frominteger} {:instruction integer_rot} {:instruction integer_min} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_stackdepth} {:instruction float_flush} {:instruction float_dup} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction in1} {:instruction print_integer} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction float_div} {:instruction float_flush} {:instruction 26} {:instruction float_mult} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_dec} {:instruction integer_add} {:instruction integer_stackdepth} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455})
Best program: (integer_mod integer_dec float_cos integer_add integer_dup in2 float_frominteger integer_yank integer_swap float_frominteger float_inc integer_min integer_swap float_frominteger in1 integer_min float_inc integer_mult integer_stackdepth float_add integer_min float_inc float_inc tagged_869 float_inc integer_yank float_inc float_min integer_yank integer_min float_inc float_min float_frominteger integer_rot integer_min float_inc integer_min float_inc integer_mult float_inc integer_min float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc float_yank integer_max integer_max integer_dup_items integer_mult float_sub integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop float_dup integer_yankdup float_dup_items float_dup_items float_stackdepth float_flush float_dup integer_add integer_stackdepth float_div -21.856727626418078 in1 in1 print_integer float_div print_integer float_flush float_inc float_mult integer_max float_tan float_inc float_sin float_div float_flush 26 float_mult integer_stackdepth float_div float_dec integer_add integer_stackdepth float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
Errors: [0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4 0.0 4]
Total: 100.0
Mean: 2.0
Genome size: 123
Size: 124
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2073.2485217
Median total errors in population: 609.0
Error averages by case: (83.50383529999998 5.67 81.11391489999998 6.461 77.27121070000003 6.022 77.60556879999996 5.694 80.61575320000003 5.747 75.41147310000002 5.996 74.54814600000002 6.159 79.42311230000001 6.832 72.2300516999999 5.615 72.15151670000003 5.931 71.59319730000001 5.941 70.01653030000001 12.755 75.24369499999997 5.62 79.2996147 5.94 77.86662710000002 5.704 79.72214229999999 5.786 80.60059779999996 6.46 80.86213230000006 5.69 74.1174983 5.723 78.34131540000003 5.662 70.4182741 10.703 68.9908518 13.05 74.37674650000004 6.12 72.39023139999993 5.315 79.41248470000002 5.526)
Error minima by case: (0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 2 0.0 1 0.0 1 0.0 1 0.0 3 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 3 0.0 1 0.0 1 0.0 1)
Average genome size in population (length): 114.772
Average program size in population (points): 115.772
Average percent parens in population: 0.009
Minimum age in population: 51.04852660326287
Maximum age in population: 55.98802201064245
Average age in population: 54.09517499696102
Median age in population: 54.12308779446175
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 5
Genome diversity (% unique Plush genomes):	 0.939
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 5
Syntactic diversity (% unique Push programs):	 0.939
Total error diversity:				 0.317
Error (vector) diversity:			 0.407
Behavioral diversity:				 0.54
--- Run Statistics ---
Number of program evaluations used so far: 38000
Number of point (instruction) evaluations so far: 83254602
--- Timings ---
Current time: 1529615765353 milliseconds
Total Time:         142.1 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        51.2 seconds, 36.0%
Fitness Testing:     71.8 seconds, 50.5%
Report:              19.0 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 37
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 38
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 38
;;******************************
;; -*- Number IO problem report - generation 38
Test total error for best: 2179.0
Test mean error for best: 1.08950
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -131.5309010973
Correct output: -111.892428812 | Program output: -110.892428812
Correct output: -50.5084198428 | Program output: -49.5084198428
Correct output: 43.4091085878  | Program output: 44.4091085878 
Correct output: 135.7828450917 | Program output: 136.7828450917
Correct output: -36.0049045144 | Program output: -35.0049045144
Correct output: -54.8912669799 | Program output: -53.8912669799
Correct output: -101.4024240283 | Program output: -100.4024240283
Correct output: -36.8440401492 | Program output: -35.8440401492
Correct output: -32.0101752266 | Program output: -31.0101752266
Correct output: -30.9280763402 | Program output: -29.9280763402
Correct output: -7.1922309574  | Program output: -6.1922309574 
Correct output: 9.2440077884   | Program output: 10.2440077884 
Correct output: -75.601313294  | Program output: -74.601313294 
Correct output: 117.7063323673 | Program output: 118.7063323673
Correct output: 136.2064676055 | Program output: 137.2064676055
Correct output: -106.5738029547 | Program output: -105.5738029547
Correct output: 135.179935086  | Program output: 136.179935086 
Correct output: 79.8229926043  | Program output: 80.8229926043 
Correct output: 120.9514376691 | Program output: 121.9514376691
Correct output: -16.7588893337 | Program output: -15.7588893337
Correct output: -1.0143626863  | Program output: -0.0143626863 
Correct output: 82.2861853158  | Program output: 83.2861853158 
Correct output: 2.7192599311   | Program output: 3.7192599311  
Correct output: -95.0573298011 | Program output: -94.0573298011
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_frominteger} {:instruction in1} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_min} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_min} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction float_add} {:instruction integer_pop} {:instruction float_dup} {:instruction integer_yankdup} {:instruction float_dup_items} {:instruction float_dup_items} {:instruction float_flush} {:instruction float_inc} {:instruction float_div} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction print_integer} {:instruction float_div} {:instruction in1} {:instruction float_flush} {:instruction integer_max} {:instruction float_tan} {:instruction integer_sub} {:instruction float_sin} {:instruction integer_shove} {:instruction print_integer} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_div} {:instruction -21.856727626418078} {:instruction float_mult} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455})
Best program: (integer_mod integer_dec float_cos integer_add integer_dup in2 float_frominteger integer_yank integer_swap float_frominteger float_inc integer_min float_inc float_frominteger in1 integer_min float_inc integer_mult integer_stackdepth float_add integer_min float_inc float_inc tagged_869 float_inc integer_yank float_inc float_min integer_yank integer_min float_inc float_min float_frominteger integer_yank integer_min float_inc integer_min float_inc integer_mult float_inc integer_min float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc float_yank integer_max integer_max integer_dup_items integer_mult float_sub integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc float_add integer_pop float_dup integer_yankdup float_dup_items float_dup_items float_flush float_inc float_div print_integer float_flush float_inc float_mult integer_max float_tan float_inc print_integer float_div in1 float_flush integer_max float_tan integer_sub float_sin integer_shove print_integer float_flush integer_stackdepth float_div float_div -21.856727626418078 float_mult float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
Errors: [1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 2 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1 1.0 1]
Total: 54.0
Mean: 1.08
Genome size: 118
Size: 119
Percent parens: 0.008
--- Population Statistics ---
Average total errors in population: 2112.1968646999994
Median total errors in population: 469.0
Error averages by case: (84.75487009999999 5.43 82.78639849999992 5.896 79.45827990000002 5.822 79.52609230000002 5.451 80.12068830000001 5.57 77.71140769999997 5.793 78.60441300000008 5.906 82.05658070000003 6.596 76.6386888999999 5.392 75.58120449999997 5.719 75.53992930000003 5.754 74.78985230000002 12.018 77.4610621 5.439 81.38168160000002 5.724 77.19842480000005 5.526 79.14759530000002 5.566 82.20579779999993 6.203 80.28435540000005 5.457 73.79965679999995 5.473 77.73923600000003 5.386 75.37470140000006 7.019 74.08432709999997 12.776 73.81926969999999 5.512 75.1111938 5.272 80.99815740000004 5.323)
Error minima by case: (0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1 0.0 1)
Average genome size in population (length): 113.719
Average program size in population (points): 114.719
Average percent parens in population: 0.009
Minimum age in population: 53.35266717718332
Maximum age in population: 57.36885429449467
Average age in population: 55.57602071908049
Median age in population: 55.62064725597156
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 8
Genome diversity (% unique Plush genomes):	 0.925
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 8
Syntactic diversity (% unique Push programs):	 0.925
Total error diversity:				 0.323
Error (vector) diversity:			 0.378
Behavioral diversity:				 0.5
--- Run Statistics ---
Number of program evaluations used so far: 39000
Number of point (instruction) evaluations so far: 86109177
--- Timings ---
Current time: 1529615769787 milliseconds
Total Time:         146.6 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        52.5 seconds, 35.8%
Fitness Testing:     74.3 seconds, 50.7%
Report:              19.6 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 38
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

Producing offspring...
Installing next generation...
Processing generation: 39
Computing errors... Done computing errors.

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- Report at generation 39
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -132.5309010973
Correct output: -111.892428812 | Program output: -111.892428812
Correct output: -50.5084198428 | Program output: -50.5084198428
Correct output: 43.4091085878  | Program output: 43.4091085878 
Correct output: 135.7828450917 | Program output: 135.7828450917
Correct output: -36.0049045144 | Program output: -36.0049045144
Correct output: -54.8912669799 | Program output: -54.8912669799
Correct output: -101.4024240283 | Program output: -101.4024240283
Correct output: -36.8440401492 | Program output: -36.8440401492
Correct output: -32.0101752266 | Program output: -32.0101752266
Correct output: -30.9280763402 | Program output: -30.9280763402
Correct output: -7.1922309574  | Program output: -7.1922309574 
Correct output: 9.2440077884   | Program output: 9.2440077884  
Correct output: -75.601313294  | Program output: -75.601313294 
Correct output: 117.7063323673 | Program output: 117.7063323673
Correct output: 136.2064676055 | Program output: 136.2064676055
Correct output: -106.5738029547 | Program output: -106.5738029547
Correct output: 135.179935086  | Program output: 135.179935086 
Correct output: 79.8229926043  | Program output: 79.8229926043 
Correct output: 120.9514376691 | Program output: 120.9514376691
Correct output: -16.7588893337 | Program output: -16.7588893337
Correct output: -1.0143626863  | Program output: -1.0143626863 
Correct output: 82.2861853158  | Program output: 82.2861853158 
Correct output: 2.7192599311   | Program output: 2.7192599311  
Correct output: -95.0573298011 | Program output: -95.0573298011
;;******************************
--- Best Program (based on total-error) Statistics ---
Best genome: ({:instruction integer_mod} {:instruction integer_dec} {:instruction float_cos} {:instruction integer_add} {:instruction integer_dup} {:instruction in2} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_swap} {:instruction float_frominteger} {:instruction float_inc} {:instruction integer_min} {:instruction integer_swap} {:instruction float_frominteger} {:instruction in1} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_stackdepth} {:instruction float_add} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction float_inc} {:instruction integer_yank} {:instruction float_inc} {:instruction float_min} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction float_min} {:instruction float_frominteger} {:instruction integer_rot} {:instruction integer_min} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_inc} {:instruction float_frominteger} {:instruction integer_yank} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction float_inc} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction float_yank} {:instruction integer_max} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_mult} {:instruction float_sub} {:instruction integer_mult} {:instruction integer_min} {:instruction float_inc} {:instruction float_inc} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction integer_min} {:instruction float_inc} {:instruction integer_mult} {:instruction tagged_869} {:instruction integer_max} {:instruction integer_dup_items} {:instruction print_float} {:instruction float_add} {:instruction integer_inc} {:instruction float_dup} {:instruction integer_yankdup} {:instruction integer_max} {:instruction integer_inc} {:instruction print_integer} {:instruction float_flush} {:instruction float_inc} {:instruction float_mult} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction print_integer} {:instruction float_div} {:instruction in1} {:instruction float_flush} {:instruction integer_max} {:instruction float_tan} {:instruction float_inc} {:instruction float_sin} {:instruction integer_shove} {:instruction print_integer} {:instruction float_flush} {:instruction integer_stackdepth} {:instruction float_div} {:instruction float_div} {:instruction -21.856727626418078} {:instruction in1} {:instruction float_flush} {:instruction integer_pop} {:instruction print_integer} {:instruction float_pop} {:instruction float_mult} {:instruction -40.87435704053455})
Best program: (integer_mod integer_dec float_cos integer_add integer_dup in2 float_frominteger integer_yank integer_swap float_frominteger float_inc integer_min integer_swap float_frominteger in1 integer_min float_inc integer_mult integer_stackdepth float_add integer_min float_inc float_inc tagged_869 float_inc integer_yank float_inc float_min integer_yank integer_min float_inc float_min float_frominteger integer_rot integer_min float_inc integer_min float_inc integer_mult float_inc integer_min float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc float_yank integer_max integer_max integer_dup_items integer_mult float_sub integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc print_integer float_flush float_inc float_mult integer_max float_tan float_inc print_integer float_div in1 float_flush integer_max float_tan float_inc float_sin integer_shove print_integer float_flush integer_stackdepth float_div float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total: 0.0
Mean: 0.0
Genome size: 109
Size: 110
Percent parens: 0.009
--- Population Statistics ---
Average total errors in population: 2396.9036876000005
Median total errors in population: 322.0
Error averages by case: (96.64655459999993 4.825 94.65441439999992 4.962 91.37196620000005 5.229 90.37398979999998 4.817 94.93756890000006 4.979 89.81102549999997 5.078 89.02351210000002 5.258 93.31897180000006 5.849 86.47890609999995 4.687 86.59845670000001 4.984 86.5737997 5.09 83.89723270000002 9.952 88.4601677 4.934 93.23600189999996 5.106 92.76949610000005 4.931 94.35869740000004 4.94 94.31528929999989 5.584 95.08442230000004 4.882 89.18098219999997 4.895 93.20662660000005 4.509 84.0395614 5.455 82.66400369999998 12.133 89.44637070000002 4.671 86.01375159999999 4.655 93.3079182 4.729)
Error minima by case: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
Average genome size in population (length): 113.371
Average program size in population (points): 114.371
Average percent parens in population: 0.009
Minimum age in population: 54.35266717718332
Maximum age in population: 58.77958104286881
Average age in population: 57.02519310511291
Median age in population: 57.04446335977445
Minimum grain-size in population: 1.0
Maximum grain-size in population: 1.0
Average grain-size in population: 1.0
Median grain-size in population: 1.0
--- Population Diversity Statistics ---
Min copy number of one Plush genome: 1
Median copy number of one Plush genome: 1
Max copy number of one Plush genome: 4
Genome diversity (% unique Plush genomes):	 0.93
Min copy number of one Push program: 1
Median copy number of one Push program: 1
Max copy number of one Push program: 4
Syntactic diversity (% unique Push programs):	 0.93
Total error diversity:				 0.299
Error (vector) diversity:			 0.324
Behavioral diversity:				 0.414
--- Run Statistics ---
Number of program evaluations used so far: 40000
Number of point (instruction) evaluations so far: 88956402
--- Timings ---
Current time: 1529615774188 milliseconds
Total Time:         150.9 seconds
Initialization:       0.1 seconds,  0.1%
Reproduction:        53.9 seconds, 35.7%
Fitness Testing:     76.7 seconds, 50.8%
Report:              20.2 seconds, 13.4%
Other:                0.0 seconds,  0.0%
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; -*- End of report for generation 39
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


SUCCESS at generation 39
Successful program: (integer_mod integer_dec float_cos integer_add integer_dup in2 float_frominteger integer_yank integer_swap float_frominteger float_inc integer_min integer_swap float_frominteger in1 integer_min float_inc integer_mult integer_stackdepth float_add integer_min float_inc float_inc tagged_869 float_inc integer_yank float_inc float_min integer_yank integer_min float_inc float_min float_frominteger integer_rot integer_min float_inc integer_min float_inc integer_mult float_inc integer_min float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc float_yank integer_max integer_max integer_dup_items integer_mult float_sub integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc print_integer float_flush float_inc float_mult integer_max float_tan float_inc print_integer float_div in1 float_flush integer_max float_tan float_inc float_sin integer_shove print_integer float_flush integer_stackdepth float_div float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
Errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
Total error: 0.0
History: null
Size: 110


Auto-simplifying with starting size: 110
step: 0
program: (integer_mod integer_dec float_cos integer_add integer_dup in2 float_frominteger integer_yank integer_swap float_frominteger float_inc integer_min integer_swap float_frominteger in1 integer_min float_inc integer_mult integer_stackdepth float_add integer_min float_inc float_inc tagged_869 float_inc integer_yank float_inc float_min integer_yank integer_min float_inc float_min float_frominteger integer_rot integer_min float_inc integer_min float_inc integer_mult float_inc integer_min float_inc float_inc float_inc float_frominteger integer_yank integer_min float_inc integer_mult float_inc integer_mult integer_min float_inc float_inc float_yank integer_max integer_max integer_dup_items integer_mult float_sub integer_mult integer_min float_inc float_inc tagged_869 integer_max integer_dup_items integer_min float_inc integer_mult tagged_869 integer_max integer_dup_items print_float float_add integer_inc float_dup integer_yankdup integer_max integer_inc print_integer float_flush float_inc float_mult integer_max float_tan float_inc print_integer float_div in1 float_flush integer_max float_tan float_inc float_sin integer_shove print_integer float_flush integer_stackdepth float_div float_div -21.856727626418078 in1 float_flush integer_pop print_integer float_pop float_mult -40.87435704053455)
errors: [0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0]
total: 0.0
size: 110

step: 500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 1500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 2500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 3500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 4500
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

step: 5000
program: (in2 float_frominteger in1 float_add print_float)
errors: (0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0 0.0 0)
total: 0.0
size: 6

;;******************************
;; Problem-Specific Report of Simplified Solution
;;******************************
;; -*- Number IO problem report - generation 39
Test total error for best: 0.0
Test mean error for best: 0.00000
Test Case    0 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    1 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    2 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    3 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    4 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    5 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    6 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    7 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    8 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case    9 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   10 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   11 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   12 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   13 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   14 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   15 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   16 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   17 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   18 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   19 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   20 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   21 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   22 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   23 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   24 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   25 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   26 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   27 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   28 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   29 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   30 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   31 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   32 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   33 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   34 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   35 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   36 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   37 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   38 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   39 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   40 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   41 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   42 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   43 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   44 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   45 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   46 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   47 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   48 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   49 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   50 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   51 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   52 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   53 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   54 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   55 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   56 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   57 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   58 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   59 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   60 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   61 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   62 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   63 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   64 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   65 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   66 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   67 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   68 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   69 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   70 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   71 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   72 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   73 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   74 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   75 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   76 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   77 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   78 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   79 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   80 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   81 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   82 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   83 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   84 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   85 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   86 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   87 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   88 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   89 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   90 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   91 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   92 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   93 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   94 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   95 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   96 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   97 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   98 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case   99 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  100 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  101 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  102 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  103 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  104 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  105 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  106 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  107 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  108 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  109 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  110 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  111 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  112 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  113 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  114 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  115 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  116 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  117 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  118 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  119 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  120 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  121 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  122 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  123 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  124 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  125 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  126 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  127 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  128 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  129 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  130 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  131 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  132 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  133 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  134 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  135 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  136 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  137 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  138 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  139 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  140 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  141 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  142 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  143 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  144 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  145 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  146 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  147 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  148 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  149 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  150 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  151 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  152 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  153 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  154 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  155 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  156 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  157 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  158 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  159 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  160 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  161 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  162 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  163 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  164 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  165 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  166 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  167 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  168 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  169 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  170 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  171 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  172 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  173 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  174 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  175 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  176 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  177 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  178 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  179 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  180 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  181 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  182 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  183 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  184 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  185 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  186 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  187 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  188 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  189 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  190 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  191 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  192 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  193 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  194 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  195 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  196 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  197 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  198 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  199 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  200 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  201 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  202 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  203 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  204 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  205 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  206 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  207 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  208 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  209 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  210 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  211 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  212 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  213 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  214 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  215 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  216 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  217 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  218 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  219 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  220 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  221 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  222 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  223 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  224 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  225 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  226 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  227 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  228 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  229 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  230 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  231 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  232 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  233 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  234 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  235 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  236 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  237 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  238 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  239 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  240 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  241 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  242 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  243 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  244 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  245 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  246 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  247 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  248 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  249 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  250 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  251 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  252 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  253 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  254 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  255 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  256 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  257 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  258 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  259 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  260 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  261 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  262 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  263 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  264 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  265 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  266 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  267 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  268 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  269 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  270 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  271 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  272 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  273 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  274 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  275 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  276 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  277 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  278 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  279 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  280 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  281 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  282 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  283 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  284 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  285 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  286 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  287 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  288 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  289 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  290 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  291 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  292 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  293 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  294 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  295 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  296 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  297 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  298 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  299 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  300 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  301 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  302 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  303 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  304 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  305 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  306 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  307 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  308 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  309 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  310 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  311 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  312 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  313 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  314 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  315 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  316 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  317 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  318 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  319 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  320 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  321 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  322 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  323 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  324 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  325 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  326 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  327 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  328 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  329 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  330 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  331 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  332 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  333 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  334 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  335 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  336 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  337 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  338 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  339 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  340 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  341 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  342 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  343 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  344 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  345 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  346 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  347 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  348 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  349 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  350 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  351 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  352 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  353 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  354 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  355 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  356 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  357 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  358 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  359 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  360 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  361 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  362 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  363 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  364 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  365 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  366 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  367 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  368 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  369 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  370 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  371 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  372 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  373 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  374 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  375 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  376 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  377 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  378 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  379 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  380 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  381 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  382 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  383 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  384 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  385 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  386 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  387 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  388 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  389 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  390 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  391 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  392 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  393 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  394 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  395 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  396 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  397 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  398 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  399 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  400 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  401 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  402 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  403 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  404 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  405 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  406 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  407 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  408 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  409 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  410 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  411 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  412 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  413 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  414 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  415 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  416 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  417 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  418 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  419 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  420 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  421 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  422 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  423 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  424 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  425 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  426 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  427 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  428 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  429 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  430 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  431 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  432 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  433 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  434 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  435 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  436 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  437 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  438 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  439 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  440 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  441 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  442 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  443 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  444 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  445 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  446 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  447 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  448 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  449 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  450 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  451 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  452 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  453 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  454 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  455 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  456 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  457 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  458 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  459 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  460 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  461 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  462 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  463 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  464 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  465 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  466 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  467 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  468 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  469 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  470 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  471 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  472 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  473 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  474 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  475 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  476 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  477 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  478 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  479 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  480 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  481 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  482 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  483 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  484 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  485 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  486 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  487 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  488 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  489 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  490 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  491 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  492 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  493 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  494 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  495 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  496 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  497 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  498 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  499 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  500 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  501 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  502 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  503 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  504 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  505 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  506 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  507 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  508 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  509 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  510 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  511 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  512 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  513 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  514 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  515 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  516 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  517 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  518 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  519 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  520 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  521 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  522 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  523 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  524 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  525 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  526 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  527 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  528 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  529 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  530 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  531 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  532 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  533 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  534 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  535 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  536 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  537 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  538 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  539 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  540 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  541 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  542 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  543 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  544 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  545 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  546 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  547 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  548 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  549 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  550 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  551 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  552 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  553 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  554 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  555 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  556 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  557 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  558 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  559 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  560 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  561 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  562 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  563 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  564 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  565 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  566 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  567 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  568 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  569 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  570 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  571 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  572 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  573 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  574 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  575 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  576 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  577 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  578 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  579 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  580 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  581 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  582 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  583 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  584 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  585 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  586 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  587 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  588 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  589 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  590 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  591 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  592 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  593 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  594 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  595 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  596 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  597 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  598 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  599 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  600 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  601 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  602 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  603 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  604 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  605 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  606 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  607 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  608 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  609 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  610 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  611 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  612 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  613 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  614 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  615 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  616 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  617 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  618 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  619 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  620 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  621 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  622 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  623 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  624 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  625 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  626 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  627 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  628 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  629 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  630 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  631 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  632 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  633 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  634 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  635 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  636 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  637 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  638 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  639 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  640 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  641 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  642 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  643 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  644 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  645 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  646 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  647 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  648 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  649 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  650 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  651 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  652 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  653 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  654 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  655 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  656 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  657 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  658 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  659 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  660 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  661 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  662 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  663 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  664 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  665 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  666 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  667 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  668 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  669 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  670 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  671 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  672 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  673 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  674 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  675 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  676 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  677 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  678 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  679 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  680 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  681 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  682 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  683 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  684 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  685 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  686 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  687 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  688 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  689 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  690 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  691 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  692 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  693 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  694 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  695 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  696 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  697 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  698 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  699 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  700 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  701 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  702 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  703 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  704 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  705 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  706 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  707 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  708 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  709 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  710 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  711 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  712 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  713 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  714 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  715 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  716 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  717 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  718 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  719 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  720 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  721 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  722 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  723 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  724 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  725 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  726 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  727 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  728 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  729 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  730 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  731 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  732 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  733 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  734 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  735 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  736 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  737 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  738 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  739 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  740 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  741 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  742 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  743 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  744 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  745 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  746 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  747 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  748 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  749 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  750 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  751 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  752 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  753 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  754 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  755 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  756 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  757 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  758 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  759 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  760 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  761 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  762 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  763 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  764 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  765 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  766 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  767 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  768 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  769 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  770 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  771 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  772 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  773 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  774 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  775 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  776 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  777 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  778 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  779 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  780 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  781 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  782 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  783 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  784 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  785 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  786 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  787 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  788 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  789 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  790 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  791 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  792 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  793 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  794 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  795 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  796 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  797 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  798 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  799 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  800 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  801 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  802 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  803 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  804 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  805 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  806 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  807 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  808 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  809 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  810 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  811 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  812 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  813 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  814 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  815 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  816 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  817 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  818 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  819 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  820 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  821 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  822 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  823 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  824 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  825 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  826 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  827 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  828 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  829 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  830 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  831 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  832 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  833 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  834 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  835 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  836 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  837 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  838 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  839 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  840 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  841 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  842 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  843 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  844 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  845 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  846 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  847 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  848 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  849 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  850 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  851 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  852 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  853 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  854 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  855 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  856 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  857 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  858 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  859 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  860 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  861 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  862 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  863 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  864 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  865 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  866 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  867 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  868 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  869 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  870 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  871 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  872 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  873 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  874 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  875 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  876 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  877 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  878 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  879 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  880 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  881 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  882 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  883 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  884 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  885 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  886 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  887 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  888 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  889 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  890 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  891 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  892 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  893 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  894 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  895 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  896 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  897 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  898 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  899 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  900 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  901 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  902 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  903 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  904 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  905 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  906 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  907 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  908 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  909 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  910 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  911 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  912 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  913 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  914 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  915 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  916 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  917 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  918 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  919 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  920 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  921 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  922 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  923 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  924 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  925 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  926 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  927 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  928 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  929 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  930 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  931 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  932 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  933 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  934 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  935 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  936 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  937 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  938 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  939 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  940 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  941 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  942 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  943 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  944 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  945 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  946 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  947 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  948 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  949 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  950 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  951 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  952 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  953 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  954 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  955 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  956 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  957 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  958 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  959 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  960 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  961 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  962 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  963 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  964 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  965 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  966 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  967 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  968 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  969 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  970 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  971 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  972 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  973 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  974 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  975 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  976 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  977 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  978 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  979 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  980 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  981 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  982 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  983 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  984 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  985 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  986 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  987 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  988 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  989 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  990 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  991 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  992 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  993 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  994 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  995 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  996 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  997 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  998 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
Test Case  999 | Numeric Error:    0.00000000000000 | Levenshtein Distance: 0
;;------------------------------
Outputs of best individual on training cases:
Correct output: -132.5309010973 | Program output: -132.5309010973
Correct output: -111.892428812 | Program output: -111.892428812
Correct output: -50.5084198428 | Program output: -50.5084198428
Correct output: 43.4091085878  | Program output: 43.4091085878 
Correct output: 135.7828450917 | Program output: 135.7828450917
Correct output: -36.0049045144 | Program output: -36.0049045144
Correct output: -54.8912669799 | Program output: -54.8912669799
Correct output: -101.4024240283 | Program output: -101.4024240283
Correct output: -36.8440401492 | Program output: -36.8440401492
Correct output: -32.0101752266 | Program output: -32.0101752266
Correct output: -30.9280763402 | Program output: -30.9280763402
Correct output: -7.1922309574  | Program output: -7.1922309574 
Correct output: 9.2440077884   | Program output: 9.2440077884  
Correct output: -75.601313294  | Program output: -75.601313294 
Correct output: 117.7063323673 | Program output: 117.7063323673
Correct output: 136.2064676055 | Program output: 136.2064676055
Correct output: -106.5738029547 | Program output: -106.5738029547
Correct output: 135.179935086  | Program output: 135.179935086 
Correct output: 79.8229926043  | Program output: 79.8229926043 
Correct output: 120.9514376691 | Program output: 120.9514376691
Correct output: -16.7588893337 | Program output: -16.7588893337
Correct output: -1.0143626863  | Program output: -1.0143626863 
Correct output: 82.2861853158  | Program output: 82.2861853158 
Correct output: 2.7192599311   | Program output: 2.7192599311  
Correct output: -95.0573298011 | Program output: -95.0573298011
;;******************************
